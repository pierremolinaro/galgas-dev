//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <primary_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                      !@semanticExpressionAST outExpression {
    $nil$
    outExpression = @nilExpressionAST {!.here}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <primary> ?!@galgasDeclarationAST unused ioDeclarations
                 !@semanticExpressionAST outExpression {
    $nil$
    outExpression = @nilExpressionAST {!.here}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

class @nilExpressionAST : @semanticExpressionAST {
  private let @location mLocation

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterExpressionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method analyzeSemanticExpression
                    ?usefulnessCallerEntityName: let @lstring unused inUsefulnessCallerEntityName
                    ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
                    ?inferenceType: let @unifiedTypeMapEntry inType
                    ?let @analysisContext unused inAnalysisContext
                    ?!@unifiedTypeMap unused ioTypeMap
                    ?!@localVarManager unused ioVariableMap
                    !@semanticExpressionForGeneration outExpression {
    if [inType isNull] then
      error self.mLocation : "cannot infer type" : outExpression
    else
      let unwrappedType = [inType definition].unwrappedType
      if [unwrappedType isNull] then
        error self.mLocation : "the inferred type @" + unwrappedType.typeName
         + " is not an optional type" : outExpression
      else
        outExpression = @nilExpressionForGeneration {!inType !self.mLocation}
      end
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! CODE GENERATION
//--------------------------------------------------------------------------------------------------

class @nilExpressionForGeneration : @semanticExpressionForGeneration {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method generateExpression ?!@string unused ioGeneratedCode
                                      ?!@stringset unused ioInclusionSet
                                      ?!@uint unused ioTemporaryVariableIndex
                                      ?!@stringset unused ioUnusedVariableCppNameSet
                                      !@string outCppExpression {
    outCppExpression = "GGS_" + [self.mResultType identifierRepresentation] + "::init_nil ()"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
