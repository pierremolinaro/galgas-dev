#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Generate predefined types                
#                                           
#  Copyright (C) 2010, ..., 2015 Pierre Molinaro.                                                                      *
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc appendPredefinedListTypeAST
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ?let @string inElementTypeName
  ?!@lstringlist ioUsefulnessRootEntities 
 {
  @propertyInCollectionListAST attributeList = {}
  attributeList +=
    !@lstring.new {!inElementTypeName !@location.here}
    !@lstring.new {!"mValue" !@location.here}
    !true
    !{}
  ioDeclarationListASTs += !@listDeclarationAST.new {
    !true # Is predefined
    !@lstring.new {!inElementTypeName + "list" !@location.here}
    !attributeList
  }
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !inElementTypeName + "list")
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc appendPredefined2StringListTypeAST
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ?!@lstringlist ioUsefulnessRootEntities 
{
  var attributeList =@propertyInCollectionListAST {}
  attributeList +=
    !@lstring.new {!"string" !@location.here}
    !@lstring.new {!"mValue0" !@location.here}
    !true
    !{}
  attributeList +=
    !@lstring.new {!"string" !@location.here}
    !@lstring.new {!"mValue1" !@location.here}
    !true
    !{}

  ioDeclarationListASTs += !@listDeclarationAST.new {
    !true # Is predefined
    !@lstring.new {!"2stringlist" !@location.here}
    !attributeList
  }
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"2stringlist")
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc appendPredefined2LStringListTypeAST
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ?!@lstringlist ioUsefulnessRootEntities 
{
  @propertyInCollectionListAST attributeList = {}
  attributeList +=
    !@lstring.new {!"lstring" !@location.here}
    !@lstring.new {!"mValue0" !@location.here}
    !true
    !{}
  attributeList +=
    !@lstring.new {!"lstring" !@location.here}
    !@lstring.new {!"mValue1" !@location.here}
    !true
    !{}

  ioDeclarationListASTs += !@listDeclarationAST.new {
    !true # Is predefined
    !@lstring.new {!"2lstringlist" !@location.here}
    !attributeList
  }
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"2lstringlist")
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc appendStructASTForTypeWithLocation
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ?let @string inElementTypeName
  ?!@lstringlist ioUsefulnessRootEntities 
{
  var attributeList =@propertyInCollectionListAST {}
  attributeList += 
    !@lstring.new {!inElementTypeName !@location.here}
    !@lstring.new {!inElementTypeName !@location.here}
    !true
    !{}
  attributeList +=
    !@lstring.new {!"location" !@location.here}
    !@lstring.new {!"location" !@location.here}
    !true
    !{}
  ioDeclarationListASTs += !@structDeclarationAST.new {
    !true # Is prefined
    !@lstring.new {!"l" + inElementTypeName !@location.here}
    !attributeList
    !""
  }
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"l" + inElementTypeName)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc appendStructASTForRangeType
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ?!@lstringlist ioUsefulnessRootEntities 
{
  @propertyInCollectionListAST attributeList = {}
  attributeList +=
    !@lstring.new {!"uint" !@location.here}
    !@lstring.new {!"start" !@location.here}
    !true
    !{}
  attributeList +=
    !@lstring.new {!"uint" !@location.here}
    !@lstring.new {!"length" !@location.here}
    !true
    !{}
  ioDeclarationListASTs += !@structDeclarationAST.new {
    !true # Is prefined
    !@lstring.new {!"range" !@location.here}
    !attributeList
    !"uint"
  }
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"range")
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc insertInUsefulnessEntities ?!@lstringlist ioUsefulnessRootEntities ?let @string inTypeName {
  let typeUsefulnessName = typeNameForUsefulEntitiesGraph (!.new{!inTypeName !.nowhere})
  ioUsefulnessRootEntities += !typeUsefulnessName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc appendPredefinedTypesASTs
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ?!@lstringlist ioUsefulnessRootEntities 
{
  ioDeclarationListASTs += !@applicationPredefinedTypeAST.new {!true !"application" !.predefined_application}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"application")
  ioDeclarationListASTs += !@bigintPredefinedTypeAST.new {!true !"bigint" !.predefined_bigint}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"bigint")
  ioDeclarationListASTs += !@binarysetPredefinedTypeAST.new {!true !"binaryset" !.predefined_binaryset}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"binaryset")
  ioDeclarationListASTs += !@boolPredefinedTypeAST.new {!true !"bool" !.predefined_bool}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"bool")
  ioDeclarationListASTs += !@charPredefinedTypeAST.new {!true !"char" !.predefined_char}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"char")
  ioDeclarationListASTs += !@dataPredefinedTypeAST.new {!true !"data" !.predefined_data}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"data")
  ioDeclarationListASTs += !@doublePredefinedTypeAST.new {!true !"double" !.predefined_double}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"double")
  ioDeclarationListASTs += !@filewrapperPredefinedTypeAST.new {!true !"filewrapper" !.predefined_filewrapper}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"filewrapper")
  ioDeclarationListASTs += !@functionPredefinedTypeAST.new {!true !"function" !.predefined_function}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"function")
  ioDeclarationListASTs += !@locationPredefinedTypeAST.new {!true !"location" !.predefined_location}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"location")
  ioDeclarationListASTs += !@objectPredefinedTypeAST.new {!true !"object" !.predefined_object}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"object")
  ioDeclarationListASTs += !@sintPredefinedTypeAST.new {!true !"sint" !.predefined_sint}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"sint")
  ioDeclarationListASTs += !@sint64PredefinedTypeAST.new {!true !"sint64" !.predefined_sint64}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"sint64")
  ioDeclarationListASTs += !@stringPredefinedTypeAST.new {!true !"string" !.predefined_string}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"string")
  ioDeclarationListASTs += !@stringsetPredefinedTypeAST.new {!true !"stringset" !.predefined_stringset}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"stringset")
  ioDeclarationListASTs += !@timerPredefinedTypeAST.new {!true !"timer" !.predefined_timer}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"timer")
  ioDeclarationListASTs += !@typePredefinedTypeAST.new {!true !"type" !.predefined_type}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"type")
  ioDeclarationListASTs += !@uintPredefinedTypeAST.new {!true !"uint" !.predefined_uint}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"uint")
  ioDeclarationListASTs += !@uint64PredefinedTypeAST.new {!true !"uint64" !.predefined_uint64}
  insertInUsefulnessEntities (!?ioUsefulnessRootEntities !"uint64")

  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"function" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"luint" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"lstring" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"object" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"string" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"type" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"uint" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"uint64" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"bigint" !?ioUsefulnessRootEntities)
  appendPredefinedListTypeAST (!?ioDeclarationListASTs !"lbigint" !?ioUsefulnessRootEntities)

  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"bool" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"bigint" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"char" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"double" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"sint" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"sint64" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"string" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"uint" !?ioUsefulnessRootEntities)
  appendStructASTForTypeWithLocation (!?ioDeclarationListASTs !"uint64" !?ioUsefulnessRootEntities)

  appendPredefined2StringListTypeAST (!?ioDeclarationListASTs !?ioUsefulnessRootEntities)
  appendPredefined2LStringListTypeAST (!?ioDeclarationListASTs !?ioUsefulnessRootEntities)

  appendStructASTForRangeType (!?ioDeclarationListASTs !?ioUsefulnessRootEntities)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @predefinedTypeAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mPredefinedTypeName !@location.here}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @predefinedTypeAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
  let optionalMethodMap = @optionalMethodMap {}
  [self getConstructorMap !?ioSemanticContext.mTypeMap ?var @constructorMap constructorMap]
  [self getGetterMap !?ioSemanticContext.mTypeMap ?var @getterMap getterMap]
  [self getSetterMap !?ioSemanticContext.mTypeMap ?var @setterMap setterMap]
  [self getInstanceMethodMap !?ioSemanticContext.mTypeMap ?var @instanceMethodMap instanceMethodMap]
  [self getClassMethodMap !?ioSemanticContext.mTypeMap ?var @classMethodMap classMethodMap]
  [self getAddAssignArgumentList !?ioSemanticContext.mTypeMap ?var @functionSignature addAssignArgumentList]
  [self getEnumerationList
    !?ioSemanticContext.mTypeMap
    ?var @enumerationDescriptorList enumerationList
    ?var @string enumeratedTypeName
  ]
  [@unifiedTypeMap-entry makeEntryFromString
    !?ioSemanticContext.mTypeMap
    !self.mPredefinedTypeName
    ?var @unifiedTypeMap-entry selfTypeEntry
  ]
#--- Enumeration
  @unifiedTypeMap-entry enumeratedTypeEntry
  if enumeratedTypeName == "" then
    enumeratedTypeEntry = @unifiedTypeMap-entry.null
  else
    [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !enumeratedTypeName ?enumeratedTypeEntry]
  end
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !@lstring.new {!self.mPredefinedTypeName !@location.here}
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
#---
  [!?ioSemanticContext.mTypeMap insertKey
    !@lstring.new {!self.mPredefinedTypeName !@location.here}
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-entry.null
    !@typeKindEnum. predefinedType
    !self.mPredefinedTypeName == "stringset" # Only @stringset supports collection value
    !@typedPropertyList.emptyList
    !{}
    !@typedPropertyList.emptyList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !classMethodMap
    !optionalMethodMap
    !enumerationList
    ![self getSupportedOperatorFlags]
    !addAssignArgumentList
    !{}
    !{}
    !@mapSearchMethodListAST.emptyList
    !@mapSearchMethodListAST.emptyList
    !false # Do not generate header in separate file
    !enumeratedTypeEntry
    ![self.mKind defaultConstructorName]
    !"galgas2/predefined-types"
    !@headerKind.twoHeaders
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @predefinedTypeAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!.new {!self.mPredefinedTypeName !.here})
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#---
  ioSemanticDeclarationListForGeneration +=
    !"Predefined type " + self.mPredefinedTypeName
    !@primitiveTypeForGeneration.new {
      !.searchKey {!inSemanticContext.mTypeMap !.new {!self.mPredefinedTypeName !.here}}
      !self.mPredefinedTypeName
      !self.mKind
    }
#    !"Predefined type " + mPredefinedTypeName
#    !if mPredefinedTypeName == "stringset" then "Predefined type stringlist" else "" end
#    !""
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

