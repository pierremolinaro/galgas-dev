#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  GALGAS scanner definition
#
#  Copyright (C) 1997, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

lexique galgasScanner3 {
#--- indexing keys
indexing classDefinition : "Class Definition"
indexing enumDefinition : "Enum Definition"
indexing structDefinition : "Struct Definition"
indexing listDefinition : "List Definition"
indexing sortedListDefinition : "Sorted List Definition"
indexing mapDefinition : "Map Definition"
indexing dictionaryDefinition : "Dictionary Definition"
indexing externTypeDefinition : "Extern Type Definition"
indexing filewrapperDefinition : "Filewrapper Definition"
indexing filewrapperReference : "Filewrapper Reference"
indexing graphDefinition : "Graph Definition"
indexing classReferencedAsSuperClass : "Class Reference as Superclass"
indexing typeReferenceInConstructor : "Type reference in Constructor"
indexing typeReferenceInTypeMethod : "Type reference in Type Method"
indexing routineDefinition : "Routine Definition"
indexing routineCall : "Routine Call"
indexing functionDefinition : "Function Definition"
indexing functionCall : "Function Call"
indexing terminalDeclaration : "Terminal Declaration"
indexing terminalReference : "Terminal Reference"
indexing ruleDefinition : "Rule Definition"
indexing ruleReference : "Rule Reference"

indexing abstractExtensionSetterDefinition : "Abstract Extension Setter Definition"
indexing typeReferenceAbstractExtensionSetter : "Abstract Extension Setter Definition"
indexing overrideabstractExtensionSetterDefinition : "Override Abstract Extension Setter Definition"
indexing extensionSetterDefinition : "Extension Setter Definition"
indexing typeReferenceExtensionSetter : "Extension Setter Definition"
indexing overrideExtensionSetterDefinition : "Override Extension Setter Definition"
indexing typeReferenceOverrideExtensionSetterDefinition : "Override Extension Setter Definition"
indexing typeReferenceOverrideAbstractExtensionSetter : "Override Abstract Extension Setter Definition"

indexing abstractExtensionMethodDefinition : "Abstract Extension Method Definition"
indexing typeReferenceAbstractExtensionMethod : "Abstract Extension Method Definition"
indexing overrideAbstractExtensionMethodDefinition : "Override Abstract Extension Method Definition"
indexing extensionMethodDefinition : "Extension Method Definition"
indexing typeReferenceExtensionMethod : "Extension Method Definition"
indexing overrideExtensionMethodDefinition : "Override Extension Method Definition"
indexing typeReferenceOverrideExtensionMethodDefinition : "Override Extension Method Definition"
indexing typeReferenceOverrideAbstractExtensionMethod : "Override Abstract Extension Method Definition"

indexing abstractExtensionGetterDefinition : "Abstract Extension Getter Definition"
indexing typeReferenceAbstractExtensionGetter : "Abstract Extension Getter Definition"
indexing overrideAbstractExtensionGetterDefinition : "Override Abstract Extension Getter Definition"
indexing typeReferenceOverrideAbstractExtensionGetter : "Override Abstract Extension Getter Definition"
indexing extensionGetterDefinition : "Extension Getter Definition"
indexing typeReferenceExtensionGetter : "Extension Getter Definition"
indexing overrideExtensionGetterDefinition : "Override Extension Getter Definition"
indexing typeReferenceOverrideExtensionGetter : "Override Extension Getter Definition"

indexing optionComponentDefinition : "Option Component Definition"
indexing optionComponentReference : "Option Component Reference"
indexing grammarComponentDefinition : "Grammar Component Definition"
indexing grammarComponentReference : "Grammar Component Reference"

indexing indexingNameDefinition : "Indexing Name Definition"
indexing indexingNameReference : "Indexing Name Reference"

#--- Scanner attributes
@string identifierString
@uint uint32value
@sint sint32value
@uint64 uint64value
@sint64 sint64value
@char charValue
@string tokenString

style keywordsStyle -> "Keywords"
style delimitersStyle -> "Delimiters"
style selectorStyle -> "Selectors"
style terminalStyle -> "Terminal Symbols"
style nonTerminalStyle -> "Non Terminal Symbols"
style integerStyle -> "Integer Constants"
style bigintStyle -> "Big Integer Constants"
style floatStyle -> "Floating Point Constants"
style characterStyle -> "Character Constants"
style stringStyle -> "String Constants"
style typeNameStyle -> "Type Names (@...)"
style attributeStyle -> "Attributes (%...)"
style commentStyle -> "Comments"

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier"

list galgasKeyWordList style keywordsStyle error message "the '%K' keyword" {
  "abstract",
  "after",
  "as",
  "bang",
  "before",
  "between",
  "block",
  "boolset",
  "cast",
  "case",
  "class",
  "default",
  "dict",
  "do",
  "drop",
  "else",
  "elsif",
  "end",
  "enum",
  "error",
  "extension",
  "extern",
  "false",
  "fileprivate",
  "filewrapper",
  "for",
  "final",
  "fixit",
  "func",
  "getter",
  "grammar",
  "graph",
  "gui",
  "if",
  "in",
  "indexing",
  "init",
  "insert",
  "is",
  "label",
  "let",
  "lexique",
  "list",
  "log",
  "loop",
  "map",
  "message",
  "method",
  "mod",
  "mutating",
  "nil",
  "not",
  "on",
  "operator",
  "option",
  "or",
  "override",
#  "package",
  "parse",
  "public",
  "protected",
  "private",
  "proc",
  "project",
  "refclass",
  "remove",
  "repeat",
  "replace",
  "rewind",
  "rule",
  "search",
  "select",
  "self",
  "send",
  "setter",
  "sortedlist",
  "spoil",
  "struct",
  "style",
  "super",
  "switch",
  "syntax",
  "tag",
  "template",
  "then",
  "true",
  "typealias",
  "unused",
  "valueclass",
  "var",
  "warning",
  "while",
  "with"
}

rule isUnicodeLetter {
  repeat
    enterCharacterIntoString (!?identifierString !toLower (!*))
    enterCharacterIntoString (!?tokenString !*)
  while isUnicodeLetter | '_' | '0'->'9' :
  end
  send search identifierString in galgasKeyWordList default $identifier$
}

#------------------------------- Integer, floating Point Constant ------------------
@double floatValue
@bigint bigintValue
$double.xxx$ !floatValue !tokenString style floatStyle error message "a float number"
$literalInt$ !bigintValue style bigintStyle error message "a big integer number"

message floatNumberConversionError : "invalid float number"
message internalError : "internal error"
message hexDigitError : "0x should be followed by a hexadecimal digit"

rule "0x" {
  repeat
  while '_' :
  end
  select
  case '0'->'9' | 'a'->'f' | 'A'->'F' :
    enterCharacterIntoString (!?tokenString !* )
    repeat
    while '0'->'9' | 'a'->'f' | 'A'->'F' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    convertHexStringIntoBigInt (!tokenString !?bigintValue error internalError)
    send $literalInt$
  default
    error hexDigitError
  end
}

rule '0'->'9' {
  enterCharacterIntoString (!?tokenString !* )
  repeat
  while '0'->'9' :
    enterCharacterIntoString (!?tokenString !* )
  while '_' :
  end
  select
  case '.' :
    enterCharacterIntoString (!?tokenString !'.')
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    convertStringToDouble (!tokenString !?floatValue error floatNumberConversionError )
    send $double.xxx$
  default
    convertDecimalStringIntoBigInt (!tokenString !?bigintValue error internalError )
    send $literalInt$
  end
}


#------------------------------- Floating point Number ------------------
$.$ style delimitersStyle error message "the '.' delimitor"
$...$ style delimitersStyle error message "the '...' delimitor"
$..<$ style delimitersStyle error message "the '..<' delimitor"

#--- Floating Point constant begining with a dot
rule '.' {
  select
  case '0'->'9' :
    enterCharacterIntoString (!?tokenString !'0')
    enterCharacterIntoString (!?tokenString !'.')
    enterCharacterIntoString (!?tokenString !* )
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    convertStringToDouble (!tokenString !?floatValue error floatNumberConversionError )
    send $double.xxx$
  default
    select
    case ".." :
      send $...$
    case ".<" :
      send $..<$
    default
      send $.$
    end
  end
}


# -------------------------- Type Name -----------------------------

$@type$ ! tokenString style typeNameStyle error message "a type name (@...)"

message incorrectTypeNameError : "in a type name, a letter, a digit or the underscore character should follow the '@' character"

rule '@' {
  select
  case 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    end
#    select
#    case '-' :
#      repeat
#        enterCharacterIntoString (!?tokenString !* )
#      while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
#      end
#    default
#    end
  default
    error incorrectTypeNameError
  end
  send $@type$
}

# -------------------------- Attribute -----------------------------

message attributeError : "in an attribute name, a letter or a digit should follow the '%' character"

message undefinedAttribute : "undefined attribute"

list attributeKeyWordList style attributeStyle error message "the '%K' keyword" {
  "app-link" -> $%app-link$,
  "app-source" -> $%app-source$,
  "applicationBundleBase" -> $%applicationBundleBase$,
  "clonable" -> $%clonable$,
  "codeblocks-linux32" -> $%codeblocks-linux32$,
  "codeblocks-linux64" -> $%codeblocks-linux64$,
  "codeblocks-windows" -> $%codeblocks-windows$,
  "comparable" -> $%comparable$,
  "equatable" -> $%equatable$,
  "from" -> $%from$,
  "generatedInSeparateFile" -> $%generatedInSeparateFile$,
  "initArgLabel" -> $%initArgLabel$,
  "libpmAtPath" -> $%libpmAtPath$,
  "MacOS" -> $%MacOS$,
  "MacOSDeployment" -> $%MacOSDeployment$,
  "macCodeSign" -> $%macCodeSign$,
  "makefile-macosx" -> $%makefile-macosx$,
  "makefile-unix" -> $%makefile-unix$,
  "makefile-x86linux32-on-macosx" -> $%makefile-x86linux32-on-macosx$,
  "makefile-x86linux64-on-macosx" -> $%makefile-x86linux64-on-macosx$,
  "makefile-win32-on-macosx" -> $%makefile-win32-on-macosx$,
  "nonAtomicSelection" -> $%nonAtomicSelection$,
  "once" -> $%once$,
  "preserved" -> $%preserved$,
  "quietOutputByDefault" -> $%quietOutputByDefault$,
  "templateEndMark" -> $%templateEndMark$,
  "testGetters" -> $%testGetters$,
  "tool-source" -> $%tool-source$,
  "translate" -> $%translate$,
  "usefull" -> $%usefull$
}

rule '%' {
  select
  case isUnicodeLetter :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while isUnicodeLetter | '-' | '_' | '0'->'9' :
    end
  default
    error attributeError
  end
  send search tokenString in attributeKeyWordList default error undefinedAttribute
}

#--------------------------------- Character constant ------------------------------------
$'char'$ ! charValue style characterStyle error message "a character constant"

message incorrectCharConstant : "incorrect literal character"

message invalideUnicodeDefinition4 : "\\u should be followed by exactly four hexadecimal digits"

message invalideUnicodeDefinition8 : "\\U should be followed by exactly eight hexadecimal digits"

message unassignedUnicodeValue : "this value does not correspond to an assigned Unicode point"

rule '\'' {
  select
  case '\\' :
    select
    case 'f' :
      enterCharacterIntoCharacter (!?charValue !'\f')
    case 'n' :
      enterCharacterIntoCharacter (!?charValue !'\n')
    case 'r' :
      enterCharacterIntoCharacter (!?charValue !'\r')
    case 't' :
      enterCharacterIntoCharacter (!?charValue !'\t')
    case 'v' :
      enterCharacterIntoCharacter (!?charValue !'\v')
    case '\\' :
      enterCharacterIntoCharacter (!?charValue !'\\')
    case '0' :
      enterCharacterIntoCharacter (!?charValue !'\0')
    case '\'' :
      enterCharacterIntoCharacter (!?charValue !'\'')
    case 'u' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
           enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
            default
              error invalideUnicodeDefinition4
            end
          default
            error invalideUnicodeDefinition4
          end
        default
          error invalideUnicodeDefinition4
        end
      default
        error invalideUnicodeDefinition4
      end
    case 'U' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
            enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              select
              case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                select
                case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                  enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                  select
                  case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                   enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                    select
                    case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                      enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                      convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
                    default
                      error invalideUnicodeDefinition8
                    end
                  default
                    error invalideUnicodeDefinition8
                  end
                default
                  error invalideUnicodeDefinition8
                end
              default
                error invalideUnicodeDefinition8
              end
            default
              error invalideUnicodeDefinition8
            end
          default
            error invalideUnicodeDefinition8
          end
        default
          error invalideUnicodeDefinition8
        end
      default
        error invalideUnicodeDefinition8
      end
    default
      error incorrectCharConstant
    end
  case ' ' -> '\uFFFD' :
     enterCharacterIntoCharacter (!?charValue !* )
  default
    error incorrectCharConstant
  end
  select
  case '\'' :
    send $'char'$
  default
    error incorrectCharConstant
  end
}

#----------------------- Grammar terminal symbol ---------------------------
$\$terminal\$$ ! tokenString style terminalStyle error message "a terminal symbol ($...$)"

message incorrect_terminal_start : "incorrect terminal start"

message incorrect_terminal_end : "terminal does not end with '$'"

rule '$' {
  select
  case "\\\\" :
    enterCharacterIntoString (!?tokenString !'\\')
    repeat
    while "\\\\" :
      enterCharacterIntoString (!?tokenString !'\\')
    while "\\$" :
      enterCharacterIntoString (!?tokenString !'$')
    while '!' -> '#' | '%' -> '\uFFFD' :
      enterCharacterIntoString (!?tokenString !* )
    end
  case "\\$" :
    enterCharacterIntoString (!?tokenString !'$')
    repeat
    while "\\\\" :
      enterCharacterIntoString (!?tokenString !'\\')
    while "\\$" :
      enterCharacterIntoString (!?tokenString !'$')
    while '!' -> '#' | '%' -> '\uFFFD' :
      enterCharacterIntoString (!?tokenString !* )
    end
  case '!' -> '#' | '%' -> '\uFFFD'  : # All printable characters, but '$'
    enterCharacterIntoString (!?tokenString !* )
    repeat
    while "\\\\" :
      enterCharacterIntoString (!?tokenString !'\\')
    while "\\$" :
      enterCharacterIntoString (!?tokenString !'$')
    while '!' -> '#' | '%' -> '\uFFFD' :
      enterCharacterIntoString (!?tokenString !* )
    end
  default
    error incorrect_terminal_start
  end
  select
  case '$' :
  default
    error incorrect_terminal_end
  end
  send $\$terminal\$$
}

# ------------------------------------ Comment ----------------------------
$comment$ style commentStyle %nonAtomicSelection error message "a comment"
$commentMark$ style commentStyle %nonAtomicSelection error message "a comment"

rule '#' {
  select
  case '!' :
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $commentMark$
  default
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\U0010FFFF' :
    end
    drop $comment$
  end
}

rule "//" {
  select
  case '!' :
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $commentMark$
  default
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\U0010FFFF' :
    end
    drop $comment$
  end
}

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList style delimitersStyle error message "the '%K' delimitor" {
  "*",    ",",   "+",  "&+", "&-", "&*", "&/",
  ">",    ";",   ":",  ":>",
  "-",    "(",   ")",  "->",
  "==",   "=",   "&&",
  "[",    "]",
  "+=",   "-=",   "*=",   "/=",   "&=",   "|=",
  "/",    "!=",  ">=", "&",
  "{",    "}",   "`",  "||", "|",
  "^",    ">>",  "~",
  "--",   "++",  "&--",   "&++",
  "===", "!==", "?^", "!^",
  "§["
}

rule list galgasDelimitorsList

# --------- Special formal arguments, actual parameters --------------------------
# --------- Special formal arguments, actual parameters --------------------------
$?selector:$ ! tokenString style selectorStyle error message "the '\?selector:' delimitor"
$?$ style delimitersStyle error message "the '?' delimitor"

$?!selector:$ ! tokenString style selectorStyle error message "the '\?!selector:' delimitor"
$?!$ style delimitersStyle error message "the '?!' delimitor"

$!selector:$ ! tokenString style selectorStyle error message "the '!selector:' delimitor"
$!$ style delimitersStyle error message "the '!' delimitor"

$!?selector:$ ! tokenString style selectorStyle error message "the '!\?selector:' delimitor"
$!?$ style delimitersStyle error message "the '!?' delimitor"

rule "?!" {
  tag onlyInterrogationExclamationMark
  select
  case isUnicodeLetter :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while isUnicodeLetter | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $?!selector:$
    default
      resetString (!?tokenString )
      rewind onlyInterrogationExclamationMark send $?!$
    end
  default
    send $?!$
  end
}

rule '?' {
  tag onlyInterrogationMark
  select
  case isUnicodeLetter :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while isUnicodeLetter | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $?selector:$
    default
      resetString (!?tokenString )
      rewind onlyInterrogationMark send $?$
    end
  default
    send $?$
  end
}

rule "!?" {
  tag onlyExclamationInterrogationMark
  select
  case isUnicodeLetter :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while isUnicodeLetter | '_' :
    end
    select
    case ':' :
      send $!?selector:$
    default
      resetString (!?tokenString )
      rewind onlyExclamationInterrogationMark send $!?$
    end
  default
    send $!?$
  end
}

rule '!' {
  tag onlyExclamationMark
  select
  case isUnicodeLetter :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while isUnicodeLetter | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $!selector:$
    default
      resetString (!?tokenString )
      rewind onlyExclamationMark send $!$
    end
  default
    send $!$
  end
}

# --------- Special delimitors / non terminal symbol --------------------------
$<$ style delimitersStyle error message "the '<' delimitor"
$<=$ style delimitersStyle error message "the '<=' delimitor"
$<<$ style delimitersStyle error message "the '<<' delimitor"
$<non_terminal>$ ! tokenString style nonTerminalStyle error message "a non terminal symbol <...>"

rule '<' {
  tag onlyInfDelimiter
  select
  case '=' :
    send $<=$
  case '<' :
    send $<<$
  case isUnicodeLetter :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while isUnicodeLetter | '0' -> '9' | '_' :
    end
    select
    case '>' :
      send $<non_terminal>$
    default
      rewind onlyInfDelimiter send $<$
    end
  default
    send $<$
  end
}

# -------------------- Characters string --------------------------------------
$"string"$ ! tokenString style stringStyle %nonAtomicSelection error message "a character string constant \"...\""

message incorrectStringEnd : "string does not end with '\"'"

rule '"' {
  repeat
  while '\\' :
    select
    case 'f' :
      enterCharacterIntoString (!?tokenString !'\f')
    case 'n' :
      enterCharacterIntoString (!?tokenString !'\n')
    case 'r' :
      enterCharacterIntoString (!?tokenString !'\r')
    case 't' :
      enterCharacterIntoString (!?tokenString !'\t')
    case 'v' :
      enterCharacterIntoString (!?tokenString !'\v')
    case '\\' :
      enterCharacterIntoString (!?tokenString !'\\')
    case '"' :
      enterCharacterIntoString (!?tokenString !'"')
    case '\'' :
      enterCharacterIntoString (!?tokenString !'\'')
    case '?' :
      enterCharacterIntoString (!?tokenString !'?')
#    case '&' :
#      repeat
#      while ~ ";" error incorrectHTMLescapeSequence :
#        enterCharacterIntoString (!?identifierString !* )
#      end
#      convertHTMLSequenceToUnicodeCharacter (!?identifierString !?charValue error unknownHTMLescapeSequence )
#      enterCharacterIntoString (!?tokenString !charValue )
#    case '0' -> '9' :
#      warning obsoleteStringConstruction
#      repeat
#        enterHexDigitIntoASCIIcharacter (!?charValue !* error ASCIIcodeTooLargeError, internalError )
#      while '0' -> '9' :
#      end
#      enterCharacterIntoString (!?tokenString !charValue )
    case 'u' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
           enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
              enterCharacterIntoString (!?tokenString !charValue )
            default
              error invalideUnicodeDefinition4
            end
          default
            error invalideUnicodeDefinition4
          end
        default
          error invalideUnicodeDefinition4
        end
      default
        error invalideUnicodeDefinition4
      end
    case 'U' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
            enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              select
              case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                select
                case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                  enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                  select
                  case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                   enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                    select
                    case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                      enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                      convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
                      enterCharacterIntoString (!?tokenString !charValue )
                    default
                      error invalideUnicodeDefinition8
                    end
                  default
                    error invalideUnicodeDefinition8
                  end
                default
                  error invalideUnicodeDefinition8
                end
              default
                error invalideUnicodeDefinition8
              end
            default
              error invalideUnicodeDefinition8
            end
          default
            error invalideUnicodeDefinition8
          end
        default
          error invalideUnicodeDefinition8
        end
      default
        error invalideUnicodeDefinition8
      end
    default
      error incorrectCharConstant
    end
   while ' ' | '!' | '#'-> '\uFFFD' :
    enterCharacterIntoString (!?tokenString !* )
  end
  select
  case '"' :
    send $"string"$
  default
    error incorrectStringEnd
  end
}

# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' {
}

}
