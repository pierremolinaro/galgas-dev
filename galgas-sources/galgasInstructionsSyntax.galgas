//————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3InstructionsSyntax (galgasScanner3) {

  //······························································································
  #          Rules prototypes
  //······························································································

  rule <expression_ggs3> ?!@galgasDeclarationAST ioDeclarations
                         !@semanticExpressionAST outExpression

  rule <if_expression_ggs3> ?!@galgasDeclarationAST ioDeclarations
                            !@ifExpressionList outExpressionList

  rule <formal_parameter_list_ggs34> ?!@galgasDeclarationAST ioDeclarations
                                    !@formalParameterListAST outFormalParameterList

  rule <formal_input_parameter_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                           !@formalInputParameterListAST outFormalInputParameterList

  rule <formal_input_parameter_list_ggs34> ?!@galgasDeclarationAST ioDeclarations
                                           !@formalInputParameterListAST outFormalInputParameterList

  rule <type_definition_ggs3> ?!@galgasDeclarationAST ioDeclarations
                              !@lstring outTypeName

  rule <output_expression_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                     !@actualOutputArgumentList outExpressionList

  rule <output_expression_list_ggs34> ?!@galgasDeclarationAST ioDeclarations
                                      !@actualOutputArgumentList outExpressionList

  //······························································································
  #    S E M A N T I C    I N S T R U C T I O N    L I S T
  //······························································································

  rule <semantic_instruction_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                        !@semanticInstructionListAST outInstructionsList {
    outInstructionsList = @semanticInstructionListAST ()
    select
    or
      repeat
        <semantic_instruction_ggs3> !?ioDeclarations ?let @semanticInstructionAST instruction
        outInstructionsList += !instruction
      while
        select
          $;$
        or
          let separator = @string.separatorString
          if not [separator containsCharacter !'\n'] then
            error .separator : "instructions on same line should be separated by ';'"
          end
        end
      end
    end
  //--- Guard ?
    select
    or
      $guard$
      let instructionLocation = @location.here
      <if_expression_ggs3> !?ioDeclarations ?let testExpression
      $else$
      <semantic_instruction_list_ggs3> !?ioDeclarations ?let else_instructionList
      let endOf_else_branch = @location.here
      $end$
      <semantic_instruction_list_ggs3> !?ioDeclarations ?let then_instructionList
      let endOf_then_branch = @location.here
      let instruction = @ifInstructionAST (
        instructionLocation,
        testExpression,
        then_instructionList,
        endOf_then_branch,
        else_instructionList,
        endOf_else_branch
      )
      outInstructionsList += !instruction
    end
  }

  //······························································································
  #    F U N C T I O N    D E C L A R A T I O N
  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $func$
    var isOnce = false
    var isUsefull = false
    repeat
    while
      $%once$
      if isOnce then
        error .here : "duplicate attribute" fixit { remove }
      end
      isOnce = true
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let functionName indexing functionDefinition
    <function_declaration_ggs3> !once: isOnce !usefull: isUsefull !private: false !functionName !?ioDeclarations
  }
   
   //······························································································

  rule <function_declaration_ggs3> ?once: let @bool inIsOnce
                                   ?usefull: let @bool inIsUsefull
                                   ?private: let @bool inPrivate
                                   ?let @lstring inFunctionName
                                   ?!@galgasDeclarationAST ioDeclarations {
    <formal_input_parameter_list_ggs3> !?ioDeclarations ?let formalInputParameterList
    if inIsOnce, ([formalInputParameterList count] > 0) then
      error inFunctionName: "an 'once' function should has no argument"
    end
    $->$
    <type_definition_ggs3> !?ioDeclarations ?let @lstring resultTypeName
    let @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = @{!"result" !.here}
    end
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let functionInstructionList
    $}$
    let endOfFunctionInstructionList = @location.here
    if inIsOnce then
      ioDeclarations.mDeclarationList += !@onceFunctionDeclarationAST {
        !isPredefined: false # Is not predefined
        !inFunctionName
        !resultTypeName
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !inPrivate
        !inIsUsefull
      }
    else
      ioDeclarations.mDeclarationList += !@functionDeclarationAST {
        !isPredefined: false # Is not predefined
        !inFunctionName
        !formalInputParameterList
        !resultTypeName
        !usefullFunc: inIsUsefull
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !inPrivate
      }
    end
  }

  //······························································································

  rule <function_declaration_ggs3> ?once: let @bool inIsOnce
                                   ?usefull: let @bool inIsUsefull
                                   ?private: let @bool inIsPrivate
                                   ?let @lstring inFunctionName
                                   ?!@galgasDeclarationAST ioDeclarations {
    <formal_input_parameter_list_ggs34> !?ioDeclarations ?let formalInputParameterList
    if inIsOnce, ([formalInputParameterList count] > 0) then
      error inFunctionName: "an 'once' function should has no argument"
    end
    $->$
    <type_definition_ggs3> !?ioDeclarations ?let @lstring resultTypeName
    let resultVariableName = @lstring {!"result" !.here}
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let functionInstructionList
    $}$
    let endOfFunctionInstructionList = @location.here
    if inIsOnce then
      ioDeclarations.mDeclarationList += !@onceFunctionDeclarationAST {
        !isPredefined: false
        !inFunctionName
        !resultTypeName
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !inIsPrivate
        !inIsUsefull
      }
    else
      ioDeclarations.mDeclarationList += !@functionDeclarationAST {
        !isPredefined: false 
        !inFunctionName
        !formalInputParameterList
        !resultTypeName
        !usefullFunc: inIsUsefull
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !inIsPrivate
      }
    end
  }

  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $private$
    $func$
    var isOnce = false
    var isUsefull = false
    repeat
    while
      $%once$
      if isOnce then
        error .here : "duplicate attribute" fixit { remove }
      end
      isOnce = true
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let functionName indexing functionDefinition
    <function_declaration_ggs3> !once: isOnce !usefull: isUsefull !private: true !functionName !?ioDeclarations
  }

  //······························································································
  #    E X T E R N    F U N C T I O N    D E C L A R A T I O N
  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $extern$
    $func$
    var isUsefull = false
    repeat
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let mActionName indexing functionDefinition
    <formal_input_parameter_list_ggs34> !?ioDeclarations ?let formalInputParameterList
    $->$
    <type_definition_ggs3> !?ioDeclarations ?let @lstring resultTypeName
    ioDeclarations.mDeclarationList += !@externFunctionDeclarationAST {
      !isPredefined: false # Is not predefined
      !mActionName
      !formalInputParameterList
      !resultTypeName
      !usefullFunc: isUsefull
    }
  }

  //······························································································
  #    M E T H O D    C A L L    I N S T R U C T I O N
  //······························································································

  rule <actual_parameter_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                    !@actualParameterListAST outActualParameterList

  //······························································································

  rule <syntax_directed_translation_result>
          ?!@galgasDeclarationAST ioDeclarations
          !@abstractGrammarInstructionSyntaxDirectedTranslationResult result {
    $?$
    select
      $*$
      result = @grammarInstructionSyntaxDirectedTranslationDropResult {!@location.here}
    or
      <type_definition_ggs3> !?ioDeclarations ?let @lstring actualParameterTypeName
      $identifier$ ?let actualParameterName
      result = @grammarInstructionSyntaxDirectedTranslationResultInDeclaredVar {!actualParameterTypeName !actualParameterName}
    or
      $let$
      <type_definition_ggs3> !?ioDeclarations ?let @lstring actualParameterTypeName
      $identifier$ ?let actualParameterName
      result = @grammarInstructionSyntaxDirectedTranslationResultInDeclaredConst {!actualParameterTypeName !actualParameterName}
    or
      $identifier$ ?let actualParameterName
      result = @grammarInstructionSyntaxDirectedTranslationResultInVar {!actualParameterName}
    end
  }

  //······························································································

  rule <actual_input_parameter_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                          !@actualInputParameterListAST outActualInputParameterList {
    outActualInputParameterList = @actualInputParameterListAST ()
    repeat
    while
      let @lstring selector
      select
        $?selector:$ ?selector
      or
        $?$
        selector = ["" here]
      end
      select
        $*$
        outActualInputParameterList += !selector !@inputParameterAnonymousVariable {}
      or
        $var$
        let @lstring actualParameterTypeName
        select
          actualParameterTypeName = ["" nowhere]
        or
         <type_definition_ggs3> !?ioDeclarations ?actualParameterTypeName
        end
        $identifier$ ?let actualParameterName
        outActualInputParameterList +=
          !selector
          !@inputParameterDeclaredVariable {!actualParameterTypeName !actualParameterName}
      or
        $let$
        let @lstring actualParameterTypeName
        select
          actualParameterTypeName = ["" nowhere]
        or
          <type_definition_ggs3> !?ioDeclarations ?actualParameterTypeName
        end
        $identifier$ ?let actualParameterName
        outActualInputParameterList +=
          !selector
          !@inputParameterDeclaredConstant {!actualParameterTypeName !actualParameterName}
      or
        $identifier$ ?let actualParameterName
        outActualInputParameterList += !selector !@inputParameterVariable {!actualParameterName}
      end
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas4InstructionsSyntax (galgasScanner4) {

  //······························································································
  #          Rules prototypes
  //······························································································

  rule <expression> ?!@galgasDeclarationAST ioDeclarations
                    !@semanticExpressionAST outExpression

  rule <if_expression> ?!@galgasDeclarationAST ioDeclarations
                       !@ifExpressionList outExpressionList

  rule <formal_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                               !@formalParameterListAST outFormalParameterList

  rule <formal_input_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                                     !@formalInputParameterListAST outFormalInputParameterList

  rule <type_definition> ?!@galgasDeclarationAST ioDeclarations
                         !@lstring outTypeName

  rule <non_empty_output_expression_list> ?!@galgasDeclarationAST ioDeclarations
                                          !@actualOutputArgumentList outExpressionList

  rule <output_expression_list> ?!@galgasDeclarationAST ioDeclarations
                                !@actualOutputArgumentList outExpressionList

  //······························································································
  #    S E M A N T I C    I N S T R U C T I O N    L I S T
  //······························································································

  rule <semantic_instruction_list> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionListAST outInstructionsList {
    outInstructionsList = @semanticInstructionListAST ()
    select
    or
      repeat
        <semantic_instruction> !?ioDeclarations ?let @semanticInstructionAST instruction
        outInstructionsList += !instruction
      while
        select
          $;$
        or
          let separator = @string.separatorString
          if not [separator containsCharacter !'\n'] then
            error .separator : "instructions on same line should be separated by ';'"
          end
        end
      end
    end
    select
    or
      $guard$
      let instructionLocation = @location.here
      <if_expression> !?ioDeclarations ?let testExpression
      $else$
#      <error_instruction> !?ioDeclarations ?let errorInstruction
#      let @semanticInstructionListAST else_instructionList = §[init  (errorInstruction)]
      <semantic_instruction_list> !?ioDeclarations ?let else_instructionList
      let endOf_else_branch = @location.here
      $end$
      <semantic_instruction_list> !?ioDeclarations ?let then_instructionList
      let endOf_then_branch = @location.here
      let instruction = @ifInstructionAST (
        instructionLocation,
        testExpression,
        then_instructionList,
        endOf_then_branch,
        else_instructionList,
        endOf_else_branch
      )
      outInstructionsList += !instruction
    end
  }

  //······························································································
  #    F U N C T I O N    D E C L A R A T I O N
  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $func$
    var isOnce = false
    var isUsefull = false
    repeat
    while
      $%once$
      if isOnce then
        error .here : "duplicate attribute" fixit { remove }
      end
      isOnce = true
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let functionName indexing functionDefinition
    <formal_input_parameter_list> !?ioDeclarations ?let @formalInputParameterListAST formalInputParameterList
    if isOnce, ([formalInputParameterList count] > 0) then
      error functionName: "an 'once' function should has no argument"
    end
    $->$
    <type_definition> !?ioDeclarations ?let resultTypeName
    let @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = @{!"result" !.here}
    end
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST functionInstructionList
    $}$
    let endOfFunctionInstructionList = @location.here
    if isOnce then
      ioDeclarations.mDeclarationList += !@onceFunctionDeclarationAST {
        !isPredefined: false # Is not predefined
        !functionName
        !resultTypeName
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !false # Private
        !isUsefull
      }
    else
      ioDeclarations.mDeclarationList += !@functionDeclarationAST {
        !isPredefined: false # Is not predefined
        !functionName
        !formalInputParameterList
        !resultTypeName
        !usefullFunc: isUsefull
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !false # private
      }
    end
  }

  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $private$
    $func$
    var isOnce = false
    var isUsefull = false
    repeat
    while
      $%once$
      if isOnce then
        error .here : "duplicate attribute" fixit { remove }
      end
      isOnce = true
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let functionName indexing functionDefinition
    <formal_input_parameter_list> !?ioDeclarations ?let @formalInputParameterListAST formalInputParameterList
    if isOnce, ([formalInputParameterList count] > 0) then
      error functionName: "an 'once' function should has no argument"
    end
    $->$
    <type_definition> !?ioDeclarations ?let resultTypeName
    let @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = @{!"result" !.here}
    end
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST functionInstructionList
    $}$
    let endOfFunctionInstructionList = @location.here
    if isOnce then
      ioDeclarations.mDeclarationList += !@onceFunctionDeclarationAST {
        !isPredefined: false # Is not predefined
        !functionName
        !resultTypeName
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !true # Private
        !isUsefull
      }
    else
      ioDeclarations.mDeclarationList += !@functionDeclarationAST {
        !isPredefined: false # Is not predefined
        !functionName
        !formalInputParameterList
        !resultTypeName
        !usefullFunc: isUsefull
        !resultVariableName
        !functionInstructionList
        !endOfFunctionInstructionList
        !true # private
      }
    end
  }

  //······························································································
  #    E X T E R N    F U N C T I O N    D E C L A R A T I O N
  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $extern$
    $func$
    var isUsefull = false
    repeat
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let mActionName indexing functionDefinition
    <formal_input_parameter_list> !?ioDeclarations ?let @formalInputParameterListAST formalInputParameterList
    $->$
    <type_definition> !?ioDeclarations ?let resultTypeName
    ioDeclarations.mDeclarationList += !@externFunctionDeclarationAST {
      !isPredefined: false # Is not predefined
      !mActionName
      !formalInputParameterList
      !resultTypeName
      !usefullFunc: isUsefull
    }
  }

  //······························································································
  #    M E T H O D    C A L L    I N S T R U C T I O N
  //······························································································

  rule <actual_parameter_list_within_parenthesis> ?!@galgasDeclarationAST ioDeclarations
                                                  !@actualParameterListAST outActualParameterList

  //······························································································

  rule <syntax_directed_translation_result> ?!@galgasDeclarationAST ioDeclarations
                                            !@abstractGrammarInstructionSyntaxDirectedTranslationResult result {
    $($
    $?$
    select
      $*$
      result = @grammarInstructionSyntaxDirectedTranslationDropResult {!@location.here}
    or
      <type_definition> !?ioDeclarations ?let @lstring actualParameterTypeName
      $identifier$ ?let actualParameterName
      result = @grammarInstructionSyntaxDirectedTranslationResultInDeclaredVar {!actualParameterTypeName !actualParameterName}
    or
      $let$
      <type_definition> !?ioDeclarations ?let @lstring actualParameterTypeName
      $identifier$ ?let actualParameterName
      result = @grammarInstructionSyntaxDirectedTranslationResultInDeclaredConst {!actualParameterTypeName !actualParameterName}
    or
      $identifier$ ?let actualParameterName
      result = @grammarInstructionSyntaxDirectedTranslationResultInVar {!actualParameterName}
    end
    $)$
  }

  //······························································································

  rule <actual_input_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                                     !@actualInputParameterListAST outActualInputParameterList {
    outActualInputParameterList = @actualInputParameterListAST ()
    select
    or
      $($
      repeat
        select
          $?$
          let selector = ["" here]
          $*$
          outActualInputParameterList += !selector !@inputParameterAnonymousVariable {}
        or
          $?selector:$ ?let selector
          $*$
          outActualInputParameterList += !selector !@inputParameterAnonymousVariable {}
        or
          $?selector:$ ?let selector
          $var$
          let @lstring actualParameterTypeName
          select
            actualParameterTypeName = ["" nowhere]
          or
           <type_definition> !?ioDeclarations ?actualParameterTypeName
          end
          $identifier$ ?let actualParameterName
          outActualInputParameterList +=
            !selector
            !@inputParameterDeclaredVariable {!actualParameterTypeName !actualParameterName}
        or
          $?$
          let selector = ["" here]
          $var$
          let @lstring actualParameterTypeName
          select
            actualParameterTypeName = ["" nowhere]
          or
           <type_definition> !?ioDeclarations ?actualParameterTypeName
          end
          $identifier$ ?let actualParameterName
          outActualInputParameterList +=
            !selector
            !@inputParameterDeclaredVariable {!actualParameterTypeName !actualParameterName}
        or
          $?selector:$ ?let selector
          $let$
          let @lstring actualParameterTypeName
          select
            actualParameterTypeName = ["" nowhere]
          or
            <type_definition> !?ioDeclarations ?actualParameterTypeName
          end
          $identifier$ ?let actualParameterName
          outActualInputParameterList +=
            !selector
            !@inputParameterDeclaredConstant {!actualParameterTypeName !actualParameterName}
        or
          $?$
          let selector = ["" here]
          $let$
          let @lstring actualParameterTypeName
          select
            actualParameterTypeName = ["" nowhere]
          or
            <type_definition> !?ioDeclarations ?actualParameterTypeName
          end
          $identifier$ ?let actualParameterName
          outActualInputParameterList +=
            !selector
            !@inputParameterDeclaredConstant {!actualParameterTypeName !actualParameterName}
        or
          $?selector:$ ?let selector
          $identifier$ ?let actualParameterName
          outActualInputParameterList += !selector !@inputParameterVariable {!actualParameterName}
        or
          $?$
          let selector = ["" here]
          $identifier$ ?let actualParameterName
          outActualInputParameterList += !selector !@inputParameterVariable {!actualParameterName}
        end
      while
        $,$
      end
      $)$
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
