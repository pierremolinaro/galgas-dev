#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $method$
    $@type$ ?var typeName indexing typeReferenceExtensionMethod
    repeat
    while
      $.$
      $@type$ ?let t
      typeName = .init (typeName.string + "-" + t.string, [typeName.location union !t.location])
    end
    $identifier$ ?let @lstring methodName indexing extensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let routineInstructionList
    let endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionMethodAST {
      !isPredefined: false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !typeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·······························································································

  rule <method_declaration_ggs3> ?let @lstring inTypeName
                                 ?!@galgasDeclarationAST ioDeclarations {
    $method$
    var typeName = inTypeName
    repeat
    while
      $@type$ ?let t
      typeName = .init (typeName.string + "-" + t.string, [typeName.location union !t.location])
      $.$
    end
    $identifier$ ?let @lstring methodName indexing extensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionMethodAST {
      !isPredefined: false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !typeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $proc$
    <simple_type_definition> !?ioDeclarations ?var @lstring typeName
    $.$
    repeat
    while
      <simple_type_definition> !?ioDeclarations ?let t
      typeName = .init (typeName.string + "-" + t.string, [typeName.location union !t.location])
      $.$
    end
    $identifier$ ?let @lstring methodName indexing extensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionMethodAST {
      !isPredefined: false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !typeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·······························································································

  rule <method_declaration> ?let @lstring inTypeName
                            ?!@galgasDeclarationAST ioDeclarations {
    $proc$
    var typeName = inTypeName
    repeat
    while
      <simple_type_definition> !?ioDeclarations ?let t
      typeName = .init (typeName.string + "-" + t.string, [typeName.location union !t.location])
      $.$
    end
    $identifier$ ?let @lstring methodName indexing extensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionMethodAST {
      !isPredefined: false
      !requiresSelfForAccessingProperty: true
      !typeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionMethodAST : @semanticDeclarationAST {
  private let @bool requiresSelfForAccessingProperty %initArgLabel
  private let @lstring mTypeName
  private let @lstring mExtensionMethodName
  private let @formalParameterListAST mExtensionMethodFormalParameterList
  private let @semanticInstructionListAST mExtensionMethodInstructionList
  private let @location mEndOfMethodLocation

  #·······························································································

  override getter keyRepresentation -> @string {
    result = "extension method @" + self.mTypeName + " " + self.mExtensionMethodName
  }

  #·······························································································

  override method enterDeclarationInGraph
     ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
     ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
     ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
     ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
     ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
     ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
    let key = @lstring {
      !"extension method @" + self.mTypeName + " " + self.mExtensionMethodName
      !self.mExtensionMethodName.location
    }
    [!?ioSemanticTypePrecedenceGraph addNode !key !self]
    [!?ioSemanticTypePrecedenceGraph addEdge !key !.init {!"@" + self.mTypeName !self.mTypeName.location}]
  #---
    if not [ioExtensionMethodMapForBuildingContext hasKey !self.mTypeName.string] then
      [!?ioExtensionMethodMapForBuildingContext insertKey
        ! self.mTypeName
        !()
      ]
    end
    with self.mTypeName in !?ioExtensionMethodMapForBuildingContext error message searchKey  do
      [!?mExtensionMethodMapForType insertKey
        !self.mExtensionMethodName
        ! self.mExtensionMethodFormalParameterList
        !.isBasic
      ]
    end
  }

  #·······························································································

  override method enterDeclarationInSemanticContext
    ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
    ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
    ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
    ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
    ?!@unifiedTypeMap unused ioTypeMap
    ?!@semanticContext unused ioSemanticContext
  {
  }

  #·······························································································

  override method semanticAnalysis ?!@lstringlist unused ioUsefulnessRootEntities
                                   ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                   ?let @string unused inProductDirectory
                                   ?let @semanticContext inSemanticContext
                                   ?!@unifiedTypeMap ioTypeMap
                                   ?let @predefinedTypes inPredefinedTypes
                 ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
  #--- Useful entities graph
    let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !self.mExtensionMethodName)
    [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
    let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (! self.mTypeName)
    [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
  #--- Self type
    let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey ! self.mTypeName]
    let @string selfObjectNameString
    let @string selfObjectPropertyAccessorString
    let @bool implementedAsFunction
  #--- Check self type is a class
    var isReferenceClass = false
    if let [[selfType definition].typeKind classType ?isReference: let isReference] then
      isReferenceClass = isReference
      selfObjectNameString = "this"
      selfObjectPropertyAccessorString = "this->"
      implementedAsFunction = false
    else
      selfObjectNameString = "inObject"
      selfObjectPropertyAccessorString = "inObject."
      implementedAsFunction = true
    end
  #--- Analyze instruction list
    let analysisContextNew = @analysisContext {
      !inSemanticContext
      !inPredefinedTypes
      !selfObjectCppName: selfObjectNameString
      !selfAvailability: .available {!type: selfType !selfMutability: if isReferenceClass then .propertiesAreMutableSelfIsNot else .none end}
      !selfObjectCppPrefixForAccessingProperty: selfObjectPropertyAccessorString
      !requiresSelfForAccessingProperty: self.requiresSelfForAccessingProperty
    }
    var isRefClass = false
    if let [[selfType definition].typeKind classType ?isReference: let reference] then
      isRefClass = reference
    end
    var mutableProperties = @typedPropertyList ()
    var nonMutableProperties = @typedPropertyList ()
    if [selfType definition].typeKind == .structType then
      nonMutableProperties = [selfType definition].allTypedPropertyList
    elsif let [[selfType definition].typeKind classType ?isReference: let isReference] then
      if isReference then
        mutableProperties = [selfType definition].allTypedPropertyList
      else
        nonMutableProperties = [selfType definition].allTypedPropertyList
      end
    end
    analyzeRoutineBody (
      !nameForUsefulness
      !?ioUsefulEntitiesGraph
      !analysisContextNew
      !?ioTypeMap
      !self.mExtensionMethodFormalParameterList
      !nonMutablePropertyList: nonMutableProperties
      !mutablePropertyList: mutableProperties
      !self.mExtensionMethodInstructionList
      !self.mEndOfMethodLocation
      ?let semanticInstructionListForGeneration
      ?let formalParameterListForGeneration
    )
  #---
    ioSemanticDeclarationListForGeneration +=
      !infoMessage:"extension method " + self.mExtensionMethodName
      !@extensionMethodForGeneration {
        !generateHeader: true # Generate Cpp header file
        !implementationCppFileName: "method-" + [[selfType definition].typeName.string fileNameRepresentation] + "-" + [self.mExtensionMethodName fileNameRepresentation]
        !selfType
        !self.mExtensionMethodName.string
        !implementedAsFunction
        !formalParameterListForGeneration
        ![selfType definition].allTypedPropertyList
        !semanticInstructionListForGeneration
      }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
#  ioExtensionMethodListMap += !self.mTypeName.string !self.mExtensionMethodName
  [!?ioExtensionMethodListMap insertKey !self.mTypeName.string !self.mExtensionMethodName]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionMethodForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string mExtensionMethodName
  private let @bool mImplementedAsFunction
  private let @formalParameterListForGeneration mExtensionMethodFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @extensionMethodForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @extensionMethodForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  if self.mImplementedAsFunction then
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionMethodAsFunctionDeclaration
      ![self.mReceiverType definition].typeName.string
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
    ]
  else
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionMethodDeclaration
      ![self.mReceiverType definition].typeName.string
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
    ]
  end
}

#·······················································································································

override method @extensionMethodForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  if self.mImplementedAsFunction then
    var @formalParameterListForGeneration extensionMethodFormalParameterList = self.mExtensionMethodFormalParameterList
    [!?extensionMethodFormalParameterList insertAtIndex
      !["" nowhere]
      !@formalArgumentPassingModeAST.argumentConstantIn
      !self.mReceiverType
      !@lstring {!"self" !@location.here}
      !"inObject"
      !0
    ]
    ioInclusionSet += !"method-" + [[self.mReceiverType definition].typeName.string fileNameRepresentation] + "-" + [self.mExtensionMethodName fileNameRepresentation]
    generateProcedure (
      !static:false
      !"extensionMethod_" + [self.mExtensionMethodName identifierRepresentation]
      !?ioInclusionSet
      !extensionMethodFormalParameterList
      !self.mSemanticInstructionListForGeneration
      !false # is not const
      !"Compiler"
      !true # Generate location Argument
      !false # Do not generate 'resetTemplateString'
      !false # Do not generate syntaxDirectedTranslationString argument
      ?let @string code
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionMethodAsFunctionImplementation
      ![self.mReceiverType definition].typeName.string
      !self.mExtensionMethodName
      !code
    ]
  else
    [self.mReceiverType addHeaderFileName !?ioInclusionSet]
    for (* * mFormalArgumentType * *) in self.mExtensionMethodFormalParameterList do
      [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
    end
    var @unifiedTypeMapEntry baseType = self.mReceiverType
    var @bool searching = true
    loop (@uint.max) while searching do
      if not [[baseType definition].superType isNull] then
        if [[[baseType definition].superType definition].instanceMethodMap hasKey !self.mExtensionMethodName] then
          baseType = [baseType definition].superType
        else
          searching = false
        end
      else
        searching = false
      end
    end
    ioInclusionSet +=
      !"method-" + [[baseType definition].typeName.string fileNameRepresentation]
      + "-" + [self.mExtensionMethodName fileNameRepresentation]
    generateExtensionMethodNew (
      !self.mReceiverType
      !?ioInclusionSet
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
      !self.mSemanticInstructionListForGeneration
      ?let @string methodImplementation
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionMethodImplementation
      ![self.mReceiverType definition].typeName.string
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
      !methodImplementation
    ]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

