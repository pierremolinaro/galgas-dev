
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionMethodAST : @semanticDeclarationAST {
  private let @bool requiresSelfForAccessingProperty %selector
  private let @lstring mTypeName
  private let @lstring mExtensionMethodName
  private let @formalParameterListAST mExtensionMethodFormalParameterList
  private let @semanticInstructionListAST mExtensionMethodInstructionList
  private let @location mEndOfMethodLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $method$
    $@type$ ?let @lstring className indexing typeReferenceExtensionMethod
    $identifier$ ?let @lstring mMethodName indexing extensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionMethodAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !className
      !mMethodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $method$
    $@type$ ?let @lstring className indexing typeReferenceExtensionMethod
    $.$
    $identifier$ ?let @lstring mMethodName indexing extensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionMethodAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !className
      !mMethodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @extensionMethodAST keyRepresentation
  ->@string {
  result = "extension method @" + self.mTypeName + " " + self.mExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionMethodAST enterDeclarationInGraph
                                ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
                                ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
                                ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
                                ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
                                ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {
    !"extension method @" + self.mTypeName + " " + self.mExtensionMethodName
    !self.mExtensionMethodName.location
  }
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mTypeName !self.mTypeName.location}]
#---
  if not [ioExtensionMethodMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionMethodMapForBuildingContext insertKey
      ! self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionMethodMapForBuildingContext error message searchKey  do
    [!?mExtensionMethodMapForType insertKey
      !self.mExtensionMethodName
      ! self.mExtensionMethodFormalParameterList
      !.isBasic
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionMethodAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionMethodAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !self.mExtensionMethodName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (! self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [inSemanticContext.mTypeMap searchKey ! self.mTypeName]
  let @string selfObjectNameNew
  let @string selfObjectAccessorNew
  let @bool implementedAsFunction
#--- Check self type is a class
  var isReferenceClass = false
  if let [[selfType definition].mTypeKindEnum classType ?isReference: let isReference] then
    isReferenceClass = isReference
    selfObjectNameNew = "this"
    selfObjectAccessorNew = "this->"
    implementedAsFunction = false
  else
    selfObjectNameNew = "inObject"
    selfObjectAccessorNew = "inObject."
    implementedAsFunction = true
  end
#--- Analyze instruction list
  let analysisContextNew = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !selfObjectNameNew
    !selfType: .available {!type:  selfType !mutable: false !mutableproperties: isReferenceClass}
    !selfObjectAccessorNew
    !requiresSelfForAccessingProperty: self.requiresSelfForAccessingProperty
  }
  var isRefClass = false
  if let [[selfType definition].mTypeKindEnum classType ?isReference: let reference] then
    isRefClass = reference
  end
  var mutableProperties = @typedPropertyList {}
  var nonMutableProperties = @typedPropertyList {}
  if [selfType definition].mTypeKindEnum == .structType then
    nonMutableProperties = [selfType definition].mAllTypedPropertyList
  elsif let [[selfType definition].mTypeKindEnum classType ?isReference: let isReference] then
    if isReference then
      mutableProperties = [selfType definition].mAllTypedPropertyList
    else
      nonMutableProperties = [selfType definition].mAllTypedPropertyList
    end
  end
  analyzeRoutineBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContextNew
    !self.mExtensionMethodFormalParameterList
    !nonMutablePropertyList: nonMutableProperties
    !mutablePropertyList: mutableProperties
    !self.mExtensionMethodInstructionList
    !self.mEndOfMethodLocation
    ?let semanticInstructionListForGeneration
    ?let formalParameterListForGeneration
  )
#---
  ioSemanticDeclarationListForGeneration +=
    !"extension method " + self.mExtensionMethodName
    !@extensionMethodForGeneration.new {
      !true # Generate Cpp header file
      !"method-" + [[selfType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mExtensionMethodName fileNameRepresentation]
      !selfType
      !self.mExtensionMethodName.string
      !implementedAsFunction
      !formalParameterListForGeneration
      ![selfType definition].mAllTypedPropertyList
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioExtensionMethodListMap += !self.mTypeName.string !self.mExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionMethodForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string mExtensionMethodName
  private let @bool mImplementedAsFunction
  private let @formalParameterListForGeneration mExtensionMethodFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @extensionMethodForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @extensionMethodForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  if self.mImplementedAsFunction then
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionMethodAsFunctionDeclaration
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
    ] 
  else
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionMethodDeclaration
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
    ] 
  end
}

#·······················································································································

override method @extensionMethodForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  if self.mImplementedAsFunction then
    var @formalParameterListForGeneration extensionMethodFormalParameterList = self.mExtensionMethodFormalParameterList
    [!?extensionMethodFormalParameterList insertAtIndex
      !["" nowhere]
      !@formalArgumentPassingModeAST.argumentConstantIn
      !self.mReceiverType
      !@lstring.new {!"self" !@location.here}
      !"inObject"
      !0
    ]
    ioInclusionSet += !"method-" + [[self.mReceiverType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mExtensionMethodName fileNameRepresentation]
    generateProcedure (
      !static:false
      !"extensionMethod_" + [self.mExtensionMethodName identifierRepresentation]
      !?ioInclusionSet
      !extensionMethodFormalParameterList
      !self.mSemanticInstructionListForGeneration
      !false # is not const
      !"C_Compiler"
      !true # Generate location Argument
      !false # Do not generate 'resetTemplateString'
      !false # Do not generate syntaxDirectedTranslationString argument
      ?let @string code
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionMethodAsFunctionImplementation
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionMethodName
      !code
    ] 
  else
    [self.mReceiverType addHeaderFileName !?ioInclusionSet]
    for (* * mFormalArgumentType * *) in self.mExtensionMethodFormalParameterList do
      [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
    end
    var @unifiedTypeMapEntry baseType = self.mReceiverType
    var @bool searching = true
    loop (@uint.max) while searching do
      if not [[baseType definition].mSuperType isNull] then
        if [[[baseType definition].mSuperType definition].mInstanceMethodMap hasKey !self.mExtensionMethodName] then
          baseType = [baseType definition].mSuperType
        else
          searching = false
        end
      else
        searching = false
      end  
    end
    ioInclusionSet +=
      !"method-" + [[baseType definition].mTypeName.string fileNameRepresentation]
      + "-" + [self.mExtensionMethodName fileNameRepresentation]
    generateExtensionMethodNew (
      !self.mReceiverType
      !?ioInclusionSet
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
      !self.mSemanticInstructionListForGeneration
      ?let @string methodImplementation
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionMethodImplementation
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionMethodName
      !self.mExtensionMethodFormalParameterList
      !methodImplementation
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

