#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                                                                                                *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @mapProxyDeclarationAST : @semanticDeclarationAST {
  @lstring mMapProxyTypeName
  @lstring mAssociatedMapTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapProxyDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mMapProxyTypeName ![self.mMapProxyTypeName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mAssociatedMapTypeName ![self.mAssociatedMapTypeName location]}]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN SEMANTIC CONTEXT                                                                                          *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapProxyDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
#--- Check associated map is really a map
  [ioSemanticContext.mTypeMap searchKey
    !self.mAssociatedMapTypeName
    ?3*
    ?var @typeKindEnum typeKindEnum
    ?3*
    ?var @typedPropertyList mapTypedAttributeList
    ?11*
    ?var @mapSearchMethodListAST searchMethodList
    ?6*
  ]
  if typeKindEnum != @typeKindEnum. uniqueMapType then
    error self.mAssociatedMapTypeName : "the @" + self.mAssociatedMapTypeName + " should be an unique map type"
    mapTypedAttributeList = {}
  end
#---
  let optionalMethodMap = @optionalMethodMap {}
  @constructorMap constructorMap = {}
  commonGetterMapForAllTypes ( !?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  @setterMap setterMap = {}
  @instanceMethodMap instanceMethodMap ={}
  @classMethodMap classMethodMap = {}
#--- Associated map type index
  [@unifiedTypeMap-proxy makeProxy !?ioSemanticContext.mTypeMap !self.mAssociatedMapTypeName ?let associatedMapTypeIndex]
#--- string type index
  [@unifiedTypeMap-proxy makeProxyFromString !?ioSemanticContext.mTypeMap !"string" ?let stringTypeIndex]
#--- lstring type index
  [@unifiedTypeMap-proxy makeProxyFromString !?ioSemanticContext.mTypeMap !"lstring" ?let lstringTypeIndex]
#--- Handle map type name
  [@unifiedTypeMap-proxy makeProxy !?ioSemanticContext.mTypeMap !self.mMapProxyTypeName ?let mapProxyTypeProxy]
#--- class methods : makeProxy, makeOptionalProxy
  @formalParameterSignature argList = {}
  argList += !["" nowhere] !associatedMapTypeIndex !@formalArgumentPassingModeAST.argumentInOut !"ioMap"
  argList += !["" nowhere] !lstringTypeIndex !@formalArgumentPassingModeAST.argumentConstantIn !"inLKey"
  argList += !["" nowhere] !mapProxyTypeProxy !@formalArgumentPassingModeAST.argumentOut !"outProxy"
  [!?classMethodMap insertKey
    !@lstring.new {!"makeProxy" !.here}
    !argList
    !false
  ]
  [!?classMethodMap insertKey
    !@lstring.new {!"makeOptionalProxy" !.here}
    !argList
    !false
  ]
#--- class method : makeProxyFromString
  argList = {}
  argList += !["" nowhere] !associatedMapTypeIndex !@formalArgumentPassingModeAST.argumentInOut !"ioMap"
  argList += !["" nowhere] !stringTypeIndex !@formalArgumentPassingModeAST.argumentConstantIn !"inLKey"
  argList += !["" nowhere] !mapProxyTypeProxy !@formalArgumentPassingModeAST.argumentOut !"outProxy"
  [!?classMethodMap insertKey
    !@lstring.new {!"makeProxyFromString" !.here}
    !argList
    !false
  ]
#--- null constructor
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioSemanticContext.mTypeMap
    !name:"null"
    !resultTypeName:[self.mMapProxyTypeName string]
    !hasLexiqueArg:false
  )
#--- Search methods of associated map as constructors
  var constructorAttributeTypeList =@functionSignature {}
  constructorAttributeTypeList += !["" nowhere] !associatedMapTypeIndex !"inMap"
  constructorAttributeTypeList += !["" nowhere] !lstringTypeIndex !"inLKey"
  for () in searchMethodList do
    [!?constructorMap insertKey
      !mSearchMethodName
      !constructorAttributeTypeList
      !true
      !mapProxyTypeProxy
    ]
  end
#--- Getters
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"isSolved"
    !returnedTypeName:"bool"
    !hasCompilerArgument:true
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"isNull"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"isRegular"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"lkey"
    !returnedTypeName:"lstring"
    !hasCompilerArgument:true
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"key"
    !returnedTypeName:"string"
    !hasCompilerArgument:true
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"identifierRepresentation"
    !returnedTypeName:"string"
    !hasCompilerArgument:true
  )
#--- Enter associated map attribute names as getters
  let @getterMap inheritedGetterMap = getterMap
  for () in mapTypedAttributeList do
    if [inheritedGetterMap hasKey ![mPropertyName string]] then
      @string s = ""
      for () in [inheritedGetterMap keySet]
        do s += "'" + key + "'"
        between s += ", "
      end
      error mPropertyName : "the map has a associated map proxy, which has predefined getters: " + s
       + "; you cannot use theses names for naming an attribute of this map"
    else
      [!?getterMap insertKey
        !mPropertyName
        !@methodKind.definedAsMember
        !@functionSignature {}
        !@location.here
        !true
        !mPropertyTypeProxy
        !@methodQualifier.isBasic
        !"" # No Error message
      ]
    end
  end
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mMapProxyTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
#--- Enter type in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mMapProxyTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-proxy.null
    !@typeKindEnum. mapProxyType
    !false # Does not support collection value
    !mapTypedAttributeList
    !{}
    !mapTypedAttributeList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !classMethodMap
    !optionalMethodMap
    !{}
    !.doNotGenererateObjectCompare
    !{}
    !{}
    !{}
    !{}
    !searchMethodList
    !false # Do not generate header in separate file
    !@unifiedTypeMap-proxy.null # Type for enumerated element for "for" instruction
    !"null" # Default constructor
    !"mapproxy-" + [self.mMapProxyTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapProxyDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mMapProxyTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#--- Get attribute list of associated map
  [inSemanticContext.mTypeMap searchKey
    !self.mAssociatedMapTypeName
    ?7*
    ?let @typedPropertyList listTypeAttributeList
    ?11*
    ?let @mapSearchMethodListAST searchMethodList
    ?6*
  ]
#---
  ioSemanticDeclarationListForGeneration +=
    !"map proxy " + self.mMapProxyTypeName
    !@mapProxyTypeForGeneration.new {
      !@unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !self.mMapProxyTypeName}
      !@unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !self.mAssociatedMapTypeName}
      !listTypeAttributeList
      !searchMethodList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @mapProxyTypeForGeneration : @semanticTypeForGeneration {
  @unifiedTypeMap-proxy mAssociatedMapTypeProxy
  @typedPropertyList mAssociatedMapTypedAttributeList
  @mapSearchMethodListAST mSearchMethodList
}

#·······················································································································

filewrapper mapProxyGenerationTemplate in "../generation_templates/type_generation" {
}{
}{
  template mapProxyTypeHeader1 "GALGAS_mapproxy.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER

  template mapProxyTypeSpecificImplementation "GALGAS_mapproxy.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@string ASSOCIATED_MAP_TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@mapSearchMethodListAST SEARCH_METHOD_LIST
}


#·······················································································································

override method @mapProxyTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  outHeader = [filewrapper mapProxyGenerationTemplate.mapProxyTypeHeader1
    ![self.mTypeProxy key]
    ![self.mTypeProxy identifierRepresentation]
  ] 
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mTypeProxy key]
    ![self.mTypeProxy identifierRepresentation]
    ![self.mTypeProxy mIsConcrete]
    ![self.mTypeProxy mConstructorMap]
    ![self.mTypeProxy mGetterMap]
    ![self.mTypeProxy mSetterMap]
    ![self.mTypeProxy mInstanceMethodMap]
    ![self.mTypeProxy mClassMethodMap]
    ![self.mTypeProxy mOptionalMethodMap]
    ![self.mTypeProxy mEnumerationDescriptor]
    ![self.mTypeProxy mHandledOperatorFlags]
    ![self.mTypeProxy mAddAssignOperatorArguments]
    ![self.mTypeProxy mTypeForEnumeratedElement]
  ]
}

#·······················································································································

override method @mapProxyTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  [self.mTypeProxy addHeaderFileName !?ioInclusionSet]
  [self.mAssociatedMapTypeProxy addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper mapProxyGenerationTemplate.mapProxyTypeSpecificImplementation
    ![self.mTypeProxy key]
    ![self.mTypeProxy identifierRepresentation]
    ![self.mAssociatedMapTypeProxy identifierRepresentation]
    !self.mAssociatedMapTypedAttributeList
    !self.mSearchMethodList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
