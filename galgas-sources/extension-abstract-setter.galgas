#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @abstractExtensionSetterAST : @semanticDeclarationAST {
  private let @lstring mTypeName
  private let @lstring mAbstractExtensionSetterName
  private let @formalParameterListAST mAbstractExtensionSetterFormalParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $abstract$
    $setter$
    $@type$ ?let @lstring className indexing typeReferenceAbstractExtensionSetter
    $identifier$ ?let @lstring setterName indexing abstractExtensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionSetterAST.new {
      !false # Is not predefined
      !className
      !setterName
      !formalParameterList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $abstract$
    $setter$
    $@type$ ?let @lstring className indexing typeReferenceAbstractExtensionSetter
    $identifier$ ?let @lstring setterName indexing abstractExtensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionSetterAST.new {
      !false # Is not predefined
      !className
      !setterName
      !formalParameterList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"extension setter @" + self.mTypeName + " " + self.mAbstractExtensionSetterName !self.mAbstractExtensionSetterName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mTypeName !self.mTypeName.location}]
#---
  if not [ioExtensionSetterMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionSetterMapForBuildingContext insertKey
      !self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionSetterMapForBuildingContext error message searchKey  do
    [!?mExtensionSetterMapForType insertKey
      !self.mAbstractExtensionSetterName
      !self.mAbstractExtensionSetterFormalParameterList
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @abstractExtensionSetterAST keyRepresentation -> @string {
  result = "abstract extension setter @" + self.mTypeName + " " + self.mAbstractExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionSetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionSetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
#  let nameForUsefulness = setterNameForUsefulEntitiesGraph (!self.mTypeName !self.mAbstractExtensionSetterName)
#  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-entry selfType = [inSemanticContext.mTypeMap searchKey !self.mTypeName]
#--- Check self type is an abstract class
  if not [[selfType mTypeKindEnum] isClassType] then
    error self.mAbstractExtensionSetterName: "cannot declare a extension setter: '@" + [selfType key] + "' is not a class"
  elsif [selfType mIsConcrete] then
    error self.mAbstractExtensionSetterName: "cannot declare an abstract extension setter: '@" + [selfType key] + "' is not an abstract class"
  end
#--- Compute setter signature
  var formalParameterListForGeneration = @formalParameterListForGeneration {}
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentTypeName mFormalArgumentName *) in self.mAbstractExtensionSetterFormalParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      !mFormalArgumentPassingMode
      ![inSemanticContext.mTypeMap searchKey !mFormalArgumentTypeName]
      !mFormalArgumentName
      !mFormalArgumentName.string
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !" abstract extension setter " + self.mAbstractExtensionSetterName
    !@abstractExtensionSetterForGeneration.new {
      !true # Generate Cpp header file
      !"setter-" + [self.mTypeName fileNameRepresentation] + "-" + [self.mAbstractExtensionSetterName fileNameRepresentation]
      !selfType
      !self.mAbstractExtensionSetterName.string
      !formalParameterListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioAbstractExtensionSetterListMap +=
    !self.mTypeName.string
    !self.mAbstractExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @abstractExtensionSetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMap-entry mReceiverType
  private let @string mAbstractExtensionSetterName
  private let @formalParameterListForGeneration mAbstractExtensionSetterFormalParameterList
}

#·······················································································································

override getter @abstractExtensionSetterForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @abstractExtensionSetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  outHeader = [filewrapper semanticComponentGenerationTemplate.abstractExtensionSetterDeclaration
    ![self.mReceiverType key]
    !self.mAbstractExtensionSetterName
    !self.mAbstractExtensionSetterFormalParameterList
  ] 
}

#·······················································································································

override method @abstractExtensionSetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  ioInclusionSet += !"setter-" + [[self.mReceiverType key] fileNameRepresentation] + "-" + [self.mAbstractExtensionSetterName fileNameRepresentation]
  [self.mReceiverType addHeaderFileName !?ioInclusionSet]
  for (* * mFormalArgumentType * *) in self.mAbstractExtensionSetterFormalParameterList do
    [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
  outImplementation = [filewrapper semanticComponentGenerationTemplate.abstractExtensionSetterImplementation
    ![self.mReceiverType key]
    !self.mAbstractExtensionSetterName
    !self.mAbstractExtensionSetterFormalParameterList
  ] 
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

