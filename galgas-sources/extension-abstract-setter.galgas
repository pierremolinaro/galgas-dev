#----------------------------------------------------------------------------------------------------------------------*
#   AST                                                                                                                *
#----------------------------------------------------------------------------------------------------------------------*

class @abstractExtensionSetterAST : @semanticDeclarationAST {
  @lstring mTypeName
  @lstring mAbstractExtensionModifierName
  @formalParameterListAST mAbstractExtensionModifierFormalParameterList
}

#----------------------------------------------------------------------------------------------------------------------*
#   SYNTAX                                                                                                             *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $abstract$
    $setter$
    $type_name$ ?var  @lstring className indexing typeReferenceAbstractExtensionModifier
    $identifier$ ?var  @lstring modifierName indexing abstractExtensionModifierDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionSetterAST.new {
      !false # Is not predefined
      !className
      !modifierName
      !formalParameterList
    }
  }

  #·····················································································································

}

#----------------------------------------------------------------------------------------------------------------------*
#   ENTER IN GRAPH                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionModifierMapForBuildingContext ioExtensionModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"extension setter @" + mTypeName + " " + mAbstractExtensionModifierName ![mAbstractExtensionModifierName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + mTypeName ![mTypeName location]}]
#---
  if not [ioExtensionModifierMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioExtensionModifierMapForBuildingContext insertKey
      !mTypeName
      !@extensionModifierMapForType. emptyMap
    ]
  end
  with mTypeName in !?ioExtensionModifierMapForBuildingContext error message searchKey  do
    [!?mExtensionModifierMapForType insertKey
      !mAbstractExtensionModifierName
      !mAbstractExtensionModifierFormalParameterList
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#   KEY REPRESENTATION                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override getter @abstractExtensionSetterAST keyRepresentation
  ->@string outString {
  outString = "abstract extension setter @" + mTypeName + " " + mAbstractExtensionModifierName
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC CONTEXT                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionModifierMapForBuildingContext unused inExtensionModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC ANALYSIS                                                                                                  *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST semanticAnalysis
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration {
#--- Self type
  let @unifiedTypeMap-proxy selfType = @unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mTypeName}
#--- Check self type is an abstract class
  if [selfType mTypeKindEnum] != @typeKindEnum. classType then
    error mAbstractExtensionModifierName: "cannot declare a extension setter: '@" + [selfType key] + "' is not a class"
  elsif [selfType mIsConcrete] then
    error mAbstractExtensionModifierName: "cannot declare an abstract extension setter: '@" + [selfType key] + "' is not an abstract class"
  end
#--- Compute setter signature
  var formalParameterListForGeneration =@formalParameterListForGeneration.emptyList{}
  for () in mAbstractExtensionModifierFormalParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      !mFormalArgumentPassingMode
      !@unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mFormalArgumentTypeName}
      !mFormalArgumentName
      ![mFormalArgumentName string]
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !" abstract extension setter " + mAbstractExtensionModifierName
    !@abstractExtensionSetterForGeneration.new {
      !true # Generate Cpp header file
      !"setter-" + mTypeName + "-" + mAbstractExtensionModifierName
      !selfType
      ![mAbstractExtensionModifierName string]
      !formalParameterListForGeneration
    }
    !"~"
}

#----------------------------------------------------------------------------------------------------------------------*
#   EXTENSION LIST MAP                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap ioAbstractExtensionModifierListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionModifierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionModifierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionModifierListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioAbstractExtensionModifierListMapAST +=
    ![mTypeName string]
    !mAbstractExtensionModifierName
}

#----------------------------------------------------------------------------------------------------------------------*
#   CODE GENERATION                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

class @abstractExtensionSetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  @unifiedTypeMap-proxy mReceiverType
  @string mAbstractExtensionModifierName
  @formalParameterListForGeneration mAbstractExtensionModifierFormalParameterList
}

#·······················································································································

override getter @abstractExtensionSetterForGeneration headerKind ->@headerKind outResult {
  outResult = @headerKind.oneHeader
}

#·······················································································································

override method @abstractExtensionSetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  outHeader = [filewrapper semanticComponentGenerationTemplate.abstractExtensionModifierDeclaration
    ![mReceiverType key]
    !mAbstractExtensionModifierName
    !mAbstractExtensionModifierFormalParameterList
  ] 
}

#·······················································································································

override method @abstractExtensionSetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  ioInclusionSet += !"setter-" + [mReceiverType key]+ "-" + mAbstractExtensionModifierName
  [mReceiverType addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper semanticComponentGenerationTemplate.abstractExtensionModifierImplementation
    ![mReceiverType key]
    !mAbstractExtensionModifierName
    !mAbstractExtensionModifierFormalParameterList
  ] 
}
#----------------------------------------------------------------------------------------------------------------------*

