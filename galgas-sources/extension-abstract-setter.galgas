#----------------------------------------------------------------------------------------------------------------------*
#   AST                                                                                                                *
#----------------------------------------------------------------------------------------------------------------------*

class @abstractExtensionSetterAST : @semanticDeclarationAST {
  @lstring mTypeName
  @lstring mAbstractExtensionSetterName
  @formalParameterListAST mAbstractExtensionSetterFormalParameterList
}

#----------------------------------------------------------------------------------------------------------------------*
#   SYNTAX                                                                                                             *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $abstract$
    $setter$
    $@type$ ?var  @lstring className indexing typeReferenceAbstractExtensionSetter
    $identifier$ ?var  @lstring setterName indexing abstractExtensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionSetterAST.new {
      !false # Is not predefined
      !className
      !setterName
      !formalParameterList
    }
  }

  #·····················································································································

}

#----------------------------------------------------------------------------------------------------------------------*
#   ENTER IN GRAPH                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"extension setter @" + mTypeName + " " + mAbstractExtensionSetterName ![mAbstractExtensionSetterName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + mTypeName ![mTypeName location]}]
#---
  if not [ioExtensionSetterMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioExtensionSetterMapForBuildingContext insertKey
      !mTypeName
      !@extensionSetterMapForType. emptyMap
    ]
  end
  with mTypeName in !?ioExtensionSetterMapForBuildingContext error message searchKey  do
    [!?mExtensionSetterMapForType insertKey
      !mAbstractExtensionSetterName
      !mAbstractExtensionSetterFormalParameterList
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#   KEY REPRESENTATION                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override getter @abstractExtensionSetterAST keyRepresentation
  ->@string outString {
  outString = "abstract extension setter @" + mTypeName + " " + mAbstractExtensionSetterName
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC CONTEXT                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC ANALYSIS                                                                                                  *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
#  let nameForUsefulness = setterNameForUsefulEntitiesGraph (!mTypeName !mAbstractExtensionSetterName)
#  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-proxy selfType = @unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mTypeName}
#--- Check self type is an abstract class
  if not [[selfType mTypeKindEnum] isClassType] then
    error mAbstractExtensionSetterName: "cannot declare a extension setter: '@" + [selfType key] + "' is not a class"
  elsif [selfType mIsConcrete] then
    error mAbstractExtensionSetterName: "cannot declare an abstract extension setter: '@" + [selfType key] + "' is not an abstract class"
  end
#--- Compute setter signature
  var formalParameterListForGeneration =@formalParameterListForGeneration {}
  for () in mAbstractExtensionSetterFormalParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      !mFormalArgumentPassingMode
      !@unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mFormalArgumentTypeName}
      !mFormalArgumentName
      ![mFormalArgumentName string]
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !" abstract extension setter " + mAbstractExtensionSetterName
    !@abstractExtensionSetterForGeneration.new {
      !true # Generate Cpp header file
      !"setter-" + [mTypeName fileNameRepresentation] + "-" + [mAbstractExtensionSetterName fileNameRepresentation]
      !selfType
      ![mAbstractExtensionSetterName string]
      !formalParameterListForGeneration
    }
}

#----------------------------------------------------------------------------------------------------------------------*
#   EXTENSION LIST MAP                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override method @abstractExtensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioAbstractExtensionSetterListMap +=
    ![mTypeName string]
    !mAbstractExtensionSetterName
}

#----------------------------------------------------------------------------------------------------------------------*
#   CODE GENERATION                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

class @abstractExtensionSetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  @unifiedTypeMap-proxy mReceiverType
  @string mAbstractExtensionSetterName
  @formalParameterListForGeneration mAbstractExtensionSetterFormalParameterList
}

#·······················································································································

override getter @abstractExtensionSetterForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @abstractExtensionSetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  outHeader = [filewrapper semanticComponentGenerationTemplate.abstractExtensionSetterDeclaration
    ![mReceiverType key]
    !mAbstractExtensionSetterName
    !mAbstractExtensionSetterFormalParameterList
  ] 
}

#·······················································································································

override method @abstractExtensionSetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  ioInclusionSet += !"setter-" + [[mReceiverType key] fileNameRepresentation] + "-" + [mAbstractExtensionSetterName fileNameRepresentation]
  [mReceiverType addHeaderFileName !?ioInclusionSet]
  for () in mAbstractExtensionSetterFormalParameterList do
    [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
  outImplementation = [filewrapper semanticComponentGenerationTemplate.abstractExtensionSetterImplementation
    ![mReceiverType key]
    !mAbstractExtensionSetterName
    !mAbstractExtensionSetterFormalParameterList
  ] 
}
#----------------------------------------------------------------------------------------------------------------------*

