#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @boolsetDeclarationAST : @semanticDeclarationAST {
  public var @lstring mBoolsetTypeName
  public var @lstringlist mFlagList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $boolset$
    $@type$ ?let @lstring boolsetTypeName indexing structDefinition
    ${$
    @lstringlist slotList = {}
    repeat
      $identifier$ ?let slotName
      slotList += !slotName
    while
      $,$
    end
    $}$
    ioDeclarations.mDeclarationList += !@boolsetDeclarationAST.new {
      !false # Is not predefined
      !boolsetTypeName
      !slotList
    }
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @boolsetDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mBoolsetTypeName ![self.mBoolsetTypeName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @boolsetDeclarationAST keyRepresentation -> @string {
  result = "boolset @" + self.mBoolsetTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func %once forbiddenKeysForBoolset -> @stringset {
  result = {}
  result += !"all"
  result += !"description"
  result += !"dynamicType"
  result += !"none"
  result += !"object"
}

#·······················································································································

override method @boolsetDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
#--- Check unicity of slot names
  @stringset slotNameSet = {}
  for (slotName) in self.mFlagList do
    if [forbiddenKeysForBoolset () hasKey !slotName.string] then
      @string m = "a slot cannot be named:"
      for s in forbiddenKeysForBoolset () do
        m += " " + s
      end
      m += "; theses names are reserved"
      error slotName: m
    elsif [slotNameSet hasKey !slotName] then
      error slotName : "duplicated slot name"
    end
    slotNameSet += !slotName
  end  
#--- boolset type index
  [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mBoolsetTypeName ?let boolsetTypeIndex]
#--- Constructors and attribute map
  commonGetterMapForAllTypes (!?ioSemanticContext.mTypeMap ?@getterMap getterMap)
  @constructorMap constructorMap = {}
  [!?constructorMap insertKey !["none" nowhere] !{} !false !boolsetTypeIndex] 
  [!?constructorMap insertKey !["all" nowhere] !{} !false !boolsetTypeIndex] 
  enterBaseFinalGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap 
    !getterName:"none"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterBaseFinalGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap 
    !getterName:"all"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  for (slotName) in self.mFlagList do
    if not [constructorMap hasKey !slotName] then
      [!?constructorMap insertKey !slotName !{} !false !boolsetTypeIndex] 
      enterBaseFinalGetterWithoutArgument (
        !?getterMap
        !?ioSemanticContext.mTypeMap 
        !getterName:slotName.string
        !returnedTypeName:"bool"
        !hasCompilerArgument:false
      )
    end
  end
#--- Setters
  @setterMap setterMap = {}
#--- Instance methods
  @instanceMethodMap instanceMethodMap = {}
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mBoolsetTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
#--- Operators
  let operators = @operators.infixAndOperator | .infixOrOperator | .infixXorOperator | .prefixTildeOperator
    | .generateDescriptionGetterUtilityMethod | .infixSubOperator | .isComparable
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mBoolsetTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !.null
    !.boolsetType
    !false # Does not support collection value
    !{}
    !{}
    !{}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !{}
    !operators
    !{}
    !{}
    !{}
    !{}
    !{}
    !false # Do not generate header in separate file
    !.null # No type for enumerated element for "for" instruction
    !"none" # Default constructor name
    !"boolset-" + [self.mBoolsetTypeName fileNameRepresentation]
    !.oneHeader
  ]
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @boolsetDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Check flags count
  if [self.mFlagList length] > 64 then
    let s = [self.mFlagList mValueAtIndex !64]
    error s : "max flags count is 64 (here: " + [self.mFlagList length] + ")"
  end
#--- Useful entities graph
  let boolsetNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mBoolsetTypeName)
  [!?ioUsefulEntitiesGraph addNode !boolsetNameForUsefulness !boolsetNameForUsefulness]
  ioSemanticDeclarationListForGeneration +=
    !"boolset " + self.mBoolsetTypeName
    !@boolsetTypeForGeneration.new {
      !.searchKey {!inSemanticContext.mTypeMap !self.mBoolsetTypeName}
      !self.mFlagList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @boolsetTypeForGeneration : @semanticTypeForGeneration {
  public var @lstringlist mFlagList
}

#·······················································································································

filewrapper structGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template boolsetTypeHeader1 "GALGAS_boolset.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@lstringlist SLOT_LIST

  template boolsetTypeSpecificImplementation "GALGAS_boolset.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@lstringlist SLOT_LIST
    ?@bigint FULL_SET
}

#·······················································································································

override method @boolsetTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  outHeader = [filewrapper structGenerationTemplate.boolsetTypeHeader1
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mFlagList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mSelfTypeEntry  mIsConcrete]
    ![self.mSelfTypeEntry  mConstructorMap]
    ![self.mSelfTypeEntry  mGetterMap]
    ![self.mSelfTypeEntry  mSetterMap]
    ![self.mSelfTypeEntry  mInstanceMethodMap]
    ![self.mSelfTypeEntry  mClassMethodMap]
    ![self.mSelfTypeEntry  mOptionalMethodMap]
    ![self.mSelfTypeEntry  mEnumerationDescriptor]
    ![self.mSelfTypeEntry  mHandledOperatorFlags]
    ![self.mSelfTypeEntry  mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry  mTypeForEnumeratedElement]
  ]
 }

#·······················································································································

override method @boolsetTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  [self.mSelfTypeEntry  addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper structGenerationTemplate.boolsetTypeSpecificImplementation
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mFlagList
    !(1G << [self.mFlagList length]) - 1G
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
