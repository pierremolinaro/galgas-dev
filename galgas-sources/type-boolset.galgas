#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @boolsetDeclarationAST : @semanticDeclarationAST {
  private let @lstring mBoolsetTypeName
  private let @lstringlist mFlagList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $boolset$
    $@type$ ?let @lstring boolsetTypeName indexing structDefinition
    ${$
    var @lstringlist slotList = {}
    repeat
      $identifier$ ?let slotName
      slotList += !slotName
    while
      $,$
    end
    $}$
    ioDeclarations.mDeclarationList += !@boolsetDeclarationAST.new {
      !false # Is not predefined
      !boolsetTypeName
      !slotList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations
                     ?!@stringset unused ioUserImplicitDeclaredTypeSet {
    $boolset$
    $@type$ ?let @lstring boolsetTypeName indexing structDefinition
    ${$
    var @lstringlist slotList = {}
    repeat
      $identifier$ ?let slotName
      slotList += !slotName
    while
      $,$
    end
    $}$
    ioDeclarations.mDeclarationList += !@boolsetDeclarationAST.new {
      !false # Is not predefined
      !boolsetTypeName
      !slotList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @boolsetDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mBoolsetTypeName !self.mBoolsetTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @boolsetDeclarationAST keyRepresentation -> @string {
  result = "boolset @" + self.mBoolsetTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func %once forbiddenKeysForBoolset -> @stringset {
  result = {}
  result += !"all"
  result += !"description"
  result += !"dynamicType"
  result += !"none"
  result += !"object"
}

#·······················································································································

override method @boolsetDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
#--- Check unicity of slot names
  var @stringset slotNameSet = {}
  for (slotName) in self.mFlagList do
    if [forbiddenKeysForBoolset () hasKey !slotName.string] then
      var @string m = "a slot cannot be named:"
      for s in forbiddenKeysForBoolset () do
        m += " " + s
      end
      m += "; theses names are reserved"
      error slotName: m
    elsif [slotNameSet hasKey !slotName] then
      error slotName : "duplicated slot name"
    end
    slotNameSet += !slotName
  end  
#--- boolset type index
  [!?ioTypeMap makeEntry !self.mBoolsetTypeName ?let boolsetTypeIndex]
#--- Constructors and attribute map
  commonGetterMapForAllTypes (!?ioTypeMap ?@getterMap getterMap)
  var @constructorMap constructorMap = {}
  [!?constructorMap insertKey !["none" nowhere] !{} !false !boolsetTypeIndex] 
  [!?constructorMap insertKey !["all" nowhere] !{} !false !boolsetTypeIndex] 
  enterBaseFinalGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap 
    !getterName:"none"
    !obsoleteName: ""
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterBaseFinalGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap 
    !getterName:"all"
    !obsoleteName: ""
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  for (slotName) in self.mFlagList do
    if not [constructorMap hasKey !slotName] then
      [!?constructorMap insertKey !slotName !{} !false !boolsetTypeIndex] 
      enterBaseFinalGetterWithoutArgument (
        !?getterMap
        !?ioTypeMap 
        !getterName:slotName.string
        !obsoleteName: ""
        !returnedTypeName:"bool"
        !hasCompilerArgument:false
      )
    end
  end
#--- Setters
  var @setterMap setterMap = {}
#--- Instance methods
  var @instanceMethodMap instanceMethodMap = {}
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mBoolsetTypeName
    !isClass: false
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Operators
  let operators = @operators.infixAndOperator | .infixOrOperator | .infixXorOperator | .prefixTildeOperator
    | .generateDescriptionGetterUtilityMethod | .infixSubOperator | .isComparable
#--- Enter in type map
  let typeDefinition = @unifiedTypeDefinition.new {
    !self.mBoolsetTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !.null
    !.boolsetType
    !false # Does not support collection value
    !{}
    !{}
    !{}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !{}
    !operators
    !{}
    !{}
    !{}
    !{}
    !{}
    !false # Do not generate header in separate file
    !.null # No type for enumerated element for "for" instruction
    !defaultConstructorName: "none" # Default constructor name
    !"boolset-" + [self.mBoolsetTypeName fileNameRepresentation]
    !.oneHeader
  }
  [!?ioTypeMap insertType !typeDefinition.mTypeName !typeDefinition]
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @boolsetDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Check flags count
  if [self.mFlagList count] > 64 then
    let @location s = [self.mFlagList mValueAtIndex !64]
    error s : "max flags count is 64 (here: " + [self.mFlagList count] + ")"
  end
#--- Useful entities graph
  let boolsetNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mBoolsetTypeName)
  [!?ioUsefulEntitiesGraph addNode !boolsetNameForUsefulness !boolsetNameForUsefulness]
  ioSemanticDeclarationListForGeneration +=
    !"boolset " + self.mBoolsetTypeName
    !@boolsetTypeForGeneration.new {
      ![ioTypeMap searchKey !self.mBoolsetTypeName]
      !self.mFlagList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @boolsetTypeForGeneration : @semanticTypeForGeneration {
  private let @lstringlist mFlagList
}

#·······················································································································

filewrapper structGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template boolsetTypeHeader1 "GALGAS_boolset.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@lstringlist SLOT_LIST

  template boolsetTypeSpecificImplementation "GALGAS_boolset.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@lstringlist SLOT_LIST
    ?@bigint FULL_SET
}

#·······················································································································

override method @boolsetTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  let typedefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper structGenerationTemplate.boolsetTypeHeader1
    !typedefinition.mTypeName.string
    ![typedefinition.mTypeName.string identifierRepresentation]
    !self.mFlagList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !typedefinition.mTypeName.string
    ![typedefinition.mTypeName.string identifierRepresentation]
    !typedefinition.mIsConcrete
    !typedefinition.mConstructorMap
    !typedefinition.mGetterMap
    !typedefinition.mSetterMap
    !typedefinition.mInstanceMethodMap
    !typedefinition.mClassMethodMap
    !typedefinition.mOptionalMethodMap
    !typedefinition.mEnumerationDescriptor
    !typedefinition.mHandledOperatorFlags
    !typedefinition.mAddAssignOperatorArguments
    !typedefinition.mTypeForEnumeratedElement
  ]
 }

#·······················································································································

override method @boolsetTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  [self.mSelfTypeEntry  addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper structGenerationTemplate.boolsetTypeSpecificImplementation
    ![self.mSelfTypeEntry  definition].mTypeName.string
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mFlagList
    !(1 << [self.mFlagList count]) - 1
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
