#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @setterCallInstructionAST : @semanticInstructionAST {
  private let @bool mPrefixedBySelf
  private let @lstring mReceiverName
  private let @lstringlist mReceiverStructProperties
  private let @lstring mTypeNameForCasting
  private let @lstring mSetterName
  private let @actualParameterListAST mActualParameterList
}

#·····················································································································*

refclass @selfSetterCallInstructionAST : @semanticInstructionAST {
  private let @lstring mSetterName
  private let @actualParameterListAST mActualParameterList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $[$
    let instructionLocation = @location.here
    $!?$ ?let selector
    if selector.string != "" then
      error selector : "an empty selector '!?' is required here"
    end
    let @bool prefixedBySelf
    select
      prefixedBySelf = false
    or
      $self$
      $.$
      prefixedBySelf = true
    end
    $identifier$ ?let mReceiverName
    var mReceiverStructAttributes = @lstringlist {}
    repeat
    while
      $.$
      $identifier$ ?let structAttribute
      mReceiverStructAttributes += !structAttribute
    end
    let @lstring typeNameForCasting
    select
      typeNameForCasting = ["" nowhere]
    or
      $as$
      <type_definition_ggs3> !?ioDeclarations ?typeNameForCasting
    end
    $identifier$ ?let mSetterName
    <actual_parameter_list_ggs3> !?ioDeclarations ?let @actualParameterListAST actualParameterList
    $]$
    outInstruction = @setterCallInstructionAST.new {
      !instructionLocation
      !prefixedBySelf
      !mReceiverName
      !mReceiverStructAttributes
      !typeNameForCasting
      !mSetterName
      !actualParameterList
    }
  }

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $[$
    let instructionLocation = @location.here
    $!?$ ?let selector
    if selector.string != "" then
      error selector : "an empty selector '!?' is required here"
    end
    $self$
    $identifier$ ?let mSetterName
    <actual_parameter_list_ggs3> !?ioDeclarations ?let @actualParameterListAST actualParameterList
    $]$
    outInstruction = @selfSetterCallInstructionAST.new {
      !instructionLocation
      !mSetterName
      !actualParameterList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

#  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
#    $[$
#    let instructionLocation = @location.here
#    $!?$ ?let selector
#    if selector.string != "" then
#      error selector : "an empty selector '!?' is required here"
#    end
#    let @bool prefixedBySelf
#    select
#      prefixedBySelf = false
#    or
#      $self$
#      $.$
#      prefixedBySelf = true
#    end
#    $identifier$ ?let mReceiverName
#    var mReceiverStructAttributes = @lstringlist {}
#    repeat
#    while
#      $.$
#      $identifier$ ?let structAttribute
#      mReceiverStructAttributes += !structAttribute
#    end
#    $identifier$ ?let mSetterName
#    <actual_parameter_list> ?let @actualParameterListAST actualParameterList
#    outInstruction = @setterCallInstructionAST.new {
#      !instructionLocation
#      !prefixedBySelf
#      !mReceiverName
#      !mReceiverStructAttributes
#      !["" here] # typeNameForCasting
#      !mSetterName
#      !actualParameterList
#    }
#    $]$
#  }

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    let instructionLocation = @location.here
    $!?$ ?let selector
    if selector.string != "" then
      error selector : "an empty selector '!?' is required here"
    end
    let @bool prefixedBySelf
    select
      prefixedBySelf = false
    or
      $self$
      $.$
      prefixedBySelf = true
    end
    $identifier$ ?let mReceiverName
    select
      <actual_parameter_list_within_parenthesis> !?ioDeclarations ?let @actualParameterListAST actualParameterList
      if prefixedBySelf then
        outInstruction = @selfSetterCallInstructionAST.new {
          !instructionLocation
          !mReceiverName
          !actualParameterList
        }
      else
        error instructionLocation : "invalid setter call" : outInstruction
      end
    or
      var receiverStructProperties = @lstringlist {}
      repeat
        $.$
        $identifier$ ?let structProperty
        receiverStructProperties += !structProperty
      while
      end
      [!?receiverStructProperties popLast ?let setterName]
      <actual_parameter_list_within_parenthesis> !?ioDeclarations ?let @actualParameterListAST actualParameterList
      outInstruction = @setterCallInstructionAST.new {
        !instructionLocation
        !prefixedBySelf
        !mReceiverName
        !receiverStructProperties
        !["" here] # typeNameForCasting
        !setterName
        !actualParameterList
      }
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @setterCallInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for (mActualParameter) in self.mActualParameterList do
    [mActualParameter enterParameterInSemanticContext !?ioTypeMap]
  end
}

#·····················································································································*

override method @selfSetterCallInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for (mActualParameter) in self.mActualParameterList do
    [mActualParameter enterParameterInSemanticContext !?ioTypeMap]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @setterCallInstructionAST analyzeSemanticInstruction ?let @lstring inUsefulnessCallerEntityName
                                                          ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                                          ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
                                                          ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                                                          ?!@localVarManager ioVariableMap {
  var @unifiedTypeMapEntry receiverType
  let @string targetVariableCppName
  let @string nameForCheckingFormalParameterUsing
  if self.mPrefixedBySelf then
    if let [inAnalysisContext.selfType available
                    ?type: let selfType
                    ?mutable: let selfIsMutable
                    ?mutableproperties: *] then
      if let [[selfType definition].mTypeKindEnum classType ?isReference: let isReference], isReference then
      elsif not selfIsMutable then
        error self.mSetterName : "'self' not mutable in this context"
      end
      let propertyMap = [selfType definition].mPropertyMap
      [propertyMap searchKey !self.mReceiverName ?* ?let isConstant ?receiverType]
      if isConstant then
        error self.mReceiverName: "a constant property cannot be modified"
      end
      nameForCheckingFormalParameterUsing = inAnalysisContext.mSelfObjectCppName
      targetVariableCppName = inAnalysisContext.mSelfObjectCppPrefixForAccessingProperty
        + "mProperty_"+ [self.mReceiverName.string identifierRepresentation]
    else
      error self.mSetterName
      : "'self' not available in this context"
      : receiverType, targetVariableCppName, nameForCheckingFormalParameterUsing
    end
  else
    [!?ioVariableMap searchForReadWriteAccess
       !self.mReceiverName
       ?receiverType
       ?targetVariableCppName
       ?nameForCheckingFormalParameterUsing
    ]
  end
#--- Get target variable type
  var ok = true
  var errorLocation = self.mReceiverName.location
  for (value) in self.mReceiverStructProperties while ok do
    ok = [[receiverType definition].mTypeKindEnum isStructType]
    if not ok then
      error errorLocation : "a structure is required for '.' access"
    else
      let propertyMap = [receiverType definition].mPropertyMap
      [propertyMap searchKey !value ?let accessControl ?let isConstant ?receiverType]
      [accessControl checkSetAccess !inAnalysisContext.selfType !value.location]
      errorLocation = value.location
#      if not isPublic then
#        error value : " inaccessible property (due to its 'private' qualifier)"
#      end
      if isConstant then
        error value : "a constant property cannot be modified"
      end
    end
  end
#--- Type cast ?
  let @unifiedTypeMapEntry castType
  if self.mTypeNameForCasting.string != "" then
    castType = [ioTypeMap typeMapEntryForLKey !self.mTypeNameForCasting]
    checkAssignmentTypes (!receiverType !castType !self.mTypeNameForCasting.location)
  else
    castType = receiverType
  end
#--- Get setter signature
  [[castType definition].mSetterMap searchKey
    !self.mSetterName
    ?let kind
    ?let routineSignature
    ?let hasCompilerArgument
    ?*
    ?let setterErrorMessage
  ]
  if setterErrorMessage != "" then
    error self.mSetterName : setterErrorMessage
  end
#--- Check effective parameters
  [self.mActualParameterList analyzeRoutineArguments
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mSetterName
    !invokedEntityNameForErrorSignaling: "'" + self.mSetterName + "' setter header"
    !routineSignature
    !?ioVariableMap
    !?ioInstructionListForGeneration
    ?let @actualParameterListForGeneration actualParameterListForGeneration
  ]
#--- Search base type that declares the method
  var baseType = castType
  var searching = true
  if @uint.errorCount == 0 then
    loop (@uint.max) while searching do
      if [[baseType definition].mSuperType isNull] then
        searching = false
      else
        if [[[baseType definition].mSuperType definition].mSetterMap hasKey !self.mSetterName.string] then
          baseType = [baseType definition].mSuperType
        else
          searching = false
        end
      end
    end
  end
#--- Generate instructions
  ioInstructionListForGeneration += !@setterCallInstructionForGeneration.new {
    !self.mReceiverName.location
    !targetVariableCppName
    !nameForCheckingFormalParameterUsing
    !self.mReceiverStructProperties
    !castType
    !receiverType
    !self.mSetterName
    !kind
    !actualParameterListForGeneration
    !hasCompilerArgument
    !baseType
  }
}

#·····················································································································*

override method @selfSetterCallInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap {
#--- Analyze "self", as receiver expression
  if let [inAnalysisContext.selfType available
      ?type: let selfType
      ?mutable: let selfIsMutable
      ?mutableproperties: *] then
    if not selfIsMutable then
      error self.mSetterName : "'self' not mutable in this context"
    end
  #--- Get setter signature
    [[selfType definition].mSetterMap searchKey !self.mSetterName ?let kind ?let routineSignature ?let hasCompilerArgument ?* ?*]
  #--- Check effective parameters
    [self.mActualParameterList analyzeRoutineArguments
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !self.mSetterName
      !invokedEntityNameForErrorSignaling: "'" + self.mSetterName + "' setter header"
      !routineSignature
      !?ioVariableMap
      !?ioInstructionListForGeneration
      ?let @actualParameterListForGeneration actualParameterListForGeneration
    ]
  #--- Generate instructions
    ioInstructionListForGeneration += !@selfSetterCallInstructionForGeneration.new {
      !inAnalysisContext.mSelfObjectCppName
      !selfType
      !self.mSetterName
      !kind
      !actualParameterListForGeneration
      !hasCompilerArgument
    }
  else
    error self.mSetterName : "'self' not available in this context"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @setterCallInstructionForGeneration : @semanticInstructionForGeneration {
  private let @location mInstructionLocation
  private let @string mReceiverCppName
  private let @string mReceiverBaseName
  private let @lstringlist mReceiverStructAttributes
  private let @unifiedTypeMapEntry mCastType
  private let @unifiedTypeMapEntry mReceiverType
  private let @lstring mSetterName
  private let @methodKind mKind
  private let @actualParameterListForGeneration mActualParameterList
  private let @bool mHasCompilerArgument
  private let @unifiedTypeMapEntry mMethodBaseType
}

#·····················································································································*

refclass @selfSetterCallInstructionForGeneration : @semanticInstructionForGeneration {
  private let @string mSelfCppName
  private let @unifiedTypeMapEntry mReceiverType
  private let @lstring mSetterName
  private let @methodKind mKind
  private let @actualParameterListForGeneration mActualParameterList
  private let @bool mHasCompilerArgument
}

#·····················································································································*

override method @setterCallInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  ioGeneratedCode += "{\n"
  var receiverCppName = self.mReceiverCppName
  for (mValue) in self.mReceiverStructAttributes do
    receiverCppName += ".mProperty_" + [mValue.string identifierRepresentation]
  end
  [!?ioUnusedVariableCppNameSet removeKey !self.mReceiverBaseName]
#--- Parameters
  var @stringlist parameterCppNameList = {}
  var @stringlist jokerParametersToReleaseList = {}
  var @stringlist inputVariableList = {}
  for (mActualParameter) in self.mActualParameterList do
    [mActualParameter generateActualParameter
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioGeneratedCode
      !?jokerParametersToReleaseList
      !?inputVariableList
      !?ioUnusedVariableCppNameSet
      ?let parameterCppName
    ]
    parameterCppNameList += !parameterCppName
  end
#--- Generate method call
  switch self.mKind
  case definedAsExtension :
    ioInclusionSet += !"setter-" + [[self.mMethodBaseType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mSetterName fileNameRepresentation]
    if [[self.mReceiverType definition].mTypeKindEnum isClassType] then
      if ([[self.mReceiverType definition].mAllTypedPropertyList count] > 0) then #  & [mReceiverType mIsConcrete] then
        ioGeneratedCode += receiverCppName + ".insulate (HERE) ;\n"
      end
      let pointerUniqueName = "ptr_" + [self.mInstructionLocation startLocationIndex]
      ioGeneratedCode += "cPtr_" + [self.mReceiverType identifierRepresentation] + " * " + pointerUniqueName
      ioGeneratedCode += " = (cPtr_" + [self.mReceiverType identifierRepresentation] + " *) " + receiverCppName + ".ptr () ;\n"
      if [self.mCastType definition].mTypeName.string != [self.mReceiverType definition].mTypeName.string then
        ioInclusionSet += !"class-" + [[self.mCastType definition].mTypeName.string fileNameRepresentation]
        ioGeneratedCode += "if ((nullptr != " + pointerUniqueName
                        + ") && (dynamic_cast <cPtr_" + [self.mCastType identifierRepresentation] + " *> ("
                        + pointerUniqueName + ") == nullptr)) {\n"
        [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
        ioGeneratedCode += "  " + compilerCppName () + "->onTheFlyRunTimeError (\"cannot cast to '@"
                        + [self.mCastType definition].mTypeName.string + "'\"" + [self.mInstructionLocation commaSourceFile] + ") ;\n"
        ioGeneratedCode += "  " + pointerUniqueName + " = nullptr ;\n"
        ioGeneratedCode += "}\n"
      end
      ioGeneratedCode += "callExtensionSetter_" + [self.mSetterName identifierRepresentation]
                      +  " ((cPtr_" + [self.mCastType identifierRepresentation] + " *) " + pointerUniqueName + ", "
    else
      ioGeneratedCode += "extensionSetter_" + [self.mSetterName identifierRepresentation] + " (" + receiverCppName + ", "
    end
  case definedAsMember :
    [self.mReceiverType addHeaderFileName !?ioInclusionSet]
    ioGeneratedCode += receiverCppName + ".setter_" + [self.mSetterName.string identifierRepresentation] + " ("
  end
  for (mValue) in parameterCppNameList
    do ioGeneratedCode += mValue
    between ioGeneratedCode += ", "
  end
  if self.mHasCompilerArgument then
    if [parameterCppNameList count] != 0 then
      ioGeneratedCode +=  ", "
    end
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    ioGeneratedCode +=  compilerCppName ()
    ioGeneratedCode += " COMMA_"
  elsif [parameterCppNameList count] != 0 then
    ioGeneratedCode += " COMMA_"
  end
  ioGeneratedCode += [self.mSetterName.location sourceFile] + ") ;\n"
#  ioGeneratedCode += "}catch (GGS_InvalidException &) {\n"
  ioGeneratedCode += "}\n"
}

#·····················································································································*

override method @selfSetterCallInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  ioGeneratedCode += "{\n"
  [!?ioUnusedVariableCppNameSet removeKey !self.mSelfCppName]
#--- Parameters
  var parameterCppNameList = @stringlist {}
  var jokerParametersToReleaseList = @stringlist {}
  var inputVariableList = @stringlist {}
  for (mActualParameter) in self.mActualParameterList do
    [mActualParameter generateActualParameter
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioGeneratedCode
      !?jokerParametersToReleaseList
      !?inputVariableList
      !?ioUnusedVariableCppNameSet
      ?let @string parameterCppName]
    parameterCppNameList += !parameterCppName
  end
#--- Generate setter call
  switch self.mKind
  case definedAsExtension :
    ioInclusionSet += !"setter-" + [[self.mReceiverType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mSetterName fileNameRepresentation]
    if [[self.mReceiverType definition].mTypeKindEnum isClassType] then
      ioGeneratedCode += "callExtensionSetter_" + [self.mSetterName identifierRepresentation] + " (" + self.mSelfCppName + ", "
    else
      ioGeneratedCode += "extensionSetter_" + [self.mSetterName identifierRepresentation] + " (" + self.mSelfCppName + ", "
    end
  case definedAsMember :
    if [[self.mReceiverType definition].mTypeKindEnum isClassType] then
      ioGeneratedCode += self.mSelfCppName + "->setter_" + [self.mSetterName identifierRepresentation] + " ("
    else
      ioGeneratedCode += self.mSelfCppName + ".setter_" + [self.mSetterName identifierRepresentation] + " ("
    end
  end
  for (mValue) in parameterCppNameList
    do ioGeneratedCode += mValue
    between ioGeneratedCode += ", "
  end
  if self.mHasCompilerArgument then
    if [parameterCppNameList count] != 0 then
      ioGeneratedCode +=  ", "
    end
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    ioGeneratedCode +=  compilerCppName ()
    ioGeneratedCode += " COMMA_"
  elsif [parameterCppNameList count] != 0 then
    ioGeneratedCode += " COMMA_"
  end
  ioGeneratedCode += [self.mSetterName.location sourceFile] + ") ;\n"
  ioGeneratedCode += "}\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
