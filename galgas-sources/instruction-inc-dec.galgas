//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//! AST
//--------------------------------------------------------------------------------------------------

enum @incDecKind {
  case increment
  case decrement
}

//································································································*

class @incDecInstructionAST : @semanticInstructionAST {
  public let @bool mPrefixedBySelf
  public let @lstring mReceiverName
  public let @lstringlist mStructAttributeList
  public let @incDecKind mKind
}

//································································································*

class @incDecNoOVFInstructionAST : @semanticInstructionAST {
  public let @bool mPrefixedBySelf
  public let @lstring mReceiverName
  public let @lstringlist mStructAttributeList
  public let @incDecKind mKind
}

//································································································*

class @selfIncDecInstructionAST : @semanticInstructionAST {
  public let @incDecKind mKind
}

//································································································*

class @selfIncDecNoOVFInstructionAST : @semanticInstructionAST {
  public let @incDecKind mKind
}


//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    <semantic_instruction_inc_dec> !?ioDeclarations !prefixedBySelf: false ?outInstruction
  }

 //································································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $self$
    $.$
    <semantic_instruction_inc_dec> !?ioDeclarations !prefixedBySelf: true ?outInstruction
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction_inc_dec> ?!@galgasDeclarationAST unused ioDeclarations
                                      ?prefixedBySelf: let @bool inPrefixedBySelf
                                      !@semanticInstructionAST outInstruction {
    $identifier$ ?let mReceiverName
    var mStructAttributeList = @lstringlist ()
    repeat
    while
      $.$
      $identifier$ ?let attributeName
      mStructAttributeList += !attributeName
    end
    select
      $++$
      outInstruction = @incDecInstructionAST {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.increment
      }
    or
      $&++$
      outInstruction = @incDecNoOVFInstructionAST {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.increment
      }
    or
      $&--$
      outInstruction = @incDecNoOVFInstructionAST {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.decrement
      }
    or
      $--$
      outInstruction = @incDecInstructionAST {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.decrement
      }
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    select
      $++$
      outInstruction = @selfIncDecInstructionAST {
        !instructionLocation
        !.increment
      }
    or
      $--$
      outInstruction = @selfIncDecInstructionAST {
        !instructionLocation
        !.decrement
      }
    or
      $&++$
      outInstruction = @selfIncDecNoOVFInstructionAST {
        !instructionLocation
        !.increment
      }
    or
      $&--$
      outInstruction = @selfIncDecNoOVFInstructionAST {
        !instructionLocation
        !.decrement
      }
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! CONTEXT
//--------------------------------------------------------------------------------------------------

override method @incDecInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

//································································································*

override method @incDecNoOVFInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

//································································································*

override method @selfIncDecInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

//································································································*

override method @selfIncDecNoOVFInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

//--------------------------------------------------------------------------------------------------
//! SEMANTICS
//--------------------------------------------------------------------------------------------------

override method @incDecInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
//--- Check target variable
  var @unifiedTypeMapEntry targetType
  let @string targetVariableCppName
//  let @string nameForCheckingFormalParameterUsing
  if self.mPrefixedBySelf then
    if let selfAvailable = [inAnalysisContext.selfAvailability getAvailable] then
      if not [selfAvailable.selfMutability selfIsMutable] then
        error self.mInstructionLocation : "'self' not mutable in this context"
      end
      let propertyMap = [selfAvailable.type definition].propertyMap
      [propertyMap searchKey !self.mReceiverName ?* ?let isConstant ?targetType]
//      nameForCheckingFormalParameterUsing = inAnalysisContext.selfObjectCppName
      targetVariableCppName = inAnalysisContext.selfObjectCppPrefixForAccessingProperty
       + "mProperty_"+ [self.mReceiverName.string identifierRepresentation]
      if isConstant then
        error self.mReceiverName : "a constant property cannot be modified"
      end
      if not [selfAvailable.selfMutability propertiesAreMutable] then
        error self.mReceiverName : "the property cannot be mutated in this constant"
      end
    else
      error self.mInstructionLocation : "'self' not available in this context"
      : targetType, targetVariableCppName //, nameForCheckingFormalParameterUsing
    end
  else
    [!?ioVariableMap searchForReadWriteAccess
       !self.mReceiverName
       ?targetType
       ?targetVariableCppName
       ?* // nameForCheckingFormalParameterUsing
    ]
  end
//---
  for (value) in self.mStructAttributeList do
    let propertyMap = [targetType definition].propertyMap
    [propertyMap searchKey !value ?let accessControl ?let isConstant ?targetType]
    [accessControl checkSetAccess !inAnalysisContext.selfAvailability !value.location]
//    if not isPublic then
//      error mValue : " inaccessible property (due to its 'private' qualifier)"
//    end
    if isConstant then
      error value : "a constant property cannot be modified"
    end
  end
//--- Check target type accepts incrementation
  if not [[targetType definition].features contains !.incDecOperator] then
    error self.mInstructionLocation
    :"the target object has the '@" + [targetType definition].typeName.string + "' type, but this type does not support the '++', '--' operators"
  end
//--- Generate instruction
  ioInstructionListForGeneration += !@incDecInstructionForGeneration {
    !self.mInstructionLocation
    !targetVariableCppName
    !targetType
    !self.mStructAttributeList
    !self.mKind
  }
}

//································································································*

override method @incDecNoOVFInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
//--- Check target variable
  var @unifiedTypeMapEntry targetType
  [!?ioVariableMap searchForReadWriteAccess !self.mReceiverName ?targetType ?let targetVariableCppName ?*]
  for (value) in self.mStructAttributeList do
    let propertyMap = [targetType definition].propertyMap
    [propertyMap searchKey !value ?let accessControl ?let isConstant ?targetType]
    [accessControl checkSetAccess !inAnalysisContext.selfAvailability !value.location]
//    if not isPublic then
//      error mValue : " inaccessible property (due to its 'private' qualifier)"
//    end
    if isConstant then
      error value : "a constant property cannot be modified"
    end
  end
//--- Check target type accepts incrementation
  if not [[targetType definition].features contains !.incDecOperator] then
    error self.mInstructionLocation
    :"the target object has the '@" + [targetType definition].typeName.string + "' type, but this type does not support the '&++', '&--' operators"
  end
//--- Generate instruction
  ioInstructionListForGeneration += !@incDecNoOVFInstructionForGeneration {
    !self.mInstructionLocation
    !targetVariableCppName
    !targetType
    !self.mStructAttributeList
    !self.mKind
  }
}

//································································································*

override method @selfIncDecNoOVFInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager unused ioVariableMap
{
  if let selfAvailable = [inAnalysisContext.selfAvailability getAvailable] then
    if not [selfAvailable.selfMutability selfIsMutable] then
      error self.mInstructionLocation : "'self' not mutable in this context"
    end
  //--- Check target type accepts incrementation
    if not [[selfAvailable.type definition].features contains !.incDecOperator] then
      error self.mInstructionLocation
      :"the target object has the '@" + [selfAvailable.type definition].typeName.string + "' type, but this type does not support the '&++' and  '&--' operators"
    end
  //--- Generate instruction
    ioInstructionListForGeneration += !@incDecNoOVFInstructionForGeneration {
      !self.mInstructionLocation
      !inAnalysisContext.selfObjectCppName
      !selfAvailable.type
      !@()
      !self.mKind
    }
  else
    error self.mInstructionLocation : "'self' not available in this context"
  end
}

//································································································*

override method @selfIncDecInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager unused ioVariableMap
{
  if let selfAvailable = [inAnalysisContext.selfAvailability getAvailable] then
    if not [selfAvailable.selfMutability selfIsMutable] then
      error self.mInstructionLocation : "'self' not mutable in this context"
    end
  //--- Check target type accepts incrementation
    if not [[selfAvailable.type definition].features contains !.incDecOperator] then
      error self.mInstructionLocation
      :"the target object has the '@" + [selfAvailable.type definition].typeName.string + "' type, but this type does not support the '++' and  '--' operators"
    end
  //--- Generate instruction
    ioInstructionListForGeneration += !@incDecInstructionForGeneration {
      !self.mInstructionLocation
      !inAnalysisContext.selfObjectCppName
      !selfAvailable.type
      !@()
      !self.mKind
     }
  else
    error self.mInstructionLocation : "'self' not available in this context"
  end
}

//--------------------------------------------------------------------------------------------------
//! GENERATION
//--------------------------------------------------------------------------------------------------

class @incDecInstructionForGeneration : @semanticInstructionForGeneration {
  public let @location mInstructionLocation
  public let @string mReceiverCppName
  public let @unifiedTypeMapEntry mReceiverType
  public let @lstringlist mStructAttributeList
  public let @incDecKind mKind
}

//································································································*

class @incDecNoOVFInstructionForGeneration : @semanticInstructionForGeneration {
  public let @location mInstructionLocation
  public let @string mReceiverCppName
  public let @unifiedTypeMapEntry mReceiverType
  public let @lstringlist mStructAttributeList
  public let @incDecKind mKind
}

//································································································*

override method @incDecInstructionForGeneration generateInstruction
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
//--- Receiver
  [!?ioUnusedVariableCppNameSet removeKey !self.mReceiverCppName]
  var @string receiverCppName = self.mReceiverCppName
  for (mValue) in self.mStructAttributeList do
    receiverCppName += ".mProperty_" + [mValue.string identifierRepresentation]
  end
//--- Invoke incrementation
  switch self.mKind
  case increment :
    ioGeneratedCode += receiverCppName + ".increment_operation (" + compilerCppName ()
                    + " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  case decrement :
    ioGeneratedCode += receiverCppName + ".decrement_operation (" + compilerCppName ()
                    + " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  end
}

//································································································*

override method @incDecNoOVFInstructionForGeneration generateInstruction
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
//--- Receiver
  [!?ioUnusedVariableCppNameSet removeKey !self.mReceiverCppName]
  var @string receiverCppName = self.mReceiverCppName
  for (mValue) in self.mStructAttributeList do
    receiverCppName += ".mProperty_" + [mValue.string identifierRepresentation]
  end
//--- Invoke incrementation
  switch self.mKind
  case increment :
    ioGeneratedCode += receiverCppName + ".increment_operation_no_overflow () ;\n"
  case decrement :
    ioGeneratedCode += receiverCppName + ".decrement_operation_no_overflow () ;\n"
  end
}

//--------------------------------------------------------------------------------------------------
