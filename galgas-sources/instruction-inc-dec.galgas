#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @incDecKind {
  case increment
  case decrement
}

#·····················································································································*

refclass @incDecInstructionAST : @semanticInstructionAST {
  public var @bool mPrefixedBySelf
  public var @lstring mReceiverName
  public var @lstringlist mStructAttributeList
  public var @incDecKind mKind
}

#·····················································································································*

refclass @incDecNoOVFInstructionAST : @semanticInstructionAST {
  public var @bool mPrefixedBySelf
  public var @lstring mReceiverName
  public var @lstringlist mStructAttributeList
  public var @incDecKind mKind
}

#·····················································································································*

refclass @selfIncDecInstructionAST : @semanticInstructionAST {
  public var @incDecKind mKind
}

#·····················································································································*

refclass @selfIncDecNoOVFInstructionAST : @semanticInstructionAST {
  public var @incDecKind mKind
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    <semantic_instruction_inc_dec> !prefixedBySelf: false ?outInstruction
  }
  
 #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    $.$
    <semantic_instruction_inc_dec> !prefixedBySelf: true ?outInstruction
  }
  
  #·····················································································································

  rule <semantic_instruction_inc_dec> ?prefixedBySelf: let @bool inPrefixedBySelf !@semanticInstructionAST outInstruction {
    $identifier$ ?let mReceiverName
    var mStructAttributeList =@lstringlist {}
    repeat
    while
      $.$
      $identifier$ ?let attributeName
      mStructAttributeList += !attributeName
    end
    select
      $++$
      outInstruction = @incDecInstructionAST.new {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.increment
      }
    or
      $&++$
      outInstruction = @incDecNoOVFInstructionAST.new {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.increment
      }
    or
      $&--$
      outInstruction = @incDecNoOVFInstructionAST.new {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.decrement
      }
    or
      $--$
      outInstruction = @incDecInstructionAST.new {
        !mReceiverName.location
        !inPrefixedBySelf
        !mReceiverName
        !mStructAttributeList
        !.decrement
      }
    end
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    select
      $++$
      outInstruction = @selfIncDecInstructionAST.new {
        !instructionLocation
        !.increment
      }
    or
      $--$
      outInstruction = @selfIncDecInstructionAST.new {
        !instructionLocation
        !.decrement
      }
    or
      $&++$
      outInstruction = @selfIncDecNoOVFInstructionAST.new {
        !instructionLocation
        !.increment
      }
    or
      $&--$
      outInstruction = @selfIncDecNoOVFInstructionAST.new {
        !instructionLocation
        !.decrement
      }
    end
  }  

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @incDecInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

#·····················································································································*

override method @incDecNoOVFInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

#·····················································································································*

override method @selfIncDecInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

#·····················································································································*

override method @selfIncDecNoOVFInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @incDecInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
#--- Check target variable
  var @unifiedTypeMap-entry targetType
  var @string targetVariableCppName
  var @string nameForCheckingFormalParameterUsing
  if self.mPrefixedBySelf then
    if [inAnalysisContext.mSelfCopyTypeEntry isNull] then
      error self.mReceiverName: "'self' cannot be used in this context"
      : targetType, nameForCheckingFormalParameterUsing, targetVariableCppName
    elsif [inAnalysisContext.mSelfTypeEntry isNull] then
      error self.mReceiverName: "'self' object is not mutable"
      : targetType, nameForCheckingFormalParameterUsing, targetVariableCppName
    else
      let propertyMap = [inAnalysisContext.mSelfTypeEntry mPropertyMap]
      [propertyMap searchKey !self.mReceiverName ?* ?let isConstant ?targetType]
      nameForCheckingFormalParameterUsing = inAnalysisContext.mSelfObjectCppName
      targetVariableCppName = inAnalysisContext.mSelfObjectCppPrefixForAccessingProperty
       + "mProperty_"+ [self.mReceiverName.string identifierRepresentation]
      if isConstant then
        error self.mReceiverName : "a constant property cannot be modified"
      end
    end
  else
    [!?ioVariableMap searchForReadWriteAccess
       !self.mReceiverName
       ?targetType
       ?targetVariableCppName
       ?nameForCheckingFormalParameterUsing
    ]  
  end
#---
  for (mValue) in self.mStructAttributeList do
    let propertyMap = [targetType mPropertyMap]
    [propertyMap searchKey !mValue ?let isPublic ?let isConstant ?targetType]
    if not isPublic then
      error mValue : " inaccessible property (due to its 'private' qualifier)"
    end
    if isConstant then
      error mValue : "a constant property cannot be modified"
    end
  end
#--- Check target type accepts incrementation
  if not [[targetType mHandledOperatorFlags] incDecOperator] then
    error self.mInstructionLocation
    :"the target object has the '@" + [targetType key] + "' type, but this type does not support the '++', '--' operators"
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@incDecInstructionForGeneration.new {
    !self.mInstructionLocation
    !targetVariableCppName
    !targetType
    !self.mStructAttributeList
    !self.mKind
  }
}

#·····················································································································*

override method @incDecNoOVFInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext unused inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
#--- Check target variable
  var @unifiedTypeMap-entry targetType
  var @string targetVariableCppName
  [!?ioVariableMap searchForReadWriteAccess !self.mReceiverName ?targetType ?targetVariableCppName ?*]
  for (mValue) in self.mStructAttributeList do
    let propertyMap = [targetType mPropertyMap]
    [propertyMap searchKey !mValue ?let isPublic ?let isConstant ?targetType]
    if not isPublic then
      error mValue : " inaccessible property (due to its 'private' qualifier)"
    end
    if isConstant then
      error mValue : "a constant property cannot be modified"
    end
  end
#--- Check target type accepts incrementation
  if not [[targetType mHandledOperatorFlags] incDecOperator] then
    error self.mInstructionLocation
    :"the target object has the '@" + [targetType key] + "' type, but this type does not support the '&++', '&--' operators"
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@incDecNoOVFInstructionForGeneration.new {
    !self.mInstructionLocation
    !targetVariableCppName
    !targetType
    !self.mStructAttributeList
    !self.mKind
  }
}

#·····················································································································*

override method @selfIncDecNoOVFInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager unused ioVariableMap
{
#--- Analyze "self", as receiver expression
  var @unifiedTypeMap-entry selfTypeEntry
  var @string selfObjectCppName
  if [inAnalysisContext.mSelfTypeEntry isNull] then
    error self.mInstructionLocation: "'self' can be used only in extension setters" : selfObjectCppName, selfTypeEntry
  else
    selfObjectCppName = inAnalysisContext.mSelfObjectCppName
    selfTypeEntry = inAnalysisContext.mSelfTypeEntry
  end
#--- Check target type accepts incrementation
  if not [[selfTypeEntry mHandledOperatorFlags] incDecOperator] then
    error self.mInstructionLocation
    :"the target object has the '@" + [selfTypeEntry key] + "' type, but this type does not support the '&++' and  '&--' operators"
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@incDecNoOVFInstructionForGeneration.new {
    !self.mInstructionLocation
    !selfObjectCppName
    !selfTypeEntry
    !{}
    !self.mKind
   }
}

#·····················································································································*

override method @selfIncDecInstructionAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager unused ioVariableMap
{
#--- Analyze "self", as receiver expression
  var @unifiedTypeMap-entry selfTypeEntry
  var @string selfObjectCppName
  if [inAnalysisContext.mSelfTypeEntry isNull] then
    error self.mInstructionLocation: "'self' can be used only in extension setters" : selfObjectCppName, selfTypeEntry
  else
    selfObjectCppName = inAnalysisContext.mSelfObjectCppName
    selfTypeEntry = inAnalysisContext.mSelfTypeEntry
  end
#--- Check target type accepts incrementation
  if not [[selfTypeEntry mHandledOperatorFlags] incDecOperator] then
    error self.mInstructionLocation
    :"the target object has the '@" + [selfTypeEntry key] + "' type, but this type does not support the '++' and  '--' operators"
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@incDecInstructionForGeneration.new {
    !self.mInstructionLocation
    !selfObjectCppName
    !selfTypeEntry
    !{}
    !self.mKind
   }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @incDecInstructionForGeneration : @semanticInstructionForGeneration {
  public var @location mInstructionLocation
  public var @string mReceiverCppName
  public var @unifiedTypeMap-entry mReceiverType
  public var @lstringlist mStructAttributeList
  public var @incDecKind mKind
}

#·····················································································································*

refclass @incDecNoOVFInstructionForGeneration : @semanticInstructionForGeneration {
  public var @location mInstructionLocation
  public var @string mReceiverCppName
  public var @unifiedTypeMap-entry mReceiverType
  public var @lstringlist mStructAttributeList
  public var @incDecKind mKind
}

#·····················································································································*

override method @incDecInstructionForGeneration generateInstruction
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
#--- Receiver
  [!?ioUnusedVariableCppNameSet removeKey !self.mReceiverCppName]
  var @string receiverCppName = self.mReceiverCppName
  for (mValue) in self.mStructAttributeList do
    receiverCppName += ".mProperty_" + [mValue.string identifierRepresentation]
  end
#--- Invoke incrementation
  switch self.mKind
  case increment :
    ioGeneratedCode += receiverCppName + ".increment_operation (" + compilerCppName ()
                    + " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  case decrement :
    ioGeneratedCode += receiverCppName + ".decrement_operation (" + compilerCppName ()
                    + " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  end
}

#·····················································································································*

override method @incDecNoOVFInstructionForGeneration generateInstruction
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
#--- Receiver
  [!?ioUnusedVariableCppNameSet removeKey !self.mReceiverCppName]
  var @string receiverCppName = self.mReceiverCppName
  for (mValue) in self.mStructAttributeList do
    receiverCppName += ".mProperty_" + [mValue.string identifierRepresentation]
  end
#--- Invoke incrementation
  switch self.mKind
  case increment :
    ioGeneratedCode += receiverCppName + ".increment_operation_no_overflow () ;\n"
  case decrement :
    ioGeneratedCode += receiverCppName + ".decrement_operation_no_overflow () ;\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
