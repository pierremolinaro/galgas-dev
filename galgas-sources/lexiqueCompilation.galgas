#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  'lexique' component metamodel            
#                                           
#  Copyright (C) 2007, ..., 2015 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cppTypeName -> @string {
  switch self
    case lexicalType_string : result = "C_String"
    case lexicalType_char   : result = "utf32"
    case lexicalType_uint   : result = "uint32_t"
    case lexicalType_uint64 : result = "uint64_t"
    case lexicalType_sint   : result = "int32_t"
    case lexicalType_sint64 : result = "int64_t"
    case lexicalType_double : result = "double"
    case lexicalType_bigint : result = "C_BigInt"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum appendMethodName -> @string {
  switch self
    case lexicalType_string : result = "appendCLiteralStringConstant"
    case lexicalType_char   : result = "appendUnicodeCharacter"
    case lexicalType_uint   : result = "appendUnsigned"
    case lexicalType_uint64 : result = "appendUnsigned"
    case lexicalType_sint   : result = "appendSigned"
    case lexicalType_sint64 : result = "appendSigned"
    case lexicalType_double : result = "appendDouble"
    case lexicalType_bigint : result = "appendCLiteralStringConstant"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum appendArgumentOfMethod -> @string {
  switch self
    case lexicalType_string : result = ""
    case lexicalType_char   : result = " COMMA_HERE"
    case lexicalType_uint   : result = ""
    case lexicalType_uint64 : result = ""
    case lexicalType_sint   : result = ""
    case lexicalType_sint64 : result = ""
    case lexicalType_double : result = ""
    case lexicalType_bigint : result = ".decimalString ()"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum initialization -> @string {
  switch self
    case lexicalType_string : result = ".setLengthToZero ()"
    case lexicalType_char   : result = " = TO_UNICODE (0)"
    case lexicalType_uint   : result = " = 0"
    case lexicalType_uint64 : result = " = 0"
    case lexicalType_sint   : result = " = 0"
    case lexicalType_sint64 : result = " = 0"
    case lexicalType_double : result = " = 0.0"
    case lexicalType_bigint : result = ".setToZero ()"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaTypeName -> @string {
  switch self
    case lexicalType_string : result = "NSMutableString *"
    case lexicalType_char   : result = "UInt32"
    case lexicalType_uint   : result = "UInt32"
    case lexicalType_uint64 : result = "UInt64"
    case lexicalType_sint   : result = "SInt32"
    case lexicalType_sint64 : result = "SInt64"
    case lexicalType_double : result = "double"
    case lexicalType_bigint : result = "NSMutableString *"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum needsReferenceInInputOutputInCocoa -> @bool {
  switch self
    case lexicalType_string : result = false
    case lexicalType_char   : result = true
    case lexicalType_uint   : result = true
    case lexicalType_uint64 : result = true
    case lexicalType_sint   : result = true
    case lexicalType_sint64 : result = true
    case lexicalType_double : result = true
    case lexicalType_bigint : result = false
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaInitializationCode -> @string {
  switch self
    case lexicalType_string : result = "[[NSMutableString alloc] init]"
    case lexicalType_char   : result = "0"
    case lexicalType_uint   : result = "0"
    case lexicalType_uint64 : result = "0"
    case lexicalType_sint   : result = "0"
    case lexicalType_sint64 : result = "0"
    case lexicalType_double : result = "0.0"
    case lexicalType_bigint : result = "[[NSMutableString alloc] init]"
  end
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaResetPrefix -> @string {
  switch self
    case lexicalType_string : result = "["
    case lexicalType_char   : result = ""
    case lexicalType_uint   : result = ""
    case lexicalType_uint64 : result = ""
    case lexicalType_sint   : result = ""
    case lexicalType_sint64 : result = ""
    case lexicalType_double : result = ""
    case lexicalType_bigint : result = "["
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaReset -> @string {
  switch self
    case lexicalType_string : result = " setString:@\"\"]"
    case lexicalType_char   : result = " = 0"
    case lexicalType_uint   : result = " = 0"
    case lexicalType_uint64 : result = " = 0"
    case lexicalType_sint   : result = " = 0"
    case lexicalType_sint64 : result = " = 0"
    case lexicalType_double : result = " = 0.0"
    case lexicalType_bigint : result = " setString:@\"\"]"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                     checkLexicalDefaultAction  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalSendDefaultActionAST checkLexicalDefaultAction
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalSendTerminalByDefaultAST checkLexicalDefaultAction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [ioLexiqueAnalysisContext.mTerminalMap searchKey !self.mDefaultSentTerminal ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalErrorByDefaultAST checkLexicalDefaultAction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
{
  [!?ioLexiqueAnalysisContext.mLexicalMessageMap setMMessageIsUsedForKey !true !self.mDefaultErrorMessageName.string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalExpression   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalExpressionAST checkLexicalExpression
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalOrExpressionAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [self.mLeftOperand checkLexicalExpression !? ioLexiqueAnalysisContext]
  [self.mRightOperand checkLexicalExpression !? ioLexiqueAnalysisContext]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterSetMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
{
  if not [ioLexiqueAnalysisContext.mExternUnicodeTestFunctions hasKey !self.mCharacterSetName.string] then
    error self.mCharacterSetName : "undefined test function" fixit { replace ioLexiqueAnalysisContext.mExternUnicodeTestFunctions }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterIntervalMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalStringMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  ioLexiqueAnalysisContext.mUnicodeStringToGenerate += !self.mString.string
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalStringNotMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  ioLexiqueAnalysisContext.mUnicodeStringToGenerate += !self.mString.string
  [!?ioLexiqueAnalysisContext.mLexicalMessageMap setMMessageIsUsedForKey !true !self.mErrorMessage.string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalFunctionCallArgument
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum unused inLexicalRoutineFormalArgumentType

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalAttributeInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalAttributeMap searchKey
    !self.mAttributeName
    ?let attributeLexicalType
  ]
#--- Type check
  if attributeLexicalType != inLexicalRoutineFormalArgumentType then
    error self.mAttributeName:"type error, attribute type is @"
    + [attributeLexicalType lexicalTypeBaseName]
    + " type, but lexical routine prototype requires @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mCharacter:"type error, a literal character has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalUnsignedInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum.lexicalType_uint != inLexicalRoutineFormalArgumentType then
    error self.mUnsigned:"type error, a literal character has @uint"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCurrentCharacterInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum.lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mLocation:"type error, current character value has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalFunctionInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalFunctionMap searchKey
    !self.mFunctionName
    ?let lexicalFormalTypeList
    ?let returnedLexicalFormalType
    ?let replacementFunctionName
    ?*
  ]
#--- Obsolete function ?
  if replacementFunctionName != "" then
    warning self.mFunctionName:"obsolete lexical function, replaced by '" + replacementFunctionName + "'"
  end
#--- Returned type check
  if returnedLexicalFormalType != inLexicalRoutineFormalArgumentType then
    error self.mFunctionName:"type error, the function returns an @"
    + [returnedLexicalFormalType lexicalTypeBaseName]
    + " value, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " value"
  end
#--- Check actual argument count
  if [lexicalFormalTypeList length] != [self.mFunctionActualArgumentList length] then
    error self.mFunctionName: "this lexical function names "
    + [[self.mFunctionActualArgumentList length] string]
    + " actual argument(s), but the prototype requires "
    + [[lexicalFormalTypeList length] string] + " actual argument(s)"
  end
#--- Check actual argument against formal parameters
  for (mLexicalType *) in lexicalFormalTypeList, (mLexicalActualInputArgument) in self.mFunctionActualArgumentList do
    [mLexicalActualInputArgument checkLexicalFunctionCallArgument
      !?ioLexiqueAnalysisContext
      !mLexicalType
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalRoutineCallArgument 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum unused inLexicalRoutineFormalArgumentType

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalAttributeInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalAttributeMap searchKey
    !self.mAttributeName
    ?let attributeLexicalType
  ]
#--- Type check
  if attributeLexicalType != inLexicalRoutineFormalArgumentType then
    error self.mAttributeName:"type error, attribute type is @"
    + [attributeLexicalType lexicalTypeBaseName]
    + " type, but lexical routine prototype requires @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mCharacter:"type error, a literal character has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalUnsignedInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_uint != inLexicalRoutineFormalArgumentType then
    error self.mUnsigned:"type error, a literal unsigned value has @uint"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCurrentCharacterInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mLocation:"type error, current character value has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalFunctionInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalFunctionMap searchKey
    !self.mFunctionName
    ?let lexicalFormalTypeList
    ?let returnedLexicalFormalType
    ?let replacementFunctionName
    ?*
  ]
#--- Obsolete function ?
  if replacementFunctionName != "" then
    warning self.mFunctionName:"obsolete lexical function, replaced by '" + replacementFunctionName + "'"
  end
#--- Returned type check
  if returnedLexicalFormalType != inLexicalRoutineFormalArgumentType then
    error self.mFunctionName:"type error, the function returns an @"
    + [returnedLexicalFormalType lexicalTypeBaseName]
    + " value, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " value"
  end
#--- Check actual argument count
  if [lexicalFormalTypeList length] != [self.mFunctionActualArgumentList length] then
    error self.mFunctionName: "this lexical function names "
    + [[self.mFunctionActualArgumentList length] string]
    + " actual argument(s), but the prototype requires "
    + [[lexicalFormalTypeList length] string] + " actual argument(s)"
  end
#--- Check actual argument against formal parameters
  for (mLexicalType *) in lexicalFormalTypeList, (mLexicalActualInputArgument) in self.mFunctionActualArgumentList do
    [mLexicalActualInputArgument checkLexicalFunctionCallArgument
      !?ioLexiqueAnalysisContext
      !mLexicalType
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalRoutineCallArgument 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractLexicalRoutineActualArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalArgumentModeAST unused inLexicalRoutineFormalArgumentMode
  ?@lexicalTypeEnum unused inLexicalRoutineFormalArgumentType

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalAttributeInputOutputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalArgumentModeAST inLexicalRoutineFormalArgumentMode
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalAttributeMap searchKey
    !self.mAttributeName
    ?let attributeLexicalType
  ]
#--- Type check
  if attributeLexicalType != inLexicalRoutineFormalArgumentType then
    error self.mAttributeName:"type error, attribute type is @"
    + [attributeLexicalType lexicalTypeBaseName]
    + " type, but lexical routine prototype requires @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type"
  end
#--- Passing mode check
  if inLexicalRoutineFormalArgumentMode != @lexicalArgumentModeAST. lexicalInputOutputMode then
    error self.mActualPassingModeLocation:"the output mode (!) is required here, not an output/input mode"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalFormalInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalArgumentModeAST inLexicalRoutineFormalArgumentMode
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [self.mRoutineOrFunctionFormalInputArgument checkLexicalRoutineCallArgument
    !?ioLexiqueAnalysisContext
    !inLexicalRoutineFormalArgumentType
  ]
#--- Passing mode check
  if inLexicalRoutineFormalArgumentMode != @lexicalArgumentModeAST.lexicalInputMode then
    error self.mActualPassingModeLocation:"the output/input mode (!?) is required here, not an input mode"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalInstruction  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalStructuredSendInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap {
  for (mAttributeName mSearchListName) in self.mLexicalSendSearchList do
    [!?ioLexiqueAnalysisContext.mLexicalTokenListMap setMShouldBeGeneratedForKey !true !mSearchListName.string]
    [ioLexiqueAnalysisContext.mLexicalAttributeMap searchKey !mAttributeName ?*]
  end
  [self.mLexicalSendDefaultAction checkLexicalDefaultAction !?ioLexiqueAnalysisContext]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalSimpleSendInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap {
  [ioLexiqueAnalysisContext.mTerminalMap searchKey !self.mSentTerminal ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalRepeatInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap ioTagMap {
  for (mWhileExpression mWhileInstructionList) in self.mLexicalWhileBranchList do
    [mWhileExpression checkLexicalExpression !?ioLexiqueAnalysisContext]
    var tagMap = @lexicalTagMap.mapWithMapToOverride{!ioTagMap}
    for (mInstruction) in mWhileInstructionList do
      [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
    end
  end
  var tagMap = @lexicalTagMap.mapWithMapToOverride{!ioTagMap}
  for (mInstruction) in self.mRepeatedInstructionList do
    [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalSelectInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap  ioTagMap {
  for (mSelectExpression mSelectInstructionList) in self.mLexicalSelectBranchList do
    [mSelectExpression checkLexicalExpression !?ioLexiqueAnalysisContext]
    var tagMap = @lexicalTagMap.mapWithMapToOverride{!ioTagMap}
    for (mInstruction) in mSelectInstructionList do
      [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
    end
  end
  var tagMap = @lexicalTagMap.mapWithMapToOverride{!ioTagMap}
  for (mInstruction) in self.mDefaultInstructionList do
    [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalRoutineInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap {
  [ioLexiqueAnalysisContext.mLexicalRoutineMessageMap searchKey
    !self.mRoutineName
    ?let lexicalRoutineFormalArgumentList
    ?let routineErrorMessageList
    ?*
  ]
#--- Check actual argument count
  if [lexicalRoutineFormalArgumentList length] != [self.mActualArgumentList length] then
    error self.mRoutineName : "this lexical routine call names "
    + [[self.mActualArgumentList length] string]
    + " actual argument(s), but the lexical routine prototype requires "
    + [lexicalRoutineFormalArgumentList length] + " actual argument(s)"
  end
#--- Check actual argument against formal parameters
  for (mLexicalFormalArgumentMode mLexicalFormalArgumentType *) in lexicalRoutineFormalArgumentList, (mLexicalRoutineActualArgument) in self.mActualArgumentList do
    [mLexicalRoutineActualArgument checkLexicalRoutineCallArgument
      !?ioLexiqueAnalysisContext
      !mLexicalFormalArgumentMode
      !mLexicalFormalArgumentType
    ]
  end
#--- Check error message count
  if [routineErrorMessageList length] != [self.mErrorMessageList length] then
    error self.mRoutineName: "this lexical routine call names "
    + [[self.mErrorMessageList length] string]
    + " error message(s), but the lexical routine prototype requires "
    + [[routineErrorMessageList length] string] + " error message(s)"
  end
#--- Check error messages are actually defined
  for (mValue) in self.mErrorMessageList do
    with mValue in !?ioLexiqueAnalysisContext.mLexicalMessageMap error message searchKey  do
      mMessageIsUsed = true
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalLogInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalRewindInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap ioTagMap {
  [ioTagMap searchKey !self.mLexicalTagName]
  [ioLexiqueAnalysisContext.mTerminalMap searchKey !self.mTerminalName ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalDropInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext  ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap {
  [ioLexiqueAnalysisContext.mTerminalMap searchKey !self.mTerminalName ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalTagInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?!@lexicalTagMap ioTagMap {
  [!?ioTagMap insertKey !self.mLexicalTagName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalErrorInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap
{
  [!?ioLexiqueAnalysisContext.mLexicalMessageMap setMMessageIsUsedForKey !true !self.mErrorMessageName.string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalWarningInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap {
  [!?ioLexiqueAnalysisContext.mLexicalMessageMap setMMessageIsUsedForKey !true !self.mWarningMessageName.string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                         compileLexiqueComponent
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractLexicalRuleAST checkLexicalRule
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalImplicitRuleAST checkLexicalRule
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [ioLexiqueAnalysisContext.mLexicalTokenListMap searchKey !self.mListName ?* ?* ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalExplicitRuleAST checkLexicalRule
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [self.mLexicalRuleExpression checkLexicalExpression !?ioLexiqueAnalysisContext]
  var @lexicalTagMap tagMap = {}
  for (mInstruction) in self.mInstructionList do
    [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#         G E N E R A T I O N    T E M P L A T E S      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper lexiqueGenerationTemplates in "+generation-templates/lexique_generation" {
}{
}{
  template newHeaderZone2 "lexique_header_template_zone_2.new.h.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@lexiqueAnalysisContext LEXIQUE_ANALYSIS_CONTEXT
    ?@metamodelTemplateDelimitorListAST TEMPLATE_DELIMITOR_LIST

  template newHeaderZone3 "lexique_header_template_zone_3.new.h.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@lexicalListDeclarationListAST DELIMITOR_LIST_LIST
    ?@lexiqueAnalysisContext LEXIQUE_ANALYSIS_CONTEXT
    ?@indexingListAST INDEXING_LIST
    ?@lexicalFunctionListAST UNICODE_TEST_FUNCTIONS

  template newImplementationZone2Galgas3 "lexique_implementation-galgas3.cpp.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@lexicalAttributeMap LEXICAL_ATTRIBUTE_MAP
    ?@lexicalMessageMap LEXICAL_MESSAGE_MAP
    ?@terminalList TERMINAL_LIST
    ?@lexicalExplicitTokenListMapMap LEXICAL_TOKEN_LIST_MAP
    ?@stringset STRINGS_IN_EXPLICIT_RULES
    ?@lexicalRuleListAST LEXICAL_RULE_LIST
    ?@lexiqueAnalysisContext LEXIQUE_ANALYSIS_CONTEXT
    ?@string INDEXING_DIRECTORY
    ?@metamodelTemplateDelimitorListAST TEMPLATE_DELIMITOR_LIST
    ?@string LEXIQUE_COMPONENT_NAME
    ?@templateReplacementListAST TEMPLATE_REPLACEMENT_LIST
    ?@lexicalStyleListAST LEXICAL_STYLE_LIST
    ?@lexicalFunctionListAST UNICODE_TEST_FUNCTIONS

  template cocoaHeaderZone2 "lexique_cocoa_header_template_zone_2.h.galgasTemplate"
    ?@string LEXIQUE_CLASS_NAME
    ?@lexiqueAnalysisContext LEXIQUE_ANALYSIS_CONTEXT
    ?@lexicalFunctionListAST UNICODE_TEST_FUNCTIONS

  template cocoaHeaderZone3 "lexique_cocoa_header_template_zone_3.h.galgasTemplate"
    ?@string unused LEXIQUE_CLASS_NAME
    ?@lexiqueAnalysisContext unused LEXIQUE_ANALYSIS_CONTEXT

  template cocoaImplementationZone2 "lexique_cocoa_implementation.m.galgasTemplate"
    ?@string LEXIQUE_HEADER_FILE_NAME
    ?@string LEXIQUE_CLASS_NAME
    ?@lexicalAttributeMap LEXICAL_ATTRIBUTE_MAP
    ?@lexicalMessageMap LEXICAL_MESSAGE_MAP
    ?@terminalList TERMINAL_LIST
    ?@stringset STRINGS_IN_EXPLICIT_RULES
    ?@lexicalRuleListAST LEXICAL_RULE_LIST
    ?@lexiqueAnalysisContext LEXIQUE_ANALYSIS_CONTEXT
    ?@templateReplacementListAST TEMPLATE_REPLACEMENT_LIST
    ?@string INDEXING_DIRECTORY
    ?@indexingListAST INDEXING_LIST
    ?@lexicalStyleListAST LEXICAL_STYLE_LIST
    ?@metamodelTemplateDelimitorListAST TEMPLATE_DELIMITOR_LIST
    ?@lexicalFunctionListAST UNICODE_TEST_FUNCTIONS
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

