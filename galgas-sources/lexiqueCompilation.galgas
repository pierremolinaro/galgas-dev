#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  'lexique' component metamodel            
#                                           
#  Copyright (C) 2007, ..., 2015 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cppTypeName -> @string {
  switch self
    case lexicalType_string : result = "C_String"
    case lexicalType_char   : result = "utf32"
    case lexicalType_uint   : result = "uint32_t"
    case lexicalType_uint64 : result = "uint64_t"
    case lexicalType_sint   : result = "int32_t"
    case lexicalType_sint64 : result = "int64_t"
    case lexicalType_double : result = "double"
    case lexicalType_bigint : result = "C_BigInt"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum appendMethodName -> @string {
  switch self
    case lexicalType_string : result = "appendCLiteralStringConstant"
    case lexicalType_char   : result = "appendUnicodeCharacter"
    case lexicalType_uint   : result = "appendUnsigned"
    case lexicalType_uint64 : result = "appendUnsigned"
    case lexicalType_sint   : result = "appendSigned"
    case lexicalType_sint64 : result = "appendSigned"
    case lexicalType_double : result = "appendDouble"
    case lexicalType_bigint : result = "appendCLiteralStringConstant"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum appendArgumentOfMethod -> @string {
  switch self
    case lexicalType_string : result = ""
    case lexicalType_char   : result = " COMMA_HERE"
    case lexicalType_uint   : result = ""
    case lexicalType_uint64 : result = ""
    case lexicalType_sint   : result = ""
    case lexicalType_sint64 : result = ""
    case lexicalType_double : result = ""
    case lexicalType_bigint : result = ".decimalString ()"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum initialization -> @string {
  switch self
    case lexicalType_string : result = ".setLengthToZero ()"
    case lexicalType_char   : result = " = TO_UNICODE (0)"
    case lexicalType_uint   : result = " = 0"
    case lexicalType_uint64 : result = " = 0"
    case lexicalType_sint   : result = " = 0"
    case lexicalType_sint64 : result = " = 0"
    case lexicalType_double : result = " = 0.0"
    case lexicalType_bigint : result = " = C_BigInt ()"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaTypeName -> @string {
  switch self
    case lexicalType_string : result = "NSMutableString *"
    case lexicalType_char   : result = "UInt32"
    case lexicalType_uint   : result = "UInt32"
    case lexicalType_uint64 : result = "UInt64"
    case lexicalType_sint   : result = "SInt32"
    case lexicalType_sint64 : result = "SInt64"
    case lexicalType_double : result = "double"
    case lexicalType_bigint : result = "NSMutableString *"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum swiftTypeName -> @string {
  switch self
    case lexicalType_string : result = "String"
    case lexicalType_char   : result = "UInt32"
    case lexicalType_uint   : result = "UInt32"
    case lexicalType_uint64 : result = "UInt64"
    case lexicalType_sint   : result = "Int32"
    case lexicalType_sint64 : result = "Int64"
    case lexicalType_double : result = "Double"
    case lexicalType_bigint : result = "String"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum needsReferenceInInputOutputInCocoa -> @bool {
  switch self
    case lexicalType_string : result = false
    case lexicalType_char   : result = true
    case lexicalType_uint   : result = true
    case lexicalType_uint64 : result = true
    case lexicalType_sint   : result = true
    case lexicalType_sint64 : result = true
    case lexicalType_double : result = true
    case lexicalType_bigint : result = false
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaInitializationCode -> @string {
  switch self
    case lexicalType_string : result = "[[NSMutableString alloc] init]"
    case lexicalType_char   : result = "0"
    case lexicalType_uint   : result = "0"
    case lexicalType_uint64 : result = "0"
    case lexicalType_sint   : result = "0"
    case lexicalType_sint64 : result = "0"
    case lexicalType_double : result = "0.0"
    case lexicalType_bigint : result = "[[NSMutableString alloc] init]"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum swiftInitializationCode -> @string {
  switch self
    case lexicalType_string : result = "\"\""
    case lexicalType_char   : result = "0"
    case lexicalType_uint   : result = "0"
    case lexicalType_uint64 : result = "0"
    case lexicalType_sint   : result = "0"
    case lexicalType_sint64 : result = "0"
    case lexicalType_double : result = "0.0"
    case lexicalType_bigint : result = "\"\""
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaResetPrefix -> @string {
  switch self
    case lexicalType_string : result = "["
    case lexicalType_char   : result = ""
    case lexicalType_uint   : result = ""
    case lexicalType_uint64 : result = ""
    case lexicalType_sint   : result = ""
    case lexicalType_sint64 : result = ""
    case lexicalType_double : result = ""
    case lexicalType_bigint : result = "["
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum cocoaReset -> @string {
  switch self
    case lexicalType_string : result = " setString:@\"\"]"
    case lexicalType_char   : result = " = 0"
    case lexicalType_uint   : result = " = 0"
    case lexicalType_uint64 : result = " = 0"
    case lexicalType_sint   : result = " = 0"
    case lexicalType_sint64 : result = " = 0"
    case lexicalType_double : result = " = 0.0"
    case lexicalType_bigint : result = " setString:@\"\"]"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                     checkLexicalDefaultAction  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalSendDefaultActionAST checkLexicalDefaultAction
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalSendTerminalByDefaultAST checkLexicalDefaultAction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [ioLexiqueAnalysisContext.mTerminalMap searchKey !self.mDefaultSentTerminal ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalErrorByDefaultAST checkLexicalDefaultAction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
{
  [!?ioLexiqueAnalysisContext.mLexicalMessageMap setMMessageIsUsedForKey !true !self.mDefaultErrorMessageName.string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalExpression   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalExpressionAST checkLexicalExpression
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalOrExpressionAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [self.mLeftOperand checkLexicalExpression !? ioLexiqueAnalysisContext]
  [self.mRightOperand checkLexicalExpression !? ioLexiqueAnalysisContext]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterSetMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
{
  if not [ioLexiqueAnalysisContext.mUnicodeTestFunctions hasKey !self.mCharacterSetName.string] then
    error self.mCharacterSetName : "undefined test function" fixit { %replaceBy ioLexiqueAnalysisContext.mUnicodeTestFunctions }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterIntervalMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalStringMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  ioLexiqueAnalysisContext.mUnicodeStringToGenerate += !self.mString.string
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalStringNotMatchAST checkLexicalExpression
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  ioLexiqueAnalysisContext.mUnicodeStringToGenerate += !self.mString.string
  [!?ioLexiqueAnalysisContext.mLexicalMessageMap setMMessageIsUsedForKey !true !self.mErrorMessage.string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalFunctionCallArgument
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum unused inLexicalRoutineFormalArgumentType

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalAttributeInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalAttributeMap searchKey
    !self.mAttributeName
    ?let attributeLexicalType
  ]
#--- Type check
  if attributeLexicalType != inLexicalRoutineFormalArgumentType then
    error self.mAttributeName:"type error, attribute type is @"
    + [attributeLexicalType lexicalTypeBaseName]
    + " type, but lexical routine prototype requires @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mCharacter:"type error, a literal character has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalUnsignedInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum.lexicalType_uint != inLexicalRoutineFormalArgumentType then
    error self.mUnsigned:"type error, a literal character has @uint"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCurrentCharacterInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum.lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mLocation:"type error, current character value has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalFunctionInputArgumentAST checkLexicalFunctionCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalFunctionMap searchKey
    !self.mFunctionName
    ?let lexicalFormalTypeList
    ?let returnedLexicalFormalType
    ?let replacementFunctionName
    ?*
  ]
#--- Obsolete function ?
  if replacementFunctionName != "" then
    warning self.mFunctionName:"obsolete lexical function, replaced by '" + replacementFunctionName + "'"
  end
#--- Returned type check
  if returnedLexicalFormalType != inLexicalRoutineFormalArgumentType then
    error self.mFunctionName:"type error, the function returns an @"
    + [returnedLexicalFormalType lexicalTypeBaseName]
    + " value, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " value"
  end
#--- Check actual argument count
  if [lexicalFormalTypeList count] != [self.mFunctionActualArgumentList count] then
    error self.mFunctionName: "this lexical function names "
    + [[self.mFunctionActualArgumentList count] string]
    + " actual argument(s), but the prototype requires "
    + [[lexicalFormalTypeList count] string] + " actual argument(s)"
  end
#--- Check actual argument against formal parameters
  for (mLexicalType *) in lexicalFormalTypeList, (mLexicalActualInputArgument) in self.mFunctionActualArgumentList do
    [mLexicalActualInputArgument checkLexicalFunctionCallArgument
      !?ioLexiqueAnalysisContext
      !mLexicalType
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalRoutineCallArgument 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalRoutineOrFunctionFormalInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum unused inLexicalRoutineFormalArgumentType

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalAttributeInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalAttributeMap searchKey
    !self.mAttributeName
    ?let attributeLexicalType
  ]
#--- Type check
  if attributeLexicalType != inLexicalRoutineFormalArgumentType then
    error self.mAttributeName:"type error, attribute type is @"
    + [attributeLexicalType lexicalTypeBaseName]
    + " type, but lexical routine prototype requires @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCharacterInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mCharacter:"type error, a literal character has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalUnsignedInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_uint != inLexicalRoutineFormalArgumentType then
    error self.mUnsigned:"type error, a literal unsigned value has @uint"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalCurrentCharacterInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Type check
  if @lexicalTypeEnum. lexicalType_char != inLexicalRoutineFormalArgumentType then
    error self.mLocation:"type error, current character value has @char"
    + " type, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " type value"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalFunctionInputArgumentAST checkLexicalRoutineCallArgument
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?@lexicalTypeEnum inLexicalRoutineFormalArgumentType {
#--- Check attribute definition
  [ioLexiqueAnalysisContext.mLexicalFunctionMap searchKey
    !self.mFunctionName
    ?let lexicalFormalTypeList
    ?let returnedLexicalFormalType
    ?let replacementFunctionName
    ?*
  ]
#--- Obsolete function ?
  if replacementFunctionName != "" then
    warning self.mFunctionName:"obsolete lexical function, replaced by '" + replacementFunctionName + "'"
  end
#--- Returned type check
  if returnedLexicalFormalType != inLexicalRoutineFormalArgumentType then
    error self.mFunctionName:"type error, the function returns an @"
    + [returnedLexicalFormalType lexicalTypeBaseName]
    + " value, but lexical routine prototype requires an @"
    + [inLexicalRoutineFormalArgumentType lexicalTypeBaseName]
    + " value"
  end
#--- Check actual argument count
  if [lexicalFormalTypeList count] != [self.mFunctionActualArgumentList count] then
    error self.mFunctionName: "this lexical function names "
    + [[self.mFunctionActualArgumentList count] string]
    + " actual argument(s), but the prototype requires "
    + [[lexicalFormalTypeList count] string] + " actual argument(s)"
  end
#--- Check actual argument against formal parameters
  for (mLexicalType *) in lexicalFormalTypeList, (mLexicalActualInputArgument) in self.mFunctionActualArgumentList do
    [mLexicalActualInputArgument checkLexicalFunctionCallArgument
      !?ioLexiqueAnalysisContext
      !mLexicalType
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                       checkLexicalInstruction  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @lexicalInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                         compileLexiqueComponent
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractLexicalRuleAST checkLexicalRule
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalImplicitRuleAST checkLexicalRule
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [ioLexiqueAnalysisContext.mLexicalTokenListMap searchKey !self.mListName ?* ?* ?*]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalExplicitRuleAST checkLexicalRule
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext {
  [self.mLexicalRuleExpression checkLexicalExpression !?ioLexiqueAnalysisContext]
  var @lexicalTagMap tagMap = {}
  for (mInstruction) in self.mInstructionList do
    [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

