#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingAbstractExtensionSetterAST : @semanticDeclarationAST {
  private let @lstring mTypeName
  private let @lstring mOverridingExtensionSetterName
  private let @formalParameterListAST mOverridingExtensionSetterFormalParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·················································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $setter$
    $@type$ ?let @lstring className indexing typeReferenceOverrideAbstractExtensionSetter
    $identifier$ ?let @lstring setterName indexing overrideabstractExtensionSetterDefinition
    <formal_parameter_list_ggs3> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionSetterAST.new {
      !isPredefined: false # Is not predefined
      !className
      !setterName
      !formalParameterList}
  }

  #·················································································································

  rule <method_declaration_ggs3> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $setter$
    $identifier$ ?let @lstring setterName indexing overrideabstractExtensionSetterDefinition
    <formal_parameter_list_ggs3> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionSetterAST.new {
      !isPredefined: false # Is not predefined
      !inClassName
      !setterName
      !formalParameterList}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingAbstractExtensionSetterAST keyRepresentation -> @string {
  result = "overriding extension setter @" + self.mTypeName + " " + self.mOverridingExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionSetterAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionSetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
#  let nameForUsefulness = setterNameForUsefulEntitiesGraph (!self.mTypeName !mOverridingExtensionSetterName)
#  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
#--- Check type is an abstract class
  if not [[selfType definition].mTypeKindEnum isClassType] then
    error self.mOverridingExtensionSetterName: "cannot declare a extension setter: '@" + [selfType definition].mTypeName.string + "' is not a class"
  elsif [selfType definition].mIsConcrete then
    error self.mOverridingExtensionSetterName: "cannot declare an abstract extension setter: '@" + [selfType definition].mTypeName.string + "' is not an abstract class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMapEntry superType = [selfType definition].mSuperType
  var inheritedSignature = @formalParameterSignature {}
  let inheritedDeclarationLocation = @location.here
  loop ([ioTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType definition].mSetterMap hasKey !self.mOverridingExtensionSetterName.string] then
      [[superType definition].mSetterMap searchKey !self.mOverridingExtensionSetterName ?* ?inheritedSignature ?* ?let qualifier ?*]
      if qualifier <= @methodQualifier.isBasicFinal then
        baseTypeName = [superType definition].mTypeName.string
      end
    end
    superType = [superType definition].mSuperType
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionSetterName:"this setter is not declared by a super class"
  end
#--- Analyze formal argument list
  var variableMap = @localVarManager.new
  buildLocalVariableMapAndSignature (
    !inSemanticContext
    !?ioTypeMap
    !self.mOverridingExtensionSetterFormalParameterList
    !?variableMap
    ?let formalParameterListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      !self.mOverridingExtensionSetterName.location
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  ioOverridingAbstractExtensionSetterListMap +=
    !self.mTypeName.string
    !self.mOverridingExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
