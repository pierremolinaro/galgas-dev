#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $setter$
    $@type$ ?var typeName indexing typeReferenceOverrideAbstractExtensionSetter
    repeat
    while
      $.$
      $@type$ ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
    end
    $identifier$ ?let @lstring setterName indexing overrideabstractExtensionSetterDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionSetterAST {
      !isPredefined: false # Is not predefined
      !typeName
      !setterName
      !formalParameterList
    }
  }

  #·······························································································

  rule <method_declaration_ggs3> ?let @lstring inTypeName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $setter$
    var typeName = inTypeName
    repeat
    while
      $@type$ ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
      $.$
    end
    $identifier$ ?let @lstring setterName indexing overrideabstractExtensionSetterDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionSetterAST {
      !isPredefined: false
      !typeName
      !setterName
      !formalParameterList}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

#syntax extension galgas4DeclarationsSyntax {
#
#  #·······························································································
#
#  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
#    $override$
#    $abstract$
#    $mutating$
#    $proc$
#    $@type$ ?let @lstring className indexing typeReferenceOverrideAbstractExtensionSetter
#    $.$
#    $identifier$ ?let @lstring setterName indexing overrideabstractExtensionSetterDefinition
#    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
#    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionSetterAST {
#      !isPredefined: false # Is not predefined
#      !className
#      !setterName
#      !formalParameterList
#    }
#  }
#
#  #·······························································································
#
#  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
#    $override$
#    $abstract$
#    $mutating$
#    $proc$
#    $identifier$ ?let @lstring setterName indexing overrideabstractExtensionSetterDefinition
#    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
#    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionSetterAST {
#      !isPredefined: false # Is not predefined
#      !inClassName
#      !setterName
#      !formalParameterList
#    }
#  }
#
#  #·······························································································
#
#}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingAbstractExtensionSetterAST : @semanticDeclarationAST {
  private let @lstring mTypeName
  private let @lstring mOverridingExtensionSetterName
  private let @formalParameterListAST mOverridingExtensionSetterFormalParameterList

  #·······························································································

  override getter keyRepresentation -> @string {
    result = "overriding extension setter @" + self.mTypeName + " " + self.mOverridingExtensionSetterName
  }

  #·······························································································

  override method enterDeclarationInGraph
    ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
    ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
    ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
    ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
    ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
  {
    ioExtensionOverrideDefinitionList += !self
  }

  #·······························································································

  override method enterDeclarationInSemanticContext
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
    ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
    ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
    ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
    ?!@unifiedTypeMap unused ioTypeMap
    ?!@semanticContext unused ioSemanticContext
  {
  }

  #·······························································································

  override method semanticAnalysis
    ?!@lstringlist unused ioUsefulnessRootEntities
    ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
    ?let @string unused inProductDirectory
    ?let @semanticContext inSemanticContext
                                  ?!@unifiedTypeMap ioTypeMap
    ?let @predefinedTypes unused inPredefinedTypes
    ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
  {
  #--- Useful entities graph
  #  let nameForUsefulness = setterNameForUsefulEntitiesGraph (!self.mTypeName !mOverridingExtensionSetterName)
  #  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  #--- Self type
    let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
  #--- Check type is an abstract class
    if not [[selfType definition].typeKind isClassType] then
      error self.mOverridingExtensionSetterName: "cannot declare a extension setter: '@" + [selfType definition].typeName.string + "' is not a class"
    elsif [selfType definition].isConcrete then
      error self.mOverridingExtensionSetterName: "cannot declare an abstract extension setter: '@" + [selfType definition].typeName.string + "' is not an abstract class"
    end
  #--- Find base type name
    var @string baseTypeName = ""
    var @unifiedTypeMapEntry superType = [selfType definition].superType
    var inheritedSignature = @formalParameterSignature ()
    let inheritedDeclarationLocation = @location.here
    loop ([ioTypeMap count] + 1)
    while (not [superType isNull]) & (baseTypeName == "") do
      if [[superType definition].setterMap hasKey !self.mOverridingExtensionSetterName.string] then
        [[superType definition].setterMap searchKey !self.mOverridingExtensionSetterName ?* ?inheritedSignature ?* ?let qualifier ?*]
        if qualifier <= @methodQualifier.isBasicFinal then
          baseTypeName = [superType definition].typeName.string
        end
      end
      superType = [superType definition].superType
    end
    if baseTypeName == "" then
      error self.mOverridingExtensionSetterName:"this setter is not declared by a super class"
    end
  #--- Analyze formal argument list
    var variableMap = @localVarManager {}
    buildLocalVariableMapAndSignature (
      !inSemanticContext
      !?ioTypeMap
      !self.mOverridingExtensionSetterFormalParameterList
      !?variableMap
      ?let formalParameterListForGeneration
    )
  #--- Check Signature
    if baseTypeName != "" then
      checkMethodSignatures (
        !formalParameterListForGeneration
        !self.mOverridingExtensionSetterName.location
        !inheritedSignature
        !inheritedDeclarationLocation
      )
    end
  }

  #·······························································································

  override method buildExtensionListMaps
    ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
    ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
    ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
    ?!@genericExtensionMethodListMap ioOverridingAbstractExtensionSetterListMap
    ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
    ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
    ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
    ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
    ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
    ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
    ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
    ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
#    ioOverridingAbstractExtensionSetterListMap +=
#      !self.mTypeName.string
#      !self.mOverridingExtensionSetterName
    [!? ioOverridingAbstractExtensionSetterListMap insertKey
      !self.mTypeName.string
      !self.mOverridingExtensionSetterName
    ]
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
