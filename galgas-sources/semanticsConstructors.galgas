//————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Class function
#
#  Copyright (C) 2009, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————

proc enterClassFunctionWithoutArgument
  ?!@classFunctionMap ioClassFunctionMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?name:let @string inClassFunctionName
  ?resultTypeName:let @string inReturnedTypeName
  ?hasLexiqueArg:let @bool inHasLexiqueArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString
    !inReturnedTypeName
    ?let @unifiedTypeMapEntry returnedTypeIndex
  ]
  [!?ioClassFunctionMap insertOrReplace
    !@lstring {!inClassFunctionName !@location.here}
    !@functionSignature ()
    !inHasLexiqueArgument
    !returnedTypeIndex
  ]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

proc enterClassFunctionWithArgument
  ?!@classFunctionMap ioClassFunctionMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?name:let @string inClassFunctionName
  ?argTypeName:let @string inArgument1TypeName
  ?argName:let @string inArgument1Name
  ?resultTypeName:let @string inReturnedTypeName
  ?hasLexiqueArg:let @bool inHasLexiqueArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?let t]
  [!?ioClassFunctionMap insertOrReplace
    !@lstring {!inClassFunctionName !@location.here}
    !@functionSignature §[.init (["" nowhere], t, inArgument1Name, true)]
    !inHasLexiqueArgument
    !returnedTypeIndex
  ]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

proc enterClassFunctionWith2Arguments
  ?!@classFunctionMap ioClassFunctionMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?name:let @string inClassFunctionName
  ?argTypeName1:let @string inArgument1TypeName
  ?argName1:let @string inArgument1Name
  ?argTypeName2:let @string inArgument2TypeName
  ?argName2:let @string inArgument2Name
  ?resultTypeName:let @string inReturnedTypeName
  ?hasLexiqueArg:let @bool inHasLexiqueArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var argumentTypeList = @functionSignature ()
  var @unifiedTypeMapEntry t
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?t]
  argumentTypeList += !["" nowhere] !t !inArgument1Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument2TypeName ?t]
  argumentTypeList += !["" nowhere] !t !inArgument2Name !true
  [!?ioClassFunctionMap insertOrReplace
    !@lstring {!inClassFunctionName !@location.here}
    !argumentTypeList
    !inHasLexiqueArgument
    !returnedTypeIndex
  ]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

proc enterClassFunctionWith3Arguments
  ?!@classFunctionMap ioClassFunctionMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?name:let @string inClassFunctionName
  ?argTypeName1:let @string inArgument1TypeName
  ?argName1:let @string inArgument1Name
  ?argTypeName2:let @string inArgument2TypeName
  ?argName2:let @string inArgument2Name
  ?argTypeName3:let @string inArgument3TypeName
  ?argName3:let @string inArgument3Name
  ?resultTypeName:let @string inReturnedTypeName
  ?hasLexiqueArg:let @bool inHasLexiqueArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?var t]
  var @functionSignature argumentTypeList = ()
  argumentTypeList += !["" nowhere] !t !inArgument1Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument2TypeName ?t]
  argumentTypeList += !["" nowhere] !t !inArgument2Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument3TypeName ?t]
  argumentTypeList += !["" nowhere] !t !inArgument3Name !true
  [!?ioClassFunctionMap insertOrReplace
    !@lstring {!inClassFunctionName !@location.here}
    !argumentTypeList
    !inHasLexiqueArgument
    !returnedTypeIndex
  ]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

