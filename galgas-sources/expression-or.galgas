#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @orExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @orShortExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @xorExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @closedSliceExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @openedSliceExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <expression_or_ggs3> ?!@galgasDeclarationAST ioDeclarations
                            !@semanticExpressionAST outExpression {
    <expression_and_ggs3> !?ioDeclarations ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $|$
      let leftOperand = outExpression
      <expression_and_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @orExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $||$
      let leftOperand = outExpression
      <expression_and_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @orShortExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $^$
      let leftOperand = outExpression
      <expression_and_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @xorExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $...$
      let leftOperand = outExpression
      <expression_and_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @closedSliceExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $..<$
      let leftOperand = outExpression
      <expression_and_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @openedSliceExpressionAST {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <expression_or> ?!@galgasDeclarationAST ioDeclarations
                       !@semanticExpressionAST outExpression {
    <expression_and> !?ioDeclarations ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $|$
      let leftOperand = outExpression
      <expression_and> !?ioDeclarations ?let rightOperand
      outExpression = @orExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $||$
      let leftOperand = outExpression
      <expression_and> !?ioDeclarations ?let rightOperand
      outExpression = @orShortExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $^$
      let leftOperand = outExpression
      <expression_and> !?ioDeclarations ?let rightOperand
      outExpression = @xorExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $...$
      let leftOperand = outExpression
      <expression_and> !?ioDeclarations ?let rightOperand
      outExpression = @closedSliceExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $..<$
      let leftOperand = outExpression
      <expression_and> !?ioDeclarations ?let rightOperand
      outExpression = @openedSliceExpressionAST {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @orExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @orExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixOrOperator]
    !"|"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.operator_or
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @orShortExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @orShortExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixOrOperator]
    !"|"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @orShortExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !rightExpression}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @xorExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @xorExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixXorOperator]
    !"^"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.operator_xor
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @closedSliceExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @closedSliceExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.predefinedTypes.mUIntType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.predefinedTypes.mUIntType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMapEntry leftType = leftExpression.mResultType
  if [leftType definition].typeName.string != "uint" then
    error leftExpression.mLocation : "the left expression or '...' operator should an @uint"
  end
  let @unifiedTypeMapEntry rightType = rightExpression.mResultType
  if [rightType definition].typeName.string != "uint" then
    error rightExpression.mLocation : "the right expression or '...' operator should an @uint"
  end
#--- Generate expression
  outExpression = @closedSliceExpressionForGeneration {
    ![ioTypeMap typeMapEntryForLKey !.init {!"range" !leftExpression.mLocation}]
    !self.mOperatorLocation
    !leftExpression
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @openedSliceExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @openedSliceExpressionAST analyzeSemanticExpression
                                              ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
                                              ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                              ?inferenceType: let @unifiedTypeMapEntry unused inInferenceType
                                              ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
                                              ?!@localVarManager ioVariableMap
                                              !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.predefinedTypes.mUIntType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.predefinedTypes.mUIntType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkAssignmentTypeWithImplicitGetterCall (
    !inAnalysisContext.predefinedTypes.mUIntType
    !leftExpression.mResultType
    !leftExpression.mLocation
    !?leftExpression
  )
#  let @unifiedTypeMapEntry leftType = leftExpression.mResultType
#  if [leftType definition].mTypeName.string != "uint" then
#    error leftExpression.mLocation : "the left expression of '..<' operator should an @uint"
#  end
  checkAssignmentTypeWithImplicitGetterCall (
    !inAnalysisContext.predefinedTypes.mUIntType
    !rightExpression.mResultType
    !rightExpression.mLocation
    !?rightExpression
  )
#  let @unifiedTypeMapEntry rightType = rightExpression.mResultType
#  if [rightType definition].mTypeName.string != "uint" then
#    error rightExpression.mLocation : "the right expression of '..<' operator should an @uint"
#  end
#--- Generate expression
  outExpression = @openedSliceExpressionForGeneration {
    ![ioTypeMap typeMapEntryForLKey !.init {!"range" !leftExpression.mLocation}]
    !self.mOperatorLocation
    !leftExpression
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @orShortExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mLeftExpression
  private let @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

refclass @openedSliceExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mLeftExpression
  private let @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

refclass @closedSliceExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mLeftExpression
  private let @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

override method @orShortExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string leftTemporaryOperand
  ]
#--- Generate Comparison
  let testVar = "test_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "GALGAS_bool " + testVar + " = " + leftTemporaryOperand + " ;\n"
  ioGeneratedCode += "if (kBoolTrue != " + testVar + ".boolEnum ()) {\n"
#--- Right operand
  [!?ioGeneratedCode incIndentation !2]
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string rightTemporaryOperand
  ]
  ioGeneratedCode += testVar + " = " + rightTemporaryOperand + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  outCppExpression = testVar
}

#·····················································································································

override method @closedSliceExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let leftTemporaryOperand
  ]
#--- Right operand
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Generate Comparison
  outCppExpression =
   "GALGAS_range (" + leftTemporaryOperand + ", "
   +  rightTemporaryOperand + ".substract_operation (" + leftTemporaryOperand + ", " + compilerCppName () + [self.mLocation commaSourceFile] + ").add_operation (GALGAS_uint (1), " + compilerCppName () + [self.mLocation commaSourceFile] + "))"
}

#·····················································································································

override method @openedSliceExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let leftTemporaryOperand
  ]
#--- Right operand
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Generate Comparison
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression =
   "GALGAS_range (" + leftTemporaryOperand + ", "
   +  rightTemporaryOperand + ".substract_operation (" + leftTemporaryOperand + ", " + compilerCppName ()
   + [self.mLocation commaSourceFile] + "))"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
