#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @orExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @orShortExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @xorExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @closedSliceExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#·····················································································································

refclass @openedSliceExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mLeftExpression
  private let @semanticExpressionAST mRightExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <expression_or> !@semanticExpressionAST outExpression {
    <expression_and> ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $|$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @orExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $||$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @orShortExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $^$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @xorExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $...$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @closedSliceExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $..<$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @openedSliceExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <expression_or> !@semanticExpressionAST outExpression {
    <expression_and> ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $|$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @orExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $||$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @orShortExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $^$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @xorExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $...$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @closedSliceExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $..<$
      let leftOperand = outExpression
      <expression_and> ?let rightOperand
      outExpression = @openedSliceExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @orExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @orExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
let @unifiedTypeMapEntry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixOrOperator]
    !"|"
    !self.mOperatorLocation
    !?rightExpression
  )  
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftType
    !self.mOperatorLocation
    !leftExpression
    !.operator_or
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @orShortExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @orShortExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMapEntry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixOrOperator]
    !"|"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @orShortExpressionForGeneration.new {
    !leftType
    !self.mOperatorLocation
    !leftExpression
    !rightExpression}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @xorExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @xorExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMapEntry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixXorOperator]
    !"^"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftType
    !self.mOperatorLocation
    !leftExpression
    !.operator_xor
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @closedSliceExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @closedSliceExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.mPredefinedTypes.mUIntType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.mPredefinedTypes.mUIntType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMapEntry leftType = leftExpression.mResultType
  if [leftType key] != "uint" then
    error leftExpression.mLocation : "the left expression or '...' operator should an @uint"
  end
  let @unifiedTypeMapEntry rightType = rightExpression.mResultType
  if [rightType key] != "uint" then
    error rightExpression.mLocation : "the right expression or '...' operator should an @uint"
  end
#--- Generate expression
  outExpression = @closedSliceExpressionForGeneration.new {
    ![inAnalysisContext.mSemanticContext.mTypeMap searchKey !.new {!"range" !leftExpression.mLocation}]
    !self.mOperatorLocation
    !leftExpression
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @openedSliceExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @openedSliceExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.mPredefinedTypes.mUIntType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  inAnalysisContext.mPredefinedTypes.mUIntType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMapEntry leftType = leftExpression.mResultType
  if [leftType key] != "uint" then
    error leftExpression.mLocation : "the left expression or '...' operator should an @uint"
  end
  let @unifiedTypeMapEntry rightType = rightExpression.mResultType
  if [rightType key] != "uint" then
    error rightExpression.mLocation : "the right expression or '...' operator should an @uint"
  end
#--- Generate expression
  outExpression = @openedSliceExpressionForGeneration.new {
    ![inAnalysisContext.mSemanticContext.mTypeMap searchKey !.new {!"range" !leftExpression.mLocation}]
    !self.mOperatorLocation
    !leftExpression
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @orShortExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mLeftExpression
  private let @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

refclass @openedSliceExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mLeftExpression
  private let @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

refclass @closedSliceExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mLeftExpression
  private let @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

override method @orShortExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string leftTemporaryOperand
  ]
#--- Generate Comparison
  let testVar = "test_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "GALGAS_bool " + testVar + " = " + leftTemporaryOperand + " ;\n"
  ioGeneratedCode += "if (kBoolTrue != " + testVar + ".boolEnum ()) {\n"
#--- Right operand
  [!?ioGeneratedCode incIndentation !2]
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string rightTemporaryOperand
  ]
  ioGeneratedCode += testVar + " = " + rightTemporaryOperand + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  outCppExpression = testVar
}

#·····················································································································

override method @closedSliceExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let leftTemporaryOperand
  ]
#--- Right operand
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Generate Comparison
  outCppExpression = 
   "GALGAS_range (" + leftTemporaryOperand + ", "
   +  rightTemporaryOperand + ".substract_operation (" + leftTemporaryOperand + ", " + compilerCppName () + [self.mLocation commaSourceFile] + ").add_operation (GALGAS_uint (1), " + compilerCppName () + [self.mLocation commaSourceFile] + "))"
}

#·····················································································································

override method @openedSliceExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let leftTemporaryOperand
  ]
#--- Right operand
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Generate Comparison
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression = 
   "GALGAS_range (" + leftTemporaryOperand + ", "
   +  rightTemporaryOperand + ".substract_operation (" + leftTemporaryOperand + ", " + compilerCppName ()
   + [self.mLocation commaSourceFile] + "))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
