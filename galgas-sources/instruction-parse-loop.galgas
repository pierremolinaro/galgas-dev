#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @parseLoopInstruction : @syntaxInstructionAST {
  private let @semanticExpressionAST mVariantExpression
  private let @location mEndOfVariantExpression
  private let @semanticExpressionAST mWhileExpression
  private let @location mEndOfWhileExpression
  private let @syntaxInstructionList mDoInstructionList
  private let @location mEndOfInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3SyntaxComponentSyntax {

  #·····················································································································

  rule <syntax_instruction>
    !@syntaxInstructionAST outInstruction {
    $parse$
    let instructionLocation = @location.here
    $loop$
    <expression> ?let @semanticExpressionAST variantExpression
    let endOfVariantExpression = @location.here
    $while$
    <expression> ?let @semanticExpressionAST whileExpression
    let endOfWhileExpression = @location.here
    $do$
    <syntax_instruction_list> ?let @syntaxInstructionList instructionList
    $end$
    let endOfInstructionList = @location.here
    select
    or
      $%attribute$ ?let @lstring terminator
      if terminator.string != "parse" then
        error terminator : "the terminator attribute should be '%parse'" fixit { replace "%parse" }
      end
    end
    outInstruction = @parseLoopInstruction.new {
      !instructionLocation
      !variantExpression
      !endOfVariantExpression
      !whileExpression
      !endOfWhileExpression
      !instructionList
      !endOfInstructionList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4SyntaxComponentSyntax {

  #·····················································································································

  rule <syntax_instruction>
    !@syntaxInstructionAST outInstruction {
    $parse$
    let instructionLocation = @location.here
    $loop$
    <expression> ?let @semanticExpressionAST variantExpression
    let endOfVariantExpression = @location.here
    $while$
    <expression> ?let @semanticExpressionAST whileExpression
    let endOfWhileExpression = @location.here
    $do$
    <syntax_instruction_list> ?let @syntaxInstructionList instructionList
    $end$
    let endOfInstructionList = @location.here
    select
    or
      $%attribute$ ?let @lstring terminator
      if terminator.string != "parse" then
        error terminator : "the terminator attribute should be '%parse'" fixit { replace "%parse" }
      end
    end
    outInstruction = @parseLoopInstruction.new {
      !instructionLocation
      !variantExpression
      !endOfVariantExpression
      !whileExpression
      !endOfWhileExpression
      !instructionList
      !endOfInstructionList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! TRANSFORM
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseLoopInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  transformInstructionList (
    !self.mDoInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?ioSyntaxInstructionList
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @parseLoopInstruction analyzeSyntaxInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?let @bool inHasTranslateFeature
  ?let @terminalMap inTerminalMap
  ?let @string inLexiqueName
  ?let @nonterminalMap inNonterminalMap
  ?let @string inComponentName
  ?let @stringset inIndexNameSet
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
  ?!@uint ioSelectMethodCount {
#--- Variant expression
  [self.mVariantExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioVariableMap
    ?let variant_expression
  ]
  if variant_expression.mResultType != inAnalysisContext.mPredefinedTypes.mUIntType then
    error self.mEndOfVariantExpression
    :"the variant expression type is '@" + [variant_expression.mResultType key]
    + "', but it should be '@" + [inAnalysisContext.mPredefinedTypes.mUIntType key] + "' type"
  end
#--- While expression
  [self.mWhileExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioVariableMap
    ?let while_expression
  ]
  if while_expression.mResultType != inAnalysisContext.mPredefinedTypes.mBoolType then
    error self.mEndOfWhileExpression
    :"the variant expression type is '@" + [variant_expression.mResultType key]
    + "', but it should be '@" + [inAnalysisContext.mPredefinedTypes.mBoolType key] + "' type"
  end
#--- 'do' instructions
#--- Begin block
  [!?ioVariableMap openOverrideForRepeatBlock]
#--- 'or' blocks
  analyzeSyntaxInstructionList (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !inHasTranslateFeature
    !inTerminalMap
    !inLexiqueName
    !inNonterminalMap
    !inComponentName
    !self.mDoInstructionList
    !self.mEndOfInstructionList
    !inIndexNameSet
    !?ioVariableMap
    !?ioSelectMethodCount
    ?let instructionList
  )
#--- End block
  [!?ioVariableMap closeOverride !self.mEndOfInstructionList]
#--- Generate instruction
  ioInstructionListForGeneration += !@parseLoopInstructionForGeneration.new {
    !self.mInstructionLocation
    !variant_expression
    !while_expression
    !instructionList
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @parseLoopInstructionForGeneration : @syntaxInstructionForGeneration {
  private let @semanticExpressionForGeneration mVariantExpression
  private let @semanticExpressionForGeneration mWhileExpression
  private let @semanticInstructionListForGeneration mInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseLoopInstructionForGeneration appendSyntaxSignature
  ?let @string inPosfix
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration {
  ioInstructionListForGeneration += syntaxSignatureOfInstructionList (!inPosfix !self.mInstructionList)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseLoopInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
#--- Variant
  [self.mVariantExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let variantVarCppName]
#--- Loop variable
  ioGeneratedCode += "if (" + variantVarCppName + ".isValid ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
  let @string variantVar = "variant_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "uint32_t " + variantVar + " = " + variantVarCppName + ".uintValue () ;\n"
#--- loop
  let @string loopVar = "loop_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "bool " + loopVar + " = true ;\n"
  ioGeneratedCode += "while (" + loopVar + ") {\n"
  [!?ioGeneratedCode incIndentation !2]
  ioGeneratedCode += loopVar + " = false ;\n"
  [self.mWhileExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let whileVarCppName]
  ioGeneratedCode += "if (" + whileVarCppName + ".isValidAndTrue ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
  ioGeneratedCode += loopVar + " = true ;\n"
  ioGeneratedCode += variantVar + " -- ; // Decrement variant\n"
  ioGeneratedCode += "const C_parsingContext parsingContext = " + compilerCppName () + "->parsingContext () ;\n"
  generateInstructionList (
    !?ioInclusionSet
    !self.mInstructionList
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  ioGeneratedCode += compilerCppName () + "->setParsingContext (parsingContext) ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
#--- Execute 'parse' part
  ioGeneratedCode += "//--- 'parse'\n"
  generateInstructionList (
    !?ioInclusionSet
    !syntaxSignatureOfInstructionList (!"parse" !self.mInstructionList)
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  ioGeneratedCode += compilerCppName () + "->resetTemplateString () ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
