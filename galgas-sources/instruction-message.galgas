#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @messageInstructionAST : @semanticInstructionAST {
  private let @semanticExpressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·················································································································

  rule <semantic_instruction_ggs3> !@semanticInstructionAST outInstruction {
    $message$
    let instructionLocation = @location.here
    <expression_ggs3> ?let @semanticExpressionAST expression
    outInstruction = @messageInstructionAST.new {!instructionLocation !expression}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·················································································································
  # Replaced by print (...)
  #·················································································································

#  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
#    $message$
#    let instructionLocation = @location.here
#    <expression> ?let @semanticExpressionAST expression
#    outInstruction = @messageInstructionAST.new {!instructionLocation !expression}
#  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @messageInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @messageInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap {
#--- Analyze source expression
  [self.mExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let expression
  ]
#--- Check message type is @string
  if expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringType then
    error self.mInstructionLocation
    :"the expression has the '@" + [expression.mResultType definition].mTypeName.string + "' type, but the 'message' instruction requires an '@string' expression"
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@messageInstructionForGeneration.new {
    !expression
    !self.mInstructionLocation}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @messageInstructionForGeneration : @semanticInstructionForGeneration {
  private let @semanticExpressionForGeneration mExpression
  private let @location mInstructionLocation
}

#·····················································································································*

override method @messageInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
#--- Message expression
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string messageCppVarName
  ]
#--- Invoke 'printMessage' method of Compiler
  ioGeneratedCode += compilerCppName () + "->printMessage (" + messageCppVarName
  ioGeneratedCode += " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
