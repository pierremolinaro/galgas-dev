#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionExpressionAST : @semanticExpressionAST {
  private let @lstring mOptionComponentName
  private let @lstring mOptionEntryName
  private let @lstring mOptionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·················································································································

  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    $[$
    $option$
    $identifier$ ?let optionComponentName indexing optionComponentReference
    $.$
    $identifier$ ?let optionName
    $identifier$ ?let getterName
    outExpression = @optionExpressionAST.new {!optionComponentName !optionName !getterName}
    $]$
  }

  #·················································································································

  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    $[$
    $option$
    $.$
    $identifier$ ?let optionName
    $identifier$ ?let getterName
    outExpression = @optionExpressionAST.new {!.new {!"galgas_builtin_options" !.here} !optionName !getterName}
    $]$
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·················································································································

  rule <primary> !@semanticExpressionAST outExpression {
    $option$
    $identifier$ ?let optionComponentName indexing optionComponentReference
    $[$
    $identifier$ ?let optionName
    $.$
    $identifier$ ?let getterName
    outExpression = @optionExpressionAST.new {!optionComponentName !optionName !getterName}
    $]$
  }

  #·················································································································

  rule <primary> !@semanticExpressionAST outExpression {
    $option$
    $[$
    $identifier$ ?let optionName
    $.$
    $identifier$ ?let getterName
    outExpression = @optionExpressionAST.new {!.new {!"galgas_builtin_options" !.here} !optionName !getterName}
    $]$
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·······················································································································

override method @optionExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = optionNameForUsefulEntitiesGraph (!self.mOptionComponentName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#---
  [inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis searchKey
    !self.mOptionComponentName
    ?let @bool optionComponentIsPredefined
    ?let @commandLineOptionMap boolOptionMap
    ?let @commandLineOptionMap uintOptionMap
    ?let @commandLineOptionMap stringOptionMap
    ?let @commandLineOptionMap stringListOptionMap
  ]
  var @bool found = [boolOptionMap hasKey !self.mOptionEntryName.string]
  var @unifiedTypeMapEntry returnedType = inAnalysisContext.mPredefinedTypes.mBoolType
  if not found then
    found = [uintOptionMap hasKey !self.mOptionEntryName.string]
    returnedType = inAnalysisContext.mPredefinedTypes.mUIntType
  end
  if not found then
    found = [stringOptionMap hasKey !self.mOptionEntryName.string]
    returnedType = inAnalysisContext.mPredefinedTypes.mStringType
  end
  if not found then
    found = [stringListOptionMap hasKey !self.mOptionEntryName.string]
    returnedType = inAnalysisContext.mPredefinedTypes.mStringListType
  end
  if found then
    if self.mOptionGetterName.string == "value" then
      outExpression = @optionValueExpressionForGeneration.new {
        !returnedType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    elsif self.mOptionGetterName.string == "char" then
      outExpression = @optionCharExpressionForGeneration.new {
        !inAnalysisContext.mPredefinedTypes.mCharType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    elsif self.mOptionGetterName.string == "string" then
      outExpression = @optionStringExpressionForGeneration.new {
        !inAnalysisContext.mPredefinedTypes.mStringType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    elsif self.mOptionGetterName.string == "comment" then
      outExpression = @optionCommentExpressionForGeneration.new {
        !inAnalysisContext.mPredefinedTypes.mStringType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    else
      error self.mOptionGetterName:"only the 'value', 'char', 'string' and 'comment' getters are defined for an option" :outExpression
    end
  else
    var @stringlist s = {}
    for (lkey * * * *) in boolOptionMap do
      s += !lkey
    end
    for (lkey * * * *) in uintOptionMap do
      s += !lkey
    end
    for (lkey * * * *) in stringOptionMap do
      s += !lkey
    end
    error self.mOptionEntryName
    : "the '" + self.mOptionComponentName + "' option component does not define the '" + self.mOptionEntryName + "' option"
    : outExpression
    fixit { replace s }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionValueExpressionForGeneration : @semanticExpressionForGeneration {
  private let @bool mOptionComponentIsPredefined
  private let @string mOptionComponentName
  private let @string mOptionEntryName
}

#·······················································································································

override method @optionValueExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_" + [self.mResultType identifierRepresentation] + " (gOption_" + [self.mOptionComponentName identifierRepresentation]
                   + "_" + [self.mOptionEntryName identifierRepresentation] + ".readProperty_value ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionCharExpressionForGeneration : @semanticExpressionForGeneration {
  private let @bool mOptionComponentIsPredefined
  private let @string mOptionComponentName
  private let @string mOptionEntryName
}

#·······················································································································

override method @optionCharExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_char (gOption_" + [self.mOptionComponentName identifierRepresentation]
                  + "_" + [self.mOptionEntryName identifierRepresentation] + ".readProperty_char ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionStringExpressionForGeneration : @semanticExpressionForGeneration {
  private let @bool mOptionComponentIsPredefined
  private let @string mOptionComponentName
  private let @string mOptionEntryName
}

#·······················································································································

override method @optionStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_string (gOption_" + [self.mOptionComponentName identifierRepresentation]
                  + "_" + [self.mOptionEntryName identifierRepresentation] + ".readProperty_string ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionCommentExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "gOption_" + [self.mOptionComponentName identifierRepresentation]
                  + "_" + [self.mOptionEntryName identifierRepresentation] + ".readProperty_comment ()"
}

#·······················································································································

refclass @optionCommentExpressionForGeneration : @semanticExpressionForGeneration {
  private let @bool mOptionComponentIsPredefined
  private let @string mOptionComponentName
  private let @string mOptionEntryName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
