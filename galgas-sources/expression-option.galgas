#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionExpressionAST : @semanticExpressionAST {
  public var @lstring mOptionComponentName
  public var @lstring mOptionEntryName
  public var @lstring mOptionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································

  rule <primary> !@semanticExpressionAST outExpression {
    $[$
    $option$
    $identifier$ ?let optionComponentName indexing optionComponentReference
    $.$
    $identifier$ ?let optionName
    $identifier$ ?let getterName
    outExpression = @optionExpressionAST.new {!optionComponentName !optionName !getterName}
    $]$
  }
  
  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $[$
    $option$
    $.$
    $identifier$ ?let optionName
    $identifier$ ?let getterName
    outExpression = @optionExpressionAST.new {!.new {!"galgas_builtin_options" !.here} !optionName !getterName}
    $]$
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·······················································································································

override method @optionExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = optionNameForUsefulEntitiesGraph (!self.mOptionComponentName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#---
  [inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis searchKey
    !self.mOptionComponentName
    ?let @bool optionComponentIsPredefined
    ?let @commandLineOptionMap boolOptionMap
    ?let @commandLineOptionMap uintOptionMap
    ?let @commandLineOptionMap stringOptionMap
    ?let @commandLineOptionMap stringListOptionMap
  ]
  var @bool found = [boolOptionMap hasKey !self.mOptionEntryName.string]
  var @unifiedTypeMap-entry returnedType = inAnalysisContext.mPredefinedTypes.mBoolType
  if not found then
    found = [uintOptionMap hasKey !self.mOptionEntryName.string]
    returnedType = inAnalysisContext.mPredefinedTypes.mUIntType
  end
  if not found then
    found = [stringOptionMap hasKey !self.mOptionEntryName.string]
    returnedType = inAnalysisContext.mPredefinedTypes.mStringType
  end
  if not found then
    found = [stringListOptionMap hasKey !self.mOptionEntryName.string]
    returnedType = inAnalysisContext.mPredefinedTypes.mStringListType
  end
  if found then
    if self.mOptionGetterName.string == "value" then
      outExpression = @optionValueExpressionForGeneration.new {
        !returnedType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    elsif self.mOptionGetterName.string == "char" then
      outExpression = @optionCharExpressionForGeneration.new {
        !inAnalysisContext.mPredefinedTypes.mCharType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    elsif self.mOptionGetterName.string == "string" then
      outExpression = @optionStringExpressionForGeneration.new {
        !inAnalysisContext.mPredefinedTypes.mStringType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    elsif self.mOptionGetterName.string == "comment" then
      outExpression = @optionCommentExpressionForGeneration.new {
        !inAnalysisContext.mPredefinedTypes.mStringType
        !self.mOptionComponentName.location
        !optionComponentIsPredefined
        !self.mOptionComponentName.string
        !self.mOptionEntryName.string}
    else
      error self.mOptionGetterName:"only the 'value', 'char', 'string' and 'comment' getters are defined for an option" :outExpression
    end
  else
    var @stringlist s = {}
    for (lkey mOptionChar mOptionString mComment mDefaultValue) in boolOptionMap do
      s += !lkey
    end
    for (lkey mOptionChar mOptionString mComment mDefaultValue) in uintOptionMap do
      s += !lkey
    end
    for (lkey mOptionChar mOptionString mComment mDefaultValue) in stringOptionMap do
      s += !lkey
    end
    error self.mOptionEntryName
    : "the '" + self.mOptionComponentName + "' option component does not define the '" + self.mOptionEntryName + "' option"
    : outExpression
    fixit { replace s }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionValueExpressionForGeneration : @semanticExpressionForGeneration {
  public var @bool mOptionComponentIsPredefined
  public var @string mOptionComponentName
  public var @string mOptionEntryName
}

#·······················································································································

override method @optionValueExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_" + [self.mResultType identifierRepresentation] + " (gOption_" + [self.mOptionComponentName identifierRepresentation]
                   + "_" + [self.mOptionEntryName identifierRepresentation] + ".getter_value ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionCharExpressionForGeneration : @semanticExpressionForGeneration {
  public var @bool mOptionComponentIsPredefined
  public var @string mOptionComponentName
  public var @string mOptionEntryName
}

#·······················································································································

override method @optionCharExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_char (gOption_" + [self.mOptionComponentName identifierRepresentation]
                  + "_" + [self.mOptionEntryName identifierRepresentation] + ".getter_char ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @optionStringExpressionForGeneration : @semanticExpressionForGeneration {
  public var @bool mOptionComponentIsPredefined
  public var @string mOptionComponentName
  public var @string mOptionEntryName
}

#·······················································································································

override method @optionStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_string (gOption_" + [self.mOptionComponentName identifierRepresentation]
                  + "_" + [self.mOptionEntryName identifierRepresentation] + ".getter_string ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionCommentExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not self.mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "gOption_" + [self.mOptionComponentName identifierRepresentation]
                  + "_" + [self.mOptionEntryName identifierRepresentation] + ".getter_comment ()"
}

#·······················································································································

refclass @optionCommentExpressionForGeneration : @semanticExpressionForGeneration {
  public var @bool mOptionComponentIsPredefined
  public var @string mOptionComponentName
  public var @string mOptionEntryName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
