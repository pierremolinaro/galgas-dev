#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  shared map type                          
#                                           
#  Copyright (C) 2015, ..., 2022 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @sharedMapDeclarationAST : @semanticDeclarationAST {
  public var @lstring mMapTypeName
  public var @lstringlist mAttributeList
  public var @propertyInCollectionListAST mPropertyList
  public var @insertMethodListAST mInsertMethodList
  public var @mapSearchMethodListAST mSearchMethodList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $shared$
    $map$
    if [option galgas_cli_options.errorOldStylePropertyDeclaration value] then
      warning .here : "This type is not handled in GALGAS 4"
    end
  #--- Map type name
    $@type$ ?let @lstring mMapTypeName indexing uniquemapDefinition, mapEntryDefinition "-entry"
    let mapEntryTypeName = @lstring.new {!mMapTypeName.string + "-entry" !mMapTypeName.location}
  #--- Map attributes
    var @lstringlist mapAttributeList = {}
    repeat
    while
      $%attribute$ ?let attribute
      mapAttributeList += !attribute
    end
  #--- Map properties
    ${$
    var @propertyInCollectionListAST propertyList = {}
    var @insertMethodListAST mInsertMethodList = {}
    var @mapSearchMethodListAST mSearchMethodList = {}
    repeat
    while
      <property_declaration> !?propertyList
    while
      <map_insert_setter_declaration> !?mInsertMethodList
    while
      <shared_map_search_method_declaration> !?mSearchMethodList
    while
      $;$
    end
    $}$
  #--- Declare map
    ioDeclarations.mDeclarationList += !@sharedMapDeclarationAST.new {
      !false # Is not predefined
      !mMapTypeName
      !mapAttributeList
      !propertyList
      !mInsertMethodList
      !mSearchMethodList
    }
  #--- Declare map entry
    ioDeclarations.mDeclarationList += !@mapEntryDeclarationAST.new {
      !false # Is not predefined
      !mapEntryTypeName
      !mMapTypeName
    }
  }

  #·····················································································································

  rule <shared_map_search_method_declaration> ?!@mapSearchMethodListAST ioMapSearchMethodListAST {
    $search$
    $identifier$ ?let @lstring mMethodName
    $error$
    $message$
    $"string"$ ?let @lstring mErrorMessage
    ioMapSearchMethodListAST +=
      !mMethodName
      !mErrorMessage
#      !.new {!"" !@location.here} # actionName
      !false
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#syntax extension galgas4DeclarationsSyntax {
#
#  #·····················································································································
#
#  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
#    $shared$
#    $map$
#  #--- Map type name
#    $@type$ ?let @lstring mMapTypeName indexing uniquemapDefinition, mapEntryDefinition "-entry"
#    let mapEntryTypeName = @lstring.new {!mMapTypeName.string + "-entry" !mMapTypeName.location}
#  #--- Map attributes
#    var @lstringlist mapAttributeList = {}
#    repeat
#    while
#      $%attribute$ ?let attribute
#      mapAttributeList += !attribute
#    end
#  #--- Map properties
#    ${$
#    var @propertyInCollectionListAST propertyList = {}
#    var @insertMethodListAST mInsertMethodList = {}
#    var @mapSearchMethodListAST mSearchMethodList = {}
#    var @mapStateList mapStateList = {}
#    var @mapOverrideBlockListAST mapOverrideBlockListAST = {}
#    var @sharedMapAttributeListAST sharedMapAttributeListAST = {} 
#    repeat
#    while
#      <shared_map_state_list> !?mapStateList
#    while
#      <shared_map_attribute> !?sharedMapAttributeListAST
#    while
#      <property_declaration> !?propertyList
#    while
#      <map_insert_setter_declaration> !?mInsertMethodList
#    while
#      <shared_map_search_method_declaration> !?mSearchMethodList
#    while
#      <shared_map_override> !?mapOverrideBlockListAST
#    while
#      $;$
#    end
#    $}$
#  #--- Declare map
#    ioDeclarations.mDeclarationList += !@sharedMapDeclarationAST.new {
#      !false # Is not predefined
#      !mMapTypeName
#      !mapAttributeList
#      !propertyList
#      !mInsertMethodList
#      !mSearchMethodList
#      !mapStateList
#      !mapOverrideBlockListAST
#      !sharedMapAttributeListAST
#    }
#  #--- Declare map entry
#    ioDeclarations.mDeclarationList += !@mapEntryDeclarationAST.new {
#      !false # Is not predefined
#      !mapEntryTypeName
#      !mMapTypeName
#    }
#  }
#
#  #·····················································································································
#
#  rule <shared_map_override> ?!@mapOverrideBlockListAST ioMapOverrideBlockListAST {
#    $override$
#    $identifier$ ?let @lstring overrideBlockName
#    var @mapOverrideBlockDescriptorAST mapOverrideBlockDescriptor1AST = {}
#    ${$
#    repeat
#    while
#      $identifier$ ?let @lstring sourceState1
#      $:$
#      $identifier$ ?let @lstring sourceState2
#      $->$
#      $identifier$ ?let @lstring targetState
#      var @mapAutomatonMessageKind messageKind
#      var @lstring messageText
#      select
#        messageKind = @mapAutomatonMessageKind.noMessage
#        messageText = @lstring.new {!"" !@location.here}
#      or
#        $warning$
#        messageKind = @mapAutomatonMessageKind.warningMessage
#        $"string"$ ? messageText
#      or
#        $error$
#        messageKind = @mapAutomatonMessageKind.errorMessage
#        $"string"$ ? messageText
#      end
#      mapOverrideBlockDescriptor1AST += !sourceState1 !sourceState2 !targetState !messageKind !messageText
#    end
#    $}$
#    var mapOverrideBlockDescriptor2AST = @mapOverrideBlockDescriptorAST {}
#    ${$
#    repeat
#    while
#      $identifier$ ?let @lstring sourceState1
#      $:$
#      $identifier$ ?let @lstring sourceState2
#      $->$
#      $identifier$ ?let @lstring targetState
#      var @mapAutomatonMessageKind messageKind
#      var @lstring messageText
#      select
#        messageKind = @mapAutomatonMessageKind.noMessage
#        messageText = @lstring.new {!"" !@location.here}
#      or
#        $warning$
#        messageKind = @mapAutomatonMessageKind.warningMessage
#        $"string"$ ? messageText
#      or
#        $error$
#        messageKind = @mapAutomatonMessageKind.errorMessage
#        $"string"$ ? messageText
#      end
#      mapOverrideBlockDescriptor2AST += !sourceState1 !sourceState2 !targetState !messageKind !messageText
#    end
#    $}$
#    ioMapOverrideBlockListAST += !overrideBlockName !mapOverrideBlockDescriptor1AST !mapOverrideBlockDescriptor2AST
#  }
#
#  #·····················································································································
#
#  rule <shared_map_attribute> ?!@sharedMapAttributeListAST ioSharedMapAttributeListAST {
#    var @bool isError
#    select
#      $error$
#      isError = true
#    or
#      $warning$
#      isError = false
#    end
#    $%attribute$ ?let attributeName
#    $"string"$ ?let messageText
#    ioSharedMapAttributeListAST += !attributeName !isError !messageText
#  }
#
#  #·····················································································································
#
#  rule <shared_map_search_method_declaration> ?!@mapSearchMethodListAST ioMapSearchMethodListAST {
#    $search$
#    $identifier$ ?let @lstring mMethodName
#    var @lstring actionName
#    select
#      actionName = @lstring.new {!"" !@location.here}
#    or
#      $do$
#      $identifier$ ? actionName
#    end
#    $error$
#    $message$
#    $"string"$ ?let @lstring mErrorMessage
#    ioMapSearchMethodListAST +=
#      !mMethodName
#      !mErrorMessage
#      !actionName
#      !false
#  }
#  
#  #·····················································································································
#
#  rule <shared_map_state_list> ?!@mapStateList ioMapStateList {
#    $state$
#    $identifier$ ?let @lstring stateName
#    var @mapAutomatonMessageKind stateMessageKind
#    var @lstring stateMessage
#    select
#      stateMessageKind = .noMessage
#      stateMessage = @lstring.new {!"" !@location.here}
#    or
#      $warning$
#      $"string"$ ? stateMessage
#      stateMessageKind = .warningMessage
#    or
#      $error$
#      $"string"$ ? stateMessage
#      stateMessageKind = .errorMessage
#    end
#    ${$
#    var @mapStateTransitionList transitionList = {}
#    repeat
#    while
#      <shared_map_state_transition> !?transitionList
#    end
#    ioMapStateList +=
#      !stateName
#      !stateMessageKind
#      !stateMessage
#      !transitionList
#    $}$
#  }
#
#  #·····················································································································
#
#  rule <shared_map_state_transition> ?!@mapStateTransitionList ioTransitionList {
#    $identifier$ ?let @lstring actionName
#    $->$
#    $identifier$ ?let @lstring targetStateName
#    var @mapAutomatonMessageKind transitionMessageKind
#    var @lstring transitionMessage
#    select
#      transitionMessageKind = .noMessage
#      transitionMessage = .new {!"" !.here}
#    or
#      $warning$
#      $"string"$ ? transitionMessage
#      transitionMessageKind = .warningMessage
#    or
#      $error$
#      $"string"$ ? transitionMessage
#      transitionMessageKind = .errorMessage
#    end
#    ioTransitionList +=
#      !actionName
#      !targetStateName
#      !transitionMessageKind
#      !transitionMessage
#  }
#
#  #·····················································································································
#
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sharedMapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mMapTypeName !self.mMapTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for (* mPropertyTypeName * * *) in self.mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring.new {!"@" + mPropertyTypeName !mPropertyTypeName.location}]
  end
}

#·······················································································································

override getter @sharedMapDeclarationAST keyRepresentation -> @string result {
  result = "shared map @" + self.mMapTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN SEMANTIC CONTEXT               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sharedMapDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
  let optionalMethodMap = @optionalMethodMap {}
#--- string type index
  [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !"string" ?let stringTypeIndex]
#--- lstring type index
  [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !"lstring" ?let lstringTypeIndex]
#--- lstringlist type index
  [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !"lstringlist" ?let lstringlistTypeIndex]
#--- Enumeration description
  var @enumerationDescriptorList enumerationDescriptor = {!lstringTypeIndex !"lkey"}
#--- Attributes
  var @bool usesSelectorsInInsertAndSearch = false
  for (s) in self.mAttributeList do
    if s.string == "selectors" then
      if usesSelectorsInInsertAndSearch then
        error s : "duplicated attribute"
      end
      usesSelectorsInInsertAndSearch = true
    else
      error s : "unknown attribute"
    end
  end
#---
  var @constructorMap constructorMap = {}
  commonGetterMapForAllTypes (!?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  var @setterMap setterMap = {}
  var @instanceMethodMap instanceMethodMap = {}
#--- Constructors
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioSemanticContext.mTypeMap
    !name:"emptySharedMap"
    !resultTypeName:self.mMapTypeName.string
    !hasLexiqueArg:false
  )
#--- Readers
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"allKeys"
    !returnedTypeName:"stringset"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"allKeyList"
    !returnedTypeName:"lstringlist"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"hasKey"
    !argumentTypeName:"string"
    !argumentName:"inKey"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"locationForKey" 
    !argumentTypeName:"string"
    !argumentName:"inKey"
    !returnedTypeName:"location"
    !hasCompilerArgument:true
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"count"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"unsolvedEntryCount"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"unsolvedEntryList"
    !returnedTypeName:"lstringlist"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"edgeGraphvizRepresentation"
    !returnedTypeName:"string"
    !hasCompilerArgument:false
  )
#--- Handle attributes
  var @typedPropertyList typedAttributeList = {}
  var @formalParameterSignature insertMethodFormalArgumentList = {}
  insertMethodFormalArgumentList +=
    ![if usesSelectorsInInsertAndSearch then "lkey" else "" end nowhere]
    !lstringTypeIndex
    !.argumentConstantIn
    !"inLKey"
  var @formalParameterSignature removeMethodFormalArgumentList = {}
  removeMethodFormalArgumentList +=
    ![if usesSelectorsInInsertAndSearch then "lkey" else "" end nowhere]
    !lstringTypeIndex
    !.argumentConstantIn
    !"inLKey"
  for (* mPropertyTypeName mPropertyName * *) in self.mPropertyList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    let hasSetter = true
    let hasSelector = false
    typedAttributeList += !attributeTypeIndex !mPropertyName !hasSetter !hasSelector
    enumerationDescriptor += !attributeTypeIndex !mPropertyName.string
    insertMethodFormalArgumentList +=
      !if usesSelectorsInInsertAndSearch then mPropertyName else ["" nowhere] end
      !attributeTypeIndex 
      !.argumentConstantIn
      !mPropertyName.string
    removeMethodFormalArgumentList +=
      !if usesSelectorsInInsertAndSearch then mPropertyName else ["" nowhere] end
      !attributeTypeIndex
      !.argumentOut
      !mPropertyName.string
  end
#-------------------------- Insert Modifiers
  for (mInsertMethodName * *) in self.mInsertMethodList do
    if [setterMap hasKey !mInsertMethodName.string] then
      error mInsertMethodName:"the '" + mInsertMethodName + "' insert method is already declared"
    else
      [!?setterMap insertOrReplace
        !mInsertMethodName
        !@methodKind.definedAsMember
        !insertMethodFormalArgumentList
        !true
        !@methodQualifier.isBasic
        !"" # No error message
      ]
    end
  end
#--------------------------- EnterEdge setter
  var enterEdgeFormalArgumentList = @formalParameterSignature {}
  enterEdgeFormalArgumentList += !["" nowhere] !lstringTypeIndex !.argumentConstantIn !"inSource"
  enterEdgeFormalArgumentList += !["" nowhere] !lstringTypeIndex !.argumentConstantIn !"inTarget"
  [!?setterMap insertOrReplace
    !["enterEdge" nowhere]
    !@methodKind.definedAsMember
    !enterEdgeFormalArgumentList
    !false
    !@methodQualifier. isInherited
    !"" # No error message
  ]
#--------------------------- topologicalSort Method
  var topologicalSortFormalArgumentList = @formalParameterSignature {}
  topologicalSortFormalArgumentList += !["" nowhere] !lstringlistTypeIndex !.argumentOut !"outSortedLKeys"
  topologicalSortFormalArgumentList += !["" nowhere] !lstringlistTypeIndex !.argumentOut !"outUnsortedLKeys"
  [!?instanceMethodMap insertKey
    !["topologicalSort" nowhere]
    !@methodKind.definedAsMember
    !topologicalSortFormalArgumentList
    !@location.here
    !true
    !@methodQualifier. isInherited
    !.constantMethod
    !"" # No error message
  ]
#--- Handle search methods (methods if no state, setters if states)
#  if [self.mMapStateList length] == 0 then
    for (mSearchMethodName * *) in self.mSearchMethodList do
      [!?instanceMethodMap insertKey
        !mSearchMethodName
        !@methodKind.definedAsMember
        !removeMethodFormalArgumentList
        !mSearchMethodName.location
        !true
        !@methodQualifier.isBasic
        !.constantMethod
        !"" # No error message
      ]
    end
#  else
#    for (mSearchMethodName * * *) in self.mSearchMethodList do
#      [!?setterMap insertKey
#        !mSearchMethodName
#        !@methodKind.definedAsMember
#        !removeMethodFormalArgumentList
#        !true
#        !@methodQualifier.isBasic
#        !"" # No error message
#      ]
#    end
#  end
#--- Enter "enterBranch" and "exitBranch" setters (only if there are states)
#  if [self.mMapStateList length] > 0 then
#    [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !"location" ?let locationTypeIndex]
#    [!?setterMap insertKey
#      !@lstring.new {!"openBranch" !@location.here}
#      !@methodKind.definedAsMember
#      !{}
#      !true
#      !@methodQualifier. isInherited
#      !"" # No error message
#    ]
#    [!?setterMap insertKey
#      !@lstring.new {!"closeBranch" !@location.here}
#      !@methodKind.definedAsMember
#      !@formalParameterSignature. listWithValue {!["" nowhere] !locationTypeIndex !.argumentIn !"inErrorLocation"}
#      !true
#      !@methodQualifier.isBasic
#      !"" # No error message
#    ]
#    [!?setterMap insertKey
#      !@lstring.new {!"closeOverride" !@location.here}
#      !@methodKind.definedAsMember
#      !@formalParameterSignature. listWithValue {!["" nowhere] !locationTypeIndex !.argumentIn !"inErrorLocation"}
#      !true
#      !@methodQualifier. isInherited
#      !"" # No error message
#    ]
#    [!?instanceMethodMap insertKey
#      !@lstring.new {!"checkAutomatonStates" !@location.here}
#      !@methodKind.definedAsMember
#      !@formalParameterSignature. listWithValue {!["" nowhere] !locationTypeIndex !.argumentIn !"inErrorLocation"}
#      !@location.here
#      !true
#      !@methodQualifier.isBasic
#      !.constantMethod
#      !"" # No error message
#    ]
#    for (mOverrideBlockName * *) in self.mMapOverrideBlockListAST do
#      [!?setterMap insertKey
#        !@lstring.new {!"openOverrideFor" + [mOverrideBlockName stringByCapitalizingFirstCharacter] !@location.here}
#        !@methodKind.definedAsMember
#        !{}
#        !true
#        !@methodQualifier.isBasic
#        !"" # No error message
#      ]
#    end
#  end
#--- Enter "attributeForKey" getters
  for (* mPropertyTypeName mPropertyName * *) in self.mPropertyList do
    let accessorName = @lstring.new {!mPropertyName.string + "ForKey" !mPropertyName.location}
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    [!?getterMap insertOrReplace
      !accessorName
      !@methodKind.definedAsMember
      !@functionSignature {!["" nowhere] !stringTypeIndex !"inKey"}
      !@location.here
      !true
      !attributeTypeIndex
      !@methodQualifier.isBasic
      !"" # No Error message
    ]
  end
#---------- Enter "set...Attribute...forKey" setters, and 'with' accessor parameter
  for (* mPropertyTypeName mPropertyName * *) in self.mPropertyList do
    let accessorName = @lstring.new {!"set" + [mPropertyName.string stringByCapitalizingFirstCharacter] + "ForKey" !mPropertyName.location}
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    var @formalParameterSignature accessorFormalArgumentList = {}
    accessorFormalArgumentList += !["" nowhere] !attributeTypeIndex !.argumentConstantIn !mPropertyName.string
    accessorFormalArgumentList += !["" nowhere] !stringTypeIndex !.argumentConstantIn !mPropertyName.string
    [!?setterMap insertOrReplace
      !accessorName
      !@methodKind.definedAsMember
      !accessorFormalArgumentList
      !true
      !@methodQualifier.isBasic
      !"" # No error message
    ]
  end
#--- Add extensions
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mMapTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mMapTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-entry.null
    !@typeKindEnum.sharedMapType
    !false # Does not support collection value
    !{}
    !{}
    !typedAttributeList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !optionalMethodMap
    !enumerationDescriptor
    !.doNotGenererateObjectCompare | .supportWithAccessor
    !{}
    !{}
    !{}
    !self.mSearchMethodList
    !{}
    !false # Do not generate header in separate file
    !@unifiedTypeMap-entry.null # Type for enumerated element for "for" instruction
    !"emptySharedMap"
    !"sharedmap-" + [self.mMapTypeName fileNameRepresentation]
    !@headerKind.twoHeaders
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sharedMapDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mMapTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!self.mMapTypeName.string + "-entry" !self.mMapTypeName})
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
#------ Enter attributes
  var @typedPropertyList typedAttributeList = {}
  var @propertyIndexMap attributeMap = {}
  for (* mPropertyTypeName mPropertyName * *) in self.mPropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mPropertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !propertyTypeNameForUsefulness]
    let t = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !mPropertyTypeName}
    let hasSetter = true
    let hasSelector = false
    typedAttributeList +=
      !t
      !mPropertyName
      !hasSetter
      !hasSelector
    [!?attributeMap insertKey !mPropertyName !t]
  end
#--- Enter insert setters
  var @insertMethodMap insertMethodMap = {}
  for insertMethod in self.mInsertMethodList do
    [!?insertMethodMap insertKey !insertMethod.mInsertMethodName]
  #--- Check error message escape sequences : only %K, %L or %%
    for messageComponent in [insertMethod.mErrorMessage.string componentsSeparatedByString !"%%"] do
      var @stringlist explodedArray = [messageComponent.mValue componentsSeparatedByString !"%"]
      [!?explodedArray popFirst ?*]
      for (mValue) in explodedArray do
        if [mValue length] > 0 then
          let @char c = [mValue characterAtIndex !0]
          if (c != 'K') & (c != 'L') then
            error insertMethod.mErrorMessage: "only '%K', '%L' and '%%' escape sequences are allowed in an insert error message"
          end
        end
      end
    end
  #--- Check shadow error message escape sequences : only %K, %L or %%
    for shadowMessageComponent in [insertMethod.mShadowErrorMessage.string componentsSeparatedByString !"%%"] do
      var @stringlist explodedArray = [shadowMessageComponent.mValue componentsSeparatedByString !"%"]
      [!?explodedArray popFirst ?*]
      for component in explodedArray do
        if [component.mValue length] > 0 then
          let @char c = [component.mValue characterAtIndex !0]
          if (c != 'K') & (c != 'L') then
            error insertMethod.mErrorMessage: "only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message"
          end
        end
      end
    end
  end
#--- Enter search methods
  var @searchMethodMap searchMethodMap = {}
  for searchMethod in self.mSearchMethodList do
#    if [self.mMapStateList length] == 0 then
#      [!?searchMethodMap insertKey !searchMethod.mSearchMethodName]
#    else
      [!?searchMethodMap insertKey !searchMethod.mSearchMethodName]
#    end
  #--- Check error message escape sequences : only %K or %%
    for errorMessageComponent in [searchMethod.mErrorMessage.string componentsSeparatedByString !"%%"] do
      var @stringlist explodedArray = [errorMessageComponent.mValue componentsSeparatedByString !"%"]
      [!?explodedArray popFirst ?*]
      for component in explodedArray do
        if [component.mValue length] > 0 then
          let @char c = [component.mValue characterAtIndex !0]
          if c != 'K' then
            error searchMethod.mErrorMessage: "only '%K' and '%%' escape sequences are allowed in a search error message"
          end
        end
      end
    end
  end
#--- Enter map declaration
  ioSemanticDeclarationListForGeneration +=
    !"shared map " + self.mMapTypeName
    !@sharedMapTypeForGeneration.new {
      !@unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mMapTypeName}
      !typedAttributeList
      !self.mInsertMethodList
      !self.mSearchMethodList
    }
}
   
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @sharedMapTypeForGeneration : @semanticTypeForGeneration {
  public var @typedPropertyList mTypedAttributeList
  public var @insertMethodListAST mInsertMethodList
  public var @mapSearchMethodListAST mSearchMethodList
#  public var @mapAutomatonStateMap mMapAutomatonStateMap
#  public var @mapAutomatonActionMap mMapAutomatonActionMap
#  public var @mapStateSortedList mMapStateSortedList
#  public var @mapOverrideList mMapOverrideList
#---
#  public var @mapAutomatonMessageKind mShadowBehaviour
#  public var @string mShadowMessage
}

#·······················································································································

filewrapper sharedMapGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
#---------- UNIQUE MAP
  template uniqueMapTypeHeader1 "GALGAS_uniqueMap.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@mapSearchMethodListAST SEARCH_METHOD_LIST

  template uniqueMapTypeHeader2 "GALGAS_uniqueMap.h2.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST

  template uniqueMapTypeSpecificImplementation "GALGAS_uniqueMap.cpp.galgasTemplate"
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@insertMethodListAST INSERT_METHOD_LIST
    ?@mapSearchMethodListAST SEARCH_METHOD_LIST
}

#·······················································································································

override method @sharedMapTypeForGeneration appendDeclaration1
  ?!@stringset ioInclusionSet
  !@string outHeader
{
  for (t 3*) in self.mTypedAttributeList do
    [t addHeaderFileName1 !?ioInclusionSet]
  end

  outHeader = [filewrapper sharedMapGenerationTemplate.uniqueMapTypeHeader1
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedAttributeList
    !self.mSearchMethodList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mSelfTypeEntry  mIsConcrete]
    ![self.mSelfTypeEntry  mConstructorMap]
    ![self.mSelfTypeEntry  mGetterMap]
    ![self.mSelfTypeEntry  mSetterMap]
    ![self.mSelfTypeEntry  mInstanceMethodMap]
    ![self.mSelfTypeEntry  mClassMethodMap]
    ![self.mSelfTypeEntry  mOptionalMethodMap]
    ![self.mSelfTypeEntry  mEnumerationDescriptor]
    ![self.mSelfTypeEntry  mHandledOperatorFlags]
    ![self.mSelfTypeEntry  mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry  mTypeForEnumeratedElement]
  ]
 }

#·······················································································································

override method @sharedMapTypeForGeneration appendDeclaration2
  ?let @string unused inOutputDirectory
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  outHeader = [filewrapper sharedMapGenerationTemplate.uniqueMapTypeHeader2
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedAttributeList
  ]
 }

#·······················································································································

override method @sharedMapTypeForGeneration appendSpecificImplementation ?let @unifiedTypeMap unused inTypeMap
                                                                         ?!@stringset ioInclusionSet
                                                                         !@string outImplementation {
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper sharedMapGenerationTemplate.uniqueMapTypeSpecificImplementation
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedAttributeList
    !self.mInsertMethodList
    !self.mSearchMethodList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
