#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

#syntax extension galgas3SyntaxComponentSyntax {
#
#  //······························································································
#
#  rule <syntax_instruction_ggs3> !@syntaxInstructionAST outInstruction {
#    $separator-string$
#    let location = @location.here
#    message "AAA\n"
#    <actual_input_parameter_list_ggs3> ?let @actualInputParameterListAST actualInputParameterList
#    message "BBB\n"
#    if [actualInputParameterList length] != 1 then
#      error location : "exactly one argument is required here (got " + [actualInputParameterList length] + ")" : outInstruction
#    else
#      [actualInputParameterList first ?let @lstring actualSelector ?let @abstractInputParameter inputParameter]
#      if actualSelector.string != "" then
#        error actualSelector : "an empty selector '?' is required here"
#      end
#      outInstruction = @SeparatorStringSyntaxInstruction {
#        !location
#        !inputParameter
#      }
#    end
#  }
#
#  //······························································································
#
#}
#
#//————————————————————————————————————————————————————————————————————————————————————————————————
#
#syntax extension galgas4SyntaxComponentSyntax {
#
#  //······························································································
#
#
#  //······························································································
#
#}
#
#//————————————————————————————————————————————————————————————————————————————————————————————————
#
#class @SeparatorStringSyntaxInstruction : @syntaxInstructionAST {
#
#  //······························································································
#
#  private let @abstractInputParameter mInputParameter
#
#  //······························································································
#
#  override method transformInstruction
#    ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis unused ioActuallyUsedTerminalSymbolMap
#    ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis unused inNonTerminalSymbolMap
#    ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
#    ?!@syntaxInstructionListForGrammarAnalysis unused ioSyntaxInstructionList {
#  #  [inNonTerminalSymbolMap searchKey !self.mNonterminalName ?let nonTerminalSymbolIndex ?*]
#  #  ioSyntaxInstructionList += !@nonTerminalInstructionForGrammarAnalysis {
#  #    !self.mInstructionLocation
#  #    !self.mNonterminalName
#  #    !nonTerminalSymbolIndex
#  #  }
#  }
#
#  //······························································································
#
#  override method analyzeSyntaxInstruction
#    ?let @lstring unused inUsefulnessCallerEntityName
#    ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
#    ?let @analysisContext inAnalysisContext
#    ?!@unifiedTypeMap ioTypeMap
#    ?let @bool unused inHasTranslateFeature
#    ?let @terminalMap unused inTerminalMap
#    ?let @string unused inLexiqueName
#    ?let @nonterminalMap unused inNonterminalMap
#    ?let @string unused inComponentName
#    ?let @stringset unused inIndexNameSet
#    ?!@semanticInstructionListForGeneration unused ioInstructionListForGeneration
#    ?!@localVarManager ioVariableMap
#    ?!@uint unused ioSelectMethodCount
#  {
#    [self.mInputParameter analyzeInputParameter
#      !inAnalysisContext
#      !?ioTypeMap
#      !.lexicalType_string
#      !"" # Any value inLexicalAttributeName
#      !?* # ioTerminalCheckAssignementList
#      !?ioVariableMap
#    ]
#  #//--- Generate instructions
#  #  ioInstructionListForGeneration += !@SeparatorStringInstructionForGeneration {
#  #    !self.mInstructionLocation
#  #    !self.mNonterminalName.string
#  #    !self.mLabelName.string
#  #    !actualParameterListForGeneration
#  #    !self.mGrammarInstructionSyntaxDirectedTranslationResult
#  #  }
#  }
#
#  //······························································································
#
#}
#
#
##  [inNonterminalMap searchKey !self.mNonterminalName ?let @nonterminalLabelMap labelMap]
##  let @formalParameterSignature signature
##  if self.mLabelName.string == "parse" then
##    signature = @()
##  else
##    [labelMap searchKey !self.mLabelName ?* ?signature ?*]
##  end
##//--- call arguments
##  analyzeRoutineArguments (
##    !inUsefulnessCallerEntityName
##    !?ioUsefulEntitiesGraph
##    !inAnalysisContext
##    !?ioTypeMap
##    !self.mNonterminalName
##    !invokedEntityNameForErrorSignaling: "'<" + self.mNonterminalName + ">' nonterminal declaration"
##    !signature
##    !self.mActualParameterList
##    !?ioVariableMap
##    !?ioInstructionListForGeneration
##    ?let @actualParameterListForGeneration actualParameterListForGeneration
##  )
##//--- Check syntax directed translation destination variable
##  [self.mGrammarInstructionSyntaxDirectedTranslationResult analyzeSDT
##    !inAnalysisContext
##    !?ioTypeMap
##    !inHasTranslateFeature
##    !?ioVariableMap
##  ]
##//--- Generate instructions
##  ioInstructionListForGeneration += !@SeparatorStringInstructionForGeneration {
##    !self.mInstructionLocation
##    !self.mNonterminalName.string
##    !self.mLabelName.string
##    !actualParameterListForGeneration
##    !self.mGrammarInstructionSyntaxDirectedTranslationResult
##  }
##}
#
#//————————————————————————————————————————————————————————————————————————————————————————————————
##! GENERATION TYPES
#//————————————————————————————————————————————————————————————————————————————————————————————————
#
#class @SeparatorStringInstructionForGeneration : @syntaxInstructionForGeneration {
#  private let @string mNonterminalName
#  private let @string mLabelName
#  private let @actualParameterListForGeneration mActualParameterList
#  private let @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationResult
#
#  //······························································································
#
#  override method appendSyntaxSignature
#    ?let @string unused inPosfix
#    ?!@semanticInstructionListForGeneration unused ioInstructionListForGeneration
#  {
##    ioInstructionListForGeneration += !@SeparatorStringInstructionForGeneration {
##      !self.mInstructionLocation
##      !self.mNonterminalName
##      !inPosfix
##      !@actualParameterListForGeneration ()
##      !@grammarInstructionSyntaxDirectedTranslationResultNone.new
##    }
#  }
#
#  //······························································································
#
#  override getter compareInstructionSyntaxSignature
#    ?let @semanticInstructionForGeneration inTestedInstruction
#    ->@bool {
#    if let si = inTestedInstruction as @SeparatorStringInstructionForGeneration then
#      result = self.mNonterminalName == si.mNonterminalName
#      if not result then
#        error si.mInstructionLocation
#        :"syntax signature error; the expected syntax instruction here is the '<" + self.mNonterminalName + ">' nonterminal invocation"
#      end
#    elsif let si = inTestedInstruction as @syntaxInstructionForGeneration then
#      error si.mInstructionLocation
#        :"syntax signature error; the expected syntax instruction here is the '<" + self.mNonterminalName + ">' nonterminal invocation"
#      result = false
#    else
#      error self.mInstructionLocation : "internal error"
#      result = false
#    end
#    if not result then
#      error self.mInstructionLocation
#      :"reference syntax instruction is here"
#    end
#  }
#
#  //······························································································
#
#  override method generateInstruction
#    ?!@stringset ioInclusionSet
#    ?!@uint ioTemporaryVariableIndex
#    ?!@stringset ioUnusedVariableCppNameSet
#    ?let @bool inGenerateSyntaxDirectedTranslationString
#    ?!@string ioGeneratedCode
#  {
#  //--- Parameters
#    var parameterCppNameList = @stringlist ()
#    var jokerParametersToReleaseList = @stringlist ()
#    var inputVariableList = @stringlist ()
#    for (mActualParameter) in self.mActualParameterList do
#      [mActualParameter generateActualParameter
#        !?ioInclusionSet
#        !?ioTemporaryVariableIndex
#        !?ioGeneratedCode
#        !?jokerParametersToReleaseList
#        !?inputVariableList
#        !?ioUnusedVariableCppNameSet
#        ?let @string parameterCppName
#      ]
#      parameterCppNameList += !parameterCppName
#    end
#  //--- Generate method call
#    let sdtResultVarName = "syntaxDirectedTranslationResult_" + [self.mInstructionLocation locationIndex]
#    if inGenerateSyntaxDirectedTranslationString then
#      ioGeneratedCode += "String " + sdtResultVarName + " ;\n"
#    end
#    ioGeneratedCode += "nt_" + [self.mNonterminalName identifierRepresentation] + "_" + [self.mLabelName identifierRepresentation] + " ("
#    for (mValue) in parameterCppNameList do
#      ioGeneratedCode += mValue + ", "
#    end
#    if inGenerateSyntaxDirectedTranslationString then
#      ioGeneratedCode += sdtResultVarName + ", "
#    end
#    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
#    ioGeneratedCode +=  compilerCppName () + ") ;\n"
#    [self.mGrammarInstructionSyntaxDirectedTranslationResult generateCode
#      !inGenerateSyntaxDirectedTranslationString
#      !sdtResultVarName
#      !?ioUnusedVariableCppNameSet
#      !?ioGeneratedCode
#    ]
#  //--- Release temporary variables
#    for (mValue) in jokerParametersToReleaseList do
#      ioGeneratedCode += mValue + ".drop () ; // Release temporary input variables (joker in source)\n"
#    end
#  }
#
#  //······························································································
#
#}

//————————————————————————————————————————————————————————————————————————————————————————————————
