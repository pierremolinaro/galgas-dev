#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                                                                                                *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @sortedListSortDescriptorListAST {
  @lstring mSortedAttributeName
  @bool mAscending
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @sortedListDeclarationAST : @semanticDeclarationAST {
  @lstring mSortedListTypeName
  @propertyInCollectionListAST mPropertyList
  @sortedListSortDescriptorListAST mSortDescriptorList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                                                                                             *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration>
    ?!@galgas3DeclarationAST ioDeclarations
  {
    $sortedlist$
    $@type$ ?let sortedListTypeName indexing sortedListDefinition, structDefinition "-element"
    ${$
    @propertyInCollectionListAST attributeList = {}
    repeat
    while
      <property_declaration> !? attributeList
    while
      $;$
    end
    $}$
    ${$
    @sortedListSortDescriptorListAST sortDescriptorList = {}
    repeat
      <sortedlist_sort_descriptor> !? sortDescriptorList
    while
      $,$
    end
    $}$
    ioDeclarations.mDeclarationList += !@sortedListDeclarationAST.new {
      !false # Is not predefined
      !sortedListTypeName
      !attributeList
      !sortDescriptorList
    }
  }

  #·····················································································································

  rule <sortedlist_sort_descriptor> ?!@sortedListSortDescriptorListAST ioSortedListSortDescriptorList {
    $identifier$ ?var  @lstring mSortedAttributeName
    @bool mAscending
    select
      $<$
      mAscending = true
    or
      $>$
      mAscending = false
    end
    ioSortedListSortDescriptorList += !mSortedAttributeName !mAscending
  }

  #·····················································································································
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sortedListDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mSortedListTypeName ![self.mSortedListTypeName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for () in self.mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring.new {!"@" + mPropertyTypeName ![mPropertyTypeName location]}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                                                                                                   *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sortedListDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList {
  @propertyInCollectionListAST structAttributeList = {}
  for () in self.mPropertyList do
    structAttributeList +=
      !mPropertyTypeName
      !mPropertyName
      !true
      !{}
  end
  ioSemanticDeclarationList += !@structDeclarationAST.new {
    !self.mIsPredefined
    !@lstring.new {!self.mSortedListTypeName.string + elementTypeNameSuffix () !self.mSortedListTypeName.location}
    !structAttributeList
    !""}
}

#·······················································································································

override method @sortedListDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
  let optionalMethodMap = @optionalMethodMap {}
#--- Type index
  [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mSortedListTypeName ?let listTypeIndex]
#--- Element type index
  [@unifiedTypeMap-entry makeEntry
    !?ioSemanticContext.mTypeMap
    !@lstring.new {!self.mSortedListTypeName.string + elementTypeNameSuffix () !self.mSortedListTypeName.location}
    ?let @unifiedTypeMap-entry listElementTypeIndex
  ]
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor = {}
  @functionSignature constructorAttributeTypeList = {}
  @formalParameterSignature setterFormalArgumentList = {}
  @typedPropertyList typedAttributeList = {}
  for () in self.mPropertyList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    let hasGetter = true
    let hasSetter = true
    let hasSelector = false
    typedAttributeList += !attributeTypeIndex !mPropertyName !hasSetter !hasGetter !hasSelector
    enumerationDescriptor += !attributeTypeIndex !mPropertyName.string
    constructorAttributeTypeList += !["" nowhere] !attributeTypeIndex !mPropertyName.string
    setterFormalArgumentList += !["" nowhere] !attributeTypeIndex !@formalArgumentPassingModeAST.argumentOut !mPropertyName.string
  end
#--- Constructors
  @constructorMap constructorMap = {}
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioSemanticContext.mTypeMap
    !name:"emptySortedList"
    !resultTypeName:[self.mSortedListTypeName string]
    !hasLexiqueArg:false
  )
  [!?constructorMap insertKey
    !@lstring.new {!"sortedListWithValue" !@location.here}
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ]
#--- Readers
  commonGetterMapForAllTypes ( !?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"length"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
#--- Modifiers
  @setterMap setterMap = {}
  [!?setterMap insertOrReplace
    !@lstring.new {!"popGreatest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  [!?setterMap insertOrReplace
    !@lstring.new {!"popSmallest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
#--- Instance methods
  @instanceMethodMap instanceMethodMap = {}
  [!?instanceMethodMap insertKey
    !@lstring.new {!"greatest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  [!?instanceMethodMap insertKey
    !@lstring.new {!"smallest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mSortedListTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mSortedListTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-entry.null
    !@typeKindEnum. sortedListType
    !true # Support collection value
    !typedAttributeList
    !{}
    !{}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !optionalMethodMap
    !enumerationDescriptor
    !.doNotGenererateObjectCompare | .plusEqualOperatorWithExpression
    !constructorAttributeTypeList
    !{}
    !{}
    !{}
    !{}
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !"emptySortedList" # Default constructor
    !"-sortedlist-" + [self.mSortedListTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sortedListDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let sortedListNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mSortedListTypeName)
  [!?ioUsefulEntitiesGraph addNode !sortedListNameForUsefulness !sortedListNameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!self.mSortedListTypeName.string + "-element" !self.mSortedListTypeName})
  [!?ioUsefulEntitiesGraph addEdge !sortedListNameForUsefulness !elementTypeNameForUsefulness]
#--- Attribute
  var typedAttributeList =@typedPropertyList {}
  @propertyIndexMap attributeMap = {}
  for () in self.mPropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mPropertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !sortedListNameForUsefulness !propertyTypeNameForUsefulness]
    let t = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !mPropertyTypeName}
    let hasSetter = true
    let hasGetter = true
    let hasSelector = true
    typedAttributeList +=
      !t
      !mPropertyName
      !hasSetter
      !hasGetter
      !hasSelector
    [!?attributeMap insertKey !mPropertyName !t]
  end
#--- Sort descriptor
  @stringset attributesUsedForSorting = {}
  @sortDescriptorListForGeneration sortDescriptorList = {}
  for () in self.mSortDescriptorList do
    [attributeMap searchKey !mSortedAttributeName ?let @unifiedTypeMap-entry type]
    sortDescriptorList += !type ![mSortedAttributeName string] !mAscending
    if [attributesUsedForSorting hasKey ![mSortedAttributeName string]] then
      error mSortedAttributeName : "the '" + mSortedAttributeName + "' is already used for sorting"
    end
    attributesUsedForSorting += ![mSortedAttributeName string]
  end
#--- Generate type
  ioSemanticDeclarationListForGeneration +=
    !"sorted list " + self.mSortedListTypeName
    !@sortedListTypeForGeneration.new {
      !.searchKey {!inSemanticContext.mTypeMap !self.mSortedListTypeName}
      !.searchKey {!inSemanticContext.mTypeMap !.new {!self.mSortedListTypeName.string + elementTypeNameSuffix () !self.mSortedListTypeName}}
      !typedAttributeList
      !sortDescriptorList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @sortDescriptorListForGeneration {
  @unifiedTypeMap-entry mAttributeTypeIndex
  @string mAttributeName
  @bool mAscendingOrder
}

#·······················································································································

class @sortedListTypeForGeneration : @semanticTypeForGeneration {
  @unifiedTypeMap-entry mListElementTypeIndex
  @typedPropertyList mTypedAttributeList
  @sortDescriptorListForGeneration mSortDescriptorList
}

#·······················································································································

filewrapper sortedListGenerationTemplate in "../generation_templates/type_generation" {
}{
}{
  template sortedlistTypeHeader1 "GALGAS_sortedlist.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST

  template sortedlistTypeSpecificImplementation "GALGAS_sortedlist.cpp.galgasTemplate"
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@sortDescriptorListForGeneration SORT_ATTRIBUTE_LIST
}

#·······················································································································

override method @sortedListTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  outHeader = [filewrapper sortedListGenerationTemplate.sortedlistTypeHeader1
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedAttributeList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mSelfTypeEntry  mIsConcrete]
    ![self.mSelfTypeEntry  mConstructorMap]
    ![self.mSelfTypeEntry  mGetterMap]
    ![self.mSelfTypeEntry  mSetterMap]
    ![self.mSelfTypeEntry  mInstanceMethodMap]
    ![self.mSelfTypeEntry  mClassMethodMap]
    ![self.mSelfTypeEntry  mOptionalMethodMap]
    ![self.mSelfTypeEntry  mEnumerationDescriptor]
    ![self.mSelfTypeEntry  mHandledOperatorFlags]
    ![self.mSelfTypeEntry  mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry  mTypeForEnumeratedElement]
  ]
 }

#·······················································································································

override method @sortedListTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  for (t 4*) in self.mTypedAttributeList do
    [t addHeaderFileName !?ioInclusionSet]
  end
  [self.mListElementTypeIndex addHeaderFileName !?ioInclusionSet]
  [self.mSelfTypeEntry  addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper sortedListGenerationTemplate.sortedlistTypeSpecificImplementation
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedAttributeList
    !self.mSortDescriptorList
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

