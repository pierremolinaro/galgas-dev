#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @sortedListSortDescriptorListAST {
  public let @lstring mSortedAttributeName
  public let @bool mAscending
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @sortedListDeclarationAST : @semanticDeclarationAST {
  private let @lstring mSortedListTypeName
  private let @propertyInCollectionListAST mPropertyList
  private let @sortedListSortDescriptorListAST mSortDescriptorList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·················································································································

  rule <declaration_ggs3>
    ?!@galgasDeclarationAST ioDeclarations
  {
    $sortedlist$
    $@type$ ?let sortedListTypeName indexing sortedListDefinition, structDefinition "-element"
    ${$
    var @propertyInCollectionListAST attributeList = {}
    repeat
    while
      <property_declaration_ggs3> !? attributeList
    end
    $}$
    ${$
    var @sortedListSortDescriptorListAST sortDescriptorList = {}
    repeat
      <sortedlist_sort_descriptor> !? sortDescriptorList
    while
      $,$
    end
    $}$
    ioDeclarations.mDeclarationList += !@sortedListDeclarationAST.new {
      !isPredefined: false # Is not predefined
      !sortedListTypeName
      !attributeList
      !sortDescriptorList
    }
  }

  #·················································································································

  rule <sortedlist_sort_descriptor> ?!@sortedListSortDescriptorListAST ioSortedListSortDescriptorList {
    $identifier$ ?let @lstring mSortedAttributeName
    let @bool mAscending
    select
      $<$
      mAscending = true
    or
      $>$
      mAscending = false
    end
    ioSortedListSortDescriptorList += !mSortedAttributeName !mAscending
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations
                     ?!@stringset ioUserImplicitDeclaredTypeSet {
    $sortedlist$
    $@type$ ?let sortedListTypeName indexing sortedListDefinition, structDefinition "-element"
    ${$
    var @propertyInCollectionListAST attributeList = {}
    repeat
    while
      <property_declaration> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet !? attributeList
    end
    $}$
    ${$
    var @sortedListSortDescriptorListAST sortDescriptorList = {}
    repeat
      <sortedlist_sort_descriptor> !? sortDescriptorList
    while
      $,$
    end
    $}$
    ioDeclarations.mDeclarationList += !@sortedListDeclarationAST.new {
      !isPredefined: false # Is not predefined
      !sortedListTypeName
      !attributeList
      !sortDescriptorList
    }
  }

  #·················································································································

  rule <sortedlist_sort_descriptor> ?!@sortedListSortDescriptorListAST ioSortedListSortDescriptorList {
    $identifier$ ?let @lstring mSortedAttributeName
    let @bool mAscending
    select
      $<$
      mAscending = true
    or
      $>$
      mAscending = false
    end
    ioSortedListSortDescriptorList += !mSortedAttributeName !mAscending
  }

  #·················································································································
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sortedListDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mSortedListTypeName !self.mSortedListTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for (* propertyTypeName 4*) in self.mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring.new {!"@" + propertyTypeName !propertyTypeName.location}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sortedListDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList {
  var @propertyInCollectionListAST structAttributeList = {}
  for (isConstant qualifiedTypeAST mPropertyName * hasSelector initExpression) in self.mPropertyList do
    structAttributeList +=
      !isConstant: isConstant 
      !qualifiedTypeAST
      !mPropertyName
      !.publicAccess
      !selector: hasSelector
      !initExpression
  end
  ioSemanticDeclarationList += !@structDeclarationAST.new {
    !isPredefined: self.isPredefined
    !@lstring.new {!self.mSortedListTypeName.string + elementTypeNameSuffix () !self.mSortedListTypeName.location}
    !structAttributeList
    !""
  }
}

#·······················································································································

override method @sortedListDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
  let optionalMethodMap = @optionalMethodMap {}
#--- Type index
  [!?ioTypeMap makeEntry  !self.mSortedListTypeName ?let listTypeIndex]
#--- Element type index
  [!?ioTypeMap makeEntry
    !@lstring.new {!self.mSortedListTypeName.string + elementTypeNameSuffix () !self.mSortedListTypeName.location}
    ?let @unifiedTypeMapEntry listElementTypeIndex
  ]
#--- Enumeration description
  var @enumerationDescriptorList enumerationDescriptor = {}
  var @functionSignature constructorAttributeTypeList = {}
  var @formalParameterSignature setterFormalOutputArgumentList = {}
  var @formalParameterSignature setterFormalInputArgumentList = {}
  var @typedPropertyList typedAttributeList = {}
  for (* propertyTypeName mPropertyName 3*) in self.mPropertyList do
    [!?ioTypeMap makeEntry !propertyTypeName ?let attributeTypeIndex]
    let hasSelector = false
    typedAttributeList += !attributeTypeIndex !mPropertyName !hasSetter: true !hasSelector: hasSelector
    enumerationDescriptor += !attributeTypeIndex !mPropertyName.string
    constructorAttributeTypeList += !["" nowhere] !attributeTypeIndex !mPropertyName.string
    setterFormalOutputArgumentList += !["" nowhere] !attributeTypeIndex !.argumentOut !mPropertyName.string
    setterFormalInputArgumentList += !["" nowhere] !attributeTypeIndex !.argumentIn !mPropertyName.string
  end
#--- Constructors
  var @constructorMap constructorMap = {}
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioTypeMap
    !name:"emptySortedList"
    !resultTypeName:self.mSortedListTypeName.string
    !hasLexiqueArg:false
  )
  [!?constructorMap insertKey
    !@lstring.new {!"sortedListWithValue" !@location.here}
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ]
#--- Readers
  commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"count"
    !obsoleteName: "length"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
#--- Setters
  var @setterMap setterMap = {}
  [!?setterMap insertOrReplace
    !@lstring.new {!"popGreatest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalOutputArgumentList
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  [!?setterMap insertOrReplace
    !@lstring.new {!"popSmallest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalOutputArgumentList
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  [!?setterMap insertOrReplace
    !@lstring.new {!"insert" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalInputArgumentList
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
#--- Instance methods
  var @instanceMethodMap instanceMethodMap = {}
  [!?instanceMethodMap insertKey
    !@lstring.new {!"greatest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalOutputArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  [!?instanceMethodMap insertKey
    !@lstring.new {!"smallest" !@location.here}
    !@methodKind.definedAsMember
    !setterFormalOutputArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mSortedListTypeName
    !isClass: false
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Enter in type map
  let typeDefinition = @unifiedTypeDefinition.new {
    !self.mSortedListTypeName
    !self.isPredefined
    !true # Concrete Type
    !@unifiedTypeMapEntry.null
    !@typeKindEnum. sortedListType
    !true # Support collection value
    !typedAttributeList
    !{}
    !{}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !optionalMethodMap
    !enumerationDescriptor
    !.doNotGenererateObjectCompare | .plusEqualOperatorWithExpression
    !constructorAttributeTypeList
    !{}
    !{}
    !{}
    !{}
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !defaultConstructorName: "emptySortedList" # Default constructor
    !"-sortedlist-" + [self.mSortedListTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  }
  [!?ioTypeMap insertType !typeDefinition.mTypeName !typeDefinition]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @sortedListDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let sortedListNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mSortedListTypeName)
  [!?ioUsefulEntitiesGraph addNode !sortedListNameForUsefulness !sortedListNameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!self.mSortedListTypeName.string + "-element" !self.mSortedListTypeName})
  [!?ioUsefulEntitiesGraph addEdge !sortedListNameForUsefulness !elementTypeNameForUsefulness]
#--- Attribute
  var typedAttributeList = @typedPropertyList {}
  var @propertyIndexMap attributeMap = {}
  for (* propertyTypeName mPropertyName 3*) in self.mPropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!propertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !sortedListNameForUsefulness !propertyTypeNameForUsefulness]
    let t = [ioTypeMap typeMapEntryForLKey !propertyTypeName]
    let hasSelector = true
    typedAttributeList +=
      !t
      !mPropertyName
      !hasSetter: true
      !hasSelector: hasSelector
    [!?attributeMap insertKey !mPropertyName !t]
  end
#--- Sort descriptor
  var @stringset attributesUsedForSorting = {}
  var @sortDescriptorListForGeneration sortDescriptorList = {}
  for (mSortedAttributeName mAscending) in self.mSortDescriptorList do
    [attributeMap searchKey !mSortedAttributeName ?let @unifiedTypeMapEntry type]
    sortDescriptorList += !type !mSortedAttributeName.string !mAscending
    if [attributesUsedForSorting hasKey !mSortedAttributeName.string] then
      error mSortedAttributeName : "the '" + mSortedAttributeName + "' is already used for sorting"
    end
    attributesUsedForSorting += !mSortedAttributeName.string
  end
#--- Generate type
  ioSemanticDeclarationListForGeneration +=
    !infoMessage: "sorted list " + self.mSortedListTypeName
    !@sortedListTypeForGeneration.new {
      ![ioTypeMap typeMapEntryForLKey !self.mSortedListTypeName]
      ![ioTypeMap typeMapEntryForLKey !.new {!self.mSortedListTypeName.string + elementTypeNameSuffix () !self.mSortedListTypeName}]
      !typedAttributeList
      !sortDescriptorList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @sortDescriptorListForGeneration {
  public let @unifiedTypeMapEntry mAttributeTypeIndex
  public let @string mAttributeName
  public let @bool mAscendingOrder
}

#·······················································································································

refclass @sortedListTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry mListElementTypeIndex
  private let @typedPropertyList mTypedAttributeList
  private let @sortDescriptorListForGeneration mSortDescriptorList
}

#·······················································································································

filewrapper sortedListGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template sortedlistTypeHeader1 "GALGAS_sortedlist.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST

  template sortedlistTypeSpecificImplementation "GALGAS_sortedlist.cpp.galgasTemplate"
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@sortDescriptorListForGeneration SORT_ATTRIBUTE_LIST
}

#·······················································································································

override method @sortedListTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper sortedListGenerationTemplate.sortedlistTypeHeader1
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry  identifierRepresentation]
    !selfTypedefinition.mIsConcrete
    !selfTypedefinition.mConstructorMap
    !selfTypedefinition.mGetterMap
    !selfTypedefinition.mSetterMap
    !selfTypedefinition.mInstanceMethodMap
    !selfTypedefinition.mClassMethodMap
    !selfTypedefinition.mOptionalMethodMap
    !selfTypedefinition.mEnumerationDescriptor
    !selfTypedefinition.mHandledOperatorFlags
    !selfTypedefinition.mAddAssignOperatorArguments
    !selfTypedefinition.mTypeForEnumeratedElement
  ]
 }

#·······················································································································

override method @sortedListTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  for (t 3*) in self.mTypedAttributeList do
    [t addHeaderFileName !?ioInclusionSet]
  end
  [self.mListElementTypeIndex addHeaderFileName !?ioInclusionSet]
  [self.mSelfTypeEntry  addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper sortedListGenerationTemplate.sortedlistTypeSpecificImplementation
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedAttributeList
    !self.mSortDescriptorList
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

