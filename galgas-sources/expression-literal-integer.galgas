#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#refclass @literalUIntExpressionAST : @semanticExpressionAST {
#  private let @luint mValue
#}

#·····················································································································

#refclass @literalUInt64ExpressionAST : @semanticExpressionAST {
#  private let @luint64 mValue
#}

#·····················································································································

#refclass @literalSIntExpressionAST : @semanticExpressionAST {
#  private let @lsint mValue
#}

#·····················································································································

#refclass @literalSInt64ExpressionAST : @semanticExpressionAST {
#  private let @lsint64 mValue
#}

#·····················································································································

refclass @literalBigIntExpressionAST : @semanticExpressionAST {
  private let @lbigint mValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·················································································································

  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    $literalInt$ ?let @lbigint literalInt
    outExpression = @literalBigIntExpressionAST.new {!literalInt}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·················································································································

  rule <primary> !@semanticExpressionAST outExpression {
    $literalInt$ ?let @lbigint literalInt
    outExpression = @literalBigIntExpressionAST.new {!literalInt}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @literalUInt64ExpressionAST enterExpressionInSemanticContext
#  ?!@unifiedTypeMap unused ioTypeMap
#{
#}

#·····················································································································

#override method @literalUInt64ExpressionAST analyzeSemanticExpression
#  ?let @lstring unused inUsefulnessCallerEntityName
#  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
#  ?inferenceType: let @unifiedTypeMapEntry unused inType
#  ?let @analysisContext inAnalysisContext
#  ?!@localVarManager unused ioVariableMap
#  !@semanticExpressionForGeneration outExpression
#{
#  outExpression = @literalUInt64ExpressionForGeneration.new {
#    !inAnalysisContext.mPredefinedTypes.mUInt64Type
#    !self.mValue.location
#    !self.mValue.uint64
#  }
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @literalSIntExpressionAST enterExpressionInSemanticContext
#  ?!@unifiedTypeMap unused ioTypeMap
#{
#}

#·····················································································································

#override method @literalSIntExpressionAST analyzeSemanticExpression
#  ?let @lstring unused inUsefulnessCallerEntityName
#  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
#  ?inferenceType: let @unifiedTypeMapEntry unused inType
#  ?let @analysisContext inAnalysisContext
#  ?!@localVarManager unused ioVariableMap
#  !@semanticExpressionForGeneration outExpression
#{
#  outExpression = @literalSIntExpressionForGeneration.new {!inAnalysisContext.mPredefinedTypes.mSIntType !self.mValue.location !self.mValue.sint}
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @literalSInt64ExpressionAST enterExpressionInSemanticContext
#  ?!@unifiedTypeMap unused ioTypeMap
#{
#}

#·····················································································································

#override method @literalSInt64ExpressionAST analyzeSemanticExpression
#  ?let @lstring unused inUsefulnessCallerEntityName
#  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
#  ?inferenceType: let @unifiedTypeMapEntry unused inType
#  ?let @analysisContext inAnalysisContext
#  ?!@localVarManager unused ioVariableMap
#  !@semanticExpressionForGeneration outExpression
#{
#  outExpression = @literalSInt64ExpressionForGeneration.new {
#    !inAnalysisContext.mPredefinedTypes.mSInt64Type
#    !self.mValue.location
#    !self.mValue.sint64
#  }
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBigIntExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalBigIntExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  outExpression = @literalBigIntExpressionForGeneration.new {
    !inAnalysisContext.mPredefinedTypes.mBigIntType
    !self.mValue.location
    !self.mValue.bigint
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalUIntExpressionForGeneration : @semanticExpressionForGeneration {
  public let @uint mValue
}

#·····················································································································

override method @literalUIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "GALGAS_uint (uint32_t (" + [self.mValue string]+ "U))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalUInt64ExpressionForGeneration : @semanticExpressionForGeneration {
  private let @uint64 mValue
}

#·····················································································································

override method @literalUInt64ExpressionForGeneration generateExpression
                                                      ?!@string unused ioGeneratedCode
                                                      ?!@stringset unused ioInclusionSet
                                                      ?!@uint unused ioTemporaryVariableIndex
                                                      ?!@stringset unused ioUnusedVariableCppNameSet
                                                      !@string outCppExpression {
  outCppExpression = "GALGAS_uint_36__34_ (uint64_t (" + [self.mValue string]+ "ULL))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalSIntExpressionForGeneration : @semanticExpressionForGeneration {
  private let @sint mValue
}

#·····················································································································

override method @literalSIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "GALGAS_sint (int32_t (" + [self.mValue string]+ "L))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalSInt64ExpressionForGeneration : @semanticExpressionForGeneration {
  private let @sint64 mValue
}

#·····················································································································

override method @literalSInt64ExpressionForGeneration generateExpression
                                                          ?!@string unused ioGeneratedCode
                                                          ?!@stringset unused ioInclusionSet
                                                          ?!@uint unused ioTemporaryVariableIndex
                                                          ?!@stringset unused ioUnusedVariableCppNameSet
                                                          !@string outCppExpression {
  outCppExpression = "GALGAS_sint_36__34_ (int64_t (" + [self.mValue string]+ "LL))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalBigIntExpressionForGeneration : @semanticExpressionForGeneration {
  public let @bigint mValue
}

#·····················································································································

override method @literalBigIntExpressionForGeneration generateExpression
                                                          ?!@string unused ioGeneratedCode
                                                          ?!@stringset unused ioInclusionSet
                                                          ?!@uint unused ioTemporaryVariableIndex
                                                          ?!@stringset ioUnusedVariableCppNameSet
                                                          !@string outCppExpression {
  outCppExpression = "GALGAS_bigint (\"" + [self.mValue string]+ "\", "
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression += compilerCppName ()
  outCppExpression += " " + [self.mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
