#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#refclass @literalUIntExpressionAST : @semanticExpressionAST {
#  private let @luint mValue
#}

#·····················································································································

refclass @literalUInt64ExpressionAST : @semanticExpressionAST {
  private let @luint64 mValue
}

#·····················································································································

refclass @literalSIntExpressionAST : @semanticExpressionAST {
  private let @lsint mValue
}

#·····················································································································

refclass @literalSInt64ExpressionAST : @semanticExpressionAST {
  private let @lsint64 mValue
}

#·····················································································································

refclass @literalBigIntExpressionAST : @semanticExpressionAST {
  private let @lbigint mValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $uint32$ ?let @lbigint literalInt
    outExpression = @literalBigIntExpressionAST.new {!literalInt}

#    $uint32$ ?let @luint literalInt
#    outExpression = @literalUIntExpressionAST.new {!literalInt}
#    outExpression = @literalBigIntExpressionAST.new {!.new {![literalInt.uint bigint] !literalInt.location}}
 }

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $sint32_S$ ?let @lsint literalInt
    outExpression = @literalSIntExpressionAST.new {!literalInt}
    warning literalInt : "literal integer S suffix is obsolete: consider removing it"
  }

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $uint64_L$ ?let @luint64 literalInt
    outExpression = @literalUInt64ExpressionAST.new {!literalInt}
  }

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $sint64_LS$ ?let @lsint64 literalInt
    outExpression = @literalSInt64ExpressionAST.new {!literalInt}
  }

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $bigint_G$ ?let @lbigint literalInt
    outExpression = @literalBigIntExpressionAST.new {!literalInt}
    warning literalInt : "literal integer G suffix is obsolete: consider removing it"
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $uint32$ ?let @lbigint literalInt
    outExpression = @literalBigIntExpressionAST.new {!literalInt}

#    $uint32$ ?let @luint literalInt
#    outExpression = @literalUIntExpressionAST.new {!literalInt}
#    outExpression = @literalBigIntExpressionAST.new {!.new {![literalInt.uint bigint] !literalInt.location}}
  }

  #·····················································································································
  
#  rule <primary> !@semanticExpressionAST outExpression {
#    $sint32_S$ ?let @lsint literalInt
#    outExpression = @literalSIntExpressionAST.new {!literalInt}
#  }

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $uint64_L$ ?let @luint64 literalInt
    outExpression = @literalUInt64ExpressionAST.new {!literalInt}
  }

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $sint64_LS$ ?let @lsint64 literalInt
    outExpression = @literalSInt64ExpressionAST.new {!literalInt}
  }

  #·····················································································································
  
#  rule <primary> !@semanticExpressionAST outExpression {
#    $bigint_G$ ?let @lbigint literalInt
#    outExpression = @literalBigIntExpressionAST.new {!literalInt}
#    warning literalInt : "literal integer G suffix is obsolete: consider remving it"
#  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#override method @literalUIntExpressionAST enterExpressionInSemanticContext
#  ?!@unifiedTypeMap unused ioTypeMap
#{
#}

#·····················································································································

#override method @literalUIntExpressionAST analyzeSemanticExpression
#  ?let @lstring unused inUsefulnessCallerEntityName
#  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
#  ?inferenceType: let @unifiedTypeMapEntry unused inType
#  ?let @analysisContext inAnalysisContext
#  ?!@localVarManager unused ioVariableMap
#  !@semanticExpressionForGeneration outExpression
#{
#  outExpression = @literalUIntExpressionForGeneration.new {
#    !inAnalysisContext.mPredefinedTypes.mUIntType
#    !self.mValue # [mValue location]
#    !self.mValue # [mValue uint]
#  }
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalUInt64ExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalUInt64ExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  outExpression = @literalUInt64ExpressionForGeneration.new {
    !inAnalysisContext.mPredefinedTypes.mUInt64Type
    !self.mValue.location
    !self.mValue.uint64
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalSIntExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalSIntExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  outExpression = @literalSIntExpressionForGeneration.new {!inAnalysisContext.mPredefinedTypes.mSIntType !self.mValue.location !self.mValue.sint}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalSInt64ExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalSInt64ExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  outExpression = @literalSInt64ExpressionForGeneration.new {
    !inAnalysisContext.mPredefinedTypes.mSInt64Type
    !self.mValue.location
    !self.mValue.sint64
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalBigIntExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalBigIntExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  outExpression = @literalBigIntExpressionForGeneration.new {
    !inAnalysisContext.mPredefinedTypes.mBigIntType
    !self.mValue.location
    !self.mValue.bigint
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalUIntExpressionForGeneration : @semanticExpressionForGeneration {
  public let @uint mValue
}

#·····················································································································

override method @literalUIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "GALGAS_uint (uint32_t (" + [self.mValue string]+ "U))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalUInt64ExpressionForGeneration : @semanticExpressionForGeneration {
  private let @uint64 mValue
}

#·····················································································································

override method @literalUInt64ExpressionForGeneration generateExpression
                                                      ?!@string unused ioGeneratedCode
                                                      ?!@stringset unused ioInclusionSet
                                                      ?!@uint unused ioTemporaryVariableIndex
                                                      ?!@stringset unused ioUnusedVariableCppNameSet
                                                      !@string outCppExpression {
  outCppExpression = "GALGAS_uint_36__34_ (uint64_t (" + [self.mValue string]+ "ULL))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalSIntExpressionForGeneration : @semanticExpressionForGeneration {
  private let @sint mValue
}

#·····················································································································

override method @literalSIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "GALGAS_sint (int32_t (" + [self.mValue string]+ "L))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalSInt64ExpressionForGeneration : @semanticExpressionForGeneration {
  private let @sint64 mValue
}

#·····················································································································

override method @literalSInt64ExpressionForGeneration generateExpression
                                                          ?!@string unused ioGeneratedCode
                                                          ?!@stringset unused ioInclusionSet
                                                          ?!@uint unused ioTemporaryVariableIndex
                                                          ?!@stringset unused ioUnusedVariableCppNameSet
                                                          !@string outCppExpression {
  outCppExpression = "GALGAS_sint_36__34_ (int64_t (" + [self.mValue string]+ "LL))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalBigIntExpressionForGeneration : @semanticExpressionForGeneration {
  public let @bigint mValue
}

#·····················································································································

override method @literalBigIntExpressionForGeneration generateExpression
                                                          ?!@string unused ioGeneratedCode
                                                          ?!@stringset unused ioInclusionSet
                                                          ?!@uint unused ioTemporaryVariableIndex
                                                          ?!@stringset ioUnusedVariableCppNameSet
                                                          !@string outCppExpression {
  outCppExpression = "GALGAS_bigint (\"" + [self.mValue string]+ "\", "
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression += compilerCppName ()
  outCppExpression += " " + [self.mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
