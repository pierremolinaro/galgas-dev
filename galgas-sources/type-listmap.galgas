#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @listmapDeclarationAST : @semanticDeclarationAST {
  private let @lstring mListmapTypeName
  private let @lstring mAssociatedListTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration>
   ?!@galgas3DeclarationAST ioDeclarations {
    $listmap$
    $@type$ ?let @lstring mListmapTypeName indexing listmapDefinition
    $($
    $@type$ ?let @lstring mAssociatedListTypeName
    $)$
    ioDeclarations.mDeclarationList += !@listmapDeclarationAST.new {
      !false # Is not predefined
      !mListmapTypeName
      !mAssociatedListTypeName}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration>  ?!@galgas3DeclarationAST ioDeclarations {
    $listmap$
    $@type$ ?let @lstring mListmapTypeName indexing listmapDefinition
    $($
    $@type$ ?let @lstring mAssociatedListTypeName
    $)$
    ioDeclarations.mDeclarationList += !@listmapDeclarationAST.new {
      !false # Is not predefined
      !mListmapTypeName
      !mAssociatedListTypeName}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ASSOCIATED ELEMENT                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList {
  var structAttributeList = @propertyInCollectionListAST {}
  structAttributeList +=
    !isConstant: false
    !["string" nowhere]
    !["key" nowhere]
    !true
    !{}
  structAttributeList +=
    !isConstant: false
    !self.mAssociatedListTypeName
    !["mList" nowhere]
    !true
    !{}
#---
  ioSemanticDeclarationList += !@structDeclarationAST.new {
    !self.mIsPredefined
    !@lstring.new {!self.mListmapTypeName.string + elementTypeNameSuffix () !self.mListmapTypeName.location}
    !structAttributeList
    !""
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mListmapTypeName !self.mListmapTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mAssociatedListTypeName !self.mAssociatedListTypeName.location}]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext {
#--- Check associated map is really a list
  [ioSemanticContext.mTypeMap searchType !self.mAssociatedListTypeName ?let associatedTypeDefinition]
  var @typedPropertyList listTypedAttributeList = associatedTypeDefinition.mAllTypedPropertyList
#  [ioSemanticContext.mTypeMap searchKey
#    !self.mAssociatedListTypeName
#    ?3*
#    ?let @typeKindEnum typeKindEnum
#    ?*
#    ?var @typedPropertyList listTypedAttributeList
#    ?20*
#  ]
  if associatedTypeDefinition.mTypeKindEnum != @typeKindEnum.listType then
    error self.mAssociatedListTypeName : "the '@" + self.mAssociatedListTypeName + "' type should be a list type"
    listTypedAttributeList = @typedPropertyList {}
  end
#---
  var @constructorMap constructorMap ={}
  commonGetterMapForAllTypes (!?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  var @setterMap setterMap = {}
  var @instanceMethodMap instanceMethodMap = {}
#--- Associated map type index
  [!?ioSemanticContext.mTypeMap makeEntry  !self.mAssociatedListTypeName ?let associatedListTypeIndex]
#--- currentType type index
  [!?ioSemanticContext.mTypeMap makeEntryFromString !"string" ?let stringTypeIndex]
#--- Getters
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap 
    !getterName:"count"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"allKeys"
    !returnedTypeName:"stringset"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"keyList"
    !returnedTypeName:"stringlist"
    !hasCompilerArgument:false
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName: "listForKey"
    !"string"
    !"inKey"
    !returnedTypeName:self.mAssociatedListTypeName.string
    !hasCompilerArgument:false
  )
#--- Constructors
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioSemanticContext.mTypeMap
    !name:"emptyMap"
    !resultTypeName:self.mListmapTypeName.string
    !hasLexiqueArg:false
  )
#--- Enumerator description
  var enumeratorDescriptor = @enumerationDescriptorList {}
  enumeratorDescriptor += !stringTypeIndex !"key"
  enumeratorDescriptor += !associatedListTypeIndex !"mList"
#--- Add assign operator description
  var addAssignOperatorDescription = @functionSignature {}
  addAssignOperatorDescription += !["" nowhere] !stringTypeIndex !"inKey"
  for (mPropertyTypeEntry mPropertyName * *) in listTypedAttributeList do
    addAssignOperatorDescription += !["" nowhere] !mPropertyTypeEntry !mPropertyName.string
  end
#--- Add extensions
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mListmapTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Element type index
  [!?ioSemanticContext.mTypeMap makeEntry
    !@lstring.new {!self.mListmapTypeName.string + elementTypeNameSuffix () !self.mListmapTypeName.location}
    ?let @unifiedTypeMapEntry listElementTypeIndex
  ]
#--- Enter type in type map
  let typeDefinition = @unifiedTypeDefinition.new {
    !self.mListmapTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMapEntry.null
    !@typeKindEnum. arrayType
    !true # Support collection value
    !@typedPropertyList {}
    !{}
    !listTypedAttributeList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !enumeratorDescriptor
    !.doNotGenererateObjectCompare
    !addAssignOperatorDescription
    !{}
    !{}
    !@mapSearchMethodListAST {}
    !@mapSearchMethodListAST {}
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !"emptyMap" # Default constructor
    !"listmap-" + [self.mListmapTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  }
  [!?ioSemanticContext.mTypeMap insertType !typeDefinition]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mListmapTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let associatedTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mAssociatedListTypeName)
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !associatedTypeNameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!self.mListmapTypeName.string + "-element" !self.mListmapTypeName})
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
#--- Check associated list is actually a list
  [inSemanticContext.mTypeMap searchType !self.mAssociatedListTypeName ?let associatedTypeDefinition]
#  [inSemanticContext.mTypeMap searchKey
#    !self.mAssociatedListTypeName
#    ?3*
#    ?let @typeKindEnum typeKindEnum
#    ?*
#    ?let @typedPropertyList listTypeAttributeList
#    ?20*
#  ]
#---
  if associatedTypeDefinition.mTypeKindEnum != .listType then
    error self.mAssociatedListTypeName : "associated type should be a list type"
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"list map " + self.mListmapTypeName
    !@listmapTypeForGeneration.new {
      ![inSemanticContext.mTypeMap searchKey !self.mListmapTypeName]
      ![inSemanticContext.mTypeMap searchKey !self.mAssociatedListTypeName]
      !associatedTypeDefinition.mAllTypedPropertyList
      ![inSemanticContext.mTypeMap searchKey !@lstring.new {!self.mListmapTypeName.string + elementTypeNameSuffix () !self.mListmapTypeName.location}]
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @listmapTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry mAssociatedListTypeIndex
  private let @typedPropertyList mAssociatedListTypedAttributeList
  private let @unifiedTypeMapEntry mAssociatedListMapElementTypeIndex
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapTypeForGeneration appendDeclaration1
  ?!@stringset ioInclusionSet
  !@string outHeader {
  for (t 3*) in self.mAssociatedListTypedAttributeList do
    [t addHeaderFileName1 !?ioInclusionSet]
  end
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper typeGenerationTemplate.listmapTypeHeader1
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !selfTypedefinition.mIsConcrete
    !selfTypedefinition.mConstructorMap
    !selfTypedefinition.mGetterMap
    !selfTypedefinition.mSetterMap
    !selfTypedefinition.mInstanceMethodMap
    !selfTypedefinition.mClassMethodMap
    !selfTypedefinition.mOptionalMethodMap
    !selfTypedefinition.mEnumerationDescriptor
    !selfTypedefinition.mHandledOperatorFlags
    !selfTypedefinition.mAddAssignOperatorArguments
    !selfTypedefinition.mTypeForEnumeratedElement
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  [self.mAssociatedListMapElementTypeIndex addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper typeGenerationTemplate.listmapTypeSpecificImplementation
    ![self.mSelfTypeEntry identifierRepresentation]
    ![self.mAssociatedListTypeIndex identifierRepresentation]
    !self.mAssociatedListTypedAttributeList
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

