#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @listmapDeclarationAST : @semanticDeclarationAST {
  private let @lstring mListmapTypeName
  private let @lstring mAssociatedListTypeName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $listmap$
    $@type$ ?let @lstring mListmapTypeName indexing listmapDefinition
    $($
    <type_definition_ggs3> !?ioDeclarations ?let associatedListTypeName
    $)$
    ioDeclarations.mDeclarationList += !@listmapDeclarationAST {
      !isPredefined: false # Is not predefined
      !mListmapTypeName
      !associatedListTypeName
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $listmap$
    $@type$ ?let @lstring mListmapTypeName indexing listmapDefinition
    $($
    <type_definition> !?ioDeclarations ?let associatedListTypeName
    $)$
    ioDeclarations.mDeclarationList += !@listmapDeclarationAST {
      !isPredefined: false # Is not predefined
      !mListmapTypeName
      !associatedListTypeName
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   ASSOCIATED ELEMENT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList {
  var structAttributeList = @propertyInCollectionListAST §[]
  structAttributeList +=
    !isConstant: false
    !["string" nowhere]
    !["key" nowhere]
    !.publicAccess
    !hasSelector: false
    !initialization: .none
  structAttributeList +=
    !isConstant: false
    !self.mAssociatedListTypeName
    !["mList" nowhere]
    !.publicAccess
    !hasSelector: false
    !initialization: .none
#---
  ioSemanticDeclarationList += !@structDeclarationAST {
    !isPredefined: self.isPredefined
    !@lstring {!self.mListmapTypeName.string + elementTypeNameSuffix () !self.mListmapTypeName.location}
    !structAttributeList
    !""
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring {!"@" + self.mListmapTypeName !self.mListmapTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring {!"@" + self.mAssociatedListTypeName !self.mAssociatedListTypeName.location}]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionInitializerForBuildingContext inExtensionInitializerMapForBuildingContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext {
#--- Check associated map is really a list
  let associatedTypeDefinition = [ioTypeMap typeDefinition !self.mAssociatedListTypeName]
  var @typedPropertyList listTypedAttributeList = associatedTypeDefinition.allTypedPropertyList
  if associatedTypeDefinition.typeKind != @typeKindEnum.listType then
    error self.mAssociatedListTypeName : "the '@" + self.mAssociatedListTypeName + "' type should be a list type"
    listTypedAttributeList = @typedPropertyList §[]
  end
#---
  var @classFunctionMap classFunctionMap =§[]
  commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap )
  var @setterMap setterMap = §[]
  var @instanceMethodMap instanceMethodMap = §[]
#--- Associated map type index
  [!?ioTypeMap makeEntry  !self.mAssociatedListTypeName ?let associatedListTypeIndex]
#--- currentType type index
  [!?ioTypeMap makeEntryFromString !"string" ?let stringTypeIndex]
#--- Getters
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"count"
    !obsoleteName: ""
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"allKeys"
    !obsoleteName: ""
    !returnedTypeName:"stringset"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"keyList"
    !obsoleteName: ""
    !returnedTypeName:"stringlist"
    !hasCompilerArgument:false
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "listForKey"
    !argSelector: ""!argType: "string" !argName: "inKey"
    !returnedTypeName:self.mAssociatedListTypeName.string
    !hasCompilerArgument:false
  )
#--- Class functions
  enterClassFunctionWithoutArgument (
    !?classFunctionMap
    !?ioTypeMap
    !name:"emptyMap"
    !resultTypeName:self.mListmapTypeName.string
    !hasLexiqueArg:false
  )
#--- Enumerator description
  var enumeratorDescriptor = @enumerationDescriptorList §[]
  enumeratorDescriptor += !stringTypeIndex !"key"
  enumeratorDescriptor += !associatedListTypeIndex !"mList"
#--- Add assign operator description, insert setter
  var @formalParameterSignature insertSetterFormalArgumentList = §[]
  insertSetterFormalArgumentList +=
    !["" nowhere]
    !stringTypeIndex
    !.argumentConstantIn
    !"inKey"
  var addAssignOperatorDescription = @functionSignature §[]
  addAssignOperatorDescription += !["" nowhere] !stringTypeIndex !"inKey" !true
  for (mPropertyTypeEntry mPropertyName 3*) in listTypedAttributeList do
    addAssignOperatorDescription += !["" nowhere] !mPropertyTypeEntry !mPropertyName.string !true
   insertSetterFormalArgumentList +=
      !["" nowhere]
      !mPropertyTypeEntry
      !.argumentConstantIn
      !mPropertyName.string
  end
  [!?setterMap insertOrReplace
    !.init {!"insert" !self.mListmapTypeName.location}
    !@methodKind.definedAsMember
    !insertSetterFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
#--- Add extensions
  var @initializerMap initializerMap = §[]
  addExtensions (
    !inExtensionInitializerMapForBuildingContext
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mListmapTypeName
    !isClass: false
    !?initializerMap
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Element type index
  [!?ioTypeMap makeEntry
    !@lstring {!self.mListmapTypeName.string + elementTypeNameSuffix () !self.mListmapTypeName.location}
    ?let @unifiedTypeMapEntry listElementTypeIndex
  ]
#--- Enter type in type map
  let typeDefinition = @unifiedTypeDefinition {
    !typeName: self.mListmapTypeName
    !isPredefined: self.isPredefined
    !isConcrete: true # Concrete Type
    !superType: .null
    !typeKind: .listMapType
    !supportCollectionValue: true # Support collection value
    !allTypedPropertyList: §[]
    !propertyMap: §[]
    !currentTypedPropertyList: listTypedAttributeList
    !initializerMap: initializerMap
    !classFunctionMap: classFunctionMap
    !getterMap: getterMap
    !setterMap: setterMap
    !instanceMethodMap: instanceMethodMap
    !classMethodMap: §[]
    !optionalMethodMap: §[]
    !enumerationDescriptorList: enumeratorDescriptor
    !.doNotGenererateObjectCompare
    !addAssignOperatorDescription
    !@mapSearchMethodListAST §[]
    !@mapSearchMethodListAST §[]
    !generateHeaderInSeparateFile: false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !defaultConstructorName: "emptyMap" # Default constructor
    !"listmap-" + [self.mListmapTypeName fileNameRepresentation]
    !headerKind: .oneHeader
  }
  [!?ioTypeMap insertType !typeDefinition.typeName !typeDefinition]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mListmapTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let associatedTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mAssociatedListTypeName)
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !associatedTypeNameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.init{!self.mListmapTypeName.string + "-element" !self.mListmapTypeName})
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
#--- Check associated list is actually a list
  let associatedTypeDefinition = [ioTypeMap typeDefinition !self.mAssociatedListTypeName]
#  [ioTypeMap searchKey
#    !self.mAssociatedListTypeName
#    ?3*
#    ?let @typeKindEnum typeKindEnum
#    ?*
#    ?let @typedPropertyList listTypeAttributeList
#    ?20*
#  ]
#---
  if associatedTypeDefinition.typeKind != .listType then
    error self.mAssociatedListTypeName : "associated type should be a list type"
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !infoMessage: "list map " + self.mListmapTypeName
    !@listmapTypeForGeneration {
      ![ioTypeMap typeMapEntryForLKey !self.mListmapTypeName]
      ![ioTypeMap typeMapEntryForLKey !self.mAssociatedListTypeName]
      !associatedTypeDefinition.allTypedPropertyList
      ![ioTypeMap typeMapEntryForLKey !@lstring {!self.mListmapTypeName.string + elementTypeNameSuffix () !self.mListmapTypeName.location}]
    }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @listmapTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry mAssociatedListTypeIndex
  private let @typedPropertyList mAssociatedListTypedAttributeList
  private let @unifiedTypeMapEntry mAssociatedListMapElementTypeIndex
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapTypeForGeneration appendDeclaration1
  ?!@stringset ioInclusionSet
  !@string outHeader {
  for (t 4*) in self.mAssociatedListTypedAttributeList do
    [t addHeaderFileName1 !?ioInclusionSet]
  end
  let selfTypeDefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper typeGenerationTemplate.listmapTypeHeader1
    !selfTypeDefinition.typeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !selfTypeDefinition.typeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !selfTypeDefinition.isConcrete
    !selfTypeDefinition.initializerMap
    !selfTypeDefinition.classFunctionMap
    !selfTypeDefinition.getterMap
    !selfTypeDefinition.setterMap
    !selfTypeDefinition.instanceMethodMap
    !selfTypeDefinition.classMethodMap
    !selfTypeDefinition.optionalMethodMap
    !selfTypeDefinition.enumerationDescriptorList
    !selfTypeDefinition.mHandledOperatorFlags
    !selfTypeDefinition.mAddAssignOperatorArguments
    !selfTypeDefinition.mTypeForEnumeratedElement
  ]
 }

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @listmapTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  [self.mAssociatedListMapElementTypeIndex addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper typeGenerationTemplate.listmapTypeSpecificImplementation
    ![self.mSelfTypeEntry identifierRepresentation]
    ![self.mAssociatedListTypeIndex identifierRepresentation]
    !self.mAssociatedListTypedAttributeList
  ]
 }

#—————————————————————————————————————————————————————————————————————————————————————————————————

