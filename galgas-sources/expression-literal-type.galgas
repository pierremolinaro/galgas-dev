#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalTypeInExpressionAST : @semanticExpressionAST {
  private let @lstring mLiteralTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·················································································································

  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    $`$
    $@type$ ?let @lstring typeName
    outExpression = @literalTypeInExpressionAST.new {!typeName}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·················································································································

  rule <primary> !@semanticExpressionAST outExpression {
    $`$
    $@type$ ?let @lstring typeName
    outExpression = @literalTypeInExpressionAST.new {!typeName}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalTypeInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [!?ioTypeMap makeEntry !self.mLiteralTypeName ?*]
}

#·····················································································································

override method @literalTypeInExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext unused inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = typeNameForUsefulEntitiesGraph (!self.mLiteralTypeName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#---
  let type = [ioTypeMap typeMapEntryForLKey !self.mLiteralTypeName]
  outExpression = @literalTypeInExpressionForGeneration.new {
    ![ioTypeMap typeMapEntryForLKey !.new {!"type" !.here}]
    !self.mLiteralTypeName.location
    !type
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalTypeInExpressionForGeneration : @semanticExpressionForGeneration {
  private let @unifiedTypeMapEntry mLiteralType
}

#·····················································································································

override method @literalTypeInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mLiteralType addHeaderFileName !?ioInclusionSet]
  outCppExpression = "GALGAS_type (& kTypeDescriptor_GALGAS_"
                  + [[self.mLiteralType definition].mTypeName.string identifierRepresentation] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
