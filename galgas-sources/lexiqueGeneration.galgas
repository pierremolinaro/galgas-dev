#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  'lexique' component generation           
#                                           
#  Copyright (C) 2007, ..., 2015 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   L E X I C A L    E X P R E S S I O N    C O D E    G E N E R A T I O N                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalExpressionAST generateConditionCode
  ?context:let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalOrExpressionAST generateConditionCode
  ?context:let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string {
  result = [self.mLeftOperand generateConditionCode !context:inLexiqueAnalysisContext]
  result += " || "
  result += [self.mRightOperand generateConditionCode !context:inLexiqueAnalysisContext]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterIntervalMatchAST generateConditionCode
  ?context:let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string {
  result = ""
  result = "testForInputUTF32CharRange ("
  result += [self.mLowerBound.char utf32CharConstantRepresentation]
  result += ", "
  result += [self.mUpperBound.char utf32CharConstantRepresentation]
  result += ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringMatchAST generateConditionCode
  ?context:let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string {
  result = "testForInputUTF32String (kUnicodeString_" + [inLexiqueAnalysisContext.mLexiqueName identifierRepresentation] + "_" + [self.mString.string identifierRepresentation]
  result += ", "
  result += [[self.mString count] string]
  result += ", true)"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringNotMatchAST generateConditionCode
  ?context:let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string {
  result = "notTestForInputUTF32String (kUnicodeString_" + [inLexiqueAnalysisContext.mLexiqueName identifierRepresentation] + "_"
  result += [self.mString identifierRepresentation]
  result += ", "
  result += [[self.mString count] string]
  result += ", gLexicalMessage_"
  result += [inLexiqueAnalysisContext.mLexiqueName identifierRepresentation] + "_"
  result += self.mErrorMessage.string
  result += " COMMA_LINE_AND_SOURCE_FILE)"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterMatchAST generateConditionCode
  ?context:let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string {
  result = "testForInputUTF32Char ("
  result += [self.mCharacter.char utf32CharConstantRepresentation]
  result += ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterSetMatchAST generateConditionCode
  ?context:let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string {
  result = "testForCharWithFunction ("
  result += self.mCharacterSetName.string
  result += ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#     R O U T I N E    O R    F U N C T I O N    A R G U M E N T                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalRoutineOrFunctionFormalInputArgumentAST generateRoutineOrFunctionArgument
  -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalAttributeInputArgumentAST generateRoutineOrFunctionArgument
  -> @string {
  result = "token.mLexicalAttribute_" + [self.mAttributeName identifierRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterInputArgumentAST generateRoutineOrFunctionArgument
  -> @string {
  result = [self.mCharacter.char utf32CharConstantRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalUnsignedInputArgumentAST generateRoutineOrFunctionArgument -> @string {
  result = [self.mUnsigned.bigint string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCurrentCharacterInputArgumentAST generateRoutineOrFunctionArgument
  -> @string {
  result = "previousChar ()"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalFunctionInputArgumentAST generateRoutineOrFunctionArgument
  -> @string {
  result = "::scanner_function_" + self.mFunctionName + " (*this"
  for (mLexicalActualInputArgument) in self.mFunctionActualArgumentList do
    result += ", " + [mLexicalActualInputArgument generateRoutineOrFunctionArgument]
  end
  result += ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  L E X I C A L    S E N D  I N S T R U C T I O N    D E F A U L T                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalSendDefaultActionAST generateDefaultSendCode
  ?let @string inScannerClassName
  -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalSendTerminalByDefaultAST generateDefaultSendCode
  ?let @string unused inScannerClassName
  -> @string
{
  result = "token.mTokenCode = kToken_" + self.mDefaultSentTerminal + " ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalErrorByDefaultAST generateDefaultSendCode
  ?let @string inScannerClassName
  -> @string {
  result = "lexicalError (gLexicalMessage_" + inScannerClassName + "_" + self.mDefaultErrorMessageName + " COMMA_LINE_AND_SOURCE_FILE) ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  L E X I C A L    I N S T R U C T I O N    C O D E    G E N E R A T I O N                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalInstructionAST generateLexicalInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string 

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalInstructionAST lexicalInstructionUsesLoopLocalVariable -> @bool

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#        L E X I C A L    R U L E    C O D E    G E N E R A T I O N                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @abstractLexicalRuleAST generateLexicalRuleCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string 

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @abstractLexicalRuleAST lexicalRuleUsesLoopLocalVar -> @bool 

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalImplicitRuleAST generateLexicalRuleCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string {
  [inLexiqueAnalysisContext.mLexicalTokenListMap searchKey !self.mListName ?* ?let tokenSortedList ?*]
  result = ""
  for > (* mName mTerminalName) in tokenSortedList do
    result += "if (testForInputUTF32String (kUnicodeString_" + inScannerClassName + "_"
    result += [mName identifierRepresentation]
    result += ", "
    result += [[mName count] string]
    result += ", true)) {\n"
    result += "  token.mTokenCode = kToken_" + [mTerminalName identifierRepresentation] + " ;\n"
    result += "  enterToken (token) ;\n"
    result += "}else "
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalImplicitRuleAST lexicalRuleUsesLoopLocalVar -> @bool {
  result = false
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalExplicitRuleAST generateLexicalRuleCode
                                              ?let @string inScannerClassName
                                              ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
                                              -> @string {
  result = "if ("
  result += [self.mLexicalRuleExpression generateConditionCode !context:inLexiqueAnalysisContext]
  result += ") {\n"
  [!?result incIndentation !2]
  for (instruction) in self.mInstructionList do
    result += [instruction generateLexicalInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
  end
  [!?result decIndentation !2]
  result += "}else "
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalExplicitRuleAST lexicalRuleUsesLoopLocalVar -> @bool {
  result = false
  for (instruction) in self.mInstructionList while not result do
    result = [instruction lexicalInstructionUsesLoopLocalVariable]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

