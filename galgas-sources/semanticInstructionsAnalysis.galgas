//————————————————————————————————————————————————————————————————————————————————————————————————
//
//  metamodel that defines expression
//
//  Copyright (C) 2010, ..., 2023 Pierre Molinaro.
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
//
//    I N S T R U C T I O N    A N A L Y S I S
//
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @semanticInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap

//————————————————————————————————————————————————————————————————————————————————————————————————

list @localConstantList {
  public let @unifiedTypeMapEntry mType
  public let @lstring mName
  public let @bool mNoWarningIfUnused
  public let @string mCppName
}

//————————————————————————————————————————————————————————————————————————————————————————————————

list @localInitializedVariableList {
  public let @unifiedTypeMapEntry mType
  public let @lstring mName
  public let @string mCppName
}

//————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeSemanticInstructionList
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?localConstantList: let @localConstantList inLocalConstantList
  ?localInitializedVariableListWarnsIfNotMutated: let @localInitializedVariableList inLocalInitializedVariableList
  ?localInitializedVariableListNoWarnsIfNotMutated: let @localInitializedVariableList inLocalInitializedVariableListNoWarns
  ?let @semanticInstructionListAST inSemanticInstructionListAST
  ?let @location inEndOfBranchLocation
  ?!@localVarManager ioVariableMap
  !@semanticInstructionListForGeneration outInstructionListForGeneration
{
//--- Begin branch
  [!?ioVariableMap openBranch]
//---
  analyzeSemanticInstructionListWithoutBranch (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !localConstantList: inLocalConstantList
    !localInitializedVariableListWarnsIfNotMutated: inLocalInitializedVariableList
    !localInitializedVariableListNoWarnsIfNotMutated: inLocalInitializedVariableListNoWarns
    !inSemanticInstructionListAST
    !?ioVariableMap
    ?outInstructionListForGeneration
  )
//--- Branch end
  [!?ioVariableMap closeBranch !inEndOfBranchLocation]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeSemanticInstructionListWithoutBranch
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?localConstantList: let @localConstantList inLocalConstantList
  ?localInitializedVariableListWarnsIfNotMutated: let @localInitializedVariableList inLocalInitializedVariableList
  ?localInitializedVariableListNoWarnsIfNotMutated: let @localInitializedVariableList inLocalInitializedVariableListNoWarns
  ?let @semanticInstructionListAST inSemanticInstructionListAST
  ?!@localVarManager ioVariableMap
  !@semanticInstructionListForGeneration outInstructionListForGeneration
{
  outInstructionListForGeneration = @()
//--- Declare local constants
  for (mType mName mNoWarningIfUnused mCppName) in inLocalConstantList do
    if mNoWarningIfUnused then
      [!?ioVariableMap insertUsedLocalConstant !mName !mType !mCppName !mCppName]
    else
      [!?ioVariableMap insertInitializedLocalConstant !mName !mType !mCppName !mCppName]
    end
  end
//--- Declare local variables
  for (mType mName mCppName) in inLocalInitializedVariableList do
    [!?ioVariableMap insertInitializedLocalVariable !mName !warnsIfNotMutated: true !mType !mCppName !mCppName]
  end
  for (mType mName mCppName) in inLocalInitializedVariableListNoWarns do
    [!?ioVariableMap insertInitializedLocalVariable !mName !warnsIfNotMutated: false !mType !mCppName !mCppName]
  end
//--- Instruction list
  for (mInstruction) in inSemanticInstructionListAST do
    [mInstruction analyzeSemanticInstruction
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !?outInstructionListForGeneration
      !?ioVariableMap
    ]
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

getter @formalArgumentPassingModeAST correspondingEffectiveParameterString -> @string {
  switch self
    case argumentConstantIn : result = "!"
    case argumentVarIn : result = "!"
    case argumentOut : result = "?"
    case argumentInOut : result = "!?"
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

proc checkExpressionIsBoolean
  ?let @analysisContext inAnalysisContext
  ?let @location inErrorLocation
  ?let @semanticExpressionForGeneration inExpression
  !@semanticExpressionForGeneration outExpression {
  let expressionType = inExpression.mResultType
//--- Boolean type
  let boolType = inAnalysisContext.predefinedTypes.mBoolType
  if expressionType == boolType then
    outExpression = inExpression
  elsif [expressionType definition].typeKind == .structType then
    if [[expressionType definition].propertyMap hasKey !"bool"] then
      [[expressionType definition].propertyMap searchKey
        !@lstring {!"bool" !inErrorLocation}
        ?let accessControl
        ?*
        ?let @unifiedTypeMapEntry attributeType
      ]
      [accessControl checkSetAccess !inAnalysisContext.selfAvailability !inErrorLocation]
//      if not isPublic then
//        error inErrorLocation : " inaccessible property (due to its 'private' qualifier)"
//      end
      if attributeType == boolType then
        outExpression = @propertyAccessExpressionForGeneration {
          !boolType
          !inErrorLocation
          !inExpression
          !"bool"
        }
      else
        error inErrorLocation
        : "the '@"+ [expressionType definition].typeName.string + "' struct type defines an attribute named 'bool', but its type is not '@bool'"
        : outExpression
      end
    else
      error inErrorLocation
      : "the '@"+ [expressionType definition].typeName.string + "' struct type does not define an attribute named 'bool'"
      : outExpression
    end
  else
    with "bool" in [expressionType definition].getterMap do
      if mReturnedType != boolType then
        error inErrorLocation: "the expression type is not @bool, it handles a 'bool' getter, but it does not return a '@bool' value" : outExpression
      elsif [mArgumentTypeList count] > 0 then
        error inErrorLocation: "the expression type is not @bool, it handles a 'bool' getter that requires argument(s)" : outExpression
      else
        outExpression = @getterCallExpressionForGeneration {
          !boolType
          !inErrorLocation
          !mKind
          !inExpression
          !@()
          !"bool"
          !@()
          !mHasCompilerArgument
        }
      end
    else
      if [[expressionType definition].getterMap count] == 0 then
        error inErrorLocation
        : "the expression type is not '@bool', but '@"+ [expressionType definition].typeName.string + "', and this type does not define the 'bool' getter"
        : outExpression
      else
        error inErrorLocation
        : "the expression type is not '@bool', but '@"+ [expressionType definition].typeName.string + "', and this type does not define the 'bool' getter "
        : outExpression
        fixit { replace [[expressionType definition].getterMap keyList] }
      end
    end
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractGrammarInstructionSyntaxDirectedTranslationResult analyzeGrammarInstructionSDT
  ?let @analysisContext inAnalysisContext
  ?!@unifiedTypeMap ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @string inSyntaxDirectedTranslationResultVarName
  ?!@stringlist ioAssignementList
  ?!@localVarManager ioVariableMap

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @grammarInstructionSyntaxDirectedTranslationResultNone analyzeGrammarInstructionSDT
  ?let @analysisContext unused inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?let @bool unused inHasTranslateFeature
  ?let @string unused inSyntaxDirectedTranslationResultVarName
  ?!@stringlist unused ioAssignementList
  ?!@localVarManager unused ioVariableMap {
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @grammarInstructionSyntaxDirectedTranslationDropResult  analyzeGrammarInstructionSDT
  ?let @analysisContext unused inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @string unused inSyntaxDirectedTranslationResultVarName
  ?!@stringlist unused ioAssignementList
  ?!@localVarManager unused ioVariableMap {
  if not inHasTranslateFeature then
    error self.mLocation : "the ':>' construct requires the grammar to be declared with 'translate' feature"
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @grammarInstructionSyntaxDirectedTranslationResultInVar  analyzeGrammarInstructionSDT
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @string inSyntaxDirectedTranslationResultVarName
  ?!@stringlist ioAssignementList
  ?!@localVarManager ioVariableMap {
  if not inHasTranslateFeature then
    error self.mActualParameterName : "the ':>' construct requires the grammar to be declared with 'translate' feature"
  end
  [!?ioVariableMap searchForWriteAccess !self.mActualParameterName ?let @unifiedTypeMapEntry type ?let @string cppName ?*]
  let expectedType = inAnalysisContext.predefinedTypes.mStringType
  if expectedType != type then
    error self.mActualParameterName
    : "the '" + self.mActualParameterName + "' parameter has the '@" + [type identifierRepresentation]
    + ", bit an '@" + [expectedType identifierRepresentation] + "' parameter is required here"
  end
  ioAssignementList += !cppName + " = GGS_string (" + inSyntaxDirectedTranslationResultVarName + ") ;"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @grammarInstructionSyntaxDirectedTranslationResultInDeclaredVar  analyzeGrammarInstructionSDT
  ?let @analysisContext inAnalysisContext
  ?!@unifiedTypeMap ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @string inSyntaxDirectedTranslationResultVarName
  ?!@stringlist ioAssignementList
  ?!@localVarManager ioVariableMap {
  if not inHasTranslateFeature then
    error self.mActualParameterName : "the ':>' construct requires the grammar to be declared with 'translate' feature"
  end
  let cppName = "var_" + [self.mActualParameterName identifierRepresentation] + "_" + [self.mActualParameterName.location startLocationIndex]
  let type = [ioTypeMap typeMapEntryForLKey !self.mActualParameterTypeName]
  [!?ioVariableMap insertInitializedLocalVariable !self.mActualParameterName !warnsIfNotMutated: true !type !cppName !cppName]
  let expectedType = inAnalysisContext.predefinedTypes.mStringType
  if expectedType != type then
    error self.mActualParameterName
    : "the '" + self.mActualParameterName + "' parameter has the '@" + [type identifierRepresentation]
    + ", bit an '@" + [expectedType identifierRepresentation] + "' parameter is required here"
  end
  ioAssignementList += !"GGS_string " + cppName + " (" + inSyntaxDirectedTranslationResultVarName + ") ;"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @grammarInstructionSyntaxDirectedTranslationResultInDeclaredConst  analyzeGrammarInstructionSDT
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @string inSyntaxDirectedTranslationResultVarName
  ?!@stringlist ioAssignementList
  ?!@localVarManager ioVariableMap {
  if not inHasTranslateFeature then
    error self.mActualParameterName : "the ':>' construct requires the grammar to be declared with 'translate' feature"
  end
  let cppName = "var_" + [self.mActualParameterName identifierRepresentation] + "_" + [self.mActualParameterName.location startLocationIndex]
  let type = [ioTypeMap typeMapEntryForLKey !self.mActualParameterTypeName]
  [!?ioVariableMap insertInitializedLocalConstant !self.mActualParameterName !type !cppName !cppName]
  let expectedType = inAnalysisContext.predefinedTypes.mStringType
  if expectedType != type then
    error self.mActualParameterName
    : "the '" + self.mActualParameterName + "' parameter has the '@" + [type identifierRepresentation]
    + ", bit an '@" + [expectedType identifierRepresentation] + "' parameter is required here"
  end
  ioAssignementList += !"const GGS_string " + cppName + " (" + inSyntaxDirectedTranslationResultVarName + ") ;"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

