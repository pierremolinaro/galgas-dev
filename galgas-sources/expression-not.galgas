//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------
//!   AST
//------------------------------------------------------------------------------------------------

class @notExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mExpression
}

//------------------------------------------------------------------------------------------------
//! SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension galgas3ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <factor_ggs3> ?!@galgasDeclarationAST ioDeclarations
                     !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $not$
    <factor_ggs3> !?ioDeclarations ?outExpression
    outExpression = @notExpressionAST {!operatorLocation !outExpression}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <factor> ?!@galgasDeclarationAST ioDeclarations
                !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $not$
    <factor> !?ioDeclarations ?outExpression
    outExpression = @notExpressionAST {!operatorLocation !outExpression}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------
//! SEMANTICS
//------------------------------------------------------------------------------------------------

override method @notExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

//································································································

override method @notExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
//--- Expression analysis
  [self.mExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let expression
  ]
//--- Check operator availability
  let @unifiedTypeMapEntry type = expression.mResultType
  if expression is == @trueExpressionForGeneration then
    outExpression = @falseExpressionForGeneration {!inAnalysisContext.predefinedTypes.mBoolType !self.mOperatorLocation}
  elsif expression is == @falseExpressionForGeneration then
    outExpression = @trueExpressionForGeneration {!inAnalysisContext.predefinedTypes.mBoolType !self.mOperatorLocation}
  elsif not [[type definition].features contains !.prefixNotOperator] then
    error self.mOperatorLocation
    : "operand type is '@" + [type definition].typeName.string + "' and does not support the 'not' operator"
    :outExpression
  else
  //--- Generate expression
    outExpression = @notExpressionForGeneration {
      !type
      !self.mOperatorLocation
      !expression
    }
  end
}

//------------------------------------------------------------------------------------------------
//! CODE GENERATION
//------------------------------------------------------------------------------------------------

class @notExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mExpression
}

//································································································

override method @notExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mExpression.mResultType addHeaderFileName !?ioInclusionSet]
//--- Operand
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let operand]
//--- Generate
  outCppExpression = operand + ".operator_not (" + [self.mLocation sourceFile] + ")"
}

//------------------------------------------------------------------------------------------------
