#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Generate predefined types                                                                                           *
#                                                                                                                      *
#  Copyright (C) 2010, ..., 2014 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

override method @outputActualParameterForGeneration generateActualParameter
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringlist unused ioOutputVariableList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName {
  [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  [mOutputActualParameterExpression generateExpression !?ioImplementation !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?outCppName]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @outputInputActualParameterForGeneration generateActualParameter
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string unused ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringlist unused ioOutputVariableList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName {
  for (t) in mTypeList do
    [t addHeaderFileName !?ioInclusionSet]
  end
  outCppName = mOutputInputVariableCppName
  for () in mStructAttributeList do
    outCppName += ".mAttribute_" + [mValue identifierRepresentation]
  end
  [!?ioUnusedVariableCppNameSet removeKey !mOutputInputVariableCppName]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @inputActualParameterForGeneration generateActualParameter
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string unused ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringlist ioOutputVariableList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName {
  outCppName = mInputActualCppName
  ioOutputVariableList += !mInputActualCppName
  [!?ioUnusedVariableCppNameSet removeKey !outCppName]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @inputJokerParameterForGeneration generateActualParameter
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist ioJokerParametersToReleaseList
  ?!@stringlist ioOutputVariableList
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppName {
  [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  outCppName = mInputActualCppName
  ioImplementation += "GALGAS_" + [mFormalArgumentType identifierRepresentation] + " " + outCppName + " ; // Joker input parameter\n"
  ioJokerParametersToReleaseList += !mInputActualCppName
  ioOutputVariableList += !mInputActualCppName
}

#----------------------------------------------------------------------------------------------------------------------*

override method @semanticBlockInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  ioGeneratedCode += "{\n"
  generateInstructionList (
    !?ioInclusionSet
    !mInstructionList
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  ioGeneratedCode += "}\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @localVariableOrConstantDeclarationWithSourceExpressionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  [mTargetType addHeaderFileName !?ioInclusionSet]
  [mSourceExpression generateExpression
     !?ioGeneratedCode
     !?ioInclusionSet
     !?ioTemporaryVariableIndex
     !?ioUnusedVariableCppNameSet
     ?let @string sourceVar
  ]
  ioGeneratedCode += "GALGAS_" + [mTargetType identifierRepresentation] + " " + mCppVariableName + " = " + sourceVar + " ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @localVariableDeclarationForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  [mVariableType addHeaderFileName !?ioInclusionSet]
  ioGeneratedCode += "GALGAS_" + [mVariableType identifierRepresentation] + " " + mCppVariableName + " ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @localVariableOrConstantDeclarationWithDefaultConstructorForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  [mTargetType addHeaderFileName !?ioInclusionSet]
  ioGeneratedCode += "GALGAS_" + [mTargetType identifierRepresentation]
                  + " " + mTargetVariableCppName
                  + " = GALGAS_"  + [mTargetType identifierRepresentation]
                  + "::constructor_"
                  + [[mTargetType mDefaultConstructorName] identifierRepresentation]
                  + " (" + [mInstructionLocation sourceFile] + ") ;\n"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @localVariableOrConstantDeclarationWithConstructorCallForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  [mTargetType addHeaderFileName !?ioInclusionSet]
  var parameterList =@stringlist.emptyList{}
  for () in mConstructorArguments do
    @string parameter
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?parameter]
    parameterList += !parameter  
  end
  ioGeneratedCode += "GALGAS_" + [mTargetType identifierRepresentation]
                   + " " + mTargetVariableCppName
                   + " = GALGAS_"  + [mTargetType identifierRepresentation]
                   + "::constructor_" + [mConstructorName identifierRepresentation]
                   + " ("
  for () in parameterList
    do ioGeneratedCode += mValue
    between ioGeneratedCode += ", "
  end
  @bool needsComma = [parameterList length] > 0
  if mHasCompilerArgument then
    if needsComma then
      ioGeneratedCode += ", "
    end
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    ioGeneratedCode += compilerCppName ()
    needsComma = true
  end
  if needsComma then
    ioGeneratedCode += [mInstructionLocation commaSourceFile] + ") ;\n"
  else
    ioGeneratedCode += [mInstructionLocation sourceFile] + ") ;\n"
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @assignmentInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  @string sourceVar
  [mSourceExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?sourceVar]
  [!?ioUnusedVariableCppNameSet removeKey !mNameForCheckingFormalParameterUsing]
#---
  @string receiverCppName = mTargetCppName
  for () in mStructAttributeList do
    receiverCppName += ".mAttribute_" + [[mValue string] identifierRepresentation]
  end
  ioGeneratedCode += receiverCppName + " = " + sourceVar + " ;\n"
  [!?ioUnusedVariableCppNameSet removeKey !mTargetCppName]
}

#----------------------------------------------------------------------------------------------------------------------*

