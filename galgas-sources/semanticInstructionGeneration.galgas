//————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Generate predefined types
#
#  Copyright (C) 2010, ..., 2014 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @outputActualParameterForGeneration generateActualParameter
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringlist unused ioOutputVariableList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName
{
  [self.mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  [self.mOutputActualParameterExpression generateExpression !?ioImplementation !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?outCppName]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @outputInputActualParameterForGeneration generateActualParameter
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string unused ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringlist unused ioOutputVariableList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName {
  for (t) in self.mTypeList do
    [t addHeaderFileName !?ioInclusionSet]
  end
  outCppName = self.mOutputInputVariableCppName
  for (mValue) in self.mStructAttributeList do
    outCppName += ".mProperty_" + [mValue identifierRepresentation]
  end
  [!?ioUnusedVariableCppNameSet removeKey !self.mOutputInputVariableCppName]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @inputActualParameterForGeneration generateActualParameter
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string unused ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringlist ioOutputVariableList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName {
  outCppName = self.mInputActualCppName
  ioOutputVariableList += !self.mInputActualCppName
  [!?ioUnusedVariableCppNameSet removeKey !outCppName]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @inputJokerParameterForGeneration generateActualParameter
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist ioJokerParametersToReleaseList
  ?!@stringlist ioOutputVariableList
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppName {
  [self.mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  outCppName = self.mInputActualCppName
  ioImplementation += "GGS_" + [self.mFormalArgumentType identifierRepresentation] + " " + outCppName + " ; // Joker input parameter\n"
  ioJokerParametersToReleaseList += !self.mInputActualCppName
  ioOutputVariableList += !self.mInputActualCppName
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @semanticBlockInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  ioGeneratedCode += "{\n"
  generateInstructionList (
    !?ioInclusionSet
    !self.mInstructionList
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  ioGeneratedCode += "}\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @outputInputActualParameterForGeneration generatePoisonedVariables
  ?!@string unused ioImplementation
  ?!@stringset unused ioUnusedVariableCppNameSet {
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @outputActualParameterForGeneration generatePoisonedVariables
  ?!@string unused ioImplementation
  ?!@stringset unused ioUnusedVariableCppNameSet {
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @inputJokerParameterForGeneration generatePoisonedVariables
  ?!@string ioImplementation
  ?!@stringset ioUnusedVariableCppNameSet {
  if [self.mPoisonedVarNameList count] > 0 then
    ioImplementation += "if (!" + self.mInputActualCppName + ".isValid ()) {\n"
    for (cppVarName nameForCheckingFormalParameterUsing) in self.mPoisonedVarNameList do
      [!?ioUnusedVariableCppNameSet removeKey !nameForCheckingFormalParameterUsing]
      ioImplementation += "  " + cppVarName + ".drop () ;\n"
    end
    ioImplementation += "}\n"
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @inputActualParameterForGeneration generatePoisonedVariables
                        ?!@string ioImplementation
                        ?!@stringset ioUnusedVariableCppNameSet {
  if [self.mPoisonedVarNameList count] > 0 then
    ioImplementation += "if (!" + self.mInputActualCppName + ".isValid ()) {\n"
    for (cppVarName nameForCheckingFormalParameterUsing) in self.mPoisonedVarNameList do
      [!?ioUnusedVariableCppNameSet removeKey !nameForCheckingFormalParameterUsing]
      ioImplementation += "  " + cppVarName + ".drop () ;\n"
    end
    ioImplementation += "}\n"
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————
