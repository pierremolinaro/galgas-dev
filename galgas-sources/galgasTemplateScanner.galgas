#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  GALGAS template scanner definition       
#                                           
#  Copyright (C) 2008, ..., 2015 Pierre Molinaro.
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

template lexique galgasTemplateScanner {

template "%" ... "%"

replace "\\%" -> "%"

replace "\\n" -> "\n"

replace "\\\\" -> "\\"

@string identifierString
@uint uint32value
@sint sint32value
@uint64 uint64value
@sint64 sint64value
@char charValue
@string tokenString

style keywordsStyle -> "Keywords"
style delimitersStyle -> "Delimiters"
style nonTerminalStyle -> "Non Terminal Symbols"
style variantStyle -> "Variant Symbols"
style integerStyle -> "Integer Constants"
style bigintStyle -> "Big Integer Constants"
style floatStyle -> "Floating Point Constants"
style stringStyle -> "String Constants"
style characterStyle -> "Character Constants"
style typeNameStyle -> "Type Names (@...)"
style commentStyle -> "Comments"

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier"

list galgasKeyWordList style keywordsStyle error message "the '%K' keyword"{
  "abstract",
  "after",
  "array",
  "before",
  "between",
  "block",
  "boolset",
  "case",
  "cast",
  "class",
  "const",
  "constructor",
  "default",
  "dict",
  "do",
  "drop",
  "else",
  "elsif",
  "end",
  "enum",
  "error",
  "extension",
  "extern",
  "false",
  "filewrapper",
  "fixit",
  "for",
  "func",
  "getter",
  "grammar",
  "graph",
  "gui",
  "here",
  "if",
  "in",
  "index",
  "indexing",
  "insert",
  "is",
  "label",
  "let",
  "lexique",
  "list",
  "listmap",
  "log",
  "loop",
  "map",
  "message",
  "method",
  "mod",
  "not",
  "on",
  "once",
  "operator",
  "option",
  "or",
  "override",
  "parse",
  "private",
  "proc",
  "project",
  "remove",
  "replace",
  "repeat",
  "rule",
  "search",
  "select",
  "self",
  "send",
  "setter",
  "sortedlist",
  "struct",
  "style",
  "switch",
  "syntax", 
  "tag",
  "template",
  "then",
  "true",
  "shared",
  "unused",
  "var",
  "warning",
  "when",              
  "while",
  "with"
}

rule isUnicodeLetter {
  repeat
    enterCharacterIntoString (!?identifierString !toLower (!*) )
    enterCharacterIntoString (!?tokenString !* )
  while isUnicodeLetter | '_' | '0'->'9' :
  end
  send search identifierString in galgasKeyWordList default $identifier$
}

# -------------------------- Type Name -----------------------------

$@type$ ! tokenString  style typeNameStyle error message "a type name (@...)"

message incorrectTypeNameError : "in a type name, a letter should follow the '@' character"

rule '@' {
  select
  case isUnicodeLetter | '_' | '0'->'9' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while isUnicodeLetter | '_' | '0'->'9' :
    end
    select
    case '-' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while isUnicodeLetter | '_' | '0'->'9' :
      end
    default
    end
  default
    error incorrectTypeNameError
  end
  send $@type$ 
}

#------------------------------- Integer, floating Point Constant ------------------
@double floatValue
@bigint bigintValue
$double.xxx$ !floatValue !tokenString  style floatStyle error message "a float number"
$uint32$ ! uint32value  style integerStyle error message "a 32-bit unsigned decimal number"
$sint32_S$ ! sint32value  style integerStyle error message "a 32-bit signed decimal number"
$uint64_L$ ! uint64value  style integerStyle error message "a 64-bit unsigned decimal number"
$sint64_LS$ ! sint64value  style integerStyle error message "a 64-bit signed decimal number"
$bigint_G$ !bigintValue  style bigintStyle error message "a big integer number"

message decimalNumberTooLarge : "decimal number too large"
message floatNumberConversionError : "invalid float number"
message internalError : "internal error"
message hexDigitError : "0x should be followed by a hexadecimal digit"

rule "0x" {
  repeat
  while '_' :
  end
  select
  case '0'->'9' | 'a'->'f' | 'A'->'F' :
    enterCharacterIntoString (!?tokenString !* )
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !* )
    while 'a'->'f' :
      enterCharacterIntoString (!?tokenString !* )
    while 'A'->'F' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    select
    case "LS" :
      convertHexStringIntoSInt64 (!tokenString !?sint64value error decimalNumberTooLarge, internalError )
      send $sint64_LS$
    case 'S' | 's' :
      convertHexStringIntoSInt (!tokenString !?sint32value error decimalNumberTooLarge, internalError )
      send $sint32_S$
    case 'L' :
      convertHexStringIntoUInt64 (!tokenString !?uint64value error decimalNumberTooLarge, internalError )
      send $uint64_L$
    case 'G' :
      convertHexStringIntoBigInt (!tokenString !?bigintValue error internalError )
      send $bigint_G$
    default
      convertHexStringIntoUInt (!tokenString !?uint32value error decimalNumberTooLarge, internalError )
      send $uint32$
    end
  default
    error hexDigitError
  end
}

rule '0'->'9' {
  enterCharacterIntoString (!?tokenString !* )
  repeat
  while '0'->'9' :
    enterCharacterIntoString (!?tokenString !* )
  while '_' :
  end
  select
  case 'S' | 's' :
    convertDecimalStringIntoSInt (!tokenString !?sint32value error decimalNumberTooLarge, internalError )
    send $sint32_S$
  case "LS" :
    convertDecimalStringIntoSInt64 (!tokenString !?sint64value error decimalNumberTooLarge, internalError )
    send $sint64_LS$
  case 'L' :
    convertDecimalStringIntoUInt64 (!tokenString !?uint64value error decimalNumberTooLarge, internalError )
    send $uint64_L$
  case 'G' :
    convertDecimalStringIntoBigInt (!tokenString !?bigintValue error internalError )
    send $bigint_G$
  case '.' :
    enterCharacterIntoString (!?tokenString !'.' )
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    convertStringToDouble (!tokenString !?floatValue error floatNumberConversionError )
    send $double.xxx$
  default
    convertDecimalStringIntoUInt (!tokenString !?uint32value error decimalNumberTooLarge, internalError )
    send $uint32$
  end
}

#------------------------------- Floating point Number ------------------
$.$  style delimitersStyle error message "the '.' delimitor"
$.=$  style delimitersStyle error message "the '.=' delimitor"
$...$  style delimitersStyle error message "the '...' delimitor"
$..<$  style delimitersStyle error message "the '..<' delimitor"

#--- Floating Point constant begining with a dot
rule '.' {
  select
  case '0'->'9' :
    enterCharacterIntoString (!?tokenString !'0' )
    enterCharacterIntoString (!?tokenString !'.' )
    enterCharacterIntoString (!?tokenString !* )
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    convertStringToDouble (!tokenString !?floatValue error floatNumberConversionError )
    send $double.xxx$
  default
    select
    case ".." :
      send $...$
    case ".<" :
      send $..<$
    case "=" :
      send $.=$
    default
      send $.$
    end
  end
}

#--------------------------------- Character constant ------------------------------------
$'char'$ ! charValue  style characterStyle error message "a character constant"

message incorrectCharConstant : "incorrect literal character"

message ASCIIcodeTooLargeError : "ASCII code > 255"

message obsoleteCharConstruction : "\\x.. is obsolete: now, use \\u.... or \\U........"

message invalideUnicodeDefinition4 : "\\u should be followed by exactly four hexadecimal digits"

message invalideUnicodeDefinition8 : "\\U should be followed by exactly eight hexadecimal digits"

message unassignedUnicodeValue : "this value does not correspond to an assigned Unicode point"

message incorrectHTMLescapeSequence : "Invalid HTML sequence, should be '&...;'"

message unknownHTMLescapeSequence : "Invalid &...; HTML sequence"

rule '\'' {
  select
  case '\\' :
    select
    case 'f' :
      enterCharacterIntoCharacter (!?charValue !'\f' )
    case 'n' :
      enterCharacterIntoCharacter (!?charValue !'\n' )
    case 'r' :
      enterCharacterIntoCharacter (!?charValue !'\r' )
    case 't' :
      enterCharacterIntoCharacter (!?charValue !'\t' )
    case 'v' :
      enterCharacterIntoCharacter (!?charValue !'\v' )
    case '\\' :
      enterCharacterIntoCharacter (!?charValue !'\\' )
    case '0' :
      enterCharacterIntoCharacter (!?charValue !'\0' )
    case '\'' :
      enterCharacterIntoCharacter (!?charValue !'\'' )
    case 'u' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
           enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
            default
              error invalideUnicodeDefinition4
            end
          default
            error invalideUnicodeDefinition4
          end
        default
          error invalideUnicodeDefinition4
        end
      default
        error invalideUnicodeDefinition4
      end
    case 'U' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
            enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              select
              case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                select
                case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                  enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                  select
                  case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                   enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                    select
                    case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                      enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                      convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
                    default
                      error invalideUnicodeDefinition8
                    end
                  default
                    error invalideUnicodeDefinition8
                  end
                default
                  error invalideUnicodeDefinition8
                end
              default
                error invalideUnicodeDefinition8
              end
            default
              error invalideUnicodeDefinition8
            end
          default
            error invalideUnicodeDefinition8
          end
        default
          error invalideUnicodeDefinition8
        end
      default
        error invalideUnicodeDefinition8
      end
    case 'x' | 'X' :
      warning obsoleteCharConstruction
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        repeat
          enterHexDigitIntoASCIIcharacter (!?charValue !* error ASCIIcodeTooLargeError, internalError )
        while '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        end
      default
        error incorrectCharConstant
      end
    case '&' :
      repeat
      while ~ ";" error incorrectHTMLescapeSequence :
        enterCharacterIntoString (!?tokenString !* )
      end
      convertHTMLSequenceToUnicodeCharacter (!?tokenString !?charValue error unknownHTMLescapeSequence )
    default
      error incorrectCharConstant
    end
  case ' ' -> '\uFFFD' :
     enterCharacterIntoCharacter (!?charValue !* )
  default
    error incorrectCharConstant
  end
  select
  case '\'' :
    send $'char'$
  default
    error incorrectCharConstant
  end
}

# -------------------- Characters string --------------------------------------
$"string"$ ! tokenString  style stringStyle %nonAtomicSelection error message "a character string constant \"...\""

message incorrectStringEnd : "string does not end with '\"'"

message obsoleteStringConstruction : "\\ followed by digits is obsolete: now, use \\u.... or \\U........"

rule '"' {
  repeat
  while '\\' :
    select
    case 'f' :
      enterCharacterIntoString (!?tokenString !'\f' )
    case 'n' :
      enterCharacterIntoString (!?tokenString !'\n' )
    case 'r' :
      enterCharacterIntoString (!?tokenString !'\r' )
    case 't' :
      enterCharacterIntoString (!?tokenString !'\t' )
    case 'v' :
      enterCharacterIntoString (!?tokenString !'\v' )
    case '\\' :
      enterCharacterIntoString (!?tokenString !'\\' )
    case '"' :
      enterCharacterIntoString (!?tokenString !'"' )
    case '\'' :
      enterCharacterIntoString (!?tokenString !'\'' )
    case '?' :
      enterCharacterIntoString (!?tokenString !'?' )
    case '&' :
      repeat
      while ~ ";" error incorrectHTMLescapeSequence :
        enterCharacterIntoString (!?identifierString !* )
      end
      convertHTMLSequenceToUnicodeCharacter (!?identifierString !?charValue error unknownHTMLescapeSequence )
      enterCharacterIntoString (!?tokenString !charValue )
    case '0' -> '9' :
      warning obsoleteStringConstruction
      repeat
        enterHexDigitIntoASCIIcharacter (!?charValue !* error ASCIIcodeTooLargeError, internalError )
      while '0' -> '9' :
      end
      enterCharacterIntoString (!?tokenString !charValue )
    case 'u' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
           enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
              enterCharacterIntoString (!?tokenString !charValue )
            default
              error invalideUnicodeDefinition4
            end
          default
            error invalideUnicodeDefinition4
          end
        default
          error invalideUnicodeDefinition4
        end
      default
        error invalideUnicodeDefinition4
      end
    case 'U' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
            enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
              select
              case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                select
                case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                  enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                  select
                  case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                   enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                    select
                    case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                      enterHexDigitIntoUInt (!* !?uint32value error internalError, internalError )
                      convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
                      enterCharacterIntoString (!?tokenString !charValue )
                    default
                      error invalideUnicodeDefinition8
                    end
                  default
                    error invalideUnicodeDefinition8
                  end
                default
                  error invalideUnicodeDefinition8
                end
              default
                error invalideUnicodeDefinition8
              end
            default
              error invalideUnicodeDefinition8
            end
          default
            error invalideUnicodeDefinition8
          end
        default
          error invalideUnicodeDefinition8
        end
      default
        error invalideUnicodeDefinition8
      end
    default
      error incorrectCharConstant
    end
   while ' ' | '!' | '#'-> '\uFFFD' :
    enterCharacterIntoString (!?tokenString !* )
  end
  select
  case '"' :
    send $"string"$
  default
    error incorrectStringEnd
  end
}

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList style delimitersStyle error message "the '%K' delimitor"{
  "*",     "|",    ",",      "+",     "--",
  ":>",    ">",    ";",      ":",     "?^",
  "-",     "(",    ")",     "->",
  "==",    ":=",     "++",
  "[",     "]",   "+=",    "&+",
  "/",    "!=",   ">=",      "&",     "!^",
  "{",     "}",
  "^",    ">>",    "~", "&++", "&--", "&/"
}

rule list galgasDelimitorsList

# --------- Special formal arguments, actual parameters --------------------------
$?$ ! tokenString  style delimitersStyle error message "the '\?' or '\?selector:' delimitor"
$?!$ ! tokenString  style delimitersStyle error message "the '\?!' or '\?!selector:' delimitor"
$!$ ! tokenString  style delimitersStyle error message "the '!' or '!selector:' delimitor"
$!?$ ! tokenString  style delimitersStyle error message "the '!\?' or '!\?selector:' delimitor"

rule '?' {
  tag onlyInterrogationMark
  select
  case '!' :
    tag onlyExclamationInterrogationMark
    select
    case 'a' -> 'z' | 'A' ->'Z' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $?!$
      default
        resetString (!?tokenString )
        rewind onlyExclamationInterrogationMark send $?!$
      end
    default
      send $?!$
    end
  case 'a' -> 'z' | 'A' ->'Z' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $?$
    default
      resetString (!?tokenString )
      rewind onlyInterrogationMark send $?$
    end
  default
    send $?$
  end
}

rule '!' {
  tag onlyExclamationMark
  select
  case '?' :
    tag onlyInterrogationExclamationMark
    select
    case 'a' -> 'z' | 'A' ->'Z' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $!?$
      default
        resetString (!?tokenString )
        rewind onlyInterrogationExclamationMark send $!?$
      end
    default
      send $!?$
    end
  case 'a' -> 'z' | 'A' ->'Z' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $!$
    default
      resetString (!?tokenString )
      rewind onlyExclamationMark send $!$
    end
  default
    send $!$
  end
}

# --------- Special delimitors / non terminal symbol --------------------------
$<$  style delimitersStyle error message "the '<' delimitor"
$<=$  style delimitersStyle error message "the '<=' delimitor"
$<<$  style delimitersStyle error message "the '<<' delimitor"

rule '<' {
  select
  case '=' :
    send $<=$
  case '<' :
    send $<<$
  default
    send $<$
  end
}

# ------------------------------------ Comment ----------------------------
$comment$  style commentStyle %nonAtomicSelection error message "a comment"
rule '#' {
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end
  drop $comment$
}

# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' {
}

}
