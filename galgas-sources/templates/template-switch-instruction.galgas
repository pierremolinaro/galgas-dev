//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//! AST
//--------------------------------------------------------------------------------------------------

list @templateInstructionSwitchBranchListAST {
  public let [@lstring] constantList
  public let @switchExtractedValuesListAST associatedValuesExtraction
  public let @templateInstructionListAST instructionList
  public let @location endOfBranch
}

//································································································

class @templateInstructionSwitchAST : @templateInstructionAST {
  private let @templateExpressionAST mSwitchExpression
  private let @location switchExpressionEndLocation
  private let @templateInstructionSwitchBranchListAST templateInstructionSwitchBranchList
}

//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension templateSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <template_instruction> ?!@templateInstructionListAST ioResultingInstructionList {
    $switch$
  //--- Switch expression
    <expression_tpl> ?let switchExpression
    let @location endOfSwitchExpression = .here
  //--- Loop on "case" clauses
    var @templateInstructionSwitchBranchListAST templateInstructionSwitchBranchList = @()
    repeat
    while
      $case$
      <switch_case>
        ?let [@lstring] constantNameList
        ?let @switchExtractedValuesListAST associatedValuesExtraction
      $:$
      var @templateInstructionListAST instructionList = @()
      repeat
        enterTemplateString (!?instructionList)
      while
        <template_instruction> !?instructionList
      end
      templateInstructionSwitchBranchList += !constantNameList !associatedValuesExtraction !instructionList !.here
    end
    $end$
  //---
    ioResultingInstructionList += !@templateInstructionSwitchAST {
      !switchExpression
      !endOfSwitchExpression
      !templateInstructionSwitchBranchList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <switch_case> ![@lstring] outConstantNameList
                     !@switchExtractedValuesListAST outAssociatedValuesExtraction {
    outConstantNameList = @()
    repeat
      $identifier$ ?let @lstring constantName
      [!?outConstantNameList append !constantName]
    while
      $,$
    end
    outAssociatedValuesExtraction = @()
    select
    or
      $($
      repeat
        select
          $literalInt$ ?let n
          $*$
          for * in 0 ..< n.bigint do
            outAssociatedValuesExtraction += !["" here] !["" here] !false
          end
         or
          $*$
          outAssociatedValuesExtraction += !["" here] !["" here] !false
         or
          let @lstring typeName
          select
            $@type$ ?typeName
          or
            typeName = ["" here]
          end
          let @bool constantMarkedAsUnused
          select
            constantMarkedAsUnused = false
          or
            $unused$
            constantMarkedAsUnused = true
          end
          $identifier$ ?let @lstring constantName
          outAssociatedValuesExtraction += !typeName !constantName !constantMarkedAsUnused
        end
      while
      end
      $)$
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! ANALYSIS
//--------------------------------------------------------------------------------------------------

override method @templateInstructionSwitchAST templateInstructionAnalysis
                                ?let @lstring inUsefulnessCallerEntityName
                                ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                ?let @templateAnalysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
                                ?!@templateInstructionListForGeneration ioInstructionList {
//---
  [self.mSwitchExpression templateExpressionAnalysis
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    ?let switchExpression
  ]
  if let enumType = [[switchExpression.mResultType definition].typeKind getEnumType] then
    var @stringset constantsNamedInSwitchInstruction = @()
  //--- Analyze branches
    var @templateInstructionSwitchBranchListForGeneration templateInstructionSwitchBranchList = @()
    for (mConstantList mAssociatedValuesExtraction mInstructionList mEndOfBranch) in self.templateInstructionSwitchBranchList do
      var @extractedAssociatedValuesForGeneration extractedAssociatedValuesForGeneration = @()
      var analysisContext = inAnalysisContext
      for constantName in mConstantList do
        if [enumType.constantMap hasKey !constantName.string] then
          if [constantsNamedInSwitchInstruction hasKey !constantName.string] then
            error constantName
            :"the '" + constantName + "' constant is already named in this switch instruction"
          end
          constantsNamedInSwitchInstruction += !constantName.string
          [enumType.constantMap searchKey !constantName ?* ?let @associatedValueDescriptorList associatedTypeList]
          if ([associatedTypeList count] > 0) & ([mAssociatedValuesExtraction count] == 0) then
            error constantName
              :"the associated values of '" + constantName + "' constant should be extracted"
          elsif ([associatedTypeList count] == 0) & ([mAssociatedValuesExtraction count] > 0) then
            error constantName
              :"the '" + constantName + "' constant has no associated value"
          elsif [associatedTypeList count]  != [mAssociatedValuesExtraction count] then
            error constantName
              :"the '" + constantName + "' constant requires " + [associatedTypeList count] + "  associated value"
              + if [associatedTypeList count] > 1 then "s" else "" end
          else
            for descriptor in associatedTypeList, (mExtractedValueTypeName mExtractedValueName *) in mAssociatedValuesExtraction do (IDX)
              if mExtractedValueTypeName.string != "" then // Explicit type ?
                if [descriptor.type definition].typeName.string != mExtractedValueTypeName.string then
                  error mExtractedValueTypeName : "the required type is '@" + [descriptor.type definition].typeName.string + "'"
                end
              end
              let cppName = "extractedValue_" + [mExtractedValueName.location startLocationIndex]
                + "_" + mExtractedValueName + "_" + IDX
              extractedAssociatedValuesForGeneration +=
                !descriptor.type
                !cppName
                !descriptor.name
              if mExtractedValueName.string != "" then
                [!?analysisContext.mTemplateVariableMap insertKey
                  !mExtractedValueName
                  !descriptor.type
                  !cppName
                ]
              end
            end
          end
        else
          error constantName
          :"'" + constantName + "' is not a constant of '@"
          + [switchExpression.mResultType definition].typeName.string + "' enumeration type"
        end
      end
      var @templateInstructionListForGeneration instructionList = @()
      templateInstructionListAnalysis (
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !analysisContext
        !?ioTypeMap
        !mInstructionList
        !?instructionList
      )
      templateInstructionSwitchBranchList +=
        !mConstantList
        !extractedAssociatedValuesForGeneration
        ![mEndOfBranch startLocationIndex]
        !instructionList
    end
  //--- Check all constants have been named
    let forgottenConstants = [enumType.constantMap keySet] - constantsNamedInSwitchInstruction
    if [forgottenConstants count] > 0 then
      var @string s = ""
      for (key) in forgottenConstants do
        s += "\n  - " + key
      end
      error self.switchExpressionEndLocation
      : "the switch instruction should name all enumeration constants; missing constants are:" + s
    end
  //---
    ioInstructionList += !@templateInstructionSwitchForGeneration {
      !switchExpression.mResultType
      !switchExpression
      !templateInstructionSwitchBranchList
    }
  else
    error switchExpression.mLocation : "'switch' expression type should be an enumeration (it is a "
       + [switchExpression.mResultType definition].typeKind + " type)"
  end
}

//--------------------------------------------------------------------------------------------------
//! CODE GENERATION
//--------------------------------------------------------------------------------------------------

list @templateInstructionSwitchBranchListForGeneration {
  public let [@lstring] mConstantList
  public let @extractedAssociatedValuesForGeneration mExtractedAssociatedValuesForGeneration
  public let @uint mEndOfBranchLocationIndex
  public let @templateInstructionListForGeneration mInstructionList
}

//································································································

class @templateInstructionSwitchForGeneration : @templateInstructionForGeneration {
  private let @unifiedTypeMapEntry enumType
  private let @semanticExpressionForGeneration switchExpression
  private let @templateInstructionSwitchBranchListForGeneration templateInstructionSwitchBranchList
}

//································································································

override method @templateInstructionSwitchForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
{
//--- Expression
  [self.switchExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let switchVarCppName
  ]
//---
  ioGeneratedCode += "switch (" + switchVarCppName + ".enumValue ()) {\n"
  ioGeneratedCode += "case GGS_"
  ioGeneratedCode += [self.switchExpression.mResultType identifierRepresentation]
  ioGeneratedCode += "::Enumeration::invalid :\n"
  ioGeneratedCode += "  break ;\n"
//---
  for branch in self.templateInstructionSwitchBranchList do
    for constantName in branch.mConstantList do
      ioGeneratedCode += "case GGS_"
      ioGeneratedCode += [self.switchExpression.mResultType identifierRepresentation]
      ioGeneratedCode += "::Enumeration::enum_"
      ioGeneratedCode += [constantName.string identifierRepresentation] + " :\n"
    end
    [!?ioGeneratedCode incIndentation !2]
    ioGeneratedCode += "{\n"
    if [branch.mExtractedAssociatedValuesForGeneration count] > 0 then
      for associatedValue in branch.mExtractedAssociatedValuesForGeneration do
        [associatedValue.mType addHeaderFileName !?ioInclusionSet]
        ioGeneratedCode += "  GGS_" + [associatedValue.mType identifierRepresentation]
        ioGeneratedCode += " " + associatedValue.mCppName + " ;\n"
      end
      ioGeneratedCode += "  " + switchVarCppName + ".getAssociatedValuesFor_"
      ioGeneratedCode += [branch.mConstantList @[0] identifierRepresentation] + " ("
      for associatedValue in branch.mExtractedAssociatedValuesForGeneration
        do ioGeneratedCode += associatedValue.mCppName
        between ioGeneratedCode += ", "
      end
      ioGeneratedCode += ") ;\n"
    end
    if [branch.mInstructionList count] > 0 then
      [!?ioGeneratedCode incIndentation !2]
      templateCodeGenerationForListInstruction (
        !branch.mInstructionList
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        !?ioUseColumnMarker
      )
      [!?ioGeneratedCode decIndentation !2]
    end
    ioGeneratedCode += "}\n"
    ioGeneratedCode += "break ;\n"
    [!?ioGeneratedCode decIndentation !2]
  end
//---
  ioGeneratedCode += "}\n"

}

//--------------------------------------------------------------------------------------------------

