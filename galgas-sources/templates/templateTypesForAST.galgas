//
//  Template Abstract Syntax Tree types
//
//  Copyright (C) 2010, ..., 2010 Pierre Molinaro.
//
//  e-mail : pierre@pcmolinaro.name
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//------------------------------------------------------------------------------------------------

abstract class @templateInstructionAST {
}

//------------------------------------------------------------------------------------------------

list @templateInstructionListAST {
  public let @templateInstructionAST mInstruction
}

//------------------------------------------------------------------------------------------------
//
//   E X P R E S S I O N
//
//------------------------------------------------------------------------------------------------

abstract class @templateExpressionAST {
}

//------------------------------------------------------------------------------------------------

list @templateExpressionListAST {
  public let @lstring mActualSelector
  public let @templateExpressionAST mExpression
  public let @location mEndOfExpressionLocation
}

//------------------------------------------------------------------------------------------------
//   Class Function
//------------------------------------------------------------------------------------------------

class @templateClassFunctionAST : @templateExpressionAST {
  private let @lstring mTypeName
  private let @lstring mClassFunctionName
  private let @templateExpressionListAST mExpressionList
}

//------------------------------------------------------------------------------------------------
//   F I L E W R A P P E R    T E M P L A T E     C A L L
//------------------------------------------------------------------------------------------------

class @templateFileWrapperTemplateCallAST : @templateExpressionAST {
  private let @lstring mFileWrapperName
  private let @lstring mTemplateName
  private let @templateExpressionListAST mOutExpressionList
}

//------------------------------------------------------------------------------------------------
//   E X T E N S I O N    T E M P L A T E     C A L L
//------------------------------------------------------------------------------------------------

class @templateExtensionTemplateCallAST : @templateExpressionAST {
  private let @templateExpressionAST mExpressionValue
  private let @lstring mTemplateName
  private let @templateExpressionListAST mOutExpressionList
}

//------------------------------------------------------------------------------------------------
//   B O O L E A N    O P E R A T I O N S
//------------------------------------------------------------------------------------------------

class @templateAndOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateOrOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateXorOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateTrueBoolAST : @templateExpressionAST {
  private let @location mLocation
}

//------------------------------------------------------------------------------------------------

class @templateFalseBoolAST : @templateExpressionAST {
  private let @location mLocation
}

//------------------------------------------------------------------------------------------------

class @templateLiteralStringExpressionAST : @templateExpressionAST {
  private let @stringlist mLiteralStringList
  private let @location mLocation
}

//------------------------------------------------------------------------------------------------

class @templateLiteralUIntExpressionAST : @templateExpressionAST {
  private let @lbigint mLiteralInt
}

//------------------------------------------------------------------------------------------------

class @templateLiteralCharExpressionAST : @templateExpressionAST {
  private let @lchar mLiteralChar
}

//------------------------------------------------------------------------------------------------

class @templateLiteralDoubleExpressionAST : @templateExpressionAST {
  private let @ldouble mLiteralDouble
}

//------------------------------------------------------------------------------------------------

class @structFieldAccessTemplateExpressionAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mExpression
  private let @lstring mStructFieldName
}

//------------------------------------------------------------------------------------------------

class @templateNotOperatorAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mExpression
}

//------------------------------------------------------------------------------------------------

class @templateLogicalNegateAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mExpression
}

//------------------------------------------------------------------------------------------------

class @templateOptionAccessAST : @templateExpressionAST {
  private let @lstring mOptionComponentName
  private let @lstring mOptionName
  private let @lstring mGetterName
}

//------------------------------------------------------------------------------------------------

class @templateTestDynamicClassAST : @templateExpressionAST {
  private let @templateExpressionAST mReceiverExpression
  private let @location mEndOfReceiverExpression
  private let @dynamicTypeComparisonKind mTypeComparisonKind
  private let @lstring mTypeName
}

//------------------------------------------------------------------------------------------------
//   F U N C T I O N    C A L L
//------------------------------------------------------------------------------------------------

class @templateFunctionCallAST : @templateExpressionAST {
  private let @lstring mFunctionName
  private let @templateExpressionListAST mExpressionList
}

//------------------------------------------------------------------------------------------------
//   S I M P L E    V A R I A B L E
//------------------------------------------------------------------------------------------------

class @templateVarInExpressionAST : @templateExpressionAST {
  private let @lstring mVarName
}

//------------------------------------------------------------------------------------------------
//   A D D I T I O N    O P E R A T I O N
//------------------------------------------------------------------------------------------------

class @templateAddOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------
//   S U B S T R A C T I O N    O P E R A T I O N
//------------------------------------------------------------------------------------------------

class @templateSubOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------
//   M U L T I P L I C A T I O N    O P E R A T I O N
//------------------------------------------------------------------------------------------------

class @templateMultiplyOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------
//   D I V I S I O N    O P E R A T I O N
//------------------------------------------------------------------------------------------------

class @templateDivideOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------
//   M O D U L O    O P E R A T I O N
//------------------------------------------------------------------------------------------------

class @templateModuloOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------
//   U N A R Y   -    O P E R A T I O N
//------------------------------------------------------------------------------------------------

class @templateUnaryMinusOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mExpression
}

//------------------------------------------------------------------------------------------------
//  ==    O P E R A T I O N
//------------------------------------------------------------------------------------------------

class @templateEqualTestAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateNonEqualTestAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateStrictInfTestAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateInfOrEqualTestAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateStrictSupTestAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateSupOrEqualTestAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateLeftShiftOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------

class @templateRightShiftOperationAST : @templateExpressionAST {
  private let @location mOperatorLocation
  private let @templateExpressionAST mLeftExpression
  private let @templateExpressionAST mRightExpression
}

//------------------------------------------------------------------------------------------------
//
//    I N S T R U C T I O N S
//
//------------------------------------------------------------------------------------------------

class @templateInstructionStringAST : @templateInstructionAST {
  private let @string mTemplateString
}

//------------------------------------------------------------------------------------------------

class @templateInstructionExpressionAST : @templateInstructionAST {
  private let @templateExpressionAST mExpression
  private let @location mLocation
}

//------------------------------------------------------------------------------------------------

class @templateBlockInstructionAST : @templateInstructionAST {
  private let @templateExpressionAST mExpression
  private let @location mLocation
  private let @templateInstructionListAST mBlockInstructionList
}

//------------------------------------------------------------------------------------------------

class @templateInstructionGetColumnLocationAST : @templateInstructionAST {
}

//------------------------------------------------------------------------------------------------

class @templateInstructionGotoColumnLocationAST : @templateInstructionAST {
}

//------------------------------------------------------------------------------------------------

list @templateInstructionIfBranchListAST {
  public let @templateExpressionAST mExpression
  public let @templateInstructionListAST mInstructionList
}

//------------------------------------------------------------------------------------------------

class @templateInstructionIfAST : @templateInstructionAST {
  private let @templateInstructionIfBranchListAST mTemplateInstructionIfBranchList
  private let @templateInstructionListAST mElseInstructionList
}

//------------------------------------------------------------------------------------------------

