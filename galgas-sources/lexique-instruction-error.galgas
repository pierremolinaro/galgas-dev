//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//————————————————————————————————————————————————————————————————————————————————————————————————
//! AST
//————————————————————————————————————————————————————————————————————————————————————————————————

class @lexicalErrorInstructionAST : @lexicalInstructionAST {
  private let @lstring mErrorMessageName
}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3LexiqueComponentSyntax {

  //······························································································

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $error$
    $identifier$ ?let errorMessageName
    ioInstructionList += !@lexicalErrorInstructionAST {!errorMessageName}
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4LexiqueComponentSyntax {

  //······························································································

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $error$
    $identifier$ ?let errorMessageName
    ioInstructionList += !@lexicalErrorInstructionAST {!errorMessageName}
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! CHECK LEXICAL INSTRUCTION
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalErrorInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap
{
  [!?ioLexiqueAnalysisContext.mLexicalMessageMap setMMessageIsUsedForKey !true !self.mErrorMessageName.string]
}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! COCOA GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalErrorInstructionAST generateObjcCocoaInstructionCode
  ?let @string unused inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "scanningOk = NO ;\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalErrorInstructionAST generateSwiftCocoaInstructionCode
  ?let @string unused inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "scanningOk = false\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! C++ CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalErrorInstructionAST lexicalInstructionUsesLoopLocalVariable -> @bool {
  result = false
}

//·································································································

override getter @lexicalErrorInstructionAST generateLexicalInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string {
  result = "lexicalError (gLexicalMessage_" + inScannerClassName + "_" + self.mErrorMessageName + " COMMA_LINE_AND_SOURCE_FILE) ;\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

