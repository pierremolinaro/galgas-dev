<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Types of %!PROJECT_NAME%</title>
<style type="text/css">body {
  font-family: Georgia, sans-serif ;
  font-size: small ;
}

h1 {
  text-align: center ;
}

.selecteur {
  color:green ;
}

a.header_link {
  background-color: #FFFFCC ;
}

a:visited, a:link, a:active{
  color: blue ;
  text-decoration: underline ;
}

a:hover {
  color:green ;
  background-color: #FFFF00 ;
  text-decoration: none ;
}

table.result {
  border: 1px solid #666666 ;
  border-collapse: collapse ;
}

td.result_title {
  font-weight: bold ;
  text-align: center ;
  background-color: yellow ;
  border-top: 2px solid #666666 ;
}

tr.result_line {
  background-color: #EEEEEE ;
  border-top: 1px solid #999999 ;
}

</style>
</head>
<body>
<div>
<h1>Types of %!PROJECT_NAME%</h1>
<p>This document lists all %![[UNIFIED_TYPE_MAP count] string]% defined types, sorted by name.</p>
<p>%
for (key) in FIRST_LETTER_SET
do %<a class="header_link" href="#%![[[key characterAtIndex!0] uint] string]%">%!key%</a>%
between % - %
end
%</p>
<p>%
!TABLE_OF_TYPES_STRING%
</p>
<table class="result">
%for (type_lkey element) in UNIFIED_TYPE_MAP do%
<tr><td colspan="2" class="result_title"><a name="%!type_lkey.string%">@%!type_lkey.string%</a></td></tr>
<tr class="result_line">
  <td>Kind</td>
  <td>
    %if not [element definition].mIsConcrete then%abstract %end
    switch [element definition].mTypeKindEnum
    case classType (*) : %class%
    case enumType : %enum%
    case listType : %list%
    case sortedListType : %sorted list%
    case mapType : %map%
    case sharedMapType : %shared map%
    case sharedMapEntryType : %shared map entry%
    case listMapType : %list map%
    case boolsetType : %boolset%
    case structType : %struct%
    case graphType : %graph%
    case arrayType : %array%
    case externType : %extern%
    case predefinedType : %predefined type%
    case weakReferenceType (*) : %weak reference%
    end%
</td></tr>
%if not [[element definition].mSuperType isNull] then
%<tr class="result_line"><td>Superclass</td><td>%!linkForType (![[element definition].mSuperType definition].mTypeName.string)%</td></tr>% 
end%
<tr class="result_line"><td>Operators</td>
  <td>
    %if [[element definition].mHandledOperatorFlags infixAddOperator] then
      %addition: %!linkForType (!type_lkey.string)% + %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixSubOperator] then
      %substraction: %!linkForType (!type_lkey.string)% - %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixMulOperator] then
      %multiplication: %!linkForType (!type_lkey.string)% * %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixDivOperator] then
      %division: %!linkForType (!type_lkey.string)% / %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixModOperator] then
      %modulo: %!linkForType (!type_lkey.string)% <b>mod</b> %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixShiftOperator] then
      %left shift: %!linkForType (!type_lkey.string)% &lt;&lt; %!linkForType (!"uint")% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
      %left shift: %!linkForType (!type_lkey.string)% &lt;&lt; %!linkForType (!"bigint")% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
      %right shift: %!linkForType (!type_lkey.string)% &gt;&gt; %!linkForType (!"uint")% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
      %right shift: %!linkForType (!type_lkey.string)% &gt;&gt; %!linkForType (!"bigint")% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags prefixPlusOperator] then
      %prefix +: + %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags prefixMinusOperator] then
      %prefix -: - %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags prefixTildeOperator] then
      %bit wise negation: ~ %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixAndOperator] then
      %boolean and: %!linkForType (!type_lkey.string)% &amp; %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixOrOperator] then
      %inclusive or: %!linkForType (!type_lkey.string)% | %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags infixXorOperator] then
      %exclusive or: %!linkForType (!type_lkey.string)% ^ %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags prefixNotOperator] then
      %boolean negation: <b>not</b> %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!type_lkey.string)%<br><br>%
    end
    %equality test: %!linkForType (!type_lkey.string)% == %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!"bool")%<br><br>%
    %inequality test: %!linkForType (!type_lkey.string)% != %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!"bool")%<br><br>%
    if [[element definition].mHandledOperatorFlags isComparable] then
      %lower than test: %!linkForType (!type_lkey.string)% &lt; %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!"bool")%<br><br>%
      %lower or equal test: %!linkForType (!type_lkey.string)% &lt;= %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!"bool")%<br><br>%
      %greater than test: %!linkForType (!type_lkey.string)% &gt; %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!"bool")%<br><br>%
      %greater or equal test: %!linkForType (!type_lkey.string)% &gt;= %!linkForType (!type_lkey.string)% &rarr; %!linkForType (!"bool")%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags plusEqualOperatorWithExpression] then
      %+= instruction: %!linkForType (!type_lkey.string)% += %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags minusEqualOperatorWithExpression] then
      %-= instruction: %!linkForType (!type_lkey.string)% -= %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags mulEqualOperatorWithExpression] then
      %*= instruction: %!linkForType (!type_lkey.string)% *= %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags divEqualOperatorWithExpression] then
      %/= instruction: %!linkForType (!type_lkey.string)% /= %!linkForType (!type_lkey.string)%<br><br>%
    end
    if [[element definition].mHandledOperatorFlags incDecOperator] then
      %incrementation instruction: %!linkForType (!type_lkey.string)% ++<br><br>%
      %decrementation instruction: %!linkForType (!type_lkey.string)% --<br><br>%
    end
  %
</td></tr>
% 
if [[element definition].mAddAssignOperatorArguments length] > 0 then
  %<tr class="result_line"><td>+= !... !...</td><td>%
  for (mFormalSelector mFormalArgumentType mFormalArgumentName) in [element definition].mAddAssignOperatorArguments do
    %<span class="selecteur">?%if mFormalSelector.string != "" then !mFormalSelector.string + ":" end%</span>%
    !linkForType (![mFormalArgumentType definition].mTypeName.string)% % !mFormalArgumentName %<br>%
  end
  %</td></tr>%
end
if [[element definition].mEnumerationDescriptor length] > 0 then
  %<tr class="result_line"><td><b>for</b> constants</td><td>%
  for (mEnumeratedType mEnumerationName) in [element definition].mEnumerationDescriptor do
    !linkForType (![mEnumeratedType definition].mTypeName.string)% %!mEnumerationName%<br>%
  end
  %</td></tr>%
end
if not [[element definition].mTypeForEnumeratedElement isNull] then
  %<tr class="result_line"><td><b>for</b> enumeration type</td><td>%!linkForType (![[element definition].mTypeForEnumeratedElement definition].mTypeName.string)%</td></tr>%
end
#--- Constructors
if [[element definition].mConstructorMap count] > 0 then
  %<tr class="result_line"><td>Constructors</td><td>%
  for (lkey mArgumentTypeList mHasCompilerArgument mReturnedType) in [element definition].mConstructorMap do
    %<b>constructor</b> %!lkey.string
    for (mFormalSelector mFormalArgumentType mFormalArgumentName) in mArgumentTypeList do
      %<br>&nbsp;&nbsp;&nbsp;&nbsp;%
      % <span class="selecteur">?%if mFormalSelector.string != "" then !mFormalSelector.string + ":" end !%</span>%
      linkForType (![mFormalArgumentType definition].mTypeName.string) % % !mFormalArgumentName
    end
    % &rarr; %!linkForType (![mReturnedType definition].mTypeName.string) %<br><br>%
  end
end
#--- Readers
if [[element definition].mGetterMap count] > 0 then
  %<tr class="result_line"><td>Getters</td><td>%
  for (lkey mKind mArgumentTypeList mDeclarationLocation mHasCompilerArgument mReturnedType mQualifier mErrorMessage) in [element definition].mGetterMap do
    switch mKind
    case definedAsMember :
    case definedAsExtension : %(extension) %
    end
    switch mQualifier
    case isVirtualAbstract : %<b>abstract</b> %
    case isBasic :
    case isBasicFinal :
    case isInherited :
    case isVirtual :
    case isVirtualOverriding : %<b>override</b> %
    case isVirtualOverridingAbstract : %<b>abstract override</b> %
    end
    %<b>getter</b> %!lkey.string
    for (mFormalSelector mFormalArgumentType mFormalArgumentName) in mArgumentTypeList do
      %<br>&nbsp;&nbsp;&nbsp;&nbsp;%
      % ?<span class="selecteur">%if mFormalSelector.string != "" then !mFormalSelector.string + ":" end%</span>%
      !linkForType (![mFormalArgumentType definition].mTypeName.string) % % !mFormalArgumentName
    end
    % &rarr; %!linkForType (![mReturnedType definition].mTypeName.string) %<br><br>%
  end
  %</td></tr>%
end
#--- Methods
if [[element definition].mInstanceMethodMap count] > 0 then
  %<tr class="result_line"><td>Methods</td><td>%
  for (lkey mKind mParameterList mDeclarationLocation mHasCompilerArgument mQualifier mutability mErrorMessage) in [element definition].mInstanceMethodMap do
    switch mKind
    case definedAsMember :
    case definedAsExtension : %(extension) %
    end
    switch mQualifier
    case isVirtualAbstract : %<b>abstract</b> %
    case isBasic :
    case isBasicFinal :
    case isInherited :
    case isVirtual :
    case isVirtualOverriding : %<b>override</b> %
    case isVirtualOverridingAbstract : %<b>abstract override</b> %
    end
    %<b>method</b> %!lkey.string
    for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do
      %<br>&nbsp;&nbsp;&nbsp;&nbsp;%
      switch mFormalArgumentPassingMode
      case argumentConstantIn : % <span class="selecteur">?%
      case argumentIn         : % <span class="selecteur">?%
      case argumentInOut      : % <span class="selecteur">?!%
      case argumentOut        : % <span class="selecteur">!%
      end
      if mFormalSelector.string != "" then !mFormalSelector.string + ":" end%</span>%
      !linkForType (![mFormalArgumentType definition].mTypeName.string) % % !mFormalArgumentName
    end
    %<br><br>%
  end
  %</td></tr>%
end
#--- Modifiers
if [[element definition].mSetterMap count] > 0 then
  %<tr class="result_line"><td>Setters</td><td>%
  for (lkey mKind mParameterList mHasCompilerArgument mQualifier mErrorMessage) in [element definition].mSetterMap do
    switch mKind
    case definedAsMember :
    case definedAsExtension : %(extension) %
    end
    switch mQualifier
    case isVirtualAbstract : %<b>abstract</b> %
    case isBasic :
    case isBasicFinal :
    case isInherited :
    case isVirtual :
    case isVirtualOverriding : %<b>override</b> %
    case isVirtualOverridingAbstract : %<b>abstract override</b> %
    end
    %<b>setter</b> %!lkey.string
    for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do
      %<br>&nbsp;&nbsp;&nbsp;&nbsp;%
      switch mFormalArgumentPassingMode
      case argumentConstantIn : % <span class="selecteur">?%
      case argumentIn         : % <span class="selecteur">?%
      case argumentInOut      : % <span class="selecteur">?!%
      case argumentOut        : % <span class="selecteur">!%
      end
      if mFormalSelector.string != "" then !mFormalSelector.string + ":" end%</span>%
      !linkForType (![mFormalArgumentType definition].mTypeName.string) % % !mFormalArgumentName
    end
    %<br><br>%
  end
  %</td></tr>%
end
#--- type proc
if [[element definition].mClassMethodMap count] > 0 then
  %<tr class="result_line"><td>Type procs</td><td>%
  for (lkey mParameterList mHasCompilerArgument) in [element definition].mClassMethodMap do
    %<b>proc</b> @%!lkey.string% %!lkey.string
    for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do
      %<br>&nbsp;&nbsp;&nbsp;&nbsp;%
      switch mFormalArgumentPassingMode
      case argumentConstantIn : % <span class="selecteur">?%
      case argumentIn         : % <span class="selecteur">?%
      case argumentInOut      : % <span class="selecteur">?!%
      case argumentOut        : % <span class="selecteur">!%
      end
      if mFormalSelector.string != "" then !mFormalSelector.string + ":" end%</span>%
      !linkForType (![mFormalArgumentType definition].mTypeName.string) % % !mFormalArgumentName
    end
    %<br><br>%
  end
  %</td></tr>%
end
end%
</table>
</div>
</body>
</html>
