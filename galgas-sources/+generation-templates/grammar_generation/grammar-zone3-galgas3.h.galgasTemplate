//--------------------------------------------------------------------------------------------------
//  GRAMMAR %!GRAMMAR_NAME%
//--------------------------------------------------------------------------------------------------

class cGrammar_%![GRAMMAR_NAME identifierRepresentation]% : %?^
for (mValue) in SYNTAX_COMPONENTS
  do %public cParser_% ![mValue.string identifierRepresentation]
  between %,\n%!^
end
% {
%
for (lkey mNonTerminalIndex mNonterminalSymbolParametersMap) in NON_TERMINAL_MAP do
  %//------------------------------------- '%!lkey.string%' non terminal\n%
  //--- Parse
    %//--- 'parse' label\n%
    %  public: virtual void nt_%![lkey identifierRepresentation]%_parse (%?^
    if HAS_TRANSLATE_FEATURE then
      %String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
    end
    %Lexique_%!LEXIQUE_IDENTIFIER% * inCompiler) ;\n\n%
  //--- indexing
    %//--- indexing\n%
    %  public: virtual void nt_%![lkey identifierRepresentation]%_indexing (Lexique_%!LEXIQUE_IDENTIFIER% * inCompiler) ;\n\n%
  for (label_lkey label_mFormalParametersList) in mNonterminalSymbolParametersMap do
  %//----------- '%!label_lkey.string%' label\n%
  //--- Non terminal declaration
    %  public: virtual void nt_%![lkey identifierRepresentation]%_%![label_lkey identifierRepresentation]% (%?^
    for (mFormalArgumentPassingModeForGrammarAnalysis mGalgasTypeNameForGrammarAnalysis) in label_mFormalParametersList do (IDX)
      if mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentConstantIn] then
        %const GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % inArgument% ![IDX string]
      elsif mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentInOut] then
        %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentOut] then
        %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % & outArgument% ![IDX string]
      else // argumentIn
        %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % inArgument% ![IDX string]
      end
      %,\n%!^
    end
    if HAS_TRANSLATE_FEATURE then
      %String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
    end
    %Lexique_%!LEXIQUE_IDENTIFIER% * inCompiler) ;\n\n%
  //--- Start symbol ?
    if START_SYMBOL_NAME == lkey.string then
      %//--- Start symbol\n%
      %  public: static void _performSourceFileParsing_%![label_lkey identifierRepresentation]% (%?^
      %Compiler * inCompiler,\n%!^
      if HAS_TRANSLATE_FEATURE then
        %String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
      end
      %GGS_lstring inFileName%
      for (mFormalArgumentPassingModeForGrammarAnalysis mGalgasTypeNameForGrammarAnalysis) in label_mFormalParametersList do (IDX)
        %,\n%!^
        if mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentConstantIn] then
          %const GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % inArgument% ![IDX string]
        elsif mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentInOut] then
          %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentOut] then
          %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % & outArgument% ![IDX string]
        else // argumentIn
          %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % inArgument% ![IDX string]
        end
      end
      %\n%!^%COMMA_LOCATION_ARGS) ;\n\n%
      %  public: static void _performSourceStringParsing_%![label_lkey identifierRepresentation]% (%?^
      %Compiler * inCompiler,\n%!^
      if HAS_TRANSLATE_FEATURE then
        %String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
      end
      %GGS_string inSourceString,\n%!^
      %GGS_string inNameString%
      for (mFormalArgumentPassingModeForGrammarAnalysis mGalgasTypeNameForGrammarAnalysis) in label_mFormalParametersList do (IDX)
        %,\n%!^
        if mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentConstantIn] then
          %const GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % inArgument% ![IDX string]
        elsif mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentInOut] then
          %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingModeForGrammarAnalysis == [@formalArgumentPassingModeAST argumentOut] then
          %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % & outArgument% ![IDX string]
        else // argumentIn
          %GGS_% ![mGalgasTypeNameForGrammarAnalysis identifierRepresentation] % inArgument% ![IDX string]
        end
      end
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    end
  end
 //--- Start symbol ?
  if START_SYMBOL_NAME == lkey.string then
    %//--- Indexing\n%
    %  public: static void performIndexing (%?^%Compiler * inCompiler,\n%
    !^%const String & inSourceFilePath) ;\n\n%
    %//--- Only lexical analysis\n%
    %  public: static void performOnlyLexicalAnalysis (%?^%Compiler * inCompiler,\n%
    !^%const String & inSourceFilePath) ;\n\n%
    %//--- Only syntax analysis\n%
    %  public: static void performOnlySyntaxAnalysis (%?^%Compiler * inCompiler,\n%
    !^%const String & inSourceFilePath) ;\n\n%
  end
end

for (mSyntaxComponentName mNonTerminalToAddCount) in ADDED_NON_TERMINAL_LIST
  do %  public: virtual int32_t select_%![mSyntaxComponentName identifierRepresentation]%_%![mNonTerminalToAddCount string]% (Lexique_%!LEXIQUE_IDENTIFIER% *) ;\n%
  between %\n%
end
%} ;

//--------------------------------------------------------------------------------------------------
