//--------------------------------------------------------------------------------------------------
//
//%!"LEXIQUE " + LEXIQUE_IDENTIFIER%
//
//--------------------------------------------------------------------------------------------------

#include "Lexique.h"

//--------------------------------------------------------------------------------------------------
//                    E X T E R N    R O U T I N E S
//--------------------------------------------------------------------------------------------------
%
  for (lkey mLexicalRoutineFormalArgumentList mErrorMessageList mIsExtern) in LEXIQUE_ANALYSIS_CONTEXT.mLexicalRoutineMessageMap do
    if mIsExtern then
      %\nvoid scanner_routine_%!lkey.string% (Lexique & inLexique%
      for (mLexicalFormalArgumentMode mLexicalFormalArgumentType mArgumentNameForComment) in mLexicalRoutineFormalArgumentList do
        %,\n                %![mLexicalFormalArgumentMode cppConstInFormalArgument]
                             ![mLexicalFormalArgumentType cppTypeName]
                             ![mLexicalFormalArgumentMode cppReferenceInFormalArgument]
                             % %!mArgumentNameForComment
      end
      for (mValue) in mErrorMessageList do
        %,\n                const char * %!mValue
      end
      %) ;\n%
    end
  end
%
//--------------------------------------------------------------------------------------------------
//                    E X T E R N    F U N C T I O N S
//--------------------------------------------------------------------------------------------------
%
  for (lkey mLexicalTypeList mReturnedLexicalType mReplacementFunctionName mIsExtern) in LEXIQUE_ANALYSIS_CONTEXT.mLexicalFunctionMap do
    if mIsExtern then
      %\n%![mReturnedLexicalType cppTypeName]% scanner_function_%!lkey.string% (Lexique & inLexique%
      for (mLexicalType mArgumentNameForComment) in mLexicalTypeList do
        %,\n                const %![mLexicalType cppTypeName]% %!mArgumentNameForComment
      end
      %) ;\n%
    end
  end
%
//--------------------------------------------------------------------------------------------------
//                       T O K E N    C L A S S
//--------------------------------------------------------------------------------------------------

class cTokenFor_%!LEXIQUE_IDENTIFIER% : public cToken {
%
  for (lkey mLexicalType) in LEXIQUE_ANALYSIS_CONTEXT.mLexicalAttributeMap do
    %  public: %![mLexicalType cppTypeName]% mLexicalAttribute_%![lkey identifierRepresentation]% ;\n%
  end
%
  public: cTokenFor_%!LEXIQUE_IDENTIFIER% (void) ;
} ;

//--------------------------------------------------------------------------------------------------
//                     S C A N N E R    C L A S S
//--------------------------------------------------------------------------------------------------

class Lexique_%!LEXIQUE_IDENTIFIER% : public Lexique {
//--- Constructors
  public: Lexique_%!LEXIQUE_IDENTIFIER% (Compiler * inCallerCompiler,
                       const String & inSourceFileName
                       COMMA_LOCATION_ARGS) ;

  public: Lexique_%!LEXIQUE_IDENTIFIER% (Compiler * inCallerCompiler,
                       const String & inSourceString,
                       const String & inStringForError
                       COMMA_LOCATION_ARGS) ;

//--- Instrospection
  public: static GGS_stringlist symbols (LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    SharedObject::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected: virtual ~ Lexique_%!LEXIQUE_IDENTIFIER% (void) { }
  #endif
%if [TEMPLATE_DELIMITOR_LIST count] > 0 then%
//--- Scanner mode for template scanner
  private: int32_t mMatchedTemplateDelimiterIndex ;
%end%


//--- Terminal symbols enumeration
  public: enum {kToken_%
    for (mTerminalName mSentAttributeList mSyntaxErrorMessage mIsEndOfTemplateMark mAtomicSelection mStyleIndex) in LEXIQUE_ANALYSIS_CONTEXT.mTerminalList do (idx)
      %,\n   kToken_%![mTerminalName.string identifierRepresentation]% /* %![idx + 1 string]% */ %
    end
  %} ;
%
  for (mName mStyle mSyntaxErrorMessage mSentAttributeList mEntryList) in DELIMITOR_LIST_LIST do
    %\n//--- Key words table '%!mName.string%'\n%
    %  public: static int32_t search_into_%!mName.string% (const String & inSearchedString) ;\n%
  end
%  

//--- Assign from attribute
%
  for (lkey mLexicalType) in LEXIQUE_ANALYSIS_CONTEXT.mLexicalAttributeMap do
    %  public: GGS_l%![[mLexicalType lexicalTypeBaseName] identifierRepresentation]% synthetizedAttribute_%![lkey identifierRepresentation]% (void) const ;\n%
  end
%

//--- Attribute access
%
  for (lkey mLexicalType) in LEXIQUE_ANALYSIS_CONTEXT.mLexicalAttributeMap do
    %  public: %![mLexicalType cppTypeName]% attributeValue_%![lkey identifierRepresentation]% (void) const ;\n%
  end
%

//--- indexing keys
%
  for (mIndexName mIndexComment) in INDEXING_LIST
  before %  public: enum {%
  do %\n    kIndexing_%![mIndexName identifierRepresentation]
  between %,%
  after %\n  } ;\n%
  end
%
//--- Parse lexical token
  protected: void internalParseLexicalToken (cTokenFor_%!LEXIQUE_IDENTIFIER% & token) ;
  protected: virtual bool parseLexicalToken (void) override ;

//--- Get terminal message
  protected: virtual String getMessageForTerminal (const int32_t inTerminalSymbol) const override ;

//--- Get terminal count
  public: virtual int32_t terminalVocabularyCount (void) const override { return %![[LEXIQUE_ANALYSIS_CONTEXT.mTerminalList count] string]% ; }

//--- Get Token String
  public: virtual String getCurrentTokenString (const cToken * inTokenPtr) const override ;

//--- Enter Token
  protected: void enterToken (cTokenFor_%!LEXIQUE_IDENTIFIER% & ioToken) ;

//--- Style name for Latex
  protected: virtual String styleNameForIndex (const uint32_t inStyleIndex) const override ;
  protected: virtual uint32_t styleIndexForTerminal (const int32_t inTerminalIndex) const override ;
} ;

