
import AppKit

//--------------------------------------------------------------------------------------------------
//                           Template Replacements
//--------------------------------------------------------------------------------------------------

%if [TEMPLATE_REPLACEMENT_LIST count] > 0 then
%fileprivate let kTemplateReplacementArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% : [String] = [
%
for (mMatchString mReplacementString mReplacementFunction) in TEMPLATE_REPLACEMENT_LIST
  do %  %![mMatchString utf8RepresentationEscapingQuestionMark]
  between %,\n%
end%
]
%end%
//--------------------------------------------------------------------------------------------------
//                           Template Delimiters
//--------------------------------------------------------------------------------------------------

%if [TEMPLATE_DELIMITOR_LIST count] > 0 then
%fileprivate let kTemplateDefinitionArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% : [SWIFT_TemplateDelimiter] = [
%
for (mStartString mEndString mPreservesStartDelimiter) in TEMPLATE_DELIMITOR_LIST
  do  %  SWIFT_TemplateDelimiter (startString: %![mStartString utf8RepresentationEscapingQuestionMark]%, endString: %
      if [mEndString count] == 0 then
        %nil%
      else
        ![mEndString utf8RepresentationEscapingQuestionMark]
      end
      %, discardStartString: %
      ![not mPreservesStartDelimiter cString]
      %)%
  between %,\n%
end%
]
%end%
//--------------------------------------------------------------------------------------------------
//            Terminal Symbols as end of script in template mark
//--------------------------------------------------------------------------------------------------

% for (mTerminalName 2* mIsEndOfTemplateMark 2*) in TERMINAL_LIST
    before %fileprivate let kEndOfScriptInTemplateArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% : [Bool] = [\n%
    do %  %![mIsEndOfTemplateMark cString]% /* %!mTerminalName.string% */%
    between %,\n%
    after %\n]\n%
  end
%

//--------------------------------------------------------------------------------------------------

func %!LEXIQUE_CLASS_NAME%_lexiqueIdentifier () -> String {
  return "%!LEXIQUE_CLASS_NAME%"
}

//--------------------------------------------------------------------------------------------------
//                     S C A N N E R    C L A S S
//--------------------------------------------------------------------------------------------------

class SWIFT_Lexique_%!LEXIQUE_CLASS_NAME% : SWIFT_Lexique_%!SUPER_LEXIQUE_CLASS_NAME% {

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func isTemplateLexique () -> Bool {
    return true
  }

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //   Lexical analysis
  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override func parseLexicalTokenForLexicalColoring () -> SWIFT_Token {
    let startLocation = self.currentLocation
    if let idx = self.mEndTemplateDelimiterIndex, self.testForInputString (kTemplateDefinitionArray_galgasTemplateScanner [idx].endString, advance: true) {
      self.mEndTemplateDelimiterIndex = nil
    }
    if self.mEndTemplateDelimiterIndex != nil {
      return super.parseLexicalTokenForLexicalColoring ()
    }else{ // In template string, find code start string
      while self.mEndTemplateDelimiterIndex == nil, self.currentChar != 0 {
        var idx = 0
        while self.mEndTemplateDelimiterIndex == nil, idx < kTemplateDefinitionArray_galgasTemplateScanner.count {
          if self.testForInputString (kTemplateDefinitionArray_galgasTemplateScanner [idx].startString, advance: true) {
            self.mEndTemplateDelimiterIndex = idx
          }
          idx += 1
        }
        if self.mEndTemplateDelimiterIndex == nil {
          self.advance ()
        }
      }
      return SWIFT_Token (
        range: NSRange (location: startLocation, length: self.currentLocation - startLocation),
        tokenCode: %!SUPER_LEXIQUE_CLASS_NAME%_2_TEMPLATE,
        templateDelimiterIndex: self.mEndTemplateDelimiterIndex
      )
    }
  }
//    var styleIndex : UInt8 = 0
//    var tokenCode : UInt16 = 0
//    let startLocation = self.currentLocation
//    while styleIndex == 0, self.currentChar != 0 {
//      let tokenStartLocation = self.currentLocation
//      if let idx = matchedTemplateDelimiterIndex, !kTemplateDefinitionArray_galgasTemplateScanner [idx].startString.isEmpty {
//        let foundEndDelimitor = self.testForInputString (kTemplateDefinitionArray_galgasTemplateScanner [idx].endString, advance: true)
//        if foundEndDelimitor {
//          matchedTemplateDelimiterIndex = nil
//        }
//      }
//      while matchedTemplateDelimiterIndex != nil, self.currentChar != 0 {
//        self.searchForReplacementPattern (kTemplateReplacementArray_galgasTemplateScanner)
//        matchedTemplateDelimiterIndex = self.findTemplateDelimiterIndex (kTemplateDefinitionArray_galgasTemplateScanner)
//        if matchedTemplateDelimiterIndex == nil {
//          self.advance ()
//          styleIndex = -2
//        }
//      }
//      if matchedTemplateDelimiterIndex != nil, styleIndex == 0, self.currentChar != 0 {
//        let s = super.parseLexicalTokenForLexicalColoring ()
//        styleIndex = s.styleIndex
//        tokenCode = s.token
//      }
//      if styleIndex > 0, kEndOfScriptInTemplateArray_galgasTemplateScanner [Int (styleIndex) - 1] {
//        matchedTemplateDelimiterIndex = nil
//      }
//    //--- Error ?
////      if !scanningOk {
////        styleIndex = Int8 (self.styleCount ())
////        self.advance ()
////      }
//    }
//  }
  
  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//
//                           init
//
//--------------------------------------------------------------------------------------------------

/* - (instancetype) init {
  self = [super init] ;
  if (self) {
    noteObjectAllocation (self) ;
  }
% if [TEMPLATE_DELIMITOR_LIST count] > 0 then
%  if (nil == kTemplateDefinitionArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]%) {\n%
%    kTemplateDefinitionArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% = [NSArray arrayWithObjects:\n%
  for (mStartString mEndString mPreservesStartDelimiter) in TEMPLATE_DELIMITOR_LIST do
  %      [[OC_GGS_TemplateDelimiter alloc] initWithStartString:@%![mStartString utf8RepresentationEscapingQuestionMark]% endString:%
      if [mEndString count] == 0 then
        %nil%
      else
        %@%![mEndString utf8RepresentationEscapingQuestionMark]
      end
      % discardStartString:%
      ![not mPreservesStartDelimiter ocString]
      %],\n%
  end
  %      nil\n%
  %    ] ;\n%
  %  }\n%
  end
  if [TEMPLATE_REPLACEMENT_LIST count] > 0 then
  %  if (nil == kTemplateReplacementArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]%) {\n%
  %    kTemplateReplacementArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% = [NSArray arrayWithObjects:\n%
  for (mMatchString mReplacementString mReplacementFunction) in TEMPLATE_REPLACEMENT_LIST do
    %      @%![mMatchString utf8RepresentationEscapingQuestionMark]%,\n%
  end
  %      nil\n%
  %    ] ;\n%
  %  }\n%
  end
%  return self ;
}
*/

//--------------------------------------------------------------------------------------------------

/* - (void) dealloc {
  noteObjectDeallocation (self) ;
} */

//--------------------------------------------------------------------------------------------------
//
//            Terminal Symbols as end of script in template mark
//
//--------------------------------------------------------------------------------------------------

/*
% for (mTerminalName mSentAttributeList mSyntaxErrorMessage mIsEndOfTemplateMark mAtomicSelection mStyleIndex) in TERMINAL_LIST
    before %static const BOOL kEndOfScriptInTemplateArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% [%![[TERMINAL_LIST count] string]%] = {\n%
    do %  %![mIsEndOfTemplateMark ocString]% /* %!mTerminalName.string% */%
    between %,\n%
    after %\n} ;\n%
  end
% */

//--------------------------------------------------------------------------------------------------
//
//               P A R S E    L E X I C A L    T O K E N
//
//--------------------------------------------------------------------------------------------------

/* - (void) parseLexicalTokenForLexicalColoring {
  BOOL scanningOk = YES ;
  mTokenCode = 0 ;
  while ((mTokenCode == 0) && (mCurrentChar != '\0')) {
    mTokenStartLocation = mCurrentLocation ;
    if ((mMatchedTemplateDelimiterIndex >= 0) && ([[kTemplateDefinitionArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% objectAtIndex:(NSUInteger) mMatchedTemplateDelimiterIndex] startString].length > 0)) {
      const BOOL foundEndDelimitor = [self testForInputString:[[kTemplateDefinitionArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% objectAtIndex:(NSUInteger) mMatchedTemplateDelimiterIndex] endString] advance:YES] ;
      if (foundEndDelimitor) {
        mMatchedTemplateDelimiterIndex = -1 ;
      }
    }
    while ((mMatchedTemplateDelimiterIndex < 0) && (mCurrentChar != '\0')) {
      [self searchForReplacementPattern:kTemplateReplacementArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]%] ;
      mMatchedTemplateDelimiterIndex = [self findTemplateDelimiterIndex:kTemplateDefinitionArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]%] ;
      if (mMatchedTemplateDelimiterIndex < 0) {
        [self advance] ;
        mTokenCode = -2 ;
      }
    }
    if ((mMatchedTemplateDelimiterIndex >= 0) && (mTokenCode == 0) && (mCurrentChar != '\0') && scanningOk) {
      scanningOk = [self internalParseLexicalTokenForLexicalColoring] ;
    }
    if ((mTokenCode > 0) && kEndOfScriptInTemplateArray_%![LEXIQUE_CLASS_NAME identifierRepresentation]% [mTokenCode - 1]) {
      mMatchedTemplateDelimiterIndex = -1 ;
    }
  //--- Error ?
    if (! scanningOk) {
      mTokenCode = -1 ;
      [self advance] ;
    }
  }
}
*/ 
//--------------------------------------------------------------------------------------------------
//
//                I S    T E M P L A T E    L E X I Q U E
//
//--------------------------------------------------------------------------------------------------

/* - (BOOL) isTemplateLexique {
  return YES ;
} */

//--------------------------------------------------------------------------------------------------
//
//         L E X I Q U E   I D E N T I F I E R
//
//--------------------------------------------------------------------------------------------------

/* - (NSString *) lexiqueIdentifier {
  return @"%!LEXIQUE_CLASS_NAME%" ;
} */

//--------------------------------------------------------------------------------------------------

// @end

