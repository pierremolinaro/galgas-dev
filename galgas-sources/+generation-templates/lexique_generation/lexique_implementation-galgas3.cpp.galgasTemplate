//----------------------------------------------------------------------------------------------------------------------
//
//     L E X I Q U E                                                                             
//
//----------------------------------------------------------------------------------------------------------------------

#include "strings/unicode_character_cpp.h"
#include "galgas2/scanner_actions.h"
#include "galgas2/cLexiqueIntrospection.h"

//----------------------------------------------------------------------------------------------------------------------

cTokenFor_%!LEXIQUE_IDENTIFIER%::cTokenFor_%!LEXIQUE_IDENTIFIER% (void)%
  for (lkey mLexicalType) in LEXICAL_ATTRIBUTE_MAP
  before % :\n%
  do %mLexicalAttribute_%![lkey identifierRepresentation]% ()%
  between %,\n%
  end
% {
}

//----------------------------------------------------------------------------------------------------------------------

C_Lexique_%!LEXIQUE_IDENTIFIER%::C_Lexique_%!LEXIQUE_IDENTIFIER% (%?^%C_Compiler * inCallerCompiler,
                %!^%const C_String & inSourceFileName
                %!^%COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inSourceFileName COMMA_THERE)%
  if [TEMPLATE_DELIMITOR_LIST count] > 0 then
    %,\nmMatchedTemplateDelimiterIndex (-1)%
  end
% {
}

//----------------------------------------------------------------------------------------------------------------------

C_Lexique_%!LEXIQUE_IDENTIFIER%::C_Lexique_%!LEXIQUE_IDENTIFIER% (%?^%C_Compiler * inCallerCompiler,
                %!^%const C_String & inSourceString,
                %!^%const C_String & inStringForError
                %!^%COMMA_LOCATION_ARGS) :
C_Lexique (inCallerCompiler, inSourceString, inStringForError COMMA_THERE)%
  if [TEMPLATE_DELIMITOR_LIST count] > 0 then
    %,\nmMatchedTemplateDelimiterIndex (-1)%
  end
% {
}

//----------------------------------------------------------------------------------------------------------------------
//                        Lexical error message list                                             
//----------------------------------------------------------------------------------------------------------------------
%
  for (lkey mLexicalMessage mMessageIsUsed) in LEXICAL_MESSAGE_MAP do
   %\nstatic const char * gLexicalMessage_%!LEXIQUE_IDENTIFIER%_%!lkey.string% = % ![mLexicalMessage utf8RepresentationEscapingQuestionMark]% ;\n%
  end
%
//----------------------------------------------------------------------------------------------------------------------
//                getMessageForTerminal                                                          
//----------------------------------------------------------------------------------------------------------------------

C_String C_Lexique_%!LEXIQUE_IDENTIFIER%::getMessageForTerminal (const int32_t inTerminalIndex) const {
  C_String result = "<unknown>" ;
  if ((inTerminalIndex >= 0) && (inTerminalIndex < %![[TERMINAL_LIST count] + 1 string]%)) {
    static const char * syntaxErrorMessageArray [%![[TERMINAL_LIST count] + 1 string]%] = {kEndOfSourceLexicalErrorMessage%
  for (* * mSyntaxErrorMessage * * *) in TERMINAL_LIST do
   %,\n        %![mSyntaxErrorMessage utf8RepresentationEscapingQuestionMark]
  end
%\n    } ;
    result = syntaxErrorMessageArray [inTerminalIndex] ;
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------
//                      U N I C O D E    S T R I N G S                                           
//----------------------------------------------------------------------------------------------------------------------
%
  for (key) in STRINGS_IN_EXPLICIT_RULES do
   if [key count] > 0 then
   %\n//--- Unicode string for '$%![key identifierRepresentation]%$'\n%
   %static const utf32 kUnicodeString_%!LEXIQUE_IDENTIFIER%_%![key identifierRepresentation]% [] = % ![key utf32Representation]% ;\n%
   end
  end
%
%
  for (tokenList_lkey tokenList_mExplicitTokenListMap tokenList_mTokenSortedList tokenList_mShouldBeGenerated) in LEXICAL_TOKEN_LIST_MAP do
    %//----------------------------------------------------------------------------------------------------------------------\n%
    %//             Key words table '%!tokenList_lkey.string%'      \n%
    %//----------------------------------------------------------------------------------------------------------------------\n%
    %\nstatic const int32_t ktable_size_%!LEXIQUE_IDENTIFIER%_%!tokenList_lkey.string% = %![[tokenList_mExplicitTokenListMap count] string]% ;\n\n%
    %static const C_unicode_lexique_table_entry ktable_for_%!LEXIQUE_IDENTIFIER%_%!tokenList_lkey.string% [ktable_size_%!LEXIQUE_IDENTIFIER%_%!tokenList_lkey.string%] = {\n%
      for (mLength mName mTerminalName) in tokenList_mTokenSortedList
      do %  C_unicode_lexique_table_entry (kUnicodeString_%!LEXIQUE_IDENTIFIER%_%![mName identifierRepresentation]%, %![mLength string]%, C_Lexique_%!LEXIQUE_IDENTIFIER%::kToken_%![mTerminalName identifierRepresentation]%)%
      between %,\n%
      end
    %\n} ;\n\n%
    %int32_t C_Lexique_%!LEXIQUE_IDENTIFIER%::search_into_%!tokenList_lkey.string% (const C_String & inSearchedString) {\n%
    %  return searchInList (inSearchedString, ktable_for_%!LEXIQUE_IDENTIFIER%_%!tokenList_lkey.string%, ktable_size_%!LEXIQUE_IDENTIFIER%_%!tokenList_lkey.string%) ;\n%
    %}\n\n%
  end
%
//----------------------------------------------------------------------------------------------------------------------
//                          getCurrentTokenString                                                
//----------------------------------------------------------------------------------------------------------------------

C_String C_Lexique_%!LEXIQUE_IDENTIFIER%::getCurrentTokenString (const cToken * inTokenPtr) const {
  const cTokenFor_%!LEXIQUE_IDENTIFIER% * ptr = (const cTokenFor_%!LEXIQUE_IDENTIFIER% *) inTokenPtr ;
  C_String s ;
  if (ptr == nullptr) {
    s.appendCString("$$") ;
  }else{
    switch (ptr->mTokenCode) {
    case kToken_:
      s.appendCString("$$") ;
      break ;
%for (mTerminalName mSentAttributeList mSyntaxErrorMessage mIsEndOfTemplateMark mAtomicSelection mStyleIndex) in TERMINAL_LIST do
   %    case kToken_%![mTerminalName.string identifierRepresentation]%:\n%
   %      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n%
   %      s.appendCString (%![mTerminalName.string utf8RepresentationEscapingQuestionMark]%) ;\n%
   %      s.appendUnicodeCharacter (TO_UNICODE ('$') COMMA_HERE) ;\n%
   for (mLexicalFormalSelector mLexicalAttributeName mLexicalType) in mSentAttributeList do
     %      s.appendUnicodeCharacter (TO_UNICODE (' ') COMMA_HERE) ;\n%
     %      s.%![mLexicalType appendMethodName]% (ptr->mLexicalAttribute_%![mLexicalAttributeName identifierRepresentation] ![mLexicalType appendArgumentOfMethod]%) ;\n%
   end
   %      break ;\n%
end
%    default:
      break ;
    }
  }
  return s ;
}

//----------------------------------------------------------------------------------------------------------------------
//                           Template Delimiters                                                 
//----------------------------------------------------------------------------------------------------------------------

% for (mStartString mEndString mPreservesStartDelimiter) in LEXIQUE_ANALYSIS_CONTEXT.mTemplateDelimitorList
    before %static const cTemplateDelimiter %!LEXIQUE_IDENTIFIER%_kTemplateDefinitionArray [%![[TEMPLATE_DELIMITOR_LIST count] string]%] = {\n%
    do %  cTemplateDelimiter (kUnicodeString_%!LEXIQUE_IDENTIFIER%_%![mStartString identifierRepresentation]%, %![[mStartString count] string]%, %
      if [mEndString count] == 0 then
        %nullptr, 0,%
      else
        %kUnicodeString_%!LEXIQUE_IDENTIFIER%_%![mEndString identifierRepresentation]%, %![[mEndString count] string]%,%
      end
      % nullptr, %
      ![not mPreservesStartDelimiter cString]
      %)%
    between %,\n%
    after %\n} ;\n%
  end
%
//----------------------------------------------------------------------------------------------------------------------
//                           Template Replacements                                               
//----------------------------------------------------------------------------------------------------------------------

% for (mMatchString mReplacementString mReplacementFunction) in TEMPLATE_REPLACEMENT_LIST
    before %static const cTemplateDelimiter %!LEXIQUE_IDENTIFIER%_kTemplateReplacementArray [%![[TEMPLATE_REPLACEMENT_LIST count] string]%] = {\n%
    do
      %  cTemplateDelimiter (kUnicodeString_%!LEXIQUE_IDENTIFIER%_%![mMatchString identifierRepresentation]%, %![[mMatchString count] string]%, %
      %kUnicodeString_%!LEXIQUE_IDENTIFIER%_%![mReplacementString identifierRepresentation]%, %![[mReplacementString count] string]%, %
      if [mReplacementFunction count] == 0 then
        %nullptr%
      else
        %scanner_routine_%!mReplacementFunction.string
      end
      %, true)%
    between %,\n%
    after %\n} ;\n%
  end
%
//----------------------------------------------------------------------------------------------------------------------
//            Terminal Symbols as end of script in template mark                                 
//----------------------------------------------------------------------------------------------------------------------

% if [TEMPLATE_DELIMITOR_LIST count] > 0 then
    for (mTerminalName mSentAttributeList mSyntaxErrorMessage mIsEndOfTemplateMark mAtomicSelection mStyleIndex) in LEXIQUE_ANALYSIS_CONTEXT.mTerminalList
      before %static const bool %!LEXIQUE_IDENTIFIER%_kEndOfScriptInTemplateArray [%![[LEXIQUE_ANALYSIS_CONTEXT.mTerminalList count] string]%] = {\n%
      do %  %![mIsEndOfTemplateMark cString]% /* %!mTerminalName.string% */%
      between %,\n%
      after %\n} ;\n%
    end
  end
%
//----------------------------------------------------------------------------------------------------------------------
//               INTERNAL PARSE LEXICAL TOKEN                                         
//----------------------------------------------------------------------------------------------------------------------

void C_Lexique_%!LEXIQUE_IDENTIFIER%::internalParseLexicalToken (cTokenFor_%!LEXIQUE_IDENTIFIER% & token) {
%IF USE_LOOP_LOCAL_VARIABLE THEN
%  bool loop = true ;
%
 end
  for (lkey mLexicalType) in LEXICAL_ATTRIBUTE_MAP do
    %  token.mLexicalAttribute_%![lkey identifierRepresentation] ![mLexicalType initialization] % ;\n%
  end
%  mTokenStartLocation = mCurrentLocation ;
  try{
%
  block 4 :
    for (mLexicalRule) in LEXICAL_RULE_LIST do
      ![mLexicalRule generateLexicalRuleCode !LEXIQUE_IDENTIFIER !LEXIQUE_ANALYSIS_CONTEXT]
    end
  end
%if (testForInputUTF32Char (TO_UNICODE ('\0'))) { // End of source text ? 
      token.mTokenCode = kToken_ ; // Empty string code
    }else{ // Unknown input character
      unknownCharacterLexicalError (LINE_AND_SOURCE_FILE) ;
      token.mTokenCode = -1 ; // No token
      advance () ; // ... go throught unknown character
    }
  }catch (const C_lexicalErrorException &) {
    token.mTokenCode = -1 ; // No token
    advance () ; // ... go throught unknown character
  }
}

//----------------------------------------------------------------------------------------------------------------------
//               P A R S E    L E X I C A L    T O K E N                                         
//----------------------------------------------------------------------------------------------------------------------

bool C_Lexique_%!LEXIQUE_IDENTIFIER%::parseLexicalToken (void) {
  cTokenFor_%!LEXIQUE_IDENTIFIER% token ;
  token.mTokenCode = -1 ;
  while ((token.mTokenCode < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
%
  if [TEMPLATE_DELIMITOR_LIST count] > 0 then
%    if ((mMatchedTemplateDelimiterIndex >= 0)
     && (%!LEXIQUE_IDENTIFIER%_kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength > 0)
     && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      const bool foundEndDelimitor = testForInputUTF32String (%!LEXIQUE_IDENTIFIER%_kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndString,
                                                              %!LEXIQUE_IDENTIFIER%_kTemplateDefinitionArray [mMatchedTemplateDelimiterIndex].mEndStringLength,
                                                              true) ;
      if (foundEndDelimitor) {
        mMatchedTemplateDelimiterIndex = -1 ;
      }
    }
    while ((mMatchedTemplateDelimiterIndex < 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      int32_t replacementIndex = 0 ;
      while (replacementIndex >= 0) {
        replacementIndex = findTemplateDelimiterIndex (%!LEXIQUE_IDENTIFIER%_kTemplateReplacementArray, %![[TEMPLATE_REPLACEMENT_LIST count] string]%) ;
        if (replacementIndex >= 0) {
          if (%!LEXIQUE_IDENTIFIER%_kTemplateReplacementArray [replacementIndex].mReplacementFunction == nullptr) {
            token.mTemplateStringBeforeToken << %!LEXIQUE_IDENTIFIER%_kTemplateReplacementArray [replacementIndex].mEndString ;
          }else{
            C_String s ;
            while (notTestForInputUTF32String (%!LEXIQUE_IDENTIFIER%_kTemplateReplacementArray [replacementIndex].mEndString,
                                               %!LEXIQUE_IDENTIFIER%_kTemplateReplacementArray [replacementIndex].mEndStringLength,
                                               kEndOfSourceLexicalErrorMessage
                                               COMMA_HERE)) {
              s.appendUnicodeCharacter (previousChar () COMMA_HERE) ;
            }
            %!LEXIQUE_IDENTIFIER%_kTemplateReplacementArray [replacementIndex].mReplacementFunction (*this, s, token.mTemplateStringBeforeToken) ;
          }
        }
      }
      mMatchedTemplateDelimiterIndex = findTemplateDelimiterIndex (%!LEXIQUE_IDENTIFIER%_kTemplateDefinitionArray, %![[TEMPLATE_DELIMITOR_LIST count] string]%) ;
      if (mMatchedTemplateDelimiterIndex < 0) {
        token.mTemplateStringBeforeToken.appendUnicodeCharacter (mCurrentChar COMMA_HERE) ;
        advance () ;
      }
    }
    if ((mMatchedTemplateDelimiterIndex >= 0) && (UNICODE_VALUE (mCurrentChar) != '\0')) {
      internalParseLexicalToken (token) ;
    }
    if ((token.mTokenCode > 0) && %!LEXIQUE_IDENTIFIER%_kEndOfScriptInTemplateArray [token.mTokenCode - 1]) {
      mMatchedTemplateDelimiterIndex = -1 ;
    }
  %else
  %    internalParseLexicalToken (token) ;%
  end%
  }
  if (UNICODE_VALUE (mCurrentChar) == '\0') {
    token.mTokenCode = 0 ;
    enterToken (token) ;
  }
  return token.mTokenCode > 0 ;
}

//----------------------------------------------------------------------------------------------------------------------
//                         E N T E R    T O K E N                                                
//----------------------------------------------------------------------------------------------------------------------

void C_Lexique_%!LEXIQUE_IDENTIFIER%::enterToken (cTokenFor_%!LEXIQUE_IDENTIFIER% & ioToken) {
  cTokenFor_%!LEXIQUE_IDENTIFIER% * ptr = nullptr ;
  macroMyNew (ptr, cTokenFor_%!LEXIQUE_IDENTIFIER% ()) ;
  ptr->mTokenCode = ioToken.mTokenCode ;
  // ptr->mIsOptional = ioToken.mIsOptional ;
  ptr->mStartLocation = mTokenStartLocation ;
  ptr->mEndLocation = mTokenEndLocation ;
  ptr->mTemplateStringBeforeToken = ioToken.mTemplateStringBeforeToken ;
  ioToken.mTemplateStringBeforeToken = "" ;
%
  for (lkey mLexicalType) in LEXICAL_ATTRIBUTE_MAP do
    %  ptr->mLexicalAttribute_%![lkey identifierRepresentation]% = ioToken.mLexicalAttribute_%![lkey identifierRepresentation]% ;\n%
  end
%  enterTokenFromPointer (ptr) ;
}

//----------------------------------------------------------------------------------------------------------------------
//               A T T R I B U T E   A C C E S S                                                 
%
  for (lkey mLexicalType) in LEXICAL_ATTRIBUTE_MAP do
    %//----------------------------------------------------------------------------------------------------------------------\n\n%
    ![mLexicalType cppTypeName]% C_Lexique_%!LEXIQUE_IDENTIFIER%::attributeValue_%![lkey identifierRepresentation]% (void) const {\n%
    %  cTokenFor_%!LEXIQUE_IDENTIFIER% * ptr = (cTokenFor_%!LEXIQUE_IDENTIFIER% *) currentTokenPtr (HERE) ;\n%
    %  return ptr->mLexicalAttribute_%![lkey identifierRepresentation]% ;\n%
    %}\n\n%
  end
%//----------------------------------------------------------------------------------------------------------------------
//         A S S I G N    F R O M    A T T R I B U T E                                           
%
  for (lkey mLexicalType) in LEXICAL_ATTRIBUTE_MAP do
    %//----------------------------------------------------------------------------------------------------------------------\n\n%
    %GALGAS_l%![[mLexicalType lexicalTypeBaseName] identifierRepresentation]% C_Lexique_%!LEXIQUE_IDENTIFIER%::synthetizedAttribute_%![lkey identifierRepresentation]% (void) const {\n%
    %  cTokenFor_%!LEXIQUE_IDENTIFIER% * ptr = (cTokenFor_%!LEXIQUE_IDENTIFIER% *) currentTokenPtr (HERE) ;\n%
    %  macroValidSharedObject (ptr, cTokenFor_%!LEXIQUE_IDENTIFIER%) ;\n%
    %  GALGAS_location currentLocation (ptr->mStartLocation, ptr->mEndLocation, sourceText ()) ;\n%
    %  GALGAS_%![[mLexicalType lexicalTypeBaseName] identifierRepresentation]% value (ptr->mLexicalAttribute_%![lkey identifierRepresentation]%) ;\n%
    %  GALGAS_l%![[mLexicalType lexicalTypeBaseName] identifierRepresentation]% result (value, currentLocation) ;\n%
    %  return result ;\n%
    %}\n\n%
  end
%//----------------------------------------------------------------------------------------------------------------------
//                         I N T R O S P E C T I O N                                             
//----------------------------------------------------------------------------------------------------------------------

GALGAS_stringlist C_Lexique_%!LEXIQUE_IDENTIFIER%::symbols (LOCATION_ARGS) {
  GALGAS_stringlist result = GALGAS_stringlist::constructor_emptyList (THERE) ;
%for (mTerminalName mSentAttributeList mSyntaxErrorMessage mIsEndOfTemplateMark mAtomicSelection mStyleIndex) in LEXIQUE_ANALYSIS_CONTEXT.mTerminalList
  do %  result.addAssign_operation (GALGAS_string (%![mTerminalName utf8RepresentationEscapingQuestionMark]%) COMMA_THERE) ;\n%
  end
%  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

static void getKeywordLists_%!LEXIQUE_IDENTIFIER% (TC_UniqueArray <C_String> & %
if [LEXICAL_TOKEN_LIST_MAP count] == 0 then %/* ioList */% else %ioList% end
%) {
%
for (lkey mExplicitTokenListMap mTokenSortedList mShouldBeGenerated) in LEXICAL_TOKEN_LIST_MAP do
  %  ioList.appendObject (%![LEXIQUE_COMPONENT_NAME + ":" + lkey utf8RepresentationEscapingQuestionMark]%) ;\n%
end
%}

//----------------------------------------------------------------------------------------------------------------------

static void getKeywordsForIdentifier_%!LEXIQUE_IDENTIFIER% (%?^%const C_String & %if [LEXICAL_TOKEN_LIST_MAP count] == 0 then %/* inIdentifier */% else %inIdentifier% end%,
     %!^%bool & %if [LEXICAL_TOKEN_LIST_MAP count] == 0 then %/* ioFound */% else %ioFound% end%,
     %!^%TC_UniqueArray <C_String> & %if [LEXICAL_TOKEN_LIST_MAP count] == 0 then %/* ioList */% else %ioList% end
%) {
%
for (lkey mExplicitTokenListMap mTokenSortedList mShouldBeGenerated) in LEXICAL_TOKEN_LIST_MAP do
  %  if (inIdentifier == %![LEXIQUE_COMPONENT_NAME + ":" + lkey utf8RepresentationEscapingQuestionMark]%) {\n%
  %    ioFound = true ;\n%
  for (mLength mName mTerminalName) in mTokenSortedList do
    %    ioList.appendObject (%![mName utf8RepresentationEscapingQuestionMark]%) ;\n%
  end
  %    ioList.sortArrayUsingCompareMethod() ;\n%
  %  }\n%
end
%}

//----------------------------------------------------------------------------------------------------------------------

static cLexiqueIntrospection lexiqueIntrospection_%!LEXIQUE_IDENTIFIER%
__attribute__ ((used))
__attribute__ ((unused)) (getKeywordLists_%!LEXIQUE_IDENTIFIER%, getKeywordsForIdentifier_%!LEXIQUE_IDENTIFIER%) ;

//----------------------------------------------------------------------------------------------------------------------
//   S T Y L E   I N D E X    F O R    T E R M I N A L                                           
//----------------------------------------------------------------------------------------------------------------------

uint32_t C_Lexique_%!LEXIQUE_IDENTIFIER%::styleIndexForTerminal (const int32_t inTerminalIndex) const {
  static const uint32_t kTerminalSymbolStyles [%![[TERMINAL_LIST count] + 1 string]%] = {0%
for (mTerminalName mSentAttributeList mSyntaxErrorMessage mIsEndOfTemplateMark mAtomicSelection mStyleIndex) in TERMINAL_LIST do
  %,\n    %![mStyleIndex string]% /* %!LEXIQUE_COMPONENT_NAME%_1_%![mTerminalName.string identifierRepresentation]% */%
end%\n  } ;
  return (inTerminalIndex >= 0) ? kTerminalSymbolStyles [inTerminalIndex] : 0 ;
}

//----------------------------------------------------------------------------------------------------------------------
//   S T Y L E   N A M E    F O R    S T Y L E    I N D E X                                      
//----------------------------------------------------------------------------------------------------------------------

C_String C_Lexique_%!LEXIQUE_IDENTIFIER%::styleNameForIndex (const uint32_t inStyleIndex) const {
  C_String result ;
  if (inStyleIndex < %![[LEXICAL_STYLE_LIST count] + 1 string]%) {
    static const char * kStyleArray [%![[LEXICAL_STYLE_LIST count] + 1 string]%] = {
      ""%
for (mName mComment) in LEXICAL_STYLE_LIST do
  %,\n      %![mName.string utf8RepresentationEscapingQuestionMark]
end%\n    } ;
    result = kStyleArray [inStyleIndex] ;
  }
  return result ;
}

