#include "project_header.h"
#include "F_mainForLIBPM.h"
#include "F_Analyze_CLI_Options.h"
#include "C_builtin_CLI_Options.h"
#include "C_galgas_CLI_Options.h"
#include "F_verbose_output.h"
#include "cLexiqueIntrospection.h"
#include "F_DisplayException.h"
% for (mValue) in IMPORTED_COMPONENT_LIST do
    %#include "%!mValue%.h"\n%
  end%
//--------------------------------------------------------------------------------------------------
//
//                      print_tool_help_message                                                  
//
//--------------------------------------------------------------------------------------------------

static void print_tool_help_message (void) {
  gCout.addString ("Compiled with GALGAS revision NUMERO_REVISION_GALGAS\\n") ;
}

//--------------------------------------------------------------------------------------------------

static const char * kSourceFileExtensions [] = {
%
for (mSourceFileExtension mSourceFileHelp mSourceFileVariableName mSourceFileVariableNameIsUnused mReferenceGrammar mInstructionList mEndOfInstructionList) in PROGRAM_RULE_LIST do
  %  %![mSourceFileExtension utf8RepresentationEscapingQuestionMark]%,\n%
end
%  nullptr
} ;    

//--------------------------------------------------------------------------------------------------

static const char * kSourceFileHelpMessages [] = {
%
for (mSourceFileExtension mSourceFileHelp mSourceFileVariableName mSourceFileVariableNameIsUnused mReferenceGrammar mInstructionList mEndOfInstructionList) in PROGRAM_RULE_LIST do
  %  %![mSourceFileHelp utf8RepresentationEscapingQuestionMark]%,\n%
end
%  nullptr
} ;    

//--------------------------------------------------------------------------------------------------

const char * projectVersionString (void) {
  return %![PROJECT_VERSION_STRING utf8RepresentationEscapingQuestionMark]% ;
}

%!BEFORE_AFTER_RULE_IMPLEMENTATION_STRING
%//--------------------------------------------------------------------------------------------------
//
//                      M A I N    F O R    L I B P M                                            
//
//--------------------------------------------------------------------------------------------------

int mainForLIBPM (int inArgc, const char * inArgv []) {
//--- Analyze Command Line Options
  TC_UniqueArray <String> sourceFilesArray ;
  F_Analyze_CLI_Options (inArgc, inArgv,
                         sourceFilesArray,
                         kSourceFileExtensions,
                         kSourceFileHelpMessages,
                         print_tool_help_message) ;
//---
  int returnCode = 0 ; // No error
//--- Set Execution mode
  String executionModeOptionErrorMessage ;
  setExecutionMode (executionModeOptionErrorMessage) ;
  if (executionModeOptionErrorMessage.length () > 0) {
    gCout.addString (executionModeOptionErrorMessage) ;
    returnCode = 1 ;
  }else{
  //--- Common lexique object
    Compiler * commonCompiler = nullptr ;
    macroMyNew (commonCompiler, Compiler (nullptr COMMA_HERE)) ;
    try{
      routine_before (commonCompiler COMMA_HERE) ;
      cLexiqueIntrospection::handleGetKeywordListOption (commonCompiler) ;
      const bool verboseOptionOn = verboseOutput () ;
      for (int32_t i=0 ; i<sourceFilesArray.count () ; i++) {
        const String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        const GALGAS_string sfp = GALGAS_string (sourceFilesArray (i COMMA_HERE)) ;
        const GALGAS_location location = commonCompiler->here () ;
        const GALGAS_lstring sourceFilePath (sfp, location) ;
%if [PROGRAM_RULE_LIST count] > 0 then
%        int r = 0 ;
        %
          for (mSourceFileExtension mSourceFileHelp mSourceFileVariableName mSourceFileVariableNameIsUnused mReferenceGrammar mInstructionList mEndOfInstructionList) in PROGRAM_RULE_LIST 
          do (IDX)
            %if (fileExtension == %![mSourceFileExtension utf8RepresentationEscapingQuestionMark]%) {\n%
            if mReferenceGrammar.string == "" then
            %          switch (executionMode ()) {\n%
            %          case kExecutionModeNormal :\n%
            %            routine_%!["programRule_" + [IDX string] identifierRepresentation]% (sourceFilePath, commonCompiler COMMA_HERE) ;\n%
            %            break ;\n%
            %          case kExecutionModeLexicalAnalysisOnly :\n%
            %            commonCompiler->onTheFlyRunTimeError ("Cannot handle \"--mode=lexical-only\" option: no grammar in program RULE" COMMA_HERE) ;\n%
            %            break ;\n%
            %          case kExecutionModeSyntaxAnalysisOnly :\n%
            %            commonCompiler->onTheFlyRunTimeError ("Cannot handle \"--mode=syntax-only\" option: no grammar in program RULE" COMMA_HERE) ;\n%
            %            break ;\n%
            %          case kExecutionModeIndexing :\n%
            %            commonCompiler->onTheFlyRunTimeError ("Cannot handle \"--mode=indexing\" option: no grammar in program RULE" COMMA_HERE) ;\n%
            %            break ;\n%
            %          case kExecutionModeLatex :\n%
            %            commonCompiler->onTheFlyRunTimeError ("Cannot handle \"--mode=latex\" option: no grammar in program RULE" COMMA_HERE) ;\n%
            %            break ;\n%
            %          }\n%
            else
            %          switch (executionMode ()) {\n%
            %          case kExecutionModeNormal :\n%
            %            routine_%!["programRule_" + [IDX string] identifierRepresentation]% (sourceFilePath, commonCompiler COMMA_HERE) ;\n%
            %            break ;\n%
            %          case kExecutionModeLexicalAnalysisOnly :\n%
            %            cGrammar_%![mReferenceGrammar identifierRepresentation]%::performOnlyLexicalAnalysis (commonCompiler, sourceFilesArray (i COMMA_HERE)) ;\n%
            %            break ;\n%
            %          case kExecutionModeSyntaxAnalysisOnly :\n%
            %            cGrammar_%![mReferenceGrammar identifierRepresentation]%::performOnlySyntaxAnalysis (commonCompiler, sourceFilesArray (i COMMA_HERE)) ;\n%
            %            break ;\n%
            %          case kExecutionModeIndexing :\n%
            %            cGrammar_%![mReferenceGrammar identifierRepresentation]%::performIndexing (commonCompiler, sourceFilesArray (i COMMA_HERE)) ;\n%
            %            break ;\n%
            %          case kExecutionModeLatex :\n%
            %            cGrammar_%![mReferenceGrammar identifierRepresentation]%::performOnlyLexicalAnalysis (commonCompiler, sourceFilesArray (i COMMA_HERE)) ;\n%
            %            break ;\n%
            %          }\n%
            end
          between %        }else %
          end
%        }else{
          printf ("*** Error: unhandled extension for file '\%s' ***\\n", sourceFilesArray (i COMMA_HERE).cString ()) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
%end
%      }
    //--- Error or warnings ?
      if (totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (totalWarningCount () > 0) {
        if (gOption_galgas_5F_builtin_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\\n") ;
          }
        }
      }
    //--- Epilogue
      routine_after (commonCompiler COMMA_HERE) ;
    //--- Emit JSON issue file ?
      if (gOption_generic_5F_cli_5F_options_emit_5F_issue_5F_json_5F_file.mValue != "") {
        commonCompiler->writeIssueJSONFile (gOption_generic_5F_cli_5F_options_emit_5F_issue_5F_json_5F_file.mValue) ;
      }
    //--- Display error and warnings count
      if (verboseOptionOn || (totalWarningCount () > 0) || (totalErrorCount () > 0)) {
        String message ;
        if (totalWarningCount () == 0) {
          message.addString ("No warning") ;
        }else if (totalWarningCount () == 1) {
          message.addString ("1 warning") ;
        }else{
          message.addSigned (totalWarningCount ()) ;
          message.addString (" warnings") ;
        }
        message.addString (", ") ;
        if (totalErrorCount () == 0) {
          message.addString ("no error") ;
        }else if (totalErrorCount () == 1) {
          message.addString ("1 error") ;
        }else{
          message.addSigned (totalErrorCount ()) ;
          message.addString (" errors") ;
        }
        message.addString (".\\n") ;
        ggs_printMessage (message COMMA_HERE) ;
      }
    }catch (const ::std::exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      printf ("**** Unknow exception ****\\n") ;
      throw ;
    }
    macroDetachSharedObject (commonCompiler) ;
  }
  return returnCode ;
}

