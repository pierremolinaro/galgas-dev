//--------------------------------------------------------------------------------------------------
//
//%!"Abstract extension method '@" + [RECEIVER_TYPE definition].typeName.string + " " + METHOD_NAME + "'"%
//
//--------------------------------------------------------------------------------------------------

void callExtensionMethod_%![METHOD_NAME identifierRepresentation]% (%?^%cPtr_%![[RECEIVER_TYPE definition].typeName.string identifierRepresentation]% * inObject%
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentType mFormalArgumentName mFormalArgumentCppName) in FORMAL_ARGUMENT_LIST do
    %,\n%!^
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GALGAS_%![mFormalArgumentType identifierRepresentation]% constin_%![mFormalArgumentName identifierRepresentation]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GALGAS_%![mFormalArgumentType identifierRepresentation]% & io_%![mFormalArgumentName identifierRepresentation]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GALGAS_%![mFormalArgumentType identifierRepresentation]% & out_%![mFormalArgumentName identifierRepresentation]
    else # argumentIn
      %GALGAS_%![mFormalArgumentType identifierRepresentation]% in_%![mFormalArgumentName identifierRepresentation]
    end
  end
  %,\n%!^%Compiler * inCompiler%
  %\n%!^%COMMA_LOCATION_ARGS) {
//--- Drop output arguments
%
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentType mFormalArgumentName mFormalArgumentCppName) in FORMAL_ARGUMENT_LIST do
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %  out_%![mFormalArgumentName identifierRepresentation]%.drop () ;\n%
    end
  end
%//--- Find method
  if (nullptr != inObject) {
    macroValidSharedObject (inObject, cPtr_%![[RECEIVER_TYPE definition].typeName.string identifierRepresentation]%) ;
    inObject->method_%![METHOD_NAME identifierRepresentation]% (%
    for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentType mFormalArgumentName mFormalArgumentCppName) in FORMAL_ARGUMENT_LIST do
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %constin_%![mFormalArgumentName identifierRepresentation]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %io_%![mFormalArgumentName identifierRepresentation]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %out_%![mFormalArgumentName identifierRepresentation]
      else # argumentIn
        %in_%![mFormalArgumentName identifierRepresentation]
      end
      %, %
    end
    %inCompiler COMMA_THERE) ;
  }
}
