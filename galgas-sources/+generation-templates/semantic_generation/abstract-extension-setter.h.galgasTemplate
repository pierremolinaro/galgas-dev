//--------------------------------------------------------------------------------------------------
//
//%!"Abstract extension setter '@" + CLASS_NAME + " " + MODIFIER_NAME + "'"%
//
//--------------------------------------------------------------------------------------------------

typedef void (*extensionSetterSignature_%![CLASS_NAME identifierRepresentation]%_%![MODIFIER_NAME identifierRepresentation]%) (%?^
%class cPtr_%![CLASS_NAME identifierRepresentation]% * inObject%
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentType mFormalArgumentName mFormalArgumentCppName) in FORMAL_ARGUMENT_LIST do (IDX)
    %,\n%!^
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const class GGS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %class GGS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %class GGS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
    else // argumentIn
      %class GGS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
    end
  end
  %,\n%!^%class Compiler * inCompiler%
  %\n %!^%COMMA_LOCATION_ARGS) ;

//--------------------------------------------------------------------------------------------------

void enterExtensionSetter_%![MODIFIER_NAME identifierRepresentation]% (%?^%const int32_t inClassIndex,
  %!^%extensionSetterSignature_%![CLASS_NAME identifierRepresentation]%_%![MODIFIER_NAME identifierRepresentation]% inModifier) ;

//--------------------------------------------------------------------------------------------------

void callExtensionSetter_%![MODIFIER_NAME identifierRepresentation]% (%?^%class cPtr_%![CLASS_NAME identifierRepresentation]% * inObject%
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentType mFormalArgumentName mFormalArgumentCppName) in FORMAL_ARGUMENT_LIST do
    %,\n%!^
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %const GGS_%![mFormalArgumentType identifierRepresentation]% constin_%![mFormalArgumentName identifierRepresentation]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %GGS_%![mFormalArgumentType identifierRepresentation]% & io_%![mFormalArgumentName identifierRepresentation]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %GGS_%![mFormalArgumentType identifierRepresentation]% & out_%![mFormalArgumentName identifierRepresentation]
    else // argumentIn
      %GGS_%![mFormalArgumentType identifierRepresentation]% in_%![mFormalArgumentName identifierRepresentation]
    end
  end
  %,\n%!^%Compiler * inCompiler%
  %\n%!^%COMMA_LOCATION_ARGS) ;

