//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_root (),
mFlags (0),
mIsValid (false) {
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const uint64_t inFlags) :
AC_GALGAS_root (),
mFlags (inFlags),
mIsValid (true) {
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::class_func_none (UNUSED_LOCATION_ARGS) {
  return GALGAS_%!TYPE_IDENTIFIER% (0) ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::class_func_all (UNUSED_LOCATION_ARGS) {
  return GALGAS_%!TYPE_IDENTIFIER% (uint64_t (%![FULL_SET hexString]%)) ;
}

%for (mValue) in SLOT_LIST do (idx)
%//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::class_func_%![mValue identifierRepresentation]% (UNUSED_LOCATION_ARGS) {
  return GALGAS_%!TYPE_IDENTIFIER% (uint64_t (1) << %![idx string]%) ;
}

%end
%//--------------------------------------------------------------------------------------------------

ComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {
   ComparisonResult result = ComparisonResult::invalid ;
   if (mIsValid && inOperand.mIsValid) {
     result = ComparisonResult::operandEqual ;
     if (mFlags < inOperand.mFlags) {
       result = ComparisonResult::firstOperandLowerThanSecond ;
     }else if (mFlags > inOperand.mFlags) {
       result = ComparisonResult::firstOperandGreaterThanSecond ;
     }
   }
  return result ;
}

//--------------------------------------------------------------------------------------------------

bool GALGAS_%!TYPE_IDENTIFIER%::isValid (void) const {
  return mIsValid ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::operator_or (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand
                                      %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (mIsValid && inOperand.mIsValid) {
    result = GALGAS_%!TYPE_IDENTIFIER% (mFlags | inOperand.mFlags) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::operator_and (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand
                                      %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (mIsValid && inOperand.mIsValid) {
    result = GALGAS_%!TYPE_IDENTIFIER% (mFlags & inOperand.mFlags) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::operator_xor (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand
                                      %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (mIsValid && inOperand.mIsValid) {
    result = GALGAS_%!TYPE_IDENTIFIER% (mFlags ^ inOperand.mFlags) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::substract_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,
                 %!^%Compiler * /* inCompiler */
                 %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (mIsValid && inOperand.mIsValid) {
    result = GALGAS_%!TYPE_IDENTIFIER% (mFlags & ~ inOperand.mFlags) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::operator_tilde (UNUSED_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (mIsValid) {
    result = GALGAS_%!TYPE_IDENTIFIER% (((uint64_t) %![FULL_SET hexString]%) ^ mFlags) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::description (%?^%String & ioString,
                              %!^%const int32_t /* inIndentation */) const {
  ioString.appendCString ("<boolset @%!TYPE_NAME%:") ;
  if (! isValid ()) {
    ioString.appendCString (" not built") ;
  }else{
%
for (mValue) in SLOT_LIST do (idx)
   %    if ((mFlags & ((uint64_t) 1) << %![idx string]%) != 0) {\n%
   %      ioString.appendCString (" %!mValue.string%") ;\n%
   %    }\n%
end
%  }
  ioString.appendCString (">") ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_bool GALGAS_%!TYPE_IDENTIFIER%::getter_none (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (mIsValid) {
    result = GALGAS_bool (mFlags == 0) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_bool GALGAS_%!TYPE_IDENTIFIER%::getter_all (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (mIsValid) {
    result = GALGAS_bool (mFlags == uint64_t (%![FULL_SET hexString]%)) ;
  }
  return result ;
}

%for (mValue) in SLOT_LIST do (idx)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GALGAS_bool GALGAS_%!TYPE_IDENTIFIER%::getter_%![mValue identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {\n%
  %  GALGAS_bool result ;\n%
  %  if (mIsValid) {\n%
  %    result = GALGAS_bool ((mFlags & (uint64_t (1) << %![idx string]%)) != 0) ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end
%