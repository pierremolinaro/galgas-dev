//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_root (),
mDictionary () {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::builtDictionary (LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.mDictionary.build (THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (const GGS_%!TYPE_IDENTIFIER% & inSource) :
AC_GALGAS_root (),
mDictionary (inSource.mDictionary) {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% & GGS_%!TYPE_IDENTIFIER%::operator = (const GGS_%!TYPE_IDENTIFIER% & inSource) {
  mDictionary = inSource.mDictionary ;
  return *this ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::drop (void) {
  mDictionary.drop () ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_emptyDict (LOCATION_ARGS) {
  return GGS_%!TYPE_IDENTIFIER%::builtDictionary (THERE) ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::init (Compiler * COMMA_LOCATION_ARGS) {
  return GGS_%!TYPE_IDENTIFIER%::builtDictionary (THERE) ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::description (String & ioString,
                                          const int32_t /* inIndentation */) const {
  ioString.appendCString ("<dict @") ;
  ioString.appendCString (staticTypeDescriptor ()->mGalgasTypeName) ;
  ioString.appendCString (": ") ;
  if (isValid ()) {
    ioString.appendSigned (mDictionary.count ()) ;
    ioString.appendCString (" node(s)") ;
  }else{
    ioString.appendCString ("not built") ;
  }
  ioString.appendCString (">") ;
}

//--------------------------------------------------------------------------------------------------

GGS_uint GGS_%!TYPE_IDENTIFIER%::getter_count (UNUSED_LOCATION_ARGS) const {
  GGS_uint result ;
  if (isValid ()) {
    result = GGS_uint (uint32_t (mDictionary.count ())) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!OPTIONAL_ELEMENT_TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::
readSubscript__3F_ (const class GGS_%!KEY_TYPE_IDENTIFIER% & inKey,
                    Compiler * /* inCompiler */
                    COMMA_UNUSED_LOCATION_ARGS) const {
  if (isValid () && inKey.isValid ()) {
    // OptionalSharedRef <SharedGenericMapNode <GGS_string, GGS_%!ELEMENT_TYPE_IDENTIFIER%>>
    const auto foundObject = mDictionary.nodeForKey (inKey) ;
    if (foundObject.isNotNil ()) {
      return GGS_%!OPTIONAL_ELEMENT_TYPE_IDENTIFIER% (foundObject->mNode) ;
    }else{
      return GGS_%!OPTIONAL_ELEMENT_TYPE_IDENTIFIER%::init_nil () ;
    }
  }else{
    return GGS_%!OPTIONAL_ELEMENT_TYPE_IDENTIFIER% () ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusPlusAssignOperation (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inValue
      %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inValue.mProperty_key.isValid ()) {
    mDictionary.insertOrReplace (inValue.mProperty_key, inValue COMMA_THERE) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::addAssignOperation (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% & inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%const GGS_%![propertyTypeEntry identifierRepresentation]% & inArgument%![IDX string]
end
%,\n %!^%Compiler * /* inCompiler */%
%\n %!^%COMMA_LOCATION_ARGS) {\n%
%  GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (inKey%
for (5*) in CURRENT_PROPERTY_LIST
  do (IDX) %, inArgument%![IDX string]
end
%) ;
  if (isValid () && inKey.isValid ()) {
    mDictionary.insertOrReplace (inKey, newElement COMMA_THERE) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_insert (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%const GGS_%![propertyTypeEntry identifierRepresentation]% inArgument%![IDX string]
end
%,\n %!^%Compiler * /* inCompiler */%
%\n %!^%COMMA_LOCATION_ARGS) {\n%
%  GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (inKey%
for (5*) in CURRENT_PROPERTY_LIST
  do (IDX) %, inArgument%![IDX string]
end
%) ;
  if (isValid () && inKey.isValid ()) {
    mDictionary.insertOrReplace (inKey, newElement COMMA_THERE) ;
  }
}

//--------------------------------------------------------------------------------------------------

GGS_bool GGS_%!TYPE_IDENTIFIER%::getter_hasKey (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% & inKey%
%\n %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isValid () && inKey.isValid ()) {
    result = GGS_bool (mDictionary.hasKey (inKey)) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_searchKey (%?^%GGS_%!KEY_TYPE_IDENTIFIER% inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%GGS_%![propertyTypeEntry identifierRepresentation]% & outArgument%![IDX string]
end
%,\n %!^%Compiler * inCompiler%
%\n %!^%COMMA_LOCATION_ARGS) const {
  if (isValid () && inKey.isValid ()) {
    // OptionalSharedRef <SharedGenericMapNode <GGS_string, GGS_%!ELEMENT_TYPE_IDENTIFIER%>>
    const auto removedObject = mDictionary.nodeForKey (inKey) ;
    if (removedObject.isNil ()) {
    //--- Build error message
      const String message = "cannot search in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    //--- Drop out arguments
%
for (5*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]%.drop () ;\n%
end
%    }else{
%
for (* propertyName 3*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]% = removedObject->mNode.mProperty_%![propertyName identifierRepresentation]% ;\n%
end
%    }
  }
}

//--------------------------------------------------------------------------------------------------\n\n%
%void GGS_%!TYPE_IDENTIFIER%::setter_removeKey (%?^%GGS_%!KEY_TYPE_IDENTIFIER% inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%GGS_%![propertyTypeEntry identifierRepresentation]% & outArgument%![IDX string]
end
%,\n %!^%Compiler * inCompiler%
%\n %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inKey.isValid ()) {
    OptionalSharedRef <SharedGenericMapNode <GGS_string, GGS_%!ELEMENT_TYPE_IDENTIFIER%>> removedObject ;
    mDictionary.removeAndReturnRemovedNode (inKey, removedObject COMMA_THERE) ;
    if (removedObject.isNil ()) { // Not found
    //--- Build error message
      const String message = "cannot remove in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    //--- Drop output arguments
%
for (5*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]%.drop () ;\n%
end
%    }else{
    //--- Assign output arguments
%
for (* propertyName 3*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]% = removedObject->mNode.mProperty_%![propertyName identifierRepresentation]% ;\n%
end
%    }
  }
}

%for (propertyTypeEntry propertyName 3*) in CURRENT_PROPERTY_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![propertyTypeEntry identifierRepresentation]% GGS_%!TYPE_IDENTIFIER%::getter_%![propertyName identifierRepresentation]%ForKey (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% & inKey,
                                                 %!^%Compiler * inCompiler
                                                 %!^%COMMA_LOCATION_ARGS) const {
  GGS_%![propertyTypeEntry identifierRepresentation]% result ;
  if (isValid () && inKey.isValid ()) {
    // OptionalSharedRef <SharedGenericMapNode <GGS_string, GGS_%!ELEMENT_TYPE_IDENTIFIER%>>
    const auto removedObject = mDictionary.nodeForKey (inKey) ;
    if (removedObject.isNil ()) { // Not found
    //--- Build error message
      const String message = "cannot get %![propertyName identifierRepresentation]% ForKey in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }else{
      result = removedObject->mNode.mProperty_%![propertyName identifierRepresentation]% ;
    }
  }
  return result ;
}\n%
end 

for (propertyTypeEntry propertyName 3*) in CURRENT_PROPERTY_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GGS_%!TYPE_IDENTIFIER%::setter_set%![[propertyName capitalizingFirstCharacter] identifierRepresentation]%ForKey (%?^%GGS_%![propertyTypeEntry identifierRepresentation]% inPropertyValue,
                             %!^%GGS_%!KEY_TYPE_IDENTIFIER% inKey,
                             %!^%Compiler * inCompiler
                             %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inKey.isValid ()) {
    // OptionalSharedRef <SharedGenericMapNode <GGS_string, GGS_%!ELEMENT_TYPE_IDENTIFIER%>>
    const auto modifiedObject = mDictionary.nodeForKey (inKey) ;
    if (modifiedObject.isNil ()) { // Not found
    //--- Build error message
     const String message = "cannot set%![[propertyName capitalizingFirstCharacter] identifierRepresentation]%ForKey in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }else{
      modifiedObject->mNode.mProperty_%![propertyName identifierRepresentation]% = inPropertyValue ;
    }
  }
}\n\n%
end 

%//--------------------------------------------------------------------------------------------------
// Up Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

UpEnumerator_%!TYPE_IDENTIFIER%::UpEnumerator_%!TYPE_IDENTIFIER% (const GGS_%!TYPE_IDENTIFIER% & inOperand) :
mArray (inOperand.mDictionary.sortedNodeArray ()),
mIndex (0) {
}

//--------------------------------------------------------------------------------------------------
// Down Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

DownEnumerator_%!TYPE_IDENTIFIER%::DownEnumerator_%!TYPE_IDENTIFIER% (const GGS_%!TYPE_IDENTIFIER% & inOperand) :
mArray (inOperand.mDictionary.sortedNodeArray ()),
mIndex () {
  mIndex = mArray.count () - 1 ;
}

//--------------------------------------------------------------------------------------------------
