//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_root (),
mDictionary (),
mIsValid (false) {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (const GGS_%!TYPE_IDENTIFIER% & inSource) :
AC_GALGAS_root (),
mDictionary (inSource.mDictionary),
mIsValid (inSource.mIsValid) {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% & GGS_%!TYPE_IDENTIFIER%::operator = (const GGS_%!TYPE_IDENTIFIER% & inSource) {
  mDictionary = inSource.mDictionary ;
  mIsValid = inSource.mIsValid ;
  return * this ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::drop (void) {
  mDictionary.clear () ;
  mIsValid = false ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_emptyDict (UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.mIsValid = true ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::init (Compiler * COMMA_UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.mIsValid = true ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::description (String & ioString,
                                          const int32_t /* inIndentation */) const {
  ioString.appendCString ("<dict @") ;
  ioString.appendCString (staticTypeDescriptor ()->mGalgasTypeName) ;
  ioString.appendCString (": ") ;
  if (isValid ()) {
    ioString.appendUnsigned (mDictionary.size ()) ;
    ioString.appendCString (" node(s)") ;
  }else{
    ioString.appendCString ("not built") ;
  }
  ioString.appendCString (">") ;
}

//--------------------------------------------------------------------------------------------------

GGS_uint GGS_%!TYPE_IDENTIFIER%::getter_count (UNUSED_LOCATION_ARGS) const {
  GGS_uint result ;
  if (isValid ()) {
    result = GGS_uint (uint32_t (mDictionary.size ())) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!OPTIONAL_ELEMENT_TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::
readSubscript__3F_ (const class GGS_%!KEY_TYPE_IDENTIFIER% & inKey,
                    Compiler * /* inCompiler */
                    COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_%!OPTIONAL_ELEMENT_TYPE_IDENTIFIER% result ;
  if (isValid () && inKey.isValid ()) {
    auto iterator = mDictionary.find (inKey) ;
    if (iterator != mDictionary.end ()) { // Key exists
      result = iterator->second ;
    }  
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::enterElement (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inValue,
      %!^%Compiler * /* inCompiler */
      %!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid () && inValue.mProperty_key.isValid ()) {
    mDictionary [inValue.mProperty_key] = inValue ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% & inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%const GGS_%![propertyTypeEntry identifierRepresentation]% & inArgument%![IDX string]
end
%,\n %!^%Compiler * /* inCompiler */%
%\n %!^%COMMA_UNUSED_LOCATION_ARGS) {\n%
%  GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (inKey%
for (5*) in CURRENT_PROPERTY_LIST
  do (IDX) %, inArgument%![IDX string]
end
%) ;
  if (isValid () && inKey.isValid ()) {
    mDictionary [inKey] = newElement ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_insert (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%const GGS_%![propertyTypeEntry identifierRepresentation]% inArgument%![IDX string]
end
%,\n %!^%Compiler * /* inCompiler */%
%\n %!^%COMMA_UNUSED_LOCATION_ARGS) {\n%
%  GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (inKey%
for (5*) in CURRENT_PROPERTY_LIST
  do (IDX) %, inArgument%![IDX string]
end
%) ;
  if (isValid () && inKey.isValid ()) {
    mDictionary [inKey] = newElement ;
  }
}

//--------------------------------------------------------------------------------------------------

GGS_bool GGS_%!TYPE_IDENTIFIER%::getter_hasKey (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% & inKey%
%\n %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool result ;
  if (isValid () && inKey.isValid ()) {
    auto iterator = mDictionary.find (inKey) ;
    result = GGS_bool (iterator != mDictionary.end ()) ; // Key exists
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_searchKey (%?^%GGS_%!KEY_TYPE_IDENTIFIER% inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%GGS_%![propertyTypeEntry identifierRepresentation]% & outArgument%![IDX string]
end
%,\n %!^%Compiler * inCompiler%
%\n %!^%COMMA_LOCATION_ARGS) const {
  if (isValid () && inKey.isValid ()) {
    auto iterator = mDictionary.find (inKey) ;
    if (iterator == mDictionary.end ()) { // Not found
    //--- Build error message
      String message = "cannot search in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    //--- Drop out arguments
%
for (5*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]%.drop () ;\n%
end
%    }else{
%
for (* propertyName 3*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]% = iterator->second.mProperty_%![propertyName identifierRepresentation]% ;\n%
end
%    }
  }
}

//--------------------------------------------------------------------------------------------------\n\n%
%void GGS_%!TYPE_IDENTIFIER%::setter_removeKey (%?^%GGS_%!KEY_TYPE_IDENTIFIER% inKey%
for (propertyTypeEntry 4*) in CURRENT_PROPERTY_LIST
  do (IDX) %,\n%!^%GGS_%![propertyTypeEntry identifierRepresentation]% & outArgument%![IDX string]
end
%,\n %!^%Compiler * inCompiler%
%\n %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inKey.isValid ()) {
    auto iterator = mDictionary.find (inKey) ;
    if (iterator == mDictionary.end ()) { // Not found
    //--- Build error message
      String message = "cannot remove in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    //--- Drop output arguments
%
for (5*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]%.drop () ;\n%
end
%    }else{
    //--- Assign output arguments
%
for (* propertyName 3*) in CURRENT_PROPERTY_LIST do (IDX)
  %      outArgument%![IDX string]% = iterator->second.mProperty_%![propertyName identifierRepresentation]% ;\n%
end
%    //--- Remove entry
      mDictionary.erase (iterator) ;
    }
  }
}

%for (propertyTypeEntry propertyName 3*) in CURRENT_PROPERTY_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![propertyTypeEntry identifierRepresentation]% GGS_%!TYPE_IDENTIFIER%::getter_%![propertyName identifierRepresentation]%ForKey (%?^%const GGS_%!KEY_TYPE_IDENTIFIER% & inKey,
                                                 %!^%Compiler * inCompiler
                                                 %!^%COMMA_LOCATION_ARGS) const {
  GGS_%![propertyTypeEntry identifierRepresentation]% result ;
  if (isValid () && inKey.isValid ()) {
    auto iterator = mDictionary.find (inKey) ;
    if (iterator == mDictionary.end ()) { // Not found
    //--- Build error message
      const String message = "cannot get %![propertyName identifierRepresentation]% ForKey in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }else{
      result = iterator->second.mProperty_%![propertyName identifierRepresentation]% ;
    }
  }
  return result ;
}\n%
end 

for (propertyTypeEntry propertyName 3*) in CURRENT_PROPERTY_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GGS_%!TYPE_IDENTIFIER%::setter_set%![[propertyName stringByCapitalizingFirstCharacter] identifierRepresentation]%ForKey (%?^%GGS_%![propertyTypeEntry identifierRepresentation]% inPropertyValue,
                             %!^%GGS_%!KEY_TYPE_IDENTIFIER% inKey,
                             %!^%Compiler * inCompiler
                             %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inKey.isValid ()) {
    auto iterator = mDictionary.find (inKey) ;
    if (iterator == mDictionary.end ()) { // Not found
    //--- Build error message
     const String message = "cannot set%![[propertyName stringByCapitalizingFirstCharacter] identifierRepresentation]%ForKey in dict: the key does not exist" ;
    //--- Emit error message
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }else{
      iterator->second.mProperty_%![propertyName identifierRepresentation]% = inPropertyValue ;
    }
  }
}\n\n%
end 

%//--------------------------------------------------------------------------------------------------
// Up Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

UpEnumerator_%!TYPE_IDENTIFIER%::UpEnumerator_%!TYPE_IDENTIFIER% (const GGS_%!TYPE_IDENTIFIER% & inOperand) :
mDictionary (inOperand.mIsValid ? inOperand.mDictionary : MapFor_%!TYPE_IDENTIFIER% ()),
mIterator () {
  mIterator = mDictionary.begin () ;
}

//--------------------------------------------------------------------------------------------------
// Down Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

DownEnumerator_%!TYPE_IDENTIFIER%::DownEnumerator_%!TYPE_IDENTIFIER% (const GGS_%!TYPE_IDENTIFIER% & inOperand) :
mDictionary (inOperand.mIsValid ? inOperand.mDictionary : MapFor_%!TYPE_IDENTIFIER% ()),
mIterator () {
  mIterator = mDictionary.rbegin () ;
}

//--------------------------------------------------------------------------------------------------
