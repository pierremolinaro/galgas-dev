//--------------------------------------------------------------------------------------------------

cMapElement_%!TYPE_IDENTIFIER%::cMapElement_%!TYPE_IDENTIFIER% (%?^%const GALGAS_lstring & inKey%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do %,\n%!^%const GALGAS_%![mPropertyTypeEntry identifierRepresentation]% & in_%![mPropertyName identifierRepresentation]
  end
%\n%
!^%COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE)%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do %,\n%  %mProperty_%![mPropertyName identifierRepresentation]% (in_%![mPropertyName identifierRepresentation]%)%
end
% {
}

//--------------------------------------------------------------------------------------------------

bool cMapElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return mProperty_lkey.isValid () ;
}

//--------------------------------------------------------------------------------------------------

cMapElement * cMapElement_%!TYPE_IDENTIFIER%::copy (void) {
  cMapElement * result = nullptr ;
  macroMyNew (result, cMapElement_%!TYPE_IDENTIFIER% (mProperty_lkey%
    for (* mPropertyName 2*) in ATTRIBUTE_LIST
      do %, mProperty_%![mPropertyName identifierRepresentation]
    end
  % COMMA_HERE)) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

%if [ATTRIBUTE_LIST count] == 0 then
  %void cMapElement_%!TYPE_IDENTIFIER%::description (String & /* ioString */, const int32_t /* inIndentation */) const {\n%
else
  %void cMapElement_%!TYPE_IDENTIFIER%::description (String & ioString, const int32_t inIndentation) const {\n%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do
    %  ioString.appendNewLine () ;\n%
    %  ioString.appendStringMultiple ("| ", inIndentation) ;\n%
    %  ioString.appendString (%![mPropertyName utf8RepresentationEscapingQuestionMark]% ":") ;\n%
    %  mProperty_%![mPropertyName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end
end
%}

//--------------------------------------------------------------------------------------------------

typeComparisonResult cMapElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cMapElement_%!TYPE_IDENTIFIER% * operand = (cMapElement_%!TYPE_IDENTIFIER% *) inOperand ;
  typeComparisonResult result = mProperty_lkey.objectCompare (operand->mProperty_lkey) ;
%  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do
     %  if (kOperandEqual == result) {\n%
     %    result = mProperty_%![mPropertyName identifierRepresentation]%.objectCompare (operand->mProperty_%![mPropertyName identifierRepresentation]%) ;\n%
     %  }\n%
   end
%  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_map () {
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% & inSource) :
AC_GALGAS_map (inSource) {
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% & GALGAS_%!TYPE_IDENTIFIER%::operator = (const GALGAS_%!TYPE_IDENTIFIER% & inSource) {
  * ((AC_GALGAS_map *) this) = inSource ;
  return * this ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::class_func_emptyMap (LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::class_func_mapWithMapToOverride (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inMapToOverride
                                                   %!^%COMMA_LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  result.makeNewEmptyMapWithMapToOverride (inMapToOverride COMMA_THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::getter_overriddenMap (%?^%Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  getOverridenMap (result, inCompiler COMMA_THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^%const GALGAS_lstring & inKey%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %,\n%!^%const GALGAS_%![mPropertyTypeEntry identifierRepresentation]% & inArgument%![IDX string]
end
%,\n %!^%Compiler * inCompiler%
%\n %!^%COMMA_LOCATION_ARGS) {\n%
%  cMapElement_%!TYPE_IDENTIFIER% * p = nullptr ;\n%
%  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %, inArgument%![IDX string]
end
% COMMA_HERE)) ;\n%
%  capCollectionElement attributes ;\n%
%  attributes.setPointer (p) ;\n%
%  macroDetachSharedObject (p) ;\n%
block 2 :
  %const char * kInsertErrorMessage = "@%!TYPE_IDENTIFIER% insert error: '\%K' already in map" ;\n%
  %const char * kShadowErrorMessage = "" ;\n%
  %performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;\n%
end
%}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::add_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
   !^%Compiler * inCompiler%
   %\n %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!TYPE_IDENTIFIER% result = *this ;
  cEnumerator_%!TYPE_IDENTIFIER% enumerator (inOperand, kENUMERATION_UP) ;
  while (enumerator.hasCurrentObject ()) {
    result.addAssign_operation (enumerator.current_lkey (HERE)%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do %, enumerator.current_%![mPropertyName identifierRepresentation]% (HERE)%
end
%, inCompiler COMMA_THERE) ;
    enumerator.gotoNextObject () ;
  }
  return result ;
}

%for (insertMethodName errorMessage shadowErrorMessage) in INSERT_METHOD_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_%![insertMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
    for (propertyTypeEntry * * *) in ATTRIBUTE_LIST
      do (IDX) %,\n%!^%GALGAS_%![propertyTypeEntry identifierRepresentation]% inArgument%![IDX string]
    end
    %,\n %!^%Compiler * inCompiler%
    %\n %!^%COMMA_LOCATION_ARGS) {\n%
    %  cMapElement_%!TYPE_IDENTIFIER% * p = nullptr ;\n%
    %  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do (IDX) %, inArgument%![IDX string]
  end
  % COMMA_HERE)) ;\n%
  %  capCollectionElement attributes ;\n%
  %  attributes.setPointer (p) ;\n%
  %  macroDetachSharedObject (p) ;\n%
  block 2 :
    %const char * kInsertErrorMessage = %![errorMessage utf8RepresentationEscapingQuestionMark]% ;\n%
    %const char * kShadowErrorMessage = %![shadowErrorMessage utf8RepresentationEscapingQuestionMark]% ;\n%
    %performInsert (attributes, inCompiler, kInsertErrorMessage, kShadowErrorMessage COMMA_THERE) ;\n%
  end
  %}\n\n%
end

for (mSearchMethodName mErrorMessage) in SEARCH_METHOD_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %const char * kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]% = %![mErrorMessage utf8RepresentationEscapingQuestionMark]% ;\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::method_%![mSearchMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do (IDX) %,\n%!^%GALGAS_%![mPropertyTypeEntry identifierRepresentation]% & outArgument%![IDX string]
  end
  %,\n %!^%Compiler * inCompiler%
  %\n %!^%COMMA_LOCATION_ARGS) const {\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) performSearch (%?^%inKey,\n%
               !^%inCompiler,\n%
               !^%kSearchErrorMessage_%!TYPE_IDENTIFIER%_%![mSearchMethodName identifierRepresentation]%\n%
               !^%COMMA_THERE) ;\n%
  %  if (nullptr == p) {\n%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outArgument%![IDX string]%.drop () ;\n%
  end
  %  }else{\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outArgument%![IDX string]% = p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  end
  %  }\n%
  %}\n\n%
end


for (mMethodName mErrorMessage) in REMOVE_METHOD_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_%![mMethodName identifierRepresentation]% (%?^%GALGAS_lstring inKey%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do (IDX) %,\n%!^%GALGAS_%![mPropertyTypeEntry identifierRepresentation]% & outArgument%![IDX string]
  end
  %,\n %!^%Compiler * inCompiler%
  %\n %!^%COMMA_LOCATION_ARGS) {\n%
  %  const char * kRemoveErrorMessage = %![mErrorMessage utf8RepresentationEscapingQuestionMark]% ;\n%
  %  capCollectionElement attributes ;\n%
  %  performRemove (inKey, attributes, inCompiler, kRemoveErrorMessage COMMA_THERE) ;\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = (cMapElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;\n%
  %  if (nullptr == p) {\n%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outArgument%![IDX string]%.drop () ;\n%
  end
  %  }else{\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
    for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outArgument%![IDX string]% = p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  end
  %  }\n%

  %}\n\n%
end

if HAS_INSERT_OR_REPLACE then
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_insertOrReplace (%?^%GALGAS_lstring inKey%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do (IDX) %,\n%!^%GALGAS_%![mPropertyTypeEntry identifierRepresentation]% inArgument%![IDX string]
  end
  %\n %!^%COMMA_UNUSED_LOCATION_ARGS) {\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = nullptr ;\n%
  %  macroMyNew (p, cMapElement_%!TYPE_IDENTIFIER% (inKey%
  for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do (IDX) %, inArgument%![IDX string]
  end
  % COMMA_HERE)) ;\n%
  %  capCollectionElement attributes ;\n%
  %  attributes.setPointer (p) ;\n%
  %  macroDetachSharedObject (p) ;\n%
  %  performInsertOrReplace (attributes) ;\n%
  %}\n\n%
end

for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GALGAS_%![mPropertyTypeEntry identifierRepresentation]% GALGAS_%!TYPE_IDENTIFIER%::getter_%![mPropertyName identifierRepresentation]%ForKey (%?^%const GALGAS_string & inKey,\n%
  %                                               %!^%Compiler * inCompiler\n%
  %                                               %!^%COMMA_LOCATION_ARGS) const {\n%
  %  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  GALGAS_%![mPropertyTypeEntry identifierRepresentation]% result ;\n%
  %  if (nullptr != p) {\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    result = p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end 

for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GALGAS_%!TYPE_IDENTIFIER%::setter_set%![[mPropertyName stringByCapitalizingFirstCharacter] identifierRepresentation]%ForKey (%?^%GALGAS_%![mPropertyTypeEntry identifierRepresentation]% inAttributeValue,\n%
  %                           %!^%GALGAS_string inKey,\n%
  %                           %!^%Compiler * inCompiler\n%
  %                           %!^%COMMA_LOCATION_ARGS) {\n%
  %  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, true, inCompiler COMMA_THERE) ;\n%
  %  cMapElement_%!TYPE_IDENTIFIER% * p = (cMapElement_%!TYPE_IDENTIFIER% *) attributes ;\n%
  %  if (nullptr != p) {\n%
  %    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %    p->mProperty_%![mPropertyName identifierRepresentation]% = inAttributeValue ;\n%
  %  }\n%
  %}\n\n%
end 

%//--------------------------------------------------------------------------------------------------

cMapElement_%!TYPE_IDENTIFIER% * GALGAS_%!TYPE_IDENTIFIER%::readWriteAccessForWithInstruction (%?^%Compiler * inCompiler,\n%
             !^%const GALGAS_string & inKey\n%
             !^%COMMA_LOCATION_ARGS) {
  cMapElement_%!TYPE_IDENTIFIER% * result = (cMapElement_%!TYPE_IDENTIFIER% *) searchForReadWriteAttribute (inKey, false, inCompiler COMMA_THERE) ;
  macroNullOrValidSharedObject (result, cMapElement_%!TYPE_IDENTIFIER%) ;
  return result ;
}

%

%//--------------------------------------------------------------------------------------------------

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                       %!^%const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator (inOrder) {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray) ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%_2D_element cEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;
  return GALGAS_%!TYPE_IDENTIFIER%_2D_element (p->mProperty_lkey%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do
  %, p->mProperty_%![mPropertyName identifierRepresentation]
end
%) ;
}

//--------------------------------------------------------------------------------------------------

GALGAS_lstring cEnumerator_%!TYPE_IDENTIFIER%::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mProperty_lkey ;
}

%for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GALGAS_%![mPropertyTypeEntry identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;\n%
  %  macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end

%//--------------------------------------------------------------------------------------------------\n\n%
%bool GALGAS_%!TYPE_IDENTIFIER%::optional_searchKey (%?^%const GALGAS_string & inKey%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %,\n%!^%GALGAS_%![mPropertyTypeEntry identifierRepresentation]% & outArgument%![IDX string]
end
%) const {\n%
%  const cMapElement_%!TYPE_IDENTIFIER% * p = (const cMapElement_%!TYPE_IDENTIFIER% *) searchForKey (%?^%inKey) ;\n%
%  const bool result = nullptr != p ;\n%
%  if (result) {\n%
%    macroValidSharedObject (p, cMapElement_%!TYPE_IDENTIFIER%) ;\n%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
  %    outArgument%![IDX string]% = p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
end
%  }else{\n%
for (mPropertyTypeEntry mPropertyName mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
  %    outArgument%![IDX string]%.drop () ;\n%
end
%  }\n%
%  return result ;\n%
%}\n\n%

