//--------------------------------------------------------------------------------------------------
//%!" @" + TYPE_IDENTIFIER% reference class
//--------------------------------------------------------------------------------------------------

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%
  if CONSTRUCTOR_NEEDS_COMPILER_VAR then
    %Compiler * inCompiler%
  elsif SUPER_TYPE_IDENTIFIER != "" then
    %Compiler * inCompiler%
  else
    %Compiler * /* inCompiler */%
  end
  % COMMA_LOCATION_ARGS) :\n%
  if SUPER_TYPE_IDENTIFIER == ""
  then %acStrongPtr_class (THERE)%
  else %cPtr_%!SUPER_TYPE_IDENTIFIER% (inCompiler COMMA_THERE)%
  end
  for (* mPropertyName 3*) in CURRENT_PROPERTY_LIST
    do %,\nmProperty_%![mPropertyName identifierRepresentation]% ()%
  end
% {
%!CONSTRUCTOR_INITIALIZATION_CODE%}

//--------------------------------------------------------------------------------------------------

#ifndef DO_NOT_GENERATE_CHECKINGS
  void cPtr_%!TYPE_IDENTIFIER%::printNonNullClassInstanceProperties (void) const {
  %if SUPER_TYPE_IDENTIFIER == "" then
     %  acStrongPtr_class::printNonNullClassInstanceProperties () ;\n%
  else
    %  cPtr_%!SUPER_TYPE_IDENTIFIER%::printNonNullClassInstanceProperties () ;\n%
  end
  for (* propertyName 3*) in CURRENT_PROPERTY_LIST do
    %    mProperty_%![propertyName identifierRepresentation]%.printNonNullClassInstanceProperties ("%!propertyName.string%") ;\n%
  end
%  }
#endif

//--------------------------------------------------------------------------------------------------

ComparisonResult GGS_%!TYPE_IDENTIFIER%::objectCompare (const GGS_%!TYPE_IDENTIFIER% & inOperand) const {
  ComparisonResult result = ComparisonResult::invalid ;
  if (isValid () && inOperand.isValid ()) {
    const size_t myObjectPtr = size_t (mObjectPtr) ;
    const size_t operandObjectPtr = size_t (inOperand.mObjectPtr) ;
    if (myObjectPtr < operandObjectPtr) {
      result = ComparisonResult::firstOperandLowerThanSecond ;
    }else if (myObjectPtr > operandObjectPtr) {
      result = ComparisonResult::firstOperandGreaterThanSecond ;
    }else{
      result = ComparisonResult::operandEqual ;
    }
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
%if SUPER_TYPE_IDENTIFIER == ""
  then %AC_GALGAS_reference_class%
  else %GGS_%!SUPER_TYPE_IDENTIFIER%%
  end% () {
}

%
if CLONABLE then
%
//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::init_21_cloned (%?^%const GGS_%!TYPE_IDENTIFIER% & inObject,
           %!^%Compiler * inCompiler
           %!^%COMMA_UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  if (inObject.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (inCompiler COMMA_HERE)) ;
%  for (* name 3*) in ALL_PROPERTY_LIST do
    %    ((cPtr_%!TYPE_IDENTIFIER% *) result.mObjectPtr)->mProperty_%![name identifierRepresentation]% = ((cPtr_%!TYPE_IDENTIFIER% *) inObject.mObjectPtr)->mProperty_%![name identifierRepresentation]% ;\n%
  end
%  }
  return result ;
}
%
end
if (not IS_ABSTRACT) & GENERATE_SYNTHETIZED_INITIALIZER then
%//--- Synthetized initializer ----------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::
%![[INITIALIZER_ARGUMENT_LIST initializerSignature] identifierRepresentation]% (%?^
  for (typeEntry name 3*) in INITIALIZER_ARGUMENT_LIST do
    %const GGS_%![typeEntry identifierRepresentation]% & in_%![name identifierRepresentation]%,\n%!^
  end
          %Compiler * inCompiler
          %!^%COMMA_LOCATION_ARGS) {
  cPtr_%!TYPE_IDENTIFIER% * object = nullptr ;
  macroMyNew (object, cPtr_%!TYPE_IDENTIFIER% (inCompiler COMMA_THERE)) ;
  object->%!TYPE_IDENTIFIER%_%![[INITIALIZER_ARGUMENT_LIST initializerSignature] identifierRepresentation]% (%
  for (* name 3*) in INITIALIZER_ARGUMENT_LIST do
    %in_%![name identifierRepresentation]%, %
  end
 %inCompiler) ;
  const GGS_%!TYPE_IDENTIFIER% result (object) ;
  macroDetachSharedObject (object) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void cPtr_%!TYPE_IDENTIFIER%::
%!TYPE_IDENTIFIER%_%![[INITIALIZER_ARGUMENT_LIST initializerSignature] identifierRepresentation]% (%?^
  for (typeEntry name 3*) in INITIALIZER_ARGUMENT_LIST do
    %const GGS_%![typeEntry identifierRepresentation]% & in_%![name identifierRepresentation]%,\n%!^
  end
          %Compiler * /* inCompiler */) {
%
  for (* name 3*) in INITIALIZER_ARGUMENT_LIST do
    %  mProperty_%![name identifierRepresentation]% = in_%![name identifierRepresentation]% ;\n%
  end
%}

%end
%//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (const cPtr_%!TYPE_IDENTIFIER% * inSourcePtr) :
% if SUPER_TYPE_IDENTIFIER == ""
  then %AC_GALGAS_reference_class%
  else %GGS_%!SUPER_TYPE_IDENTIFIER
  end% (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_%!TYPE_IDENTIFIER%) ;
}
%
if (not IS_ABSTRACT) & ([INITIALIZER_ARGUMENT_LIST count] == 0) then
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_new (LOCATION_ARGS) {\n%
  %  GGS_%!TYPE_IDENTIFIER% result ;\n%
  %  macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (THERE)) ;\n%
  %  return result ;\n%
  %}\n\n%
end

if (not IS_ABSTRACT) & ([INITIALIZER_ARGUMENT_LIST count] > 0) then
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_new (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in INITIALIZER_ARGUMENT_LIST
    do %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & in_%![mPropertyName identifierRepresentation]
    between %,\n%!^
  end
  if [INITIALIZER_ARGUMENT_LIST count] == 0 then
    %LOCATION_ARGS%  
  else
    %\n%!^%COMMA_LOCATION_ARGS%
  end
  %) {
  GGS_%!TYPE_IDENTIFIER% result ;
  macroMyNew (result.mObjectPtr, cPtr_%!TYPE_IDENTIFIER% (%
    for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in INITIALIZER_ARGUMENT_LIST
      do %in_%![mPropertyName identifierRepresentation]
      between %, %
    end
    % COMMA_THERE)) ;\n%
  %  return result ;\n%
  %}\n\n% 
end

for (mPropertyTypeEntry mPropertyName * mHasSetter *) in CURRENT_PROPERTY_LIST do
%//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![mPropertyTypeEntry identifierRepresentation]% GGS_%!TYPE_IDENTIFIER%::readProperty_%![mPropertyName identifierRepresentation]% (void) const {\n%
    %  if (nullptr == mObjectPtr) {\n%
    %    return GGS_%![mPropertyTypeEntry identifierRepresentation]% () ;\n%
    %  }else{\n%
    %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
    %    macroValidSharedObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
    %    return p->mProperty_%![mPropertyName identifierRepresentation]% ;\n%
    %  }\n%
  %}\n\n%
  if mHasSetter then
  %//--------------------------------------------------------------------------------------------------\n
void GGS_%!TYPE_IDENTIFIER%::setProperty_%![mPropertyName identifierRepresentation]% (const GGS_%![mPropertyTypeEntry identifierRepresentation]% & inValue) {\n%
      %  if (nullptr != mObjectPtr) {\n%
      %    cPtr_%!TYPE_IDENTIFIER% * p = (cPtr_%!TYPE_IDENTIFIER% *) mObjectPtr ;\n%
      %    macroValidSharedObject (p, cPtr_%!TYPE_IDENTIFIER%) ;\n%
      %    p->mProperty_%![mPropertyName identifierRepresentation]% = inValue ;\n%
      %  }\n%
    %}\n\n%
  end
end

%//--------------------------------------------------------------------------------------------------
//%!"Pointer class for @" + TYPE_NAME + " class"%
//--------------------------------------------------------------------------------------------------

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in INITIALIZER_ARGUMENT_LIST
    do %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & in_%![mPropertyName identifierRepresentation]
    between %,\n%!^
  end
  if [INITIALIZER_ARGUMENT_LIST count] > 0 then
    %\n%!^%COMMA_LOCATION_ARGS%
  else
    %LOCATION_ARGS%
  end
%) :
%if SUPER_TYPE_IDENTIFIER == "" then %acStrongPtr_class% else %cPtr_%!SUPER_TYPE_IDENTIFIER end% (%
  for (mPropertyTypeEntry mPropertyName initialization mHasSetter mHasSelector) in INHERITED_INITIALIZER_ARGUMENT_LIST
    do %in_%![mPropertyName identifierRepresentation]
    between %, %
  end
  if [INHERITED_INITIALIZER_ARGUMENT_LIST count] > 0 then
    % COMMA_THERE%
  else
    %THERE%
  end
%)%
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in CURRENT_PROPERTY_LIST do
    %,\n% %mProperty_%![mPropertyName identifierRepresentation]% ()%
  end
% {
%!CONSTRUCTOR_INITIALIZATION_CODE
  for (* mPropertyName 3*) in INITIALIZER_ARGUMENT_LIST do
    %  mProperty_%![mPropertyName identifierRepresentation]% = in_%![mPropertyName identifierRepresentation]% ;\n%
  end
%}

%
if not IS_ABSTRACT then
  %//--------------------------------------------------------------------------------------------------\n\n%
  %const C_galgas_type_descriptor * cPtr_%!TYPE_IDENTIFIER%::classDescriptor (void) const {\n%
  %  return & kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;\n%
  %}\n\n%
  if [ALL_PROPERTY_LIST count] == 0 then
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%String & ioString,\n%
                               !^%const int32_t /* inIndentation */) const {\n%
    %  ioString.appendCString ("[@%!TYPE_NAME%]") ;\n%
    %}\n\n%
  else
    %void cPtr_%!TYPE_IDENTIFIER%::description (%?^%String & ioString,\n%
                               !^%const int32_t inIndentation) const {\n%
    %  ioString.appendCString ("[@%!TYPE_NAME%:") ;\n%
    for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ALL_PROPERTY_LIST
      do %  mProperty_%![mPropertyName identifierRepresentation]%.description (ioString, inIndentation+1) ;\n%
      between %  ioString.appendCString (", ") ;\n%
    end
    %  ioString.appendCString ("]") ;\n%
    %}\n\n%
  end
end

if not IS_ABSTRACT then
%//--------------------------------------------------------------------------------------------------

acPtr_class * cPtr_%!TYPE_IDENTIFIER%::duplicate (LOCATION_ARGS) const {
  acPtr_class * ptr = nullptr ;
  macroMyNew (ptr, cPtr_%!TYPE_IDENTIFIER% (%
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in INITIALIZER_ARGUMENT_LIST
  do  %mProperty_%![mPropertyName identifierRepresentation]
  between %, %
  after % COMMA_%
  end
  
  %THERE)) ;
  return ptr ;
}

%end
%
