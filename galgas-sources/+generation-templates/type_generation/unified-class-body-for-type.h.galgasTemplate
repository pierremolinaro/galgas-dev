//-- Start of type generic part

//--------------------------------- Initializers
% for (lkey formalArgumentList) in INITIALIZER_MAP do
%  public: static GGS_%!TYPE_IDENTIFIER% %![lkey identifierRepresentation]% (%?^
    for (mFormalSelector mFormalArgumentType mFormalArgumentName isConstant) in formalArgumentList do (IDX)
      if isConstant
      then
        %const class GGS_% ![mFormalArgumentType identifierRepresentation] % & inOperand%![IDX string]%,\n%!^
      else
        %class GGS_% ![mFormalArgumentType identifierRepresentation] % inOperand%![IDX string]%,\n%!^
      end
    end
    %Compiler * inCompiler
    %!^%COMMA_LOCATION_ARGS) ;
%end%
//--------------------------------- Object cloning
  protected: virtual AC_GALGAS_root * clonedObject (void) const override ;

//--------------------------------- Object extraction
  public: static GGS_%!TYPE_IDENTIFIER% extractObject (%?^%const GGS_object & inObject,
               %!^%Compiler * inCompiler
               %!^%COMMA_LOCATION_ARGS) ;

%
if [CLASS_FUNC_MAP count] > 0 then
  %//--------------------------------- GALGAS class functions\n%
  for (lkey mArgumentTypeList mHasCompilerArgument mReturnedType) in CLASS_FUNC_MAP do
    %  public: static class GGS_%![mReturnedType identifierRepresentation]% class_func_%![lkey.string identifierRepresentation]% (%?^
    for (mFormalSelector mFormalArgumentType mFormalArgumentName *) in mArgumentTypeList
      do (IDX) %const class GGS_% ![mFormalArgumentType identifierRepresentation] % & inOperand%![IDX string]
      between %,\n%!^
    end
    if mHasCompilerArgument & ([mArgumentTypeList count] > 0) then
      %,\n%!^%class Compiler * inCompiler%
      %\n%!^%COMMA_LOCATION_ARGS) ;\n\n%
    elsif mHasCompilerArgument then
      %Compiler * inCompiler%
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    elsif [mArgumentTypeList count] > 0 then
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    else
      %LOCATION_ARGS) ;\n\n%
    end
  end
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures generateCopyConstructorAndAssignmentOperator]] then
%//--------------------------------- Handle copy
  public: GGS_%!TYPE_IDENTIFIER% (const GGS_%!TYPE_IDENTIFIER% & inSource) ;
  public: GGS_%!TYPE_IDENTIFIER% & operator = (const GGS_%!TYPE_IDENTIFIER% & inSource) ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixShiftOperator]] then
  %//--------------------------------- << and >> shift operators\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% left_shift_operation (%?^%const GGS_uint inShiftOperand,\n%
  !^%class Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% left_shift_operation (%?^%const GGS_bigint inShiftOperand,\n%
  !^%class Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% right_shift_operation (%?^%const GGS_uint inShiftOperand,\n%
  !^%class Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% right_shift_operation (%?^%const GGS_bigint inShiftOperand,\n%
  !^%class Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures andAssignOperatorWithExpression]] then
  %//--------------------------------- &= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void andAssign_operation (const GGS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                     class Compiler * inCompiler\n%
  %                                                     COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures orAssignOperatorWithExpression]] then
  %//--------------------------------- |= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void orAssign_operation (const GGS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                    class Compiler * inCompiler\n%
  %                                                    COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures xorAssignOperatorWithExpression]] then
  %//--------------------------------- ^= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void xorAssign_operation (const GGS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                     class Compiler * inCompiler\n%
  %                                                     COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures plusAssignOperatorWithExpression]] then
  %//--------------------------------- += operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void plusAssign_operation (const GGS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                       class Compiler * inCompiler\n%
  %                                                       COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures minusAssignOperatorWithExpression]] then
  %//--------------------------------- -= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void minusAssign_operation (const GGS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                        class Compiler * inCompiler\n%
  %                                                        COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures mulAssignOperatorWithExpression]] then
  %//--------------------------------- *= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void mulAssign_operation (const GGS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                      class Compiler * inCompiler\n%
  %                                                      COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures divAssignOperatorWithExpression]] then
  %//--------------------------------- /= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void divAssign_operation (const GGS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                      class Compiler * inCompiler\n%
  %                                                      COMMA_LOCATION_ARGS) ;\n\n%
end

if [ADD_ASSIGN_ARGUMENT_LIST count] > 0 then
%//--------------------------------- += operator (with list of field expressions)
  public: VIRTUAL_IN_DEBUG void addAssign_operation (%?^
  for (mFormalSelector mFormalArgumentType mFormalArgumentName *) in ADD_ASSIGN_ARGUMENT_LIST
  do (IDX) %const class GGS_%![mFormalArgumentType identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  if [SUPPORTED_OPERATORS contains ![@typeFeatures plusEqualOperatorWithFieldListNeedsCompilerArg]] then
    %,\n%!^%Compiler * inCompiler%
  end
  %\n%!^%COMMA_LOCATION_ARGS) ;
%
end

if SUPPORT_COLLECTION_VALUE then
%
//--------------------------------- ++= operator, collection value
  public: VIRTUAL_IN_DEBUG void plusPlusAssignOperation (%?^%const GGS_%![ENUMERATED_OBJECT_TYPE identifierRepresentation]% & inOperand
  %!^%COMMA_LOCATION_ARGS) ;
%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixAndOperator]] then
  %//--------------------------------- & operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% operator_and (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixOrOperator]] then
  %//--------------------------------- | operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% operator_or (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixXorOperator]] then
  %//--------------------------------- ^ operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% operator_xor (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures prefixNotOperator]] then
  %//--------------------------------- not operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% operator_not (LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures prefixTildeOperator]] then
  %//--------------------------------- ~ operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% operator_tilde (LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixAddOperator]] then
  %//--------------------------------- + operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% add_operation (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixAddOperatorNoOVF]] then
  %//--------------------------------- &+ operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% add_operation_no_ovf (const GGS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixSubOperatorNoOVF]] then
  %//--------------------------------- &- operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% substract_operation_no_ovf (const GGS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixSubOperator]] then
  %//--------------------------------- - operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% substract_operation (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixMulOperator]] then
  %//--------------------------------- * operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% multiply_operation (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixMulOperatorNoOVF]] then
  %//--------------------------------- &* operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% multiply_operation_no_ovf (const GGS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixDivOperator]] then
  %//--------------------------------- / operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% divide_operation (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixDivOperatorNoOVF]] then
  %//--------------------------------- &/ operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% divide_operation_no_ovf (const GGS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures infixModOperator]] then
  %//--------------------------------- mod operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% modulo_operation (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures prefixMinusOperator]] then
  %//--------------------------------- prefix - operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% operator_unary_minus (%?^%Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures prefixMinusOperatorNoOVF]] then
  %//--------------------------------- prefix &- operator\n%
  %  public: VIRTUAL_IN_DEBUG GGS_%!TYPE_IDENTIFIER% operator_unary_minus_no_ovf (void) const ;\n\n%
end

if [SUPPORTED_OPERATORS contains ![@typeFeatures incDecOperator]] then
  %//--------------------------------- ++, -- operators\n%
  %  public: VIRTUAL_IN_DEBUG void increment_operation (%?^%Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
  %  public: VIRTUAL_IN_DEBUG void decrement_operation (%?^%Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end
if [SUPPORTED_OPERATORS contains ![@typeFeatures incDecOperatorNoOVF]] then
  %//--------------------------------- &++, &-- operators\n%
  %  public: VIRTUAL_IN_DEBUG void increment_operation_no_overflow (void) ;\n\n%
  %  public: VIRTUAL_IN_DEBUG void decrement_operation_no_overflow (void) ;\n\n%
end
if [SUPPORTED_OPERATORS contains ![@typeFeatures generateDescriptionGetterUtilityMethod]] then
  %//--------------------------------- Implementation of getter 'description'\n%
  %  public: VIRTUAL_IN_DEBUG void description (String & ioString,\n%
  %                                             const int32_t inIndentation) const override ;\n%
end

if [SUPPORTED_OPERATORS generateCppObjectComparison]
  & not [SUPPORTED_OPERATORS contains ![@typeFeatures doNotGenererateObjectCompare]] then
%//--------------------------------- Comparison
  public: ComparisonResult objectCompare (const GGS_%!TYPE_IDENTIFIER% & inOperand) const ;
%end


%
//--------------------------------- Setters
%
for (lkey mKind mParameterList mHasCompilerArgument mQualifier mErrorMessage) in MODIFIER_MAP do
  if mKind == [@methodKind definedAsMember] then
    if (mErrorMessage == "") & ((mQualifier == [@methodQualifier isVirtualAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal])) then
      %  public: VIRTUAL_IN_DEBUG void setter_%![lkey.string identifierRepresentation]% (%?^
      for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do (IDX)
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
        else // argumentIn
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
        end
      between %,\n%!^
      end
      if [mParameterList count] == 0 then
        if mHasCompilerArgument then
          %Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          !^%LOCATION_ARGS%
        end  
      else
        if mHasCompilerArgument then
          %,\n%!^%Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          %\n%!^%COMMA_LOCATION_ARGS%
        end  
      end
      %) ;\n\n%
    end
  end
end
%
//--------------------------------- Instance Methods
%
for (lkey mKind mParameterList mDeclarationLocation mHasCompilerArgument mQualifier mErrorMessage) in INSTANCE_METHOD_MAP do
  if mKind == [@methodKind definedAsMember] then
    if (mErrorMessage == "") & ((mQualifier == [@methodQualifier isVirtualAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal])) then
      %  public: VIRTUAL_IN_DEBUG void method_%![lkey.string identifierRepresentation]% (%?^
      for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do (IDX)
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
        else // argumentIn
          %class GGS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
        end
      between %,\n%!^
      end
      if [mParameterList count] == 0 then
        if mHasCompilerArgument then
          %Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          !^%LOCATION_ARGS%
        end  
      else
        if mHasCompilerArgument then
          %,\n%!^%Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          %\n%!^%COMMA_LOCATION_ARGS%
        end  
      end
      %) const ;\n\n%
    end
  end
end
%//--------------------------------- Class Methods
%
for (lkey mParameterList mHasCompilerArgument) in CLASS_METHOD_MAP do
  %  public: static void class_method_%![lkey.string identifierRepresentation]% (%?^
  for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do (IDX)
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %class GGS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %class GGS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %class GGS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
    else // argumentIn
      %class GGS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
    end
  between %,\n%!^
  end
  if [mParameterList count] == 0 then
    if mHasCompilerArgument then
      %Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      !^%LOCATION_ARGS%
    end  
  else
    if mHasCompilerArgument then
      %,\n%!^%Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end  
  end
  %) ;\n\n%
end
%
//--------------------------------- Getters
%
for (lkey kind argumentTypeList * hasCompilerArgument returnedType qualifier replacementGetter) in GETTER_MAP do
  if replacementGetter == "" then
    switch kind 
    case definedAsExtension :
    case definedAsMember :
      if (qualifier == [@methodQualifier isVirtualAbstract]) | (qualifier == [@methodQualifier isBasic]) | (qualifier == [@methodQualifier isBasicFinal]) then
        %  public: VIRTUAL_IN_DEBUG class GGS_% ![returnedType identifierRepresentation] % getter_% ![lkey.string identifierRepresentation] % (%?^
        for (mFormalSelector mFormalArgumentType mFormalArgumentName *) in argumentTypeList
          do (IDX) %const class GGS_%![mFormalArgumentType identifierRepresentation]% & constinOperand% ![IDX string]
          between %,\n% !^
        end
        if [argumentTypeList count] == 0 then
          if hasCompilerArgument then
            %Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
          else
            %LOCATION_ARGS%
          end
        else
          if hasCompilerArgument then
            %,\n% !^ %Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
          else
            %\n% !^ %COMMA_LOCATION_ARGS%
          end
        end
        %) const ;\n\n%
      end
    end
  end
end

%
//--------------------------------- Read subscripts
%
for (key argumentList resultType) in READ_SUBSCRIPT_MAP do
%  public: VIRTUAL_IN_DEBUG class GGS_%![resultType identifierRepresentation]% readSubscript_%
   ![key identifierRepresentation]% (%?^
  for (mFormalSelector mFormalArgumentType mFormalArgumentName *) in argumentList do (IDX) 
    %const class GGS_%![mFormalArgumentType identifierRepresentation]% & in% ![IDX string] %,\n% !^
  end
  %Compiler * inCompiler\n%!^%COMMA_LOCATION_ARGS) const ;\n\n%
end
%

//--------------------------------- Introspection
  public: VIRTUAL_IN_DEBUG const C_galgas_type_descriptor * staticTypeDescriptor (void) const override ;
%

if [SUPPORTED_OPERATORS contains ![@typeFeatures supportWithAccessor]] then
  %  public: VIRTUAL_IN_DEBUG cMapElement_%!TYPE_IDENTIFIER% * readWriteAccessForWithInstruction (%?^%Compiler * inCompiler,\n%
  !^%const GGS_string & inKey\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end

if [ENUMERATION_DESCRIPTOR_LIST count] > 0 then
%//--------------------------------- Friend
  friend class UpEnumerator_%!TYPE_IDENTIFIER% ;
  friend class DownEnumerator_%!TYPE_IDENTIFIER% ;
%end
% 
} ;

//--------------------------------------------------------------------------------------------------

extern const C_galgas_type_descriptor kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;

%
