//-- Start of generic part --*

//--------------------------------- Object cloning
  protected: virtual AC_GALGAS_root * clonedObject (void) const override ;

//--------------------------------- Object extraction
  public: static GALGAS_%!TYPE_IDENTIFIER% extractObject (%?^%const GALGAS_object & inObject,
               %!^%C_Compiler * inCompiler
               %!^%COMMA_LOCATION_ARGS) ;

%
if [CONSTRUCTOR_MAP count] > 0 then
  %//--------------------------------- GALGAS constructors\n%
  for (lkey mArgumentTypeList mHasCompilerArgument mReturnedType) in CONSTRUCTOR_MAP do
    %  public: static class GALGAS_%![mReturnedType identifierRepresentation]% constructor_%![lkey.string identifierRepresentation]% (%?^
    for (mFormalSelector mFormalArgumentType mFormalArgumentName) in mArgumentTypeList
      do (IDX) %const class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & inOperand%![IDX string]
      between %,\n%!^
    end
    if mHasCompilerArgument & ([mArgumentTypeList length] > 0) then
      %,\n%!^%class C_Compiler * inCompiler%
      %\n%!^%COMMA_LOCATION_ARGS) ;\n\n%
    elsif mHasCompilerArgument then
      %C_Compiler * inCompiler%
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    elsif [mArgumentTypeList length] > 0 then
      %\n%!^ %COMMA_LOCATION_ARGS) ;\n\n%
    else
      %LOCATION_ARGS) ;\n\n%
    end
  end
end

if [SUPPORTED_OPERATORS generateCopyConstructorAndAssignmentOperator] then
%//--------------------------------- Handle copy
  public: GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% & inSource) ;
  public: GALGAS_%!TYPE_IDENTIFIER% & operator = (const GALGAS_%!TYPE_IDENTIFIER% & inSource) ;\n\n%
end

if [SUPPORTED_OPERATORS infixShiftOperator] then
  %//--------------------------------- << and >> shift operators\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% left_shift_operation (%?^%const GALGAS_uint inShiftOperand,\n%
  !^%class C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% left_shift_operation (%?^%const GALGAS_bigint inShiftOperand,\n%
  !^%class C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% right_shift_operation (%?^%const GALGAS_uint inShiftOperand,\n%
  !^%class C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% right_shift_operation (%?^%const GALGAS_bigint inShiftOperand,\n%
  !^%class C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS plusEqualOperatorWithExpression] then
  %//--------------------------------- += operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void plusAssign_operation (const GALGAS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                       class C_Compiler * inCompiler\n%
  %                                                       COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS minusEqualOperatorWithExpression] then
  %//--------------------------------- -= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void minusAssign_operation (const GALGAS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                        class C_Compiler * inCompiler\n%
  %                                                        COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS mulEqualOperatorWithExpression] then
  %//--------------------------------- *= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void mulAssign_operation (const GALGAS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                      class C_Compiler * inCompiler\n%
  %                                                      COMMA_LOCATION_ARGS) ;\n\n%
end

if [SUPPORTED_OPERATORS divEqualOperatorWithExpression] then
  %//--------------------------------- /= operator (with expression)\n%
  %  public: VIRTUAL_IN_DEBUG void divAssign_operation (const GALGAS_%!TYPE_IDENTIFIER% inOperand,\n%
  %                                                      class C_Compiler * inCompiler\n%
  %                                                      COMMA_LOCATION_ARGS) ;\n\n%
end

if [ADD_ASSIGN_ARGUMENT_LIST length] > 0 then
%//--------------------------------- += operator (with list of field expressions)
  public: VIRTUAL_IN_DEBUG void addAssign_operation (%?^
  for (mFormalSelector mFormalArgumentType mFormalArgumentName) in ADD_ASSIGN_ARGUMENT_LIST
  do (IDX) %const class GALGAS_%![mFormalArgumentType identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  if [SUPPORTED_OPERATORS plusEqualOperatorWithFieldListNeedsCompilerArg] then
    %,\n%!^%C_Compiler * inCompiler%
  end
  %\n%!^%COMMA_LOCATION_ARGS) ;
%
end

if [SUPPORTED_OPERATORS infixAndOperator] then
  %//--------------------------------- & operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_and (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixOrOperator] then
  %//--------------------------------- | operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_or (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixXorOperator] then
  %//--------------------------------- ^ operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_xor (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS prefixNotOperator] then
  %//--------------------------------- not operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_not (LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS prefixTildeOperator] then
  %//--------------------------------- ~ operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_tilde (LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixAddOperator] then
  %//--------------------------------- + operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% add_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixAddOperatorNoOVF] then
  %//--------------------------------- &+ operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% add_operation_no_ovf (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixSubOperatorNoOVF] then
  %//--------------------------------- &- operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% substract_operation_no_ovf (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixSubOperator] then
  %//--------------------------------- - operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% substract_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixMulOperator] then
  %//--------------------------------- * operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% multiply_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixMulOperatorNoOVF] then
  %//--------------------------------- &* operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% multiply_operation_no_ovf (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixDivOperator] then
  %//--------------------------------- / operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% divide_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixDivOperatorNoOVF] then
  %//--------------------------------- &/ operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% divide_operation_no_ovf (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const ;\n\n%
end

if [SUPPORTED_OPERATORS infixModOperator] then
  %//--------------------------------- mod operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% modulo_operation (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inOperand,\n%
  !^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS prefixMinusOperator] then
  %//--------------------------------- prefix - operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_unary_minus (%?^%C_Compiler * inCompiler\n%
  !^%COMMA_LOCATION_ARGS) const ;\n\n%
end

if [SUPPORTED_OPERATORS prefixMinusOperatorNoOVF] then
  %//--------------------------------- prefix &- operator\n%
  %  public: VIRTUAL_IN_DEBUG GALGAS_%!TYPE_IDENTIFIER% operator_unary_minus_no_ovf (void) const ;\n\n%
end

if [SUPPORTED_OPERATORS incDecOperator] then
  %//--------------------------------- ++, -- operators\n%
  %  public: VIRTUAL_IN_DEBUG void increment_operation (%?^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
  %  public: VIRTUAL_IN_DEBUG void decrement_operation (%?^%C_Compiler * inCompiler\n%
        !^%COMMA_LOCATION_ARGS) ;\n\n%
end
if [SUPPORTED_OPERATORS incDecOperatorNoOVF] then
  %//--------------------------------- &++, &-- operators\n%
  %  public: VIRTUAL_IN_DEBUG void increment_operation_no_overflow (void) ;\n\n%
  %  public: VIRTUAL_IN_DEBUG void decrement_operation_no_overflow (void) ;\n\n%
end
if [SUPPORTED_OPERATORS generateDescriptionGetterUtilityMethod] then
  %//--------------------------------- Implementation of getter 'description'\n%
  %  public: VIRTUAL_IN_DEBUG void description (C_String & ioString,\n%
  %                                              const int32_t inIndentation) const override ;\n%
end

if not [SUPPORTED_OPERATORS doNotGenererateObjectCompare] then
%//--------------------------------- Comparison
  public: typeComparisonResult objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const ;
%end


%
//--------------------------------- Setters
%
for (lkey mKind mParameterList mHasCompilerArgument mQualifier mErrorMessage) in MODIFIER_MAP do
  if mKind == [@methodKind definedAsMember] then
    if (mErrorMessage == "") & ((mQualifier == [@methodQualifier isVirtualAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal])) then
      %  public: VIRTUAL_IN_DEBUG void setter_%![lkey.string identifierRepresentation]% (%?^
      for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do (IDX)
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
        else # argumentIn
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
        end
      between %,\n%!^
      end
      if [mParameterList length] == 0 then
        if mHasCompilerArgument then
          %C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          !^%LOCATION_ARGS%
        end  
      else
        if mHasCompilerArgument then
          %,\n%!^%C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          %\n%!^%COMMA_LOCATION_ARGS%
        end  
      end
      %) ;\n\n%
    end
  end
end
%
//--------------------------------- Instance Methods
%
for (lkey mKind mParameterList mDeclarationLocation mHasCompilerArgument mQualifier mErrorMessage) in INSTANCE_METHOD_MAP do
  if mKind == [@methodKind definedAsMember] then
    if (mErrorMessage == "") & ((mQualifier == [@methodQualifier isVirtualAbstract]) | (mQualifier == [@methodQualifier isBasic]) | (mQualifier == [@methodQualifier isBasicFinal])) then
      %  public: VIRTUAL_IN_DEBUG void method_%![lkey.string identifierRepresentation]% (%?^
      for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do (IDX)
        if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
        elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
        else # argumentIn
          %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
        end
      between %,\n%!^
      end
      if [mParameterList length] == 0 then
        if mHasCompilerArgument then
          %C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          !^%LOCATION_ARGS%
        end  
      else
        if mHasCompilerArgument then
          %,\n%!^%C_Compiler * inCompiler\n%
          !^%COMMA_LOCATION_ARGS%
        else
          %\n%!^%COMMA_LOCATION_ARGS%
        end  
      end
      %) const ;\n\n%
    end
  end
end
%//--------------------------------- Class Methods
%
for (lkey mParameterList mHasCompilerArgument) in CLASS_METHOD_MAP do
  %  public: static void class_method_%![lkey.string identifierRepresentation]% (%?^
  for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mParameterList do (IDX)
    if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
    elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
    else # argumentIn
      %class GALGAS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
    end
  between %,\n%!^
  end
  if [mParameterList length] == 0 then
    if mHasCompilerArgument then
      %C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      !^%LOCATION_ARGS%
    end  
  else
    if mHasCompilerArgument then
      %,\n%!^%C_Compiler * inCompiler\n%
      !^%COMMA_LOCATION_ARGS%
    else
      %\n%!^%COMMA_LOCATION_ARGS%
    end  
  end
  %) ;\n\n%
end
%
//--------------------------------- Getters
%
for (lkey kind argumentTypeList * hasCompilerArgument returnedType qualifier errorMessage replacementGetter) in GETTER_MAP do
  if replacementGetter == "" then
    switch kind 
    case definedAsExtension :
    case definedAsMember :
      if (errorMessage == "") & ((qualifier == [@methodQualifier isVirtualAbstract]) | (qualifier == [@methodQualifier isBasic]) | (qualifier == [@methodQualifier isBasicFinal])) then
        %  public: VIRTUAL_IN_DEBUG class GALGAS_% ![returnedType identifierRepresentation] % getter_% ![lkey.string identifierRepresentation] % (%?^
        for (mFormalSelector mFormalArgumentType mFormalArgumentName) in argumentTypeList
          do (IDX) %const class GALGAS_%![mFormalArgumentType identifierRepresentation]% & constinOperand% ![IDX string]
          between %,\n% !^
        end
        if [argumentTypeList length] == 0 then
          if hasCompilerArgument then
            %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
          else
            %LOCATION_ARGS%
          end
        else
          if hasCompilerArgument then
            %,\n% !^ %C_Compiler * inCompiler\n% !^ %COMMA_LOCATION_ARGS%
          else
            %\n% !^ %COMMA_LOCATION_ARGS%
          end
        end
        %) const ;\n\n%
      end
    end
  end
end

%
//--------------------------------- Optional Methods
%
for (lkey mArgumentTypeList) in OPTIONAL_METHOD_MAP do
   %  public: VIRTUAL_IN_DEBUG bool optional_% ![lkey.string identifierRepresentation] % (%?^
  for (mInputArgument mFormalSelector mFormalArgumentType mFormalArgumentName) in mArgumentTypeList
    do (IDX)
      if mInputArgument then
        %const class GALGAS_%![mFormalArgumentType identifierRepresentation]% & constinOperand% ![IDX string]
      else
        %class GALGAS_%![mFormalArgumentType identifierRepresentation]% & outOperand% ![IDX string]
      end
    between
      %,\n% !^
  end
  %) const ;\n\n%
end

%
//--------------------------------- Introspection
  public: VIRTUAL_IN_DEBUG const C_galgas_type_descriptor * staticTypeDescriptor (void) const override ;
%
if [SUPPORTED_OPERATORS generateEnumerationHelperMethods] then
%//--------------------------------- Enumeration helper methods
  protected: VIRTUAL_IN_DEBUG void populateEnumerationArray (capCollectionElementArray & inEnumerationArray) const ;

%end

if [SUPPORTED_OPERATORS supportWithAccessor] then
  %  public: VIRTUAL_IN_DEBUG cMapElement_%!TYPE_IDENTIFIER% * readWriteAccessForWithInstruction (%?^%C_Compiler * inCompiler,\n%
  !^%const GALGAS_string & inKey\n%
  !^%COMMA_LOCATION_ARGS) ;\n\n%
end

if [ENUMERATION_DESCRIPTOR_LIST length] > 0 then
%//--------------------------------- Friend\n
  friend class cEnumerator_%!TYPE_IDENTIFIER% ;
%end
% 
} ; // End of GALGAS_%!TYPE_IDENTIFIER% class

%if [ENUMERATION_DESCRIPTOR_LIST length] > 0 then
%//----------------------------------------------------------------------------------------------------------------------
//   Enumerator declaration                                                                      
//----------------------------------------------------------------------------------------------------------------------

class cEnumerator_%!TYPE_IDENTIFIER% : public cGenericAbstractEnumerator {
  public: cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GALGAS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
     %!^%const typeEnumerationOrder inOrder) ;

//--- Current element access\n%
  for (mEnumeratedType mEnumerationName) in ENUMERATION_DESCRIPTOR_LIST do
%  public: class GALGAS_%![mEnumeratedType identifierRepresentation]% current_%![mEnumerationName identifierRepresentation]% (LOCATION_ARGS) const ;\n%
  end
  if not [ENUMERATED_OBJECT_TYPE isNull] then
%//--- Current element access\n%
%  public: class GALGAS_%![ENUMERATED_OBJECT_TYPE identifierRepresentation]% current (LOCATION_ARGS) const ;\n%
  end
%} ;\n%
end
%
//----------------------------------------------------------------------------------------------------------------------

extern const C_galgas_type_descriptor kTypeDescriptor_GALGAS_%!TYPE_IDENTIFIER% ;

%
