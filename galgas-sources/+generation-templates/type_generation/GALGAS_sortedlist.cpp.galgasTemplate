//--------------------------------------------------------------------------------------------------
//%!"Class for element of '@" + TYPE_IDENTIFIER + "' sorted list"%
//--------------------------------------------------------------------------------------------------

class cSortedListElement_%!TYPE_IDENTIFIER% : public cSortedListElement {
  public: GGS_%!ELEMENT_TYPE_IDENTIFIER% mObject ;

//--- Constructors
  public: cSortedListElement_%!TYPE_IDENTIFIER% (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & in_%![mPropertyName identifierRepresentation]
    between %,\n%!^
  end
%\n%
!^%COMMA_LOCATION_ARGS) ;

  public: cSortedListElement_%!TYPE_IDENTIFIER% (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inObject
        %!^%COMMA_LOCATION_ARGS) ;

//--- Virtual method that checks that all attributes are valid
  public: virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public: virtual cSortedListElement * copy (void) ;

//--- Virtual method for comparing elements
%if GENERATE_COMPARISON then%  public: virtual ComparisonResult compare (const cCollectionElement * inOperand) const ;
%end%
//--- Description
 public: virtual void description (String & ioString, const int32_t inIndentation) const ;

//--- Virtual method that comparing element for sorting
  public: virtual ComparisonResult compareForSorting (const cSortedListElement * inOperand) const ;
} ;

//--------------------------------------------------------------------------------------------------

cSortedListElement_%!TYPE_IDENTIFIER%::cSortedListElement_%!TYPE_IDENTIFIER% (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
    do %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & in_%![mPropertyName identifierRepresentation]
    between %,\n%!^
  end
%\n%
!^%COMMA_LOCATION_ARGS) :
cSortedListElement (THERE),
mObject (%
for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do %in_%![mPropertyName identifierRepresentation]
  between %, %
end
%) {
}

//--------------------------------------------------------------------------------------------------

cSortedListElement_%!TYPE_IDENTIFIER%::
cSortedListElement_%!TYPE_IDENTIFIER% (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inObject
               %!^%COMMA_LOCATION_ARGS) :
cSortedListElement (THERE),
mObject (inObject) {
}

//--------------------------------------------------------------------------------------------------

bool cSortedListElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return mObject.isValid () ;
}

//--------------------------------------------------------------------------------------------------

cSortedListElement * cSortedListElement_%!TYPE_IDENTIFIER%::copy (void) {
  cSortedListElement * result = nullptr ;
  macroMyNew (result, cSortedListElement_%!TYPE_IDENTIFIER% (%
    for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
      do %mObject.mProperty_%![mPropertyName identifierRepresentation]
      between %, %
    end
  % COMMA_HERE)) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void cSortedListElement_%!TYPE_IDENTIFIER%::description (String & ioString, const int32_t inIndentation) const {
%
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do
    %  ioString.appendNewLine () ;\n%
    %  ioString.appendStringMultiple ("| ", inIndentation) ;\n%
    %  ioString.appendCString (%![mPropertyName utf8RepresentationEscapingQuestionMark]% ":") ;\n%
    %  mObject.mProperty_%![mPropertyName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end
%}

%if GENERATE_COMPARISON then%//--------------------------------------------------------------------------------------------------

ComparisonResult cSortedListElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cSortedListElement_%!TYPE_IDENTIFIER% * operand = (cSortedListElement_%!TYPE_IDENTIFIER% *) inOperand ;
  macroValidSharedObject (operand, cSortedListElement_%!TYPE_IDENTIFIER%) ;
  return mObject.objectCompare (operand->mObject) ;
}

%end%//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_sortedlist () {
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusPlusAssignOperation (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inValue,
      %!^%Compiler * /* inCompiler */
      %!^%COMMA_LOCATION_ARGS) {
  cSortedListElement * p = nullptr ;
  macroMyNew (p, cSortedListElement_%!TYPE_IDENTIFIER% (inValue COMMA_THERE)) ;
  capSortedListElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  appendObject (attributes) ;
}

//--------------------------------------------------------------------------------------------------

ComparisonResult cSortedListElement_%!TYPE_IDENTIFIER%::compareForSorting (const cSortedListElement * inOperand) const {
  ComparisonResult result = ComparisonResult::operandEqual ;
  const cSortedListElement_%!TYPE_IDENTIFIER% * operand = (const cSortedListElement_%!TYPE_IDENTIFIER% *) inOperand ;
  macroValidSharedObject (operand, cSortedListElement_%!TYPE_IDENTIFIER%) ;
% for (mAttributeTypeIndex mAttributeName mAscendingOrder) in SORT_ATTRIBUTE_LIST do
    %  if (result == ComparisonResult::operandEqual) {\n%
    %    result = %
    if mAscendingOrder then
      %mObject.mProperty_%![mAttributeName identifierRepresentation]%.objectCompare (operand->mObject.mProperty_%![mAttributeName identifierRepresentation]%)%
    else
      %operand->mObject.mProperty_%![mAttributeName identifierRepresentation]%.objectCompare (mObject.mProperty_%![mAttributeName identifierRepresentation]%)%
    end
    % ;\n%
    %  }\n%
  end
%  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_emptySortedList (LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.createNewEmptySortedList (THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::init (Compiler * COMMA_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.createNewEmptySortedList (THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_sortedListWithValue (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  %\n%!^%COMMA_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result = class_func_emptySortedList (THERE) ;
  cSortedListElement * p = nullptr ;
  macroMyNew (p, cSortedListElement_%!TYPE_IDENTIFIER% (%
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]
  between %, %
  end
  % COMMA_THERE)) ;
  capSortedListElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  result.appendObject (attributes) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^
  for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
%
    %!^%COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cSortedListElement * p = nullptr ;
    macroMyNew (p, cSortedListElement_%!TYPE_IDENTIFIER% (%
    for (5*) in ATTRIBUTE_LIST
    do (IDX) %inOperand%![IDX string]
    between %, %
    end
    % COMMA_THERE)) ;
    capSortedListElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    appendObject (attributes) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_insert (%?^
  for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% inOperand%![IDX string]%,\n%!^
  end
%Compiler * /* inCompiler */
    %!^%COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cSortedListElement * p = nullptr ;
    macroMyNew (p, cSortedListElement_%!TYPE_IDENTIFIER% (%
    for (5*) in ATTRIBUTE_LIST
    do (IDX) %inOperand%![IDX string]
    between %, %
    end
    % COMMA_THERE)) ;
    capSortedListElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    appendObject (attributes) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusAssign_operation (%?^%const GGS_%!TYPE_IDENTIFIER% inOperand,
                          %!^%Compiler * /* inCompiler */
                          %!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid ()) {
    appendSortedList (inOperand) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popSmallest (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
           %Compiler * inCompiler\n%
         !^%COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeSmallestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popGreatest (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
           %Compiler * inCompiler\n%
         !^%COMMA_LOCATION_ARGS) {
  capSortedListElement attributes ;
  removeGreatestObject (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_smallest (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
     %Compiler * inCompiler\n%
     !^%COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  smallestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_greatest (%?^
  for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
     %Compiler * inCompiler\n%
     !^%COMMA_LOCATION_ARGS) const {
  capSortedListElement attributes ;
  greatestObjectAttributeList (attributes, inCompiler COMMA_THERE) ;
  cSortedListElement_%!TYPE_IDENTIFIER% * p = (cSortedListElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
%
 for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------
// Down Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

DownEnumerator_%!TYPE_IDENTIFIER%::DownEnumerator_%!TYPE_IDENTIFIER% (%?^%const GGS_%!TYPE_IDENTIFIER% & inEnumeratedObject) :
cGenericAbstractEnumerator (EnumerationOrder::Down) {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray) ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!ELEMENT_TYPE_IDENTIFIER% DownEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  const cSortedListElement_%!TYPE_IDENTIFIER% * p = (const cSortedListElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
  return p->mObject ;
}

%for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![mPropertyTypeEntry identifierRepresentation]% DownEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const cSortedListElement_%!TYPE_IDENTIFIER% * p = (const cSortedListElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;\n%
  %  macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mObject.mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end
%

//--------------------------------------------------------------------------------------------------
// Up Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

UpEnumerator_%!TYPE_IDENTIFIER%::UpEnumerator_%!TYPE_IDENTIFIER% (%?^%const GGS_%!TYPE_IDENTIFIER% & inEnumeratedObject) :
cGenericAbstractEnumerator (EnumerationOrder::Up) {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray) ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!ELEMENT_TYPE_IDENTIFIER% UpEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  const cSortedListElement_%!TYPE_IDENTIFIER% * p = (const cSortedListElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;
  return p->mObject ;
}

%for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![mPropertyTypeEntry identifierRepresentation]% UpEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const cSortedListElement_%!TYPE_IDENTIFIER% * p = (const cSortedListElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;\n%
  %  macroValidSharedObject (p, cSortedListElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mObject.mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end
%

