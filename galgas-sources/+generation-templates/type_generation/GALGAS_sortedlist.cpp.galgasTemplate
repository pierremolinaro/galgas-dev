//--------------------------------------------------------------------------------------------------
//%!"@" + TYPE_IDENTIFIER + "' sorted list"%
//--------------------------------------------------------------------------------------------------

static int32_t compareForSorting_%!TYPE_IDENTIFIER% (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inLeft,
                            %!^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inRight) {
  ComparisonResult result = ComparisonResult::operandEqual ;
% for (mAttributeTypeIndex mAttributeName mAscendingOrder) in SORT_ATTRIBUTE_LIST do
    %  if (result == ComparisonResult::operandEqual) {\n%
    %    result = %
    if mAscendingOrder then
      %inLeft.mProperty_%![mAttributeName identifierRepresentation]%.objectCompare (inRight.mProperty_%![mAttributeName identifierRepresentation]%)%
    else
      %inRight.mProperty_%![mAttributeName identifierRepresentation]%.objectCompare (inLeft.mProperty_%![mAttributeName identifierRepresentation]%)%
    end
    % ;\n%
    %  }\n%
  end
%  return int32_t (result) ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
mSharedArray () {
}

%if GENERATE_COMPARISON then
%//--------------------------------------------------------------------------------------------------

ComparisonResult GGS_%!TYPE_IDENTIFIER%::objectCompare (const GGS_%!TYPE_IDENTIFIER% & inOperand) const {
    ComparisonResult result = ComparisonResult::invalid ;
    if (isValid () && inOperand.isValid ()) {
      if (count () < inOperand.count ()) {
        result = ComparisonResult::firstOperandLowerThanSecond ;
      }else if (count () > inOperand.count ()) {
        result = ComparisonResult::firstOperandGreaterThanSecond ;
      }else{
        result = ComparisonResult::operandEqual ;
        for (int32_t i = 0 ; (i < count ()) && (result == ComparisonResult::operandEqual) ; i++) {
          const GGS_%!ELEMENT_TYPE_IDENTIFIER% left = mSharedArray (i COMMA_HERE) ;
          const GGS_%!ELEMENT_TYPE_IDENTIFIER% right = inOperand.mSharedArray (i COMMA_HERE) ;
          result = left.objectCompare (right) ;
        }
      }
    }
    return result ;
  }

%end%//--------------------------------------------------------------------------------------------------

GGS_uint GGS_%!TYPE_IDENTIFIER%::getter_count (UNUSED_LOCATION_ARGS) const {
  GGS_uint result ;
  if (isValid ()) {
    result = GGS_uint (uint32_t (count ())) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusPlusAssignOperation (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inElement
      %!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid () && inElement.isValid ()) {
    mSharedArray.appendObject (inElement) ;
    mSharedArray.quickSortUsingFunction (compareForSorting_%!TYPE_IDENTIFIER%) ;
  }
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_emptySortedList (UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.mSharedArray.setCapacity (16) ; // Build
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::init (Compiler * COMMA_UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.mSharedArray.setCapacity (16) ; // Build
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_sortedListWithValue (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  %\n%!^%COMMA_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result = class_func_emptySortedList (THERE) ;
  const GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (%
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]
  between %, %
  end
  %) ;
  result.plusPlusAssignOperation (newElement COMMA_THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::addAssignOperation (%?^
  for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
%
    %!^%COMMA_LOCATION_ARGS) {
  const GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (%
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]
  between %, %
  end
  %) ;
  plusPlusAssignOperation (newElement COMMA_THERE) ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_insert (%?^
  for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% inOperand%![IDX string]%,\n%!^
  end
%Compiler * /* inCompiler */
    %!^%COMMA_LOCATION_ARGS) {
  const GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (%
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]
  between %, %
  end
  %) ;
  plusPlusAssignOperation (newElement COMMA_THERE) ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusAssignOperation (%?^%const GGS_%!TYPE_IDENTIFIER% inSortedList,
                          %!^%Compiler * /* inCompiler */
                          %!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid () && inSortedList.isValid ()) {
    for (int32_t i=0 ; i<inSortedList.count () ; i++) {
      mSharedArray.appendObject (inSortedList.mSharedArray (i COMMA_HERE)) ;
    }
    mSharedArray.quickSortUsingFunction (compareForSorting_%!TYPE_IDENTIFIER%) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popSmallest (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
           %Compiler * inCompiler\n%
         !^%COMMA_LOCATION_ARGS) {
  bool found = false ;
  if (isValid ()) {
    if (count () == 0) {
      inCompiler->onTheFlyRunTimeError ("'popSmallest' method invoked on an empty list" COMMA_THERE) ;
    }else{
%for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mSharedArray (0 COMMA_HERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
 end
%      mSharedArray.removeObjectAtIndex (0 COMMA_HERE) ;
      found = true ;
    }
  }
  if (!found) {
% for (5*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popGreatest (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
           %Compiler * inCompiler\n%
         !^%COMMA_LOCATION_ARGS) {
  bool found = false ;
  if (isValid ()) {
    if (count () == 0) {
      inCompiler->onTheFlyRunTimeError ("'popGreatest' method invoked on an empty list" COMMA_THERE) ;
    }else{
%for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mSharedArray.lastObject (HERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
 end
%      mSharedArray.removeLastObject (HERE) ;
      found = true ;
    }
  }
  if (!found) {
% for (5*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_smallest (%?^
  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
     %Compiler * inCompiler\n%
     !^%COMMA_LOCATION_ARGS) const {
  bool found = false ;
  if (isValid ()) {
    if (count () == 0) {
      inCompiler->onTheFlyRunTimeError ("'smallest' method invoked on an empty list" COMMA_THERE) ;
    }else{
%for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mSharedArray (0 COMMA_HERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
 end
%      found = true ;
    }
  }
  if (!found) {
% for (5*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_greatest (%?^
  for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![mPropertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
     %Compiler * inCompiler\n%
     !^%COMMA_LOCATION_ARGS) const {
  bool found = false ;
  if (isValid ()) {
    if (count () == 0) {
      inCompiler->onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }else{
%for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mSharedArray.lastObject (HERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
 end
%      found = true ;
    }
  }
  if (!found) {
% for (5*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::description (String & ioString,
                                          const int32_t /* inIndentation */) const {
  ioString.appendCString (" (") ;
  ioString.appendSigned (count ()) ;
  ioString.appendCString (" object") ;
  ioString.appendString ((count () > 1) ? "s" : "") ;
  ioString.appendCString (")>") ;
}

//--------------------------------------------------------------------------------------------------
// Down Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

DownEnumerator_%!TYPE_IDENTIFIER%::DownEnumerator_%!TYPE_IDENTIFIER% (%?^%const GGS_%!TYPE_IDENTIFIER% & inEnumeratedObject) :
mElementArray (inEnumeratedObject.sortedElementArray ()),
mIndex (0) {
  mIndex = mElementArray.count () - 1 ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!ELEMENT_TYPE_IDENTIFIER% DownEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  return mElementArray (mIndex COMMA_THERE) ;
}

%for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![mPropertyTypeEntry identifierRepresentation]% DownEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  return mElementArray (mIndex COMMA_THERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end
%//--------------------------------------------------------------------------------------------------
// Up Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

UpEnumerator_%!TYPE_IDENTIFIER%::UpEnumerator_%!TYPE_IDENTIFIER% (%?^%const GGS_%!TYPE_IDENTIFIER% & inEnumeratedObject) :
mElementArray (inEnumeratedObject.sortedElementArray ()),
mIndex (0) {
}

//--------------------------------------------------------------------------------------------------

GGS_%!ELEMENT_TYPE_IDENTIFIER% UpEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  return mElementArray (mIndex COMMA_THERE) ;
}

%for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![mPropertyTypeEntry identifierRepresentation]% UpEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  return mElementArray (mIndex COMMA_THERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end
%

