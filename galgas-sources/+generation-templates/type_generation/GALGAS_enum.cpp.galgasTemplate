%
for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
  if [mAssociatedValueTypeList count] > 0 then
    %//--------------------------------------------------------------------------------------------------\n\n%
    %cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName%::cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName% (%?^
    for (mType) in mAssociatedValueTypeList
    do (idx) %const GALGAS_%![mType identifierRepresentation]% inAssociatedValue%![idx string]
    between %,\n%!^
    end
    %\n%!^%COMMA_LOCATION_ARGS) :\n%
    %cEnumAssociatedValues (THERE)%
    for (mType) in mAssociatedValueTypeList do (idx)
    %,\nmAssociatedValue%![idx string]% (inAssociatedValue%![idx string]%)%
    end
    % {\n%   
    %} ;\n\n%
    %//--------------------------------------------------------------------------------------------------\n\n%
    %void cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName%::description (%?^%String & ioString,\n%
                       !^%const int32_t inIndentation) const {\n%
    %  ioString.appendCString ("(\\n") ;\n%
    for (mType) in mAssociatedValueTypeList do (idx)
      %  mAssociatedValue%![idx string]%.description (ioString, inIndentation) ;\n%
    end
    %  ioString.appendCString (")") ;\n%
    %}\n\n%
    if GENERATE_COMPARISON then
      %//--------------------------------------------------------------------------------------------------\n\n%
      %ComparisonResult cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName%::compare (const cEnumAssociatedValues * inOperand) const {\n%
      %  const cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName% * ptr = dynamic_cast<const cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName% *> (inOperand) ;\n%
      %  macroValidPointer (ptr) ;\n%
      %  ComparisonResult result = ComparisonResult::operandEqual ;\n%
      for (mType) in mAssociatedValueTypeList do (idx)
        %  if (result == ComparisonResult::operandEqual) {\n%
        %    result = mAssociatedValue%![idx string]%.objectCompare (ptr->mAssociatedValue%![idx string]%) ;\n%
        %  }\n%
      end
      %  return result ;\n%
      %}\n\n%
    end
  end
end

%//--------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (void) :
%
if HAS_ASSOCIATED_VALUES then
  %mAssociatedValues (),\n%
end
%mEnum (Enumeration::invalid) {
}

%
for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::class_func_%![mConstantName identifierRepresentation]% (%?^
  if [mAssociatedValueTypeList count] == 0 then
    %UNUSED_LOCATION_ARGS%
  else
    for (mType) in mAssociatedValueTypeList
    do (idx) %const GALGAS_%![mType identifierRepresentation]% & inAssociatedValue%![idx string]
    between %,\n%!^
    end
    %\n%!^%COMMA_LOCATION_ARGS%
  end
  %) {\n%
  %  GALGAS_%!TYPE_IDENTIFIER% result ;\n%
  if [mAssociatedValueTypeList count] == 0 then
    %  result.mEnum = Enumeration::enum_%![mConstantName identifierRepresentation]% ;\n%
  else
    %  if (%
    for (mType) in mAssociatedValueTypeList
    do (idx) %inAssociatedValue%![idx string]%.isValid ()%
    between % && %
    end
    %) {\n%
    %    result.mEnum = Enumeration::enum_%![mConstantName identifierRepresentation]% ;\n%
    %    cEnumAssociatedValues * ptr = nullptr ;\n%
    %    macroMyNew (ptr, cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName% (%
    for (mType) in mAssociatedValueTypeList
    do (idx) %inAssociatedValue%![idx string]
    between %, %
    end
    % COMMA_THERE)) ;\n%
    %    result.mAssociatedValues.setPointer (ptr) ;\n%
    %    macroDetachSharedObject (ptr) ;\n%
    %  }\n%
  end
  %  return result ;\n%
  %}\n\n%
end

for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
  if [mAssociatedValueTypeList count] > 0 then
    %//--------------------------------------------------------------------------------------------------\n\n%
    %void GALGAS_%!TYPE_IDENTIFIER%::method_%![mConstantName identifierRepresentation]% (%?^
    for (mType) in mAssociatedValueTypeList do (idx)
      %GALGAS_%![mType identifierRepresentation]% & outAssociatedValue%![idx string]%,\n%!^
    end
    !^%Compiler * inCompiler\n%
    !^%COMMA_LOCATION_ARGS) const {\n%
    %  if (mEnum != Enumeration::enum_%![mConstantName identifierRepresentation]%) {\n%
    for (mType) in mAssociatedValueTypeList do (idx)
      %    outAssociatedValue%![idx string]%.drop () ;\n%
    end
    %    String s ;\n%
    %    s.appendCString ("method @%!TYPE_IDENTIFIER% %!mConstantName% invoked with an invalid enum value") ;\n%
    %    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;\n%
    %  }else{\n%
    %    const cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName% * ptr = (const cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName% *) unsafePointer () ;\n%    
    for (mType) in mAssociatedValueTypeList do (idx)
      %    outAssociatedValue%![idx string]% = ptr->mAssociatedValue%![idx string]% ;\n%
    end
    %  }\n%
    %}\n\n%
  end
end


for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
    %//--------------------------------------------------------------------------------------------------\n\n%
    %bool GALGAS_%!TYPE_IDENTIFIER%::optional_%![mConstantName identifierRepresentation]% (%?^
    for (mType) in mAssociatedValueTypeList
    do (idx)
      %GALGAS_%![mType identifierRepresentation]% & outAssociatedValue%![idx string]
    between
      %,\n%!^
    end
    %) const {\n%
    %  const bool ok = mEnum == Enumeration::enum_%![mConstantName identifierRepresentation]% ;\n%
    if [mAssociatedValueTypeList count] > 0 then
      %  if (ok) {\n%
      %    const auto * ptr = (const cEnumAssociatedValues_%!TYPE_IDENTIFIER%_%!mConstantName% *) unsafePointer () ;\n%    
      for (mType) in mAssociatedValueTypeList do (idx)
         %    outAssociatedValue%![idx string]% = ptr->mAssociatedValue%![idx string]% ;\n%
       end
       %  }\n%
     end
     %  return ok ;\n%
     %}\n\n%
end

%//--------------------------------------------------------------------------------------------------

static const char * gEnumNameArrayFor_%!TYPE_IDENTIFIER% [%![[CONSTANT_LIST count] + 1 string]%] = {
  "(not built)"%
for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST
   do %,\n  %![mConstantName utf8RepresentationEscapingQuestionMark]
end%
} ;

%
for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
%//--------------------------------------------------------------------------------------------------

GALGAS_bool GALGAS_%!TYPE_IDENTIFIER%::getter_is%![[mConstantName stringByCapitalizingFirstCharacter] identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {
  return GALGAS_bool (Enumeration::invalid != mEnum, Enumeration::enum_%![mConstantName identifierRepresentation]% == mEnum) ;
}\n\n%
end
%//--------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::description (%?^%String & ioString,
%                                       !^%const int32_t %
if HAS_ASSOCIATED_VALUES then
  %inIndentation%
else
  %/* inIndentation */%
end
%) const {
  ioString.appendCString ("<enum @%!TYPE_NAME%: ") ;
  ioString.appendCString (gEnumNameArrayFor_%!TYPE_IDENTIFIER% [size_t (mEnum)]) ;
%
if HAS_ASSOCIATED_VALUES then
  %  mAssociatedValues.description (ioString, inIndentation) ;\n%
end
%  ioString.appendCString (">") ;
}

%if GENERATE_COMPARISON then
%//--------------------------------------------------------------------------------------------------

ComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {
  ComparisonResult result = ComparisonResult::invalid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = ComparisonResult::firstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = ComparisonResult::firstOperandGreaterThanSecond ;
    }else{
%
if HAS_ASSOCIATED_VALUES then
%      result = mAssociatedValues.objectCompare (inOperand.mAssociatedValues) ;\n%
else
%      result = ComparisonResult::operandEqual ;\n%
end
%    }
  }
  return result ;
}
%end%
