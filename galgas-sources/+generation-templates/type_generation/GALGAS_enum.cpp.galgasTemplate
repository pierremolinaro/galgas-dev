//--------------------------------------------------------------------------------------------------
//  Enum %!TYPE_NAME%
//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
%
if HAS_ASSOCIATED_VALUES then
  %mAssociatedValues (),\n%
end
%mEnum (Enumeration::invalid) {
}


%
for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_%![mConstantName identifierRepresentation]% (%?^
  if [mAssociatedValueTypeList count] == 0 then
    %UNUSED_LOCATION_ARGS%
  else
    for (mType *) in mAssociatedValueTypeList
    do (idx) %const GGS_%![mType identifierRepresentation]% & inAssociatedValue%![idx string]
    between %,\n%!^
    end
    %\n%!^%COMMA_UNUSED_LOCATION_ARGS%
  end
  %) {\n%
  %  GGS_%!TYPE_IDENTIFIER% result ;\n%
  %  result.mEnum = Enumeration::enum_%![mConstantName identifierRepresentation]% ;\n%
  if [mAssociatedValueTypeList count] > 0 then
    %  AC_GALGAS_root * p = nullptr ;\n%
    %  macroMyNew (p, GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]% (%
    for (mType *) in mAssociatedValueTypeList
    do (idx) %inAssociatedValue%![idx string]
    between %, %
    end
    %)) ;\n%
    %  EnumerationAssociatedValues * eav = nullptr ;\n%
    %  macroMyNew (eav, EnumerationAssociatedValues (p COMMA_HERE)) ;\n%
    %  result.mAssociatedValues.assignPointer (eav) ; // Ownership is transfered to mAssociatedValues\n%
    %  macroDetachSharedObject (eav) ;\n%
  end
  %  return result ;\n%
  %}\n\n%
end

for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
  if [mAssociatedValueTypeList count] > 0 then
    %//--------------------------------------------------------------------------------------------------\n\n%
    %void GGS_%!TYPE_IDENTIFIER%::method_extract%![[mConstantName capitalizingFirstCharacter] identifierRepresentation]% (%?^
    for (mType name) in mAssociatedValueTypeList do
      %GGS_%![mType identifierRepresentation]% & outAssociatedValue_%!name%,\n%!^
    end
    !^%Compiler * inCompiler\n%
    !^%COMMA_LOCATION_ARGS) const {\n%
    %  if (mEnum != Enumeration::enum_%![mConstantName identifierRepresentation]%) {\n%
    for (mType name) in mAssociatedValueTypeList do (idx)
      %    outAssociatedValue_%!name%.drop () ;\n%
    end
    %    String s ;\n%
    %    s.appendCString ("method @%!TYPE_IDENTIFIER%.%!mConstantName% invoked with an invalid enum value") ;\n%
    %    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;\n%
    %  }else{\n%
    %    const auto ptr = (GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]% *) mAssociatedValues.associatedValuesPointer () ;\n%    
    for (mType name) in mAssociatedValueTypeList do (idx)
      %    outAssociatedValue_%!name% = ptr->mProperty_%![name identifierRepresentation]% ;\n%
    end
    %  }\n%
    %}\n\n%
  end
end

for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
%//--------------------------------------------------------------------------------------------------\n\n%
  if [mAssociatedValueTypeList count] > 0 then
    %GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]%_3F_ GGS_%!TYPE_IDENTIFIER%::getter_get%![[mConstantName capitalizingFirstCharacter] identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {\n%
    %  GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]%_3F_ result ;\n%
    %  if (mEnum == Enumeration::enum_%![mConstantName identifierRepresentation]%) {\n%
    %    const auto ptr = (const GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]% *) mAssociatedValues.associatedValuesPointer () ;\n%
    %    result = GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]% (*ptr) ;\n%
    %  }\n%
    %  return result ;\n%
    %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
    %void GGS_%!TYPE_IDENTIFIER%::getAssociatedValuesFor_%![mConstantName identifierRepresentation]% (%?^
    for (mType valueName) in mAssociatedValueTypeList
    do (idx) %GGS_%![mType identifierRepresentation]% & out_%!valueName
    between %,\n%!^
    end
    %) const {\n%
    %  const auto ptr = (const GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]% *) mAssociatedValues.associatedValuesPointer () ;\n%
    for (* value) in mAssociatedValueTypeList do
       %  out_%!value% = ptr->mProperty_%![value identifierRepresentation]% ;\n%
    end
    %}\n\n%
  end
end

%//--------------------------------------------------------------------------------------------------

static const char * gEnumNameArrayFor_%!TYPE_IDENTIFIER% [%![[CONSTANT_LIST count] + 1 string]%] = {
  "(not built)"%
for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST
   do %,\n  %![mConstantName utf8RepresentationEscapingQuestionMark]
end%
} ;

%

for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
%//--------------------------------------------------------------------------------------------------

GGS_bool GGS_%!TYPE_IDENTIFIER%::getter_is%![[mConstantName capitalizingFirstCharacter] identifierRepresentation]% (UNUSED_LOCATION_ARGS) const {
  return GGS_bool (Enumeration::invalid != mEnum, Enumeration::enum_%![mConstantName identifierRepresentation]% == mEnum) ;
}\n\n%
end

%//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::description (%?^%String & ioString,
%                                       !^%const int32_t %
if HAS_ASSOCIATED_VALUES then
  %inIndentation%
else
  %/* inIndentation */%
end
%) const {
  ioString.appendCString ("<enum @%!TYPE_NAME%: ") ;
  ioString.appendCString (gEnumNameArrayFor_%!TYPE_IDENTIFIER% [size_t (mEnum)]) ;
%
if HAS_ASSOCIATED_VALUES then
  %  mAssociatedValues.description (ioString, inIndentation) ;\n%
end
%  ioString.appendCString (">") ;
}

%if GENERATE_COMPARISON then
%//--------------------------------------------------------------------------------------------------

ComparisonResult GGS_%!TYPE_IDENTIFIER%::objectCompare (const GGS_%!TYPE_IDENTIFIER% & inOperand) const {
  ComparisonResult result = ComparisonResult::invalid ;
  if (isValid () && inOperand.isValid ()) {
    if (mEnum < inOperand.mEnum) {
      result = ComparisonResult::firstOperandLowerThanSecond ;
    }else if (mEnum > inOperand.mEnum) {
      result = ComparisonResult::firstOperandGreaterThanSecond ;
    }else{
%
if HAS_ASSOCIATED_VALUES then
%      switch (mEnum) {\n%
for (mConstantName mAssociatedValueTypeList) in CONSTANT_LIST do
  if [mAssociatedValueTypeList count] > 0 then
%      case Enumeration::enum_%![mConstantName identifierRepresentation]%: {\n%
%        const auto left = (GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]% *) mAssociatedValues.associatedValuesPointer () ;\n%
%        const auto right = (GGS_%![makeEmbeddedTypeName (!outer:TYPE_NAME !inner: mConstantName) identifierRepresentation]% *) inOperand.mAssociatedValues.associatedValuesPointer () ;\n%
%        result = left->objectCompare (*right) ;\n%
%        }break ;\n%
  end
end
%      default:\n%
%        result = ComparisonResult::operandEqual ;\n%
%        break ;\n%
%      }\n%
else
%      result = ComparisonResult::operandEqual ;\n%
end
%    }
  }
  return result ;
}
%end%
