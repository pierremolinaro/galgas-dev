//--------------------------------------------------------------------------------------------------
//%!"Class for element of '@" + TYPE_IDENTIFIER + "' list"%
//--------------------------------------------------------------------------------------------------

class cCollectionElement_%!TYPE_IDENTIFIER% : public cCollectionElement {
  public: GGS_%!ELEMENT_TYPE_IDENTIFIER% mObject ;

//--- Class functions
  public: cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do %const GGS_%![propertyTypeEntry identifierRepresentation]% & in_%![propertyName identifierRepresentation]
    between %,\n%!^
  end
%\n%
!^%COMMA_LOCATION_ARGS) ;
  public: cCollectionElement_%!TYPE_IDENTIFIER% (const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inElement COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
%if GENERATE_COMPARISON then
%  public: virtual ComparisonResult compare (const cCollectionElement * inOperand) const ;
%end%
//--- Virtual method that checks that all attributes are valid
  public: virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public: virtual cCollectionElement * copy (void) ;

//--- Description
  public: virtual void description (String & ioString, const int32_t inIndentation) const ;
} ;

//--------------------------------------------------------------------------------------------------

cCollectionElement_%!TYPE_IDENTIFIER%::cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do %const GGS_%![propertyTypeEntry identifierRepresentation]% & in_%![propertyName identifierRepresentation]
    between %,\n%!^
  end
%\n%
!^%COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (%
for (* propertyName 3*) in ATTRIBUTE_LIST
  do %in_%![propertyName identifierRepresentation]
  between %, %
end
%) {
}

//--------------------------------------------------------------------------------------------------

cCollectionElement_%!TYPE_IDENTIFIER%::cCollectionElement_%!TYPE_IDENTIFIER% (const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inElement COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (%
for (* propertyName 3*) in ATTRIBUTE_LIST
  do %inElement.mProperty_%![propertyName identifierRepresentation]
  between %, %
end
%) {
}

//--------------------------------------------------------------------------------------------------

bool cCollectionElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return true ;
}

//--------------------------------------------------------------------------------------------------

cCollectionElement * cCollectionElement_%!TYPE_IDENTIFIER%::copy (void) {
  cCollectionElement * result = nullptr ;
  macroMyNew (result, cCollectionElement_%!TYPE_IDENTIFIER% (%
    for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
      do %mObject.mProperty_%![propertyName identifierRepresentation]
      between %, %
    end
  % COMMA_HERE)) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void cCollectionElement_%!TYPE_IDENTIFIER%::description (String & ioString, const int32_t inIndentation) const {
%
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do
    %  ioString.appendNewLine () ;\n%
    %  ioString.appendStringMultiple ("| ", inIndentation) ;\n%
    %  ioString.appendCString (%![propertyName utf8RepresentationEscapingQuestionMark]% ":") ;\n%
    %  mObject.mProperty_%![propertyName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end
%}

%if GENERATE_COMPARISON then
%//--------------------------------------------------------------------------------------------------

ComparisonResult cCollectionElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_%!TYPE_IDENTIFIER% * operand = (cCollectionElement_%!TYPE_IDENTIFIER% *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_%!TYPE_IDENTIFIER%) ;
  return mObject.objectCompare (operand->mObject) ;
}

%
end
%//--------------------------------------------------------------------------------------------------
// List type @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
mArray () {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (const capCollectionElementArray & inArray) :
mArray () {
  mArray.setCapacity (std::max (16, int32_t (inArray.count ()))) ;
  for (uint32_t i = 0 ; i < inArray.count () ; i++) {
    const capCollectionElement v = inArray.objectAtIndex (i COMMA_HERE) ;
    cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) v.ptr () ;
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
    const GGS_%!ELEMENT_TYPE_IDENTIFIER% element (%
    for (* mPropertyName 3*) in ATTRIBUTE_LIST
    do %p->mObject.mProperty_%![mPropertyName identifierRepresentation]
    between %, %
    end
%) ;
    mArray.appendObject (element) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::makeAttributesFromObjects (%?^%capCollectionElement & outAttributes%
  for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST
    do %,\n%!^%const GGS_%![mPropertyTypeEntry identifierRepresentation]% & in_%![mPropertyName identifierRepresentation]
  end
%\n%
!^%COMMA_LOCATION_ARGS) {
  cCollectionElement_%!TYPE_IDENTIFIER% * p = nullptr ;
  macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%
  for (* mPropertyName 3*) in ATTRIBUTE_LIST
  do %in_%![mPropertyName identifierRepresentation]
  between %, %
  end
% COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//--------------------------------------------------------------------------------------------------

GGS_uint GGS_%!TYPE_IDENTIFIER%::getter_count (UNUSED_LOCATION_ARGS) const {
  GGS_uint result ;
  if (isValid ()) {
    result = GGS_uint (count ()) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_range GGS_%!TYPE_IDENTIFIER%::getter_range (UNUSED_LOCATION_ARGS) const {
  GGS_range result ;
  if (isValid ()) {
    result = GGS_range (0, count ()) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::description (%?^%String & /* ioString */,
      %!^%const int32_t /* inIndentation */) const {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_emptyList (UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.mArray.setCapacity (16) ; // Build
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::init (Compiler * COMMA_UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.mArray.setCapacity (16) ; // Build
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusPlusAssignOperation (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inValue
      %!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid () && inValue.isValid ()) {
    mArray.appendObject (inValue) ;
  }
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_listWithValue (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![propertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  %\n%!^%COMMA_LOCATION_ARGS) {
  const GGS_%!ELEMENT_TYPE_IDENTIFIER% element (%
    for (5*) in ATTRIBUTE_LIST
    do (IDX) %inOperand%![IDX string]
    between %, %
    end
%) ;
  GGS_%!TYPE_IDENTIFIER% result ;
  if (element.isValid ()) {
    result.mArray.setCapacity (16) ; // Build
    result.plusPlusAssignOperation (element COMMA_THERE) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::addAssignOperation (%?^
  for (mPropertyTypeEntry 4*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
%
    %!^%COMMA_LOCATION_ARGS) {
  const GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (%
  for (5*) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]
  between %, %
  end
  %) ;
  plusPlusAssignOperation (newElement COMMA_THERE) ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_append (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![propertyTypeEntry identifierRepresentation]% inOperand%![IDX string]%,%
  between %\n%!^
  end
  %\n%!^%Compiler * /* inCompiler */%
  %\n%!^%COMMA_LOCATION_ARGS) {
  const GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (%
  for (5*) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]
  between %, %
  end
  %) ;
  if (isValid () && newElement.isValid ()) {
    plusPlusAssignOperation (newElement COMMA_THERE) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_insertAtIndex (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %const GGS_%![propertyTypeEntry identifierRepresentation]% inOperand%![IDX string]%,\n%!^
  end
   %const GGS_uint inInsertionIndex,\n%!^
   %Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {
  const GGS_%!ELEMENT_TYPE_IDENTIFIER% newElement (%
  for (5*) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]
  between %, %
  end
  %) ;
  if (isValid () && inInsertionIndex.isValid () && newElement.isValid ()) {
    const int32_t idx = int32_t (inInsertionIndex.uintValue ()) ;
    if (idx <= mArray.count ()) {
      mArray.insertObjectAtIndex (newElement, idx COMMA_THERE) ;
    }else{
      String message = "cannot insert at index " ;
      message.appendSigned (idx) ;
      message.appendCString (", list count is ") ;
      message.appendSigned (mArray.count ()) ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_removeAtIndex (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string]%,\n%!^
  end
   %const GGS_uint inRemoveIndex,\n%!^
   %Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {
  bool removed = false ;
  if (isValid () && inRemoveIndex.isValid ()) {
    const int32_t idx = int32_t (inRemoveIndex.uintValue ()) ;
    if (idx < mArray.count ()) {
      removed = true ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mArray (idx COMMA_HERE).mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%      mArray.removeObjectAtIndex (idx COMMA_HERE) ;
    }else{
      String message = "cannot remove at index " ;
      message.appendSigned (idx) ;
      message.appendCString (", list count is ") ;
      message.appendSigned (mArray.count ()) ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
  if (!removed) {
%for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
end%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popFirst (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) {
  bool removed = false ;
  if (isValid ()) {
    if (mArray.count () > 0) {
      removed = true ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mArray (0 COMMA_THERE).mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%      mArray.removeObjectAtIndex (0 COMMA_HERE) ;
    }else{
      const String message = "cannot remove first element, list is empty" ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
  if (!removed) {
%for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
end%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popLast (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) {
  bool removed = false ;
  if (isValid ()) {
    if (mArray.count () > 0) {
      removed = true ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mArray.lastObject (HERE).mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%      mArray.removeLastObject (HERE) ;
    }else{
      const String message = "cannot remove last element, list is empty" ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
  if (!removed) {
%for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
end%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_first (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) const {
  bool found = false ;
  if (isValid ()) {
    if (mArray.count () > 0) {
      found = true ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mArray (0 COMMA_THERE).mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%    }else{
      const String message = "cannot get first element, list is empty" ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
  if (!found) {
%for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
end%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_last (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) const {
  bool found = false ;
  if (isValid ()) {
    if (mArray.count () > 0) {
      found = true ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = mArray.lastObject (HERE).mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%    }else{
      const String message = "cannot get last element, list is empty" ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
  if (!found) {
%for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
end%  }
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::add_operation (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand,
                                            %!^%Compiler * /* inCompiler */
                                            %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.mArray.setCapacity (1 + result.mArray.count () + inOperand.mArray.count ()) ;
    for (int32_t i = 0 ; i < inOperand.mArray.count () ; i++) {
      result.mArray.appendObject (inOperand.mArray (i COMMA_HERE)) ;
    }
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::subList (%?^%const int32_t inStart,
       %!^%const int32_t inLength,
       %!^%Compiler * inCompiler
       %!^%COMMA_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result ;
  const bool ok = (inStart >= 0) && (inLength >= 0) && ((inStart + inLength) <= int32_t (count ())) ;
  if (ok) {
    result.mArray.setCapacity (std::max (16, inLength)) ;
    for (int32_t i = inStart ; i < (inStart + inLength) ; i++) {
      result.mArray.appendObject (mArray (i COMMA_HERE)) ;
    }
  }else{
    String message = "cannot get sublist [start: " ;
    message.appendSigned (inStart) ;
    message.appendCString (", length: ") ;
    message.appendSigned (inLength) ;
    message.appendCString ("], list count is ") ;
    message.appendSigned (mArray.count ()) ;
    inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::getter_subListWithRange (%?^%const GGS_range & inRange,
        %!^%Compiler * inCompiler
        %!^%COMMA_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inRange.isValid ()) {
    const int32_t start  = int32_t (inRange.mProperty_start.uintValue ()) ;
    const int32_t length = int32_t (inRange.mProperty_length.uintValue ()) ;
    result = subList (start, length, inCompiler COMMA_THERE) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::getter_subListFromIndex (%?^%const GGS_uint & inIndex,
        %!^%Compiler * inCompiler
        %!^%COMMA_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inIndex.isValid ()) {
    const int32_t start  = int32_t (inIndex.uintValue ()) ;
    const int32_t length = int32_t (count ()) - start ;
    result = subList (start, length, inCompiler COMMA_THERE) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::getter_subListToIndex (%?^%const GGS_uint & inIndex,
        %!^%Compiler * inCompiler
        %!^%COMMA_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inIndex.isValid ()) {
    const int32_t start  = 0 ;
    const int32_t length = int32_t (inIndex.uintValue ()) + 1 ;
    result = subList (start, length, inCompiler COMMA_THERE) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusAssignOperation (%?^%const GGS_%!TYPE_IDENTIFIER% inList,
                          %!^%Compiler * /* inCompiler */
                          %!^%COMMA_UNUSED_LOCATION_ARGS) {
  if (isValid () && inList.isValid ()) {
    mArray.setCapacity (1 + mArray.count () + inList.mArray.count ()) ;
    for (int32_t i=0 ; i < int32_t (inList.count ()) ; i++) {
      mArray.appendObject (inList.mArray (i COMMA_HERE)) ;
    }
  }
}

%
for (propertyTypeEntry propertyName * hasSetter *) in ATTRIBUTE_LIST do (IDX)
  if hasSetter then
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GGS_%!TYPE_IDENTIFIER%::setter_set%![[propertyName capitalizingFirstCharacter] identifierRepresentation]%AtIndex (%?^%GGS_%![propertyTypeEntry identifierRepresentation]% inOperand,
    %!^%GGS_uint inIndex,
    %!^%Compiler * inCompiler
    %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand.isValid () && inIndex.isValid ()) {
    const uint32_t idx = inIndex.uintValue () ;
    if (idx < count ()) {
      mArray (int32_t (idx) COMMA_HERE).mProperty_%![propertyName identifierRepresentation]% = inOperand ;
    }else{
      String message = "cannot access at index " ;
      message.appendUnsigned (idx) ;
      message.appendCString (", list count is ") ;
      message.appendSigned (mArray.count ()) ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
}
%end

%//--------------------------------------------------------------------------------------------------
  
GGS_%![propertyTypeEntry identifierRepresentation]% GGS_%!TYPE_IDENTIFIER%::getter_%![propertyName identifierRepresentation]%AtIndex (%?^%const GGS_uint & inIndex,
    %!^%Compiler * inCompiler
    %!^%COMMA_LOCATION_ARGS) const {
  GGS_%![propertyTypeEntry identifierRepresentation]% result ;
  if (isValid () && inIndex.isValid ()) {
    const uint32_t idx = inIndex.uintValue () ;
    if (idx < count ()) {
      result = mArray (int32_t (idx) COMMA_HERE).mProperty_%![propertyName identifierRepresentation]% ;
    }else{
      String message = "cannot access at index " ;
      message.appendUnsigned (idx) ;
      message.appendCString (", list count is ") ;
      message.appendSigned (mArray.count ()) ;
      inCompiler->onTheFlySemanticError (message COMMA_THERE) ;
    }
  }
  return result ;
}
%end
if GENERATE_COMPARISON then
%//--------------------------------------------------------------------------------------------------

ComparisonResult GGS_%!TYPE_IDENTIFIER%::objectCompare (const GGS_%!TYPE_IDENTIFIER% & inOperand) const {
  ComparisonResult result = ComparisonResult::invalid ;
  if (isValid () && inOperand.isValid ()) {
    if (count () < inOperand.count ()) {
      result = ComparisonResult::firstOperandLowerThanSecond ;
    }else if (count () > inOperand.count ()) {
      result = ComparisonResult::firstOperandGreaterThanSecond ;
    }else{
      result = ComparisonResult::operandEqual ;
      for (uint32_t i = 0 ; (i < count ()) && (result == ComparisonResult::operandEqual) ; i++) {
        const GGS_%!ELEMENT_TYPE_IDENTIFIER% left = mArray (int32_t (i) COMMA_HERE) ;
        const GGS_%!ELEMENT_TYPE_IDENTIFIER% right = inOperand.mArray (int32_t (i) COMMA_HERE) ;
        result = left.objectCompare (right) ;
      }
    }
  }
  return result ;
}

%end
%//--------------------------------------------------------------------------------------------------
// Down Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

DownEnumerator_%!TYPE_IDENTIFIER%::DownEnumerator_%!TYPE_IDENTIFIER% (%?^%const GGS_%!TYPE_IDENTIFIER% & inEnumeratedObject) :
mArray (inEnumeratedObject.sortedElementArray ()),
mIndex (0) {
  mIndex = mArray.count () - 1 ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!ELEMENT_TYPE_IDENTIFIER% DownEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  return mArray (mIndex COMMA_THERE) ;
}

%for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![mPropertyTypeEntry identifierRepresentation]% DownEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  return mArray (mIndex COMMA_THERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end
%

//--------------------------------------------------------------------------------------------------
// Up Enumerator for @%!TYPE_IDENTIFIER%
//--------------------------------------------------------------------------------------------------

UpEnumerator_%!TYPE_IDENTIFIER%::UpEnumerator_%!TYPE_IDENTIFIER% (%?^%const GGS_%!TYPE_IDENTIFIER% & inEnumeratedObject) :
mArray (inEnumeratedObject.sortedElementArray ()),
mIndex (0) {
}

//--------------------------------------------------------------------------------------------------

GGS_%!ELEMENT_TYPE_IDENTIFIER% UpEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  return mArray (mIndex COMMA_THERE) ;
}

%for (mPropertyTypeEntry mPropertyName 3*) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![mPropertyTypeEntry identifierRepresentation]% UpEnumerator_%!TYPE_IDENTIFIER%::current_%![mPropertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  return mArray (mIndex COMMA_THERE).mProperty_%![mPropertyName identifierRepresentation]% ;\n%
  %}\n\n%
end
%


