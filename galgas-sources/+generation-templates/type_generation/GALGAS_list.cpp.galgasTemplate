//--------------------------------------------------------------------------------------------------
//
//%!"Class for element of '@" + TYPE_IDENTIFIER + "' list"%
//
//--------------------------------------------------------------------------------------------------

class cCollectionElement_%!TYPE_IDENTIFIER% : public cCollectionElement {
  public: GGS_%!ELEMENT_TYPE_IDENTIFIER% mObject ;

//--- Class functions
  public: cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do %const GGS_%![propertyTypeEntry identifierRepresentation]% & in_%![propertyName identifierRepresentation]
    between %,\n%!^
  end
%\n%
!^%COMMA_LOCATION_ARGS) ;
  public: cCollectionElement_%!TYPE_IDENTIFIER% (const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inElement COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
%if GENERATE_COMPARISON then
%  public: virtual ComparisonResult compare (const cCollectionElement * inOperand) const ;
%end%
//--- Virtual method that checks that all attributes are valid
  public: virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public: virtual cCollectionElement * copy (void) ;

//--- Description
  public: virtual void description (String & ioString, const int32_t inIndentation) const ;
} ;

//--------------------------------------------------------------------------------------------------

cCollectionElement_%!TYPE_IDENTIFIER%::cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do %const GGS_%![propertyTypeEntry identifierRepresentation]% & in_%![propertyName identifierRepresentation]
    between %,\n%!^
  end
%\n%
!^%COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (%
for (* propertyName 3*) in ATTRIBUTE_LIST
  do %in_%![propertyName identifierRepresentation]
  between %, %
end
%) {
}

//--------------------------------------------------------------------------------------------------

cCollectionElement_%!TYPE_IDENTIFIER%::cCollectionElement_%!TYPE_IDENTIFIER% (const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inElement COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (%
for (* propertyName 3*) in ATTRIBUTE_LIST
  do %inElement.mProperty_%![propertyName identifierRepresentation]
  between %, %
end
%) {
}

//--------------------------------------------------------------------------------------------------

bool cCollectionElement_%!TYPE_IDENTIFIER%::isValid (void) const {
  return true ;
}

//--------------------------------------------------------------------------------------------------

cCollectionElement * cCollectionElement_%!TYPE_IDENTIFIER%::copy (void) {
  cCollectionElement * result = nullptr ;
  macroMyNew (result, cCollectionElement_%!TYPE_IDENTIFIER% (%
    for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
      do %mObject.mProperty_%![propertyName identifierRepresentation]
      between %, %
    end
  % COMMA_HERE)) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void cCollectionElement_%!TYPE_IDENTIFIER%::description (String & ioString, const int32_t inIndentation) const {
%
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do
    %  ioString.appendNewLine () ;\n%
    %  ioString.appendStringMultiple ("| ", inIndentation) ;\n%
    %  ioString.appendCString (%![propertyName utf8RepresentationEscapingQuestionMark]% ":") ;\n%
    %  mObject.mProperty_%![propertyName identifierRepresentation]%.description (ioString, inIndentation) ;\n%
  end
%}

%if GENERATE_COMPARISON then
%//--------------------------------------------------------------------------------------------------

ComparisonResult cCollectionElement_%!TYPE_IDENTIFIER%::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_%!TYPE_IDENTIFIER% * operand = (cCollectionElement_%!TYPE_IDENTIFIER% *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_%!TYPE_IDENTIFIER%) ;
  return mObject.objectCompare (operand->mObject) ;
}

%
end
%//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
AC_GALGAS_list () {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (const capCollectionElementArray & inSharedArray) :
AC_GALGAS_list (inSharedArray) {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_emptyList (UNUSED_LOCATION_ARGS) {
  return GGS_%!TYPE_IDENTIFIER% (capCollectionElementArray ()) ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::init (Compiler * COMMA_UNUSED_LOCATION_ARGS) {
  return GGS_%!TYPE_IDENTIFIER% (capCollectionElementArray ()) ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::enterElement (%?^%const GGS_%!ELEMENT_TYPE_IDENTIFIER% & inValue,
      %!^%Compiler * /* inCompiler */
      %!^%COMMA_LOCATION_ARGS) {
  cCollectionElement * p = nullptr ;
  macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (inValue COMMA_THERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  appendObject (attributes) ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_listWithValue (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![propertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  %\n%!^%COMMA_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  if (%
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %inOperand%![IDX string]%.isValid ()%
  between % && %
  end
  %) {
    result = GGS_%!TYPE_IDENTIFIER% (capCollectionElementArray ()) ;
    capCollectionElement attributes ;
    GGS_%!TYPE_IDENTIFIER%::makeAttributesFromObjects (attributes%
    for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do (IDX) %, inOperand%![IDX string]
    end
    % COMMA_THERE) ;
    result.appendObject (attributes) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::makeAttributesFromObjects (%?^%capCollectionElement & outAttributes%
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do %,\n%!^%const GGS_%![propertyTypeEntry identifierRepresentation]% & in_%![propertyName identifierRepresentation]
  end
%\n%
!^%COMMA_LOCATION_ARGS) {
  cCollectionElement_%!TYPE_IDENTIFIER% * p = nullptr ;
  macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do %in_%![propertyName identifierRepresentation]
    between %,\n%!^
  end
  % COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::addAssign_operation (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![propertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
  end
  %\n%!^%COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cCollectionElement * p = nullptr ;
    macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%
    for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do (IDX) %inOperand%![IDX string]
    between %, %
    end
    % COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    appendObject (attributes) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_append (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %const GGS_%![propertyTypeEntry identifierRepresentation]% inOperand%![IDX string]%,%
  between %\n%!^
  end
  %\n%!^%Compiler * /* inCompiler */%
  %\n%!^%COMMA_LOCATION_ARGS) {
  if (isValid ()) {
    cCollectionElement * p = nullptr ;
    macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%
    for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
    do (IDX) %inOperand%![IDX string]
    between %, %
    end
    % COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    appendObject (attributes) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_insertAtIndex (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %const GGS_%![propertyTypeEntry identifierRepresentation]% inOperand%![IDX string]%,\n%!^
  end
   %const GGS_uint inInsertionIndex,\n%!^
   %Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid ()) {
    cCollectionElement * p = nullptr ;
    macroMyNew (p, cCollectionElement_%!TYPE_IDENTIFIER% (%
      for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
      do (IDX) %inOperand%![IDX string]
      between %, %
      end
      % COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    insertObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_removeAtIndex (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string]%,\n%!^
  end
   %const GGS_uint inRemoveIndex,\n%!^
   %Compiler * inCompiler\n%!^
   %COMMA_LOCATION_ARGS) {
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %  outOperand%![IDX string] %.drop () ;\n%
  end
%  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
    if (nullptr == p) {
      drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %      outOperand%![IDX string] % = p->mObject.mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%    }
  }else{
    drop () ;    
  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popFirst (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setter_popLast (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_first (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::method_last (%?^
  for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST
  do (IDX) %GGS_%![propertyTypeEntry identifierRepresentation]% & outOperand%![IDX string] %,\n%!^
  end
  %Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;
  if (nullptr == p) {
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] %.drop () ;\n%
  end
%  }else{
    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
%
 for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
    %    outOperand%![IDX string] % = p->mObject.mProperty_%![propertyName identifierRepresentation]% ;\n%
  end
%  }
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::add_operation (%?^%const GGS_%!TYPE_IDENTIFIER% & inOperand,
                                            %!^%Compiler * /* inCompiler */
                                            %!^%COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::getter_subListWithRange (%?^%const GGS_range & inRange,
                                               %!^%Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result = GGS_%!TYPE_IDENTIFIER%::class_func_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::getter_subListFromIndex (%?^%const GGS_uint & inIndex,
                                               %!^%Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result = GGS_%!TYPE_IDENTIFIER%::class_func_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::getter_subListToIndex (%?^%const GGS_uint & inIndex,
                                               %!^%Compiler * inCompiler
                                               %!^%COMMA_LOCATION_ARGS) const {
  GGS_%!TYPE_IDENTIFIER% result = GGS_%!TYPE_IDENTIFIER%::class_func_emptyList (THERE) ;
  subListToIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::plusAssign_operation (%?^%const GGS_%!TYPE_IDENTIFIER% inOperand,
                          %!^%Compiler * /* inCompiler */
                          %!^%COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

%
for (propertyTypeEntry propertyName * hasSetter *) in ATTRIBUTE_LIST do (IDX)
  if hasSetter then
  %//--------------------------------------------------------------------------------------------------\n\n%
  %void GGS_%!TYPE_IDENTIFIER%::setter_set%![[propertyName stringByCapitalizingFirstCharacter] identifierRepresentation]%AtIndex (%?^%GGS_%![propertyTypeEntry identifierRepresentation]% inOperand,\n%
  %                                              %!^%GGS_uint inIndex,\n%
  %                                              %!^%Compiler * inCompiler\n%
  %                                              %!^%COMMA_LOCATION_ARGS) {\n%
  %  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) uniquelyReferencedPointerAtIndex (inIndex, inCompiler COMMA_THERE) ;\n%
  %  if (nullptr != p) {\n%
  %    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;\n%
  %    macroUniqueSharedObject (p) ;\n%
  %    p->mObject.mProperty_%![propertyName identifierRepresentation]% = inOperand ;\n%
  %  }\n%
  %}\n\n%
  end

  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![propertyTypeEntry identifierRepresentation]% GGS_%!TYPE_IDENTIFIER%::getter_%![propertyName identifierRepresentation]%AtIndex (%?^%const GGS_uint & inIndex,\n%
  %                                              %!^%Compiler * inCompiler\n%
  %                                              %!^%COMMA_LOCATION_ARGS) const {\n%
  %  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;\n%
  %  cCollectionElement_%!TYPE_IDENTIFIER% * p = (cCollectionElement_%!TYPE_IDENTIFIER% *) attributes.ptr () ;\n%
  %  GGS_%![propertyTypeEntry identifierRepresentation]% result ;\n%
  %  if (nullptr != p) {\n%
  %    macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;\n%
  %    result = p->mObject.mProperty_%![propertyName identifierRepresentation]% ;\n%
  %  }\n%
  %  return result ;\n%
  %}\n\n%
end
%

//--------------------------------------------------------------------------------------------------

cEnumerator_%!TYPE_IDENTIFIER%::cEnumerator_%!TYPE_IDENTIFIER% (%?^%const GGS_%!TYPE_IDENTIFIER% & inEnumeratedObject,
                   %!^%const EnumerationOrder inOrder) :
cGenericAbstractEnumerator (inOrder) {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray) ;
}

//--------------------------------------------------------------------------------------------------

GGS_%!ELEMENT_TYPE_IDENTIFIER% cEnumerator_%!TYPE_IDENTIFIER%::current (LOCATION_ARGS) const {
  const cCollectionElement_%!TYPE_IDENTIFIER% * p = (const cCollectionElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;
  return p->mObject ;
}


%for (propertyTypeEntry propertyName 3*) in ATTRIBUTE_LIST do (IDX)
  %//--------------------------------------------------------------------------------------------------\n\n%
  %GGS_%![propertyTypeEntry identifierRepresentation]% cEnumerator_%!TYPE_IDENTIFIER%::current_%![propertyName identifierRepresentation]% (LOCATION_ARGS) const {\n%
  %  const cCollectionElement_%!TYPE_IDENTIFIER% * p = (const cCollectionElement_%!TYPE_IDENTIFIER% *) currentObjectPtr (THERE) ;\n%
  %  macroValidSharedObject (p, cCollectionElement_%!TYPE_IDENTIFIER%) ;\n%
  %  return p->mObject.mProperty_%![propertyName identifierRepresentation]% ;\n%
  %}\n\n%
end
%


