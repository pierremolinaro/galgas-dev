//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (void) :
%
for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in PROPERTY_LIST
  do %mProperty_%![mPropertyName identifierRepresentation]% ()%
  between %,\n%
end% {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::~ GGS_%!TYPE_IDENTIFIER% (void) {
}

%
if GENERATE_SYNTHETIZED_INITIALIZER then
%//---Synthetized initializer -----------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::%![[INITIALIZER_ARGUMENT_LIST initializerSignature] identifierRepresentation]% (%?^
  for (typeEntry name 3*) in INITIALIZER_ARGUMENT_LIST do
    %const GGS_%![typeEntry identifierRepresentation]% & in_%![name identifierRepresentation]%,\n%!^
  end
          %Compiler * inCompiler
          %!^%COMMA_UNUSED_LOCATION_ARGS) {
  GGS_%!TYPE_IDENTIFIER% result ;
  result.setInitializedProperties (inCompiler) ;
%
  for (* name 3*) in INITIALIZER_ARGUMENT_LIST do
    %  result.mProperty_%![name identifierRepresentation]% = in_%![name identifierRepresentation]% ;\n%
  end
%  return result ;
}

%end
%//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::setInitializedProperties (%
if CONSTRUCTOR_NEEDS_COMPILER_VAR then
  %Compiler * inCompiler%
else
 %Compiler * /* inCompiler */%
end
%) {
%!CONSTRUCTOR_INITIALIZATION_CODE%}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER%::GGS_%!TYPE_IDENTIFIER% (%?^
for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in PROPERTY_LIST
  do (IDX) %const GGS_%![mPropertyTypeEntry identifierRepresentation]% & inOperand%![IDX string]
  between %,\n%!^
end%) :\n%
for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in PROPERTY_LIST do (IDX)
  %mProperty_%![mPropertyName identifierRepresentation]% (inOperand%![IDX string]%)%
  between %,\n%
end
% {
}

//--------------------------------------------------------------------------------------------------

GGS_%!TYPE_IDENTIFIER% GGS_%!TYPE_IDENTIFIER%::class_func_new (%?^
if [INITIALIZER_ARGUMENT_LIST count] == 0 then
  %Compiler * inCompiler\n%
  !^%COMMA_UNUSED_LOCATION_ARGS) {
%else
for (propertyTypeEntry propertyName 3*) in INITIALIZER_ARGUMENT_LIST
  do %const GGS_%![propertyTypeEntry identifierRepresentation]% & in_%!propertyName.string%,\n%!^
end
  %Compiler * inCompiler\n%
  !^%COMMA_UNUSED_LOCATION_ARGS) {
%
end
%  GGS_%!TYPE_IDENTIFIER% result ;
  result.setInitializedProperties (inCompiler) ;
%
for (mPropertyTypeEntry propertyName 3*) in INITIALIZER_ARGUMENT_LIST do
   %  result.mProperty_%![propertyName identifierRepresentation]% = in_%!propertyName.string% ;
%end
%  return result ;
}

%if GENERATE_COMPARISON then%//--------------------------------------------------------------------------------------------------

ComparisonResult GGS_%!TYPE_IDENTIFIER%::objectCompare (const GGS_%!TYPE_IDENTIFIER% & inOperand) const {
   ComparisonResult result = ComparisonResult::operandEqual ;
%for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in PROPERTY_LIST do
  %  if (result == ComparisonResult::operandEqual) {\n%
  %    result = mProperty_%![mPropertyName identifierRepresentation]%.objectCompare (inOperand.mProperty_%![mPropertyName identifierRepresentation]%) ;\n%
  %  }\n%
end
%  return result ;
}

%end%//--------------------------------------------------------------------------------------------------

bool GGS_%!TYPE_IDENTIFIER%::isValid (void) const {
  return %
    for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in PROPERTY_LIST
      do %mProperty_%![mPropertyName identifierRepresentation]%.isValid ()%
      between % && %
    end
% ;
}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::drop (void) {
%  for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in PROPERTY_LIST
    do %  mProperty_%![mPropertyName identifierRepresentation]%.drop () ;\n%
  end
%}

//--------------------------------------------------------------------------------------------------

void GGS_%!TYPE_IDENTIFIER%::description (%?^%String & ioString,
                              %!^%const int32_t inIndentation) const {
  ioString.appendCString ("<struct @%!TYPE_NAME%:") ;
  if (! isValid ()) {
    ioString.appendCString (" not built") ;
  }else{
%
for (mPropertyTypeEntry mPropertyName * mHasSetter mHasSelector) in PROPERTY_LIST
  do (IDX) %    mProperty_%![mPropertyName identifierRepresentation]%.description (ioString, inIndentation+1) ;\n%
  between %    ioString.appendCString (", ") ;\n%
end
%  }
  ioString.appendCString (">") ;
}

