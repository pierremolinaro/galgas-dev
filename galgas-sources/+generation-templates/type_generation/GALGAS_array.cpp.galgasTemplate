//----------------------------------------------------------------------------------------------------------------------
//
//%!"@" + TYPE_NAME + " array"%
//
//----------------------------------------------------------------------------------------------------------------------

class cPtr_%!TYPE_IDENTIFIER% : public C_SharedObject {
  private: GALGAS_%!ELEMENT_TYPE_IDENTIFIER% * mObjectArray ;
%for (mValue) in DIMENSION_LIST do
%  private: uint32_t mSize%!mValue% ;
% end
%
//--- Constructor
  public: cPtr_%!TYPE_IDENTIFIER% (%?^
for (mValue) in DIMENSION_LIST
  do !^%const uint32_t inSize%!mValue
  between %,\n%
end
%
   %!^%COMMA_LOCATION_ARGS) ;

  public: cPtr_%!TYPE_IDENTIFIER% (%?^%const cPtr_%!TYPE_IDENTIFIER% * inPointer
      %!^%COMMA_LOCATION_ARGS) ;

//--- Destructor
  public: virtual ~ cPtr_%!TYPE_IDENTIFIER% (void) ;

//--- No copy
  private: cPtr_%!TYPE_IDENTIFIER% (const cPtr_%!TYPE_IDENTIFIER% &) ;
  private: cPtr_%!TYPE_IDENTIFIER% & operator = (const cPtr_%!TYPE_IDENTIFIER% &) ;

//--- Comparison
  public: VIRTUAL_IN_DEBUG typeComparisonResult objectCompare (const cPtr_%!TYPE_IDENTIFIER% * inOperand) const ;

//--- 
%for (mValue) in DIMENSION_LIST do
%  public: inline uint32_t size%!mValue% (void) const { return mSize%!mValue% ; }
% end
%

  public: VIRTUAL_IN_DEBUG GALGAS_%!ELEMENT_TYPE_IDENTIFIER% objectAtAbsoluteIndex (const int32_t inIndex) const ;

  public: VIRTUAL_IN_DEBUG void setObjectAtAbsoluteIndex (const GALGAS_%!ELEMENT_TYPE_IDENTIFIER% & inObject,
                                                           const int32_t inIndex) ;

//--- 
  public: VIRTUAL_IN_DEBUG int32_t indexForIndexes (%
for (mValue) in DIMENSION_LIST
 before ?^
 do !^%const uint32_t inSize%!mValue%,\n%
 end
% %!^%C_Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) const ;

//--- 
  public: VIRTUAL_IN_DEBUG void setSize (%?^
for (mValue) in DIMENSION_LIST
 do !^%const uint32_t inSize%!mValue
 between %,\n%
 end
%
 %!^%COMMA_LOCATION_ARGS) ;
} ;

//----------------------------------------------------------------------------------------------------------------------

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%
for (mValue) in DIMENSION_LIST
 do %const uint32_t inSize%!mValue
 between %,\n                                                      %
 end
%    %!^%COMMA_LOCATION_ARGS) :
C_SharedObject (THERE),
mObjectArray (NULL),
% for (mValue) in DIMENSION_LIST
  do %mSize%!mValue% (inSize%!mValue%)%
  between %,\n%
  end % {
  macroMyNewArray (mObjectArray, GALGAS_%!ELEMENT_TYPE_IDENTIFIER%, % for (mValue) in DIMENSION_LIST do % inSize%!mValue between % * % end %) ;
}

//----------------------------------------------------------------------------------------------------------------------

cPtr_%!TYPE_IDENTIFIER%::cPtr_%!TYPE_IDENTIFIER% (%?^%const cPtr_%!TYPE_IDENTIFIER% * inPointer
    %!^%COMMA_LOCATION_ARGS) :
C_SharedObject (THERE),
mObjectArray (NULL),
% for (mValue) in DIMENSION_LIST
  do %mSize%!mValue% (inPointer->size%!mValue% ())%
  between %,\n%
  end % {
  const uint32_t size = % for (mValue) in DIMENSION_LIST do %mSize%!mValue between % * % end % ;
  macroMyNewArray (mObjectArray, GALGAS_%!ELEMENT_TYPE_IDENTIFIER%, size) ;
  for (uint32_t i=0 ; i<size ; i++) {
    mObjectArray [i] = inPointer->mObjectArray [i] ;
  }
}

//----------------------------------------------------------------------------------------------------------------------

static inline uint32_t %!TYPE_IDENTIFIER%_computeIndex (%?^
for (mValue) in DIMENSION_LIST
 do !^%const uint32_t inIndex%!mValue
 between %,\n%
 end
for (mValue) in [DIMENSION_LIST subListFromIndex !1]
 do %,\n%!^%const uint32_t inSize%!mValue
end
%) {
  uint32_t idx = inIndex0 ;
%
for (mValue) in [DIMENSION_LIST subListFromIndex !1] do
%  idx *= inSize%!mValue% ;\n%
%  idx += inIndex%!mValue% ;\n%
end

%  return idx ;
}

//----------------------------------------------------------------------------------------------------------------------

int32_t cPtr_%!TYPE_IDENTIFIER%::indexForIndexes (%?^
for (mValue) in DIMENSION_LIST
 do !^%const uint32_t inIndex%!mValue%,\n%
end
%  %!^%C_Compiler * inCompiler
   %!^%COMMA_LOCATION_ARGS) const {
  int32_t result = -1 ;
  %
for (mValue) in DIMENSION_LIST
do
%if (inIndex%!mValue% >= size%!mValue% ()) {
    C_String s ;
    s << "array index %!mValue% : " << cStringWithUnsigned (inIndex%!mValue%) << " >= size " << cStringWithUnsigned (size%!mValue% ()) ;
    inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;\n%
between %  }else %
end
%  }else{
    result = (int32_t) %!TYPE_IDENTIFIER%_computeIndex (%for (mValue) in DIMENSION_LIST do %inIndex%!mValue between %, % end for (mValue) in [DIMENSION_LIST subListFromIndex !1] do %, size%!mValue% ()% end %) ;
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_%!ELEMENT_TYPE_IDENTIFIER% cPtr_%!TYPE_IDENTIFIER%::objectAtAbsoluteIndex (const int32_t inIndex) const {
  return mObjectArray [inIndex] ;
}

//----------------------------------------------------------------------------------------------------------------------

void cPtr_%!TYPE_IDENTIFIER%::setObjectAtAbsoluteIndex (%?^%const GALGAS_%!ELEMENT_TYPE_IDENTIFIER% & inObject,
       %!^%const int32_t inIndex) {
  mObjectArray [inIndex] = inObject ;
}

//----------------------------------------------------------------------------------------------------------------------

cPtr_%!TYPE_IDENTIFIER%::~ cPtr_%!TYPE_IDENTIFIER% (void) {
  macroMyDeleteArray (mObjectArray) ;
}

//----------------------------------------------------------------------------------------------------------------------

void cPtr_%!TYPE_IDENTIFIER%::setSize (%?^
for (mValue) in DIMENSION_LIST
do !^%const uint32_t inSize%!mValue
between %,\n%
end
%      \n%!^%COMMA_LOCATION_ARGS) {
  GALGAS_%!ELEMENT_TYPE_IDENTIFIER% * p = NULL ;
  macroMyNewArrayThere (p, GALGAS_%!ELEMENT_TYPE_IDENTIFIER%, % for (mValue) in DIMENSION_LIST do %inSize%!mValue between % * % end %) ;
%
for (mValue) in DIMENSION_LIST
do %  uint32_t min%!mValue% = uimin32 (size%!mValue% (), inSize%!mValue%) ;\n%
end
for (mValue) in DIMENSION_LIST
do %  for (uint32_t i%!mValue%=0 ; i%!mValue%<min%!mValue% ; i%!mValue%++) {\n%
end
%        const uint32_t idxSource = %!TYPE_IDENTIFIER%_computeIndex (%for (mValue) in DIMENSION_LIST do %i%!mValue between %, % end for (mValue) in [DIMENSION_LIST subListFromIndex !1] do %, size%!mValue% ()% end %) ;
        const uint32_t idxTarget = %!TYPE_IDENTIFIER%_computeIndex (%for (mValue) in DIMENSION_LIST do %i%!mValue between %, % end for (mValue) in [DIMENSION_LIST subListFromIndex !1] do %, inSize%!mValue end %) ;
        p [idxTarget] = mObjectArray [idxSource] ;
%
for (mValue) in DIMENSION_LIST
do %  }\n%
end
for (mValue) in DIMENSION_LIST
do %  mSize%!mValue% = inSize%!mValue% ;\n%
end
%  macroMyDeleteArray (mObjectArray) ;
  mObjectArray = p ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%::~ GALGAS_%!TYPE_IDENTIFIER% (void) {
  macroDetachSharedObject (mSharedObject) ;
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::drop (void) {
  macroDetachSharedObject (mSharedObject) ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER%::GALGAS_%!TYPE_IDENTIFIER% (const GALGAS_%!TYPE_IDENTIFIER% & inSourceObject) :
AC_GALGAS_root (),
mSharedObject (NULL) {
  macroAssignSharedObject (mSharedObject, inSourceObject.mSharedObject) ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% & GALGAS_%!TYPE_IDENTIFIER%::operator = (const GALGAS_%!TYPE_IDENTIFIER% & inSourceObject) {
  if (this != & inSourceObject) {
    macroAssignSharedObject (mSharedObject, inSourceObject.mSharedObject) ;
  }
  return *this ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_%!TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::constructor_new (%?^
for (mValue) in DIMENSION_LIST
 do !^%const GALGAS_uint & inSize%!mValue
 between %,\n%
 end
%
 %!^%COMMA_LOCATION_ARGS) {
  GALGAS_%!TYPE_IDENTIFIER% result ;
  if (% for (mValue) in DIMENSION_LIST do %inSize%!mValue%.isValid ()% between % && % end %) {
    macroMyNew (result.mSharedObject, cPtr_%!TYPE_IDENTIFIER% (% for (mValue) in DIMENSION_LIST do %inSize%!mValue%.uintValue ()% between %, % end % COMMA_THERE)) ;
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::description (%?^%C_String & ioString,
       %!^%const int32_t /* inIndentation */) const {
  ioString << "<@ptrint:" ;
  if (NULL == mSharedObject) {
    ioString << "NULL" ;
  }else{
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    ioString %?^%<< "array ["%
for (mValue) in DIMENSION_LIST
do %\n%!^%<< cStringWithUnsigned (mSharedObject->size%!mValue% ())%
between % << ", "%
end
%             << "] of @uint" ;
  }
  ioString << ">" ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_uint GALGAS_%!TYPE_IDENTIFIER%::getter_axisCount (UNUSED_LOCATION_ARGS) const {
  GALGAS_uint result ;
  if (isValid ()) {
    result = GALGAS_uint (%![DIMENSION string]%) ;
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_range GALGAS_%!TYPE_IDENTIFIER%::getter_rangeForAxis (%?^%const GALGAS_uint & inAxisIndex,
               %!^%C_Compiler * inCompiler
               %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_range result ;
  if (isValid () && inAxisIndex.isValid ()) {
    const uint32_t axisIndex = inAxisIndex.uintValue () ;
    if (axisIndex >= %![DIMENSION string]%) {
      C_String s ;
      s << "getter @ptrint sizeForAxis: argument >= dimension" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
% for (mValue) in DIMENSION_LIST do
%    }else if (%!mValue% == axisIndex) {\n%
%      result = GALGAS_range (GALGAS_uint (0), GALGAS_uint (mSharedObject->size%!mValue% ())) ;\n%
end
%    }
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_uint GALGAS_%!TYPE_IDENTIFIER%::getter_sizeForAxis (%?^%const GALGAS_uint & inAxisIndex,
               %!^%C_Compiler * inCompiler
               %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_uint result ;
  if (isValid () && inAxisIndex.isValid ()) {
    const uint32_t axisIndex = inAxisIndex.uintValue () ;
    if (axisIndex >= %![DIMENSION string]%) {
      C_String s ;
      s << "getter @ptrint sizeForAxis: argument >= dimension" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
% for (mValue) in DIMENSION_LIST do
%    }else if (%!mValue% == axisIndex) {\n%
%      result = GALGAS_uint (mSharedObject->size%!mValue% ()) ;\n%
end
%    }
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_bool GALGAS_%!TYPE_IDENTIFIER%::getter_isValueValidAtIndex (%?^
for (mValue) in DIMENSION_LIST
 do !^%const GALGAS_uint & inIndex%!mValue%,\n%
 end
%  %!^%C_Compiler * inCompiler
   %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (isValid ()% for (mValue) in DIMENSION_LIST do % && inIndex%!mValue%.isValid ()%end %) {
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    const int32_t idx = mSharedObject->indexForIndexes (%?^
for (mValue) in DIMENSION_LIST
do !^%inIndex%!mValue%.uintValue (),\n%
end
%                                                         inCompiler
                                                         COMMA_THERE) ;
    if (idx >= 0) {
      result = GALGAS_bool (mSharedObject->objectAtAbsoluteIndex (idx).isValid ()) ;
    }
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

GALGAS_%!ELEMENT_TYPE_IDENTIFIER% GALGAS_%!TYPE_IDENTIFIER%::getter_valueAtIndex (%?^
for (mValue) in DIMENSION_LIST
 do !^%const GALGAS_uint & inIndex%!mValue%,\n%
 end
%  %!^%C_Compiler * inCompiler
   %!^%COMMA_LOCATION_ARGS) const {
  GALGAS_%!ELEMENT_TYPE_IDENTIFIER% result ;
  if (isValid ()% for (mValue) in DIMENSION_LIST do % && inIndex%!mValue%.isValid ()%end %) {
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    const int32_t idx = mSharedObject->indexForIndexes (%?^
for (mValue) in DIMENSION_LIST
do !^%inIndex%!mValue%.uintValue (),\n%
end
%                                                         inCompiler
                                                         COMMA_THERE) ;
    if (idx >= 0) {
      result = mSharedObject->objectAtAbsoluteIndex (idx) ;
      if (! result.isValid ()) {
        C_String s ;
        s << "getter @ptrint valueAtIndex: object at index ("%
for (mValue) in DIMENSION_LIST
do %\n             << cStringWithUnsigned (mSharedObject->size%!mValue% ())%
between % << ", "%
end
%\n             << ") is invalid" ;
        inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
      }
    }
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::insulate (LOCATION_ARGS) {
  if (isValid () && !mSharedObject->isUniquelyReferenced ()) {
    cPtr_%!TYPE_IDENTIFIER% * p = NULL ;
    macroMyNew (p, cPtr_%!TYPE_IDENTIFIER% (mSharedObject COMMA_THERE)) ;
    macroAssignSharedObject (mSharedObject, p) ;
    macroDetachSharedObject (p) ;
    MF_Assert (mSharedObject->isUniquelyReferenced (), "isUniquelyReferenced () is false", 0, 0) ;
  }
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::setter_setValueAtIndex (%?^%GALGAS_%!ELEMENT_TYPE_IDENTIFIER% inValue,
%
for (mValue) in DIMENSION_LIST
 do !^%GALGAS_uint inIndex%!mValue%,\n%
 end
%       %!^%C_Compiler * inCompiler
       %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inValue.isValid ()% for (mValue) in DIMENSION_LIST do % && inIndex%!mValue%.isValid ()%end %) {
    insulate (THERE) ;
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    MF_Assert (mSharedObject->isUniquelyReferenced (), "isUniquelyReferenced () is false", 0, 0) ;
    const int32_t idx = mSharedObject->indexForIndexes (%?^
for (mValue) in DIMENSION_LIST
do !^%inIndex%!mValue%.uintValue (),\n%
end
%                                                         inCompiler
                                                         COMMA_THERE) ;
    if (idx >= 0) {
      mSharedObject->setObjectAtAbsoluteIndex (inValue, idx) ;
    }
  }
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::setter_forceValueAtIndex (%?^%GALGAS_%!ELEMENT_TYPE_IDENTIFIER% inValue,
%for (mValue) in DIMENSION_LIST
 do !^%const GALGAS_uint inIndex%!mValue%,\n%
 end
% %!^%C_Compiler * inCompiler
  %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inValue.isValid ()% for (mValue) in DIMENSION_LIST do % && inIndex%!mValue%.isValid ()%end %) {
    insulate (THERE) ;
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    MF_Assert (mSharedObject->isUniquelyReferenced (), "isUniquelyReferenced () is false", 0, 0) ;
  //--- Resize ?
    const bool resize = %for (mValue) in DIMENSION_LIST do %(inIndex%!mValue%.uintValue () >= mSharedObject->size%!mValue% ())% between % || % end% ;
    if (resize) {
%
for (mValue) in DIMENSION_LIST
do %      const uint32_t newSize%!mValue% = uimax32 (mSharedObject->size%!mValue% (), inIndex%!mValue%.uintValue () + 1) ;\n%
end
%      mSharedObject->setSize (%for (mValue) in DIMENSION_LIST do %newSize%!mValue between %, % end% COMMA_THERE) ;
    }
  //---
    const int32_t idx = mSharedObject->indexForIndexes (%?^
for (mValue) in DIMENSION_LIST
do !^%inIndex%!mValue%.uintValue (),\n%
end
%                                                         inCompiler
                                                         COMMA_THERE) ;
    if (idx >= 0) {
      mSharedObject->setObjectAtAbsoluteIndex (inValue, idx) ;
    }
  }
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::setter_setSizeForAxis (%?^%GALGAS_uint inNewSize,
        %!^%GALGAS_uint inAxisIndex,
        %!^%C_Compiler * inCompiler
        %!^%COMMA_LOCATION_ARGS) {
  if (isValid () && inNewSize.isValid () && inAxisIndex.isValid ()) {
    insulate (THERE) ;
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    MF_Assert (mSharedObject->isUniquelyReferenced (), "isUniquelyReferenced () is false", 0, 0) ;
  //--- 
    const uint32_t axisIndex = inAxisIndex.uintValue () ;
    if (axisIndex >= %![DIMENSION string]%) {
      C_String s ;
      s << "setter @ptrint setSizeForAxis: axis index ("
        << cStringWithUnsigned (axisIndex) << ") >= dimension (%![DIMENSION string]%)" ;
      inCompiler->onTheFlyRunTimeError (s COMMA_THERE) ;
    }else{
% for (mValue) in DIMENSION_LIST
do %      const uint32_t newSize%!mValue% = (%!mValue% == axisIndex) ? inNewSize.uintValue () : mSharedObject->size%!mValue% () ;\n%
end
%      mSharedObject->setSize (% for (mValue) in DIMENSION_LIST do %newSize%!mValue between %, % end % COMMA_THERE) ;
    }
  }
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::setter_invalidateValueAtIndex (%
for (mValue) in DIMENSION_LIST
 before ?^
 do !^%GALGAS_uint inIndex%!mValue%,\n%
 end
%        %!^%C_Compiler * inCompiler
        %!^%COMMA_LOCATION_ARGS) {
  if (isValid ()% for (mValue) in DIMENSION_LIST do % && inIndex%!mValue%.isValid ()%end %) {
    insulate (THERE) ;
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    MF_Assert (mSharedObject->isUniquelyReferenced (), "isUniquelyReferenced () is false", 0, 0) ;
    const int32_t idx = mSharedObject->indexForIndexes (%?^
for (mValue) in DIMENSION_LIST
do !^%inIndex%!mValue%.uintValue (),\n%
end
%                                                         inCompiler
                                                         COMMA_THERE) ;
    if (idx >= 0) {
      mSharedObject->setObjectAtAbsoluteIndex (GALGAS_%!ELEMENT_TYPE_IDENTIFIER% (), idx) ;
    }
  }
}

//----------------------------------------------------------------------------------------------------------------------

void GALGAS_%!TYPE_IDENTIFIER%::setter_setSize (%?^
for (mValue) in DIMENSION_LIST
do !^%const GALGAS_uint inNewSize%!mValue%,\n%
end
%  %!^%C_Compiler * /* inCompiler */
   %!^%COMMA_LOCATION_ARGS) {
  if (isValid ()% for (mValue) in DIMENSION_LIST do % && inNewSize%!mValue%.isValid ()%end %) {
    insulate (THERE) ;
    macroValidSharedObject (mSharedObject, cPtr_%!TYPE_IDENTIFIER%) ;
    MF_Assert (mSharedObject->isUniquelyReferenced (), "isUniquelyReferenced () is false", 0, 0) ;
    mSharedObject->setSize (%?^
for (mValue) in DIMENSION_LIST
do !^%inNewSize%!mValue%.uintValue ()%
between %,\n%
end
%
                            COMMA_THERE) ;
  }
}

//----------------------------------------------------------------------------------------------------------------------

typeComparisonResult cPtr_%!TYPE_IDENTIFIER%::objectCompare (const cPtr_%!TYPE_IDENTIFIER% * inOperand) const {
  typeComparisonResult result =  kOperandEqual ;
% for (mValue) in DIMENSION_LIST do
 %  if (kOperandEqual == result) {
    if (mSize%!mValue% < inOperand->mSize%!mValue%) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mSize%!mValue% > inOperand->mSize%!mValue%) {
      result = kFirstOperandGreaterThanSecond ;
    }
  }
% end
%  for (uint32_t i=0 ; (i<(%for (mValue) in DIMENSION_LIST do%mSize%!mValue between %*% end%)) && (result == kOperandEqual) ; i++) {
    GALGAS_%!ELEMENT_TYPE_IDENTIFIER% * ptrObject1 = & (mObjectArray [i]) ;
    GALGAS_%!ELEMENT_TYPE_IDENTIFIER% * ptrObject2 = & (inOperand->mObjectArray [i]) ;
    if ((! ptrObject1->isValid ()) && ptrObject2->isValid ()) {
      result = kFirstOperandLowerThanSecond ;
    }else if (ptrObject1->isValid () && ! ptrObject2->isValid ()) {
      result = kFirstOperandGreaterThanSecond ;
    }else if (ptrObject1->isValid () && ptrObject2->isValid ()) {
      result = ptrObject1->objectCompare (* ptrObject2) ;
    }
  }
  return result ;
}

//----------------------------------------------------------------------------------------------------------------------

typeComparisonResult GALGAS_%!TYPE_IDENTIFIER%::objectCompare (const GALGAS_%!TYPE_IDENTIFIER% & inOperand) const {
  typeComparisonResult result = (isValid () && inOperand.isValid ()) ? kOperandEqual : kOperandNotValid ;
  if (kOperandEqual == result) {
    result = mSharedObject->objectCompare (inOperand.mSharedObject) ;
  }
  return result ;
}

