//--------------------------------------------------------------------------------------------------
// Phase 1: @stringset enumerator
//--------------------------------------------------------------------------------------------------

class UpEnumerator_stringset final {
  public: UpEnumerator_stringset (const class GGS_stringset & inEnumeratedObject) ;

  public: bool hasCurrentObject (void) const { return mIndex < mStringArray.count () ; }

  public: void gotoNextObject (void) { mIndex += 1 ; }

//--- Current element access
  public: class GGS_string current_key (LOCATION_ARGS) const ;
  public: class GGS_string current (LOCATION_ARGS) const ;

//--- Private properties
  private: const TC_Array <String> mStringArray ;
  private: int32_t mIndex ;

//--- No copy
  private: UpEnumerator_stringset (const UpEnumerator_stringset &) = delete ;
  private: UpEnumerator_stringset & operator = (const UpEnumerator_stringset &) = delete ;
} ;

//--------------------------------------------------------------------------------------------------

class DownEnumerator_stringset final {

  public: DownEnumerator_stringset (const class GGS_stringset & inEnumeratedObject) ;

  public: bool hasCurrentObject (void) const { return mIndex >= 0 ; }

  public: void gotoNextObject (void) { mIndex -= 1 ; }

//--- Current element access
  public: class GGS_string current_key (LOCATION_ARGS) const ;
  public: class GGS_string current (LOCATION_ARGS) const ;

//--- Private properties
  private: const TC_Array <String> mStringArray ;
  private: int32_t mIndex ;

//--- No copy
  private: DownEnumerator_stringset (const DownEnumerator_stringset &) = delete ;
  private: DownEnumerator_stringset & operator = (const DownEnumerator_stringset &) = delete ;
} ;

//--------------------------------------------------------------------------------------------------
//   @stringset type
//--------------------------------------------------------------------------------------------------

class GGS_stringset : public AC_GALGAS_root {
//--------------------------------- Private data members
  private: SharedStringMap mSharedMap ;

//--------------------------------- Accessors
  public: VIRTUAL_IN_DEBUG inline bool isValid (void) const override { return mSharedMap.isValid () ; }
  public: VIRTUAL_IN_DEBUG void drop (void) override { mSharedMap.drop () ; }

//--------------------------------- Default constructor
  public: GGS_stringset (void) ;

//--------------------------------- Virtual constructor
  public: virtual ~ GGS_stringset (void) ;


