//--------------------------------------------------------------------------------------------------
// Phase 1: @stringset enumerator
//--------------------------------------------------------------------------------------------------

class cEnumerator_stringset final : public cGenericAbstractEnumerator {
  public: cEnumerator_stringset (%?^%const class GGS_stringset & inEnumeratedObject,
     %!^%const EnumerationOrder inOrder) ;

//    public: bool hasCurrentObject (void) const ;
//    public: void gotoNextObject (void) ;
//    public: void rewind (void) ;
//--- Current element access
  public: class GGS_string current_key (LOCATION_ARGS) const ;
  public: class GGS_string current (LOCATION_ARGS) const ;
} ;

//--------------------------------------------------------------------------------------------------

class UpEnumerator_stringset final : public cGenericAbstractEnumerator {
  public: UpEnumerator_stringset (%?^%const class GGS_stringset & inEnumeratedObject) ;

//--- Current element access
  public: class GGS_string current_key (LOCATION_ARGS) const ;
  public: class GGS_string current (LOCATION_ARGS) const ;
} ;

//--------------------------------------------------------------------------------------------------

class DownEnumerator_stringset final : public cGenericAbstractEnumerator {
  public: DownEnumerator_stringset (%?^%const class GGS_stringset & inEnumeratedObject) ;

//    public: bool hasCurrentObject (void) const ;
//    public: void gotoNextObject (void) ;
//    public: void rewind (void) ;
//--- Current element access
  public: class GGS_string current_key (LOCATION_ARGS) const ;
  public: class GGS_string current (LOCATION_ARGS) const ;
} ;

//--------------------------------------------------------------------------------------------------
//   @stringset type
//--------------------------------------------------------------------------------------------------

class GGS_stringset : public AC_GALGAS_root {
//--------------------------------- Private data members
  private: std::set <String> mStringSet ;
  private: bool mIsValid ;

//--------------------------------- Accessors
  public: VIRTUAL_IN_DEBUG inline bool isValid (void) const override { return mIsValid ; }
  public: VIRTUAL_IN_DEBUG void drop (void) override ;

//--------------------------------- Default constructor
  public: GGS_stringset (void) ;

