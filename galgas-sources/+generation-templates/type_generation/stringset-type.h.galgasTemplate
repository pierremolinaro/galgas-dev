//--------------------------------------------------------------------------------------------------
// Phase 1: @stringset
//--------------------------------------------------------------------------------------------------

//--------------------------------------------------------------------------------------------------
//  SharedStringMapNode
//--------------------------------------------------------------------------------------------------

class SharedStringMapNode final : public SharedObject {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private: OptionalSharedRef <SharedStringMapNode> mInfPtr ;
  private: OptionalSharedRef <SharedStringMapNode> mSupPtr ;
  private: int32_t mBalance ;
  public: const String mKey ;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  public: SharedStringMapNode (const String & inKey
                               COMMA_LOCATION_ARGS) ;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  public: virtual ~SharedStringMapNode (void) = default ;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  public: SharedStringMapNode (const OptionalSharedRef <SharedStringMapNode> & inNodePtr
                               COMMA_LOCATION_ARGS) ;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // No copy
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private: SharedStringMapNode (const SharedStringMapNode &) = delete ;
  private: SharedStringMapNode & operator = (const SharedStringMapNode &) = delete ;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  private: static void populateStringArray (const OptionalSharedRef <SharedStringMapNode> & inNode,
                                            TC_Array <String> & ioStringArray) ;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  friend class SharedStringMapRoot ;

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

} ;

//--------------------------------------------------------------------------------------------------
//  SharedStringMap
//--------------------------------------------------------------------------------------------------

class SharedStringMapRoot ;

//--------------------------------------------------------------------------------------------------

class SharedStringMap final {
//--------------------------------- Private data members
  private: OptionalSharedRef <SharedStringMapRoot> mSharedRoot ;

//--------------------------------- Build
  public: static SharedStringMap build (LOCATION_ARGS) ;

//--------------------------------- Accessors
  public: inline bool isValid (void) const { return mSharedRoot.isNotNil () ; }

//--------------------------------- Drop
  public: void drop (void) ;

//--------------------------------- Default constructor
  public: SharedStringMap () ;

//--------------------------------- Destructor
  public: ~ SharedStringMap (void) ;

//--------------------------------- Insulate
  private: void insulate (LOCATION_ARGS) ;

//--------------------------------- Handle copy
  public: SharedStringMap (const SharedStringMap & inSource) ;
  public: SharedStringMap & operator = (const SharedStringMap & inSource) ;

//--------------------------------- Insert
  public: void insert (OptionalSharedRef <SharedStringMapNode> & ioObject
                       COMMA_LOCATION_ARGS) ;

  public: void removeAndReturnRemovedNode (const String & inKey,
                           OptionalSharedRef <SharedStringMapNode> & outRemovedNode
                           COMMA_LOCATION_ARGS) ;

  public: bool hasKey (const String & inKey) const ;

  public: int32_t count (void) const ;

  public: String rootNodeKey (void) const ;

  public: TC_Array <String> sortedKeyArray (void) const ;

} ;

//--------------------------------------------------------------------------------------------------

class UpEnumerator_stringset final {
  public: UpEnumerator_stringset (const class GGS_stringset & inEnumeratedObject) ;

  public: bool hasCurrentObject (void) const { return mIndex < mStringArray.count () ; }

  public: void gotoNextObject (void) { mIndex += 1 ; }

//--- Current element access
  public: class GGS_string current_key (LOCATION_ARGS) const ;
  public: class GGS_string current (LOCATION_ARGS) const ;

//--- Private properties
  private: const TC_Array <String> mStringArray ;
  private: int32_t mIndex ;

//--- No copy
  private: UpEnumerator_stringset (const UpEnumerator_stringset &) = delete ;
  private: UpEnumerator_stringset & operator = (const UpEnumerator_stringset &) = delete ;
} ;

//--------------------------------------------------------------------------------------------------

class DownEnumerator_stringset final {

  public: DownEnumerator_stringset (const class GGS_stringset & inEnumeratedObject) ;

  public: bool hasCurrentObject (void) const { return mIndex >= 0 ; }

  public: void gotoNextObject (void) { mIndex -= 1 ; }

//--- Current element access
  public: class GGS_string current_key (LOCATION_ARGS) const ;
  public: class GGS_string current (LOCATION_ARGS) const ;

//--- Private properties
  private: const TC_Array <String> mStringArray ;
  private: int32_t mIndex ;

//--- No copy
  private: DownEnumerator_stringset (const DownEnumerator_stringset &) = delete ;
  private: DownEnumerator_stringset & operator = (const DownEnumerator_stringset &) = delete ;
} ;

//--------------------------------------------------------------------------------------------------
//   @stringset type
//--------------------------------------------------------------------------------------------------

class GGS_stringset : public AC_GALGAS_root {
//--------------------------------- Private data members
  private: SharedStringMap mSharedMap ;

//--------------------------------- Accessors
  public: VIRTUAL_IN_DEBUG inline bool isValid (void) const override { return mSharedMap.isValid () ; }
  public: VIRTUAL_IN_DEBUG void drop (void) override { mSharedMap.drop () ; }

//--------------------------------- Default constructor
  public: GGS_stringset (void) ;

//--------------------------------- Virtual constructor
  public: virtual ~ GGS_stringset (void) = default ;


