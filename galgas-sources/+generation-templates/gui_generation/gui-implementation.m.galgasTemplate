
#import "OC_Token.h"
#import "F_CocoaWrapperForGalgas.h"
#import "OC_GGS_CommandLineOption.h"
%for (mLexiqueClassName mIndex mBlockComment mTitle mTextMacroList mLabels lexicalStyleList) in GUI_CONTEXT.mWithLexiqueList do
  %#import "lexique-%![mLexiqueClassName fileNameRepresentation]%-cocoa.h"\n%
end
for (mValue) in GUI_CONTEXT.mNibAndClassList do
  %#import "%!mValue%.h"\n%
end%
#ifdef USER_DEFAULT_COLORS_DEFINED
  #import "user_default_colors.h"
#endif

//--------------------------------------------------------------------------------------------------

#pragma mark Nibs

//--------------------------------------------------------------------------------------------------
//          N I B S   A N D   T H E I R   M A I N   C L A S S E S                                
//--------------------------------------------------------------------------------------------------

%
if [GUI_CONTEXT.mNibAndClassList count] == 0 then
%NSArray * nibsAndClasses (void) {
  return [NSArray array] ;
}
%
else
%NSArray * nibsAndClasses (void) {
  return [NSArray arrayWithObjects:
%for (mValue) in GUI_CONTEXT.mNibAndClassList do
  %    [NSArray arrayWithObjects:@"%!mValue%", [%!mValue% class], nil],\n%
end%    nil
  ] ;
}
%
end
%
//--------------------------------------------------------------------------------------------------
//    Project file extensions
//--------------------------------------------------------------------------------------------------

NSDictionary * indexingDescriptorDictionary (void) {
%if [GUI_CONTEXT.mProjectIndexingDescriptorList count] == 0 then
% return [NSDictionary dictionary] ;
%
else
%  return [NSDictionary dictionaryWithObjectsAndKeys: %
for (projectFileExtension indexingPathSuffix) in GUI_CONTEXT.mProjectIndexingDescriptorList do
  %@"%!indexingPathSuffix.string%", @"%!projectFileExtension.string%", %
end  
%nil] ;
%
end
%}

//--------------------------------------------------------------------------------------------------

#pragma mark Command Line Options

//--------------------------------------------------------------------------------------------------
//                       Command Line Options                                                    
//--------------------------------------------------------------------------------------------------

%
for (mValue) in GUI_CONTEXT.mImportedOptionComponentList do
  %#import "option-%![mValue fileNameRepresentation]%-cocoa.h"\n%
end
%
//--------------------------------------------------------------------------------------------------

void enterOptions (NSMutableArray * ioBoolOptionArray,
                   NSMutableArray * ioUIntOptionArray,
                   NSMutableArray * ioStringOptionArray,
                   NSMutableArray * ioStringListOptionArray) {
%
for (mValue) in GUI_CONTEXT.mImportedOptionComponentList do
  %  enterOptionsFor_%![mValue identifierRepresentation]% (ioBoolOptionArray, ioUIntOptionArray, ioStringOptionArray, ioStringListOptionArray) ;\n%
end

if QUIET_OUTPUT_BY_DEFAULT then
%  OC_GGS_CommandLineOption * option = [[OC_GGS_CommandLineOption alloc]\n%
%    initWithDomainName:@"galgas_cli_options"\n%
%    identifier:@"verbose_output"\n%
%    commandChar:'v'\n%
%    commandString:@"verbose"\n%
%    comment:@"Verbose output"\n%
%    defaultValue:@""\n%
%  ] ;\n%
else
%  OC_GGS_CommandLineOption * option = [[OC_GGS_CommandLineOption alloc]\n%
%    initWithDomainName:@"galgas_cli_options"\n%
%    identifier:@"quiet_output"\n%
%    commandChar:'q'\n%
%    commandString:@"quiet"\n%
%    comment:@"Quiet output"\n%
%    defaultValue:@""\n%
%  ] ;\n%
end
%  [ioBoolOptionArray addObject:option] ;
}

%for (mLexiqueClassName mIndex mBlockComment mTitle mTextMacroList mLabels *) in GUI_CONTEXT.mWithLexiqueList do
  %//--------------------------------------------------------------------------------------------------\n\n%
  %#pragma mark Lexique %!mLexiqueClassName%\n\n%
  %//--------------------------------------------------------------------------------------------------\n%
  %//                     P O P    U P    L I S T    D A T A\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  for (mLeadingCharacterStrippedCount mTerminalList mLocation) in mLabels do
    %static const UInt16 gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]%_%![[mLocation startLocationIndex] string]% [%![ 2 * [mTerminalList count] + 2 string]%] = {\n%
    %  %![mLeadingCharacterStrippedCount string]%, // Leading character count to strip\n%
      for (mTerminal mDisplayFlags) in mTerminalList do
        %  %!mLexiqueClassName%_1_%![mTerminal identifierRepresentation]%, %![mDisplayFlags string]%,\n%
      end    
    %  0\n%
    %} ;\n\n%
  end
  %static const UInt16 * gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]% [%![[mLabels count] + 1 string]%] = {\n%
  for (mLeadingCharacterStrippedCount mTerminalList mLocation) in mLabels do
    %  gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]%_%![[mLocation startLocationIndex] string]%,\n%
  end
    %  NULL\n%
    %} ;\n\n%
  %//--------------------------------------------------------------------------------------------------\n%
  %//                            Lexique interface\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %@interface OC_Tokenizer_%![mIndex string]%_%!mLexiqueClassName% : OC_Lexique_%!mLexiqueClassName% {\n\n%
  %}\n\n%
  %- (NSString *) blockComment ;\n\n%
  %- (const UInt16 * *) popupListData ;\n\n%
  %- (NSUInteger) textMacroCount ;\n\n%
  %- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex ;\n\n%
  %- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex ;\n\n%
  %- (NSString *) tabItemTitle ;\n\n%
  %@end\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %@implementation OC_Tokenizer_%![mIndex string]%_%!mLexiqueClassName%\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) blockComment {\n%
  %  return @%![mBlockComment utf8RepresentationEscapingQuestionMark]% ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (const UInt16 * *) popupListData {\n%
  %  return gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]% ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSUInteger) textMacroCount {\n%
  %  return %![[mTextMacroList count] string]% ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) tabItemTitle {\n%
  %  return @%![mTitle utf8RepresentationEscapingQuestionMark]% ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroTitle [%![[mTextMacroList count] + 1 string]%] = {\n%
  for (mKey mContents) in mTextMacroList do
    %    @%![mKey utf8RepresentationEscapingQuestionMark]%,\n%
  end
  %    NULL\n%
  %  } ;\n%
  %  return kTextMacroTitle [inIndex] ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroContent [%![[mTextMacroList count] + 1 string]%] = {\n%
  for (mKey mContents) in mTextMacroList do
    %    @%![mContents utf8RepresentationEscapingQuestionMark]%,\n%
  end
  %    NULL\n%
  %  } ;\n%
  %  return kTextMacroContent [inIndex] ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %@end\n\n%
end
%

//--------------------------------------------------------------------------------------------------

OC_Lexique * tokenizerForExtension (const NSString * inExtension) {
  OC_Lexique * result = nil ;
  NSString * uppercasedExtension = [inExtension uppercaseString] ;\n%
for (lkey mLexiqueName mIndex) in GUI_CONTEXT.mExtensionMap
  before %  if%
  do % ([uppercasedExtension isEqualToString:@%![[lkey utf8RepresentationEscapingQuestionMark] uppercaseString]%]) {\n%
     %    result = [OC_Tokenizer_%![mIndex string]%_%!mLexiqueName% new] ;\n%
  between %  }else if%
  after %  }\n%
end
%  return result ;
}

//--------------------------------------------------------------------------------------------------

NSArray * tokenizers (void) {%
if [GUI_CONTEXT.mWithLexiqueList count] == 0 then%
  return [NSArray array] ;
%else%
  return [NSArray arrayWithObjects:
%for (mLexiqueClassName mIndex 5*) in GUI_CONTEXT.mWithLexiqueList do
  %    [OC_Tokenizer_%![mIndex string]%_%!mLexiqueClassName% new],\n%
end
%    nil
  ] ;
%end
%}

//--------------------------------------------------------------------------------------------------

NSString * buildRunOption (void) {
  return @"%!GUI_CONTEXT.mBuildRunOption%" ;
}

//--------------------------------------------------------------------------------------------------

