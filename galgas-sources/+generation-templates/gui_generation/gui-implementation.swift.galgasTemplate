
import AppKit

//--------------------------------------------------------------------------------------------------
//          N I B S   A N D   T H E I R   M A I N   C L A S S E S                                
//--------------------------------------------------------------------------------------------------

/*
%
if [GUI_CONTEXT.mNibAndClassList count] == 0 then
%NSArray * nibsAndClasses (void) {
  return [NSArray array] ;
}
%
else
%NSArray * nibsAndClasses (void) {
  return [NSArray arrayWithObjects:
%for (mValue) in GUI_CONTEXT.mNibAndClassList do
  %    [NSArray arrayWithObjects:@"%!mValue%", [%!mValue% class], nil],\n%
end%    nil
  ] ;
}
%
end
%

*/
//--------------------------------------------------------------------------------------------------
//    Project file extensions
//--------------------------------------------------------------------------------------------------

/* NSDictionary * indexingDescriptorDictionary (void) {
%if [GUI_CONTEXT.mProjectIndexingDescriptorList count] == 0 then
% return [NSDictionary dictionary] ;
%
else
%  return [NSDictionary dictionaryWithObjectsAndKeys: %
for (projectFileExtension indexingPathSuffix) in GUI_CONTEXT.mProjectIndexingDescriptorList do
  %@"%!indexingPathSuffix.string%", @"%!projectFileExtension.string%", %
end  
%nil] ;
%
end
%} */

//--------------------------------------------------------------------------------------------------
//
//                       Command Line Options                                                    
//
//--------------------------------------------------------------------------------------------------

%
for (mValue) in GUI_CONTEXT.mImportedOptionComponentList do
  %// #import "option-%![mValue fileNameRepresentation]%-cocoa.h"\n%
end
%
//--------------------------------------------------------------------------------------------------

/*
void enterOptions (NSMutableArray * ioBoolOptionArray,
                   NSMutableArray * ioUIntOptionArray,
                   NSMutableArray * ioStringOptionArray,
                   NSMutableArray * ioStringListOptionArray) {
%
for (mValue) in GUI_CONTEXT.mImportedOptionComponentList do
  %  enterOptionsFor_%![mValue identifierRepresentation]% (ioBoolOptionArray, ioUIntOptionArray, ioStringOptionArray, ioStringListOptionArray) ;\n%
end

if QUIET_OUTPUT_BY_DEFAULT then
%  OC_GGS_CommandLineOption * option = [[OC_GGS_CommandLineOption alloc]\n%
%    initWithDomainName:@"galgas_cli_options"\n%
%    identifier:@"verbose_output"\n%
%    commandChar:'v'\n%
%    commandString:@"verbose"\n%
%    comment:@"Verbose output"\n%
%    defaultValue:@""\n%
%  ] ;\n%
else
%  OC_GGS_CommandLineOption * option = [[OC_GGS_CommandLineOption alloc]\n%
%    initWithDomainName:@"galgas_cli_options"\n%
%    identifier:@"quiet_output"\n%
%    commandChar:'q'\n%
%    commandString:@"quiet"\n%
%    comment:@"Quiet output"\n%
%    defaultValue:@""\n%
%  ] ;\n%
end
%  [ioBoolOptionArray addObject:option] ;
}

*/

%for (lexiqueClassName lexiqueIndex blockComment title textMacroList labels lexicalStyleList) in GUI_CONTEXT.mWithLexiqueList do
%//--------------------------------------------------------------------------------------------------
//                     P O P    U P    L I S T    D A T A
//--------------------------------------------------------------------------------------------------

fileprivate let gPopUpData_%![lexiqueIndex string]%_%![lexiqueClassName identifierRepresentation]% : [[UInt16]] = [
%  for (mLeadingCharacterStrippedCount mTerminalList mLocation) in labels do
%  [%![mLeadingCharacterStrippedCount string]%, // Leading character count to strip\n%
      for (mTerminal mDisplayFlags) in mTerminalList
      do %    %!lexiqueClassName%_1_%![mTerminal identifierRepresentation]%, %![mDisplayFlags string]
      between %,\n%
      end    
    %\n  ]%
  between %,\n%
  end
%
]

//--------------------------------------------------------------------------------------------------
//                            Lexique interface
//--------------------------------------------------------------------------------------------------
  
class SWIFT_Tokenizer_%![lexiqueIndex string]%_%!lexiqueClassName% : SWIFT_Lexique_%!lexiqueClassName%, SWIFT_Tokenizer_Protocol {

//- (NSUInteger) textMacroCount ;

//- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex ;

//- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex ;

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func popupListData () -> [[UInt16]] {
    return gPopUpData_%![lexiqueIndex string]%_%![lexiqueClassName identifierRepresentation]%
  }

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func tabItemTitle () -> String {
    return %![title utf8RepresentationEscapingQuestionMark]%
  }

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  
  func blockComment () -> String {
    return %![blockComment utf8RepresentationEscapingQuestionMark]%
  }

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  func attributes (fromStyleIndex inStyleIndex : UInt8) -> [NSAttributedString.Key : Any] {
    let fontManager = NSFontManager.shared
    var font = fontManager.convert (
      self.font.propval,
      toHaveTrait: self.bold (forStyle: inStyleIndex).propval ? .boldFontMask : .unboldFontMask
    )
    font = fontManager.convert (
      font,
      toHaveTrait: self.italic (forStyle: inStyleIndex).propval ? .italicFontMask : .unitalicFontMask
    )
    let result : [NSAttributedString.Key : Any] = [
      .foregroundColor : self.color (forStyle: inStyleIndex).propval,
      .font : font
    ]
    return result
  }

  //- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------\n\n%
  %/* @implementation OC_Tokenizer_%![lexiqueIndex string]%_%!lexiqueClassName%\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSUInteger) textMacroCount {\n%
  %  return %![[textMacroList count] string]% ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroTitle [%![[textMacroList count] + 1 string]%] = {\n%
  for (mKey mContents) in textMacroList do
    %    @%![mKey utf8RepresentationEscapingQuestionMark]%,\n%
  end
  %    nullptr\n%
  %  } ;\n%
  %  return kTextMacroTitle [inIndex] ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroContent [%![[textMacroList count] + 1 string]%] = {\n%
  for (mKey mContents) in textMacroList do
    %    @%![mContents utf8RepresentationEscapingQuestionMark]%,\n%
  end
  %    nullptr\n%
  %  } ;\n%
  %  return kTextMacroContent [inIndex] ;\n%
  %}\n\n%
  %//--------------------------------------------------------------------------------------------------\n\n%
  %@end */\n\n%
end
%

//--------------------------------------------------------------------------------------------------
//   Global functions
//--------------------------------------------------------------------------------------------------

@MainActor func tokenizerFor (extension inExtension : String) -> (any SWIFT_Tokenizer_Protocol)? {
  var result : (any SWIFT_Tokenizer_Protocol)? = nil\n%
for (lkey mLexiqueName mIndex) in GUI_CONTEXT.mExtensionMap
  before %  if%
  do % inExtension == %![lkey utf8RepresentationEscapingQuestionMark]% {\n%
     %    result = SWIFT_Tokenizer_%![mIndex string]%_%!mLexiqueName% ()\n%
  between %  }else if%
  after %  }\n%
end
%  return result
}

//--------------------------------------------------------------------------------------------------

@MainActor func tokenizers () -> [any SWIFT_Tokenizer_Protocol] {%
if [GUI_CONTEXT.mWithLexiqueList count] == 0 then%
  return []
%else%
  return [
%for (mLexiqueClassName mIndex 5*) in GUI_CONTEXT.mWithLexiqueList
  do %    SWIFT_Tokenizer_%![mIndex string]%_%!mLexiqueClassName% ()%
  between %,\n%
end
%
  ]
%end
%}

//--------------------------------------------------------------------------------------------------

func buildRunOption () -> String {
  return "%!GUI_CONTEXT.mBuildRunOption%"
}

//--------------------------------------------------------------------------------------------------

