
//----------------------------------------------------------------------------------------------------------------------
//
//          N I B S   A N D   T H E I R   M A I N   C L A S S E S                                
//
//----------------------------------------------------------------------------------------------------------------------

/*
%
if [GUI_CONTEXT.mNibAndClassList length] == 0 then
%NSArray * nibsAndClasses (void) {
  return [NSArray array] ;
}
%
else
%NSArray * nibsAndClasses (void) {
  return [NSArray arrayWithObjects:
%for (mValue) in GUI_CONTEXT.mNibAndClassList do
  %    [NSArray arrayWithObjects:@"%!mValue%", [%!mValue% class], nil],\n%
end%    nil
  ] ;
}
%
end
%

*/
//----------------------------------------------------------------------------------------------------------------------
//
//                       Command Line Options                                                    
//
//----------------------------------------------------------------------------------------------------------------------

%
for (mValue) in GUI_CONTEXT.mImportedOptionComponentList do
  %// #import "option-%![mValue fileNameRepresentation]%-cocoa.h"\n%
end
%
//----------------------------------------------------------------------------------------------------------------------

/*
void enterOptions (NSMutableArray * ioBoolOptionArray,
                   NSMutableArray * ioUIntOptionArray,
                   NSMutableArray * ioStringOptionArray,
                   NSMutableArray * ioStringListOptionArray) {
%
for (mValue) in GUI_CONTEXT.mImportedOptionComponentList do
  %  enterOptionsFor_%![mValue identifierRepresentation]% (ioBoolOptionArray, ioUIntOptionArray, ioStringOptionArray, ioStringListOptionArray) ;\n%
end

if QUIET_OUTPUT_BY_DEFAULT then
%  OC_GGS_CommandLineOption * option = [[OC_GGS_CommandLineOption alloc]\n%
%    initWithDomainName:@"galgas_cli_options"\n%
%    identifier:@"verbose_output"\n%
%    commandChar:'v'\n%
%    commandString:@"verbose"\n%
%    comment:@"Verbose output"\n%
%    defaultValue:@""\n%
%  ] ;\n%
else
%  OC_GGS_CommandLineOption * option = [[OC_GGS_CommandLineOption alloc]\n%
%    initWithDomainName:@"galgas_cli_options"\n%
%    identifier:@"quiet_output"\n%
%    commandChar:'q'\n%
%    commandString:@"quiet"\n%
%    comment:@"Quiet output"\n%
%    defaultValue:@""\n%
%  ] ;\n%
end
%  [ioBoolOptionArray addObject:option] ;
}

*/

%for (mLexiqueClassName mIndex mBlockComment mTitle mTextMacroList mLabels) in GUI_CONTEXT.mWithLexiqueList do
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %// #pragma mark Lexique %!mLexiqueClassName%\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n%
  %//\n%
  %//                     P O P    U P    L I S T    D A T A                                        \n%
  %//\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  for (mLeadingCharacterStrippedCount mTerminalList mLocation) in mLabels do
    %/* static const UInt16 gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]%_%![[mLocation locationIndex] string]% [%![ 2 * [mTerminalList length] + 2 string]%] = {\n%
    %  %![mLeadingCharacterStrippedCount string]%, // Leading character count to strip\n%
      for (mTerminal mDisplayFlags) in mTerminalList do
        %  %!mLexiqueClassName%_1_%![mTerminal identifierRepresentation]%, %![mDisplayFlags string]%,\n%
      end    
    %  0\n%
    %} ; */\n\n%
  end
  % /* static const UInt16 * gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]% [%![[mLabels length] + 1 string]%] = {\n%
  for (mLeadingCharacterStrippedCount mTerminalList mLocation) in mLabels do
    %  gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]%_%![[mLocation locationIndex] string]%,\n%
  end
    %  NULL\n%
    %} ; */\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n%
  %//\n%
  %//                            Lexique interface                                                  \n%
  %//\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %class SWIFT_Tokenizer_%![mIndex string]%_%!mLexiqueClassName% : OC_Lexique_%!mLexiqueClassName%, SWIFT_Tokenizer_Protocol {\n\n%
  %}\n\n%
  %- (NSString *) blockComment ;\n\n%
  %- (const UInt16 * *) popupListData ;\n\n%
  %- (NSUInteger) textMacroCount ;\n\n%
  %- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex ;\n\n%
  %- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex ;\n\n%
  %  func tabItemTitle () -> String {\n%
  %    return %![mTitle utf8Representation]%\n%
  %  }\n\n%
  %}\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %/* @implementation OC_Tokenizer_%![mIndex string]%_%!mLexiqueClassName%\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) blockComment {\n%
  %  return @%![mBlockComment utf8Representation]% ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %- (const UInt16 * *) popupListData {\n%
  %  return gPopUpData_%![mIndex string]%_%![mLexiqueClassName identifierRepresentation]% ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %- (NSUInteger) textMacroCount {\n%
  %  return %![[mTextMacroList length] string]% ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) textMacroTitleAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroTitle [%![[mTextMacroList length] + 1 string]%] = {\n%
  for (mKey mContents) in mTextMacroList do
    %    @%![mKey utf8Representation]%,\n%
  end
  %    NULL\n%
  %  } ;\n%
  %  return kTextMacroTitle [inIndex] ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %- (NSString *) textMacroContentAtIndex: (const UInt32) inIndex {\n%
  %  static NSString * kTextMacroContent [%![[mTextMacroList length] + 1 string]%] = {\n%
  for (mKey mContents) in mTextMacroList do
    %    @%![mContents utf8Representation]%,\n%
  end
  %    NULL\n%
  %  } ;\n%
  %  return kTextMacroContent [inIndex] ;\n%
  %}\n\n%
  %//----------------------------------------------------------------------------------------------------------------------\n\n%
  %@end */\n\n%
end
%

//----------------------------------------------------------------------------------------------------------------------

func tokenizerFor (extension inExtension : String) -> SWIFT_Lexique_Protocol? {
  var result : SWIFT_Lexique_Protocol? = nil\n%
for (lkey mLexiqueName mIndex) in GUI_CONTEXT.mExtensionMap
  before %  if%
  do % inExtension == %![lkey utf8Representation]% {\n%
     %    result = SWIFT_Tokenizer_%![mIndex string]%_%!mLexiqueName% ()\n%
  between %  }else if%
  after %  }\n%
end
%  return result
}

//----------------------------------------------------------------------------------------------------------------------

func tokenizers () -> [SWIFT_Lexique_Protocol] {%
if [GUI_CONTEXT.mWithLexiqueList length] == 0 then%
  return []
%else%
  return [
%for (mLexiqueClassName mIndex 4*) in GUI_CONTEXT.mWithLexiqueList
  do %    SWIFT_Tokenizer_%![mIndex string]%_%!mLexiqueClassName% ()%
  between %,\n%
end
%
  ]
%end
%}

//----------------------------------------------------------------------------------------------------------------------

func buildRunOption () -> String {
  return "%!BUILD_RUN_OPTION%"
}

//----------------------------------------------------------------------------------------------------------------------

