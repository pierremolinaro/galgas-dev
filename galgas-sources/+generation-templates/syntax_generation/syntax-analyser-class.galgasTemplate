//--------------------------------------------------------------------------------------------------
//
//%!"Parser class '" + COMPONENT_NAME + "' declaration"%
//
//--------------------------------------------------------------------------------------------------

class cParser_%![COMPONENT_NAME identifierRepresentation]% {
//--- Virtual destructor
  public: virtual ~ cParser_%![COMPONENT_NAME identifierRepresentation]% (void) { }

//--- Non terminal declarations
%for (lkey mLabelMap) in NONTERMINAL_MAP do
  for (label_lkey * label_mSignature *) in mLabelMap do
  %  protected: virtual void nt_%![lkey identifierRepresentation]%_%![label_lkey identifierRepresentation]% (%?^
    for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in label_mSignature do (IDX)
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %const class GGS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %class GGS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %class GGS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %class GGS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end
      %,\n%!^ 
    end
    if HAS_TRANSLATE_FEATURE then
      %class String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
    end
    %class Lexique_%!LEXIQUE_NAME% * inLexique) = 0 ;\n\n%
  end
  
  %  protected: virtual void nt_%![lkey identifierRepresentation]%_parse (%?^
  if HAS_TRANSLATE_FEATURE then
    %class String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
  end
  %class Lexique_%!LEXIQUE_NAME% * inLexique) = 0 ;\n\n%

  if HAS_INDEXING then
    %  protected: virtual void nt_%![lkey identifierRepresentation]%_indexing (class Lexique_%!LEXIQUE_NAME% * inLexique) = 0 ;\n\n%
  end
end%
//--- Rule declarations
%for (mNonterminalName mRuleIndex mLabelImplementationList) in RULE_DECLARATION_LIST do
  for (mLabelName mSignatureForGeneration mSignature mEndOfArgumentLocation mInstructionListForGeneration) in mLabelImplementationList do
    %  protected: void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_%![mLabelName identifierRepresentation]% (%?^
    for (mFormalSelector mFormalArgumentType mFormalArgumentPassingMode mFormalArgumentName) in mSignature do (IDX)
      if mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentConstantIn] then
        %const GGS_% ![mFormalArgumentType identifierRepresentation] % constinArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentInOut] then
        %GGS_% ![mFormalArgumentType identifierRepresentation] % & ioArgument% ![IDX string]
      elsif mFormalArgumentPassingMode == [@formalArgumentPassingModeAST argumentOut] then
        %GGS_% ![mFormalArgumentType identifierRepresentation] % & outArgument% ![IDX string]
      else # argumentIn
        %GGS_% ![mFormalArgumentType identifierRepresentation] % inArgument% ![IDX string]
      end
      %,\n%!^
    end
    if HAS_TRANSLATE_FEATURE then
      %String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
    end
    %Lexique_%!LEXIQUE_NAME% * inLexique) ;\n\n%
  end
  %  protected: void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_parse (%?^
  if HAS_TRANSLATE_FEATURE then
    %String & %!syntaxDirectedTranslationResultVarName ()%,\n%!^ 
  end
  %Lexique_%!LEXIQUE_NAME% * inLexique) ;\n\n%
  if HAS_INDEXING then
    %  protected: void rule_%![COMPONENT_NAME identifierRepresentation]%_%![mNonterminalName identifierRepresentation]%_i%![mRuleIndex string]%_indexing (Lexique_%!LEXIQUE_NAME% * inLexique) ;\n\n%
  end
end%

//--- Select methods
%for (mValue) in SELECT_METHOD_LIST do
  %  protected: virtual int32_t select_%![COMPONENT_NAME identifierRepresentation]%_%![mValue string]% (Lexique_%!LEXIQUE_NAME% *) = 0 ;\n\n%
end%
} ;

