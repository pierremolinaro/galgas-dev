#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Copyright (C) 2007, ..., 2015 Pierre Molinaro.
#
#  e-mail : pierre@pcmolinaro.name
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @semanticExpressionAST {
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   F O R M A L    A R G U M E N T S    P A S S I N G    M O D E S
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @formalArgumentPassingModeAST {
  case argumentIn
  case argumentOut
  case argumentInOut
  case argumentConstantIn
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

getter @formalArgumentPassingModeAST string -> @string {
  switch self
    case argumentConstantIn : result = "?let"
    case argumentIn : result = "?"
    case argumentOut : result = "!"
    case argumentInOut : result = "?!"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

getter @formalArgumentPassingModeAST formalArgumentMessage -> @string {
  switch self
    case argumentConstantIn : result = "a constant input (?let) formal argument"
    case argumentIn : result = "an input (?) formal argument"
    case argumentOut : result = "an output (!) formal argument"
    case argumentInOut : result = "an input/output (?!) formal argument"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  F O R M A L    P A R A M E T E R    L I S T
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @formalParameterListAST {
  public let @lstring mFormalSelector
  public let @formalArgumentPassingModeAST mFormalArgumentPassingMode
  public let @lstring mFormalArgumentTypeName
  public let @lstring mFormalArgumentName
  public let @bool mIsUnused
  
  getter keyRepresentation -> @string {
    result = "("
      for parameter in self
    do
      switch parameter.mFormalArgumentPassingMode
      case argumentConstantIn, argumentIn :
        result +="?"
      case argumentInOut :
        result +="?!"
      case argumentOut :
        result +="!"
      end
      result += parameter.mFormalSelector
    between
      result += ", "
    end
    result += ")"
  }
  
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  F O R M A L    I N P U T    P A R A M E T E R    L I S T
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @formalInputParameterListAST {
  public let @lstring mFormalSelector
  public let @lstring mFormalArgumentTypeName
  public let @lstring mFormalArgumentName
  public let @bool mIsUnused
  public let @bool mIsConstant

  getter initializerSignature -> @string {
    result = "init"
    for parameter in self do
      result += "!" + parameter.mFormalSelector
    end
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  A C T U A L    I N P U T    P A R A M E T E R    L I S T
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @abstractInputParameter {
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @inputParameterAnonymousVariable : @abstractInputParameter {
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @inputParameterVariable : @abstractInputParameter {
  public let @lstring mActualParameterName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @inputParameterDeclaredVariable : @abstractInputParameter {
  public let @lstring mActualParameterTypeName
  public let @lstring mActualParameterName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @inputParameterDeclaredConstant : @abstractInputParameter {
  public let @lstring mActualParameterTypeName
  public let @lstring mActualParameterName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @actualInputParameterListAST {
  public let @lstring mActualSelector
  public let @abstractInputParameter mInputParameter
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @syntaxInstructionAST {
  public let @location mInstructionLocation
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @semanticInstructionAST : @syntaxInstructionAST {
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @semanticInstructionListAST {
  public let @semanticInstructionAST mInstruction
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @semanticDeclarationListAST {
  public let @semanticDeclarationAST mSemanticDeclaration
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#    E X T E R N    F U N C T I O N    D E C L A R A T I O N
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @externFunctionDeclarationAST : @semanticDeclarationAST {
  public let @lstring mFunctionName
  public let @formalInputParameterListAST mFormalArgumentList
  public let @lstring mResultTypeName
  public let @bool usefullFunc %initArgLabel
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#    F U N C T I O N    D E C L A R A T I O N
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @functionDeclarationAST : @externFunctionDeclarationAST {
  public let @lstring mResultVariableName
  public let @semanticInstructionListAST mFunctionInstructionList
  public let @location mEndOfFunctionInstructionList
  public let @bool mIsInternal
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#    O N C E    F U N C T I O N    D E C L A R A T I O N
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @onceFunctionDeclarationAST : @semanticDeclarationAST {
  public let @lstring mFunctionName
  public let @lstring mResultTypeName
  public let @lstring mResultVariableName
  public let @semanticInstructionListAST mFunctionInstructionList
  public let @location mEndOfFunctionInstructionList
  public let @bool mIsInternal
  public let @bool mIsUsefull
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#    Common Rules
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @propertyInCollectionListAST {
  public let @bool isConstant %initArgLabel
  public let @lstring propertyTypeName
  public let @lstring propertyName
  public let @AccessControlAST accessControl
  public let @bool hasSelector %initArgLabel
  public let @propertyInCollectionInitializationAST initialization %initArgLabel

  method buildPropertyInitializationCode ?let @lstring inTypeNameForUsefulness
                                          ?let @semanticContext inSemanticContext
                                          ?let @predefinedTypes inPredefinedTypes
                                          ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                          ?!@unifiedTypeMap ioTypeMap
                                          !@stringset outUnusedVariableCppNameSet
                                          !@string outInitializationCode {
    outInitializationCode = ""
    var inclusionSet = @stringset ()
    var @uint temporaryVariableIndex = 0
    outUnusedVariableCppNameSet = @stringset §[compilerCppName ()]
    for (* propertyTypeName propertyName 2* initExpression) in self do
     switch initExpression
      case none :
      case some (expressionAST) :
        var variableMap = @localVarManager {}
        let @analysisContext analysisContext = .init {
          !inSemanticContext
          !inPredefinedTypes
          !selfObjectCppName: ""
          !selfAvailability: .none
          !selfObjectCppPrefixForAccessingProperty: ""
          !requiresSelfForAccessingProperty: true
        }
        let propertyType = [ioTypeMap typeMapEntryForLKey !propertyTypeName]
        [expressionAST analyzeSemanticExpression
          !usefulnessCallerEntityName: inTypeNameForUsefulness
          !?ioUsefulEntitiesGraph
          !inferenceType: propertyType
          !analysisContext
          !?ioTypeMap
          !?variableMap
          ?var @semanticExpressionForGeneration expression
        ]
      #--- Check assignment type compatibility
        checkAssignmentTypeWithImplicitGetterCall (
          !propertyType
          !expression.mResultType
          !propertyName.location
          !?expression
        )
        [expression generateExpression
          !?outInitializationCode
          !?inclusionSet
          !?temporaryVariableIndex
          !?outUnusedVariableCppNameSet
          ?let sourceVar
        ]
        outInitializationCode += "  mProperty_" + [propertyName identifierRepresentation]
        outInitializationCode += " = " + sourceVar + " ;\n"
      end
    end
  }

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @propertyInCollectionInitializationAST {
  case none
  case some (@semanticExpressionAST expression)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#    F I L E W R A P P E R    D E C L A R A T I O N
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @formalTemplateInputParameterListAST {
  public let @lstring mFormalTemplateSelector
  public let @lstring mFormalArgumentTypeName
  public let @lstring mFormalArgumentName
  public let @bool mIsUnused
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @filewrapperTemplateListAST {
  public let @lstring mFilewrapperTemplateName
  public let @lstring mFilewrapperTemplatePath
  public let @formalTemplateInputParameterListAST mFilewrapperTemplateFormalInputParameters
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @filewrapperDeclarationAST : @semanticDeclarationAST {
  public let @bool mIsInternal
  public let @string mSourceFileAbsolutePath
  public let @lstring mFilewrapperName
  public let @lstring mFilewrapperPath
  public let @lstringlist mFilewrapperTextFileExtensionList
  public let @lstringlist mFilewrapperBinaryFileExtensionList
  public let @filewrapperTemplateListAST mFilewrapperTemplateList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @syntaxInstructionList {
  public let @syntaxInstructionAST mInstruction
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @nonTerminalLabelListAST {
  public let @lstring mLabelName
  public let @formalParameterListAST mFormalArgumentList
  public let @location mEndOfArgumentLocation
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @nonterminalDeclarationListAST {
  public let @lstring mNonterminalName
  public let @nonTerminalLabelListAST mLabels
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @syntaxRuleLabelListAST {
  public let @lstring mLabelName
  public let @formalParameterListAST mFormalArguments
  public let @location mEndOfArgumentLocation
  public let @syntaxInstructionList mSyntaxInstructionList
  public let @location mEndOfInstructionList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @syntaxRuleListAST {
  public let @lstring mNonterminalName
  public let @syntaxRuleLabelListAST mLabelList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   R E P E A T    I N S T R U C T I O N
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @listOfSyntaxInstructionList {
  public let @syntaxInstructionList mSyntaxInstructionList
  public let @location mEndOf_instructions
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   S Y N T A X    C O M P O N E N T    A S T
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

#! GALGAS 3 AST

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @galgas3SyntaxComponentAST : @semanticDeclarationAST {
  public let @lstring mSyntaxComponentName
  public let @lstring mLexiqueName
  public let @nonterminalDeclarationListAST mNonterminalDeclarationList
  public let @syntaxRuleListAST mRuleList
  public let @bool mHasTranslateFeature
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @galgas3GrammarComponentAST : @semanticDeclarationAST {
  public let @lbool mHasIndexing
  public let @lstring mGrammarComponentName
  public let @lstring mGrammarClass
  public let @lstringlist mSyntaxComponents
  public let @lstring mStartSymbolName
  public let @nonTerminalLabelListAST mStartSymbolLabelList
  public let @lstringlist mUnusedNonterminalList
  public let @bool mHasTranslateFeature
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @galgas3SyntaxComponentListAST {
  public let @lstring mSyntaxComponentName
  public let @lstring mImportedLexiqueFilePath
  public let @nonterminalDeclarationListAST mNonterminalDeclarationList
  public let @syntaxRuleListAST mRuleList
  public let @bool mHasTranslateFeature
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @galgas3SyntaxExtensionListAST {
  public let @lstring mSyntaxComponentName
  public let @nonterminalDeclarationListAST mNonterminalDeclarationList
  public let @syntaxRuleListAST mRuleList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

listmap @syntaxExtensions (@galgas3SyntaxExtensionListAST)

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @prologueEpilogueList {
  public let @semanticInstructionListAST mInstructionList
  public let @location mEndOfInstructionList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @programRuleList {
  public let @lstring mSourceFileExtension
  public let @lstring mSourceFileHelp
  public let @lstring mSourceFileVariableName
  public let @bool mSourceFileVariableNameIsUnused
  public let @lstring mReferenceGrammar # Empty string if no grammar
  public let @semanticInstructionListAST mInstructionList
  public let @location mEndOfInstructionList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

struct @galgasDeclarationAST {
  public var @semanticDeclarationListAST mDeclarationList = ()
  public var @stringset mImplicitTypeDeclarationSet = ()
  public var @galgas3SyntaxComponentListAST mSyntaxComponentList = ()
  public var @syntaxExtensions mSyntaxExtensions = ()
  public var @galgasGUIComponentListAST mGUIComponentList = ()
  public var @prologueEpilogueList mPrologueDeclarationList = ()
  public var @programRuleList mSourceRuleList = ()
  public var @prologueEpilogueList mEpilogueDeclarationList = ()
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

