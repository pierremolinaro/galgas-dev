#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                                                                                                *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @externTypeDeclarationAST : @semanticDeclarationAST {
  @lstring mExternTypeName
  @string mCppPreDeclarationCode
  @string mCppClassCode
  @externTypeConstructorList mExternTypeConstructorList
  @externTypeGetterList mExternTypeGetterList
  @externTypeSetterList mExternTypeSetterList
  @externTypeMethodList mExternTypeMethodList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @typeNameFormalParameterNameList {
  @lstring mFormalSelector
  @lstring mFormalParameterTypeName
  @lstring mFormalParameterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @externTypeConstructorList {
  @lstring mConstructorName
  @lstring mResultTypeName
  @typeNameFormalParameterNameList mParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @externTypeGetterList {
  @lstring mGetterName
  @lstring mResultTypeName
  @typeNameFormalParameterNameList mParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @externTypeSetterList {
  @lstring mSetterName
  @formalParameterListAST mFormalParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @externTypeMethodList {
  @lstring mMethodName
  @formalParameterListAST mFormalParameterList
  @location mDeclarationLocation
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                                                                                             *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $extern$
    $@type$ ?var  @lstring externTypeName indexing externTypeDefinition
    <externtype_cpp_predeclaration> ?let cppPredeclarationCode
    <externtype_cpp_classdeclaration> ?let cppClassCode
    ${$
    @externTypeConstructorList externTypeConstructorList =  {}
    @externTypeGetterList externTypeGetterList = {}
    @externTypeSetterList externTypeSetterList = {}
    @externTypeMethodList externTypeMethodList = {}
    repeat
    while
      <externtype_constructor> !?externTypeConstructorList
    while
      <externtype_getter> !?externTypeGetterList
    while
      <externtype_setter> !?externTypeSetterList
    while
      <externtype_method> !?externTypeMethodList
    end
    $}$
    ioDeclarations.mDeclarationList += !@externTypeDeclarationAST.new {
      !false # Is not predefined
      !externTypeName
      !cppPredeclarationCode
      !cppClassCode
      !externTypeConstructorList
      !externTypeGetterList
      !externTypeSetterList
      !externTypeMethodList
    }
  }

  #·····················································································································
 
  rule <externtype_cpp_predeclaration> !@string outCppPredeclarationCode {
    ${$
    outCppPredeclarationCode = ""
    repeat
    while
      $"string"$ ?var  @lstring cppPredeclarationCodeElement
      outCppPredeclarationCode += cppPredeclarationCodeElement.string
    end
    $}$
  }

  #·····················································································································
 
  rule <externtype_cpp_classdeclaration> !@string outCppClassCode {
    ${$
    outCppClassCode = ""
    repeat
    while
      $"string"$ ?var  @lstring cppPredeclarationCodeElement
      outCppClassCode += cppPredeclarationCodeElement.string
    end
    $}$
  }

  #·····················································································································

  rule <externtype_constructor> ?!@externTypeConstructorList ioExternTypeConstructorList {
    $constructor$
    $identifier$ ?let @lstring constructorName
    @typeNameFormalParameterNameList argumentTypeList = {}
    repeat
    while
      $?$ ?let selector
      $@type$ ?let @lstring argumentTypeName
      $identifier$ ?let @lstring argumentName
      argumentTypeList += !selector !argumentTypeName !argumentName
    end
    $->$
    $@type$ ?let @lstring resultTypeName
    ioExternTypeConstructorList += !constructorName !resultTypeName !argumentTypeList
  }

  #·····················································································································

  rule <externtype_getter> ?!@externTypeGetterList ioExternTypeGetterList {
    $getter$
    $identifier$ ?let @lstring getterName
    @typeNameFormalParameterNameList argumentTypeList = {}
    repeat
    while
      $?$ ?let selector
      $@type$ ?let @lstring argumentTypeName
      $identifier$ ?let @lstring argumentName
      argumentTypeList += !selector !argumentTypeName !argumentName
    end
    $->$
    $@type$ ?let @lstring resultTypeName
    ioExternTypeGetterList += !getterName !resultTypeName !argumentTypeList
  }

  #·····················································································································

  rule <externtype_setter> ?!@externTypeSetterList ioExternTypeSetterList {
    $setter$
    $identifier$ ?let @lstring setterName
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ioExternTypeSetterList += !setterName !formalParameterList
  }

  #·····················································································································

  rule <externtype_method> ?!@externTypeMethodList ioExternTypeMethodList {
    $method$
    $identifier$ ?let @lstring methodName
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ioExternTypeMethodList += !methodName !formalParameterList !.here
  }

  #·····················································································································
 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externTypeDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mExternTypeName ![self.mExternTypeName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                                                                                                   *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externTypeDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext {
#---
  commonGetterMapForAllTypes ( !?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  @constructorMap constructorMap = {}
  @setterMap setterMap = {}
  @instanceMethodMap instanceMethodMap = {}
  @classMethodMap classMethodMap = {}
#--- Constructors
  for () in self.mExternTypeConstructorList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mResultTypeName ?let returnedTypeEntry]
  #---
    @functionSignature arguments = {}
    for () in mParameterList do
      [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mFormalParameterTypeName ?let argumentTypeEntry]
      arguments += !mFormalSelector !argumentTypeEntry !mFormalParameterName.string
    end
  #---
    [!?constructorMap insertKey
      !mConstructorName
      !arguments
      !true #inHasLexiqueAndLocationArguments
      !returnedTypeEntry
    ]
  end
#--- Getters
  for () in self.mExternTypeGetterList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mResultTypeName ?let returnedTypeEntry]
  #---
    @functionSignature arguments = {}
    for () in mParameterList do
      [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mFormalParameterTypeName ?let argumentTypeEntry]
      arguments += !mFormalSelector !argumentTypeEntry !mFormalParameterName.string
    end
  #---
    [!?getterMap insertKey
      !mGetterName
      !@methodKind.definedAsMember
      !arguments
      !@location.here
      !true #inHasLexiqueAndLocationArguments
      !returnedTypeEntry
      !@methodQualifier.isBasicFinal
      !"" # No Error message
    ]
  end
#--- Modifiers
  for () in self.mExternTypeSetterList do
    @formalParameterSignature routineSignature = {}
    for () in mFormalParameterList do
      [@unifiedTypeMap-entry makeEntry
        !?ioSemanticContext.mTypeMap
        !mFormalArgumentTypeName
        ?let @unifiedTypeMap-entry parameterTypeIndex
      ]
      routineSignature += !mFormalSelector !parameterTypeIndex !mFormalArgumentPassingMode !mFormalArgumentName.string
    end
  #---
    [!?setterMap insertKey
      !mSetterName
      !@methodKind.definedAsMember
      !routineSignature
      !true #inHasLexiqueAndLocationArguments
      !@methodQualifier.isBasicFinal
      !"" # No Error message
    ]
  end
#--- Methods
  for () in self.mExternTypeMethodList do
    var routineSignature =@formalParameterSignature {}
    for () in mFormalParameterList do
      @unifiedTypeMap-entry parameterTypeIndex
      [@unifiedTypeMap-entry makeEntry
        !?ioSemanticContext.mTypeMap
        !mFormalArgumentTypeName
        ?parameterTypeIndex
      ]
      routineSignature += !mFormalSelector !parameterTypeIndex !mFormalArgumentPassingMode !mFormalArgumentName.string
    end
  #---
    [!?instanceMethodMap insertKey
      !mMethodName
      !@methodKind.definedAsMember
      !routineSignature
      !mDeclarationLocation
      !true #inHasLexiqueAndLocationArguments
      !@methodQualifier.isBasicFinal
      !"" # No Error message
    ]
  end
#--- Enter type in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mExternTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-entry.null
    !@typeKindEnum. externType
    !false # Does not support collection value
    !{}
    !{}
    !{}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !@classMethodMap. emptyMap
    !@optionalMethodMap {}
    !{}
    !.none
    !{}
    !{}
    !{}
    !{}
    !{}
    !false # Do not generate header in separate file
    !@unifiedTypeMap-entry.null # Type for enumerated element for "for" instruction
    !"default" # Default constructor
    !"externtype-" + [self.mExternTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externTypeDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mExternTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#---
  ioSemanticDeclarationListForGeneration +=
    !"extern type " + self.mExternTypeName
    !@externTypeDeclarationForGeneration.new {
      !.searchKey {!inSemanticContext.mTypeMap !self.mExternTypeName}
      !self.mExternTypeName.string
      !self.mCppPreDeclarationCode
      !self.mCppClassCode
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @externTypeDeclarationForGeneration : @semanticTypeForGeneration {
  @string mExternTypeName
  @string mCppPreDeclarationCode
  @string mCppClassCode
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externTypeDeclarationForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  outHeader = [filewrapper typeGenerationTemplate.externTypeHeader1
    ![self.mSelfTypeEntry key]
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mCppPreDeclarationCode
    !self.mCppClassCode
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry key]
    ![self.mSelfTypeEntry identifierRepresentation]
    ![self.mSelfTypeEntry mIsConcrete]
    ![self.mSelfTypeEntry mConstructorMap]
    ![self.mSelfTypeEntry mGetterMap]
    ![self.mSelfTypeEntry mSetterMap]
    ![self.mSelfTypeEntry mInstanceMethodMap]
    ![self.mSelfTypeEntry mClassMethodMap]
    ![self.mSelfTypeEntry mOptionalMethodMap]
    ![self.mSelfTypeEntry mEnumerationDescriptor]
    ![self.mSelfTypeEntry mHandledOperatorFlags]
    ![self.mSelfTypeEntry mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry mTypeForEnumeratedElement]
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

