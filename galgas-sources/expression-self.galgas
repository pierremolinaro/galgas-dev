#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @selfInExpressionAST : @semanticExpressionAST {
  private let @location mSelfLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $self$
    outExpression = @selfInExpressionAST.new {!@location.here}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $self$
    outExpression = @selfInExpressionAST.new {!@location.here}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @selfInExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  if let [inAnalysisContext.selfType available ?type: let selfType ?2*] then
    let @string selfCppName = inAnalysisContext.mSelfObjectCppName
    outExpression = @selfInExpressionForGeneration.new {!selfType !self.mSelfLocation !selfCppName}
  else
    error self.mSelfLocation : "'self' not available in this context" : outExpression
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @selfInExpressionForGeneration : @semanticExpressionForGeneration {
  private let @string mSelfCppName
}

#·····················································································································

override method @selfInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "const GALGAS_" + [self.mResultType identifierRepresentation] + " " + outCppExpression + " = " + self.mSelfCppName + " ;\n"
  [!?ioUnusedVariableCppNameSet removeKey !self.mSelfCppName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
