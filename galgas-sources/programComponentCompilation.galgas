#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Program component compilation                                                                                       *
#                                                                                                                      *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

list @programListForGeneration {
  @semanticDeclarationForGeneration mDeclaration
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           G E N E R A T I O N    F I L E W R A P P E R S                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

private filewrapper programFileGenerationTemplate in "../generation_templates/program_generation" {
}{
}{
  template programFileImplementation "program-file.cpp.galgasTemplate"
    ?@string COMPONENT_NAME
    ?@stringlist IMPORTED_COMPONENT_LIST
    ?@string BEFORE_AFTER_RULE_IMPLEMENTATION_STRING
    ?@programRuleList PROGRAM_RULE_LIST
    ?@string PROJECT_VERSION_STRING
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    ' B E F O R E '                                                                           *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileBeforeClauseGalgas3
  ?let @analysisContext inAnalysisContext
  ?let @prologueEpilogueList inPrologueList
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration {
#--- Compile 'before' routines
  var semanticInstructionListForGeneration = @semanticInstructionListForGeneration. emptyList
  for () in inPrologueList do
    analyzeRoutineBody (
      !inAnalysisContext
      !@formalParameterListAST. emptyList # Routine signature : no argument
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {
      !blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration +=
    !@routineImplementationForGeneration.new {
      !false # Has no header
      !"proc-before"
      !"before"
      !@formalParameterListForGeneration.emptyList
      !true # Generate static
      !semanticInstructionListForGeneration
    }
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    P R O G R A M    R U L E S                                                                *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

private proc compileProgramRulesGalgas3
  ?let @analysisContext inAnalysisContext
  ?let @programRuleList inProgramRules
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration
{
  @uint ruleIndex = 0
  for () in inProgramRules do
    let @formalParameterListAST argumentList = {
      !["" nowhere]
      !@formalArgumentPassingModeAST. argumentConstantIn
      !@lstring.new {!"lstring" !@location.here}
      !mSourceFileVariableName
      !mSourceFileVariableNameIsUnused
    }
    @semanticInstructionListForGeneration semanticInstructionListForGeneration
    @formalParameterListForGeneration routineSignature
    analyzeRoutineBody (
      !inAnalysisContext
      !argumentList
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?semanticInstructionListForGeneration
      ?routineSignature
    )
    ioDecoratedDeclarationListForGeneration +=
      !@routineImplementationForGeneration.new {
        !false # Has no header
        !"proc-programrule"
        !"programRule_" + [ruleIndex string]
        !routineSignature
        !true # Generate static
        !semanticInstructionListForGeneration}
    ruleIndex ++
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    ' A F T E R '                                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileAfterClauseGalgas3
  ?let @analysisContext inAnalysisContext
  ?let @prologueEpilogueList inEpilogueList
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration {
#--- Compile 'before' routines
  var semanticInstructionListForGeneration = @semanticInstructionListForGeneration. emptyList
  for () in inEpilogueList do
    analyzeRoutineBody (
      !inAnalysisContext
      !@formalParameterListAST. emptyList # Routine signature : no argument
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {
      !blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration +=
    !@routineImplementationForGeneration.new {
      !false # Has no header
      !"proc-after"
      !"after"
      !@formalParameterListForGeneration. emptyList
      !true # Generate static
      !semanticInstructionListForGeneration}
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    P R O G R A M    C O M P O N E N T                                                        *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileProgramComponentGalgas3
  ?let @prologueEpilogueList inPrologueList
  ?let @programRuleList inProgramRules
  ?let @prologueEpilogueList inEpilogueList
  ?let @semanticContext inSemanticContext
  ?let @string inProjectVersionString
  !@programComponentForGeneration outProgramComponentForGeneration
{
#  const useOneHugeHeader := [option galgas_cli_options.generateOneHeader value] ;
#--- Analysis context
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !buildPredefinedTypes (!inSemanticContext)
    !@unifiedTypeMap-proxy.null
    !""
    !@unifiedTypeMap-proxy.null
  }
#--- Analyse 'before' instructions
  @programListForGeneration decoratedDeclarationListForGeneration = {}
  compileBeforeClauseGalgas3 (
    !analysisContext
    !inPrologueList
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse 'after' instructions
  compileAfterClauseGalgas3 (
    !analysisContext
    !inEpilogueList
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse program rules
  compileProgramRulesGalgas3 (
    !analysisContext
    !inProgramRules
    !?decoratedDeclarationListForGeneration
  )
#------------ Build Implementation File
  @stringset inclusionSet = {}
  var beforeAfterRulesString = ""
  for () in decoratedDeclarationListForGeneration do
    beforeAfterRulesString += [mDeclaration appendTypeGenericImplementation]
    [mDeclaration appendSpecificImplementation !inSemanticContext.mTypeMap !?inclusionSet ?let @string code]
    beforeAfterRulesString += code
  end
  for () in inProgramRules do
    if mReferenceGrammar.string != "" then
      inclusionSet += !"grammar-" + mReferenceGrammar
    end
  end
  let cppContents = [filewrapper programFileGenerationTemplate.programFileImplementation
    !"program"
    !{} # [inclusionSet stringList]
    !beforeAfterRulesString
    !inProgramRules
    !inProjectVersionString
  ]
#---
  outProgramComponentForGeneration = @programComponentForGeneration.new {
    !false # No header
    !"program"
    !inclusionSet
    !cppContents
  }
}

#----------------------------------------------------------------------------------------------------------------------*

