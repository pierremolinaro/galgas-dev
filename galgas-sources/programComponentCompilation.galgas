#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Program component compilation                                                                                       *
#                                                                                                                      *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*



#----------------------------------------------------------------------------------------------------------------------*

list @programListForGeneration {
  @semanticDeclarationForGeneration mDeclaration
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           G E N E R A T I O N    F I L E W R A P P E R S                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper programFileGenerationTemplate in "../generation_templates/program_generation" {
}{
}{
  template programFileHeader "program-file.h.galgasTemplate"
    ?@string COMPONENT_NAME
    ?@stringlist IMPORTED_COMPONENT_LIST

  template programFileImplementation "program-file.cpp.galgasTemplate"
    ?@string COMPONENT_NAME
    ?@stringlist IMPORTED_COMPONENT_LIST
    ?@string BEFORE_AFTER_RULE_IMPLEMENTATION_STRING
    ?@programRuleList PROGRAM_RULE_LIST
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    ' B E F O R E '                                                                           *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileBeforeClause
  ?let @analysisContext inAnalysisContext
  ?let @prologueEpilogueList inPrologueList
  ?!@semanticDeclarationSortedListForGeneration ioDecoratedDeclarationListForGeneration {
#--- Compile 'before' routines
  var semanticInstructionListForGeneration = @semanticInstructionListForGeneration. emptyList
  for () in inPrologueList do
    analyzeRoutineBody (
      !inAnalysisContext
      !@formalParameterListAST. emptyList # Routine signature : no argument
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {
      !blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration +=
    !"before"
    !@routineImplementationForGeneration.new {
      !false # Has no header
      !"proc-before"
      !"before"
      !@formalParameterListForGeneration. emptyList
      !false # Do not generate static
      !semanticInstructionListForGeneration}
    !""
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileBeforeClauseGalgas3
  ?let @analysisContext inAnalysisContext
  ?let @prologueEpilogueList inPrologueList
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration {
#--- Compile 'before' routines
  var semanticInstructionListForGeneration = @semanticInstructionListForGeneration. emptyList
  for () in inPrologueList do
    analyzeRoutineBody (
      !inAnalysisContext
      !@formalParameterListAST. emptyList # Routine signature : no argument
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {
      !blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration +=
    !@routineImplementationForGeneration.new {
      !false # Has no header
      !"proc-before"
      !"before"
      !@formalParameterListForGeneration. emptyList
      !true # Generate static
      !semanticInstructionListForGeneration}
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    P R O G R A M    R U L E S                                                                *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileProgramRules
  ?let @analysisContext inAnalysisContext
  ?let @programRuleList inProgramRules
  ?!@semanticDeclarationSortedListForGeneration ioDecoratedDeclarationListForGeneration
 {
  @uint ruleIndex = 0
  for () in inProgramRules do
#    if mIndexingGrammar.string != "" then
#      ioHasIndexing = true
#      [inAnalysisContext.mSemanticContext.mGrammarMap searchKey !mIndexingGrammar ?* ?let @bool hasIndexing ?*]
#      if not hasIndexing then
#        error mIndexingGrammar : "the '" + mIndexingGrammar + "' grammar does not enable indexing"
#      end
#    end
    let @formalParameterListAST argumentList = {
      !["" nowhere]
      !@formalArgumentPassingModeAST. argumentConstantIn
      !@lstring.new {!"lstring" !@location.here}
      !mSourceFileVariableName
      !mSourceFileVariableNameIsUnused
    }
    @semanticInstructionListForGeneration semanticInstructionListForGeneration
    @formalParameterListForGeneration routineSignature
    analyzeRoutineBody (
      !inAnalysisContext
      !argumentList
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?semanticInstructionListForGeneration
      ?routineSignature
    )
    ioDecoratedDeclarationListForGeneration +=
      !"source rule " + ruleIndex
      !@routineImplementationForGeneration.new {
        !false # Has no header
        !"proc-programrule"
        !"programRule_" + [ruleIndex string]
        !routineSignature
        !false # Do not generate static
        !semanticInstructionListForGeneration}
    !""
    ruleIndex ++
  end
}

#----------------------------------------------------------------------------------------------------------------------*

private proc compileProgramRulesGalgas3
  ?let @analysisContext inAnalysisContext
  ?let @programRuleList inProgramRules
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration
{
  @uint ruleIndex = 0
  for () in inProgramRules do
#    if mIndexingGrammar.string != "" then
#      ioHasIndexing = true
#      [inAnalysisContext.mSemanticContext.mGrammarMap searchKey !mIndexingGrammar ?* ?let @bool hasIndexing ?*]
#      if not hasIndexing then
#        error mIndexingGrammar : "the '" + mIndexingGrammar + "' grammar does not enable indexing"
#      end
#    end
    let @formalParameterListAST argumentList = {
      !["" nowhere]
      !@formalArgumentPassingModeAST. argumentConstantIn
      !@lstring.new {!"lstring" !@location.here}
      !mSourceFileVariableName
      !mSourceFileVariableNameIsUnused
    }
    @semanticInstructionListForGeneration semanticInstructionListForGeneration
    @formalParameterListForGeneration routineSignature
    analyzeRoutineBody (
      !inAnalysisContext
      !argumentList
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?semanticInstructionListForGeneration
      ?routineSignature
    )
    ioDecoratedDeclarationListForGeneration +=
      !@routineImplementationForGeneration.new {
        !false # Has no header
        !"proc-programrule"
        !"programRule_" + [ruleIndex string]
        !routineSignature
        !true # Generate static
        !semanticInstructionListForGeneration}
    ruleIndex ++
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    ' A F T E R '                                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileAfterClause
  ?let @analysisContext inAnalysisContext
  ?let @prologueEpilogueList inEpilogueList
  ?!@semanticDeclarationSortedListForGeneration ioDecoratedDeclarationListForGeneration {
#--- Compile 'before' routines
  var semanticInstructionListForGeneration = @semanticInstructionListForGeneration. emptyList
  for () in inEpilogueList do
    analyzeRoutineBody (
      !inAnalysisContext
      !@formalParameterListAST. emptyList # Routine signature : no argument
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {
      !blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration +=
    !"after"
    !@routineImplementationForGeneration.new {
      !false # Has no header
      !"proc-after"
      !"after"
      !@formalParameterListForGeneration. emptyList
      !false # Do not generate static
      !semanticInstructionListForGeneration}
    !""
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileAfterClauseGalgas3
  ?let @analysisContext inAnalysisContext
  ?let @prologueEpilogueList inEpilogueList
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration {
#--- Compile 'before' routines
  var semanticInstructionListForGeneration = @semanticInstructionListForGeneration. emptyList
  for () in inEpilogueList do
    analyzeRoutineBody (
      !inAnalysisContext
      !@formalParameterListAST. emptyList # Routine signature : no argument
      !@localConstantList. emptyList # No local constant
      !@typedPropertyList. emptyList # No attribute (not a method)
      !@typedPropertyList. emptyList # No attribute (not a method)
      !""
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {
      !blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration +=
    !@routineImplementationForGeneration.new {
      !false # Has no header
      !"proc-after"
      !"after"
      !@formalParameterListForGeneration. emptyList
      !true # Generate static
      !semanticInstructionListForGeneration}
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    P R O G R A M    C O M P O N E N T                                                        *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileProgramComponentFromAST
  ?let @lstring inSourceFile
  ?let @string inProductDirectory
  ?let @programComponentAST inProgramComponentAST
  ?!@parsedComponentStruct ioParsedComponentStruct {
  let @string basename = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
#--- Check component name
  let @lstring componentName = [inProgramComponentAST mProgramComponentName]
  if [componentName string] != basename then
    warning componentName: "GALGAS checks "
      "the component name ('" + [componentName string]
    + "') against the source file base name ('" + basename + "'): they should be identical"
  end 
#--- Recursively parse all imported files
  @semanticDeclarationListAST semanticDeclarationList = [inProgramComponentAST mSemanticDeclarationList]
  var parsedFileSet =@stringset.setWithString{ ![inSourceFile string]}
  var optionComponentFileNameList =@lstringlist.emptyList{}
  var grammarComponentASTList =@grammarComponentASTList.emptyList{}
  var headerIncludeList =@stringlist.emptyList{}
  @stringlist implementationIncludeList = {!componentName.string}
  recursivelyImportSemanticComponentAndCheckNoCircularityInImportSemantics (
    !inSourceFile
    !?ioParsedComponentStruct
    !?optionComponentFileNameList
    !?grammarComponentASTList
    !?semanticDeclarationList
    !?parsedFileSet
    !?headerIncludeList
    !?implementationIncludeList
    ![inProgramComponentAST mImportedComponentFileNameList]
    ![inSourceFile stringByDeletingLastPathComponent]
  )
#------ Add predefined types to semantics declarations
  @semanticDeclarationListAST semanticDeclarationListWithPredefinedTypes = semanticDeclarationList
  appendPredefinedTypesASTs ( !?semanticDeclarationListWithPredefinedTypes )
#------ Build semantic context
  buildSemanticContext (
    !semanticDeclarationListWithPredefinedTypes
    ?var @semanticContext semanticContext
  )
#--- Perform semantic analysis of grammar components
  buildGrammarComponentMapForSemanticAnalysis (
    !grammarComponentASTList
    !?semanticContext
  )
#--- Build option component map for analysis
  buildOptionComponentMapForSemanticAnalysis (
    !optionComponentFileNameList
    !?ioParsedComponentStruct
    !?semanticContext.mOptionComponentMapForSemanticAnalysis
  )
#--- Build lexique component map for semantic analysis
  buildLexiqueComponentMapForSemanticAnalysis (
    !ioParsedComponentStruct
    ?var @lexiqueComponentMapForSemanticAnalysis lexiqueMap
  )
  semanticContext.mLexiqueComponentMapForSemanticAnalysis = lexiqueMap
#------ Semantic Analysis
  @semanticDeclarationSortedListForGeneration decoratedDeclarationListForGeneration
  performSemanticAnalysis (
    !inProductDirectory
    ![inProgramComponentAST mSemanticDeclarationList]
    !semanticContext
    ?decoratedDeclarationListForGeneration
  )
#--- Analysis context
  let analysisContext =  @analysisContext.new {
    !semanticContext
    !buildPredefinedTypes (!semanticContext)
    !@unifiedTypeMap-proxy. null
    !""
    !@unifiedTypeMap-proxy. null}
#--- Analyse 'before' instructions
  compileBeforeClause (
    !analysisContext
    !inProgramComponentAST.mPrologueList
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse program rules
  compileProgramRules (
    !analysisContext
    !inProgramComponentAST.mProgramRules
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse 'after' instructions
  compileAfterClause (
    !analysisContext
    !inProgramComponentAST.mEpilogueList
    !?decoratedDeclarationListForGeneration
  )
#------ Generate Header File
  if @uint. errorCount == 0 then
    @string headerString = [filewrapper programFileGenerationTemplate.programFileHeader
      ![componentName string]
      !headerIncludeList
    ]
    for () in decoratedDeclarationListForGeneration do
      var unusedInclusionSet = @stringset. emptySet
      [mDeclaration appendDeclaration1 !?unusedInclusionSet ?let @string code]
      headerString += code
    end
    for () in decoratedDeclarationListForGeneration do
      var inclusionSet2 = @stringset. emptySet
      [mDeclaration appendDeclaration2 !false !inProductDirectory !?inclusionSet2 ?let @string headerString2]
      headerString += headerString2
    end
    [@string generateFileWithPattern
      !inProductDirectory
      ![componentName string] + ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      !headerString
      !"\n\n" # Defaut user zone2
      !"#endif\n"
    ]
  end
#------ Generate Implementation File
  if @uint. errorCount == 0 then
    var beforAfterRulesImplementationString = ""
    for () in decoratedDeclarationListForGeneration do
      beforAfterRulesImplementationString += [mDeclaration appendTypeGenericImplementation]
      var unusedInclusionSet = @stringset. emptySet
      [mDeclaration appendSpecificImplementation !semanticContext.mTypeMap !?unusedInclusionSet ?let @string code]
      beforAfterRulesImplementationString += code
    end
    let implementationString = [filewrapper programFileGenerationTemplate.programFileImplementation
      ![componentName string]
      !implementationIncludeList
      !beforAfterRulesImplementationString
      ![inProgramComponentAST mProgramRules]
    ]
    [@string generateFileWithPattern
      !inProductDirectory
      ![componentName string] + ".cpp"
      !"//"
      !"\n\n" # Defaut user zone1
      !implementationString
      !"\n\n" # Defaut user zone2
      !"\n"
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileProgramComponentFromSourceFile
  ?let @lstring inSourceFile
  ?let @string inProductDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct {
#--- Parse source file
  let basename = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
  let basenameKey = @lstring.new {!basename !@location.here}
  @programComponentAST programComponentAST
  if [ioParsedComponentStruct.mParsedProgramComponentMap hasKey !basename] then
    [ioParsedComponentStruct.mParsedProgramComponentMap searchKey !basenameKey ?* ?programComponentAST]
  else
    grammar programSLRgrammar in inSourceFile ?programComponentAST
    [!?ioParsedComponentStruct.mParsedProgramComponentMap insertKey !basenameKey !inSourceFile !programComponentAST]
  end
#---
  compileProgramComponentFromAST (
    !inSourceFile
    !inProductDirectory
    !programComponentAST
    !?ioParsedComponentStruct
  )
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    P R O G R A M    C O M P O N E N T                                                        *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileProgramComponentGalgas3
  ?let @prologueEpilogueList inPrologueList
  ?let @programRuleList inProgramRules
  ?let @prologueEpilogueList inEpilogueList
  ?let @semanticContext inSemanticContext
  !@programComponentForGeneration outProgramComponentForGeneration {
#  const useOneHugeHeader := [option galgas_cli_options.generateOneHeader value] ;
#--- Analysis context
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !buildPredefinedTypes (!inSemanticContext)
    !@unifiedTypeMap-proxy. null
    !""
    !@unifiedTypeMap-proxy. null}
#--- Analyse 'before' instructions
  var decoratedDeclarationListForGeneration = @programListForGeneration. emptyList
  compileBeforeClauseGalgas3 (
    !analysisContext
    !inPrologueList
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse 'after' instructions
  compileAfterClauseGalgas3 (
    !analysisContext
    !inEpilogueList
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse program rules
  compileProgramRulesGalgas3 (
    !analysisContext
    !inProgramRules
    !?decoratedDeclarationListForGeneration
  )
#------------ Build Implementation File
  @stringset inclusionSet = {}
  var beforeAfterRulesString = ""
  for () in decoratedDeclarationListForGeneration do
    beforeAfterRulesString += [mDeclaration appendTypeGenericImplementation]
    [mDeclaration appendSpecificImplementation !inSemanticContext.mTypeMap !?inclusionSet ?let @string code]
    beforeAfterRulesString += code
  end
  for () in inProgramRules do
    if mIndexingGrammar.string != "" then
      inclusionSet += !"grammar-" + mIndexingGrammar
    end
  end
  let cppContents = [filewrapper programFileGenerationTemplate.programFileImplementation
    !"program"
    !{} # [inclusionSet stringList]
    !beforeAfterRulesString
    !inProgramRules
  ]
#---
  outProgramComponentForGeneration = @programComponentForGeneration.new {
    !false # No header
    !"program"
    !inclusionSet
    !cppContents
  }
}

#----------------------------------------------------------------------------------------------------------------------*

