#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Program component compilation            
#                                           
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @programListForGeneration {
  public let @semanticDeclarationForGeneration mDeclaration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#           G E N E R A T I O N    F I L E W R A P P E R S                                                     
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private filewrapper programFileGenerationTemplate in "+generation-templates/program_generation" {
}{
}{
  template programFileImplementation "program-file.cpp.galgasTemplate"
    ?@string COMPONENT_NAME
    ?@stringlist IMPORTED_COMPONENT_LIST
    ?@string BEFORE_AFTER_RULE_IMPLEMENTATION_STRING
    ?@programRuleList PROGRAM_RULE_LIST
    ?@string PROJECT_VERSION_STRING
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#           C O M P I L E    ' B E F O R E '     
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc compileBeforeClauseGalgas3
  ?!@lstringlist ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @prologueEpilogueList inPrologueList
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration
{
  let usefulnessName = beforeNameForUsefulEntitiesGraph (!.here)
  [!?ioUsefulEntitiesGraph addNode !usefulnessName !usefulnessName]
  ioUsefulnessRootEntities += !usefulnessName
#--- Compile 'before' routines
  var semanticInstructionListForGeneration = @semanticInstructionListForGeneration {}
  for (mInstructionList mEndOfInstructionList) in inPrologueList do
    analyzeRoutineBody (
      !usefulnessName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !@formalParameterListAST {} # Routine signature : no argument
      !nonMutablePropertyList: @typedPropertyList {} # No attribute (not a method)
      !mutablePropertyList: @typedPropertyList {} # No attribute (not a method)
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {
      !blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration +=
    !@routineImplementationForGeneration.new {
      !false # Has no header
      !"proc-before"
      !"before"
      !@formalParameterListForGeneration {}
      !true # Generate static
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#           C O M P I L E    P R O G R A M    R U L E S 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc compileProgramRulesGalgas3
  ?!@lstringlist ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @programRuleList inProgramRules
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration
{
  var @uint ruleIndex = 0
  for (mSourceFileExtension * mSourceFileVariableName mSourceFileVariableNameIsUnused * mInstructionList mEndOfInstructionList) in inProgramRules do
    let usefulnessName = rootRuleNameForUsefulEntitiesGraph (!mSourceFileExtension)
    [!?ioUsefulEntitiesGraph addNode !usefulnessName !usefulnessName]
    ioUsefulnessRootEntities += !usefulnessName
    let @formalParameterListAST argumentList = {
      !["" nowhere]
      !@formalArgumentPassingModeAST. argumentConstantIn
      !@lstring.new {!"lstring" !@location.here}
      !mSourceFileVariableName
      !mSourceFileVariableNameIsUnused
    }
    analyzeRoutineBody (
      !usefulnessName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !argumentList
      !nonMutablePropertyList: @typedPropertyList {} # No attribute (not a method)
      !mutablePropertyList: @typedPropertyList {} # No attribute (not a method)
      !mInstructionList
      !mEndOfInstructionList
      ?let semanticInstructionListForGeneration
      ?let routineSignature
    )
    ioDecoratedDeclarationListForGeneration +=
      !@routineImplementationForGeneration.new {
        !false # Has no header
        !"proc-programrule"
        !"programRule_" + [ruleIndex string]
        !routineSignature
        !true # Generate static
        !semanticInstructionListForGeneration
      }
    ruleIndex += 1
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#           C O M P I L E    ' A F T E R '  
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc compileAfterClauseGalgas3
  ?!@lstringlist ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @prologueEpilogueList inEpilogueList
  ?!@programListForGeneration ioDecoratedDeclarationListForGeneration
{
  let usefulnessName = afterNameForUsefulEntitiesGraph (!.here)
  [!?ioUsefulEntitiesGraph addNode !usefulnessName !usefulnessName]
  ioUsefulnessRootEntities += !usefulnessName
#--- Compile 'after' routines
  var @semanticInstructionListForGeneration semanticInstructionListForGeneration = {}
  for (mInstructionList mEndOfInstructionList) in inEpilogueList do
    analyzeRoutineBody (
      !usefulnessName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !@formalParameterListAST {} # Routine signature : no argument
#      !localConstantList: {} # No local constant
      !nonMutablePropertyList: @typedPropertyList {} # No attribute (not a method)
      !mutablePropertyList: @typedPropertyList {} # No attribute (not a method)
      !mInstructionList
      !mEndOfInstructionList
      ?let @semanticInstructionListForGeneration blockSemanticInstructionListForGeneration
      ?*
    )
    semanticInstructionListForGeneration += !@semanticBlockInstructionForGeneration.new {!blockSemanticInstructionListForGeneration}
  end
#---
  ioDecoratedDeclarationListForGeneration += !@routineImplementationForGeneration.new {
    !false # Has no header
    !"proc-after"
    !"after"
    !@formalParameterListForGeneration {}
    !true # Generate static
    !semanticInstructionListForGeneration
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#           C O M P I L E    P R O G R A M    C O M P O N E N T                                                
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc compileProgramComponentGalgas3
  ?!@lstringlist ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @prologueEpilogueList inPrologueList
  ?let @programRuleList inProgramRules
  ?let @prologueEpilogueList inEpilogueList
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @string inProjectVersionString
  !@programComponentForGeneration outProgramComponentForGeneration
{
#--- Analysis context
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !buildPredefinedTypes (!ioTypeMap)
    !""
    !selfType: .none
    !""
    !requiresSelfForAccessingProperty: false # self.requiresSelfForAccessingProperty
  }
#--- Analyse 'before' instructions
  var @programListForGeneration decoratedDeclarationListForGeneration = {}
  compileBeforeClauseGalgas3 (
    !?ioUsefulnessRootEntities
    !?ioUsefulEntitiesGraph
    !analysisContext
     !?ioTypeMap
    !inPrologueList
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse 'after' instructions
  compileAfterClauseGalgas3 (
    !?ioUsefulnessRootEntities
    !?ioUsefulEntitiesGraph
    !analysisContext
    !?ioTypeMap
    !inEpilogueList
    !?decoratedDeclarationListForGeneration
  )
#--- Analyse program rules
  compileProgramRulesGalgas3 (
    !?ioUsefulnessRootEntities
    !?ioUsefulEntitiesGraph
    !analysisContext
    !?ioTypeMap
    !inProgramRules
    !?decoratedDeclarationListForGeneration
  )
#------------ Build Implementation File
  var @stringset inclusionSet = {}
  var beforeAfterRulesString = ""
  for (mDeclaration) in decoratedDeclarationListForGeneration do
    beforeAfterRulesString += [mDeclaration appendTypeGenericImplementation]
    [mDeclaration appendSpecificImplementation !ioTypeMap !?inclusionSet ?let @string code]
    beforeAfterRulesString += code
  end
  for (* * * * mReferenceGrammar * *) in inProgramRules do
    if mReferenceGrammar.string != "" then
      inclusionSet += !"grammar-" + [mReferenceGrammar fileNameRepresentation]
    end
  end
  let cppContents = [filewrapper programFileGenerationTemplate.programFileImplementation
    !"program"
    !{} # [inclusionSet stringList]
    !beforeAfterRulesString
    !inProgramRules
    !inProjectVersionString
  ]
#---
  outProgramComponentForGeneration = @programComponentForGeneration.new {
    !false # No header
    !"program"
    !inclusionSet
    !cppContents
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

