#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Generate predefined types
#
#  Copyright (C) 2010, ..., 2024 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @typePredefinedTypeAST : @predefinedTypeAST {

  #-----------------------------------------------------------------------------------------------

  override getter defaultInitializerName -> @string {
    result = "" // No default initializer
  }

  #-----------------------------------------------------------------------------------------------

  override method getClassFunctionMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                      !@classFunctionMap outMap {
    outMap = {}
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"typeList"
      !resultTypeName:"typelist"
      !hasLexiqueArg:false
    )
  }

  #-----------------------------------------------------------------------------------------------

  override method getGetterMap ?!@unifiedTypeMap ioUnifiedTypeMap
                               !@getterMap outMap {
    commonGetterMapForAllTypes (!?ioUnifiedTypeMap ?outMap)
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"name"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"hasSuperclass"
      !obsoleteName: ""
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"superclass"
      !obsoleteName: ""
      !returnedTypeName:"type"
      !hasCompilerArgument:true
    )
  }

  #-----------------------------------------------------------------------------------------------

  override getter getSupportedOperatorFlags -> @operators {
    result = .generateDescriptionGetterUtilityMethod | .isComparable
  }

  #-----------------------------------------------------------------------------------------------

  override getter cppDeclarationString -> @string {
    result = [filewrapper predefinedTypeGenerationTemplate.type_type]
  }

  #-----------------------------------------------------------------------------------------------

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

