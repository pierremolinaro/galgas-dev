//------------------------------------------------------------------------------------------------
//
//  GALGAS main program definition
//
//  Copyright (C) 2007, ..., 2014 Pierre Molinaro.
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------

before { //--- Generate project
  let creationProjectName = [option galgas_cli_options.create_project value]
  projectCreation (!creationProjectName)
}

//------------------------------------------------------------------------------------------------

before { //--- Print predefined lexical action
  if [option galgas_cli_options.printPredefinedLexicalActions value] then
    printPredefinedLexicalActions ()
  end
}

//------------------------------------------------------------------------------------------------

before { //--- Extract LIBPM
  if [option galgas_cli_options.extractLIBPMOption value] != "" then
    updateLIBPMatPath (![option galgas_cli_options.extractLIBPMOption value] )
  end
}

//------------------------------------------------------------------------------------------------

extern proc checkBigInteger

before { //--- Extract LIBPM
  if [option galgas_cli_options.check_big_int value] then
    checkBigInteger ()
  end
}

//------------------------------------------------------------------------------------------------

extern proc displayUnicodeLexicalTestFunctions

before {
  if [option galgas_cli_options.displayUnicodeLexicalTestFunctions value] then
    displayUnicodeLexicalTestFunctions ()
  end
}

//------------------------------------------------------------------------------------------------
//
//          galgas
//
//------------------------------------------------------------------------------------------------

case . "galgas"
message "a GALGAS 3 source file"
grammar galgas3Grammar
?sourceFilePath: @lstring inSourceFile {
//--- Search for a project file in parent directory
  let parentDirectory = [[inSourceFile.string stringByDeletingLastPathComponent] stringByDeletingLastPathComponent]
  let candidateProjectFiles = [parentDirectory regularFilesWithExtensions !false !@[@("galgasProject")]]
  if [candidateProjectFiles count] == 0 then
    error inSourceFile : "no project file in parent directory of source file"
  elsif [candidateProjectFiles count] > 1 then
    var s = "several project files in source file parent directory:"
    for (mValue) in candidateProjectFiles do
      s += "\n  - " + mValue
    end
    error inSourceFile : s
  else
    let projectFilePath = parentDirectory + "/" + [candidateProjectFiles mValueAtIndex !0]
    parseAndAnalyzeProject (!@{!projectFilePath !inSourceFile.location} !galgas4: false !inSourceFile.string )
  end
}

//------------------------------------------------------------------------------------------------
//
//          ggs
//
//------------------------------------------------------------------------------------------------

case . "ggs"
message "a GALGAS 4 source file"
grammar galgas4Grammar ?sourceFilePath: @lstring inSourceFile {
//--- Search for a project file in parent directory
  let parentDirectory = [[inSourceFile.string stringByDeletingLastPathComponent] stringByDeletingLastPathComponent]
  let candidateProjectFiles = [parentDirectory regularFilesWithExtensions !false !@[@("ggsProject")]]
  if [candidateProjectFiles count] == 0 then
    error inSourceFile : "no project file in parent directory of source file"
  elsif [candidateProjectFiles count] > 1 then
    var s = "several project files in source file parent directory:"
    for (mValue) in candidateProjectFiles do
      s += "\n  - " + mValue
    end
    error inSourceFile : s
  else
    let projectFilePath = parentDirectory + "/" + [candidateProjectFiles mValueAtIndex !0]
    parseAndAnalyzeProject (!@{!projectFilePath !inSourceFile.location} !galgas4: true !inSourceFile.string )
  end
}

//------------------------------------------------------------------------------------------------
//
//          Template
//
//------------------------------------------------------------------------------------------------

case . "galgasTemplate"
message "a GALGAS Template source file"
grammar templateGrammar
?sourceFilePath:@lstring inSourceFile {
  grammar templateGrammar (?*) in inSourceFile
}

//------------------------------------------------------------------------------------------------
//
//          galgasProject
//
//------------------------------------------------------------------------------------------------

case . "galgasProject"
message "a GALGAS project source file"
grammar galgas3ProjectGrammar
?sourceFilePath:@lstring inProjectSourceFile {
  parseAndAnalyzeProject (!inProjectSourceFile !galgas4: false !"" )
}

//------------------------------------------------------------------------------------------------

case . "ggsproject"
message "a GALGAS project source file"
grammar galgas3ProjectGrammar
?sourceFilePath: @lstring inProjectSourceFile {
  parseAndAnalyzeProject (!inProjectSourceFile !galgas4: true !"" )
}

//------------------------------------------------------------------------------------------------
//
//          compileProject
//
//------------------------------------------------------------------------------------------------

private proc parseAndAnalyzeProject ?let @lstring inProjectSourceFile
                                    ?galgas4: let @bool inGalgas4
                                    ?let @string inSourceToAnalyze {
  if @application.verboseOutput then
    println (!"*** Parsing project files")
  end
  grammar galgas3ProjectGrammar (?let @galgas3ProjectComponentAST projectComponentAST) in inProjectSourceFile
  if [option.mode value] == "" then
    compileProject (!inProjectSourceFile !inSourceToAnalyze !galgas4: inGalgas4 !projectComponentAST)
  //--- C++ compilation
    if 0 == @uint.errorCount then
      let cppCompilationTarget = [option galgas_cli_options.cppCompile value]
      if cppCompilationTarget != "" then
        if @application.verboseOutput then
          println (!"*** Perform C++ compilation")
        end
        let buildFile = [inProjectSourceFile stringByDeletingLastPathComponent] + "/" + cppCompilationTarget + "/build.py"
        if [buildFile fileExists] then
          let resultCode = ["python " + buildFile system]
          if resultCode != 0 then
          error ["" nowhere] : "Running '" + buildFile + "' returns " + resultCode
          end
        else
          error ["" nowhere] : "Cannot perform C++ compilation of '" + cppCompilationTarget
              + "' : the '" + buildFile + "' file does not exist"
        end
      end
    end
  end
}

//------------------------------------------------------------------------------------------------

private proc compileProject ?let @lstring inProjectSourceFile
                            ?let @string inSourceToAnalyze
                            ?galgas4: let @bool inGalgas4
                            ?let @galgas3ProjectComponentAST inProjectComponentAST {
  var @galgasDeclarationAST declarationAST = @()
//--- Parse predefined type definitions
  grammar galgas4Grammar (!?declarationAST) on
  [[filewrapper typeGenerationTemplate] textFileContentsAtPath !"galgas-predefined-types.ggs"]
  : "GALGAS predefined types"
 //--- Parse source file
  for (mValue) in inProjectComponentAST.mProjectSourceList do
    if [mValue pathExtension] == "galgas" then
      let absoluteSourcePath = [mValue absolutePathFromPath ![inProjectSourceFile stringByDeletingLastPathComponent]]
      grammar galgas3Grammar (!?declarationAST) in @lstring {!absoluteSourcePath !mValue.location}
    elsif [mValue pathExtension] == "ggs" then
      let absoluteSourcePath = [mValue absolutePathFromPath ![inProjectSourceFile stringByDeletingLastPathComponent]]
      grammar galgas4Grammar (!?declarationAST) in @lstring {!absoluteSourcePath !mValue.location}
    else
      error mValue: "only \".galgas\" or \".ggs\" extensions are allowed here"
    end
  end
//--------------------------------- Hand coded source files
  var @stringlist handCodedLinkToolFileList = @()
  var @stringlist handCodedLinkAppFileList = @()
  var @stringlist handCodedSourceAppFileList = @()
  var @stringlist handCodedSourceToolFileList = @()
  var @stringlist frameworkToolFileList = @()
  var @stringset handCodedSourceDirectorySet = @()
  for (featureName featureValue) in inProjectComponentAST.mQualifiedFeatureList do
    if "tool-source" == featureName then
      handCodedSourceToolFileList += !featureValue.string
      let directory = [featureValue stringByDeletingLastPathComponent]
      if directory == "" then
        handCodedSourceDirectorySet += !"../"
      elsif [directory characterAtIndex !0] != '/' then
        handCodedSourceDirectorySet += !"../" + directory
      else
        handCodedSourceDirectorySet += !directory
      end
    elsif featureName.string == "tool-include" then
      handCodedSourceDirectorySet += !featureValue
    elsif featureName.string == "tool-framework" then
      frameworkToolFileList += ![featureValue lastPathComponent]
    elsif featureName.string == "app-source" then
      handCodedSourceAppFileList += !featureValue.string
      let directory = [featureValue stringByDeletingLastPathComponent]
      if directory == "" then
        handCodedSourceDirectorySet += !"../"
      elsif [directory characterAtIndex !0] != '/' then
        handCodedSourceDirectorySet += !"../" + directory
      else
        handCodedSourceDirectorySet += !directory
      end
    elsif featureName.string == "tool-link" then
      handCodedLinkToolFileList += !featureValue.string
    elsif featureName.string == "app-link" then
      handCodedLinkAppFileList += !featureValue.string
    elsif featureName.string == "libpmAtPath" then
    elsif featureName.string == "applicationBundleBase" then
    elsif featureName.string == "macCodeSign" then
    elsif featureName.string == "MacOSDeployment" then
    else
      error featureName : "unknown feature"
    end
  end
//--------------------------------- Display result
//  if @uint.errorCount == 0 then
//    message "  Declarations: " + [declarationAST.mDeclarationList count] + "\n"
//    message "  Syntax components: " + [declarationAST.mSyntaxComponentList count] + "\n" ;
//    message "  GUI components: " + [declarationAST.mGUIComponentList count] + "\n"
//    message "  Source rules: " + [declarationAST.mSourceRuleList count] + "\n" ;
//    message "  Prologue procs: " + [declarationAST.mPrologueDeclarationList count] + "\n"
//    message "  Epilogue procs: " + [declarationAST.mEpilogueDeclarationList count] + "\n"
//  end
//--------------------------------- Group syntax components and their extensions
  groupSyntaxComponentsGalgas3 (
    !declarationAST.mSyntaxComponentList
    !declarationAST.mSyntaxExtensions
    !?declarationAST.mDeclarationList
  )
//--------------------------------- Compile semantic declarations
  var usefulEntitiesGraph = @usefulEntitiesGraph ()
  let @string buildDirectoryName
  if inGalgas4 then
    buildDirectoryName = [[inProjectSourceFile lastPathComponent] stringByReplacingStringByString !"." !"+"] + "+BUILD"
  else
    buildDirectoryName = "build"
  end
  let absoluteBuildDirectory = [inProjectSourceFile stringByDeletingLastPathComponent] + "/" + buildDirectoryName
  let productDirectory = absoluteBuildDirectory + "/output"
  let @stringlist appProductFileList = @()
  let @semanticContext semanticContext
  var @unifiedTypeMap typeMap
  var @semanticDeclarationListForGeneration semanticDeclarationSortedListForGeneration
  var @lstringlist usefulnessRootEntities = @()
  if @uint.errorCount == 0 then
    compileSemanticDeclarationsGalgas (
      !?usefulnessRootEntities
      !?usefulEntitiesGraph
      !galgas4: inGalgas4
      !productDirectory
      !inProjectComponentAST.mEndOfSourceFile
      !declarationAST
      ?semanticContext
      ?typeMap
      ?semanticDeclarationSortedListForGeneration
    )
  else
    semanticDeclarationSortedListForGeneration = @()
    semanticContext = @semanticContext {!galgas4: inGalgas4}
    typeMap = @()
  end
//--------------------------------- Compile GUI components
  let @optionComponentMapForGeneration optionComponentMapForGeneration
  if @uint.errorCount == 0 then
    compileAllGuiComponentFromASTGalgas3 (
      !declarationAST.mGUIComponentList
      !semanticContext
      ?optionComponentMapForGeneration
    )
  else
    optionComponentMapForGeneration = @()
  end
//--------------------------------- Compile program declarations
  if @uint.errorCount == 0 then
    let projectVersionString = [inProjectComponentAST.mMajorVersion.bigint string]
      + "." + inProjectComponentAST.mMinorVersion.bigint
      + "." + inProjectComponentAST.mRevisionVersion.bigint
    compileProgramComponentGalgas3 (
      !?usefulnessRootEntities
      !?usefulEntitiesGraph
      !declarationAST.mPrologueDeclarationList
      !declarationAST.mSourceRuleList
      !declarationAST.mEpilogueDeclarationList
      !semanticContext
      !?typeMap
      !projectVersionString
      ?let @programComponentForGeneration programComponentForGeneration
    )
    semanticDeclarationSortedListForGeneration += !infoMessage: "zprogram" !programComponentForGeneration
  end
//----------------------------------- Check entity usefulness
  checkUsefulEntities (!usefulEntitiesGraph !usefulnessRootEntities !productDirectory)
//----------------------------------- Build an HTML file that contains all declared types
  let typeDumpFilePath = productDirectory + "/../helpers/" + [inProjectSourceFile lastPathComponent] + ".html"
  if [option galgas_cli_options.outputHTMLTypeListFile value] then
    var @stringset firstLetterSet = @()
    for (lkey *) in typeMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    var @string tableOfTypeString = ""
    var @char currentFirstLetter = ' '
    for (type_lkey *) in typeMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint]
        tableOfTypeString += "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForType (!type_lkey.string) + "<br>"
    end
    let typeDumpString = [filewrapper typeDumpGenerationTemplate.typeDump
      ![inProjectSourceFile lastPathComponent]
      !typeMap
      !firstLetterSet
      !tableOfTypeString
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
//--------------------------------- Perform global checkings
  if (0 == @uint.errorCount) & (inSourceToAnalyze == "") then
    performGalgas3ProjectGlobalCheckings (
      !?typeMap
      !declarationAST.mDeclarationList
    )
  end
//--------------------------------- File generation
  if (0 == @uint.errorCount) & (inSourceToAnalyze == "") then
    projectGeneration (
      !typeMap
      !absoluteBuildDir: absoluteBuildDirectory
      !buildDirName: buildDirectoryName
      !optionComponentMapForGeneration
      !appProductFileList
      !semanticDeclarationSortedListForGeneration
      !declarationAST.mSourceRuleList
      !inProjectComponentAST
      !inProjectSourceFile.string
      !handCodedSourceDirectorySet
      !handCodedSourceToolFileList
      !frameworkToolFileList
      !handCodedSourceAppFileList
      !handCodedLinkAppFileList
      !handCodedLinkToolFileList
    )
  end
}

//------------------------------------------------------------------------------------------------
//
//          projectGeneration
//
//------------------------------------------------------------------------------------------------

private proc projectGeneration
              ?let @unifiedTypeMap inTypeMap
              ?absoluteBuildDir: let @string inAbsoluteBuildDirectory
              ?buildDirName: let @string inBuildDirectoryName
              ?let @optionComponentMapForGeneration inOptionComponentMapForGeneration
              ?let @stringlist inAppProductFileList
              ?let @semanticDeclarationListForGeneration inSemanticDeclarationSortedListForGeneration
              ?let @programRuleList inSourceRuleList
              ?let @galgas3ProjectComponentAST inProjectComponentAST
              ?let @string inProjectSourceFile
              ?let @stringset inHandCodedSourceDirectorySet
              ?let @stringlist inHandCodedSourceToolFileList
              ?let @stringlist inFrameworkToolFileList
              ?let @stringlist inHandCodedSourceAppFileList
              ?let @stringlist inHandCodedLinkAppFileList
              ?let @stringlist inHandCodedLinkToolFileList
{
  let appProductFileList = inAppProductFileList
//--------------------------------- File generation
  if @application.verboseOutput then
    println (!"*** Generating files")
  end
  var @stringset allProductFileSet = @()
//--------------------------------- Create build/user-headers if does not exist
  let userHeadersDir = inAbsoluteBuildDirectory + "/user-headers"
  [userHeadersDir makeDirectory]
//--------------------------------- %quietOutputByDefault
  let quietOutputByDefault = [@stringset.setWithLStringList {!inProjectComponentAST.mGenerationFeatureList} hasKey !"quietOutputByDefault"]
//--------------------------------- Generate GUI components
  let productDirectory = inAbsoluteBuildDirectory + "/output"
  var @stringlist objcAppProductFileList = @()
  var @stringlist swiftAppProductFileList = @()
  if @uint.errorCount == 0 then
    generateAllGuiComponentsGalgas3 (
      !inOptionComponentMapForGeneration
      !productDirectory
      !quietOutputByDefault
//      !?appProductFileList
      !?objc: objcAppProductFileList
      !?swift: swiftAppProductFileList
    )
  end
//--------------------------------- Generate semantic files
//  message "*** Generate semantic\n" ;
  var @stringlist toolCppFileList = @()
  var @stringlist toolHeaderFileList = @()
  generatePredefinedTypeFiles (
    !productDirectory
    !inSemanticDeclarationSortedListForGeneration
    !?toolHeaderFileList
    !?toolCppFileList
    !?allProductFileSet
  )
  generateSemanticDeclarationsGalgas3 (
    !inTypeMap
    !productDirectory
    !inSemanticDeclarationSortedListForGeneration
    !?objc: objcAppProductFileList
    !?swift: swiftAppProductFileList
    !?toolCppFileList
    !?toolHeaderFileList
    !?allProductFileSet
  )
//--------------------------------- Update targets
//  message "*** update targets\n" ;
  if 0 == @uint.errorCount then
    var @stringset handledExtensionSet = @()
    for (mSourceFileExtension * * * * * *) in inSourceRuleList do
      handledExtensionSet += !mSourceFileExtension.string
    end
  //--- Build qualified feature map
    var @stringset ignoredFeatureSet = @()
    ignoredFeatureSet += !"tool-framework"
    ignoredFeatureSet += !"tool-source"
    ignoredFeatureSet += !"tool-link"
    ignoredFeatureSet += !"app-source"
    var @projectQualifiedFeatureMap projectQualifiedFeatureMap = @()
    for (mFeatureName mFeatureValue) in inProjectComponentAST.mQualifiedFeatureList do
      if not [ignoredFeatureSet hasKey !mFeatureName.string] then
        [!?projectQualifiedFeatureMap insertKey
          !mFeatureName
          !mFeatureValue
        ]
      end
    end
    updateGalgasTargets (
      !absoluteBuildDir: inAbsoluteBuildDirectory
      !buildDirName: inBuildDirectoryName
      !inProjectSourceFile
      !inProjectComponentAST.mTargetName.string
      !inProjectComponentAST.mEndOfSourceFile
      ![inProjectComponentAST.mMajorVersion.bigint string] + "." + inProjectComponentAST.mMinorVersion.bigint + "." + inProjectComponentAST.mRevisionVersion.bigint
      !projectQualifiedFeatureMap
      !inProjectComponentAST.mGenerationFeatureList
      !quietOutputByDefault
      !toolCppFileList
      !toolHeaderFileList
      !appProductFileList: appProductFileList
      !objcAppProductFileList: objcAppProductFileList
      !swiftAppProductFileList: swiftAppProductFileList
      !inHandCodedSourceToolFileList
      !inFrameworkToolFileList
      !inHandCodedSourceDirectorySet
      !handledExtensionSet
      !?allProductFileSet
      !inHandCodedSourceAppFileList
      !inHandCodedLinkAppFileList
      !inHandCodedLinkToolFileList
    )
  end
//--------------------------------- Remove useless files
  if 0 == @uint.errorCount then
    var @stringset allActualFileSet = @() // .setWithStringList {!objcAppProductFileList + swiftAppProductFileList}
    for (mValue) in [productDirectory regularFiles !false] do
      allActualFileSet += !mValue
    end
    let uselessFileSet = allActualFileSet - allProductFileSet
    for (key) in uselessFileSet do
      [@string deleteFile !productDirectory + "/" + key]
    end
  end
}

//------------------------------------------------------------------------------------------------
//
//           G E N E R A T I O N    F I L E W R A P P E R S
//
//------------------------------------------------------------------------------------------------

filewrapper typeDumpGenerationTemplate in "+generation-templates/target_generation" {
}{
}{
  template typeDump "typeDump.html.galgasTemplate"
    ?@string PROJECT_NAME
    ?@unifiedTypeMap UNIFIED_TYPE_MAP
    ?@stringset FIRST_LETTER_SET
    ?@string TABLE_OF_TYPES_STRING
}

//------------------------------------------------------------------------------------------------

func linkForType ?let @string inTypeName -> @string {
  result = "<a class=\"header_link\" href=\"#" + inTypeName + "\">@" + inTypeName + "</a>"
}

//------------------------------------------------------------------------------------------------
