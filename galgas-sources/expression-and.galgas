#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @andShortExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @andExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <expression_and> !@semanticExpressionAST outExpression {
    <relation_factor> ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $&$
      let leftOperand = outExpression
      <relation_factor> ?let @semanticExpressionAST rightOperand
      outExpression = @andExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&&$
      let leftOperand = outExpression
      <relation_factor> ?let @semanticExpressionAST rightOperand
      outExpression = @andShortExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @andExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @andExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixAndOperator]
    !"&"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftType
    !self.mOperatorLocation
    !leftExpression
    !.operator_and
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @andShortExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @andShortExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixAndOperator]
    !"&"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @andShortExpressionForGeneration.new {
    !leftType
    !self.mOperatorLocation
    !leftExpression
    !rightExpression}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @andShortExpressionForGeneration : @semanticExpressionForGeneration {
  public var @semanticExpressionForGeneration mLeftExpression
  public var @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

override method @andShortExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string leftTemporaryOperand
  ]
#--- Generate Comparison
  let testVar = "test_" + [ioTemporaryVariableIndex string] ioTemporaryVariableIndex ++
  ioGeneratedCode += "GALGAS_bool " + testVar + " = " + leftTemporaryOperand + " ;\n"
  ioGeneratedCode += "if (kBoolTrue == " + testVar + ".boolEnum ()) {\n"
#--- Right operand
  [!?ioGeneratedCode incIndentation !2]
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string rightTemporaryOperand
  ]
  ioGeneratedCode += testVar + " = " + rightTemporaryOperand + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  outCppExpression = testVar
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
