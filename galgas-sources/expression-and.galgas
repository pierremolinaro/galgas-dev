//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//!   AST
//--------------------------------------------------------------------------------------------------

class @andShortExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

//································································································

class @andExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <expression_and_ggs3> ?!@galgasDeclarationAST ioDeclarations
                             !@semanticExpressionAST outExpression {
    <relation_factor_ggs3> !?ioDeclarations ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $&$
      let leftOperand = outExpression
      <relation_factor_ggs3> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @andExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&&$
      let leftOperand = outExpression
      <relation_factor_ggs3> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @andShortExpressionAST {!operatorLocation !leftOperand !rightOperand}
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <expression_and> ?!@galgasDeclarationAST ioDeclarations
                        !@semanticExpressionAST outExpression {
    <relation_factor> !?ioDeclarations ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $&$
      let leftOperand = outExpression
      <relation_factor> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @andExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&&$
      let leftOperand = outExpression
      <relation_factor> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @andShortExpressionAST {!operatorLocation !leftOperand !rightOperand}
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! SEMANTICS
//--------------------------------------------------------------------------------------------------

override method @andExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

//································································································

override method @andExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
//--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
//--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
//--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features contains !.infixAndOperator]
    !"&"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
//--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.operator_and
    !rightExpression
  }
}

//--------------------------------------------------------------------------------------------------

override method @andShortExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

//································································································

override method @andShortExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
//--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
//--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
//--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features contains !.infixAndOperator]
    !"&"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
//--- Generate expression
  outExpression = @andShortExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !rightExpression}
}

//--------------------------------------------------------------------------------------------------
//! CODE GENERATION
//--------------------------------------------------------------------------------------------------

class @andShortExpressionForGeneration : @semanticExpressionForGeneration {
  public let @semanticExpressionForGeneration mLeftExpression
  public let @semanticExpressionForGeneration mRightExpression
}

//································································································

override method @andShortExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
//--- Left operand
  [self.mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string leftTemporaryOperand
  ]
//--- Generate Comparison
  let testVar = "test_" + [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex += 1
  ioGeneratedCode += "GGS_bool " + testVar + " = " + leftTemporaryOperand + " ;\n"
  ioGeneratedCode += "if (GalgasBool::boolTrue == " + testVar + ".boolEnum ()) {\n"
//--- Right operand
  [!?ioGeneratedCode incIndentation !2]
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string rightTemporaryOperand
  ]
  ioGeneratedCode += testVar + " = " + rightTemporaryOperand + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  outCppExpression = testVar
}

//--------------------------------------------------------------------------------------------------
