#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  semantics definitions for semantics component
#
#  Copyright (C) 2009, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWithInputArgument
  ?!@setterMap ioSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?argTypeName:let @string inInputArgumentTypeName
  ?argName:let @string inInputArgumentName
  ?setterName:let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inInputArgumentTypeName ?let argumentTypeIndex]
  var @formalParameterSignature argList = §[]
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgumentName
  [!?ioSetterMap insertOrReplace
    !@lstring {!inSetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !""
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWithOutputAndInputArguments
  ?!@setterMap ioSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?outputArgTypeName:let @string inOutputArgumentTypeName
  ?outputArgName:let @string inOutputArgumentName
  ?inputArgTypeName:let @string inInputArgumentTypeName
  ?inputArgName:let @string inInputArgumentName
  ?setterName:let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inOutputArgumentTypeName ?let outputArgumentTypeIndex]
  [!?ioUnifiedTypeMap makeEntryFromString !inInputArgumentTypeName ?let inputArgumentTypeIndex]
  var @formalParameterSignature argList = §[]
  argList += !["" nowhere] !outputArgumentTypeIndex !.argumentOut !inOutputArgumentName
  argList += !["" nowhere] !inputArgumentTypeIndex !.argumentConstantIn !inInputArgumentName
  [!?ioSetterMap insertOrReplace
    !@lstring {!inSetterName !@location.here}
    !@methodKind.definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier.isBasic
    !""
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWith2InputArguments
  ?!@setterMap ioSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?arg1TypeName:let @string inInputArgument1TypeName
  ?arg1Name:let @string inInputArgument1Name
  ?arg2TypeName:let @string inInputArgument2TypeName
  ?arg2Name:let @string inInputArgument2Name
  ?setterName:let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  var @formalParameterSignature argList = §[]
  [!?ioUnifiedTypeMap makeEntryFromString !inInputArgument1TypeName ?@unifiedTypeMapEntry argumentTypeIndex]
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument1Name
  [!?ioUnifiedTypeMap makeEntryFromString !inInputArgument2TypeName ?argumentTypeIndex]
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument2Name
  [!?ioSetterMap insertOrReplace
    !@lstring {!inSetterName !.here}
    !@methodKind. definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier.isBasic
    !""
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWithoutArgument
  ?!@setterMap ioSetterMap
  ?let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [!?ioSetterMap insertOrReplace
    !@lstring {!inSetterName !@location.here}
    !@methodKind. definedAsMember
    !@formalParameterSignature §[]
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !""
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

