#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  semantics definitions for semantics component                                                                       *
#                                           
#  Copyright (C) 2009, ..., 2015 Pierre Molinaro.                                                                      *
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWithInputArgument
  ?!@setterMap ioSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?argTypeName:let @string inInputArgumentTypeName
  ?argName:let @string inInputArgumentName
  ?setterName:let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inInputArgumentTypeName ?let argumentTypeIndex]
  var @formalParameterSignature argList = {}
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgumentName
  [!?ioSetterMap insertOrReplace
    !@lstring.new {!inSetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !""
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWithOutputAndInputArguments
  ?!@setterMap ioSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?outputArgTypeName:let @string inOutputArgumentTypeName
  ?outputArgName:let @string inOutputArgumentName
  ?inputArgTypeName:let @string inInputArgumentTypeName
  ?inputArgName:let @string inInputArgumentName
  ?setterName:let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inOutputArgumentTypeName ?let outputArgumentTypeIndex]
  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inInputArgumentTypeName ?let inputArgumentTypeIndex]
  var @formalParameterSignature argList = {}
  argList += !["" nowhere] !outputArgumentTypeIndex !.argumentOut !inOutputArgumentName
  argList += !["" nowhere] !inputArgumentTypeIndex !.argumentConstantIn !inInputArgumentName
  [!?ioSetterMap insertOrReplace
    !@lstring.new {!inSetterName !@location.here}
    !@methodKind.definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier.isBasic
    !""
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#proc enterModifierWithOutputArgument
#  ?!@setterMap ioSetterMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  ?let @string inOutputArgumentTypeName
#  ?let @string inOutputArgumentName
#  ?setterName:let @string inSetterName
#  ?compilerArg:let @bool inHasCompilerArgument
#{
#  @unifiedTypeMap-entry argumentTypeIndex
#  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inOutputArgumentTypeName ?argumentTypeIndex]
#  var argList =@formalParameterSignature {}
#  argList += !["" nowhere] !argumentTypeIndex !@formalArgumentPassingModeAST. argumentOut !inOutputArgumentName
#  [!?ioSetterMap insertOrReplace
#    !@lstring.new {!inSetterName !@location.here}
#    !@methodKind. definedAsMember
#    !argList
#    !inHasCompilerArgument
#    !@methodQualifier. isBasic
#    !""
#  ]
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWith2InputArguments
  ?!@setterMap ioSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?arg1TypeName:let @string inInputArgument1TypeName
  ?arg1Name:let @string inInputArgument1Name
  ?arg2TypeName:let @string inInputArgument2TypeName
  ?arg2Name:let @string inInputArgument2Name
  ?setterName:let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  var @formalParameterSignature argList = {}
  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inInputArgument1TypeName ?@unifiedTypeMap-entry argumentTypeIndex]
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument1Name
  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inInputArgument2TypeName ?argumentTypeIndex]
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument2Name
  [!?ioSetterMap insertOrReplace
    !@lstring.new {!inSetterName !.here}
    !@methodKind. definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier.isBasic
    !""
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#proc enterModifierWith3InputArguments
#  ?!@setterMap ioSetterMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  ?arg1TypeName:let @string inInputArgument1TypeName
#  ?arg1Name:let @string inInputArgument1Name
#  ?arg2TypeName:let @string inInputArgument2TypeName
#  ?arg2Name:let @string inInputArgument2Name
#  ?arg3TypeName:let @string inInputArgument3TypeName
#  ?arg3Name:let @string inInputArgument3Name
#  ?setterName:let @string inSetterName
#  ?compilerArg:let @bool inHasCompilerArgument
#{
#  @formalParameterSignature argList = {}
#  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inInputArgument1TypeName ?@unifiedTypeMap-entry argumentTypeIndex]
#  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument1Name
#  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inInputArgument2TypeName ?argumentTypeIndex]
#  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument2Name
#  [@unifiedTypeMap-entry makeEntryFromString !?ioUnifiedTypeMap !inInputArgument3TypeName ?argumentTypeIndex]
#  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument3Name
#  [!?ioSetterMap insertOrReplace
#    !@lstring.new {!inSetterName !.here}
#    !@methodKind. definedAsMember
#    !argList
#    !inHasCompilerArgument
#    !@methodQualifier.isBasic
#    !""
#  ]
#}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterModifierWithoutArgument
  ?!@setterMap ioSetterMap
  ?let @string inSetterName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [!?ioSetterMap insertOrReplace
    !@lstring.new {!inSetterName !@location.here}
    !@methodKind. definedAsMember
    !@formalParameterSignature {}
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !""
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @stringPredefinedTypeAST getSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outSetterMap
{
  outSetterMap = {}
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint" 
    !argName:"inCapacity"
    !setterName:"setCapacity"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inAmount"
    !setterName:"incIndentation"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inAmount"
    !setterName:"decIndentation"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inColumnIndex"
    !setterName:"appendSpacesUntilColumn"
    !compilerArg:true
  )
  enterModifierWith2InputArguments (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !arg1TypeName:"char"
    !arg1Name:"inChar"
    !arg2TypeName:"uint"
    !arg2Name:"inIndex"
    !setterName:"setCharacterAtIndex"
    !compilerArg:true
  )
  enterModifierWith2InputArguments (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !arg1TypeName:"char"
    !arg1Name:"inChar"
    !arg2TypeName:"uint"
    !arg2Name:"inIndex"
    !setterName:"insertCharacterAtIndex"
    !compilerArg:true
  )
  enterModifierWithOutputAndInputArguments (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !outputArgTypeName:"char"
    !outputArgName:"outChar"
    !inputArgTypeName:"uint"
    !inputArgName:"inIndex"
    !setterName:"removeCharacterAtIndex"
    !compilerArg:true
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @dataPredefinedTypeAST getSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outSetterMap {
  outSetterMap = {}
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendByte"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendShortBE"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendShortLE"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendUIntBE"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendUIntLE"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"string"
    !argName:"inValue"
    !setterName:"appendUTF8String"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"data"
    !argName:"inValue"
    !setterName:"appendData"
    !compilerArg:false
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperPredefinedTypeAST getSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outSetterMap
{
  outSetterMap = {}
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"string"
    !argName:"inDirectoryPath"
    !setterName:"setCurrentDirectory"
    !compilerArg:true
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @bigintPredefinedTypeAST getSetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outSetterMap
{
  outSetterMap = {}
  enterModifierWith2InputArguments (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !arg1TypeName:"bool"
    !arg1Name:"inBit"
    !arg2TypeName:"uint"
    !arg2Name:"inIndex"
    !setterName:"setBitAtIndex"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outSetterMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inIndex"
    !setterName:"complementBitAtIndex"
    !compilerArg:false
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @timerPredefinedTypeAST getSetterMap
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@setterMap outSetterMap
{
  outSetterMap = {}
  enterModifierWithoutArgument (
    !?outSetterMap
    !"stop"
    !compilerArg:false
  )
  enterModifierWithoutArgument (
    !?outSetterMap
    !"resume"
    !compilerArg:false
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

