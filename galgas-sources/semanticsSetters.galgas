#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  semantics definitions for semantics component                                                                       *
#                                                                                                                      *
#  Copyright (C) 2009, ..., 2015 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc enterModifierWithInputArgument
  ?!@setterMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?argTypeName:let @string inInputArgumentTypeName
  ?argName:let @string inInputArgumentName
  ?setterName:let @string inModifierName
  ?compilerArg:let @bool inHasCompilerArgument
{
  @unifiedTypeMap-proxy argumentTypeIndex
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgumentTypeName ?argumentTypeIndex]
  var argList =@formalParameterSignature.emptyList{}
  argList += !["" nowhere] !argumentTypeIndex !@formalArgumentPassingModeAST. argumentConstantIn !inInputArgumentName
  [!?ioModifierMap insertOrReplace
    !@lstring.new {!inModifierName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !""
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

#proc enterModifierWithOutputArgument
#  ?!@setterMap ioModifierMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  ?let @string inOutputArgumentTypeName
#  ?let @string inOutputArgumentName
#  ?setterName:let @string inModifierName
#  ?compilerArg:let @bool inHasCompilerArgument
#{
#  @unifiedTypeMap-proxy argumentTypeIndex
#  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inOutputArgumentTypeName ?argumentTypeIndex]
#  var argList =@formalParameterSignature.emptyList{}
#  argList += !["" nowhere] !argumentTypeIndex !@formalArgumentPassingModeAST. argumentOut !inOutputArgumentName
#  [!?ioModifierMap insertOrReplace
#    !@lstring.new {!inModifierName !@location.here}
#    !@methodKind. definedAsMember
#    !argList
#    !inHasCompilerArgument
#    !@methodQualifier. isBasic
#    !""
#  ]
#}

#----------------------------------------------------------------------------------------------------------------------*

proc enterModifierWith2InputArguments
  ?!@setterMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?arg1TypeName:let @string inInputArgument1TypeName
  ?arg1Name:let @string inInputArgument1Name
  ?arg2TypeName:let @string inInputArgument2TypeName
  ?arg2Name:let @string inInputArgument2Name
  ?setterName:let @string inModifierName
  ?compilerArg:let @bool inHasCompilerArgument
{
  @formalParameterSignature argList = {}
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgument1TypeName ?@unifiedTypeMap-proxy argumentTypeIndex]
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument1Name
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgument2TypeName ?argumentTypeIndex]
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument2Name
  [!?ioModifierMap insertOrReplace
    !@lstring.new {!inModifierName !.here}
    !@methodKind. definedAsMember
    !argList
    !inHasCompilerArgument
    !@methodQualifier.isBasic
    !""
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

#proc enterModifierWith3InputArguments
#  ?!@setterMap ioModifierMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  ?arg1TypeName:let @string inInputArgument1TypeName
#  ?arg1Name:let @string inInputArgument1Name
#  ?arg2TypeName:let @string inInputArgument2TypeName
#  ?arg2Name:let @string inInputArgument2Name
#  ?arg3TypeName:let @string inInputArgument3TypeName
#  ?arg3Name:let @string inInputArgument3Name
#  ?setterName:let @string inModifierName
#  ?compilerArg:let @bool inHasCompilerArgument
#{
#  @formalParameterSignature argList = {}
#  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgument1TypeName ?@unifiedTypeMap-proxy argumentTypeIndex]
#  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument1Name
#  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgument2TypeName ?argumentTypeIndex]
#  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument2Name
#  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgument3TypeName ?argumentTypeIndex]
#  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inInputArgument3Name
#  [!?ioModifierMap insertOrReplace
#    !@lstring.new {!inModifierName !.here}
#    !@methodKind. definedAsMember
#    !argList
#    !inHasCompilerArgument
#    !@methodQualifier.isBasic
#    !""
#  ]
#}

#----------------------------------------------------------------------------------------------------------------------*

proc enterModifierWithoutArgument
  ?!@setterMap ioModifierMap
  ?let @string inModifierName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [!?ioModifierMap insertOrReplace
    !@lstring.new {!inModifierName !@location.here}
    !@methodKind. definedAsMember
    !@formalParameterSignature. emptyList
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !""
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @stringPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outModifierMap
{
  outModifierMap = {}
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint" 
    !argName:"inCapacity"
    !setterName:"setCapacity"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inAmount"
    !setterName:"incIndentation"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inAmount"
    !setterName:"decIndentation"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inColumnIndex"
    !setterName:"appendSpacesUntilColumn"
    !compilerArg:true
  )
  enterModifierWith2InputArguments (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !arg1TypeName:"char"
    !arg1Name:"inChar"
    !arg2TypeName:"uint"
    !arg2Name:"inIndex"
    !setterName:"setCharacterAtIndex"
    !compilerArg:true
  )
}

#----------------------------------------------------------------------------------------------------------------------*

override method @dataPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outModifierMap {
  outModifierMap = {}
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendByte"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendShortBE"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendShortLE"
    !compilerArg:true
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendUIntBE"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inValue"
    !setterName:"appendUIntLE"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"string"
    !argName:"inValue"
    !setterName:"appendUTF8String"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"data"
    !argName:"inValue"
    !setterName:"appendData"
    !compilerArg:false
  )
}

#----------------------------------------------------------------------------------------------------------------------*

override method @filewrapperPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outModifierMap
{
  outModifierMap = {}
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"string"
    !argName:"inDirectoryPath"
    !setterName:"setCurrentDirectory"
    !compilerArg:true
  )
}

#----------------------------------------------------------------------------------------------------------------------*

override method @bigintPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@setterMap outModifierMap
{
  outModifierMap = {}
  enterModifierWith2InputArguments (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !arg1TypeName:"bool"
    !arg1Name:"inBit"
    !arg2TypeName:"uint"
    !arg2Name:"inIndex"
    !setterName:"setBitAtIndex"
    !compilerArg:false
  )
  enterModifierWithInputArgument (
    !?outModifierMap
    !?ioUnifiedTypeMap
    !argTypeName:"uint"
    !argName:"inIndex"
    !setterName:"complementBitAtIndex"
    !compilerArg:false
  )
}

#----------------------------------------------------------------------------------------------------------------------*

override method @timerPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@setterMap outModifierMap
{
  outModifierMap = {}
  enterModifierWithoutArgument (
    !?outModifierMap
    !"stop"
    !compilerArg:false
  )
  enterModifierWithoutArgument (
    !?outModifierMap
    !"resume"
    !compilerArg:false
  )
}

#----------------------------------------------------------------------------------------------------------------------*

