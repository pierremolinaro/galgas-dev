#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  //······························································································

  rule <factor_ggs3> ?!@galgasDeclarationAST ioDeclarations
                     !@semanticExpressionAST outExpression {
    <primary_ggs3> !?ioDeclarations ?outExpression
    repeat
    while 
      var expressionList = @actualOutputArgumentList ()
      $§[$
      repeat
        select
          $!selector:$ ?let selector
          <expression_ggs3> !?ioDeclarations ?let expression
          expressionList += !selector !expression !.here
        or
          $!$
          let selector = ["" here]
          <expression_ggs3> !?ioDeclarations ?let expression
          expressionList += !selector !expression !.here
        or
          let selector = ["" here]
          <expression_ggs3> !?ioDeclarations ?let expression
          expressionList += !selector !expression !.here
        end
      while
        $,$
      end
      outExpression = @subscriptReadAccessExpressionAST {
        !outExpression
        !expressionList
        !.here
      }
      $]$
    while
      $.$
      $identifier$ ?let structFieldName
      outExpression = @structPropertyAccessExpressionAST (
        structFieldName.location,
        outExpression,
        structFieldName
      )
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  //······························································································

  rule <factor> ?!@galgasDeclarationAST ioDeclarations
                !@semanticExpressionAST outExpression {
    <primary> !?ioDeclarations ?outExpression
    repeat
    while 
      $[$
      <non_empty_output_expression_list>
        !?ioDeclarations
        ?let @actualOutputArgumentList expressionList
      outExpression = @subscriptReadAccessExpressionAST {
        !outExpression
        !expressionList
        !.here
      }
      $]$
    while
      $.$
      $identifier$ ?let structFieldName
      select
        outExpression = @structPropertyAccessExpressionAST {
          !structFieldName.location
          !outExpression
          !structFieldName
        }
      or //--- Getter call ?
        let getterName = structFieldName
        let startLocation = @location.next
        $($
        <output_expression_list> !?ioDeclarations ?let @actualOutputArgumentList expressionList
        let endLocation = @location.here
        $)$
        outExpression = @getterCallExpressionAST {
          !errorOnGetterCallInsteadOfPropertyRead: true
          !outExpression
          !getterName
          !expressionList
          ![startLocation union !endLocation]
        }
      end
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#!   Property Access
//————————————————————————————————————————————————————————————————————————————————————————————————

class @structPropertyAccessExpressionAST : @semanticExpressionAST {
  private let @location operatorLocation
  private let @semanticExpressionAST mExpression
  private let @lstring propertyName

  //······························································································

  override method enterExpressionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
  }

  //······························································································

  override method analyzeSemanticExpression
                                  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
                                  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                  ?inferenceType: let @unifiedTypeMapEntry unused inType
                                  ?let @analysisContext inAnalysisContext
                                  ?!@unifiedTypeMap ioTypeMap
                                  ?!@localVarManager ioVariableMap
                                  !@semanticExpressionForGeneration outExpression {
  //--- Expression analysis
    [self.mExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: .null
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?let @semanticExpressionForGeneration expression
    ]
  //--- Check field access availability
    let @unifiedTypeMapEntry expressionType = expression.mResultType
    let propertyMap = [expressionType definition].propertyMap
    if let prop = propertyMap §[self.propertyName] then
#      let typeKind = [expressionType definition].typeKind
#      if (not [typeKind structType]) & (not [typeKind isClassType]) then
#        error self.propertyName: "the '.' operator requires the receiver to be a struct or a class"
#      end
      if expression is @selfInExpressionForGeneration then
        [!?ioVariableMap searchForReadAccess 
          !@("self." + self.propertyName, self.propertyName)
          ?3*
        ]
      end
      [prop.mAccessControl checkGetAccess !inAnalysisContext.selfAvailability !self.propertyName]
    //--- Generate expression
      outExpression = @propertyAccessExpressionForGeneration {
        !prop.mPropertyType
        !self.operatorLocation
        !expression
        !self.propertyName.string
      }
    else
      let getterMap = [expressionType definition].getterMap
      if let theGetter = getterMap §[self.propertyName] then
        if [theGetter.mArgumentTypeList count] != 0 then
          error self.propertyName
          : "for being called as a property read, the getter should have no formal argument (has "
          + [theGetter.mArgumentTypeList count] + ")"
          : outExpression
        else
          outExpression = @getterCallExpressionForGeneration {
            !theGetter.mReturnedType
            !self.propertyName.location
            !theGetter.mKind
            !expression
            !@()
            !if theGetter.mGetterNameThatObsoletesInvokationName == "" then self.propertyName.string else theGetter.mGetterNameThatObsoletesInvokationName end
            !@()
            !theGetter.mHasCompilerArgument
          }
        end
      else
        var s = "undefined property, undefined getter"
        for property in propertyMap do
          s += "\n  -- property: " + property.lkey
        end
        for aGetter in getterMap do
         if [aGetter.mArgumentTypeList count] == 0 then
           s += "\n  -- getter: " + aGetter.lkey
         end
        end
        error self.propertyName : s : outExpression
      end
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @propertyAccessExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration expression
  private let @string structFieldName

  //······························································································

  override method generateExpression ?!@string ioGeneratedCode
                                      ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      !@string outCppExpression {
    [self.mResultType addHeaderFileName !?ioInclusionSet]
  //--- Operand
    [self.expression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string operand
    ]
  //--- Generate
    outCppExpression = operand + ".readProperty_" + [self.structFieldName identifierRepresentation] + " ()"
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#!   Subscript read Access
//————————————————————————————————————————————————————————————————————————————————————————————————

class @subscriptReadAccessExpressionAST : @semanticExpressionAST {
  private let @semanticExpressionAST mExpression
  private let @actualOutputArgumentList actualArgumentList
  private let @location endOfArgsLocation

  //······························································································

  override method enterExpressionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    for expression in self.actualArgumentList do
      [expression.mExpression enterExpressionInSemanticContext !?ioTypeMap]
    end
  }

  //······························································································

  override method analyzeSemanticExpression
                                  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
                                  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                  ?inferenceType: let @unifiedTypeMapEntry unused inType
                                  ?let @analysisContext inAnalysisContext
                                  ?!@unifiedTypeMap ioTypeMap
                                  ?!@localVarManager ioVariableMap
                                  !@semanticExpressionForGeneration outExpression {
  //--- Receiver analysis
    [self.mExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: .null
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?let @semanticExpressionForGeneration expression
    ]
    let @unifiedTypeMapEntry expressionType = expression.mResultType
  //--- subscript invocation signature
    let invocationSignature = [self.actualArgumentList subscriptSignature]
  //--- Check subscript availability
    let subscriptMap = [expressionType definition].readSubscriptMap
    if let aSubscript = subscriptMap §[invocationSignature] then
    //--- Check effective argument list
      var semanticExpressionListForGeneration = @semanticExpressionListForGeneration ()
      for formalArg in aSubscript.argumentTypeList, actualArg in self.actualArgumentList do
        [actualArg.mExpression analyzeSemanticExpression
          !usefulnessCallerEntityName: inUsefulnessCallerEntityName
          !?ioUsefulEntitiesGraph
          !inferenceType: formalArg.mFormalArgumentType
          !inAnalysisContext
          !?ioTypeMap
          !?ioVariableMap
          ?@semanticExpressionForGeneration expression
        ]
        checkAssignmentTypeWithImplicitGetterCall (
          !formalArg.mFormalArgumentType
          !expression.mResultType
          !actualArg.mEndOfExpressionLocation
          !?expression
        )
        if formalArg.mFormalSelector.string != actualArg.mActualSelector.string then
          let @string s = "!" + if formalArg.mFormalSelector.string != ""
            then formalArg.mFormalSelector.string + ":"
            else ""
          end
          error actualArg.mActualSelector : "the selector should be '" + s + "'"
          fixit { replace s }
        end
        semanticExpressionListForGeneration += !expression
      end 
    //--- Generate expression
      outExpression = @subscriptReadAccessExpressionForGeneration (
        aSubscript.valueType,
        self.endOfArgsLocation,
        expression,
        invocationSignature,
        semanticExpressionListForGeneration
      )
    else # Unknown subscript signature
      error self.endOfArgsLocation : "unknown subscript signature" : outExpression
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @subscriptReadAccessExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration expression
  private let @string subscriptInvocationName
  private let @semanticExpressionListForGeneration actualExpressionList

  //······························································································

  override method generateExpression ?!@string ioGeneratedCode
                                      ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      !@string outCppExpression {
    [self.mResultType addHeaderFileName !?ioInclusionSet]
  //--- Operand
    [self.expression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string operand
    ]
  //--- subscript arments
    var [@string] subscriptArgumentList = @()
    for actualArg in self.actualExpressionList do
      [actualArg.mExpression generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let @string actualArgOperand
      ]
      [!?subscriptArgumentList append !actualArgOperand]
    end
  //--- Generate
    outCppExpression = operand + ".readSubscript_" + [self.subscriptInvocationName identifierRepresentation]
    outCppExpression += " ("
    for operand in subscriptArgumentList do
      outCppExpression += operand + ", "
    end
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    outCppExpression += compilerCppName () + " COMMA_HERE)"
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
