//--------------------------------------------------------------------------------------------------
//
//  Extensions
//
//  Copyright (C) 2007, ..., 2023 Pierre Molinaro.
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//
//        M U L T I - M E T H O D   L I S T M A P
//
//--------------------------------------------------------------------------------------------------

//listmap @genericExtensionMethodListMap (@lstringlist)

//----------------------------------------------------------------------------------------------

dict @genericExtensionMethodListMapDictionary : @string {
  public var @lstringlist mList
}

//----------------------------------------------------------------------------------------------

struct @genericExtensionMethodListMap {
  private(set) var @genericExtensionMethodListMapDictionary dictionary = @()

  //·····························································································

  setter insertKey  ?let @string inKey
                    ?let @lstring inValue {
    if [self.dictionary hasKey !inKey] then
      [self.dictionary searchKey !inKey ?var aList]
      [!?aList append !inValue]
      self.dictionary += !inKey !aList
    else
      self.dictionary += !inKey !@[@(inValue)]
    end
  }

  //·····························································································

  getter listForKey ?let @string inKey -> @lstringlist {
    if [self.dictionary hasKey !inKey] then
      [self.dictionary searchKey !inKey ?result]
   else
      result = @()
    end
  }

  //·····························································································

}

//--------------------------------------------------------------------------------------------------
//
//  B U I L D    M U L T I - M E T H O D S    L I S M A P S
//
//--------------------------------------------------------------------------------------------------

method @semanticDeclarationAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
}

//--------------------------------------------------------------------------------------------------
//
//    D E S C E N D A N T    C L A S S    L I S T M A P
//
//--------------------------------------------------------------------------------------------------

list @unifiedTypeMapEntryList %equatable {
  public var @unifiedTypeMapEntry mEntry
}

//----------------------------------------------------------------------------------------------

dict @descendantClassListMapDictionary : @string {
  public var @unifiedTypeMapEntryList typeList
}

//----------------------------------------------------------------------------------------------

struct @descendantClassListMap {
  private(set) var @descendantClassListMapDictionary dictionary = @()

  //·····························································································

  setter insertKey  ?let @string inKey
                    ?let @unifiedTypeMapEntry inType {
    if [self.dictionary hasKey !inKey] then
      [self.dictionary searchKey !inKey ?var aList]
      [!?aList append !inType]
      self.dictionary += !inKey !aList
    else
      self.dictionary += !inKey !@[@(inType)]
    end
  }

  //·····························································································

  getter listForKey ?let @string inKey -> @unifiedTypeMapEntryList {
    if [self.dictionary hasKey !inKey] then
      [self.dictionary searchKey !inKey ?result]
   else
      result = @()
    end
  }

  //·····························································································

}

//--------------------------------------------------------------------------------------------------
//
//  E X T E N S I O N    M E T H O D    M A P
//
// Used for checking a extension-method is defined once for a type
//--------------------------------------------------------------------------------------------------

map @extensionMethodMapForGlobalCheckings {
  insert insertKey error message "the '%K' extension method is already declared in %L"
}

//--------------------------------------------------------------------------------------------------
//
//  E X T E N S I O N    S E T T E R    M A P
//
// Used for checking a extension-setter is defined once for a type
//--------------------------------------------------------------------------------------------------

map @extensionSetterMapForGlobalCheckings {
  insert insertKey error message "the '%K' extension setter is already declared in %L"
}

//--------------------------------------------------------------------------------------------------
//
//  E X T E N S I O N    G E T T E R    M A P
//
// Used for checking a extension-method is defined once for a type
//--------------------------------------------------------------------------------------------------

map @extensionGetterMapForGlobalCheckings {
  insert insertKey error message "the '%K' extension getter is already declared in %L"
}

//--------------------------------------------------------------------------------------------------

proc checkextensionSetterDefinitionForClass
  ?let @string inClassNameForErrorSignaling
  ?let @string inClassName
  ?let @lstring inAbstractExtensionSetterName
  ?let @descendantClassListMap inDescendantClassListMap
  ?let @genericExtensionMethodListMap inOverridingExtensionMethodListMap
  ?let @unifiedTypeMap inUnifiedTypeMap
{
  let @unifiedTypeMapEntryList descendantClasses = [inDescendantClassListMap listForKey !inClassName]
  for (mType) in descendantClasses do
    let @lstring descendantClassName = [mType definition].typeName
    let @lstringlist overridingMethods = [inOverridingExtensionMethodListMap listForKey !descendantClassName.string]
    var @bool found = false
    for (mValue) in overridingMethods while not found do
      found = inAbstractExtensionSetterName.string == mValue.string
    end
    if not found then
      if not [mType definition].isConcrete then
        checkextensionSetterDefinitionForClass (
          !inClassNameForErrorSignaling
          !descendantClassName.string
          !inAbstractExtensionSetterName
          !inDescendantClassListMap
          !inOverridingExtensionMethodListMap
          !inUnifiedTypeMap
        )
      else
        error inAbstractExtensionSetterName: "an abstract extension method '" + inAbstractExtensionSetterName + "' is defined for abstract class '@"
        + inClassNameForErrorSignaling
        + "', but concrete descendant class '@" + descendantClassName + "' does not implement this method"
      end
    end
  end
}

//--------------------------------------------------------------------------------------------------

proc checkExtensionMethodDefinitionForClass
  ?let @string inClassNameForErrorSignaling
  ?let @string inClassName
  ?let @lstring inAbstractExtensionMethodName
  ?let @descendantClassListMap inDescendantClassListMap
  ?let @genericExtensionMethodListMap inOverridingExtensionMethodListMap
  ?let @unifiedTypeMap inUnifiedTypeMap
{
  let @unifiedTypeMapEntryList descendantClasses = [inDescendantClassListMap listForKey !inClassName]
  for (mType) in descendantClasses do
    let @lstring descendantClassName = [mType definition].typeName
    let @lstringlist overridingMethods = [inOverridingExtensionMethodListMap listForKey !descendantClassName.string]
    var @bool found = false
    for (mValue) in overridingMethods while not found do
      found = inAbstractExtensionMethodName.string == mValue.string
    end
    if not found then
      if not [mType definition].isConcrete then
        checkExtensionMethodDefinitionForClass (
          !inClassNameForErrorSignaling
          !descendantClassName.string
          !inAbstractExtensionMethodName
          !inDescendantClassListMap
          !inOverridingExtensionMethodListMap
          !inUnifiedTypeMap
        )
      else
        error inAbstractExtensionMethodName: "an abstract extension method '" + inAbstractExtensionMethodName + "' is defined for abstract class '@"
        + inClassNameForErrorSignaling
        + "', but concrete descendant class '@" + descendantClassName + "' does not implement this method"
      end
    end
  end
}

//--------------------------------------------------------------------------------------------------

proc checkExtensionGetterDefinitionForClass
  ?let @string inClassNameForErrorSignaling
  ?let @string inClassName
  ?let @lstring inAbstractExtensionGetterName
  ?let @descendantClassListMap inDescendantClassListMap
  ?let @genericExtensionMethodListMap inOverridingExtensionGetterListMap
  ?let @unifiedTypeMap inUnifiedTypeMap
{
  let @unifiedTypeMapEntryList descendantClasses = [inDescendantClassListMap listForKey !inClassName]
  for (mType) in descendantClasses do
    let @lstring descendantClassName = [mType definition].typeName
    let @lstringlist overridingReaders = [inOverridingExtensionGetterListMap listForKey !descendantClassName.string]
    var @bool found = false
    for (mValue) in overridingReaders while not found do
      found = inAbstractExtensionGetterName.string == mValue.string
    end
    if not found then
      if not [mType definition].isConcrete then
        checkExtensionGetterDefinitionForClass (
          !inClassNameForErrorSignaling
          !descendantClassName.string
          !inAbstractExtensionGetterName
          !inDescendantClassListMap
          !inOverridingExtensionGetterListMap
          !inUnifiedTypeMap
        )
      else
        error inAbstractExtensionGetterName: "an abstract extension getter '" + inAbstractExtensionGetterName + "' is defined for abstract class '@"
        + inClassNameForErrorSignaling
        + "', but concrete descendant class '@" + descendantClassName + "' does not implement this getter"
      end
    end
  end
}

//--------------------------------------------------------------------------------------------------

proc performGalgas3ProjectGlobalCheckings
  ?!@unifiedTypeMap ioTypeMap
  ?let @semanticDeclarationListAST inSemanticDeclarationList
{
  if @application.verboseOutput then
    println (!"*** Perform global checkings")
  end
//----- Build descendant type list map
// For every type, a list of its directed descendants is associated
  var @descendantClassListMap descendantClassListMap = @()
  for (lkey element) in ioTypeMap do
     let superType = [element definition].superType
     if not [superType isNull] then
       [!?descendantClassListMap insertKey
         ![superType definition].typeName.string
         ![ioTypeMap typeMapEntryForLKey !lkey]
       ]
     end
  end
//--- Build Extension method listmaps
  var @genericExtensionMethodListMap abstractExtensionMethodListMap = @()
  var @genericExtensionMethodListMap extensionMethodListMap = @()
  var @genericExtensionMethodListMap overridingExtensionMethodListMap = @()
  var @genericExtensionMethodListMap overridingAbstractExtensionMethodListMap = @()
  var @genericExtensionMethodListMap abstractExtensionGetterListMap = @()
  var @genericExtensionMethodListMap extensionReaderListMap = @()
  var @genericExtensionMethodListMap overridingExtensionGetterListMap = @()
  var @genericExtensionMethodListMap overridingAbstractExtensionGetterListMap = @()
  var @genericExtensionMethodListMap abstractExtensionSetterListMap = @()
  var @genericExtensionMethodListMap extensionSetterListMap = @()
  var @genericExtensionMethodListMap overridingExtensionSetterListMap = @()
  var @genericExtensionMethodListMap overridingAbstractExtensionSetterListMap = @()
  for (mSemanticDeclaration) in inSemanticDeclarationList do
    [mSemanticDeclaration buildExtensionListMaps
      !?abstractExtensionSetterListMap
      !?extensionSetterListMap
      !?overridingExtensionSetterListMap
      !?overridingAbstractExtensionSetterListMap
      !?abstractExtensionMethodListMap
      !?extensionMethodListMap
      !?overridingExtensionMethodListMap
      !?overridingAbstractExtensionMethodListMap
      !?abstractExtensionGetterListMap
      !?extensionReaderListMap
      !?overridingExtensionGetterListMap
      !?overridingAbstractExtensionGetterListMap
    ]
  end
//----- Check Extension
  if @uint.errorCount == 0 then
  //--- A given abstract extension setter is defined only once for a class
    for (* mList) in abstractExtensionSetterListMap.dictionary do
      var @extensionSetterMapForGlobalCheckings extensionSetterMap = @()
      for (mValue) in mList do
        [!?extensionSetterMap insertKey !mValue]
      end
    end
  //--- A given base extension setter is defined only once for a class
    for (* mList) in extensionSetterListMap.dictionary do
      var @extensionSetterMapForGlobalCheckings extensionSetterMap = @()
      for (mValue) in mList do
        [!?extensionSetterMap insertKey !mValue]
      end
    end
  //--- A given overriding extension setter is defined only once for a class
    for (* mList) in overridingExtensionSetterListMap.dictionary do
      var @extensionSetterMapForGlobalCheckings extensionSetterMap = @()
      for (mValue) in mList do
        [!?extensionSetterMap insertKey !mValue]
      end
    end
  //--- A given overriding abstract extension setter is defined only once for a class
    for (* mList) in overridingAbstractExtensionMethodListMap.dictionary do
      var @extensionSetterMapForGlobalCheckings extensionSetterMap = @()
      for (mValue) in mList do
        [!?extensionSetterMap insertKey !mValue]
      end
    end
  //----- Check that for every abstract extension setter, an overridden extension setter defined in an concrete subclass
    for (key mList) in abstractExtensionSetterListMap.dictionary do
      for (mValue) in mList do
        checkextensionSetterDefinitionForClass (
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingExtensionSetterListMap
          !ioTypeMap
        )
      end
    end
  //----- Check that for every overriding abstract extension setter, an overridden extension setter defined in an concrete subclass
    for (key mList) in overridingAbstractExtensionSetterListMap.dictionary do
      for (mValue) in mList do
        checkextensionSetterDefinitionForClass (
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingExtensionSetterListMap
          !ioTypeMap
        )
      end
    end
  //--- A given abstract extension method is defined only once for a class
    for (* mList) in abstractExtensionMethodListMap.dictionary do
      var @extensionMethodMapForGlobalCheckings extensionMethodMap = @()
      for (mValue) in mList do
        [!?extensionMethodMap insertKey !mValue]
      end
    end
  //--- A given base extension method is defined only once for a class
    for (* mList) in extensionMethodListMap.dictionary do
      var @extensionMethodMapForGlobalCheckings extensionMethodMap = @()
      for (mValue) in mList do
        [!?extensionMethodMap insertKey !mValue]
      end
    end
  //--- A given overriding extension method is defined only once for a class
    for (* mList) in overridingExtensionMethodListMap.dictionary do
      var @extensionMethodMapForGlobalCheckings extensionMethodMap = @()
      for (mValue) in mList do
        [!?extensionMethodMap insertKey !mValue]
      end
    end
  //--- A given overriding abstract extension method is defined only once for a class
    for (* mList) in overridingAbstractExtensionMethodListMap.dictionary do
      var @extensionMethodMapForGlobalCheckings extensionMethodMap = @()
      for (mValue) in mList do
        [!?extensionMethodMap insertKey !mValue]
      end
    end
  //----- Check that for every abstract extension method, an overridden extension method defined in an concrete subclass
    for (key mList) in abstractExtensionMethodListMap.dictionary do
      for (mValue) in mList do
        checkExtensionMethodDefinitionForClass (
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingExtensionMethodListMap
          !ioTypeMap
        )
      end
    end
  //----- Check that for every abstract extension method, an overridden extension method defined in an concrete subclass
    for (key mList) in overridingAbstractExtensionMethodListMap.dictionary do
      for (mValue) in mList do
        checkExtensionMethodDefinitionForClass (
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingExtensionMethodListMap
          !ioTypeMap
        )
      end
    end
  //----- Check Extension getters
////--- Check that for every abstract extension getter, an overridden extension getter defined in an concrete subclass
  //--- A given abstract extension getter is defined only once for a class
    for (* mList) in abstractExtensionGetterListMap.dictionary do
      var @extensionGetterMapForGlobalCheckings ExtensionGetterMap = @()
      for (mValue) in mList do
        [!?ExtensionGetterMap insertKey !mValue]
      end
    end
  //--- A given base extension getter is defined only once for a class
    for (* mList) in extensionReaderListMap.dictionary do
      var @extensionGetterMapForGlobalCheckings ExtensionGetterMap = @()
      for (mValue) in mList do
        [!?ExtensionGetterMap insertKey !mValue]
      end
    end
  //--- A given overriding extension getter is defined only once for a class
    for (* mList) in overridingExtensionGetterListMap.dictionary do
      var @extensionGetterMapForGlobalCheckings ExtensionGetterMap = @()
      for (mValue) in mList do
        [!?ExtensionGetterMap insertKey !mValue]
      end
    end
  //--- Check every abstract extension getter is implemented by every inherited concrete type
    for (key mList) in abstractExtensionGetterListMap.dictionary do
      for (mValue) in mList do
        checkExtensionGetterDefinitionForClass (
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingExtensionGetterListMap
          !ioTypeMap
        )
      end
    end
  //--- Check every abstract extension getter is implemented by every inherited concrete type
    for (key mList) in overridingAbstractExtensionGetterListMap.dictionary do
      for (mValue) in mList do
        checkExtensionGetterDefinitionForClass (
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingExtensionGetterListMap
          !ioTypeMap
        )
      end
    end
  end
}

//--------------------------------------------------------------------------------------------------

