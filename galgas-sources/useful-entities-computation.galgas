#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Computation of useful entities
#
#  Copyright (C) 2016, ..., 2016 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

graph @usefulEntitiesGraph (@lstringlist) {
  insert addNode error message "the '%K' entity is already declared at %L"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

map @uselessEntityLocationMap {
  public let @location mLocation
  insert insertKey error message "--- %K INTERNAL ERROR ---"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc checkUsefulEntities
  ?let @usefulEntitiesGraph inUsefulEntitiesGraph
  ?let @lstringlist inRootEntities
  ?let @string unused inProductDirectory
{
  if [option galgas_cli_options.checkEntityUsefulness value], @uint.errorCount == 0 then
  #--- Undefined nodes
    let undefinedNodeList = [inUsefulEntitiesGraph undefinedNodeKeyList]
    if [undefinedNodeList count] > 0 then
      var s = "usefulness computation, undefined nodes:"
      for (name) in undefinedNodeList do
        s += "\n  - " + name
      end
      error .nowhere : s
    else
    #--- No undefined node, compute usefull entities
      let usefullEntityList = [inUsefulEntitiesGraph accessibleNodesFrom !inRootEntities !{}]
      let usefullEntitySet = @stringset.setWithLStringList {!usefullEntityList}
      let allEntitySet = @stringset.setWithStringList {![inUsefulEntitiesGraph keyList]}
      let unusedEntities = allEntitySet - usefullEntitySet
      var @uselessEntityLocationMap uselessEntityLocationMap = {}
      for (unusedEntity) in unusedEntities do
        let l = [inUsefulEntitiesGraph locationForKey !unusedEntity]
        if l == .nowhere then
          warning .nowhere : "unused entity, '" + unusedEntity
            + "' (due to option --" + [option galgas_cli_options.checkEntityUsefulness string] + ")"
        elsif not [uselessEntityLocationMap hasKey ![l startLocationString]] then
          [!?uselessEntityLocationMap insertKey ![[l startLocationString] nowhere] !l]
        end
      end
      for (* loc) in uselessEntityLocationMap do
        warning loc : "unused entity, due to option --" + [option galgas_cli_options.checkEntityUsefulness string] + ")"
      end
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func getterNameForUsefulEntitiesGraph ?let @string inTypeName ?let @lstring inGetterName -> @lstring {
  result = .new {!"getter @" + inTypeName + " " + inGetterName !inGetterName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func setterNameForUsefulEntitiesGraph ?let @string inTypeName ?let @lstring inSetterName -> @lstring {
  result = .new {!"setter @" + inTypeName + " " + inSetterName !inSetterName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func methodNameForUsefulEntitiesGraph ?let @string inTypeName ?let @lstring inMethodName -> @lstring {
  result = .new {!"method @" + inTypeName + " " + inMethodName !inMethodName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func initializerNameForUsefulEntitiesGraph ?let @lstring inTypeName ?let @formalInputParameterListAST inParameterList -> @lstring {
  result = .new {!"@" + inTypeName + " " + [inParameterList keyRepresentation] !inTypeName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func lexiqueNameForUsefulEntitiesGraph ?let @lstring inLexiqueName -> @lstring {
  result = .new {!"lexique " + inLexiqueName !inLexiqueName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func grammarNameForUsefulEntitiesGraph ?let @lstring inGrammarName -> @lstring {
  result = .new {!"grammar " + inGrammarName !inGrammarName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func syntaxNameForUsefulEntitiesGraph ?let @lstring inSyntaxName -> @lstring {
  result = .new {!"syntax " + inSyntaxName !inSyntaxName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func optionNameForUsefulEntitiesGraph ?let @lstring inOptionName -> @lstring {
  result = .new {!"option " + inOptionName !inOptionName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func filewrapperNameForUsefulEntitiesGraph ?let @lstring inFilewrapperName -> @lstring {
  result = .new {!"filewrapper " + inFilewrapperName !inFilewrapperName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func filewrapperTemplateNameForUsefulEntitiesGraph ?let @lstring inFilewrapperName  ?let @lstring inTemplateName
-> @lstring {
  result = .new {!"filewrapper template " + inFilewrapperName + "." + inTemplateName !inTemplateName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func functionNameForUsefulEntitiesGraph ?let @lstring inFunctionName -> @lstring {
  result = .new {!"function " + inFunctionName !inFunctionName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func procedureNameForUsefulEntitiesGraph ?let @lstring inProcName -> @lstring {
  result = .new {!"procedure " + inProcName !inProcName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func typeNameForUsefulEntitiesGraph ?let @lstring inTypeName -> @lstring {
  result = .new {!"type @" + inTypeName !inTypeName.location}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func afterNameForUsefulEntitiesGraph ?let @location inLocation -> @lstring {
  result = .new {!"after" !inLocation}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func beforeNameForUsefulEntitiesGraph ?let @location inLocation -> @lstring {
  result = .new {!"before" !inLocation}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

func rootRuleNameForUsefulEntitiesGraph ?let @lstring inFileExtension -> @lstring {
  result = .new {!"rule ." + inFileExtension !inFileExtension}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
