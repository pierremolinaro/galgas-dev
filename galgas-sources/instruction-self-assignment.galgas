#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @selfAssignmentInstructionAST : @semanticInstructionAST {
  public var @semanticExpressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction>
    !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $=$
    <expression> ?let @semanticExpressionAST sourceExpression
    outInstruction = @selfAssignmentInstructionAST.new {
      !instructionLocation
      !sourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfAssignmentInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @selfAssignmentInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
#--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext.mutableSelfType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Analyze "self", as receiver expression
  if [inAnalysisContext.nonMutableSelfType isNull] then
    error self.mInstructionLocation: "'self' cannot be used in this context"
  elsif [inAnalysisContext.mutableSelfType isNull] then
    error self.mInstructionLocation: "'self' object is not mutable"
  elsif [[inAnalysisContext.mutableSelfType mTypeKindEnum] isClassType] then
    error self.mInstructionLocation: "'self' assignment is not allowed for class instances"
  end
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!inAnalysisContext.mutableSelfType !expression.mResultType !self.mInstructionLocation !?expression)
#--- Generate instruction
  ioInstructionListForGeneration += !@assignmentInstructionForGeneration.new {
    !inAnalysisContext.mutableSelfType
    !inAnalysisContext.mSelfObjectCppName
    !inAnalysisContext.mSelfObjectCppName
    !["" nowhere]
    !expression
    !self.mInstructionLocation
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
