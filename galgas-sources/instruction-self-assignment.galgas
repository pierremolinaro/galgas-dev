#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @selfAssignmentInstructionAST : @semanticInstructionAST {
  private let @semanticExpressionAST mSourceExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3>  ?!@galgasDeclarationAST ioDeclarations
                                    !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $=$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @selfAssignmentInstructionAST.new {
      !instructionLocation
      !sourceExpression
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $=$
    <expression> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @selfAssignmentInstructionAST.new {
      !instructionLocation
      !sourceExpression
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfAssignmentInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfAssignmentInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
  if let [inAnalysisContext.selfType available ?type: let selfType ?selfMutability: let selfMutability] then
    if not [selfMutability selfIsMutable] then
      error self.mInstructionLocation : "'self' not mutable in this context"
    end
  #--- Analyze source expression
    [self.mSourceExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: selfType
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?@semanticExpressionForGeneration expression
    ]
  #--- Check assignment type compatibility
    checkAssignmentTypeWithImplicitGetterCall (!selfType !expression.mResultType !self.mInstructionLocation !?expression)
  #--- Generate instruction
    ioInstructionListForGeneration += !@assignmentInstructionForGeneration.new {
      !selfType
      !inAnalysisContext.selfObjectCppName
      !inAnalysisContext.selfObjectCppName
      !["" nowhere]
      !expression
      !self.mInstructionLocation
    }
  else
    error self.mInstructionLocation : "'self' not available in this context"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
