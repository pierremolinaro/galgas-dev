#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @selfAssignmentInstructionAST : @semanticInstructionAST {
  private let @semanticExpressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·················································································································

  rule <semantic_instruction_ggs3>
    !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $=$
    <expression_ggs3> ?let @semanticExpressionAST sourceExpression
    outInstruction = @selfAssignmentInstructionAST.new {
      !instructionLocation
      !sourceExpression
    }
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·················································································································

  rule <semantic_instruction> ?!@galgasDeclarationAST unused ioDeclarations
                              ?!@stringset unused ioUserImplicitDeclaredTypeSet
                              !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $=$
    <expression> ?let @semanticExpressionAST sourceExpression
    outInstruction = @selfAssignmentInstructionAST.new {
      !instructionLocation
      !sourceExpression
    }
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfAssignmentInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @selfAssignmentInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
  if let [inAnalysisContext.selfType available ?type: let selfType ?mutable: let selfIsMutable ?mutableproperties: *] then
    if not selfIsMutable then
      error self.mInstructionLocation : "'self' not mutable in this context"
    end
  #--- Analyze source expression
    [self.mSourceExpression analyzeSemanticExpression
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: selfType
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?@semanticExpressionForGeneration expression
    ]
  #--- Check assignment type compatibility
    checkAssignmentTypeWithImplicitGetterCall (!selfType !expression.mResultType !self.mInstructionLocation !?expression)
  #--- Generate instruction
    ioInstructionListForGeneration += !@assignmentInstructionForGeneration.new {
      !selfType
      !inAnalysisContext.mSelfObjectCppName
      !inAnalysisContext.mSelfObjectCppName
      !["" nowhere]
      !expression
      !self.mInstructionLocation
    }
  else
    error self.mInstructionLocation : "'self' not available in this context"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
