#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @nonterminalCallInstruction : @syntaxInstructionAST {
  @lstring mNonterminalName
  @lstring mLabelName # No label : empty string
  @actualParameterListAST mActualParameterList
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationResult
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3SyntaxComponentSyntax {

  #·····················································································································

  rule <syntax_instruction> !@syntaxInstructionAST outInstruction {
    @lstring mLabelName # No label : empty string
    select
      mLabelName = @lstring.new {!"" !@location.here}
    or
      $parse$
      mLabelName = @lstring.new {!"parse" !@location.here}
    or
      $parse$
      $identifier$ ? mLabelName
    end
    $<non_terminal>$ ?let @lstring mNonterminalName indexing ruleReference
    <actual_parameter_list> ?let @actualParameterListAST mActualParameterList
  #--- Get syntax directed translation result string
    @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationResult
    select
      grammarInstructionSyntaxDirectedTranslationResult = @grammarInstructionSyntaxDirectedTranslationResultNone.new
    or
      $:>$
      <syntax_directed_translation_result> ?grammarInstructionSyntaxDirectedTranslationResult
    end
    outInstruction = @nonterminalCallInstruction.new {
      ![mNonterminalName location]
      !mNonterminalName
      !mLabelName
      !mActualParameterList
      !grammarInstructionSyntaxDirectedTranslationResult
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! TRANSFORM
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @nonterminalCallInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis unused ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  @uint nonTerminalSymbolIndex
  [inNonTerminalSymbolMap searchKey !self.mNonterminalName ?nonTerminalSymbolIndex ?*]
  ioSyntaxInstructionList += !@nonTerminalInstructionForGrammarAnalysis.new {
    !self.mInstructionLocation
    !self.mNonterminalName
    !nonTerminalSymbolIndex
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @nonterminalCallInstruction analyzeSyntaxInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?let @bool inHasTranslateFeature
  ?let @terminalMap unused inTerminalMap
  ?let @string unused inLexiqueName
  ?let @nonterminalMap inNonterminalMap
  ?let @string unused inComponentName
  ?let @stringset unused inIndexNameSet
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap
  ?!@uint unused ioSelectMethodCount
{
  [inNonterminalMap searchKey !self.mNonterminalName ?let @nonterminalLabelMap labelMap]
  @formalParameterSignature signature
  if [self.mLabelName string] == "parse" then
    signature = {}
  else
    [labelMap searchKey !self.mLabelName ?* ?signature ?*]
  end
#--- call arguments
  analyzeRoutineArguments (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !self.mNonterminalName
    !"'<" + self.mNonterminalName + ">' nonterminal declaration"
    !signature
    !self.mActualParameterList
    !?ioVariableMap
    !?ioInstructionListForGeneration
    ?let @actualParameterListForGeneration actualParameterListForGeneration
  )
#--- Check syntax directed translation destination variable
  [self.mGrammarInstructionSyntaxDirectedTranslationResult analyzeSDT
    !inAnalysisContext
    !inHasTranslateFeature
    !?ioVariableMap
  ]
#--- Generate instructions
  ioInstructionListForGeneration += !@nonterminalInstructionForGeneration.new {
    !self.mInstructionLocation
    ![self.mNonterminalName string]
    ![self.mLabelName string]
    !actualParameterListForGeneration
    !self.mGrammarInstructionSyntaxDirectedTranslationResult
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @nonterminalInstructionForGeneration : @syntaxInstructionForGeneration {
  @string mNonterminalName
  @string mLabelName
  @actualParameterListForGeneration mActualParameterList
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationResult
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @nonterminalInstructionForGeneration appendSyntaxSignature
  ?let @string inPosfix
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
{
  ioInstructionListForGeneration += !@nonterminalInstructionForGeneration.new {
    !self.mInstructionLocation
    !self.mNonterminalName
    !inPosfix
    !@actualParameterListForGeneration.emptyList
    !@grammarInstructionSyntaxDirectedTranslationResultNone.new
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! COMPARE SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @nonterminalInstructionForGeneration compareInstructionSyntaxSignature
  ?let @semanticInstructionForGeneration inTestedInstruction
  ->@bool outOk {
  cast inTestedInstruction
  case >= @nonterminalInstructionForGeneration si :
    outOk = self.mNonterminalName == [si mNonterminalName]
    if not outOk then
      error [si mInstructionLocation]
      :"syntax signature error; the expected syntax instruction here is the '<" + self.mNonterminalName + ">' nonterminal invocation"
    end
  case >= @syntaxInstructionForGeneration si :
    error [si mInstructionLocation]
      :"syntax signature error; the expected syntax instruction here is the '<" + self.mNonterminalName + ">' nonterminal invocation"
    outOk = false
  else
    error self.mInstructionLocation : "internal error"
    outOk = false
  end
  if not outOk then
    error self.mInstructionLocation
    :"reference syntax instruction is here"
  end  
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @nonterminalInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
#--- Parameters
  var parameterCppNameList =@stringlist {}
  var jokerParametersToReleaseList =@stringlist {}
  var inputVariableList =@stringlist {}
  for () in self.mActualParameterList do
    [mActualParameter generateActualParameter
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioGeneratedCode
      !?jokerParametersToReleaseList
      !?inputVariableList
      !?ioUnusedVariableCppNameSet
      ?let @string parameterCppName
    ]
    parameterCppNameList += !parameterCppName
  end
#--- Generate method call
  let sdtResultVarName = "syntaxDirectedTranslationResult_" + [self.mInstructionLocation locationIndex]
  if inGenerateSyntaxDirectedTranslationString then
    ioGeneratedCode += "C_String " + sdtResultVarName + " ;\n"
  end
  ioGeneratedCode += "nt_" + [self.mNonterminalName identifierRepresentation] + "_" + [self.mLabelName identifierRepresentation] + " ("
  for () in parameterCppNameList do
    ioGeneratedCode += mValue + ", "
  end
  if inGenerateSyntaxDirectedTranslationString then
    ioGeneratedCode += sdtResultVarName + ", "
  end
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  ioGeneratedCode +=  compilerCppName () + ") ;\n"
  [self.mGrammarInstructionSyntaxDirectedTranslationResult generateCode
    !inGenerateSyntaxDirectedTranslationString
    !sdtResultVarName
    !?ioUnusedVariableCppNameSet
    !?ioGeneratedCode
  ]
#--- Release temporary variables
  for () in jokerParametersToReleaseList do
    ioGeneratedCode += mValue + ".drop () ; // Release temporary input variables (joker in source)\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
