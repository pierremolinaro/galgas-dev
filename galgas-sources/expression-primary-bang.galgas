//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------
//!   AST
//------------------------------------------------------------------------------------------------

class @bangExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mExpression
}

//------------------------------------------------------------------------------------------------
//! SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension galgas3ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <primary_ggs3> ?!@galgasDeclarationAST ioDeclarations
                      !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    <primary_ggs3> !?ioDeclarations ?outExpression
    $.$
    $bang$
    outExpression = @bangExpressionAST {!operatorLocation !outExpression}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <primary> ?!@galgasDeclarationAST ioDeclarations
                 !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    <primary> !?ioDeclarations ?outExpression
    $!$
    outExpression = @bangExpressionAST {!operatorLocation !outExpression}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------
//! SEMANTICS
//------------------------------------------------------------------------------------------------

override method @bangExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

//································································································

override method @bangExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
//--- Expression analysis
  [self.mExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
//--- Check operator availability
  let @unifiedTypeMapEntry type = expression.mResultType
  if let weakRef = [[type definition].typeKind getWeakReferenceType] then
    outExpression = @bangExpressionForGeneration {
      !weakRef.referenceType
      !self.mOperatorLocation
      !expression
      ![type definition].typeName.string
    }
  else
    error self.mOperatorLocation
    : "operand type is '@" + [type definition].typeName.string + "' and does not support the 'bang' operator"
    : outExpression
  end
}

//------------------------------------------------------------------------------------------------
//! CODE GENERATION
//------------------------------------------------------------------------------------------------

class @bangExpressionForGeneration : @semanticExpressionForGeneration {
  public let @semanticExpressionForGeneration mExpression
  public let @string mReceiverTypeName
}

//································································································

override method @bangExpressionForGeneration generateExpression ?!@string ioGeneratedCode
                                                                ?!@stringset ioInclusionSet
                                                                ?!@uint ioTemporaryVariableIndex
                                                                ?!@stringset ioUnusedVariableCppNameSet
                                                                !@string outCppExpression {
  [self.mExpression.mResultType addHeaderFileName !?ioInclusionSet]
//--- Operand
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let operand
  ]
//--- Generate
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression = operand + ".bang_" + [self.mReceiverTypeName identifierRepresentation]
  outCppExpression += " (" + compilerCppName () + [self.mLocation commaSourceFile] + ")"
}

//------------------------------------------------------------------------------------------------
