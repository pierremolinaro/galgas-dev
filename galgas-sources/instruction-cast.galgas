#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @castInstructionBranchListAST {
  public let @lstring mTypeName
  public let @lstring mConstantVarName # Empty string if no constant var
  public let @semanticInstructionListAST mInstructionList
  public let @dynamicTypeComparisonKind mTypeComparisonKind
  public let @location mEndOfInstructions
}

#······················································································································

refclass @structuredCastInstructionAST : @semanticInstructionAST {
  private let @semanticExpressionAST mCastExpression
  private let @castInstructionBranchListAST mCastInstructionBranchList
  private let @semanticInstructionListAST mElseInstructionList
  private let @location mEndOfCastInstruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·················································································································

  rule <cast_instruction_branch> ?!@castInstructionBranchListAST ioCastInstructionBranchList {
    $case$
    let @dynamicTypeComparisonKind kind
    select
      $==$
      kind = .equal
    or
      $>=$
      kind = .inherited
    or
      $>$
      kind = .strictlyInherited
    end
    $@type$ ?let mTypeName
    let @lstring mConstantVarName # Empty string if no constant var
    select
      $identifier$ ?mConstantVarName
    or
      mConstantVarName = @lstring.new {!"" !@location.here}
    end
    $:$
    <semantic_instruction_list_ggs3> ?let @semanticInstructionListAST mCastBranchInstructionList
    ioCastInstructionBranchList +=
      !mTypeName
      !mConstantVarName
      !mCastBranchInstructionList
      !kind
      !@location.here
  }

  #·················································································································

  rule <cast_else_or_default> !@semanticInstructionListAST outElseOrDefault {
    select
      outElseOrDefault = {}
    or
      $else$
      <semantic_instruction_list_ggs3> ? outElseOrDefault
    or
      $default$
      let instructionLocation = @location.here
      $error$
      <expression_ggs3> ?let @semanticExpressionAST errorLocationExpression
      outElseOrDefault = {}
      outElseOrDefault += !@errorInstructionAST.new {
        !instructionLocation
        !errorLocationExpression
        !@literalStringExpressionAST.new {!instructionLocation!{!"cast instruction run-time error"}}
        !{}
        !{}
      }
    end
  }

  #·················································································································

  rule <semantic_instruction_ggs3> !@semanticInstructionAST outInstruction {
    $cast$
    if [option galgas_cli_options.errorOldStylePropertyDeclaration value] then
      warning .here : "This instruction is not handled in GALGAS 4"
    end
    let instructionLocation = @location.here
    <expression_ggs3> ?let @semanticExpressionAST expression
    var mCastInstructionBranchList = @castInstructionBranchListAST {}
    repeat
      <cast_instruction_branch> !? mCastInstructionBranchList
    while
    end
    <cast_else_or_default> ?let @semanticInstructionListAST mElseOrDefault
    $end$
    let endOfInstructionLocation = @location.here
    outInstruction = @structuredCastInstructionAST.new {
      !instructionLocation
      !expression
      !mCastInstructionBranchList
      !mElseOrDefault
      !endOfInstructionLocation}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structuredCastInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mCastExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mElseInstructionList enterInstructionListInSemanticContext !?ioTypeMap]
  for (* * mInstructionList * *) in self.mCastInstructionBranchList do
    [mInstructionList enterInstructionListInSemanticContext !?ioTypeMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structuredCastInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap {
#--- Expression
  [self.mCastExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let castExpression
  ]
#--- Begin override for analyze loop instruction list
  [!?ioVariableMap openOverrideForSelectBlock]
#--- Branches
  var castBranchList = @castInstructionBranchListForGeneration {}
  for (mTypeName mConstantVarName mInstructionList mTypeComparisonKind mEndOfInstructions) in self.mCastInstructionBranchList do
  #--- Get named type
    let type = [ioTypeMap typeMapEntryForLKey !mTypeName]
  #--- Check named type is a descendant of receiver type
    var @unifiedTypeMapEntry t = type
    var @bool found = t == castExpression.mResultType
    loop ([ioTypeMap count] + 1)
    while (not found) & not [[t definition].mSuperType isNull] do
      t = [t definition].mSuperType
      found = t == castExpression.mResultType
    end
    if not found then
      error mTypeName
      :"the '@" + mTypeName + "' is not a descendant of the '@" + [castExpression.mResultType definition].mTypeName.string + "' type of the cast expression"
    end
  #--- Declare a local constant ?
    let @string localConstantName
    var localConstantList = @localConstantList {}
    if [mConstantVarName count] > 0 then
      localConstantName = "cast_" + [mConstantVarName.location startLocationIndex] + "_" + mConstantVarName
      localConstantList +=
        !type
        !mConstantVarName
        !true # Warns if unused
        !localConstantName
    else
      localConstantName = "" # No constant
    end
  #--- Analyze instruction list
    analyzeSemanticInstructionList (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !localConstantList: localConstantList
      !localInitializedVariableListWarnsIfNotMutated: {}
      !localInitializedVariableListNoWarnsIfNotMutated: {}
      !mInstructionList
      !mEndOfInstructions
      !?ioVariableMap
      ?let instructionList
    )
    castBranchList += !mTypeComparisonKind !type !localConstantName !instructionList
  end
#--- else or default branch
  analyzeSemanticInstructionList (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !localConstantList: {}
    !localInitializedVariableListWarnsIfNotMutated: {}
    !localInitializedVariableListNoWarnsIfNotMutated: {}
    !self.mElseInstructionList
    !self.mEndOfCastInstruction
    !?ioVariableMap
    ?let else_instructionList
  )
#--- End override
  [!?ioVariableMap closeOverride !self.mEndOfCastInstruction]
#--- Generate instruction
  ioInstructionListForGeneration += !@structuredCastInstructionForGeneration.new {
    !castExpression
    !castBranchList
    !else_instructionList}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @castInstructionBranchListForGeneration {
  public let @dynamicTypeComparisonKind mTypeComparisonKind
  public let @unifiedTypeMapEntry mType
  public let @string mCastedVarCppName # Empty string if no var
  public let @semanticInstructionListForGeneration mInstructionList
}

#······················································································································

refclass @structuredCastInstructionForGeneration : @semanticInstructionForGeneration {
  private let @semanticExpressionForGeneration mExpression
  private let @castInstructionBranchListForGeneration mCastBranchList
  private let @semanticInstructionListForGeneration mElseInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structuredCastInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
#--- Cast expression
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string castCppVarName
  ]
#---
  ioGeneratedCode += "if (" + castCppVarName + ".isValid ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
  for (mTypeComparisonKind mType mCastedVarCppName mInstructionList) in self.mCastBranchList do
   [mType addHeaderFileName !?ioInclusionSet]
    switch mTypeComparisonKind
    case equal :
      ioGeneratedCode += "if (" + castCppVarName
      + ".dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_"
      + [mType identifierRepresentation] + ") {\n"
    case inherited :
      ioGeneratedCode += "if (nullptr != dynamic_cast <const cPtr_"
      + [mType identifierRepresentation]
      + " *> (" + castCppVarName + ".ptr ())) {\n"
    case strictlyInherited :
      ioGeneratedCode += "if ((" + castCppVarName
      + ".dynamicTypeDescriptor () != & kTypeDescriptor_GALGAS_"
      + [mType identifierRepresentation] + ") && (nullptr != dynamic_cast <const cPtr_"
      + [mType identifierRepresentation]
      + " *> (" + castCppVarName + ".ptr ()))) {\n"
    end
    if [mCastedVarCppName count] > 0 then
      ioGeneratedCode +=
        "  GALGAS_" + [mType identifierRepresentation]
      + " " + mCastedVarCppName + " ((cPtr_" + [mType identifierRepresentation]
      + " *) " + castCppVarName + ".ptr ()) ;\n"
    end
    generateInstructionList (
      !?ioInclusionSet
      !mInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !inGenerateSyntaxDirectedTranslationString
      !?ioGeneratedCode
    )
  between ioGeneratedCode += "}else "
  end
#--- 'else' branch
  if [self.mElseInstructionList count] > 0 then
    ioGeneratedCode += "}else{\n"
    generateInstructionList (
      !?ioInclusionSet
      !self.mElseInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !inGenerateSyntaxDirectedTranslationString
      !?ioGeneratedCode
    )
  end
#---
  ioGeneratedCode += "}\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
