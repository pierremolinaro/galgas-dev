#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Grammar component compilation                                                                                       *
#                                                                                                                      *
#  Copyright (C) 2009, ..., 2011 Pierre Molinaro.                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*



#----------------------------------------------------------------------------------------------------------------------*

func transformLabelMap
  ?let @nonTerminalLabelListAST inLabels
  -> @nonterminalSymbolLabelMapForGrammarAnalysis outNonterminalSymbolLabelMapForGrammarAnalysis
{
  outNonterminalSymbolLabelMapForGrammarAnalysis = @nonterminalSymbolLabelMapForGrammarAnalysis. emptyMap
  for () in inLabels do
    var formalParametersList =@signatureForGrammarAnalysis.emptyList{}
    for () in mFormalArgumentList do
      formalParametersList += !mFormalArgumentPassingMode !mFormalArgumentTypeName
    end
    [!?outNonterminalSymbolLabelMapForGrammarAnalysis insertKey
      !mLabelName
      !formalParametersList
    ]
  end
}


#----------------------------------------------------------------------------------------------------------------------*

proc checkLabelMap
  ?let @location inNonTerminalLocation
  ?let @nonTerminalLabelListAST inLabels
  ?let @location inOriginalNonTerminalLocation
  ?let @nonterminalSymbolLabelMapForGrammarAnalysis inNonterminalSymbolLabelMapForGrammarAnalysis {
  var labelStringSet =@stringset.emptySet{}
  for () in inLabels do
    labelStringSet += ![mLabelName string]
    @signatureForGrammarAnalysis formalParametersList
    [inNonterminalSymbolLabelMapForGrammarAnalysis searchKey !mLabelName ?formalParametersList]
    if [mFormalArgumentList length] != [formalParametersList length] then
      error mLabelName: [[mFormalArgumentList length] string]
        + " formal parameter"
        + if [mFormalArgumentList length] > 1 then "s" else "" end
        + " declared here, but declaration at "
        + [[inNonterminalSymbolLabelMapForGrammarAnalysis locationForKey ![mLabelName string]] locationString]
        + " names " + [[formalParametersList length] string] + " parameter"
        + if [formalParametersList length] > 1 then "s" else "" end
    else
      for () in mFormalArgumentList, () in formalParametersList do
        if mFormalArgumentPassingModeForGrammarAnalysis != mFormalArgumentPassingMode then
          error mGalgasTypeNameForGrammarAnalysis :
            " this formal parameter is declared with "
          + [mFormalArgumentPassingModeForGrammarAnalysis formalArgumentString]
          + " passing mode, but declaration at "
          + [[inNonterminalSymbolLabelMapForGrammarAnalysis locationForKey ![mLabelName string]] locationString]
          + " is declared with " + [mFormalArgumentPassingMode formalArgumentString] + " passing mode"
        end
        if [mGalgasTypeNameForGrammarAnalysis string] != [mFormalArgumentTypeName string] then
          error mGalgasTypeNameForGrammarAnalysis :
            " this formal parameter is declared of '@"
          + mGalgasTypeNameForGrammarAnalysis
          + "' type, but declaration at "
          + [[inNonterminalSymbolLabelMapForGrammarAnalysis locationForKey ![mLabelName string]] locationString]
          + " is declared with '@" + mFormalArgumentTypeName + "' type"
        end
      end
    end
  end
#---
  for () in inNonterminalSymbolLabelMapForGrammarAnalysis do
    if not [labelStringSet hasKey ![lkey string]] then
      error inNonTerminalLocation :
        "this non terminal does not declare the '" + lkey + "' label, but declaration at "
          + [inOriginalNonTerminalLocation locationString]
          + " does"
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc handleNonTerminalDeclarations
  ?!@nonTerminalSymbolMapForGrammarAnalysis ioNonTerminalMapForGrammarAnalysis
  ?let @nonterminalDeclarationListAST inNonterminalDeclarationList {
  for () in inNonterminalDeclarationList do
    with [mNonterminalName string] in ioNonTerminalMapForGrammarAnalysis  do
      checkLabelMap (
        ![mNonterminalName location]
        !mLabels
        ![ioNonTerminalMapForGrammarAnalysis locationForKey ![mNonterminalName string]]
        !mNonterminalSymbolParametersMap
      )
    else
      [!?ioNonTerminalMapForGrammarAnalysis insertKey
        !mNonterminalName
        ![ioNonTerminalMapForGrammarAnalysis count]
        !transformLabelMap (!mLabels)
      ]
    end  
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc handleNonTerminalDeclarationsFromRuleList
  ?!@nonTerminalSymbolMapForGrammarAnalysis ioNonTerminalMapForGrammarAnalysis
  ?let @syntaxRuleListAST inRuleList {
  for () in inRuleList do
    var nonTerminalLabelListAST =@nonTerminalLabelListAST.emptyList{}
    for () in mLabelList do
      nonTerminalLabelListAST += 
        !mLabelName
        !mFormalArguments
        !mEndOfArgumentLocation
    end
    with [mNonterminalName string] in ioNonTerminalMapForGrammarAnalysis  do
      checkLabelMap (
        ![mNonterminalName location]
        !nonTerminalLabelListAST
        ![ioNonTerminalMapForGrammarAnalysis locationForKey ![mNonterminalName string]]
        !mNonterminalSymbolParametersMap
      )
    else
      [!?ioNonTerminalMapForGrammarAnalysis insertKey
        !mNonterminalName
        ![ioNonTerminalMapForGrammarAnalysis count]
        !transformLabelMap (!nonTerminalLabelListAST)
      ]
    end  
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                     transformInstructionList                                                                         *
#----------------------------------------------------------------------------------------------------------------------*

abstract method @syntaxInstructionAST transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList

#----------------------------------------------------------------------------------------------------------------------*

override method @semanticInstructionAST transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis unused ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis unused inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis unused ioSyntaxInstructionList {
}

#----------------------------------------------------------------------------------------------------------------------*

proc transformInstructionList
  ?let @syntaxInstructionList inInstructionList
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  for () in inInstructionList do
    [mInstruction transformInstruction
      !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
      !nonTerminalSymbolMap:inNonTerminalSymbolMap
      !?addedTerminalIndex:ioAddedNonTerminalIndex
      !?ioSyntaxInstructionList
   ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

override method @syntaxSendInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis unused ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis unused inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis unused ioSyntaxInstructionList {
}

#----------------------------------------------------------------------------------------------------------------------*

override method @terminalCheckInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis unused inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  @uint terminalSymbolIndex
  with [mTerminalName string] in ioActuallyUsedTerminalSymbolMap  do
    terminalSymbolIndex = mTerminalIndex
  else
    terminalSymbolIndex = [ioActuallyUsedTerminalSymbolMap count]
    [!?ioActuallyUsedTerminalSymbolMap insertKey !mTerminalName !terminalSymbolIndex]
  end
  ioSyntaxInstructionList += !@terminalInstructionForGrammarAnalysis.new {
    !mInstructionLocation
    !mTerminalName
    !terminalSymbolIndex}
}

#----------------------------------------------------------------------------------------------------------------------*

override method @nonterminalCallInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis unused ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  @uint nonTerminalSymbolIndex
  [inNonTerminalSymbolMap searchKey !mNonterminalName ?nonTerminalSymbolIndex ?*]
  ioSyntaxInstructionList += !@nonTerminalInstructionForGrammarAnalysis.new {
    !mInstructionLocation
    !mNonterminalName
    !nonTerminalSymbolIndex}
}

#----------------------------------------------------------------------------------------------------------------------*

override method @repeatInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  let @uint addedNonTerminalIndex = ioAddedNonTerminalIndex
  ioAddedNonTerminalIndex ++

  var repeatedInstructionList =@syntaxInstructionListForGrammarAnalysis.emptyList{}
  transformInstructionList (
    !mRepeatedInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?repeatedInstructionList
  )
  var repeatBranchList =@branchListForGrammarAnalysis.listWithValue{!repeatedInstructionList}

  for () in mRepeatBranchList do
    var syntaxInstructionList =@syntaxInstructionListForGrammarAnalysis.emptyList{}
    transformInstructionList (
      !mSyntaxInstructionList
      !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
      !nonTerminalSymbolMap:inNonTerminalSymbolMap
      !?addedTerminalIndex:ioAddedNonTerminalIndex
      !?syntaxInstructionList
    )
    repeatBranchList += !syntaxInstructionList
  end

  ioSyntaxInstructionList += !@repeatInstructionForGrammarAnalysis.new {
    !mInstructionLocation
    !repeatBranchList
    !addedNonTerminalIndex}
}

#----------------------------------------------------------------------------------------------------------------------*

override method @selectInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  let @uint addedNonTerminalIndex = ioAddedNonTerminalIndex
  ioAddedNonTerminalIndex ++

  var selectBranchList =@branchListForGrammarAnalysis.emptyList{}
  for () in mSelectBranchList do
    var syntaxInstructionList =@syntaxInstructionListForGrammarAnalysis.emptyList{}
    transformInstructionList (
      !mSyntaxInstructionList
      !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
      !nonTerminalSymbolMap:inNonTerminalSymbolMap
      !?addedTerminalIndex:ioAddedNonTerminalIndex
      !?syntaxInstructionList
    )
    selectBranchList += !syntaxInstructionList
  end

  ioSyntaxInstructionList += !@selectInstructionForGrammarAnalysis.new {
    !mInstructionLocation
    !selectBranchList
    !addedNonTerminalIndex}
}

#----------------------------------------------------------------------------------------------------------------------*

override method @parseRewindInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  @syntaxInstructionList syntaxInstructionList
  [mParseRewindBranchList first ?syntaxInstructionList ?*]

  transformInstructionList (
    !syntaxInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?ioSyntaxInstructionList
  )
}

#----------------------------------------------------------------------------------------------------------------------*

override method @parseWhenInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  transformInstructionList (
    !mElseInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?ioSyntaxInstructionList
  )
}

#----------------------------------------------------------------------------------------------------------------------*

override method @parseLoopInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  transformInstructionList (
    !mDoInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?ioSyntaxInstructionList
  )
}

#----------------------------------------------------------------------------------------------------------------------*

proc buildRuleList
  ?let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalMapForGrammarAnalysis
  ?let @lstring inSyntaxComponentName
  ?let @syntaxRuleListAST inRuleList
  ?!@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?!@syntaxComponentListForGrammarAnalysis ioSyntaxComponentListForGrammarAnalysis
  ?!@uint ioAddedNonTerminalCount {
  var productionRulesList =@productionRuleListForGrammarAnalysis.emptyList{}
  for () in inRuleList do
    @uint nonTerminalIndex
    @nonterminalSymbolLabelMapForGrammarAnalysis nonterminalSymbolParametersMap
    [inNonTerminalMapForGrammarAnalysis searchKey !mNonterminalName ?nonTerminalIndex ?nonterminalSymbolParametersMap]
  #--- Retrieve instruction list from first label
    @syntaxInstructionList parsedSyntaxInstructionList [mLabelList first ?* ?* ?* ?parsedSyntaxInstructionList ?*]
  #--- Transform instruction list
    var instructionList =@syntaxInstructionListForGrammarAnalysis.emptyList{}
    transformInstructionList (
      !parsedSyntaxInstructionList
      !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
      !nonTerminalSymbolMap:inNonTerminalMapForGrammarAnalysis
      !?addedTerminalIndex:ioAddedNonTerminalCount
      !?instructionList
    ) 
  #---
    productionRulesList +=
      !mNonterminalName
      !nonTerminalIndex
      !instructionList
      ![productionRulesList length]
  end
  ioSyntaxComponentListForGrammarAnalysis +=
    !productionRulesList
    !inSyntaxComponentName
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    G R A M M A R    H E A D E R    F I L E    G E N E R A T I O N                                                    *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper grammarGenerationTemplate in "../generation_templates/grammar_generation" {
}{
}{
  template grammarZone2Header "grammar-zone2.h.galgasTemplate"
    ?@galgas3GrammarComponentListAST-element GRAMMAR_COMPONENT_ROOT
  template grammarZone2HeaderGalgas3 "grammar-zone2-galgas3.h.galgasTemplate"
    ?@galgas3GrammarComponentListAST-element GRAMMAR_COMPONENT_ROOT
  template grammarZone3Header "grammar-zone3.h.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@galgas3GrammarComponentListAST-element GRAMMAR_COMPONENT_ROOT
    ?@nonTerminalSymbolMapForGrammarAnalysis NON_TERMINAL_MAP
    ?@nonTerminalToAddList ADDED_NON_TERMINAL_LIST
    ?@bool HAS_INDEXING
  template grammarZone3HeaderGalgas3 "grammar-zone3-galgas3.h.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@nonTerminalSymbolMapForGrammarAnalysis NON_TERMINAL_MAP
    ?@nonTerminalToAddList ADDED_NON_TERMINAL_LIST
    ?@bool HAS_INDEXING
    ?@string START_SYMBOL_NAME
    ?@bool HAS_TRANSLATE_FEATURE
    ?@string GRAMMAR_NAME
    ?@lstringlist SYNTAX_COMPONENTS
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#      C O M P I L E    G R A M M A R    C O M P O N E N T                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc parseGrammarComponent
  ?let @lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@galgas3GrammarComponentListAST-element outGrammarComponentRoot {
  let @string basename = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
  with basename in ioParsedComponentStruct.mParsedGrammarComponentMap  do
    outGrammarComponentRoot = mGrammarComponentRoot
  else
    grammar grammarLL1grammar in inSourceFile ?outGrammarComponentRoot
    [!?ioParsedComponentStruct.mParsedGrammarComponentMap insertKey
      !@lstring.new {!basename !@location.here}
      !inSourceFile
      !outGrammarComponentRoot
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Extern routine that performs grammar analysis                                                                      *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

extern proc grammarAnalysisAndGeneration
  ?let @stringset inImplementationFileHeaderSet
  ?let @lstring inGrammarName
  ?let @lstring inGrammarClass
  ?let @uint startSymbolIndex
  ?let @string inLexiqueName
  ?let @terminalSymbolsMapForGrammarAnalysis inTerminalSymbolMap
  ?let @syntaxComponentListForGrammarAnalysis ioSyntaxComponentsList
  ?let @unusedNonTerminalSymbolMapForGrammarAnalysis inUnusedNonTerminalSymbolsForGrammar
  ?let @string inHTMLfilePath
  ?let @nonTerminalSymbolSortedListForGrammarAnalysis inNonTerminalSymbolSortedListForGrammarAnalysis
  ?let @bool inHasIndexing
  ?let @string inSyntaxDirectedTranslationVarName # Empty if not syntax directed translation
  !@string outGrammarCppFile
  !@string outGrammarHTMLHelperContents

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#      C O M P I L E    G R A M M A R    C O M P O N E N T                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileGrammarComponentFromAST
  ?let @lstring inSourceFile
  ?let @string inOutputDirectoryForCppFiles
  ?let @galgas3GrammarComponentListAST-element inGrammarComponentRoot
  ?!@parsedComponentStruct ioParsedComponentStruct {
 let @string outputDirectoryForHTMLFile = [inSourceFile stringByDeletingLastPathComponent]
#---------------------------------------------------------- Check component name
  let grammarComponentName = inGrammarComponentRoot.mGrammarComponentName
  let basename = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
  if [grammarComponentName string] != basename then
    warning grammarComponentName: "GALGAS checks "
      "the component name ('" + [grammarComponentName string]
    + "') against the source file base name ('" + basename + "'): they should be identical"
  end
#---------------------------------------------------------- Parse syntax components
  var actuallyUsedTerminalSymbolMap =@terminalSymbolsMapForGrammarAnalysis.emptyMap{}
  var nonTerminalMapForGrammarAnalysis =@nonTerminalSymbolMapForGrammarAnalysis.emptyMap{}
  @string lexiqueComponentName = "" # Empty string means unknown
  @lstring lexiqueComponentPath = ["" nowhere]
  var syntaxComponentListForGrammarAnalysis =@syntaxComponentListForGrammarAnalysis.emptyList{}
  var nonTerminalToAddList =@nonTerminalToAddList.emptyList{}
  @uint addedNonTerminalCount = 0
  for () in [inGrammarComponentRoot mSyntaxComponents] do
    let @uint addedNonTerminalCountRef = addedNonTerminalCount
    if [mValue pathExtension] != "gSyntax" then
      error mValue: "a syntax component file should have '.gSyntax' path extension"
    else
      @string syntaxComponentName = [[mValue lastPathComponent] stringByDeletingPathExtension]
      @galgas3SyntaxComponentListAST-element syntaxComponentRoot
      if [[ioParsedComponentStruct mParsedSyntaxComponentMap] hasKey !syntaxComponentName] then
        [[ioParsedComponentStruct mParsedSyntaxComponentMap] searchKey !@lstring.new {!syntaxComponentName !@location.here} ?* ?syntaxComponentRoot]
      else
        let @string sourceFilePath = [mValue absolutePathFromPath ![inSourceFile stringByDeletingLastPathComponent]]
        let @lstring lSourceFilePath = @lstring.new {!sourceFilePath ![mValue location]}
        grammar syntaxSLRgrammar in lSourceFilePath ?syntaxComponentRoot
        [!?ioParsedComponentStruct.mParsedSyntaxComponentMap insertKey !@lstring.new {!syntaxComponentName ![mValue location]} !lSourceFilePath !syntaxComponentRoot]
      end
    #--- Check translate feature
      if inGrammarComponentRoot.mHasTranslateFeature & not syntaxComponentRoot.mHasTranslateFeature then
        error syntaxComponentRoot.mSyntaxComponentName : "as '" + inGrammarComponentRoot.mGrammarComponentName + "' grammar declares 'translate' feature, this syntax component should do so"
      elsif syntaxComponentRoot.mHasTranslateFeature & not inGrammarComponentRoot.mHasTranslateFeature then
        error inGrammarComponentRoot.mGrammarComponentName : "as '" + syntaxComponentRoot.mSyntaxComponentName + "' syntax component declares 'translate' feature, this grammar should do so"
      end
    #--- Handle lexique component
      lexiqueComponentPath = [syntaxComponentRoot mImportedLexiqueFilePath]
      let @string currentLexiqueName = [[lexiqueComponentPath lastPathComponent] stringByDeletingPathExtension]
      if lexiqueComponentName == "" then
        lexiqueComponentName = currentLexiqueName
      elsif lexiqueComponentName != currentLexiqueName then
        error mValue : "this syntax component uses '"
          + currentLexiqueName + "' lexique component, but the first syntax component uses the '"
          + lexiqueComponentName + "' lexique component (they should be the same)"
      end
    #--- Handle non terminal declarations
      handleNonTerminalDeclarations (
        !?nonTerminalMapForGrammarAnalysis
        ![syntaxComponentRoot mNonterminalDeclarationList]
      )
    #--- Enter non terminal definition from rule list
      handleNonTerminalDeclarationsFromRuleList (
        !?nonTerminalMapForGrammarAnalysis
        ![syntaxComponentRoot mRuleList]
      )
    #--- Handle syntax rules
      buildRuleList (
        !nonTerminalMapForGrammarAnalysis
        ![syntaxComponentRoot mSyntaxComponentName]
        ![syntaxComponentRoot mRuleList]
        !?actuallyUsedTerminalSymbolMap
        !?syntaxComponentListForGrammarAnalysis
        !?addedNonTerminalCount
      )
      @uint i = 0
      loop( addedNonTerminalCount) while i < (addedNonTerminalCount - addedNonTerminalCountRef) do
        nonTerminalToAddList += !syntaxComponentName !i
        i++
      end
    end
  end
#------------------------ Get lexique component, for knowing if there are "indexing" declaration
  @galgas3LexiqueComponentListAST-element lexiqueComponentAST
  parseLexiqueComponent (
    !@lstring.new {![lexiqueComponentPath absolutePathFromPath ![inSourceFile stringByDeletingLastPathComponent]] ![lexiqueComponentPath location]}
    !?ioParsedComponentStruct
    ?lexiqueComponentAST
  )
  let @bool hasIndexing = not [[lexiqueComponentAST mIndexingDirectory] isNowhere]
  if hasIndexing & not inGrammarComponentRoot.mHasIndexing.bool then
    error inGrammarComponentRoot.mGrammarComponentName : "the grammar does not enable indexing, but the '" + lexiqueComponentAST.mLexiqueComponentName + "' does"
  elsif (not hasIndexing) & inGrammarComponentRoot.mHasIndexing.bool then
    error inGrammarComponentRoot.mHasIndexing : "the grammar enables indexing, but the '" + lexiqueComponentAST.mLexiqueComponentName + "' does not"
  end
#---------------------------------------------------------- Start symbol
#--- Search start symbol in non terminal map
  @nonterminalSymbolLabelMapForGrammarAnalysis startSymbolAltMap
  @uint startSymbolIndex
  [nonTerminalMapForGrammarAnalysis searchKey ![inGrammarComponentRoot mStartSymbolName] ?startSymbolIndex ?startSymbolAltMap]
#--- Check signatures
  checkLabelMap (
    ![[inGrammarComponentRoot mStartSymbolName] location]
    ![inGrammarComponentRoot mStartSymbolLabelList]
    ![nonTerminalMapForGrammarAnalysis locationForKey ![[inGrammarComponentRoot mStartSymbolName] string]]
    !startSymbolAltMap
  )
#---------------------------------------------------------- Unused Non Terminal Symbols
  var unusedNonTerminalSymbolsForGrammar =@unusedNonTerminalSymbolMapForGrammarAnalysis.emptyMap{}
  for () in [inGrammarComponentRoot mUnusedNonterminalList] do
    @uint nonterminalIndex
    [nonTerminalMapForGrammarAnalysis searchKey !mValue ?nonterminalIndex ?*]
    [!?unusedNonTerminalSymbolsForGrammar insertKey !mValue !nonterminalIndex]
  end
#---------------------------------------------------------- Non terminal symbols, sorted by index
  var nonTerminalSymbolSortedListForGrammarAnalysis =@nonTerminalSymbolSortedListForGrammarAnalysis.emptySortedList{}
  for () in nonTerminalMapForGrammarAnalysis do
    nonTerminalSymbolSortedListForGrammarAnalysis += !lkey !mNonTerminalIndex !mNonterminalSymbolParametersMap
  end
#---------------------------------------------------------- Analyze grammar
  let HTMLFilePath = outputDirectoryForHTMLFile + "/" + inGrammarComponentRoot.mGrammarComponentName + ".html"
  grammarAnalysisAndGeneration (
    !@stringset. setWithString {!inGrammarComponentRoot.mGrammarComponentName.string}
    !inGrammarComponentRoot.mGrammarComponentName
    ![inGrammarComponentRoot mGrammarClass]
    !startSymbolIndex
    !lexiqueComponentName
    !actuallyUsedTerminalSymbolMap
    !syntaxComponentListForGrammarAnalysis
    !unusedNonTerminalSymbolsForGrammar
    !HTMLFilePath
    !nonTerminalSymbolSortedListForGrammarAnalysis
    !hasIndexing
    !if inGrammarComponentRoot.mHasTranslateFeature then syntaxDirectedTranslationResultVarName () else "" end
    ?let @string grammarCppFile
    ?let @string grammarHTMLHelperContents
  )
#---------------------------------------------------------- Generate HTML grammer helper file
  if [option galgas_cli_options.outputHTMLgrammarFile value] then
    [grammarHTMLHelperContents writeToFileWhenDifferentContents !HTMLFilePath ?*]
  else
    [@string deleteFileIfExists !HTMLFilePath]
  end
#---------------------------------------------------------- Generate Implementation file
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !inOutputDirectoryForCppFiles
      !inGrammarComponentRoot.mGrammarComponentName.string + ".cpp"
      !"//"
      !"\n\n" # Defaut user zone1
      !grammarCppFile
      !"\n\n" # Defaut user zone2
      !"\n"
    ]
  end
#---------------------------------------------------------- Generate header
  if @uint. errorCount == 0 then
    let zone2 = [filewrapper grammarGenerationTemplate.grammarZone2Header
      !inGrammarComponentRoot
    ]
    let zone3 = [filewrapper grammarGenerationTemplate.grammarZone3Header
      ![lexiqueComponentName identifierRepresentation]
      !inGrammarComponentRoot
      !nonTerminalMapForGrammarAnalysis
      !nonTerminalToAddList
      !hasIndexing
    ]
    [@string generateFileWithPattern
      !inOutputDirectoryForCppFiles
      !inGrammarComponentRoot.mGrammarComponentName.string + ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      !zone2
      !"\n\n" # Defaut user zone2
      !zone3
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileGrammarComponentFromSourceFile
  ?let @lstring inSourceFile
  ?let @string inOutputDirectoryForCppFiles
  ?!@parsedComponentStruct ioParsedComponentStruct {
  parseGrammarComponent ( !inSourceFile !?ioParsedComponentStruct ?let @galgas3GrammarComponentListAST-element grammarComponentRoot )
#----
  compileGrammarComponentFromAST (
    !inSourceFile
    !inOutputDirectoryForCppFiles
    !grammarComponentRoot
    !?ioParsedComponentStruct
  )
}

#----------------------------------------------------------------------------------------------------------------------*

