#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Grammar component compilation                                                                                       *
#                                                                                                                      *
#  Copyright (C) 2009, ..., 2015 Pierre Molinaro.                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

func transformLabelMap
  ?let @nonTerminalLabelListAST inLabels
  -> @nonterminalSymbolLabelMapForGrammarAnalysis outNonterminalSymbolLabelMapForGrammarAnalysis
{
  outNonterminalSymbolLabelMapForGrammarAnalysis = {}
  for () in inLabels do
    @signatureForGrammarAnalysis formalParametersList = {}
    for () in mFormalArgumentList do
      formalParametersList += !mFormalArgumentPassingMode !mFormalArgumentTypeName
    end
    [!?outNonterminalSymbolLabelMapForGrammarAnalysis insertKey
      !mLabelName
      !formalParametersList
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc checkLabelMap
  ?let @location inNonTerminalLocation
  ?let @nonTerminalLabelListAST inLabels
  ?let @location inOriginalNonTerminalLocation
  ?let @nonterminalSymbolLabelMapForGrammarAnalysis inNonterminalSymbolLabelMapForGrammarAnalysis
{
  @stringset labelStringSet = {}
  for () in inLabels do
    labelStringSet += ![mLabelName string]
    @signatureForGrammarAnalysis formalParametersList
    [inNonterminalSymbolLabelMapForGrammarAnalysis searchKey !mLabelName ?formalParametersList]
    if [mFormalArgumentList length] != [formalParametersList length] then
      error mLabelName: [[mFormalArgumentList length] string]
        + " formal parameter"
        + if [mFormalArgumentList length] > 1 then "s" else "" end
        + " declared here, but declaration at "
        + [[inNonterminalSymbolLabelMapForGrammarAnalysis locationForKey ![mLabelName string]] locationString]
        + " names " + [[formalParametersList length] string] + " parameter"
        + if [formalParametersList length] > 1 then "s" else "" end
    else
      for () in mFormalArgumentList, () in formalParametersList do
        if mFormalArgumentPassingModeForGrammarAnalysis != mFormalArgumentPassingMode then
          error mGalgasTypeNameForGrammarAnalysis :
            " this formal parameter is declared with "
          + [mFormalArgumentPassingModeForGrammarAnalysis formalArgumentString]
          + " passing mode, but declaration at "
          + [[inNonterminalSymbolLabelMapForGrammarAnalysis locationForKey ![mLabelName string]] locationString]
          + " is declared with " + [mFormalArgumentPassingMode formalArgumentString] + " passing mode"
        end
        if [mGalgasTypeNameForGrammarAnalysis string] != [mFormalArgumentTypeName string] then
          error mGalgasTypeNameForGrammarAnalysis :
            " this formal parameter is declared of '@"
          + mGalgasTypeNameForGrammarAnalysis
          + "' type, but declaration at "
          + [[inNonterminalSymbolLabelMapForGrammarAnalysis locationForKey ![mLabelName string]] locationString]
          + " is declared with '@" + mFormalArgumentTypeName + "' type"
        end
      end
    end
  end
#---
  for () in inNonterminalSymbolLabelMapForGrammarAnalysis do
    if not [labelStringSet hasKey ![lkey string]] then
      error inNonTerminalLocation :
        "this non terminal does not declare the '" + lkey + "' label, but declaration at "
          + [inOriginalNonTerminalLocation locationString]
          + " does"
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc handleNonTerminalDeclarations
  ?!@nonTerminalSymbolMapForGrammarAnalysis ioNonTerminalMapForGrammarAnalysis
  ?let @nonterminalDeclarationListAST inNonterminalDeclarationList {
  for () in inNonterminalDeclarationList do
    with [mNonterminalName string] in ioNonTerminalMapForGrammarAnalysis  do
      checkLabelMap (
        ![mNonterminalName location]
        !mLabels
        ![ioNonTerminalMapForGrammarAnalysis locationForKey ![mNonterminalName string]]
        !mNonterminalSymbolParametersMap
      )
    else
      [!?ioNonTerminalMapForGrammarAnalysis insertKey
        !mNonterminalName
        ![ioNonTerminalMapForGrammarAnalysis count]
        !transformLabelMap (!mLabels)
      ]
    end  
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc handleNonTerminalDeclarationsFromRuleList
  ?!@nonTerminalSymbolMapForGrammarAnalysis ioNonTerminalMapForGrammarAnalysis
  ?let @syntaxRuleListAST inRuleList {
  for () in inRuleList do
    var nonTerminalLabelListAST =@nonTerminalLabelListAST {}
    for () in mLabelList do
      nonTerminalLabelListAST += 
        !mLabelName
        !mFormalArguments
        !mEndOfArgumentLocation
    end
    with [mNonterminalName string] in ioNonTerminalMapForGrammarAnalysis  do
      checkLabelMap (
        ![mNonterminalName location]
        !nonTerminalLabelListAST
        ![ioNonTerminalMapForGrammarAnalysis locationForKey ![mNonterminalName string]]
        !mNonterminalSymbolParametersMap
      )
    else
      [!?ioNonTerminalMapForGrammarAnalysis insertKey
        !mNonterminalName
        ![ioNonTerminalMapForGrammarAnalysis count]
        !transformLabelMap (!nonTerminalLabelListAST)
      ]
    end  
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                     transformInstructionList                                                                         *
#----------------------------------------------------------------------------------------------------------------------*

abstract method @syntaxInstructionAST transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList

#----------------------------------------------------------------------------------------------------------------------*

override method @semanticInstructionAST transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis unused ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis unused inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis unused ioSyntaxInstructionList {
}

#----------------------------------------------------------------------------------------------------------------------*

proc transformInstructionList
  ?let @syntaxInstructionList inInstructionList
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  for () in inInstructionList do
    [mInstruction transformInstruction
      !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
      !nonTerminalSymbolMap:inNonTerminalSymbolMap
      !?addedTerminalIndex:ioAddedNonTerminalIndex
      !?ioSyntaxInstructionList
   ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc buildRuleList
  ?let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalMapForGrammarAnalysis
  ?let @lstring inSyntaxComponentName
  ?let @syntaxRuleListAST inRuleList
  ?!@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?!@syntaxComponentListForGrammarAnalysis ioSyntaxComponentListForGrammarAnalysis
  ?!@uint ioAddedNonTerminalCount {
  var productionRulesList =@productionRuleListForGrammarAnalysis {}
  for () in inRuleList do
    @uint nonTerminalIndex
    @nonterminalSymbolLabelMapForGrammarAnalysis nonterminalSymbolParametersMap
    [inNonTerminalMapForGrammarAnalysis searchKey !mNonterminalName ?nonTerminalIndex ?nonterminalSymbolParametersMap]
  #--- Retrieve instruction list from first label
    @syntaxInstructionList parsedSyntaxInstructionList [mLabelList first ?* ?* ?* ?parsedSyntaxInstructionList ?*]
  #--- Transform instruction list
    var instructionList =@syntaxInstructionListForGrammarAnalysis {}
    transformInstructionList (
      !parsedSyntaxInstructionList
      !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
      !nonTerminalSymbolMap:inNonTerminalMapForGrammarAnalysis
      !?addedTerminalIndex:ioAddedNonTerminalCount
      !?instructionList
    ) 
  #---
    productionRulesList +=
      !mNonterminalName
      !nonTerminalIndex
      !instructionList
      ![productionRulesList length]
  end
  ioSyntaxComponentListForGrammarAnalysis +=
    !productionRulesList
    !inSyntaxComponentName
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    G R A M M A R    H E A D E R    F I L E    G E N E R A T I O N                                                    *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper grammarGenerationTemplate in "../generation_templates/grammar_generation" {
}{
}{
  template grammarZone3HeaderGalgas3 "grammar-zone3-galgas3.h.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@nonTerminalSymbolMapForGrammarAnalysis NON_TERMINAL_MAP
    ?@nonTerminalToAddList ADDED_NON_TERMINAL_LIST
    ?@bool HAS_INDEXING
    ?@string START_SYMBOL_NAME
    ?@bool HAS_TRANSLATE_FEATURE
    ?@string GRAMMAR_NAME
    ?@lstringlist SYNTAX_COMPONENTS
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   Extern routine that performs grammar analysis                                                                      *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

extern proc grammarAnalysisAndGeneration
  ?let @stringset inImplementationFileHeaderSet
  ?let @lstring inGrammarName
  ?let @lstring inGrammarClass
  ?let @uint startSymbolIndex
  ?let @string inLexiqueName
  ?let @terminalSymbolsMapForGrammarAnalysis inTerminalSymbolMap
  ?let @syntaxComponentListForGrammarAnalysis ioSyntaxComponentsList
  ?let @unusedNonTerminalSymbolMapForGrammarAnalysis inUnusedNonTerminalSymbolsForGrammar
  ?let @string inHTMLfilePath
  ?let @nonTerminalSymbolSortedListForGrammarAnalysis inNonTerminalSymbolSortedListForGrammarAnalysis
  ?let @bool inHasIndexing
  ?let @string inSyntaxDirectedTranslationVarName # Empty if not syntax directed translation
  !@string outGrammarCppFile
  !@string outGrammarHTMLHelperContents

#----------------------------------------------------------------------------------------------------------------------*

