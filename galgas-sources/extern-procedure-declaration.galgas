//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//
//    E X T E R N    R O U T I N E    D E C L A R A T I O N
//
//--------------------------------------------------------------------------------------------------

syntax extension galgas3InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    E X T E R N    R O U T I N E    D E C L A R A T I O N
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $extern$
    $proc$
    var isUsefull = false
    repeat
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let @lstring mActionName indexing routineDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ioDeclarations.mDeclarationList += !@externProcedureDeclarationAST {
      !isPredefined: false // Is not predefined
      !isFilePrivate: false // Is not internal
      !mActionName
      !formalParameterList
      !usefullProcedure: isUsefull
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //    E X T E R N    R O U T I N E    D E C L A R A T I O N
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $extern$
    $proc$
    var isUsefull = false
    repeat
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    $identifier$ ?let @lstring mActionName indexing routineDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST mFormalParameterList
    ioDeclarations.mDeclarationList += !@externProcedureDeclarationAST {
      !isPredefined: false // Is not predefined
      !isFilePrivate: false // Is not internal
      !mActionName
      !mFormalParameterList
      !usefullProcedure: isUsefull
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

class @externProcedureDeclarationAST : @semanticDeclarationAST {
  public let @bool isFilePrivate %initArgLabel
  public let @lstring mRoutineName
  public let @formalParameterListAST mFormalArgumentListAST
  public let @bool usefullProcedure %initArgLabel

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterDeclarationInGraph
    ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
    ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
    ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
    ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
    ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList {
    ioExtensionOverrideDefinitionList += !self
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override getter keyRepresentation -> @string {
    result = "routine " + self.mRoutineName + [self.mFormalArgumentListAST keyRepresentation] // "("
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterDeclarationInSemanticContext
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
    ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
    ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
    ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
    ?!@unifiedTypeMap ioTypeMap
    ?!@semanticContext ioSemanticContext {
  //--- Build signature
    var routineSignature = @formalParameterSignature ()
    for argument in self.mFormalArgumentListAST do
      [!?ioTypeMap makeEntry !argument.mFormalArgumentTypeName ?let parameterTypeIndex]
      routineSignature +=
        !argument.mFormalSelector
        !parameterTypeIndex
        !argument.mFormalArgumentPassingMode
        !argument.mFormalArgumentName.string
    end
  //--- Enter routine in routine map
    [!?ioSemanticContext.routineMap insertKey
      !self.mRoutineName
      !routineSignature
      !isFilePrivate: self.isFilePrivate
    ]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method semanticAnalysis?!@lstringlist ioUsefulnessRootEntities
                                  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                  ?let @string unused inProductDirectory
                                  ?let @semanticContext unused inSemanticContext
                                  ?!@unifiedTypeMap ioTypeMap
                                  ?let @predefinedTypes unused inPredefinedTypes
                                  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
  //---
    var formalArgumentList = @formalParameterListForGeneration ()
    var routineSignature = @formalParameterSignature ()
    for argument in self.mFormalArgumentListAST do
      let parameterType = [ioTypeMap typeMapEntryForLKey !argument.mFormalArgumentTypeName]
      formalArgumentList +=
        !argument.mFormalSelector
        !argument.mFormalArgumentPassingMode
        !parameterType
        !argument.mFormalArgumentName
        !argument.mFormalArgumentName.string
      routineSignature +=
        !argument.mFormalSelector
        !parameterType
        !argument.mFormalArgumentPassingMode
        !argument.mFormalArgumentName.string
    end
    let mangledName = routineMangledName (!self.mRoutineName !routineSignature)
  //--- Useful entities graph
    let nameForUsefulness = procedureNameForUsefulEntitiesGraph (!mangledName)
    [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
    if self.usefullProcedure then
      ioUsefulnessRootEntities += !nameForUsefulness
    end
  //---
    ioSemanticDeclarationListForGeneration +=
      !infoMessage: "proc " + mangledName
      !@routinePrototypeDeclarationForGeneration {
        !generateHeader: true // Generate Cpp header file
        !implementationCppFileName: "proc-" + [mangledName fileNameRepresentation]
        !routineMangledName: mangledName.string // self.mRoutineName.string
        !formalArgumentList
       }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//
//    R O U T I N E    D E C L A R A T I O N
//
//--------------------------------------------------------------------------------------------------

class @routinePrototypeDeclarationForGeneration : @semanticDeclarationWithHeaderForGeneration {
  public let @string routineMangledName %initArgLabel
  public let @formalParameterListForGeneration mFormalArgumentList

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override getter headerKind -> @headerKind {
    result = .oneHeader
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method appendDeclaration1 ?!@stringset unused ioInclusionSet
                                     !@string outHeader {
    outHeader = [filewrapper semanticComponentGenerationTemplate.routineDeclaration
      !self.routineMangledName
      !self.mFormalArgumentList
    ]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

