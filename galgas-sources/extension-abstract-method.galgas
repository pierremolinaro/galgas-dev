#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @abstractExtensionMethodAST : @semanticDeclarationAST {
  public let @lstring mTypeName
  public let @lstring mAbstractExtensionMethodName
  public let @formalParameterListAST mAbstractExtensionMethodFormalParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·················································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $method$
    $@type$ ?let @lstring className indexing typeReferenceAbstractExtensionMethod
    $identifier$ ?let @lstring mMethodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list_ggs3> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST.new {
      !isPredefined: false # Is not predefined
      !className
      !mMethodName
      !formalParameterList
    }
  }

  #·················································································································

  rule <method_declaration_ggs3> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $method$
    $identifier$ ?let @lstring mMethodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list_ggs3> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST.new {
      !isPredefined: false # Is not predefined
      !inClassName
      !mMethodName
      !formalParameterList
    }
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations
                     ?!@stringset ioUserImplicitDeclaredTypeSet {
    $abstract$
    $proc$
    $@type$ ?let @lstring className indexing typeReferenceAbstractExtensionMethod
    $.$
    $identifier$ ?let @lstring mMethodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST.new {
      !isPredefined: false # Is not predefined
      !className
      !mMethodName
      !formalParameterList
    }
  }

  #·················································································································

  rule <method_declaration> ?let @lstring inClassName
                            ?!@galgasDeclarationAST ioDeclarations
                            ?!@stringset ioUserImplicitDeclaredTypeSet {
    $abstract$
    $proc$
    $identifier$ ?let @lstring mMethodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST.new {
      !isPredefined: false # Is not predefined
      !inClassName
      !mMethodName
      !formalParameterList
    }
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionMethodAST enterDeclarationInGraph
                                  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
                                  ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
                                  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
                                  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
                                  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {
    !"extension method @" + self.mTypeName + " " + self.mAbstractExtensionMethodName
    !self.mAbstractExtensionMethodName.location
  }
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mTypeName !self.mTypeName.location}]
#---
  if not [ioExtensionMethodMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionMethodMapForBuildingContext insertKey
      !self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionMethodMapForBuildingContext error message searchKey  do
    [!?mExtensionMethodMapForType insertKey
      !self.mAbstractExtensionMethodName
      !self.mAbstractExtensionMethodFormalParameterList
      !.isVirtualAbstract
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @abstractExtensionMethodAST keyRepresentation -> @string {
  result = "abstract extension method @" + self.mTypeName + " " + self.mAbstractExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionMethodAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext unused ioSemanticContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionMethodAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
#  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !self.mAbstractExtensionMethodName)
#  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
#--- Check self type is an abstract class
  if not [[selfType definition].mTypeKindEnum isClassType]then
    error self.mAbstractExtensionMethodName: "cannot declare a extension method: '@" + [selfType definition].mTypeName.string + "' is not a class"
  elsif [selfType definition].mIsConcrete then
    error self.mAbstractExtensionMethodName: "cannot declare an abstract extension method: '@" + [selfType definition].mTypeName.string + "' is not an abstract class"
  end
#--- Compute method signature
  var formalParameterListForGeneration = @formalParameterListForGeneration {}
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentTypeName mFormalArgumentName *) in self.mAbstractExtensionMethodFormalParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      !mFormalArgumentPassingMode
      ![ioTypeMap typeMapEntryForLKey !mFormalArgumentTypeName]
      !mFormalArgumentName
      !mFormalArgumentName.string
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !infoMessage: "abstract extension method " + self.mAbstractExtensionMethodName
    !@abstractExtensionMethodForGeneration.new {
      !generateHeader: true # Generate Cpp header file
      !mImplementationCppFileName: "method-" + [[selfType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mAbstractExtensionMethodName fileNameRepresentation]
      !selfType
      !self.mAbstractExtensionMethodName.string
      !formalParameterListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAPS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  ioAbstractExtensionMethodListMapAST +=
    !self.mTypeName.string
    !self.mAbstractExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @abstractExtensionMethodForGeneration : @semanticDeclarationWithHeaderForGeneration {
  public let @unifiedTypeMapEntry mReceiverType
  public let @string mAbstractExtensionMethodName
  public let @formalParameterListForGeneration mAbstractExtensionMethodFormalParameterList
}

#·······················································································································

override method @abstractExtensionMethodForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  outHeader = [filewrapper semanticComponentGenerationTemplate.abstractExtensionMethodDeclaration
    ![self.mReceiverType definition].mTypeName.string
    !self.mAbstractExtensionMethodName
    !self.mAbstractExtensionMethodFormalParameterList
  ]
}

#·······················································································································

override getter @abstractExtensionMethodForGeneration headerKind -> @headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @abstractExtensionMethodForGeneration appendSpecificImplementation
                                                                            ?let @unifiedTypeMap unused inTypeMap
                                                                            ?!@stringset ioInclusionSet
                                                                            !@string outImplementation {
  ioInclusionSet += !"method-" + [[self.mReceiverType definition].mTypeName.string fileNameRepresentation]+ "-" + [self.mAbstractExtensionMethodName fileNameRepresentation]
  [self.mReceiverType addHeaderFileName !?ioInclusionSet]
  for (* * mFormalArgumentType * *) in self.mAbstractExtensionMethodFormalParameterList do
    [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
  outImplementation = [filewrapper semanticComponentGenerationTemplate.abstractExtensionMethodImplementation
    !self.mReceiverType
    !self.mAbstractExtensionMethodName
    !self.mAbstractExtensionMethodFormalParameterList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

