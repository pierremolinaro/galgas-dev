//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//   SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3DeclarationsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $method$
    $@type$ ?var typeName indexing typeReferenceAbstractExtensionMethod
    repeat
    while
      $.$
      $@type$ ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
    end
    $identifier$ ?let @lstring methodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST {
      !isPredefined: false // Is not predefined
      !typeName
      !methodName
      !formalParameterList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <method_declaration_ggs3> ?let @lstring inTypeName ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $method$
    var typeName = inTypeName
    repeat
    while
      $@type$ ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
      $.$
    end
    $identifier$ ?let @lstring methodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST {
      !isPredefined: false // Is not predefined
      !typeName
      !methodName
      !formalParameterList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4DeclarationsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $proc$
    <simple_type_definition> !?ioDeclarations ?var @lstring typeName
    $.$
    repeat
    while
      <simple_type_definition> !?ioDeclarations ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
      $.$
    end
    $identifier$ ?let @lstring mMethodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST {
      !isPredefined: false // Is not predefined
      !typeName
      !mMethodName
      !formalParameterList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <method_declaration> ?let @lstring inTypeName
                            ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $proc$
    $identifier$ ?let @lstring methodName indexing abstractExtensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@abstractExtensionMethodAST {
      !isPredefined: false // Is not predefined
      !inTypeName
      !methodName
      !formalParameterList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//   AST
//--------------------------------------------------------------------------------------------------

class @abstractExtensionMethodAST : @semanticDeclarationAST {
  public let @lstring mTypeName
  public let @lstring mAbstractExtensionMethodName
  public let @formalParameterListAST mAbstractExtensionMethodFormalParameterList

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterDeclarationInGraph
    ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
    ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
    ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
    ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
    ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
    let key = @lstring {
      !"extension method @" + self.mTypeName + " " + self.mAbstractExtensionMethodName
      !self.mAbstractExtensionMethodName.location
    }
    [!?ioSemanticTypePrecedenceGraph addNode !key !self]
    [!?ioSemanticTypePrecedenceGraph addEdge !from: key !to: @{!"@" + self.mTypeName !self.mTypeName.location}]
  //---
    if not [ioExtensionMethodMapForBuildingContext hasKey !self.mTypeName.string] then
      [!?ioExtensionMethodMapForBuildingContext insertKey
        !self.mTypeName
        !@()
      ]
    end
    var entry = ioExtensionMethodMapForBuildingContext @[!searchKey: self.mTypeName]
    [!?entry.mExtensionMethodMapForType insertKey
      !self.mAbstractExtensionMethodName
      !self.mAbstractExtensionMethodFormalParameterList
      !.isVirtualAbstract
    ]
    [!?ioExtensionMethodMapForBuildingContext replaceKey !with: entry]
//    with self.mTypeName in !?ioExtensionMethodMapForBuildingContext error message searchKey  do
//      [!?mExtensionMethodMapForType insertKey
//        !self.mAbstractExtensionMethodName
//        !self.mAbstractExtensionMethodFormalParameterList
//        !.isVirtualAbstract
//      ]
//    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override getter keyRepresentation -> @string {
    result = "abstract extension method @" + self.mTypeName + " " + self.mAbstractExtensionMethodName
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterDeclarationInSemanticContext
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
    ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
    ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
    ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
    ?!@unifiedTypeMap unused ioTypeMap
    ?!@semanticContext unused ioSemanticContext {
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method semanticAnalysis
    ?!@lstringlist unused ioUsefulnessRootEntities
    ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
    ?let @string unused inProductDirectory
    ?let @semanticContext unused inSemanticContext
                                  ?!@unifiedTypeMap ioTypeMap
    ?let @predefinedTypes unused inPredefinedTypes
    ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
  {
  //--- Useful entities graph
  //  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !self.mAbstractExtensionMethodName)
  //  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  //--- Self type
    let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
  //--- Check self type is an abstract class
    if not [[selfType definition].typeKind isClassType]then
      error self.mAbstractExtensionMethodName: "cannot declare a extension method: '@" + [selfType definition].typeName.string + "' is not a class"
    elsif [selfType definition].isConcrete then
      error self.mAbstractExtensionMethodName: "cannot declare an abstract extension method: '@" + [selfType definition].typeName.string + "' is not an abstract class"
    end
  //--- Compute method signature
    var formalParameterListForGeneration = @formalParameterListForGeneration ()
    for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentTypeName mFormalArgumentName *) in self.mAbstractExtensionMethodFormalParameterList do
      formalParameterListForGeneration +=
        !mFormalSelector
        !mFormalArgumentPassingMode
        ![ioTypeMap typeMapEntryForLKey !mFormalArgumentTypeName]
        !mFormalArgumentName
        !mFormalArgumentName.string
    end
  //---
    ioSemanticDeclarationListForGeneration +=
      !infoMessage: "abstract extension method " + self.mAbstractExtensionMethodName
      !@abstractExtensionMethodForGeneration {
        !generateHeader: true // Generate Cpp header file
        !implementationCppFileName: "method-" + [[selfType definition].typeName.string fileNameRepresentation] + "-" + [self.mAbstractExtensionMethodName fileNameRepresentation]
        !selfType
        !self.mAbstractExtensionMethodName.string
        !formalParameterListForGeneration
      }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method buildExtensionListMaps
    ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
    ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
    ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
    ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
    ?!@genericExtensionMethodListMap ioAbstractExtensionMethodListMapAST
    ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
    ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
    ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
    ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
    ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
    ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
    ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  //  ioAbstractExtensionMethodListMapAST +=
  //    !self.mTypeName.string
  //    !self.mAbstractExtensionMethodName
    [!?ioAbstractExtensionMethodListMapAST insertKey
      !self.mTypeName.string
      !self.mAbstractExtensionMethodName
    ]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//   CODE GENERATION
//--------------------------------------------------------------------------------------------------

class @abstractExtensionMethodForGeneration : @semanticDeclarationWithHeaderForGeneration {
  public let @unifiedTypeMapEntry mReceiverType
  public let @string mAbstractExtensionMethodName
  public let @formalParameterListForGeneration mAbstractExtensionMethodFormalParameterList

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method appendDeclaration1
    ?!@stringset unused ioInclusionSet
    !@string outHeader {
    outHeader = [filewrapper semanticComponentGenerationTemplate.abstractExtensionMethodDeclaration
      ![self.mReceiverType definition].typeName.string
      !self.mAbstractExtensionMethodName
      !self.mAbstractExtensionMethodFormalParameterList
    ]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override getter headerKind -> @headerKind {
    result = @headerKind.oneHeader
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method appendSpecificImplementation ?let @unifiedTypeMap unused inTypeMap
                                                ?!@stringset ioInclusionSet
                                                !@string outImplementation {
    ioInclusionSet ++= "method-"
         + [[self.mReceiverType definition].typeName.string fileNameRepresentation]
         + "-" + [self.mAbstractExtensionMethodName fileNameRepresentation]
    [self.mReceiverType addHeaderFileName !?ioInclusionSet]
    for (* * mFormalArgumentType * *) in self.mAbstractExtensionMethodFormalParameterList do
      [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
    end
    outImplementation = [filewrapper semanticComponentGenerationTemplate.abstractExtensionMethodImplementation
      !self.mReceiverType
      !self.mAbstractExtensionMethodName
      !self.mAbstractExtensionMethodFormalParameterList
    ]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

