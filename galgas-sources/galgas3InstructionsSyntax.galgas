#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

syntax galgas3InstructionsSyntax (galgas3Scanner) {

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#          Rules prototypes                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <expression> !@semanticExpressionAST outExpression

rule <formal_parameter_list> !@formalParameterListAST outFormalParameterList

rule <formal_input_parameter_list> !@formalInputParameterListAST outFormalInputParameterList

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    S E M A N T I C    I N S T R U C T I O N    L I S T                                                               *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction_list> !@semanticInstructionListAST outInstructionsList {
  outInstructionsList = @semanticInstructionListAST. emptyList
  repeat
  while
    $;$
  while
    <semantic_instruction> ?let @semanticInstructionAST instruction
    outInstructionsList += !instruction
  end
}

#----------------------------------------------------------------------------------------------------------------------*

rule <declaration>
 ?!@galgas3DeclarationAST ioDeclarations {
  @bool isLocal
  select
    isLocal = false
  or
    $private$
    isLocal = true
  end
  <declaration_with_private> !isLocal !?ioDeclarations
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    E X T E R N    R O U T I N E    D E C L A R A T I O N                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <declaration>
  ?!@galgas3DeclarationAST ioDeclarations {
  $extern$
  $proc$
  $identifier$ ?let @lstring mActionName indexing routineDefinition
  <formal_parameter_list> ?let @formalParameterListAST mFormalParameterList
  ioDeclarations.mDeclarationList += !@externRoutineDeclarationAST.new {
    !false # Is not predefined
    !false # Is not internal
    !mActionName
    !mFormalParameterList}
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    R O U T I N E    D E C L A R A T I O N                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! Routine declaration

#----------------------------------------------------------------------------------------------------------------------*

rule <declaration_with_private>
  ?let @bool inIsPrivate
  ?!@galgas3DeclarationAST ioDeclarations
{
  $proc$
  $identifier$ ?let mRoutineName indexing routineDefinition
  <formal_parameter_list> ?var @formalParameterListAST mFormalParameterList
  ${$
  <semantic_instruction_list> ?var @semanticInstructionListAST mRoutineInstructionList
  $}$
  let endOfInstructionList = @location.here
  ioDeclarations.mDeclarationList += !@routineDeclarationAST.new {
    !false # Is not predefined
    !inIsPrivate
    !mRoutineName
    !mFormalParameterList
    !mRoutineInstructionList
    !endOfInstructionList
  }
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    F U N C T I O N    D E C L A R A T I O N                                                                          *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! Function declaration

#----------------------------------------------------------------------------------------------------------------------*

rule  <declaration_with_private>
  ?let @bool inIsPrivate
  ?!@galgas3DeclarationAST ioDeclarations {
  $func$
  var isOnce = false
  select
  or
    $attribute$ ?let @lstring onceQualifier
    if onceQualifier.string != "once" then
      error onceQualifier : "the only attribute allowed here is '%once'"
    else
      isOnce = true
    end
  end
  $identifier$ ?let functionName indexing functionDefinition
  <formal_input_parameter_list> ?let @formalInputParameterListAST formalInputParameterList
  if isOnce & ([formalInputParameterList length] > 0) then
    error functionName: "an 'once' function should has no argument"
  end
  $->$
  $type_name$ ?let resultTypeName
  $identifier$ ?let resultVariableName
  ${$
  <semantic_instruction_list> ?var @semanticInstructionListAST functionInstructionList
  $}$
  let endOfFunctionInstructionList = @location.here
  if isOnce then
    ioDeclarations.mDeclarationList += !@onceFunctionDeclarationAST.new {
      !false # Is not predefined
      !functionName
      !resultTypeName
      !resultVariableName
      !functionInstructionList
      !endOfFunctionInstructionList
      !inIsPrivate}
  else
    ioDeclarations.mDeclarationList += !@functionDeclarationAST.new {
      !false # Is not predefined
      !functionName
      !formalInputParameterList
      !resultTypeName
      !resultVariableName
      !functionInstructionList
      !endOfFunctionInstructionList
      !inIsPrivate}
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    E X T E R N    F U N C T I O N    D E C L A R A T I O N                                                           *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! extern function declaration

#----------------------------------------------------------------------------------------------------------------------*

rule <declaration>
 ?!@galgas3DeclarationAST ioDeclarations {
  $extern$
  $func$
  $identifier$ ?let mActionName indexing functionDefinition
  @formalInputParameterListAST formalInputParameterList
  <formal_input_parameter_list> ? formalInputParameterList
  $->$
  $type_name$ ?let resultTypeName
  $identifier$ ?let resultVariableName
  ioDeclarations.mDeclarationList += !@externFunctionDeclarationAST.new {
    !false # Is not predefined
    !mActionName
    !formalInputParameterList
    !resultTypeName
    !resultVariableName}
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  L O C A L    V A R I A B L E    D E C L A R A T I O N                                                               *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! var declaration instruction

#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction {
  $var$
  $type_name$ ?let typeName
  $identifier$ ?let variableName
  outInstruction = @localVariableDeclarationAST.new {![typeName location] !typeName !variableName !false}
}

#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction {
  $type_name$ ?let typeName
  $identifier$ ?let variableName
  outInstruction = @localVariableDeclarationAST.new {![typeName location] !typeName !variableName !false}
}

#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction {
  $var$
  $type_name$ ?let typeName
  $identifier$ ?let variableName
  $=$
  <expression> ?let @semanticExpressionAST sourceExpression
  outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST.new {
    ![typeName location]
    !false
    !typeName
    !variableName
    !sourceExpression
  }
}

#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction {
  $var$
  $identifier$ ?let variableName
  $=$
  <expression> ?let @semanticExpressionAST sourceExpression
  outInstruction = @localVariableDeclarationWithAssignmentAST.new {
    ![variableName location]
    !variableName
    !sourceExpression
  }
}

#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction {
  $type_name$ ?let typeName
  $identifier$ ?let variableName
  $=$
  <expression> ?let @semanticExpressionAST sourceExpression
  outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST.new {
    ![typeName location]
    !false
    !typeName
    !variableName
    !sourceExpression
  }
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  L O C A L    C O N S T A N T    D E C L A R A T I O N                                                               *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! const declaration instruction


#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  L O C A L    C O N S T A N T    D E C L A R A T I O N                                                               *
#  with implicit target type                                                                                           *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*


#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    A S S I G N M E N T    I N S T R U C T I O N                                                                      *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! assignment instruction

#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction>
  !@semanticInstructionAST outInstruction {
  $identifier$ ?let mTargetVariableName
  var mStructAttributeList =@lstringlist.emptyList{}
  repeat
  while
    $.$
    $identifier$ ?let attributeName
    mStructAttributeList += !attributeName
  end
  $=$
  <expression> ?let @semanticExpressionAST mSourceExpression
  outInstruction = @assignmentInstructionAST.new {
    ![mTargetVariableName location]
    !mTargetVariableName
    !mStructAttributeList
    !mSourceExpression}
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    S E L F    A S S I G N M E N T    I N S T R U C T I O N                                                           *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! self assignment instruction

#----------------------------------------------------------------------------------------------------------------------*

rule <semantic_instruction>
  !@semanticInstructionAST outInstruction {
  $self$
  let instructionLocation = @location.here
  $=$
  <expression> ?let @semanticExpressionAST mSourceExpression
  outInstruction = @selfAssignmentInstructionAST.new {
    !instructionLocation
    !mSourceExpression}
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    M E T H O D    C A L L    I N S T R U C T I O N                                                                   *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#!  Method call instruction

#----------------------------------------------------------------------------------------------------------------------*

rule <actual_parameter_list>
  !@actualParameterListAST outActualParameterList

#----------------------------------------------------------------------------------------------------------------------*

rule <syntax_directed_translation_result>
  !@abstractGrammarInstructionSyntaxDirectedTranslationResult outResult {
  $?$ ?let selector
  if selector.string != "" then
    error selector : "the selector should be '?'"
  end
  select
    $*$
    outResult = @grammarInstructionSyntaxDirectedTranslationDropResult.new {!@location.here}
  or
    $type_name$ ?let actualParameterTypeName
    $identifier$ ?let actualParameterName
    outResult = @grammarInstructionSyntaxDirectedTranslationResultInDeclaredVar.new {!actualParameterTypeName !actualParameterName}
  or
    $let$
    $type_name$ ?let actualParameterTypeName
    $identifier$ ?let actualParameterName
    outResult = @grammarInstructionSyntaxDirectedTranslationResultInDeclaredConst.new {!actualParameterTypeName !actualParameterName}
  or
    $identifier$ ?let actualParameterName
    outResult = @grammarInstructionSyntaxDirectedTranslationResultInVar.new {!actualParameterName}
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  A C T U A L    I N P U T    P A R A M E T E R    L I S T                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! Input parameter list

#----------------------------------------------------------------------------------------------------------------------*

rule <actual_input_parameter>
  !@lstring outSelector
  !@abstractInputParameter outActualInputParameter {
  select
    $?$ ?outSelector
    $*$
    outActualInputParameter = @inputParameterAnonymousVariable. new
  or
    $?$ ?outSelector
    $var$
    @lstring actualParameterTypeName
    select
      actualParameterTypeName = ["" nowhere]
    or
      $type_name$ ?actualParameterTypeName
    end
    $identifier$ ?let actualParameterName
    outActualInputParameter = @inputParameterDeclaredVariable.new {!actualParameterTypeName !actualParameterName}
  or
    $?$ ?outSelector
    $let$
    @lstring actualParameterTypeName
    select
      actualParameterTypeName = ["" nowhere]
    or
      $type_name$ ?actualParameterTypeName
    end
    $identifier$ ?let actualParameterName
    outActualInputParameter = @inputParameterDeclaredConstant.new {!actualParameterTypeName !actualParameterName}
  or
    $?$ ?outSelector
    $identifier$ ?let actualParameterName
    outActualInputParameter = @inputParameterVariable.new {!actualParameterName}
  end
}  

#----------------------------------------------------------------------------------------------------------------------*

rule <actual_input_parameter_list>
  !@actualInputParameterListAST outActualInputParameterList {
  outActualInputParameterList = @actualInputParameterListAST. emptyList
  repeat
  while
    <actual_input_parameter> ?let actualSelector ?let @abstractInputParameter actualInputParameter
    outActualInputParameterList += !actualSelector !actualInputParameter
  end
}  

#----------------------------------------------------------------------------------------------------------------------*

}