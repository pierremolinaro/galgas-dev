#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalStringExpressionAST : @semanticExpressionAST {
  private let @location mLocation
  private let @stringlist mStringSequence
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·················································································································
  
  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    var @stringlist literalStringList = {}
    repeat
      $"string"$ ?let literalString
      literalStringList += !literalString.string
    while
    end
    outExpression = @literalStringExpressionAST.new {!@location.here !literalStringList}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    var @stringlist literalStringList = {}
    repeat
      $"string"$ ?let literalString
      literalStringList += !literalString.string
    while
    end
    outExpression = @literalStringExpressionAST.new {!@location.here !literalStringList}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalStringExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  var @string s = ""
  for (mValue) in self.mStringSequence do
    s += mValue
  end
  outExpression = @literalStringExpressionForGeneration.new {!inAnalysisContext.mPredefinedTypes.mStringType !self.mLocation !s}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalStringExpressionForGeneration : @semanticExpressionForGeneration {
  private let @string mString
}

#·····················································································································

override method @literalStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if self.mString == "" then
    outCppExpression = "GALGAS_string::makeEmptyString ()"
  else
    outCppExpression = "GALGAS_string (" + [self.mString utf8RepresentationEscapingQuestionMark] + ")"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
