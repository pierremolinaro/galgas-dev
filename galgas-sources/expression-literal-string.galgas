#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalStringExpressionAST : @semanticExpressionAST {
  private let @location mLocation
  private let @stringlist mStringSequence
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    var @stringlist literalStringList = {}
    repeat
      $"string"$ ?let literalString
      literalStringList += !literalString.string
    while
    end
    outExpression = @literalStringExpressionAST.new {!@location.here !literalStringList}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <primary> !@semanticExpressionAST outExpression {
    var @stringlist literalStringList = {}
    repeat
      $"string"$ ?let literalString
      literalStringList += !literalString.string
    while
    end
    outExpression = @literalStringExpressionAST.new {!@location.here !literalStringList}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalStringExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalStringExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  var @string s = ""
  for (mValue) in self.mStringSequence do
    s += mValue
  end
  outExpression = @literalStringExpressionForGeneration.new {!inAnalysisContext.mPredefinedTypes.mStringType !self.mLocation !s}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalStringExpressionForGeneration : @semanticExpressionForGeneration {
  private let @string mString
}

#·····················································································································

override method @literalStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if self.mString == "" then
    outCppExpression = "GALGAS_string::makeEmptyString ()"
  else
    outCppExpression = "GALGAS_string (" + [self.mString utf8RepresentationEscapingQuestionMark] + ")"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
