#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingAbstractExtensionGetterAST : @semanticDeclarationAST {
  private let @lstring mTypeName
  private let @lstring mAbstractExtensionGetterName
  private let @formalInputParameterListAST mAbstractExtensionGetterFormalInputParameterList
  private let @lstring mAbstractExtensionGetterReturnedTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $abstract$
    $getter$
    $@type$ ?let className indexing typeReferenceOverrideAbstractExtensionGetter
    $identifier$ ?let mGetterName indexing overrideAbstractExtensionGetterDefinition
    <formal_input_parameter_list> ?let @formalInputParameterListAST mFormalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    select
      $identifier$ ? let idf
      warning idf : "an identifier is no longer required here" fixit { remove }
    or
    end
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionGetterAST.new {
      !false # Is not predefined
      !className
      !mGetterName
      !mFormalInputParameterList
      !mReturnedTypeName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $abstract$
    $getter$
    $@type$ ?let className indexing typeReferenceOverrideAbstractExtensionGetter
    $identifier$ ?let mGetterName indexing overrideAbstractExtensionGetterDefinition
    <formal_input_parameter_list> ?let @formalInputParameterListAST mFormalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    select
      $identifier$ ? let idf
      warning idf : "an identifier is no longer required here" fixit { remove }
    or
    end
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionGetterAST.new {
      !false # Is not predefined
      !className
      !mGetterName
      !mFormalInputParameterList
      !mReturnedTypeName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingAbstractExtensionGetterAST keyRepresentation  -> @string {
  result = "overriding extension getter @" + self.mTypeName + " " + self.mAbstractExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionGetterAST enterDeclarationInGraph
                                  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
                                  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
                                  ?!@extensionGetterMapForBuildingContext ioExtensionGetterMapForBuildingContext
                                  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
                                  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList {
  ioExtensionOverrideDefinitionList += !self
#---
  if not [ioExtensionGetterMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionGetterMapForBuildingContext insertKey
      !self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionGetterMapForBuildingContext error message searchKey  do
    [!?mExtensionGetterMapForType insertKey
      !self.mAbstractExtensionGetterName
      !self.mAbstractExtensionGetterReturnedTypeName
      !self.mAbstractExtensionGetterFormalInputParameterList
      !.isVirtualOverridingAbstract
    ]
   end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionGetterAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionGetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
#  let nameForUsefulness = getterNameForUsefulEntitiesGraph (!self.mTypeName !mAbstractExtensionGetterReturnedTypeName)
#  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [inSemanticContext.mTypeMap searchKey !self.mTypeName]
#--- Return type
  let returnType = [inSemanticContext.mTypeMap searchKey !self.mAbstractExtensionGetterReturnedTypeName]
#--- Check type is an abstract class
  if not [[selfType definition].mTypeKindEnum isClassType] then
    error self.mAbstractExtensionGetterName: "cannot declare a extension getter: '@" + [selfType definition].mTypeName.string + "' is not a class"
  elsif [selfType definition].mIsConcrete then
    error self.mAbstractExtensionGetterName: "cannot declare an abstract extension getter: '@" + [selfType definition].mTypeName.string + "' is not an abstract class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMapEntry superType = [selfType definition].mSuperType
  var @functionSignature inheritedSignature = {}
  var @unifiedTypeMapEntry inheritedReturnType = .null{}
  var @location inheritedDeclarationLocation = @location.here
  loop ([inSemanticContext.mTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType definition].mGetterMap hasKey !self.mAbstractExtensionGetterName.string] then
      [[superType definition].mGetterMap searchKey
        !self.mAbstractExtensionGetterName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?inheritedReturnType
        ?let qualifier
        ?*
      ]
      if qualifier <= @methodQualifier. isBasicFinal then
        baseTypeName = [superType definition].mTypeName.string
      end
    end
    superType = [superType definition].mSuperType
  end
  if baseTypeName == "" then
    error self.mAbstractExtensionGetterName:"this getter is not declared by a super class"
  end
#--- Check Signature
  if baseTypeName != "" then
    var formalParameterListForGeneration = @formalInputParameterListForGeneration {}
    for (mFormalSelector mFormalArgumentTypeName mFormalArgumentName * mIsConstant) in self.mAbstractExtensionGetterFormalInputParameterList do
      formalParameterListForGeneration +=
        !mFormalSelector
        ![inSemanticContext.mTypeMap searchKey !mFormalArgumentTypeName]
        !mFormalArgumentName.string
        !mFormalArgumentName
        !mIsConstant
    end
    checkGetterSignatures (
      !formalParameterListForGeneration
      !returnType
      !self.mAbstractExtensionGetterName.location
      !inheritedSignature
      !inheritedReturnType
      !inheritedDeclarationLocation
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionGetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap ioOverridingAbstractExtensionGetterListMap {
  ioOverridingAbstractExtensionGetterListMap +=
    !self.mTypeName.string
    !self.mAbstractExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
