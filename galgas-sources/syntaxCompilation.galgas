#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Syntax component compilation             
#                                           
#  Copyright (C) 2009, ..., 2014 Pierre Molinaro.
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc groupSyntaxComponentsGalgas3
  ?let @galgas3SyntaxComponentListAST inAllSyntaxComponents
  ?let @syntaxExtensions inSyntaxExtensions
  ?!@semanticDeclarationListAST ioDeclarationList
{
#--- Add extensions to syntax list
  var @stringset componentNameSet = {}
  for component in inAllSyntaxComponents do
    componentNameSet += !component.mSyntaxComponentName.string
    var nonterminalDeclarationList = component.mNonterminalDeclarationList
    var ruleList = component.mRuleList
    for (* mNonterminalDeclarationList mRuleList) in [inSyntaxExtensions listForKey !component.mSyntaxComponentName.string] do
      nonterminalDeclarationList += mNonterminalDeclarationList
      ruleList += mRuleList
    end
    ioDeclarationList += !@galgas3SyntaxComponentAST.new {
      !false # Is not predefined
      !component.mSyntaxComponentName
      !component.mImportedLexiqueFilePath
      !nonterminalDeclarationList
      !ruleList
      !component.mHasTranslateFeature}
  end
#--- Check all extensions are handled
  for (key theLists) in inSyntaxExtensions do
    if not [componentNameSet hasKey !key] then
      for (mSyntaxComponentName * *) in theLists do
        error mSyntaxComponentName : "there is no '" + mSyntaxComponentName +"' syntax component"
      end    
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

