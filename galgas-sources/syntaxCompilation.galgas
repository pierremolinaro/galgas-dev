#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Syntax component compilation
#
#  Copyright (C) 2009, ..., 2014 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

proc groupSyntaxComponentsGalgas3
  ?let @galgas3SyntaxComponentListAST inAllSyntaxComponents
  ?let @syntaxExtensions inSyntaxExtensions
  ?!@semanticDeclarationListAST ioDeclarationList
{
#--- Add extensions to syntax list
  var @stringset componentNameSet = <[]>
  for component in inAllSyntaxComponents do
    componentNameSet += !component.mSyntaxComponentName.string
    var nonterminalDeclarationList = component.mNonterminalDeclarationList
    var ruleList = component.mRuleList
    for (* mNonterminalDeclarationList mRuleList) in [inSyntaxExtensions listForKey !component.mSyntaxComponentName.string] do
      nonterminalDeclarationList += mNonterminalDeclarationList
      ruleList += mRuleList
    end
    ioDeclarationList += !@galgas3SyntaxComponentAST.new {
      !isPredefined: false # Is not predefined
      !component.mSyntaxComponentName
      !component.mImportedLexiqueFilePath
      !nonterminalDeclarationList
      !ruleList
      !component.mHasTranslateFeature}
  end
#--- Check all extensions are handled
  for (key theLists) in inSyntaxExtensions do
    if not [componentNameSet hasKey !key] then
      for (mSyntaxComponentName * *) in theLists do
        error mSyntaxComponentName : "there is no '" + mSyntaxComponentName +"' syntax component"
      end
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

