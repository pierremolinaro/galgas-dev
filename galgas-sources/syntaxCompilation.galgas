#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Syntax component compilation                                                                                        *
#                                                                                                                      *
#  Copyright (C) 2009, ..., 2014 Pierre Molinaro.                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           C O M P I L E    S Y N T A X    C O M P O N E N T                                                          *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc compileSyntaxComponentFromAST
  ?let @lstring inSourceFile
  ?let @string inOutputDirectory
  ?let @galgas3SyntaxComponentListAST-element inSyntaxComponentRoot
  ?!@parsedComponentStruct ioParsedComponentStruct {
  let @string basename = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
#--- Check component name
  let @lstring componentName = [inSyntaxComponentRoot mSyntaxComponentName]
  if [componentName string] != basename then
    warning componentName: "GALGAS checks "
      "the component name ('" + [componentName string]
    + "') against the source file base name ('" + basename + "'): they should be identical"
  end 
#--- Recursively parse all imported files
  @semanticDeclarationListAST semanticDeclarationList = [inSyntaxComponentRoot mSemanticDeclarationList]
  var parsedFileSet =@stringset.setWithString{![inSourceFile string]}
  var optionComponentFileNameList =@lstringlist.emptyList{}
  var grammarComponentASTList =@grammarComponentASTList.emptyList{}
  var headerIncludeList =@stringlist.emptyList{}
  var implementationIncludeList =@stringlist.emptyList{}
  recursivelyImportSemanticComponentAndCheckNoCircularityInImportSemantics (
    !inSourceFile
    !?ioParsedComponentStruct
    !?optionComponentFileNameList
    !?grammarComponentASTList
    !?semanticDeclarationList
    !?parsedFileSet
    !?headerIncludeList
    !?implementationIncludeList
    ![inSyntaxComponentRoot mImportedComponentFileNameList]
    ![inSourceFile stringByDeletingLastPathComponent]
  )
#------ Add predefined types to semantics declarations
  @semanticDeclarationListAST semanticDeclarationListWithPredefinedTypes = semanticDeclarationList
  appendPredefinedTypesASTs ( !?semanticDeclarationListWithPredefinedTypes )
#------ Build semantic context
  buildSemanticContext (
    !semanticDeclarationListWithPredefinedTypes
    ?var @semanticContext semanticContext
  )
#--- Perform semantic analysis of grammar components
  buildGrammarComponentMapForSemanticAnalysis (
    !grammarComponentASTList
    !?semanticContext
  )
#--- Build option component map for analysis
  buildOptionComponentMapForSemanticAnalysis (
    !optionComponentFileNameList
    !?ioParsedComponentStruct
    !?semanticContext.mOptionComponentMapForSemanticAnalysis
  )
#--- Build lexique component map for semantic analysis
  buildLexiqueComponentMapForSemanticAnalysis (
    !ioParsedComponentStruct
    ?var @lexiqueComponentMapForSemanticAnalysis lexiqueMap
  )
  semanticContext.mLexiqueComponentMapForSemanticAnalysis = lexiqueMap
#--- Parse lexique component
  let lexiqueFilePath = @lstring.new {
    ![[inSyntaxComponentRoot mImportedLexiqueFilePath] absolutePathFromPath ![inSourceFile stringByDeletingLastPathComponent]]
    ![[inSyntaxComponentRoot mImportedLexiqueFilePath] location]}
  @galgas3LexiqueComponentListAST-element lexiqueComponentRoot
  parseLexiqueComponent (
    !lexiqueFilePath
    !?ioParsedComponentStruct
    ?lexiqueComponentRoot
  )
#--- Build token map
  @terminalMap terminalMap
  buildTerminalMap ( !lexiqueComponentRoot ?terminalMap )
#--------------------------------------- Build "indexing" set
  var indexNameSet =@stringset.emptySet{}
  for () in [lexiqueComponentRoot mIndexingListAST] do
    indexNameSet += ![mIndexName string]
  end
  let @bool hasIndexing = not [[lexiqueComponentRoot mIndexingDirectory] isNowhere]
#--- Build semantic context from rule headers and non terminal declaration
  if @uint. errorCount == 0 then
    let @string lexiqueName = [[[inSyntaxComponentRoot mImportedLexiqueFilePath] lastPathComponent] stringByDeletingPathExtension]
    @semanticDeclarationSortedListForGeneration decoratedDeclarationListForGeneration
    let @predefinedTypes predefinedTypes = buildPredefinedTypes (!semanticContext)
    @syntaxDeclarationForGeneration syntaxDeclarationForGeneration
    semanticAnalysisOfSyntaxComponent (
      ![inSyntaxComponentRoot mNonterminalDeclarationList]
      ![inSyntaxComponentRoot mRuleList]
      ![componentName string]
      !lexiqueName
      !semanticContext
      !predefinedTypes
      !terminalMap
      !indexNameSet
      !hasIndexing
      !inSyntaxComponentRoot.mHasTranslateFeature
      ?syntaxDeclarationForGeneration
    )
  #------ Semantic Analysis
    performSemanticAnalysis (
      !inOutputDirectory
      ![inSyntaxComponentRoot mSemanticDeclarationList]
      !semanticContext
      ?decoratedDeclarationListForGeneration
    )
    decoratedDeclarationListForGeneration +=
      !"syntax"
      !syntaxDeclarationForGeneration
      !""
  #------ Generate Header File
    if @uint. errorCount == 0 then
      var headerString = [filewrapper syntaxFileGenerationTemplate.syntaxFileHeader
        ![componentName string]
        !lexiqueName
        !headerIncludeList
      ]
      for () in decoratedDeclarationListForGeneration do
        var unusedInclusionSet = @stringset. emptySet
        [mDeclaration appendDeclaration1 !?unusedInclusionSet ?let @string code]
        headerString += code
      end
      for () in decoratedDeclarationListForGeneration do
      var inclusionSet2 = @stringset. emptySet
      [mDeclaration appendDeclaration2 !false !inOutputDirectory !?inclusionSet2 ?let @string headerString2]
      headerString += headerString2
      end
      [@string generateFileWithPattern
        !startPath:inOutputDirectory
        !fileName:[componentName string] + ".h"
        !lineComment:"//"
        !header:"" # Header
        !defaultUserZone1:"\n\n" # Defaut user zone1
        !generatedZone2:headerString
        !defaultUserZone2:"\n\n" # Defaut user zone2
        !generatedZone3:"#endif\n"
        !makeExecutable:false
      ]
    #------ Generate Implementation File
      if @uint. errorCount == 0 then
        @string implementationString = [filewrapper syntaxFileGenerationTemplate.syntaxFileImplementation
          ![componentName string]
          !implementationIncludeList
        ]
        for () in decoratedDeclarationListForGeneration do
          implementationString += [mDeclaration appendTypeGenericImplementation]
          var unusedInclusionSet = @stringset. emptySet
          [mDeclaration appendSpecificImplementation !@unifiedTypeMap. emptyMap !?unusedInclusionSet ?let @string code]
          implementationString += code
        end
        [@string generateFileWithPattern
          !startPath:inOutputDirectory
          !fileName:[componentName string] + ".cpp"
          !lineComment:"//"
          !header:"" # Header
          !defaultUserZone1:"\n\n" # Defaut user zone1
          !generatedZone2:implementationString
          !defaultUserZone2:"\n\n" # Defaut user zone2
          !generatedZone3:"\n"
          !makeExecutable:false
        ]
      end
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileSyntaxComponentFromSourceFile
  ?let @lstring inSourceFile
  ?let @string inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct {
#--- Parse source file
  let basename = [[inSourceFile lastPathComponent] stringByDeletingPathExtension]
  let basenameKey = @lstring.new {!basename !@location.here}
  @galgas3SyntaxComponentListAST-element syntaxComponentRoot
  if [[ioParsedComponentStruct mParsedSyntaxComponentMap] hasKey ! basename] then
    [[ioParsedComponentStruct mParsedSyntaxComponentMap] searchKey !basenameKey ?* ?syntaxComponentRoot]
  else
    grammar syntaxSLRgrammar in inSourceFile ?syntaxComponentRoot
    [!?ioParsedComponentStruct.mParsedSyntaxComponentMap insertKey !basenameKey !inSourceFile !syntaxComponentRoot]
  end
#---
  compileSyntaxComponentFromAST (
    !inSourceFile
    !inOutputDirectory
    !syntaxComponentRoot
    !?ioParsedComponentStruct
  )
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           G R O U P    S Y N T A X    C O M P O N E N T S                 *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc groupSyntaxComponentsGalgas3
  ?let @galgas3SyntaxComponentListAST inAllSyntaxComponents
  ?let @syntaxExtensions inSyntaxExtensions
  ?!@semanticDeclarationListAST ioDeclarationList {
#--- Add extensions to syntax list
  @stringset componentNameSet = {}
  for component in inAllSyntaxComponents do
    componentNameSet += !component.mSyntaxComponentName.string
    var nonterminalDeclarationList = component.mNonterminalDeclarationList
    var ruleList = component.mRuleList
    for () ext_ in [inSyntaxExtensions listForKey !component.mSyntaxComponentName.string] do
      nonterminalDeclarationList += ext_mNonterminalDeclarationList
      ruleList += ext_mRuleList
    end
    ioDeclarationList += !@galgas3SyntaxComponentAST.new {
      !false # Is not predefined
      !component.mSyntaxComponentName
      !component.mImportedLexiqueFilePath
      !nonterminalDeclarationList
      !ruleList
      !component.mHasTranslateFeature}
  end
#--- Check all extensions are handled
  for (key theLists) in inSyntaxExtensions do
    if not [componentNameSet hasKey !key] then
      for () in theLists do
        error mSyntaxComponentName : "there is no '" + mSyntaxComponentName +"' syntax component"
      end    
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

