//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $loop$
    let instructionLocation = @location.here
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST firstInstructions
  //---
    let endOfFirstInstructions = @location.here
    $while$
    <comma_separated_expression_ggs3> !?ioDeclarations ?let loopExpression
    let endOfLoopExpression = @location.here
    $do$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST secondInstructions
    let endOfSecondInstructions = @location.here
    $end$
    let endOfLoopInstruction = @location.here
    outInstruction = @loopInstructionWithoutVariantAST {
      !instructionLocation
      !firstInstructions
      !endOfFirstInstructions
      !loopExpression
      !endOfLoopExpression
      !secondInstructions
      !endOfSecondInstructions
      !endOfLoopInstruction
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $loop$
    let instructionLocation = @location.here
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST firstInstructions
  //---
    let endOfFirstInstructions = @location.here
    $while$
    <comma_separated_expression> !?ioDeclarations ?let loopExpression
    let endOfLoopExpression = @location.here
    $do$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST secondInstructions
    let endOfSecondInstructions = @location.here
    $end$
    let endOfLoopInstruction = @location.here
    outInstruction = @loopInstructionWithoutVariantAST {
      !instructionLocation
      !firstInstructions
      !endOfFirstInstructions
      !loopExpression
      !endOfLoopExpression
      !secondInstructions
      !endOfSecondInstructions
      !endOfLoopInstruction
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! AST
//--------------------------------------------------------------------------------------------------

class @loopInstructionWithoutVariantAST : @semanticInstructionAST {
  private let @semanticInstructionListAST mFirstInstructions
  private let @location mEndOfFirstInstructions
  private let @CommaSeparatedExpressionList mLoopExpression
  private let @location mEndOfLoopExpression
  private let @semanticInstructionListAST mSecondInstructions
  private let @location mEndOfSecondInstructions
  private let @location mEndOfLoopInstruction

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    [self.mLoopExpression enterExpressionListInSemanticContext !?ioTypeMap]
    [self.mFirstInstructions enterInstructionListInSemanticContext !?ioTypeMap]
    [self.mSecondInstructions enterInstructionListInSemanticContext !?ioTypeMap]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method analyzeSemanticInstruction ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                            ?!@unifiedTypeMap ioTypeMap
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
  //--- Loop expression
   [self.mLoopExpression analyzeSemanticExpressionList
     !inUsefulnessCallerEntityName
     !?ioUsefulEntitiesGraph
     !inAnalysisContext
     !?ioTypeMap
     !?ioVariableMap
     ?let @ifTestListForGeneration testListForGeneration
   ]
  //--- Check loop expression type is @bool
//    if loopExpression.mResultType != inAnalysisContext.predefinedTypes.mBoolType then
//      error self.mEndOfLoopExpression
//      : "the loop expression type should be '@" 
//      + [inAnalysisContext.predefinedTypes.mBoolType definition].typeName.string + "', but it has '@" + [loopExpression.mResultType definition].typeName.string + "' type"
//    end
//    var expressions = self.mLoopExpression
//    [!?expressions popLast ?*]
//    for (*) in expressions do
//      [!?ioVariableMap closeBranch !self.mEndOf_then_branch]
//      [!?ioVariableMap closeOverride !self.mEndOf_then_branch]
//    end
//    [!?ioVariableMap closeBranch !self.mEndOf_then_branch]
  //--- Begin override for analyze loop instruction list
    [!?ioVariableMap openOverrideForRepeatBlock]
  //--- First branch
    analyzeSemanticInstructionList (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !localConstantList: @()
      !localInitializedVariableListWarnsIfNotMutated: @()
      !localInitializedVariableListNoWarnsIfNotMutated: @()
      !self.mFirstInstructions
      !self.mEndOfFirstInstructions
      !?ioVariableMap
      ?let first_instructionList
    )
  //--- Second branch
    analyzeSemanticInstructionList (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !localConstantList: @()
      !localInitializedVariableListWarnsIfNotMutated: @()
      !localInitializedVariableListNoWarnsIfNotMutated: @()
      !self.mSecondInstructions
      !self.mEndOfSecondInstructions
      !?ioVariableMap
      ?let second_instructionList
    )
  //--- End override
    [!?ioVariableMap closeOverride !self.mEndOfLoopInstruction]
  //--- Generate instruction
    ioInstructionListForGeneration += !@loopInstructionWithoutVariantForGeneration {
      !self.mInstructionLocation
      !first_instructionList
      !testListForGeneration
      !second_instructionList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! GENERATION
//--------------------------------------------------------------------------------------------------

class @loopInstructionWithoutVariantForGeneration : @semanticInstructionForGeneration {
  private let @location mInstructionLocation
  private let @semanticInstructionListForGeneration mFirstInstructions
  private let @ifTestListForGeneration mLoopExpression
  private let @semanticInstructionListForGeneration mSecondInstructions

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method generateInstruction ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      ?let @bool inGenerateSyntaxDirectedTranslationString
                                      ?!@string ioGeneratedCode {
    let loopVar = "loop_" + [self.mInstructionLocation startLocationIndex]
    ioGeneratedCode += "bool " + loopVar + " = true ;\n"
    ioGeneratedCode += "while (" + loopVar + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
    generateInstructionList (
      !?ioInclusionSet
      !self.mFirstInstructions
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !inGenerateSyntaxDirectedTranslationString
      !?ioGeneratedCode
    )
    [self.mLoopExpression generateInstruction
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
      ?let loopExpressionVar
    ]
    ioGeneratedCode += loopVar + " = " + loopExpressionVar + " == GalgasBool::boolTrue ;\n"
//    ioGeneratedCode += "if (" + loopVar + ") {\n"
//    ioGeneratedCode += "  " + loopVar + " = " + loopExpressionVar + ".boolValue () ;\n"
//    ioGeneratedCode += "}\n"
    ioGeneratedCode += "if (" + loopVar + ") {\n"
    generateInstructionList (
      !?ioInclusionSet
      !self.mSecondInstructions
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !inGenerateSyntaxDirectedTranslationString
      !?ioGeneratedCode
    )
    var first = true
    for (*) in self.mLoopExpression do
      if first then
        first = false
      else
        ioGeneratedCode += "}else{\n"
        ioGeneratedCode += "  " + loopVar + " = false ;\n"
      end
      ioGeneratedCode += "}\n"
      [!?ioGeneratedCode decIndentation !2]
    end
    ioGeneratedCode += "}\n"
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
