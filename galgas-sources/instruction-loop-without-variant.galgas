//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------
//! AST
//------------------------------------------------------------------------------------------------

class @loopInstructionWithoutVariantAST : @semanticInstructionAST {
  public let @semanticInstructionListAST mFirstInstructions
  public let @location mEndOfFirstInstructions
  public let @semanticExpressionAST mLoopExpression
  public let @location mEndOfLoopExpression
  public let @semanticInstructionListAST mSecondInstructions
  public let @location mEndOfSecondInstructions
  public let @location mEndOfLoopInstruction
}

//------------------------------------------------------------------------------------------------
//! SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension galgas3InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $loop$
    let instructionLocation = @location.here
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST firstInstructions
  //---
    let endOfFirstInstructions = @location.here
    $while$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST loopExpression
    let endOfLoopExpression = @location.here
    $do$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST secondInstructions
    let endOfSecondInstructions = @location.here
    $end$
    let endOfLoopInstruction = @location.here
    outInstruction = @loopInstructionWithoutVariantAST {
      !instructionLocation
      !firstInstructions
      !endOfFirstInstructions
      !loopExpression
      !endOfLoopExpression
      !secondInstructions
      !endOfSecondInstructions
      !endOfLoopInstruction
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $loop$
    let instructionLocation = @location.here
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST firstInstructions
  //---
    let endOfFirstInstructions = @location.here
    $while$
    <expression> !?ioDeclarations ?let @semanticExpressionAST loopExpression
    let endOfLoopExpression = @location.here
    $do$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST secondInstructions
    let endOfSecondInstructions = @location.here
    $end$
    let endOfLoopInstruction = @location.here
    outInstruction = @loopInstructionWithoutVariantAST {
      !instructionLocation
      !firstInstructions
      !endOfFirstInstructions
      !loopExpression
      !endOfLoopExpression
      !secondInstructions
      !endOfSecondInstructions
      !endOfLoopInstruction
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------
//! CONTEXT
//------------------------------------------------------------------------------------------------

override method @loopInstructionWithoutVariantAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mLoopExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mFirstInstructions enterInstructionListInSemanticContext !?ioTypeMap]
  [self.mSecondInstructions enterInstructionListInSemanticContext !?ioTypeMap]
}

//------------------------------------------------------------------------------------------------
//! SEMANTICS
//------------------------------------------------------------------------------------------------

override method @loopInstructionWithoutVariantAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap {
//--- Loop expression
  [self.mLoopExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let loopExpression
  ]
//--- Check loop expression type is @bool
  if loopExpression.mResultType != inAnalysisContext.predefinedTypes.mBoolType then
    error self.mEndOfLoopExpression
    : "the loop expression type should be '@" + [inAnalysisContext.predefinedTypes.mBoolType definition].typeName.string + "', but it has '@" + [loopExpression.mResultType definition].typeName.string + "' type"
  end
//--- Begin override for analyze loop instruction list
  [!?ioVariableMap openOverrideForRepeatBlock]
//--- First branch
  analyzeSemanticInstructionList (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !localConstantList: @()
    !localInitializedVariableListWarnsIfNotMutated: @()
    !localInitializedVariableListNoWarnsIfNotMutated: @()
    !self.mFirstInstructions
    !self.mEndOfFirstInstructions
    !?ioVariableMap
    ?let first_instructionList
  )
//--- Second branch
  analyzeSemanticInstructionList (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !localConstantList: @()
    !localInitializedVariableListWarnsIfNotMutated: @()
    !localInitializedVariableListNoWarnsIfNotMutated: @()
    !self.mSecondInstructions
    !self.mEndOfSecondInstructions
    !?ioVariableMap
    ?let second_instructionList
  )
//--- End override
  [!?ioVariableMap closeOverride !self.mEndOfLoopInstruction]
//--- Generate instruction
  ioInstructionListForGeneration += !@loopInstructionWithoutVariantForGeneration {
    !self.mInstructionLocation
    !first_instructionList
    !loopExpression
    !second_instructionList
  }
}

//------------------------------------------------------------------------------------------------
//! GENERATION
//------------------------------------------------------------------------------------------------

class @loopInstructionWithoutVariantForGeneration : @semanticInstructionForGeneration {
  public let @location mInstructionLocation
  public let @semanticInstructionListForGeneration mFirstInstructions
  public let @semanticExpressionForGeneration mLoopExpression
  public let @semanticInstructionListForGeneration mSecondInstructions
}

//·································································································

override method @loopInstructionWithoutVariantForGeneration generateInstruction ?!@stringset ioInclusionSet
                                                                                ?!@uint ioTemporaryVariableIndex
                                                                                ?!@stringset ioUnusedVariableCppNameSet
                                                                                ?let @bool inGenerateSyntaxDirectedTranslationString
                                                                                ?!@string ioGeneratedCode {
  let @string loopVar = "loop_" + [[self.mInstructionLocation startLocationIndex] string]
  ioGeneratedCode += "bool " + loopVar + " = true ;\n"
  ioGeneratedCode += "while (" + loopVar + ") {\n"
  [!?ioGeneratedCode incIndentation !2]
  generateInstructionList (
    !?ioInclusionSet
    !self.mFirstInstructions
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  [self.mLoopExpression generateExpression
     !?ioGeneratedCode
     !?ioInclusionSet
     !?ioTemporaryVariableIndex
     !?ioUnusedVariableCppNameSet
     ?let loopExpressionVar
  ]
  ioGeneratedCode += loopVar + " = " + loopExpressionVar + ".isValid () ;\n"
                   + "if (" + loopVar + ") {\n"
                   + "  " + loopVar + " = " + loopExpressionVar + ".boolValue () ;\n"
                   + "}\n"
  ioGeneratedCode += "if (" + loopVar + ") {\n"
  generateInstructionList (
    !?ioInclusionSet
    !self.mSecondInstructions
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  ioGeneratedCode += "}\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

//------------------------------------------------------------------------------------------------
