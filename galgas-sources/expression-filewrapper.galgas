#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @filewrapperObjectInstanciationInExpressionAST : @semanticExpressionAST {
  @lstring mFilewrapperName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @filewrapperInExpressionAST : @semanticExpressionAST {
  @lstring mFilewrapperName
  @lstring mFilewrapperPath
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @filewrapperTemplateInExpressionAST : @semanticExpressionAST {
  @lstring mFilewrapperName
  @lstring mFilewrapperTemplateName
  @actualOutputExpressionList mExpressions
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $[$
    $filewrapper$
    $identifier$ ?let filewrapperName indexing filewrapperReference
    select
      outExpression = @filewrapperObjectInstanciationInExpressionAST.new {
        !filewrapperName
      }
    or
      $.$
      select
        $"string"$ ?let @lstring filePath
        outExpression = @filewrapperInExpressionAST.new {
          !filewrapperName
          !filePath
        }
      or
        $identifier$ ?let @lstring filewrapperTemplateName
        <output_expression_list> ?let @actualOutputExpressionList expressionList
        outExpression = @filewrapperTemplateInExpressionAST.new {
          !filewrapperName
          !filewrapperTemplateName
          !expressionList
        }
      end
    end
    $]$
  }  

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperObjectInstanciationInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @filewrapperObjectInstanciationInExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = filewrapperNameForUsefulEntitiesGraph (!self.mFilewrapperName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#--- Search for filewrapper name in filewrapper map
  [inAnalysisContext.mSemanticContext.mFilewrapperMap searchKey
    !self.mFilewrapperName
    ?let @lstring filewrapperPath
    ?4*
    ?let @bool isInternal
  ]
#--- Check internal
  if isInternal then
    let filewrapperDeclarationLocation = [inAnalysisContext.mSemanticContext.mFilewrapperMap locationForKey !self.mFilewrapperName.string]
    if [self.mFilewrapperName.location file] != [filewrapperDeclarationLocation file] then
      error self.mFilewrapperName : "this filewrapper is internal to '" + [filewrapperDeclarationLocation file] + "' file"
    end
  end
#---
  outExpression = @filewrapperInExpressionForGeneration.new {
    !@unifiedTypeMap-entry. searchKey {!inAnalysisContext.mSemanticContext.mTypeMap !@lstring.new {!"filewrapper" ![self.mFilewrapperName location]}}
    ![self.mFilewrapperName location]
    ![self.mFilewrapperName string]
    ![filewrapperPath string]}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperTemplateInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressions do
    [mExpression enterExpressionInSemanticContext !?ioTypeMap]
  end
}

#·····················································································································

override method @filewrapperTemplateInExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = filewrapperTemplateNameForUsefulEntitiesGraph (!self.mFilewrapperName !self.mFilewrapperTemplateName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#---
  [inAnalysisContext.mSemanticContext.mFilewrapperMap searchKey
     !self.mFilewrapperName
     ?4*
     ?let @filewrapperTemplateMap filewrapperTemplateMap
     ?let @bool isInternal
   ]
#--- Check internal
  if isInternal then
    let filewrapperDeclarationLocation = [inAnalysisContext.mSemanticContext.mFilewrapperMap locationForKey !self.mFilewrapperName.string]
    if [self.mFilewrapperName.location file] != [filewrapperDeclarationLocation file] then
      error self.mFilewrapperName : "this filewrapper is internal to '" + [filewrapperDeclarationLocation file] + "' file"
    end
  end
#---
  [filewrapperTemplateMap searchKey !self.mFilewrapperTemplateName ?let @functionSignature templateSignature ?*]
#--- Analysis arguments
  @semanticExpressionListForGeneration effectiveParameterList
  if [self.mExpressions length] != [templateSignature length] then
    error self.mFilewrapperTemplateName
    : "calling the '" + self.mFilewrapperTemplateName + "' template of '" + self.mFilewrapperName + "' filewrapper requires "
    + [[templateSignature length] string] + " parameter(s), while this call has "
    + [[self.mExpressions length] string] + " parameter(s)" 
    : effectiveParameterList
  else
    effectiveParameterList = {}
    for (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressions, (mFormalSelector mFormalArgumentType mFormalArgumentName) in templateSignature do
      if mFormalSelector.string != mActualSelector.string then
        error mActualSelector : "the selector should be '!" + mFormalSelector + if mFormalSelector.string != "" then ":" else "" end + "'"
      end
      [mExpression analyzeSemanticExpression 
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !mFormalArgumentType
        !inAnalysisContext
        !?ioVariableMap
        ?@semanticExpressionForGeneration exp
      ]
      checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType ![exp mResultType] !mEndOfExpressionLocation !?exp)
      effectiveParameterList += !exp
    end
  end
#---
  outExpression = @filewrapperTemplateInExpressionForGeneration.new {
    !inAnalysisContext.mPredefinedTypes.mStringType
    ![self.mFilewrapperName location]
    ![self.mFilewrapperName string]
    ![self.mFilewrapperTemplateName string]
    !effectiveParameterList}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @filewrapperInExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = filewrapperNameForUsefulEntitiesGraph (!self.mFilewrapperName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#--- Parse filewrapper path
  @stringlist directoryList
  @string fileName
  if [self.mFilewrapperPath length] == 0 then
    error self.mFilewrapperPath : "path is empty" : directoryList, fileName
  elsif [self.mFilewrapperPath firstCharacterOrNul] == '/' then
    error self.mFilewrapperPath : "the path should not begin with '/'" : directoryList, fileName
  else
    directoryList = [self.mFilewrapperPath componentsSeparatedByString !"/"]
    [!?directoryList popLast ?fileName]
  end
#--- Get filewrapper features
  [inAnalysisContext.mSemanticContext.mFilewrapperMap searchKey
    !self.mFilewrapperName
    ?*
    ?*
    ?var @wrapperFileMap filewrapperFileMap
    ?var @wrapperDirectoryMap filewrapperDirectoryMap
    ?*
    ?let @bool isInternal
  ]
#--- Check internal
  if isInternal then
    let filewrapperDeclarationLocation = [inAnalysisContext.mSemanticContext.mFilewrapperMap locationForKey !self.mFilewrapperName.string]
    if [self.mFilewrapperName.location file] != [filewrapperDeclarationLocation file] then
      error self.mFilewrapperName : "this filewrapper is internal to '" + [filewrapperDeclarationLocation file] + "' file"
    end
  end
#--- Search for file
  @string builtPath = ""
  loop( [filewrapperDirectoryMap count] + 1)
  while [directoryList length] > 0 do
    @string directoryName
    [!?directoryList popFirst ?directoryName]
    builtPath += directoryName + "/"
    if [filewrapperDirectoryMap hasKey !directoryName] then
      [filewrapperDirectoryMap searchKey
        !@lstring.new {!directoryName !@location.here}
        ?filewrapperFileMap
        ?filewrapperDirectoryMap
        ?*
      ]
    else
      error self.mFilewrapperPath : "the '" + builtPath + "' path does not exists for the '" + self.mFilewrapperName + "' filewrapper" : filewrapperFileMap 
      directoryList = @stringlist.emptyList # For exiting loop
    end
  end
  @uint fileIndex
  @bool isTextFile
  if [filewrapperFileMap hasKey !fileName] then
    [filewrapperFileMap searchKey !@lstring.new {!fileName !@location.here} ?* ?isTextFile ?* ?fileIndex]
  else
    error self.mFilewrapperPath
    : "the '" + fileName + "' file does not exist in the '" + builtPath + "' directory of '" + self.mFilewrapperName + "' filewrapper"
    : fileIndex, isTextFile
  end
#---
  outExpression = @filewrapperStaticPathInExpressionForGeneration.new {
    !if isTextFile
      then inAnalysisContext.mPredefinedTypes.mStringType
      else @unifiedTypeMap-entry. searchKey {!inAnalysisContext.mSemanticContext.mTypeMap !@lstring.new {!"data" !@location.here}}
     end
    ![self.mFilewrapperName location]
    ![self.mFilewrapperName string]
    !fileIndex
    !isTextFile}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @filewrapperInExpressionForGeneration : @semanticExpressionForGeneration {
  @string mFilewrapperName
  @string mFilewrapperPath
}

#·····················································································································

override method @filewrapperInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  ioInclusionSet += !"filewrapper-" + self.mFilewrapperName
  outCppExpression = "GALGAS_filewrapper (gWrapperDirectory_0_" + [self.mFilewrapperName identifierRepresentation] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @filewrapperTemplateInExpressionForGeneration : @semanticExpressionForGeneration {
  @string mFilewrapperName
  @string mFilewrapperTemplateName
  @semanticExpressionListForGeneration mActualOutputParameterList
}

#·····················································································································

override method @filewrapperTemplateInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  ioInclusionSet += !"filewrapper-" + self.mFilewrapperName
  var parameterList =@stringlist {}
  for (mExpression) in self.mActualOutputParameterList do
    @string parameter
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?parameter
    ]
    parameterList += !parameter  
  end
  outCppExpression = "GALGAS_string (filewrapperTemplate_" + [self.mFilewrapperName identifierRepresentation] + "_" + [self.mFilewrapperTemplateName identifierRepresentation]
                  + " (" + compilerCppName ()
  for (mValue) in parameterList do
    outCppExpression += ", " + mValue
  end
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression += [self.mLocation commaSourceFile] + "))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @filewrapperStaticPathInExpressionForGeneration : @semanticExpressionForGeneration {
  @string mFilewrapperName
  @uint mFilewrapperFileIndex
  @bool mIsTextFile
}

#·····················································································································

override method @filewrapperStaticPathInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  ioInclusionSet += !"filewrapper-" + self.mFilewrapperName
  outCppExpression = if self.mIsTextFile then "GALGAS_string" else "GALGAS_data" end
  outCppExpression += " (gWrapperFileContent_" + [self.mFilewrapperFileIndex string] + "_" + [self.mFilewrapperName identifierRepresentation] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
