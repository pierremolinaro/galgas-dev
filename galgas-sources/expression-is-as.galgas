#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @testDynamicClassInExpressionAST : @semanticExpressionAST {
  private let @semanticExpressionAST mReceiverExpression
  private let @location mEndOfReceiverExpression
  private let @dynamicTypeComparisonKind mTypeComparisonKind
  private let @lstring mTypeName
}

#·····················································································································

enum @dynamicTypeComparisonKind {
  case equal  # ==
  case inherited  # >=
  case strictlyInherited # >
}


#·····················································································································

refclass @castInExpressionAST : @semanticExpressionAST {
  private let @semanticExpressionAST mReceiverExpression
  private let @location mEndOfReceiverExpression
  private let @lstring mTypeName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <expression_ggs3> ?!@galgasDeclarationAST ioDeclarations
                         !@semanticExpressionAST outExpression {
    <expression_or_ggs3> !?ioDeclarations ?outExpression
    select
    or
      let endOfReceiverExpression = @location.here
      $is$
      let @dynamicTypeComparisonKind kind
      select
        $==$
        kind = .equal
      or
        $>=$
        kind = .inherited
      or
        kind = .inherited
      or
        $>$
        kind = .strictlyInherited
      end
      $@type$ ?let typeName
#      <type_definition_ggs3> !?ioDeclarations ?let typeName
      outExpression = @testDynamicClassInExpressionAST {
        !outExpression
        !endOfReceiverExpression
        !kind
        !typeName
      }
    or
      let endOfReceiverExpression = @location.here
      $as$
#      <type_definition_ggs3> !?ioDeclarations ?let typeName
      $@type$ ?let typeName
      outExpression = @castInExpressionAST {
        !outExpression
        !endOfReceiverExpression
        !typeName
      }
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <expression> ?!@galgasDeclarationAST ioDeclarations
                    !@semanticExpressionAST outExpression {
    <expression_or> !?ioDeclarations ?outExpression
    select
    or
      let endOfReceiverExpression = @location.here
      $is$
      $@type$ ?let typeName
#      <type_definition> !?ioDeclarations ?let typeName
      outExpression = @testDynamicClassInExpressionAST {
        !outExpression
        !endOfReceiverExpression
        !.inherited
        !typeName
      }
    or
      let endOfReceiverExpression = @location.here
      $as$
#      <type_definition> !?ioDeclarations ?let typeName
      $@type$ ?let typeName
      outExpression = @castInExpressionAST {
        !outExpression
        !endOfReceiverExpression
        !typeName
      }
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @testDynamicClassInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mReceiverExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @testDynamicClassInExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Receiver expression analysis
  [self.mReceiverExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let expression
  ]
#--- Get type information
   let castType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
#--- This type is either a class
  if [[expression.mResultType definition].typeKind isClassType] then
  #--- Check expression type is a descendant of named type
    var @unifiedTypeMapEntry t = castType
    var @bool found = t == expression.mResultType
    loop ([ioTypeMap count] + 1)
    while (not found) & not [[t definition].superType isNull] do
      t = [t definition].superType
      found = t == expression.mResultType
    end
    if not found then
      error self.mTypeName
      :"the '@" + self.mTypeName + "' is not a descendant of the '@" + [expression.mResultType definition].typeName.string + "' type of the cast expression"
    end
  else
    error expression.mLocation: "expression should be a class instance: it is an @"
     +  [expression.mResultType definition].typeName.string + " instance"
  end
#--- Generate expression
  outExpression = @testDynamicClassInExpressionForGeneration {
    !inAnalysisContext.predefinedTypes.mBoolType
    !self.mTypeName.location
    !expression
    !self.mTypeComparisonKind
    !castType}
}

#·····················································································································

override method @castInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mReceiverExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @castInExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Receiver expression analysis
  [self.mReceiverExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
   ]
#--- Get type information
   let type = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
#--- This type is an @object type
  if [[expression.mResultType definition].typeKind isClassType]then
  #--- Check expression type is a descendant of named type
    var @unifiedTypeMapEntry t = type
    var @bool found = t == expression.mResultType
    loop ([ioTypeMap count] + 1)
    while (not found) & not [[t definition].superType isNull] do
      t = [t definition].superType
      found = t == expression.mResultType
    end
    if not found then
      error self.mTypeName
      :"the '@" + self.mTypeName + "' is not a descendant of the '@"
      + [expression.mResultType definition].typeName.string + "' type of the cast expression"
    end
  elsif [expression.mResultType definition].typeName.string != "object" then
    error expression.mLocation:
      "cast expression should be a class instance or an @object instance: it is an @"
     +  [expression.mResultType definition].typeName.string + " instance"
  end
#--- Generate expression
  if [expression.mResultType definition].typeName.string == "object" then
    outExpression = @extractObjectInExpressionForGeneration {
      !type
      !self.mEndOfReceiverExpression
      !expression
      !self.mTypeName.string}
  else
    outExpression = @castInExpressionForGeneration {
      !type
      !self.mTypeName.location
      !expression
      !self.mTypeName.string
      !type
    }
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @testDynamicClassInExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mReceiverExpression
  private let @dynamicTypeComparisonKind mTypeComparisonKind
  private let @unifiedTypeMapEntry mCastType
}

#·····················································································································

override method @testDynamicClassInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  let typeNameRepresentation = [[self.mCastType definition].typeName.string identifierRepresentation]
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverExpression
  ]
#--- Generated test
  [self.mCastType addHeaderFileName !?ioInclusionSet]
  switch self.mTypeComparisonKind
  case equal :
    outCppExpression = "GALGAS_bool (" + receiverExpression
      + ".dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_"
      + typeNameRepresentation + ")"
  case inherited :
    outCppExpression = "GALGAS_bool (nullptr != dynamic_cast <const cPtr_"
    + typeNameRepresentation
    + " *> (" + receiverExpression + ".ptr ()))"
  case strictlyInherited :
    outCppExpression = "GALGAS_bool ((" + receiverExpression
      + ".dynamicTypeDescriptor () != & kTypeDescriptor_GALGAS_"
      + typeNameRepresentation + ") && (nullptr != dynamic_cast <const cPtr_"
    + typeNameRepresentation
    + " *> (" + receiverExpression + ".ptr ())))"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @castInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mCastType addHeaderFileName !?ioInclusionSet]
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverExpression
  ]
#---
  ioGeneratedCode += "GALGAS_" + [self.mTypeName identifierRepresentation]
  + " " + outCppExpression + " ;\n"
  + "if (" + receiverExpression + ".isValid ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
#---
  ioGeneratedCode +=
    "if (nullptr != dynamic_cast <const cPtr_"
  + [self.mTypeName identifierRepresentation]
  + " *> (" + receiverExpression + ".ptr ())) {\n"
  + "  " + outCppExpression + " = (cPtr_" + [self.mTypeName identifierRepresentation] + " *) "
  + receiverExpression + ".ptr () ;\n"
  + "}else{\n"
  [!?ioGeneratedCode incIndentation !2]
  ioGeneratedCode +=
    compilerCppName () + "->castError (\""
  + [self.mTypeName identifierRepresentation]
  + "\", " + receiverExpression + ".ptr ()->classDescriptor ()"
  + [self.mLocation commaSourceFile] + ") ;\n"
  [!?ioGeneratedCode decIndentation !2]
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  ioGeneratedCode += "}\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extractObjectInExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mReceiverExpression
  private let @string mTypeName
}

#·····················································································································

override method @extractObjectInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverExpression
  ]
#--- Generate code
  outCppExpression = "GALGAS_" + [self.mResultType identifierRepresentation]
  + "::extractObject (" + receiverExpression
  + ", " + compilerCppName ()
  + [self.mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
