#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @testDynamicClassInExpressionAST : @semanticExpressionAST {
  private let @semanticExpressionAST mReceiverExpression
  private let @location mEndOfReceiverExpression
  private let @dynamicTypeComparisonKind mTypeComparisonKind
  private let @lstring mTypeName
}

#·····················································································································

enum @dynamicTypeComparisonKind {
  case equal  # ==
  case inherited  # >=
  case strictlyInherited # >
}


#·····················································································································

refclass @castInExpressionAST : @semanticExpressionAST {
  private let @semanticExpressionAST mReceiverExpression
  private let @location mEndOfReceiverExpression
  private let @lstring mTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <expression> !@semanticExpressionAST outExpression {
    <expression_or> ?outExpression
    select
    or
      let endOfReceiverExpression = @location.here
      $is$
      let @dynamicTypeComparisonKind kind
      select
        $==$
        kind = .equal
      or
        $>=$
        kind = .inherited
      or
        kind = .inherited
      or
        $>$
        kind = .strictlyInherited
      end
      $@type$ ?let typeName
      outExpression = @testDynamicClassInExpressionAST.new {
        !outExpression
        !endOfReceiverExpression
        !kind
        !typeName
      }
    or
      let endOfReceiverExpression = @location.here
      $as$
      $@type$ ?let typeName
      outExpression = @castInExpressionAST.new {
        !outExpression
        !endOfReceiverExpression
        !typeName
      }
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <expression> !@semanticExpressionAST outExpression {
    <expression_or> ?outExpression
    select
    or
      let endOfReceiverExpression = @location.here
      $is$
      let @dynamicTypeComparisonKind kind
      select
        $==$
        kind = .equal
      or
        $>=$
        kind = .inherited
      or
        kind = .inherited
      or
        $>$
        kind = .strictlyInherited
      end
      $@type$ ?let typeName
      outExpression = @testDynamicClassInExpressionAST.new {
        !outExpression
        !endOfReceiverExpression
        !kind
        !typeName
      }
    or
      let endOfReceiverExpression = @location.here
      $as$
      $@type$ ?let typeName
      outExpression = @castInExpressionAST.new {
        !outExpression
        !endOfReceiverExpression
        !typeName
      }
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @testDynamicClassInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mReceiverExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @testDynamicClassInExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Receiver expression analysis
  [self.mReceiverExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioVariableMap
    ?let expression
  ]
#--- Get type information
   let castType = [inAnalysisContext.mSemanticContext.mTypeMap searchKey !self.mTypeName]
#--- This type is either a class
  if [[expression.mResultType definition].mTypeKindEnum isClassType] then
  #--- Check expression type is a descendant of named type
    var @unifiedTypeMapEntry t = castType
    var @bool found = t == expression.mResultType
    loop ([inAnalysisContext.mSemanticContext.mTypeMap count] + 1)
    while (not found) & not [[t definition].mSuperType isNull] do
      t = [t definition].mSuperType
      found = t == expression.mResultType
    end
    if not found then
      error self.mTypeName
      :"the '@" + self.mTypeName + "' is not a descendant of the '@" + [expression.mResultType definition].mTypeName.string + "' type of the cast expression"
    end
  else
    error expression.mLocation: "expression should be a class instance: it is an @"
     +  [expression.mResultType definition].mTypeName.string + " instance"
  end
#--- Generate expression
  outExpression = @testDynamicClassInExpressionForGeneration.new {
    !inAnalysisContext.mPredefinedTypes.mBoolType
    !self.mTypeName.location
    !expression
    !self.mTypeComparisonKind
    !castType}
}

#·····················································································································

override method @castInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mReceiverExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @castInExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Receiver expression analysis
  [self.mReceiverExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext 
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
   ]
#--- Get type information
   let type = [inAnalysisContext.mSemanticContext.mTypeMap searchKey !self.mTypeName]
#--- This type is an @object type
  if [[expression.mResultType definition].mTypeKindEnum isClassType]then
  #--- Check expression type is a descendant of named type
    var @unifiedTypeMapEntry t = type
    var @bool found = t == expression.mResultType
    loop ([inAnalysisContext.mSemanticContext.mTypeMap count] + 1)
    while (not found) & not [[t definition].mSuperType isNull] do
      t = [t definition].mSuperType
      found = t == expression.mResultType
    end
    if not found then
      error self.mTypeName
      :"the '@" + self.mTypeName + "' is not a descendant of the '@"
      + [expression.mResultType definition].mTypeName.string + "' type of the cast expression"
    end
  elsif [expression.mResultType definition].mTypeName.string != "object" then
    error expression.mLocation:
      "cast expression should be a class instance or an @object instance: it is an @"
     +  [expression.mResultType definition].mTypeName.string + " instance"
  end
#--- Generate expression
  if [expression.mResultType definition].mTypeName.string == "object" then
    outExpression = @extractObjectInExpressionForGeneration.new {
      !type
      !self.mEndOfReceiverExpression
      !expression
      !self.mTypeName.string}
  else
    outExpression = @castInExpressionForGeneration.new {
      !type
      !self.mTypeName.location
      !expression
      !self.mTypeName.string
      !type
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @testDynamicClassInExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mReceiverExpression
  private let @dynamicTypeComparisonKind mTypeComparisonKind
  private let @unifiedTypeMapEntry mCastType
}

#·····················································································································

override method @testDynamicClassInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  let typeNameRepresentation = [[self.mCastType definition].mTypeName.string identifierRepresentation]
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverExpression
  ]
#--- Generated test
  [self.mCastType addHeaderFileName !?ioInclusionSet]
  switch self.mTypeComparisonKind
  case equal :
    outCppExpression = "GALGAS_bool (" + receiverExpression
      + ".dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_"
      + typeNameRepresentation + ")"
  case inherited :
    outCppExpression = "GALGAS_bool (NULL != dynamic_cast <const cPtr_"
    + typeNameRepresentation
    + " *> (" + receiverExpression + ".ptr ()))"
  case strictlyInherited :
    outCppExpression = "GALGAS_bool ((" + receiverExpression
      + ".dynamicTypeDescriptor () != & kTypeDescriptor_GALGAS_"
      + typeNameRepresentation + ") && (NULL != dynamic_cast <const cPtr_"
    + typeNameRepresentation
    + " *> (" + receiverExpression + ".ptr ())))"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @castInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mCastType addHeaderFileName !?ioInclusionSet] 
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverExpression
  ]
#---
  ioGeneratedCode += "GALGAS_" + [self.mTypeName identifierRepresentation]
  + " " + outCppExpression + " ;\n"
  + "if (" + receiverExpression + ".isValid ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
#--- 
  ioGeneratedCode +=
    "if (NULL != dynamic_cast <const cPtr_"
  + [self.mTypeName identifierRepresentation]
  + " *> (" + receiverExpression + ".ptr ())) {\n"
  + "  " + outCppExpression + " = (cPtr_" + [self.mTypeName identifierRepresentation] + " *) "
  + receiverExpression + ".ptr () ;\n"
  + "}else{\n"
  [!?ioGeneratedCode incIndentation !2]
  ioGeneratedCode +=
    compilerCppName () + "->castError (\""
  + [self.mTypeName identifierRepresentation] 
  + "\", " + receiverExpression + ".ptr ()->classDescriptor ()"
  + [self.mLocation commaSourceFile] + ") ;\n"
  [!?ioGeneratedCode decIndentation !2]
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  ioGeneratedCode += "}\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extractObjectInExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mReceiverExpression
  private let @string mTypeName
}

#·····················································································································

override method @extractObjectInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverExpression
  ]
#--- Generate code
  outCppExpression = "GALGAS_" + [self.mResultType identifierRepresentation]
  + "::extractObject (" + receiverExpression
  + ", " + compilerCppName ()
  + [self.mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
