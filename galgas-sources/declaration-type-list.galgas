//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//   AST
//--------------------------------------------------------------------------------------------------

class @listDeclarationAST : @semanticDeclarationAST {
  private let @lstring mListTypeName
  private let @propertyInCollectionListAST mPropertyList
  private let @bool usefullList %initArgLabel
  private let @bool equatable %initArgLabel
}

//--------------------------------------------------------------------------------------------------
//   SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3DeclarationsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $list$
    $@type$ ?let @lstring listTypeName indexing listDefinition, structDefinition ".element"
    var isUsefull = false
    var isEquatable = false
    repeat
    while
      $%equatable$
      if isEquatable then
        error .here : "duplicate attribute" fixit { remove }
      end
      isEquatable = true
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    ${$
    var @propertyInCollectionListAST propertyList = @()
    repeat
    while
      <property_declaration_ggs3> !?ioDeclarations !?propertyList
    while
      <method_declaration_ggs3> !listTypeName !?ioDeclarations
    end
    if [propertyList count] == 0 then
      error .here : "a list declaration must declare at least one property"
    end
    $}$
    ioDeclarations.mDeclarationList += !@listDeclarationAST {
      !isPredefined: false
      !listTypeName
      !propertyList
      !usefullList: isUsefull
      !equatable: isEquatable
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4DeclarationsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $list$
    $@type$ ?let @lstring listTypeName indexing listDefinition, structDefinition ".element"
    var isUsefull = false
    var isEquatable = false
    repeat
    while
      $%equatable$
      if isEquatable then
        error .here : "duplicate attribute" fixit { remove }
      end
      isEquatable = true
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { remove }
      end
      isUsefull = true
    end
    ${$
    var @propertyInCollectionListAST propertyList = @()
    repeat
    while
      <property_declaration> !?ioDeclarations !?propertyList
    while
      <method_declaration> !listTypeName !?ioDeclarations
    end
    $}$
    ioDeclarations.mDeclarationList += !@listDeclarationAST {
      !isPredefined: false // Is not predefined
      !listTypeName
      !propertyList
      !usefullList: isUsefull
      !equatable: isEquatable
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//   ENTER IN GRAPH
//--------------------------------------------------------------------------------------------------

override getter @listDeclarationAST keyRepresentation
  ->@string {
  result = "list @" + self.mListTypeName
}

//--------------------------------------------------------------------------------------------------

override method @listDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring {!"@" + self.mListTypeName !self.mListTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for (* propertyTypeName 4*) in self.mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring {!"@" + propertyTypeName !propertyTypeName.location}]
  end
}

//--------------------------------------------------------------------------------------------------
//   SEMANTIC ANALYSIS
//--------------------------------------------------------------------------------------------------

override method @listDeclarationAST enterDeclarationInSemanticContext
  ?!@equatableExtensionMap ioEquatableExtensionMap
  ?let @extensionInitializerForBuildingContext inExtensionInitializerMapForBuildingContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
//--- Handle attributes
  var @typedPropertyList typedAttributeList = @()
  for (* propertyTypeName mPropertyName unused accessControl hasSelector initExpression) in self.mPropertyList do
    if [initExpression isSome] then
      error mPropertyName : "property initialization is not handled for a list"
    end
    [!?ioTypeMap makeEntry !propertyTypeName ?let attributeTypeIndex]
    typedAttributeList += !attributeTypeIndex !mPropertyName !initExpression !hasSetter: true !hasSelector: hasSelector
  end
//--- uint type index
  [!?ioTypeMap makeEntryFromString !"uint" ?let uintType]
//--- List type index
  [!?ioTypeMap makeEntry !self.mListTypeName ?let listTypeIndex]
//--- Element type index
  [!?ioTypeMap makeEntry
    !makeEmbeddedElementTypeLName (!self.mListTypeName)
    ?let @unifiedTypeMapEntry listElementType
  ]
//--- Property description
  var @enumerationDescriptorList enumerationDescriptor = @()
  var @functionSignature constructorAttributeTypeList = @()
  var @formalParameterSignature setterOutputFormalArgumentList = @()
  var @formalParameterSignature setterInputFormalArgumentList = @()
  for (mPropertyTypeEntry mPropertyName * * mHasSelector) in typedAttributeList do
    let selector = if mHasSelector then mPropertyName.string else "" end
    enumerationDescriptor += !mPropertyTypeEntry !mPropertyName.string
    constructorAttributeTypeList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !mPropertyName.string
      !true
    setterOutputFormalArgumentList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !.argumentOut
      !mPropertyName.string
    setterInputFormalArgumentList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !.argumentConstantIn
      !mPropertyName.string
  end
//--- Class functions
  var @classFunctionMap classFunctionMap = @()
  enterClassFunctionWithoutArgument (
    !?classFunctionMap
    !?ioTypeMap
    !name:"emptyList"
    !resultTypeName:self.mListTypeName.string
    !hasLexiqueArg:false
  )
  [!?classFunctionMap insertKey
    !@lstring {!"listWithValue" !@location.here}
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ]
//--- Getters
  commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap )
  enterBaseGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"count"
    !obsoleteName: "length"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterBaseGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"range"
    !obsoleteName: ""
    !returnedTypeName:"range"
    !hasCompilerArgument:false
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "subListFromIndex"
    !argSelector: "" !argType: "uint" !argName: "inIndex"
    !returnedTypeName:self.mListTypeName.string
    !hasCompilerArgument:true
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "subListToIndex"
    !argSelector: "" !argType: "uint" !argName: "inIndex"
    !returnedTypeName:self.mListTypeName.string
    !hasCompilerArgument:true
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "subListWithRange"
    !argSelector: "" !argType: "range" !argName: "inRange"
    !returnedTypeName:self.mListTypeName.string
    !hasCompilerArgument:true
  )
  for (mPropertyTypeEntry mPropertyName 3*) in typedAttributeList do
    [!?getterMap insertOrReplace
      !@lstring {!mPropertyName.string + "AtIndex" !mPropertyName.location}
      !@methodKind.definedAsMember
      !@functionSignature @[@(["" nowhere], uintType, "inIndex", true)]
      !@location.here
      !true
      !mPropertyTypeEntry
      !@methodQualifier.isBasic
      !"" // getter name is not obsolete, no replacement getter
    ]
  end
//------------------------ Instance methods
  var @instanceMethodMap instanceMethodMap = @()
  [!?instanceMethodMap insertKey
    !@lstring {!"first" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?instanceMethodMap insertKey
    !@lstring {!"last" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !""
  ]
//---------------------------------------- Modifiers
  var @setterMap setterMap = @()
  [!?setterMap insertOrReplace
    !@lstring {!"append" !@location.here}
    !@methodKind.definedAsMember
    !setterInputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?setterMap insertOrReplace
    !@lstring {!"popFirst" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?setterMap insertOrReplace
    !@lstring {!"popLast" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  setterOutputFormalArgumentList += !["" nowhere] !uintType !.argumentConstantIn !"inIndex"
  [!?setterMap insertOrReplace
    !@lstring {!"removeAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  for (mPropertyTypeEntry mPropertyName * mHasSetter *) in typedAttributeList do
    if mHasSetter then
      var setterFormalArgumentList = @formalParameterSignature ()
      setterFormalArgumentList += !["" nowhere] !mPropertyTypeEntry !.argumentConstantIn !mPropertyName.string
      setterFormalArgumentList += !["" nowhere] !uintType !.argumentConstantIn !mPropertyName.string
      [!?setterMap insertOrReplace
        !@lstring {!"set" + [mPropertyName.string capitalizingFirstCharacter] + "AtIndex" !mPropertyName.location}
        !@methodKind.definedAsMember
        !setterFormalArgumentList
        !true
        !@methodQualifier.isBasic
        !"" // No error message
      ]
    end
  end
//--- setter 'insertAtIndex'
  setterInputFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inInsertionIndex"
  [!?setterMap insertOrReplace
    !@lstring {!"insertAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !setterInputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !"" // No error message
  ]
//--- Add initializer without argument
  var @initializerMap initializerMap = @()
  let @functionSignature emptyArgumentList = @()
  [!?initializerMap insertKey
    !@{![emptyArgumentList initializerSignature] !self.mListTypeName}
    !emptyArgumentList
  ]
//--- Add extensions
  addExtensions (
    !inExtensionInitializerMapForBuildingContext
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mListTypeName
    !isClass: false
    !?initializerMap
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
//--- features
  var features = @typeFeatures.plusAssignOperatorWithExpression | .infixAddOperator
  if self.equatable then
    features |= .equatable
  end
  handleEquatableComparableExtension (
    !?ioEquatableExtensionMap
    !self.mListTypeName
    !?features
    !acceptEquatable: true
    !acceptComparable: false
  )
//--- Enter in type map
  let typeDefinition = @unifiedTypeDefinition {
    !typeName: self.mListTypeName
    !isPredefined: self.isPredefined
    !isConcrete: true // Concrete Type
    !superType: .null
    !typeKind: .listType
    !supportCollectionValue: true // Support collection value
    !allTypedPropertyList: typedAttributeList
    !propertyMap: @()
    !currentTypedPropertyList: @()
    !initializerMap: initializerMap
    !classFunctionMap: classFunctionMap
    !getterMap: getterMap
    !setterMap: setterMap
    !instanceMethodMap: instanceMethodMap
    !classMethodMap: @()
    !unwrappedType: .null
    !readSubscriptMap: @()
    !enumerationDescriptorList: enumerationDescriptor
    !features: features
    !addAssignOperatorArguments: constructorAttributeTypeList
    !generateHeaderInSeparateFile: false
    !typeForEnumeratedElement: listElementType
    !headerFileName: "list-" + [self.mListTypeName fileNameRepresentation]
    !headerKind: .oneHeader
  }
  [!?ioTypeMap insertType !typeDefinition.typeName !typeDefinition]
}

//--------------------------------------------------------------------------------------------------

override method @listDeclarationAST addAssociatedElement
  ?!@galgasDeclarationAST ioDeclarations {
  var @propertyInCollectionListAST structAttributeList = @()
  for (mutability qualifiedTypeAST mPropertyName * hasSelector initExpression) in self.mPropertyList do
    structAttributeList +=
      !mutability: mutability
      !qualifiedTypeAST
      !mPropertyName
      !.publicAccess
      !hasSelector: hasSelector
      !initialization: initExpression
  end
  ioDeclarations.mDeclarationList += !@structDeclarationAST {
    !isPredefined: self.isPredefined
    !makeEmbeddedElementTypeLName (!self.mListTypeName)
    !structAttributeList
    !enumeratedElementTypeName: ""
    !comparison: if self.equatable then .equatable else .none end
    !isUsefullStruct: true
  }
}


//--------------------------------------------------------------------------------------------------
//   ENTER IN SEMANTIC CONTEXT
//--------------------------------------------------------------------------------------------------

override method @listDeclarationAST semanticAnalysis
          ?!@lstringlist ioUsefulnessRootEntities
          ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
          ?let @string unused inProductDirectory
          ?let @semanticContext unused inSemanticContext
          ?!@unifiedTypeMap ioTypeMap
          ?let @predefinedTypes unused inPredefinedTypes
          ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
//--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mListTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  if self.usefullList || self.isPredefined  then
    ioUsefulnessRootEntities += !nameForUsefulness
  end
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (
    !makeEmbeddedElementTypeLName (!self.mListTypeName)
  )
  [!?ioUsefulEntitiesGraph addEdge !from: nameForUsefulness !to: elementTypeNameForUsefulness]
  if self.usefullList || self.isPredefined  then
    ioUsefulnessRootEntities += !elementTypeNameForUsefulness
  end
//--- Useful entities graph for initializer without any argument
  let initializerNameForUsefulness = initializerNameForUsefulEntitiesGraph (
    !self.mListTypeName
    ![@formalInputParameterListAST () initializerSignature]
  )
  [!?ioUsefulEntitiesGraph addNode !initializerNameForUsefulness !initializerNameForUsefulness]
  [!?ioUsefulEntitiesGraph addEdge !from: initializerNameForUsefulness !to: nameForUsefulness]
  if self.usefullList || self.isPredefined then
    ioUsefulnessRootEntities += !initializerNameForUsefulness
  end
//---
  var @typedPropertyList typedAttributeList = @()
  var @propertyIndexMap attributeMap = @()
  for (* propertyTypeName propertyName unused accessControl hasSelector initExpression) in self.mPropertyList do
    if [initExpression isSome] then
      error propertyName : "property initialization is not handled for a list"
    end
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!propertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !from: nameForUsefulness !to: propertyTypeNameForUsefulness]
    let t = [ioTypeMap typeMapEntryForLKey !propertyTypeName]
    typedAttributeList +=
      !t
      !propertyName
      !initExpression
      !hasSetter: true // not isConstant
      !hasSelector: hasSelector
    [!?attributeMap insertKey !propertyName !t]
  end
//---
  let selfType = [ioTypeMap typeMapEntryForLKey !self.mListTypeName]
  ioSemanticDeclarationListForGeneration +=
    !infoMessage: "list type " + self.mListTypeName
    !@listTypeForGeneration {
      !selfType
      ![ioTypeMap typeMapEntryForLKey !makeEmbeddedElementTypeLName (!self.mListTypeName)]
      !typedAttributeList
    }
}

//--------------------------------------------------------------------------------------------------
//   CODE GENERATION
//--------------------------------------------------------------------------------------------------

class @listTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry mListElementTypeIndex
  private let @typedPropertyList mTypedAttributeList
}

//--------------------------------------------------------------------------------------------------

override method @listTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  let selfTypeDefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper listGenerationTemplate.listTypeHeader1
    !selfTypeDefinition.typeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
    !selfTypeDefinition.enumerationDescriptorList
    !selfTypeDefinition.typeForEnumeratedElement
    ![selfTypeDefinition.typeForEnumeratedElement identifierRepresentation]
    ![selfTypeDefinition.features generateCppObjectComparison]
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !selfTypeDefinition.typeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !selfTypeDefinition.isConcrete
    !selfTypeDefinition.initializerMap
    !selfTypeDefinition.classFunctionMap
    !selfTypeDefinition.getterMap
    !selfTypeDefinition.setterMap
    !selfTypeDefinition.instanceMethodMap
    !selfTypeDefinition.classMethodMap
    !selfTypeDefinition.readSubscriptMap
    !selfTypeDefinition.enumerationDescriptorList
    !selfTypeDefinition.features
    !selfTypeDefinition.addAssignOperatorArguments
    !selfTypeDefinition.typeForEnumeratedElement
    !selfTypeDefinition.supportCollectionValue
  ]
}

//--------------------------------------------------------------------------------------------------

override method @listTypeForGeneration appendSpecificImplementation
                                        ?let @unifiedTypeMap unused inTypeMap
                                        ?!@stringset ioInclusionSet
                                        !@string outImplementation {
  for (t 4*) in self.mTypedAttributeList do
    [t addHeaderFileName !?ioInclusionSet]
  end
  [self.mListElementTypeIndex addHeaderFileName !?ioInclusionSet]
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  let selfTypeDefinition = [self.mSelfTypeEntry definition]
  outImplementation = [filewrapper listGenerationTemplate.listTypeSpecificImplementation
    !selfTypeDefinition.typeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
    ![selfTypeDefinition.typeForEnumeratedElement identifierRepresentation]
    ![selfTypeDefinition.features generateCppObjectComparison]
  ]
 }

//--------------------------------------------------------------------------------------------------

filewrapper listGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template listTypeHeader1 "GALGAS_list.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@enumerationDescriptorList ENUMERATION_DESCRIPTOR_LIST
    ?@unifiedTypeMapEntry ENUMERATED_OBJECT_TYPE
    ?@string ELEMENT_TYPE_IDENTIFIER
    ?@bool GENERATE_COMPARISON

  template listTypeSpecificImplementation "GALGAS_list.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@string ELEMENT_TYPE_IDENTIFIER
    ?@bool GENERATE_COMPARISON
}

//--------------------------------------------------------------------------------------------------

