#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3DeclarationsSyntax (galgasScanner3) {

  #·······························································································
  #          Start symbol
  #·······························································································

  rule <start_symbol_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    repeat
    while
      <declaration_ggs3> !?ioDeclarations
    end
  }

  #·······························································································
  #          Rules prototypes
  #·······························································································

  rule <formal_parameter_list_ggs34> ?!@galgasDeclarationAST ioDeclarations
                                    !@formalParameterListAST outFormalParameterList

  rule <semantic_instruction_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                        !@semanticInstructionListAST outInstructionsList

  rule <formal_input_parameter_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                          !@formalInputParameterListAST outFormalInputParameterList

  rule <formal_input_parameter_list_ggs34> ?!@galgasDeclarationAST ioDeclarations
                                           !@formalInputParameterListAST outFormalInputParameterList

  rule <expression_ggs3> ?!@galgasDeclarationAST ioDeclarations
                         !@semanticExpressionAST outExpression

  #·······························································································
  #    PROPERTY IN COLLECTION
  #·······························································································

  rule <property_declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   ?!@propertyInCollectionListAST ioAttributeInCollectionList {
    <acces_control> ?let accessControl
    let @bool isConstant
    select
      $var$
      isConstant = false
    or
      $let$
      [accessControl checkCompatibilityWithLet !.here]
      isConstant = true
    end
    <type_definition_ggs3> !?ioDeclarations ?let propertyTypeName
    $identifier$ ?let propertyName
    let @bool selectorAttribute
    let @propertyInCollectionInitializationAST initialization
    select
      initialization = .none
      selectorAttribute = false
    or
      $%initArgLabel$
      initialization = .none
      selectorAttribute = true
    or
      $=$
      <expression_ggs3> !?ioDeclarations ?let expression
      initialization = .some {!expression: expression}
      selectorAttribute = false
    end
    ioAttributeInCollectionList +=
      !isConstant: isConstant
      !propertyTypeName
      !propertyName
      !accessControl
      !hasSelector: selectorAttribute
      !initialization: initialization
  }

  #·······························································································

  rule <property_declaration_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                                   ?!@propertyInCollectionListAST ioAttributeInCollectionList {
    $@type$ ?let propertyTypeName // Ne pas utiliser <type_definition_ggs3>
    $identifier$ ?let propertyName
    ioAttributeInCollectionList +=
      !isConstant: false
      !propertyTypeName
      !propertyName
      !.publicAccess
      !hasSelector: false
      !initialization: .none
    if [option galgas_cli_options.errorOldStylePropertyDeclaration value] then
      let errorLocation = [propertyTypeName.location union !propertyName.location]
      error errorLocation
      : "old style property declaration (due to '--error-old-style-property-declaration' option)"
    end
  }


  #·······························································································
  #! Filewrapper Declaration
  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !false # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }
  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $private$
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !true # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }

  #·······························································································

  rule <filewrapper_text_files> !@lstringlist outFilewrapperTextFileExtensionList {
    outFilewrapperTextFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperTextFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_binary_files> !@lstringlist outFilewrapperBinaryFileExtensionList {
    outFilewrapperBinaryFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperBinaryFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_templates> ?!@galgasDeclarationAST ioDeclarations
                               !@filewrapperTemplateListAST outFilewrapperTemplateList {
    ${$
    outFilewrapperTemplateList = ()
    repeat
    while
      $template$
      $identifier$ ?let mFilewrapperTemplateName
      $"string"$ ?let mFilewrapperTemplatePath
      var @formalTemplateInputParameterListAST filewrapperTemplateFormalInputParameters = ()
      repeat
      while
        $?selector:$ ?let selector
        <type_definition_ggs3> !?ioDeclarations ?let typeName
        let @bool isUnused
        select
          isUnused = false
        or
          $unused$
          isUnused = true
        end
        $identifier$ ?let argumentName
        filewrapperTemplateFormalInputParameters += !selector !typeName !argumentName !isUnused
      while
        $?$
        let selector = ["" here]
        <type_definition_ggs3> !?ioDeclarations ?let typeName
        let @bool isUnused
        select
          isUnused = false
        or
          $unused$
          isUnused = true
        end
        $identifier$ ?let argumentName
        filewrapperTemplateFormalInputParameters += !selector !typeName !argumentName !isUnused
      end
      outFilewrapperTemplateList +=
        !mFilewrapperTemplateName
        !mFilewrapperTemplatePath
        !filewrapperTemplateFormalInputParameters
    end
    $}$
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas4DeclarationsSyntax (galgasScanner4) {

  #·······························································································
  #          Start symbol
  #·······························································································

  rule <start_symbol> ?!@galgasDeclarationAST ioDeclarations {
    repeat
    while
      <declaration> !?ioDeclarations
    end
  }

  #·······························································································
  #          Rules prototypes
  #·······························································································

  rule <formal_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                               !@formalParameterListAST outFormalParameterList

  rule <semantic_instruction_list> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionListAST outInstructionsList

  rule <formal_input_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                                     !@formalInputParameterListAST outFormalInputParameterList

  rule <expression> ?!@galgasDeclarationAST ioDeclarations
                    !@semanticExpressionAST outExpression

  rule <type_definition> ?!@galgasDeclarationAST ioDeclarations
                         !@lstring outTypeName

  #·······························································································
  #    A T T R I B U T E    I N    C O L L E C T I O N
  #·······························································································

  rule <property_declaration> ?!@galgasDeclarationAST ioDeclarations
                              ?!@propertyInCollectionListAST ioAttributeInCollectionList {
    <acces_control> ?let accessControl
    let @bool isConstant
    select
      $var$
      isConstant = false
    or
      $let$
      [accessControl checkCompatibilityWithLet !.here]
      isConstant = true
    end
    <type_definition> !?ioDeclarations ?let propertyTypeName
    $identifier$ ?let propertyName
    var selectorAttribute = false
    repeat
    while
      $%initArgLabel$
      selectorAttribute = true
    end
    let @propertyInCollectionInitializationAST initialization
    select
      initialization = .none
    or
      $=$
      <expression> !?ioDeclarations ?let expression
      initialization = .some {!expression: expression}
    end
    ioAttributeInCollectionList +=
      !isConstant: isConstant
      !propertyTypeName
      !propertyName
      !accessControl
      !hasSelector: selectorAttribute
      !initialization: initialization
  }

  #·······························································································
  #! Filewrapper Declaration
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !false # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $private$
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !true # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }

  #·······························································································

  rule <filewrapper_text_files> !@lstringlist outFilewrapperTextFileExtensionList {
    outFilewrapperTextFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperTextFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_binary_files> !@lstringlist outFilewrapperBinaryFileExtensionList {
    outFilewrapperBinaryFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperBinaryFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_templates> ?!@galgasDeclarationAST ioDeclarations
                               !@filewrapperTemplateListAST outFilewrapperTemplateList {
    ${$
    outFilewrapperTemplateList = ()
    repeat
    while
      $template$
      $identifier$ ?let mFilewrapperTemplateName
      $:$
      $"string"$ ?let mFilewrapperTemplatePath
      var @formalTemplateInputParameterListAST filewrapperTemplateFormalInputParameters = ()
      $($
      select
      or
        repeat
          let @lstring selector
          select
            selector = ["" nowhere]
          or
            $?$
            selector = ["" nowhere]
          or
            $?selector:$ ?selector
          end
          <type_definition> !?ioDeclarations ?let typeName
          let @bool isUnused
          select
            isUnused = false
          or
            $unused$
            isUnused = true
          end
          $identifier$ ?let argumentName
          filewrapperTemplateFormalInputParameters += !selector !typeName !argumentName !isUnused
        while
          $,$
        end
      end
      $)$
      outFilewrapperTemplateList +=
        !mFilewrapperTemplateName
        !mFilewrapperTemplatePath
        !filewrapperTemplateFormalInputParameters
    end
    $}$
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
