#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3DeclarationsSyntax (galgasScanner3) {

  #·······························································································
  #          Start symbol
  #·······························································································

  rule <start_symbol_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    repeat
    while
      <declaration_ggs3> !?ioDeclarations
    end
  }

  #·······························································································
  #          Rules prototypes
  #·······························································································

  rule <formal_parameter_list_ggs34> ?!@galgasDeclarationAST ioDeclarations
                                    !@formalParameterListAST outFormalParameterList

  rule <semantic_instruction_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                        !@semanticInstructionListAST outInstructionsList

  rule <formal_input_parameter_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                          !@formalInputParameterListAST outFormalInputParameterList

  rule <formal_input_parameter_list_ggs34> ?!@galgasDeclarationAST ioDeclarations
                                           !@formalInputParameterListAST outFormalInputParameterList

  rule <expression_ggs3> ?!@galgasDeclarationAST ioDeclarations
                         !@semanticExpressionAST outExpression

  #·······························································································
  #! Filewrapper Declaration
  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !false # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }
  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $private$
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !true # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }

  #·······························································································

  rule <filewrapper_text_files> !@lstringlist outFilewrapperTextFileExtensionList {
    outFilewrapperTextFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperTextFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_binary_files> !@lstringlist outFilewrapperBinaryFileExtensionList {
    outFilewrapperBinaryFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperBinaryFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_templates> ?!@galgasDeclarationAST ioDeclarations
                               !@filewrapperTemplateListAST outFilewrapperTemplateList {
    ${$
    outFilewrapperTemplateList = ()
    repeat
    while
      $template$
      $identifier$ ?let mFilewrapperTemplateName
      $"string"$ ?let mFilewrapperTemplatePath
      var @formalTemplateInputParameterListAST filewrapperTemplateFormalInputParameters = ()
      repeat
      while
        $?selector:$ ?let selector
        <type_definition_ggs3> !?ioDeclarations ?let typeName
        let @bool isUnused
        select
          isUnused = false
        or
          $unused$
          isUnused = true
        end
        $identifier$ ?let argumentName
        filewrapperTemplateFormalInputParameters += !selector !typeName !argumentName !isUnused
      while
        $?$
        let selector = ["" here]
        <type_definition_ggs3> !?ioDeclarations ?let typeName
        let @bool isUnused
        select
          isUnused = false
        or
          $unused$
          isUnused = true
        end
        $identifier$ ?let argumentName
        filewrapperTemplateFormalInputParameters += !selector !typeName !argumentName !isUnused
      end
      outFilewrapperTemplateList +=
        !mFilewrapperTemplateName
        !mFilewrapperTemplatePath
        !filewrapperTemplateFormalInputParameters
    end
    $}$
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas4DeclarationsSyntax (galgasScanner4) {

  #·······························································································
  #          Start symbol
  #·······························································································

  rule <start_symbol> ?!@galgasDeclarationAST ioDeclarations {
    repeat
    while
      <declaration> !?ioDeclarations
    end
  }

  #·······························································································
  #          Rules prototypes
  #·······························································································

  rule <formal_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                               !@formalParameterListAST outFormalParameterList

  rule <semantic_instruction_list> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionListAST outInstructionsList

  rule <formal_input_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                                     !@formalInputParameterListAST outFormalInputParameterList

  rule <expression> ?!@galgasDeclarationAST ioDeclarations
                    !@semanticExpressionAST outExpression

  rule <type_definition> ?!@galgasDeclarationAST ioDeclarations
                         !@lstring outTypeName

  #·······························································································
  #! Filewrapper Declaration
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !false # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $private$
    $filewrapper$
    $identifier$ ?let @lstring mFilewrapperName indexing filewrapperDefinition
    $in$
    $"string"$ ?let @lstring mFilewrapperPath
    <filewrapper_text_files> ?let filewrapperTextFileExtensionList
    <filewrapper_binary_files> ?let filewrapperBinaryFileExtensionList
    <filewrapper_templates> !?ioDeclarations ?let filewrapperTemplateList
    ioDeclarations.mDeclarationList += !@filewrapperDeclarationAST {
      !isPredefined: false # Is not predefined
      !true # private
      !@string.stringWithSourceFilePath
      !mFilewrapperName
      !mFilewrapperPath
      !filewrapperTextFileExtensionList
      !filewrapperBinaryFileExtensionList
      !filewrapperTemplateList
    }
  }

  #·······························································································

  rule <filewrapper_text_files> !@lstringlist outFilewrapperTextFileExtensionList {
    outFilewrapperTextFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperTextFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_binary_files> !@lstringlist outFilewrapperBinaryFileExtensionList {
    outFilewrapperBinaryFileExtensionList = ()
    ${$
    select
    or
      repeat
        $"string"$ ?let @lstring pathExtension
        outFilewrapperBinaryFileExtensionList += !pathExtension
      while
        $,$
      end
    end
    $}$
  }

  #·······························································································

  rule <filewrapper_templates> ?!@galgasDeclarationAST ioDeclarations
                               !@filewrapperTemplateListAST outFilewrapperTemplateList {
    ${$
    outFilewrapperTemplateList = ()
    repeat
    while
      $template$
      $identifier$ ?let mFilewrapperTemplateName
      $:$
      $"string"$ ?let mFilewrapperTemplatePath
      var @formalTemplateInputParameterListAST filewrapperTemplateFormalInputParameters = ()
      $($
      select
      or
        repeat
          let @lstring selector
          select
            selector = ["" nowhere]
          or
            $?$
            selector = ["" nowhere]
          or
            $?selector:$ ?selector
          end
          <type_definition> !?ioDeclarations ?let typeName
          let @bool isUnused
          select
            isUnused = false
          or
            $unused$
            isUnused = true
          end
          $identifier$ ?let argumentName
          filewrapperTemplateFormalInputParameters += !selector !typeName !argumentName !isUnused
        while
          $,$
        end
      end
      $)$
      outFilewrapperTemplateList +=
        !mFilewrapperTemplateName
        !mFilewrapperTemplatePath
        !filewrapperTemplateFormalInputParameters
    end
    $}$
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
