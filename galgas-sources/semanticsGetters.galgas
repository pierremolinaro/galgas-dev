#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  semantics definitions for semantics component
#
#  Copyright (C) 2009, ..., 2024 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterBaseFinalGetterWithoutArgument ?!@getterMap ioGetterMap
                                         ?!@unifiedTypeMap ioUnifiedTypeMap
                                         ?getterName:let @string inGetterName
                                         ?obsoleteName: let @string inObsoleteGetterName
                                         ?returnedTypeName:let @string inReturnedTypeName
                                         ?hasCompilerArgument:let @bool inHasCompilerArgument {
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !.here}
    !@methodKind.definedAsMember
    !@functionSignature <[]>
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier.isBasicFinal
    !"" # getter name is not obsolete, no replacement getter
  ]
  if inObsoleteGetterName != "" then
    [!?ioGetterMap insertOrReplace
      !@lstring.new {!inObsoleteGetterName !.here}
      !@methodKind.definedAsMember
      !@functionSignature <[]>
      !@location.here
      !inHasCompilerArgument
      !returnedTypeIndex
      !@methodQualifier.isBasicFinal
      !inGetterName # getter name is obsolete, replacement getter
    ]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterInheritedGetterWithoutArgument ?!@getterMap ioGetterMap
                                          ?!@unifiedTypeMap ioUnifiedTypeMap
                                          ?getterName:let @string inGetterName
                                          ?obsoleteName: let @string inObsoleteGetterName
                                          ?returnedTypeName:let @string inReturnedTypeName
                                          ?hasCompilerArgument:let @bool inHasCompilerArgument {
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind.definedAsMember
    !@functionSignature <[]>
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isInherited
    !"" # getter name is not obsolete, no replacement getter
  ]
  if inObsoleteGetterName != "" then
    [!?ioGetterMap insertOrReplace
      !.new {!inObsoleteGetterName !.here}
      !@methodKind.definedAsMember
      !@functionSignature <[]>
      !@location.here
      !inHasCompilerArgument
      !returnedTypeIndex
      !@methodQualifier. isInherited
      !inGetterName
    ]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterInheritedGetterWithArgument
  ?!@getterMap ioGetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?getterName:let @string inGetterName
  ?argumentTypeName:let @string inArgument1TypeName
  ?argumentName:let @string inArgument1Name
  ?returnedTypeName:let @string inReturnedTypeName
  ?hasCompilerArgument:let @bool inHasCompilerArgument
 {
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var @functionSignature argList = <[]>
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?let t]
  argList += !["" nowhere] !t !inArgument1Name !true
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isInherited
    !"" # getter name is not obsolete, no replacement getter
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterInheritedGetterWith2Arguments
  ?!@getterMap ioGetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?let @string inGetterName
  ?let @string inArgument1TypeName
  ?let @string inArgument1Name
  ?let @string inArgument2TypeName
  ?let @string inArgument2Name
  ?returnedTypeName:let @string inReturnedTypeName
  ?hasCompilerArgument:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var @functionSignature argList = <[]>
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?@unifiedTypeMapEntry t]
  argList += !["" nowhere] !t !inArgument1Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument2TypeName ?t]
  argList += !["" nowhere] !t !inArgument2Name !true
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isInherited
    !"" # getter name is not obsolete, no replacement getter
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterBaseGetterWithoutArgument ?!@getterMap ioGetterMap
                                    ?!@unifiedTypeMap ioUnifiedTypeMap
                                    ?getterName: let @string inGetterName
                                    ?obsoleteName: let @string inObsoleteGetterName
                                    ?returnedTypeName:let @string inReturnedTypeName
                                    ?hasCompilerArgument:let @bool inHasCompilerArgument {
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind.definedAsMember
    !@functionSignature <[]>
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isBasic
    !"" # getter name is not obsolete, no replacement getter
  ]
  if inObsoleteGetterName != "" then
    [!?ioGetterMap insertOrReplace
      !@lstring.new {!inObsoleteGetterName !.here}
      !@methodKind.definedAsMember
      !@functionSignature <[]>
      !@location.here
      !inHasCompilerArgument
      !returnedTypeIndex
      !@methodQualifier.isBasicFinal
      !inGetterName # getter name is obsolete, replacement getter
    ]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterBaseGetterWithArgument
  ?!@getterMap ioGetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?getterName: let @string inGetterName
  ?argSelector: let @string inArgument1Selector
  ?argType: let @string inArgument1TypeName
  ?argName: let @string inArgument1Name
  ?returnedTypeName:let @string inReturnedTypeName
  ?hasCompilerArgument:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var @functionSignature argList = <[]>
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?let t]
  argList += ![inArgument1Selector nowhere] !t !inArgument1Name !true
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isBasic
    !"" # getter name is not obsolete, no replacement getter
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterBaseFinalGetterWithArgument
  ?!@getterMap ioGetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?getterName:let @string inGetterName
  ?let @string inArgument1TypeName
  ?let @string inArgument1Name
  ?returnedTypeName:let @string inReturnedTypeName
  ?hasCompilerArgument:let @bool inHasCompilerArgument
 {
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var @functionSignature argList = <[]>
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?let t]
  argList += !["" nowhere] !t !inArgument1Name !true
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isBasicFinal
    !"" # getter name is not obsolete, no replacement getter
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterBaseGetterWith2Arguments
  ?!@getterMap ioGetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?getterName: let @string inGetterName
  ?arg1Selector: let @string inArgument1Selector
  ?arg1TypeName: let @string inArgument1TypeName
  ?arg1Name: let @string inArgument1Name
  ?arg2Selector: let @string inArgument2Selector
  ?arg2TypeName: let @string inArgument2TypeName
  ?arg2Name: let @string inArgument2Name
  ?returnedTypeName:let @string inReturnedTypeName
  ?hasCompilerArgument:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var @functionSignature argList = <[]>
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?@unifiedTypeMapEntry t]
  argList += ![inArgument1Selector nowhere] !t !inArgument1Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument2TypeName ?t]
  argList += ![inArgument2Selector nowhere] !t !inArgument2Name !true
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isBasic
    !"" # getter name is not obsolete, no replacement getter
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterBaseFinalGetterWith2Arguments
  ?!@getterMap ioGetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?getterName:let @string inGetterName
  ?let @string inArgument1TypeName
  ?let @string inArgument1Name
  ?let @string inArgument2TypeName
  ?let @string inArgument2Name
  ?returnedTypeName:let @string inReturnedTypeName
  ?hasCompilerArgument:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var @functionSignature argList = <[]>
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?@unifiedTypeMapEntry t]
  argList += !["" nowhere] !t !inArgument1Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument2TypeName ?t]
  argList += !["" nowhere] !t !inArgument2Name !true
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isBasicFinal
    !"" # getter name is not obsolete, no replacement getter
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterBaseFinalGetterWith3Arguments
  ?!@getterMap ioGetterMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?let @string inGetterName
  ?let @string inArgument1TypeName
  ?let @string inArgument1Name
  ?let @string inArgument2TypeName
  ?let @string inArgument2Name
  ?let @string inArgument3TypeName
  ?let @string inArgument3Name
  ?returnedTypeName:let @string inReturnedTypeName
  ?hasCompilerArgument:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inReturnedTypeName ?let returnedTypeIndex]
  var @functionSignature argList = <[]>
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument1TypeName ?@unifiedTypeMapEntry t]
  argList += !["" nowhere] !t !inArgument1Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument2TypeName ?t]
  argList += !["" nowhere] !t !inArgument2Name !true
  [!?ioUnifiedTypeMap makeEntryFromString !inArgument3TypeName ?t]
  argList += !["" nowhere] !t !inArgument3Name !true
  [!?ioGetterMap insertOrReplace
    !@lstring.new {!inGetterName !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !inHasCompilerArgument
    !returnedTypeIndex
    !@methodQualifier. isBasicFinal
    !"" # getter name is not obsolete, no replacement getter
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc commonGetterMapForAllTypes ?!@unifiedTypeMap ioUnifiedTypeMap
                                !@getterMap outMap {
  outMap = <[]>
  enterInheritedGetterWithoutArgument (
    !?outMap
    !?ioUnifiedTypeMap
    !getterName:"description"
    !obsoleteName: ""
    !returnedTypeName:"string"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?outMap
    !?ioUnifiedTypeMap
    !getterName:"staticType"
    !obsoleteName: ""
    !returnedTypeName:"type"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?outMap
    !?ioUnifiedTypeMap
    !getterName:"dynamicType"
    !obsoleteName: ""
    !returnedTypeName:"type"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?outMap
    !?ioUnifiedTypeMap
    !getterName:"object"
    !obsoleteName: ""
    !returnedTypeName:"object"
    !hasCompilerArgument:false
  )
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
