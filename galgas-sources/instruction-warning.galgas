#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @warningInstructionAST : @semanticInstructionAST {
  public let @semanticExpressionAST mLocationExpression
  public let @semanticExpressionAST mMessageExpression
  public let @fixitListAST mFixitListAST
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $warning$
    let instructionLocation = @location.here
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST mReceiverExpression
    $:$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST mWarningExpression
    <issue_fixit> !?ioDeclarations ?let @fixitListAST fixitListAST
    outInstruction = @warningInstructionAST {
      !instructionLocation
      !mReceiverExpression
      !mWarningExpression
      !fixitListAST
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $warning$
    let instructionLocation = @location.here
    <expression> !?ioDeclarations ?let @semanticExpressionAST mReceiverExpression
    $:$
    <expression> !?ioDeclarations ?let @semanticExpressionAST mWarningExpression
    <issue_fixit> !?ioDeclarations ?let @fixitListAST fixitListAST
    outInstruction = @warningInstructionAST {
      !instructionLocation
      !mReceiverExpression
      !mWarningExpression
      !fixitListAST
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @warningInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mLocationExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mMessageExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mFixitListAST enterFixItListInSemanticContext !?ioTypeMap]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @warningInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap {
#---
  analyzeErrorOrWarningInstruction (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mLocationExpression
    !self.mMessageExpression
    !self.mFixitListAST
    !self.mInstructionLocation
    !"warning"
    !?ioVariableMap
    ?let locationExpression
    ?let messageExpression
    ?let fixitListForGeneration
  )
#--- Generate instruction
  ioInstructionListForGeneration += !@warningInstructionForGeneration {
    !self.mInstructionLocation
    !locationExpression
    !messageExpression
    !fixitListForGeneration
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @warningInstructionForGeneration : @semanticInstructionForGeneration {
  public let @location mInstructionLocation
  public let @semanticExpressionForGeneration mReceiverExpression
  public let @semanticExpressionForGeneration mWarningExpression
  public let @fixitListForGeneration mFixitListForGeneration
}

#······················································································································

override method @warningInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
 {
#--- Receiver expression
  [self.mReceiverExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let receiverCppVarName]
#--- Receiver expression
  [self.mWarningExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let messageCppVarName
  ]
#--- Fix It array
  [self.mFixitListForGeneration generateFixIt
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
    ?let fixItArrayCppName
  ]
#--- Generate warning instruction
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  ioGeneratedCode += compilerCppName () + "->emitSemanticWarning ("
    + receiverCppVarName + ", "
    + messageCppVarName + ", "
    + fixItArrayCppName + " "
    + [self.mInstructionLocation commaSourceFile] + ") ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
