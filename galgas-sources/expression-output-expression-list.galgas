#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @actualOutputExpressionList {
  public let @lstring mActualSelector
  public let @semanticExpressionAST mExpression
  public let @location mEndOfExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <output_expression_list_ggs3> !@actualOutputExpressionList outExpressionList {
    outExpressionList = {}
    repeat
    while
      $!$ ?let selector
      <expression_ggs3> ?let @semanticExpressionAST expression
      outExpressionList += !selector !expression !.here
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <output_expression_list> !@actualOutputExpressionList outExpressionList {
    outExpressionList = {}
    select
      repeat
        let @lstring selector
        select
          $!$ ?selector
        or
          selector = ["" here]
        end
        <expression> ?let @semanticExpressionAST expression
        outExpressionList += !selector !expression !.here
      while
        $,$
      end
    or
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @actualOutputExpressionList enterInSemanticContext 
  ?!@unifiedTypeMap ioTypeMap
{
  for (* mExpression *) in self do
    [mExpression enterExpressionInSemanticContext !?ioTypeMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
