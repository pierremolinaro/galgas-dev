#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

list @actualOutputExpressionList {
  public let @lstring mActualSelector
  public let @semanticExpressionAST mExpression
  public let @location mEndOfExpressionLocation
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <output_expression_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                     !@actualOutputExpressionList outExpressionList {
    outExpressionList = {}
    repeat
    while
      $!selector:$ ?let selector
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outExpressionList += !selector !expression !.here
    while
      $!$
      let selector = ["" here]
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outExpressionList += !selector !expression !.here
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <output_expression_list> ?!@galgasDeclarationAST ioDeclarations
                                !@actualOutputExpressionList outExpressionList {
    outExpressionList = {}
    select
      repeat
        let @lstring selector
        select
          $!selector:$ ?selector
        or
          $!$
          selector = ["" here]
        or
          selector = ["" here]
        end
        <expression> !?ioDeclarations ?let @semanticExpressionAST expression
        outExpressionList += !selector !expression !.here
      while
        $,$
      end
    or
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

method @actualOutputExpressionList enterInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for (* mExpression *) in self do
    [mExpression enterExpressionInSemanticContext !?ioTypeMap]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
