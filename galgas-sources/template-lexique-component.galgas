//--------------------------------------------------------------------------------------------------
//
//  Copyright (C) 2022, ..., 2022 Pierre Molinaro.
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//--------------------------------------------------------------------------------------------------

class @templateLexiqueComponentAST : @semanticDeclarationAST {
  private let @lstring mLexiqueComponentName
  private let @lstring mLexiqueSuperComponentName
  private let @templateDelimitorListAST mTemplateDelimitorList
  private let @templateReplacementListAST mTemplateReplacementList
}

//--------------------------------------------------------------------------------------------------

syntax extension galgas3LexiqueComponentSyntax {

 //································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $template$
    $lexique$
  //--- Lexique Component Name
    $identifier$ ?let @lstring lexiqueComponentName
    $:$
    $identifier$ ?let @lstring lexiqueSuperComponentName
  //--- Parse lexique body
    ${$
    var @templateDelimitorListAST templateDelimitorList = @()
    var @templateReplacementListAST templateReplacementList = @()
    repeat
    while
      <template_delimitor_ggs3> !? templateDelimitorList
    while
      <template_replacement_ggs3> !? templateReplacementList
    end
    $}$
    ioDeclarations.mDeclarationList += !@templateLexiqueComponentAST {
      !isPredefined: false // Is not predefined
      !lexiqueComponentName
      !lexiqueSuperComponentName
      !templateDelimitorList
      !templateReplacementList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <template_delimitor_ggs3> ?!@templateDelimitorListAST ioTemplateDelimitorList {
    $template$
    $"string"$ ?let @lstring startString
    var nonAtomicSelection = false
    var templateEndMark = false
    var preserved = false
    repeat
    while
      $%nonAtomicSelection$
      if nonAtomicSelection then
        error .here : "duplicated %nonAtomicSelection attribute"
      end
      nonAtomicSelection = true
    while
      $%templateEndMark$
      if templateEndMark then
        error .here : "duplicated %templateEndMark attribute"
      end
      templateEndMark = true
    while
      $%preserved$
      if preserved then
        error .here : "duplicated %preserved attribute"
      end
      preserved = true
    end
    $...$
    $"string"$ ?let @lstring endString
    ioTemplateDelimitorList +=
      !startString
      !nonAtomicSelection: nonAtomicSelection
      !templateEndMark
      !preserved
      !endString
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <template_replacement_ggs3> ?!@templateReplacementListAST ioTemplateReplacement {
    $replace$
    $"string"$ ?let @lstring matchString
    let @lstring replacementString
    let @lstring replacementFunction
    select
      $...$
      $"string"$ ?replacementString
      $:$
      $identifier$ ?replacementFunction
    or
      $->$
      $"string"$ ?replacementString
      replacementFunction = @lstring {!"" !@location.here}
    end
    ioTemplateReplacement += !matchString !replacementString !replacementFunction
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4LexiqueComponentSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $template$
    $lexique$
  //--- Lexique Component Name
    $identifier$ ?let @lstring lexiqueComponentName
    $:$
    $identifier$ ?let @lstring lexiqueSuperComponentName
  //--- Parse lexique body
    ${$
    var @templateDelimitorListAST templateDelimitorList = @()
    var @templateReplacementListAST templateReplacementList = @()
    repeat
    while
      <template_delimitor> !? templateDelimitorList
    while
      <template_replacement> !? templateReplacementList
    end
    $}$
    ioDeclarations.mDeclarationList += !@templateLexiqueComponentAST {
      !isPredefined: false // Is not predefined
      !lexiqueComponentName
      !lexiqueSuperComponentName
      !templateDelimitorList
      !templateReplacementList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <template_delimitor> ?!@templateDelimitorListAST ioTemplateDelimitorList {
    $template$
    $"string"$ ?let @lstring startString
    var nonAtomicSelection = false
    var templateEndMark = false
    var preserved = false
    repeat
    while
      $%nonAtomicSelection$
      if nonAtomicSelection then
        error .here : "duplicated %nonAtomicSelection attribute"
      end
      nonAtomicSelection = true
    while
      $%templateEndMark$
      if templateEndMark then
        error .here : "duplicated %templateEndMark attribute"
      end
      templateEndMark = true
    while
      $%preserved$
      if preserved then
        error .here : "duplicated %preserved attribute"
      end
      preserved = true
    end
    $...$
    $"string"$ ?let @lstring endString
    ioTemplateDelimitorList +=
      !startString
      !nonAtomicSelection: nonAtomicSelection
      !templateEndMark
      !preserved
      !endString
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <template_replacement> ?!@templateReplacementListAST ioTemplateReplacement {
    $%templateReplacement$
    $"string"$ ?let @lstring matchString
    let @lstring replacementString
    let @lstring replacementFunction
    select
      $...$
      $"string"$ ?replacementString
      $:$
      $identifier$ ?replacementFunction
    or
      $->$
      $"string"$ ?replacementString
      replacementFunction = @lstring {!"" !@location.here}
    end
    ioTemplateReplacement += !matchString !replacementString !replacementFunction
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

override getter @templateLexiqueComponentAST keyRepresentation -> @string {
  result = "lexique " + self.mLexiqueComponentName
}

//--------------------------------------------------------------------------------------------------

override method @templateLexiqueComponentAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring {!"lexique " + self.mLexiqueComponentName !self.mLexiqueComponentName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  let superKey = @lstring {!"lexique " + self.mLexiqueSuperComponentName !self.mLexiqueComponentName.location}
  [!?ioSemanticTypePrecedenceGraph addEdge !key !superKey]
}

//--------------------------------------------------------------------------------------------------

override method @templateLexiqueComponentAST enterDeclarationInSemanticContext
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext ioSemanticContext {
//-------------------------------------- Get super lexique features
  [ioSemanticContext.mLexiqueComponentMapForSemanticAnalysis searchKey
     !self.mLexiqueSuperComponentName
     ?let superLexiqueIsTemplate
     ?let terminalMap
     ?let indexingListAST
     ?let terminalListAST
     ?let lexicalAttributeListAST
     ?let lexicalStyleListAST
     ?let lexicalListDeclarationListAST
  ]
  if superLexiqueIsTemplate then
    error self.mLexiqueSuperComponentName : "cannot inherit from a template lexique"
  end
//---
  [!?ioSemanticContext.mLexiqueComponentMapForSemanticAnalysis insertKey
     !self.mLexiqueComponentName
     !true
     !terminalMap
     !indexingListAST
     !terminalListAST
     !lexicalAttributeListAST
     !lexicalStyleListAST
     !lexicalListDeclarationListAST
  ]
}

//--------------------------------------------------------------------------------------------------

override method @templateLexiqueComponentAST semanticAnalysis
                                  ?!@lstringlist unused ioUsefulnessRootEntities
                                  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                                  ?let @string unused inProductDirectory
                                  ?let @semanticContext inSemanticContext
                                  ?!@unifiedTypeMap unused ioTypeMap
                                  ?let @predefinedTypes unused inPredefinedTypes
                                  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
//-------------------------------------- Useful entities graph
  let nameForUsefulness = lexiqueNameForUsefulEntitiesGraph (!self.mLexiqueComponentName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
//-------------------------------------- Get super lexique features
  [inSemanticContext.mLexiqueComponentMapForSemanticAnalysis searchKey
     !self.mLexiqueSuperComponentName
     ?* //let superLexiqueIsTemplate
     ?* //let terminalMap
     ?* //let indexingDirectory
     ?let terminalListAST
     ?let lexicalAttributeListAST
     ?let lexicalStyleListAST
     ?let lexicalListDeclarationListAST
  ]
//-------------------------------------- Lexical attribute type name map
  let @lexicalTypeMap lexicalTypeMap = buildLexicalTypeMap ()
//-------------------------------------- Build lexical routine map
  buildLexicalRoutineMap (?let lexicalRoutineMap)
//-------------------------------------- Build lexical function map
  buildLexicalFunctionMap (?let lexicalFunctionMap)
//-------------------------------------- Unicode test functions
  lexicalUnicodeTestFunctionAnalysis (?let unicodeTestFunctions)
//--------------------------------------
  var @lexiqueAnalysisContext lexiqueAnalysisContext = @{
    !self.mLexiqueComponentName.string
    !lexicalRoutineMap
    !lexicalFunctionMap
    !@lexicalMessageMap ()
    !@terminalMap ()
    !@terminalList ()
    !@lexicalAttributeMap ()
    !@lexicalExplicitTokenListMapMap ()
    !@()
    !@templateDelimitorList ()
    !@styleMap ()
    !unicodeTestFunctions
  }
//-------------------------------------- Build style map
  var styleIndex = 1
  for (mName mComment) in lexicalStyleListAST do
    [!?lexiqueAnalysisContext.mStyleMap insertKey !mName !mComment !styleIndex]
    styleIndex += 1
  end
//-------------------------------------- Build lexical attribute map
  buildLexicalAttributeMap (
   !lexicalTypeMap
   !lexicalAttributeListAST
   !?lexiqueAnalysisContext.mLexicalAttributeMap
  )
//-------------------------------------- Build terminal map
  var @terminalList terminalList = @()
  for (mName mSentAttributeList mSyntaxErrorMessage mStyle nonAtomicSelection isEndOfTemplateMark) in terminalListAST do
    var @uint terminalStyleIndex = 0
    if [mStyle.string count] > 0 then
      [lexiqueAnalysisContext.mStyleMap searchKey !mStyle ?* ?terminalStyleIndex]
    end
    var argumentTypeList = @lexicalSentValueList ()
    for (mFormalSelector mAttributeName) in mSentAttributeList do
      [lexiqueAnalysisContext.mLexicalAttributeMap searchKey !mAttributeName ?let attributeLexicalType]
      argumentTypeList += !mFormalSelector !mAttributeName.string !attributeLexicalType
    end
    [!?lexiqueAnalysisContext.mTerminalMap insertKey !mName !argumentTypeList]
    terminalList +=
      !mName
      !argumentTypeList
      !mSyntaxErrorMessage.string
      !isEndOfTemplateMark: isEndOfTemplateMark
      !atomicSelection: not nonAtomicSelection
      !terminalStyleIndex
  end
  for (* mStyle mSyntaxErrorMessage mSentAttributeList mEntryList) in lexicalListDeclarationListAST do
    var @uint terminalStyleIndex = 0
    if [mStyle.string count] > 0 then
      [lexiqueAnalysisContext.mStyleMap searchKey !mStyle ?* ?terminalStyleIndex]
    end
    var argumentTypeList = @lexicalSentValueList ()
    for (mFormalSelector mAttributeName) in mSentAttributeList do
      [lexiqueAnalysisContext.mLexicalAttributeMap searchKey !mAttributeName ?let attributeLexicalType]
      argumentTypeList += !mFormalSelector !mAttributeName.string !attributeLexicalType
    end
    for (* mTerminalSpelling nonAtomicSelection isTemplateEndMark) in mEntryList do
      let syntaxErrorMessage = [mSyntaxErrorMessage.string stringByReplacingStringByString !"%K" !mTerminalSpelling.string]
      terminalList +=
        !mTerminalSpelling
        !argumentTypeList
        !syntaxErrorMessage
        !isEndOfTemplateMark: isTemplateEndMark
        !atomicSelection: not nonAtomicSelection
        !terminalStyleIndex
    end
  end
//-------------------------------------- Template delimiters
  var @stringset unicodeStringToGenerate = @()
  var @templateDelimitorList templateDelimitorList = @()
  for (mStartString * * preservesStartDelimiter mEndString) in self.mTemplateDelimitorList do
   unicodeStringToGenerate += !mStartString.string
   unicodeStringToGenerate += !mEndString.string
   templateDelimitorList += !mStartString !mEndString !preservesStartDelimiter
  end
//-------------------------------------- Template replacements
  for (mMatchString mReplacementString *) in self.mTemplateReplacementList do
    unicodeStringToGenerate += !mMatchString.string
    unicodeStringToGenerate += !mReplacementString.string
   // § TODO Check replacement function
  end
//-------------------------------------- Build header and Cpp contents
  if @uint.errorCount == 0 then
  //--- Header
    let headerContents = [filewrapper templateLexiqueGenerationTemplates.cppHeader
       ![self.mLexiqueComponentName.string identifierRepresentation]
       ![self.mLexiqueSuperComponentName.string identifierRepresentation]
    ]
  //--- Cpp
    let cppContents =  [filewrapper templateLexiqueGenerationTemplates.cppImplementation
      ![self.mLexiqueComponentName.string identifierRepresentation]
      ![self.mLexiqueSuperComponentName.string identifierRepresentation]
      !lexiqueAnalysisContext.mLexicalTokenListMap
      !unicodeStringToGenerate
      !templateDelimitorList
      !terminalList
      !self.mLexiqueComponentName.string
      !self.mTemplateReplacementList
    ]
  //--- Objc Cocoa header
    let objcCocoaHeader = [filewrapper templateLexiqueGenerationTemplates.objcCocoaHeaderZone
      !self.mLexiqueComponentName.string
      !self.mLexiqueSuperComponentName.string
      !"lexique-" + [self.mLexiqueSuperComponentName.string fileNameRepresentation] + "-cocoa"
    ]
  //--- Objc Cocoa implementation
    let objcCocoaImplementation = [filewrapper templateLexiqueGenerationTemplates.objcCocoaImplementationZone
      !"lexique-" + [self.mLexiqueComponentName.string fileNameRepresentation] + "-cocoa"
      !self.mLexiqueComponentName.string
      !terminalList
      !templateDelimitorList
      !self.mTemplateReplacementList
    ]
  //--- Swift Cocoa implementation
    let swiftCocoaImplementation = [filewrapper templateLexiqueGenerationTemplates.swiftCocoaImplementationZone
      !"lexique-" + [self.mLexiqueComponentName.string fileNameRepresentation] + "-cocoa"
      !self.mLexiqueComponentName.string
      !self.mLexiqueSuperComponentName.string
      !terminalList
      !templateDelimitorList
      !self.mTemplateReplacementList
    ]
  //---
    ioSemanticDeclarationListForGeneration +=
      !infoMessage: ""
      !@lexiqueDeclarationForGeneration {
        !generateHeader: true // has header
        !implementationCppFileName: "lexique-" + [self.mLexiqueComponentName.string fileNameRepresentation]
        !self.mLexiqueComponentName.string
        !self.mLexiqueSuperComponentName.string
        !headerContents
        !cppContents
        !objcCocoaHeader
        !objcCocoaImplementation
        !swiftCocoaImplementation
      }
  end
}

//--------------------------------------------------------------------------------------------------
//         G E N E R A T I O N    T E M P L A T E S
//--------------------------------------------------------------------------------------------------

private filewrapper templateLexiqueGenerationTemplates in "+generation-templates/lexique_generation" {
}{
}{
  template cppHeader "template_lexique_header_template_zone_2.h.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@string SUPER_LEXIQUE_IDENTIFIER

  template cppImplementation "template_lexique_implementation-galgas3.cpp.galgasTemplate"
    ?@string LEXIQUE_IDENTIFIER
    ?@string SUPER_LEXIQUE_IDENTIFIER
    ?@lexicalExplicitTokenListMapMap LEXICAL_TOKEN_LIST_MAP
    ?@stringset STRINGS_IN_EXPLICIT_RULES
    ?@templateDelimitorList TEMPLATE_DELIMITOR_LIST
    ?@terminalList TERMINAL_LIST
    ?@string LEXIQUE_COMPONENT_NAME
    ?@templateReplacementListAST TEMPLATE_REPLACEMENT_LIST

  template objcCocoaHeaderZone "template_lexique_cocoa_header_template_zone_2.h.galgasTemplate"
    ?@string LEXIQUE_CLASS_NAME
    ?@string SUPER_LEXIQUE_CLASS_NAME
    ?@string SUPER_LEXIQUE_HEADER_FILE_NAME

  template objcCocoaImplementationZone "template_lexique_cocoa_implementation.m.galgasTemplate"
    ?@string LEXIQUE_HEADER_FILE_NAME
    ?@string LEXIQUE_CLASS_NAME
    ?@terminalList TERMINAL_LIST
    ?@templateDelimitorList TEMPLATE_DELIMITOR_LIST
    ?@templateReplacementListAST TEMPLATE_REPLACEMENT_LIST

  template swiftCocoaImplementationZone "template_lexique_cocoa_implementation.swift.galgasTemplate"
    ?@string LEXIQUE_HEADER_FILE_NAME
    ?@string LEXIQUE_CLASS_NAME
    ?@string SUPER_LEXIQUE_CLASS_NAME
    ?@terminalList TERMINAL_LIST
    ?@templateDelimitorList TEMPLATE_DELIMITOR_LIST
    ?@templateReplacementListAST TEMPLATE_REPLACEMENT_LIST
}

//--------------------------------------------------------------------------------------------------
