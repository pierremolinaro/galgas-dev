//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------
//!   AST
//------------------------------------------------------------------------------------------------

class @unaryMinusExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mExpression
}

//------------------------------------------------------------------------------------------------
//! SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension galgas3ExpressionSyntax {

  //······························································································

  rule <factor_ggs3> ?!@galgasDeclarationAST ioDeclarations
                     !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $-$
    <factor_ggs3> !?ioDeclarations ?outExpression
    outExpression = @unaryMinusExpressionAST {!operatorLocation !outExpression}
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4ExpressionSyntax {

  //······························································································

  rule <factor> ?!@galgasDeclarationAST ioDeclarations
                !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $-$
    <factor> !?ioDeclarations ? outExpression
    outExpression = @unaryMinusExpressionAST {!operatorLocation !outExpression}
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------
//! SEMANTICS
//------------------------------------------------------------------------------------------------

override method @unaryMinusExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

//································································································

override method @unaryMinusExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
//--- Expression analysis
  [self.mExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
//--- Check operator availability
  let @unifiedTypeMapEntry type = expression.mResultType
  if let exp = expression as @literalBigIntExpressionForGeneration then
    outExpression = @literalBigIntExpressionForGeneration {
      !exp.mResultType
      !exp.mLocation
      !- exp.mValue
    }
  elsif not [[type definition].features contains !.prefixMinusOperator] then
    error self.mOperatorLocation
    : "operand type is '@" + [type definition].typeName.string + "' and does not support the prefix minus operator"
    :outExpression
  else
  //--- Generate expression
    outExpression = @unaryMinusExpressionForGeneration {
      !type
      !self.mOperatorLocation
      !expression
    }
  end
}

//------------------------------------------------------------------------------------------------
//! CODE GENERATION
//------------------------------------------------------------------------------------------------

class @unaryMinusExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mExpression
}

//································································································

override method @unaryMinusExpressionForGeneration generateExpression ?!@string ioGeneratedCode
                                                                      ?!@stringset ioInclusionSet
                                                                      ?!@uint ioTemporaryVariableIndex
                                                                      ?!@stringset ioUnusedVariableCppNameSet
                                                                      !@string outCppExpression {
  [self.mExpression.mResultType addHeaderFileName !?ioInclusionSet]
//--- Operand
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let operand
  ]
//--- Generate Comparison
  outCppExpression = operand + ".operator_unary_minus (" + compilerCppName () + [self.mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

//------------------------------------------------------------------------------------------------
