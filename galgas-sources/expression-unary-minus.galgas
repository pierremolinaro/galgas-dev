#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @unaryMinusExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·················································································································

  rule <factor_ggs3> !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $-$
    <factor_ggs3> ? outExpression
    outExpression = @unaryMinusExpressionAST.new {!operatorLocation !outExpression}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·················································································································

  rule <factor> !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $-$
    <factor> ? outExpression
    outExpression = @unaryMinusExpressionAST.new {!operatorLocation !outExpression}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @unaryMinusExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·······················································································································

override method @unaryMinusExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Expression analysis
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
#--- Check operator availability
  let @unifiedTypeMapEntry type = expression.mResultType
  if let exp = expression as @literalBigIntExpressionForGeneration then
    outExpression = @literalBigIntExpressionForGeneration.new {
      !exp.mResultType
      !exp.mLocation
      !- exp.mValue
    }
  elsif not [[type definition].mHandledOperatorFlags prefixMinusOperator] then
    error self.mOperatorLocation
    : "operand type is '@" + [type definition].mTypeName.string + "' and does not support the prefix minus operator"
    :outExpression
  else
  #--- Generate expression
    outExpression = @unaryMinusExpressionForGeneration.new {
      !type
      !self.mOperatorLocation
      !expression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @unaryMinusExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mExpression
}

#·······················································································································

override method @unaryMinusExpressionForGeneration generateExpression ?!@string ioGeneratedCode
                                                                      ?!@stringset ioInclusionSet
                                                                      ?!@uint ioTemporaryVariableIndex
                                                                      ?!@stringset ioUnusedVariableCppNameSet
                                                                      !@string outCppExpression {
  [self.mExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Operand
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let operand
  ]
#--- Generate Comparison
  outCppExpression = operand + ".operator_unary_minus (" + compilerCppName () + [self.mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
