#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @unaryMinusExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································

  rule <factor> !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $-$
    <factor> ? outExpression
    outExpression = @unaryMinusExpressionAST.new {!operatorLocation !outExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @unaryMinusExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·······················································································································

override method @unaryMinusExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Expression analysis
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMap-entry.null
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry type = expression.mResultType
  if let exp = expression as @literalBigIntExpressionForGeneration then
    outExpression = @literalBigIntExpressionForGeneration.new {
      !exp.mResultType
      !exp.mLocation
      !- exp.mValue
    }
  elsif not [[type mHandledOperatorFlags] prefixMinusOperator] then
    error self.mOperatorLocation
    : "operand type is '@" + [type key] + "' and does not support the prefix minus operator"
    :outExpression
  else
  #--- Generate expression
    outExpression = @unaryMinusExpressionForGeneration.new {
      !type
      !self.mOperatorLocation
      !expression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @unaryMinusExpressionForGeneration : @semanticExpressionForGeneration {
  private let @semanticExpressionForGeneration mExpression
}

#·······················································································································

override method @unaryMinusExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let operand
   ]
#--- Generate Comparison
  outCppExpression = operand + ".operator_unary_minus (" + compilerCppName () + [self.mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
