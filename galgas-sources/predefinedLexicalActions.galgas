#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  'lexique' component metamodel                                                                                       *
#                                                                                                                      *
#  Copyright (C) 2009, ..., 2015 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

getter @lexicalTypeEnum lexicalTypeBaseName -> @string outResult {
  switch self
    case lexicalType_string : outResult = "string"
    case lexicalType_char   : outResult = "char"
    case lexicalType_uint   : outResult = "uint"
    case lexicalType_uint64 : outResult = "uint64"
    case lexicalType_sint   : outResult = "sint"
    case lexicalType_sint64 : outResult = "sint64"
    case lexicalType_double : outResult = "double"
    case lexicalType_bigint : outResult = "bigint"
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                         buildLexicalRoutineMap                                                                       *
#----------------------------------------------------------------------------------------------------------------------*

proc buildLexicalRoutineMap !@lexicalRoutineMap outLexicalRoutineMap {
  outLexicalRoutineMap = {}
#--- enterHexDigitIntoASCIIcharacter
  @lexicalRoutineFormalArgumentList lexicalRoutineFormalArgumentList = {}
  @stringlist errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioASCIICharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  errorMessageList += !"inErrorCodeGreaterThan255"
  errorMessageList += !"inErrorNotHexDigitCharacter"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterHexDigitIntoASCIIcharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDigitIntoASCIIcharacter
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioASCIICharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  errorMessageList += !"inErrorCodeGreaterThan255"
  errorMessageList += !"inErrorNotDecimalDigitCharacter"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterDigitIntoASCIIcharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterCharacterIntoString
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_string !"ioString"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  [!?outLexicalRoutineMap insertKey
    !.new {!"enterCharacterIntoString" !.here}
    !lexicalRoutineFormalArgumentList
    !{}
    !false # Is not extern
  ]
#--- resetString
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"resetString" !@location.here}
    !{!.lexicalInputOutputMode !.lexicalType_string !"ioString"}
    !{}
    !false # Is not extern
  ]
#--- convertStringToDouble
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_double !"ioDouble"
  errorMessageList += !"inConversionError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertStringToDouble" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterCharacterIntoCharacter
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterCharacterIntoCharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- negateSInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint !"ioNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"negateSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- negateSInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64 !"ioNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"negateSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertUIntToSInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertUIntToSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertUInt64ToSInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint64 !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64 !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertUInt64ToSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDigitIntoUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDigitIntoUInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDecimalDigitIntoBigInt
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioBigInt"
  [!?outLexicalRoutineMap insertKey
    !.new {!"enterDecimalDigitIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !{!"inCharacterIsNotDecimalDigitError"}
    !false # Is not extern
  ]
#--- enterBinaryDigitIntoBigInt
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inBinaryDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioBigInt"
  [!?outLexicalRoutineMap insertKey
    !.new {!"enterBinaryDigitIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !{!"inCharacterIsNotBinaryDigitError"}
    !false # Is not extern
  ]
#--- enterHexDigitIntoBigInt
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioBigInt"
  [!?outLexicalRoutineMap insertKey
    !.new {!"enterHexDigitIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !{!"inCharacterIsNotHexDigitError"}
    !false # Is not extern
  ]
#--- convertDecimalStringIntoBigInt
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.new {!"convertDecimalStringIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !{!"inCharacterIsNotDecimalDigitError"}
    !false # Is not extern
  ]
#--- convertBinaryStringIntoBigInt
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.new {!"convertBinaryStringIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !{!"inCharacterIsNotBinaryDigitError"}
    !false # Is not extern
  ]
#--- convertHexStringIntoBigInt
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.new {!"convertHexStringIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !{!"inCharacterIsNotHexDigitError"}
    !false # Is not extern
  ]
#--- enterHexDigitIntoUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterHexDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterHexDigitIntoUInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterHexDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertDecimalStringIntoUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertDecimalStringIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertDecimalStringIntoSInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertDecimalStringIntoSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertDecimalStringIntoUInt64
  lexicalRoutineFormalArgumentList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.new {!"convertDecimalStringIntoUInt64" !.here}
    !lexicalRoutineFormalArgumentList
    !{!"inNumberTooLargeError", !"inCharacterIsNotDecimalDigitError"}
    !false # Is not extern
  ]
#--- convertDecimalStringIntoSInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64 !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertDecimalStringIntoSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterBinDigitIntoUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotBinDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterBinDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterBinDigitIntoUInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotBinDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterBinDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterOctDigitIntoUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotOctDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterOctDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterOctDigitIntoUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotOctDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"enterOctDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- multiplyUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inResultTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"multiplyUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- multiplyUInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint!"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inResultTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"multiplyUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoUInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint!"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertHexStringIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoUInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64!"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertHexStringIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoSInt
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string!"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint!"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertHexStringIntoSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoSInt64
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string!"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64!"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertHexStringIntoSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertUnsignedNumberToUnicodeChar
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioUnicodeCharacter"
  errorMessageList += !"inUnassignedUnicodeValueError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertUnsignedNumberToUnicodeChar" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHTMLSequenceToUnicodeCharacter
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioUnicodeCharacter"
  errorMessageList += !"inUnassignedHTMLSequenceError"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"convertHTMLSequenceToUnicodeCharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- codePointToUnicode
  lexicalRoutineFormalArgumentList = {}
  errorMessageList = {}
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inCodePointString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_string !"ioString"
  [!?outLexicalRoutineMap insertKey
    !@lstring.new {!"codePointToUnicode" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#                         buildLexicalFunctionMap                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

proc buildLexicalFunctionMap !@lexicalFunctionMap outLexicalFunctionMap {
  outLexicalFunctionMap = @lexicalFunctionMap. emptyMap
#--- toLower
  var lexicalTypeList =@lexicalFunctionFormalArgumentList {}
  lexicalTypeList += !.lexicalType_char !"inCharacter"
  [!?outLexicalFunctionMap insertKey
    !@lstring.new {!"toLower" !@location.here}
    !lexicalTypeList
    !.lexicalType_char
    !""
    !false # Is not extern
  ]
#--- toUpper
  lexicalTypeList = @lexicalFunctionFormalArgumentList.emptyList
  lexicalTypeList += !.lexicalType_char !"inCharacter"
  [!?outLexicalFunctionMap insertKey
    !@lstring.new {!"toUpper" !@location.here}
    !lexicalTypeList
    !.lexicalType_char
    !""
    !false # Is not extern
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#                    printPredefinedLexicalActions                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

proc printPredefinedLexicalActions {
#--------------------------------------- Build lexical routine map
  @lexicalRoutineMap lexicalRoutineMap
  buildLexicalRoutineMap ( ?lexicalRoutineMap )
#--------------------------------------- Display lexical routines
  @string s = ""
  s += "**************** Prefined lexical routines  ****************\n"
  for () in lexicalRoutineMap do
    s += [lkey string]
    for () in mLexicalRoutineFormalArgumentList do
      s += " " + [mLexicalFormalArgumentMode lexicalFormalModeName] + "@" + [mLexicalFormalArgumentType lexicalTypeBaseName] + " " + mArgumentNameForComment
    end
    for () in mErrorMessageList
    before s += " error"
    do s += " " + mValue
    between s += ","
    end
    s += " ;\n\n"
  end
#--------------------------------------- Build lexical function map
  @lexicalFunctionMap lexicalFunctionMap
  buildLexicalFunctionMap (?lexicalFunctionMap )
#--------------------------------------- Display lexical functions
  s += "**************** Prefined lexical functions ****************\n"
  for () in lexicalFunctionMap do
    s += [lkey string]
    for () in mLexicalTypeList do
      s += " ?@" + [mLexicalType lexicalTypeBaseName]+ " " + mArgumentNameForComment
    end
    s += " -> @" + [mReturnedLexicalType lexicalTypeBaseName] + " ;\n"
    if mReplacementFunctionName != "" then
      s += "Note: the '" + lkey + "' function is obsolete: use '" + mReplacementFunctionName + "' function.\n"
    end
    s += "\n"
  end
#--------------------------------------- Display
  s += "************************************************************\n"
  message s
}

#----------------------------------------------------------------------------------------------------------------------*


