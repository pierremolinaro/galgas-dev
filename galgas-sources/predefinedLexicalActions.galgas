#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  'lexique' component
#
#  Copyright (C) 2009, ..., 2015 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

getter @lexicalTypeEnum lexicalTypeBaseName -> @string {
  switch self
    case lexicalType_string : result = "string"
    case lexicalType_char   : result = "char"
    case lexicalType_uint   : result = "uint"
    case lexicalType_uint64 : result = "uint64"
    case lexicalType_sint   : result = "sint"
    case lexicalType_sint64 : result = "sint64"
    case lexicalType_double : result = "double"
    case lexicalType_bigint : result = "bigint"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#                         buildLexicalRoutineMap
#—————————————————————————————————————————————————————————————————————————————————————————————————

proc buildLexicalRoutineMap !@lexicalRoutineMap outLexicalRoutineMap {
  outLexicalRoutineMap = §[]
#--- enterHexDigitIntoASCIIcharacter
  var @lexicalRoutineFormalArgumentList lexicalRoutineFormalArgumentList = §[]
  var @stringlist errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioASCIICharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  errorMessageList += !"inErrorCodeGreaterThan255"
  errorMessageList += !"inErrorNotHexDigitCharacter"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterHexDigitIntoASCIIcharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDigitIntoASCIIcharacter
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioASCIICharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  errorMessageList += !"inErrorCodeGreaterThan255"
  errorMessageList += !"inErrorNotDecimalDigitCharacter"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterDigitIntoASCIIcharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterCharacterIntoString
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_string !"ioString"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  [!?outLexicalRoutineMap insertKey
    !.init {!"enterCharacterIntoString" !.here}
    !lexicalRoutineFormalArgumentList
    !§[]
    !false # Is not extern
  ]
#--- resetString
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"resetString" !@location.here}
    !§[!.lexicalInputOutputMode !.lexicalType_string !"ioString"]
    !§[]
    !false # Is not extern
  ]
#--- convertStringToDouble
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_double !"ioDouble"
  errorMessageList += !"inConversionError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertStringToDouble" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterCharacterIntoCharacter
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterCharacterIntoCharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- negateSInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint !"ioNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"negateSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- negateSInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64 !"ioNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"negateSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertUIntToSInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertUIntToSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertUInt64ToSInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint64 !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64 !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertUInt64ToSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDigitIntoUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDigitIntoUInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterDecimalDigitIntoBigInt
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inDecimalDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioBigInt"
  [!?outLexicalRoutineMap insertKey
    !.init {!"enterDecimalDigitIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !§[!"inCharacterIsNotDecimalDigitError"]
    !false # Is not extern
  ]
#--- enterBinaryDigitIntoBigInt
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inBinaryDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioBigInt"
  [!?outLexicalRoutineMap insertKey
    !.init {!"enterBinaryDigitIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !§[!"inCharacterIsNotBinaryDigitError"]
    !false # Is not extern
  ]
#--- enterHexDigitIntoBigInt
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioBigInt"
  [!?outLexicalRoutineMap insertKey
    !.init {!"enterHexDigitIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !§[!"inCharacterIsNotHexDigitError"]
    !false # Is not extern
  ]
#--- convertDecimalStringIntoBigInt
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.init {!"convertDecimalStringIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !§[!"inCharacterIsNotDecimalDigitError"]
    !false # Is not extern
  ]
#--- negateBigInt
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioBigInt"
  [!?outLexicalRoutineMap insertKey
    !.init {!"negateBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !§[]
    !false # Is not extern
  ]
#--- convertBinaryStringIntoBigInt
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.init {!"convertBinaryStringIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !§[!"inCharacterIsNotBinaryDigitError"]
    !false # Is not extern
  ]
#--- convertHexStringIntoBigInt
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_bigint !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.init {!"convertHexStringIntoBigInt" !.here}
    !lexicalRoutineFormalArgumentList
    !§[!"inCharacterIsNotHexDigitError"]
    !false # Is not extern
  ]
#--- enterHexDigitIntoUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterHexDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterHexDigitIntoUInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inHexDigitCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterHexDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertDecimalStringIntoUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertDecimalStringIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertDecimalStringIntoSInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertDecimalStringIntoSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertDecimalStringIntoUInt64
  lexicalRoutineFormalArgumentList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  [!?outLexicalRoutineMap insertKey
    !.init {!"convertDecimalStringIntoUInt64" !.here}
    !lexicalRoutineFormalArgumentList
    !§[!"inNumberTooLargeError", !"inCharacterIsNotDecimalDigitError"]
    !false # Is not extern
  ]
#--- convertDecimalStringIntoSInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64 !"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotDecimalDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertDecimalStringIntoSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterBinDigitIntoUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotBinDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterBinDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterBinDigitIntoUInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inCharacter"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotBinDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterBinDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterOctDigitIntoUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotOctDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterOctDigitIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- enterOctDigitIntoUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_char !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotOctDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"enterOctDigitIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- multiplyUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"ioUnsignedNumber"
  errorMessageList += !"inResultTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"multiplyUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- multiplyUInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_uint!"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64 !"ioUnsignedNumber"
  errorMessageList += !"inResultTooLargeError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"multiplyUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoUInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint!"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertHexStringIntoUInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoUInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint64!"ioUnsignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertHexStringIntoUInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoSInt
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string!"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint!"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertHexStringIntoSInt" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHexStringIntoSInt64
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string!"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_sint64!"ioSignedNumber"
  errorMessageList += !"inNumberTooLargeError"
  errorMessageList += !"inCharacterIsNotHexDigitError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertHexStringIntoSInt64" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertUnsignedNumberToUnicodeChar
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_uint !"inUnsignedNumber"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioUnicodeCharacter"
  errorMessageList += !"inUnassignedUnicodeValueError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertUnsignedNumberToUnicodeChar" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- convertHTMLSequenceToUnicodeCharacter
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_string !"inString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_char !"ioUnicodeCharacter"
  errorMessageList += !"inUnassignedHTMLSequenceError"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"convertHTMLSequenceToUnicodeCharacter" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
#--- codePointToUnicode
  lexicalRoutineFormalArgumentList = §[]
  errorMessageList = §[]
  lexicalRoutineFormalArgumentList += !.lexicalInputMode !.lexicalType_string !"inCodePointString"
  lexicalRoutineFormalArgumentList += !.lexicalInputOutputMode !.lexicalType_string !"ioString"
  [!?outLexicalRoutineMap insertKey
    !@lstring {!"codePointToUnicode" !@location.here}
    !lexicalRoutineFormalArgumentList
    !errorMessageList
    !false # Is not extern
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#                         buildLexicalFunctionMap
#—————————————————————————————————————————————————————————————————————————————————————————————————

proc buildLexicalFunctionMap !@lexicalFunctionMap outLexicalFunctionMap {
  outLexicalFunctionMap = §[]
#--- toLower
  var lexicalTypeList = @lexicalFunctionFormalArgumentList §[]
  lexicalTypeList += !.lexicalType_char !"inCharacter"
  [!?outLexicalFunctionMap insertKey
    !@lstring {!"toLower" !@location.here}
    !lexicalTypeList
    !.lexicalType_char
    !""
    !false # Is not extern
  ]
#--- toUpper
  lexicalTypeList = @lexicalFunctionFormalArgumentList §[]
  lexicalTypeList += !.lexicalType_char !"inCharacter"
  [!?outLexicalFunctionMap insertKey
    !@lstring {!"toUpper" !@location.here}
    !lexicalTypeList
    !.lexicalType_char
    !""
    !false # Is not extern
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#                    printPredefinedLexicalActions
#—————————————————————————————————————————————————————————————————————————————————————————————————

proc printPredefinedLexicalActions {
#--------------------------------------- Build lexical routine map
  buildLexicalRoutineMap (?let lexicalRoutineMap)
#--------------------------------------- Display lexical routines
  var @string s = ""
  s += "**************** Prefined lexical routines  ****************\n"
  for (lkey mLexicalRoutineFormalArgumentList mErrorMessageList *) in lexicalRoutineMap do
    s += lkey.string
    for (mLexicalFormalArgumentMode mLexicalFormalArgumentType mArgumentNameForComment) in mLexicalRoutineFormalArgumentList do
      s += " " + [mLexicalFormalArgumentMode lexicalFormalModeName] + "@" + [mLexicalFormalArgumentType lexicalTypeBaseName] + " " + mArgumentNameForComment
    end
    for (mValue) in mErrorMessageList
    before s += " error"
    do s += " " + mValue
    between s += ","
    end
    s += " ;\n\n"
  end
#--------------------------------------- Build lexical function map
  buildLexicalFunctionMap (?let lexicalFunctionMap )
#--------------------------------------- Display lexical functions
  s += "**************** Prefined lexical functions ****************\n"
  for (lkey mLexicalTypeList mReturnedLexicalType mReplacementFunctionName *) in lexicalFunctionMap do
    s += lkey.string
    for (mLexicalType mArgumentNameForComment) in mLexicalTypeList do
      s += " ?@" + [mLexicalType lexicalTypeBaseName]+ " " + mArgumentNameForComment
    end
    s += " -> @" + [mReturnedLexicalType lexicalTypeBaseName] + " ;\n"
    if mReplacementFunctionName != "" then
      s += "Note: the '" + lkey + "' function is obsolete: use '" + mReplacementFunctionName + "' function.\n"
    end
    s += "\n"
  end
#--------------------------------------- Display
  s += "************************************************************"
  println (!s)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————


