#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

  abstract refclass @abstractGrammarInstructionSyntaxDirectedTranslationResult {
  }

  #·······························································································

  refclass @grammarInstructionSyntaxDirectedTranslationResultNone :
    @abstractGrammarInstructionSyntaxDirectedTranslationResult {
  }

  #·······························································································

  refclass @grammarInstructionSyntaxDirectedTranslationDropResult :
    @abstractGrammarInstructionSyntaxDirectedTranslationResult {
    private let @location mLocation
  }

  #·······························································································

  refclass @grammarInstructionSyntaxDirectedTranslationResultInVar :
    @abstractGrammarInstructionSyntaxDirectedTranslationResult {
    private let @lstring mActualParameterName
  }

  #·······························································································

  refclass @grammarInstructionSyntaxDirectedTranslationResultInDeclaredVar :
    @abstractGrammarInstructionSyntaxDirectedTranslationResult {
    private let @lstring mActualParameterTypeName
    private let @lstring mActualParameterName
  }

  #·······························································································

  refclass @grammarInstructionSyntaxDirectedTranslationResultInDeclaredConst :
    @abstractGrammarInstructionSyntaxDirectedTranslationResult {
    private let @lstring mActualParameterTypeName
    private let @lstring mActualParameterName
  }

  #·······························································································

  refclass @grammarInFileInstructionAST : @semanticInstructionAST {
    private let @lstring mGrammarComponentName
    private let @lstring mLabelName
    private let @semanticExpressionAST mSourceExpression
    private let @location mEndOfSourceExpression
    private let @actualParameterListAST mActualParameterList
    private let @abstractGrammarInstructionSyntaxDirectedTranslationResult mAbstractGrammarInstructionSyntaxDirectedTranslationResult
  }

  #·······························································································

  refclass @grammarInStringInstructionAST : @semanticInstructionAST {
    private let @lstring mGrammarComponentName
    private let @lstring mLabelName
    private let @semanticExpressionAST mSourceExpression
    private let @location mEndOfSourceExpression
    private let @semanticExpressionAST mNameExpression
    private let @location mEndOfNameExpression
    private let @actualParameterListAST mActualParameterList
    private let @abstractGrammarInstructionSyntaxDirectedTranslationResult mAbstractGrammarInstructionSyntaxDirectedTranslationResult
  }

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································
  # NEW GRAMMAR INSTRUCTION, COMPATIBLE WITH GALGAS 4
  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $grammar$
    let instructionLocation = @location.here
    $identifier$ ?let @lstring grammarComponentName indexing grammarComponentReference
    let @lstring labelName
    select
      labelName = @lstring {!"" !@location.here}
    or
      $label$
      $identifier$ ?labelName
    end
    $($
    <actual_parameter_list_ggs3> !?ioDeclarations ?let @actualParameterListAST actualParameterList
    $)$
    <grammar_instruction_core> !?ioDeclarations !instructionLocation !actualParameterList !grammarComponentName !labelName ?outInstruction
  }

  #·······························································································

  rule <grammar_instruction_core> ?!@galgasDeclarationAST ioDeclarations
                                  ?let @location inInstructionLocation
                                  ?let @actualParameterListAST actualParameterList
                                  ?let @lstring inGrammarComponentName
                                  ?let @lstring inLabelName
                                  !@semanticInstructionAST outInstruction {
    $in$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    let endOfSourceExpression = @location.here
  #--- Get syntax directed translation result string
    let @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationResult
    select
      grammarInstructionSyntaxDirectedTranslationResult = @grammarInstructionSyntaxDirectedTranslationResultNone {}
    or
      $:>$
      <syntax_directed_translation_result> !?ioDeclarations ?grammarInstructionSyntaxDirectedTranslationResult
    end
    outInstruction = @grammarInFileInstructionAST {
      !inInstructionLocation
      !inGrammarComponentName
      !inLabelName
      !sourceExpression
      !endOfSourceExpression
      !actualParameterList
      !grammarInstructionSyntaxDirectedTranslationResult
    }
  }

  #·······························································································

  rule <grammar_instruction_core> ?!@galgasDeclarationAST ioDeclarations
                                  ?let @location inInstructionLocation
                                  ?let @actualParameterListAST actualParameterList
                                  ?let @lstring inGrammarComponentName
                                  ?let @lstring inLabelName
                                  !@semanticInstructionAST outInstruction {
    $on$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    let @location endOfSourceExpression = .here
    $:$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST nameExpression
    let @location endOfNameExpression = .here
  #--- Get syntax directed translation result string
    let @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationResult
    select
      grammarInstructionSyntaxDirectedTranslationResult = @grammarInstructionSyntaxDirectedTranslationResultNone {}
    or
      $:>$
      <syntax_directed_translation_result> !?ioDeclarations ?grammarInstructionSyntaxDirectedTranslationResult
    end
    outInstruction = @grammarInStringInstructionAST {
      !inInstructionLocation
      !inGrammarComponentName
      !inLabelName
      !sourceExpression
      !endOfSourceExpression
      !nameExpression
      !endOfNameExpression
      !actualParameterList
      !grammarInstructionSyntaxDirectedTranslationResult
    }
  }

  #·······························································································
  # OBSOLETE GRAMMAR INSTRUCTION, NOT COMPATIBLE WITH GALGAS 4
  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction { #obsolete
    $grammar$
    let instructionLocation = @location.here
    $identifier$ ?let @lstring grammarComponentName indexing grammarComponentReference
    let @lstring labelName
    select
      labelName = @lstring {!"" !@location.here}
    or
      $label$
      $identifier$ ?labelName
    end
    <grammar_instruction_core_obsolete> !?ioDeclarations !instructionLocation !grammarComponentName !labelName ?outInstruction
  }

  #·······························································································

  rule <grammar_instruction_core_obsolete> ?!@galgasDeclarationAST ioDeclarations
                                           ?let @location inInstructionLocation
                                           ?let @lstring inGrammarComponentName
                                           ?let @lstring inLabelName
                                           !@semanticInstructionAST outInstruction {
    $in$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST mSourceExpression
    let endOfSourceExpression = @location.here
    <actual_parameter_list_ggs3> !?ioDeclarations ?let @actualParameterListAST actualParameterList
  #--- Get syntax directed translation result string
    let @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationResult
    select
      grammarInstructionSyntaxDirectedTranslationResult = @grammarInstructionSyntaxDirectedTranslationResultNone {}
    or
      $:>$
      <syntax_directed_translation_result> !?ioDeclarations ?grammarInstructionSyntaxDirectedTranslationResult
    end
    outInstruction = @grammarInFileInstructionAST {
      !inInstructionLocation
      !inGrammarComponentName
      !inLabelName
      !mSourceExpression
      !endOfSourceExpression
      !actualParameterList
      !grammarInstructionSyntaxDirectedTranslationResult
    }
  }

  #·······························································································

  rule <grammar_instruction_core_obsolete> ?!@galgasDeclarationAST ioDeclarations
                                           ?let @location inInstructionLocation
                                           ?let @lstring inGrammarComponentName
                                           ?let @lstring inLabelName
                                           !@semanticInstructionAST outInstruction {
    $on$
    $($
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    let @location endOfSourceExpression = .here
    $,$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST nameExpression
    let @location endOfNameExpression = .here
    $)$
    <actual_parameter_list_ggs3> !?ioDeclarations ?let @actualParameterListAST actualParameterList
  #--- Get syntax directed translation result string
    let @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationResult
    select
      grammarInstructionSyntaxDirectedTranslationResult = @grammarInstructionSyntaxDirectedTranslationResultNone {}
    or
      $:>$
      <syntax_directed_translation_result> !?ioDeclarations ?grammarInstructionSyntaxDirectedTranslationResult
    end
    outInstruction = @grammarInStringInstructionAST {
      !inInstructionLocation
      !inGrammarComponentName
      !inLabelName
      !sourceExpression
      !endOfSourceExpression
      !nameExpression
      !endOfNameExpression
      !actualParameterList
      !grammarInstructionSyntaxDirectedTranslationResult
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $grammar$
    let instructionLocation = @location.here
    $identifier$ ?let @lstring grammarComponentName indexing grammarComponentReference
    let @lstring labelName
    select
      labelName = @lstring {!"" !.here}
    or
      $label$
      $identifier$ ?labelName
    end
    <actual_parameter_list_within_parenthesis> !?ioDeclarations ?let @actualParameterListAST actualParameterList
    <grammar_instruction_core> !?ioDeclarations !instructionLocation !actualParameterList !grammarComponentName !labelName ?outInstruction
  }

  #·······························································································

  rule <grammar_instruction_core> ?!@galgasDeclarationAST ioDeclarations
                                  ?let @location inInstructionLocation
                                  ?let @actualParameterListAST actualParameterList
                                  ?let @lstring inGrammarComponentName
                                  ?let @lstring inLabelName
                                  !@semanticInstructionAST outInstruction {
    $in$
    <expression> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    let endOfSourceExpression = @location.here
  #--- Get syntax directed translation result string
    let @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationResult
    select
      grammarInstructionSyntaxDirectedTranslationResult = @grammarInstructionSyntaxDirectedTranslationResultNone {}
    or
      $:>$
      <syntax_directed_translation_result> !?ioDeclarations ?grammarInstructionSyntaxDirectedTranslationResult
    end
    outInstruction = @grammarInFileInstructionAST {
      !inInstructionLocation
      !inGrammarComponentName
      !inLabelName
      !sourceExpression
      !endOfSourceExpression
      !actualParameterList
      !grammarInstructionSyntaxDirectedTranslationResult
    }
  }

  #·······························································································

  rule <grammar_instruction_core> ?!@galgasDeclarationAST ioDeclarations
                                  ?let @location inInstructionLocation
                                  ?let @actualParameterListAST actualParameterList
                                  ?let @lstring inGrammarComponentName
                                  ?let @lstring inLabelName
                                  !@semanticInstructionAST outInstruction {
    $on$
    <expression> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    let @location endOfSourceExpression = .here
    $:$
    <expression> !?ioDeclarations ?let @semanticExpressionAST nameExpression
    let @location endOfNameExpression = .here
  #--- Get syntax directed translation result string
    let @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationResult
    select
      grammarInstructionSyntaxDirectedTranslationResult = @grammarInstructionSyntaxDirectedTranslationResultNone {}
    or
      $:>$
      <syntax_directed_translation_result> !?ioDeclarations ?grammarInstructionSyntaxDirectedTranslationResult
    end
    outInstruction = @grammarInStringInstructionAST {
      !inInstructionLocation
      !inGrammarComponentName
      !inLabelName
      !sourceExpression
      !endOfSourceExpression
      !nameExpression
      !endOfNameExpression
      !actualParameterList
      !grammarInstructionSyntaxDirectedTranslationResult
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

  override method @grammarInFileInstructionAST enterInstructionInSemanticContext
    ?!@unifiedTypeMap ioTypeMap
  {
    [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
    for (mActualParameter) in self.mActualParameterList do
      [mActualParameter enterParameterInSemanticContext !?ioTypeMap]
    end
  }

  #·······························································································

  override method @grammarInStringInstructionAST enterInstructionInSemanticContext
    ?!@unifiedTypeMap ioTypeMap
  {
    [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
    for (mActualParameter) in self.mActualParameterList do
      [mActualParameter enterParameterInSemanticContext !?ioTypeMap]
    end
  }

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @grammarInFileInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
  let usefulnessName = grammarNameForUsefulEntitiesGraph (!self.mGrammarComponentName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#--- Search grammar in grammar map
  [inAnalysisContext.semanticContext.grammarMap searchKey
    !self.mGrammarComponentName
    ?let @grammarLabelMap grammarLabelMap
    ?*
    ?let @bool hasTranslateFeature
  ]
#--- Search label
  [grammarLabelMap searchKey
    !self.mLabelName
    ?let @formalParameterSignature labelSignature
  ]
#--- Check actual parameters
  [self.mActualParameterList analyzeRoutineArguments
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mLabelName
    !invokedEntityNameForErrorSignaling: "label of the " + self.mGrammarComponentName + " grammar"
    !labelSignature
    !?ioVariableMap
    !?ioInstructionListForGeneration
    ?let @actualParameterListForGeneration actualParameterListForGeneration
  ]
#--- Parse source expression
  [self.mSourceExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration sourceExpression
  ]
#--- Check source expression type: @lstring for file, @string for source string itself
  if sourceExpression.mResultType != inAnalysisContext.predefinedTypes.mLStringType then
    error self.mEndOfSourceExpression
    :"this expression is the source file path and its type should be '@lstring', but it is '@"
     + [sourceExpression.mResultType definition].typeName.string + "'"
  end
#--- Check syntax directed translation result parameter
  let syntaxDirectedTranslationResultVarName = "syntaxDirectedTranslationResult_" + [self.mGrammarComponentName.location startLocationIndex]
  var assignementList = @stringlist §[]
  [self.mAbstractGrammarInstructionSyntaxDirectedTranslationResult analyzeGrammarInstructionSDT
    !inAnalysisContext
    !?ioTypeMap
    !hasTranslateFeature
    !syntaxDirectedTranslationResultVarName
    !?assignementList
    !?ioVariableMap
  ]
#--- Generate instructions
  ioInstructionListForGeneration += !@grammarInstructionWithSourceFileForGeneration {
    !self.mInstructionLocation
    !self.mGrammarComponentName.string
    !self.mLabelName.string
    !sourceExpression
    !actualParameterListForGeneration
    !hasTranslateFeature
    !assignementList
    !syntaxDirectedTranslationResultVarName
  }
}

#······················································································································

override method @grammarInStringInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
  let grammarUsefulnessName = grammarNameForUsefulEntitiesGraph (!self.mGrammarComponentName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !grammarUsefulnessName]
#--- Search grammar in grammar map
  [inAnalysisContext.semanticContext.grammarMap searchKey
    !self.mGrammarComponentName
    ?let @grammarLabelMap grammarLabelMap
    ?*
    ?let @bool hasTranslateFeature
  ]
#--- Search label
  [grammarLabelMap searchKey
    !self.mLabelName
    ?let @formalParameterSignature labelSignature
  ]
#--- Check actual parameters
  [self.mActualParameterList analyzeRoutineArguments
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mLabelName
    !invokedEntityNameForErrorSignaling: "label of the " + self.mGrammarComponentName + " grammar"
    !labelSignature
    !?ioVariableMap
    !?ioInstructionListForGeneration
    ?let @actualParameterListForGeneration actualParameterListForGeneration
  ]
#--- Parse source expression
  [self.mSourceExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration sourceExpression
  ]
#--- Check source expression type: @string
  if sourceExpression.mResultType != inAnalysisContext.predefinedTypes.mStringType then
    error self.mEndOfSourceExpression
    :"this expression is the source string and its type should be '@string', but it is '@"
     + [sourceExpression.mResultType definition].typeName.string + "'"
  end
#--- Parse name expression
  [self.mNameExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration nameExpression
  ]
#--- Check name expression type: @string
  if nameExpression.mResultType != inAnalysisContext.predefinedTypes.mStringType then
    error self.mEndOfNameExpression
    :"this expression is the name string and its type should be '@string', but it is '@"
     + [sourceExpression.mResultType definition].typeName.string + "'"
  end
#--- Check syntax directed translation result parameter
  let syntaxDirectedTranslationResultVarName = "syntaxDirectedTranslationResult_" + [self.mGrammarComponentName.location startLocationIndex]
  var assignementList = @stringlist §[]
  [self.mAbstractGrammarInstructionSyntaxDirectedTranslationResult analyzeGrammarInstructionSDT
    !inAnalysisContext
    !?ioTypeMap
    !hasTranslateFeature
    !syntaxDirectedTranslationResultVarName
    !?assignementList
    !?ioVariableMap
  ]
#--- Generate instructions
  ioInstructionListForGeneration += !@grammarInstructionWithSourceExpressionForGeneration {
    !self.mInstructionLocation
    !self.mGrammarComponentName.string
    !self.mLabelName.string
    !sourceExpression
    !nameExpression
    !actualParameterListForGeneration
    !hasTranslateFeature
    !assignementList
    !syntaxDirectedTranslationResultVarName
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION (source file)
#—————————————————————————————————————————————————————————————————————————————————————————————————

  refclass @grammarInstructionWithSourceFileForGeneration : @semanticInstructionForGeneration {
    private let @location mInstructionLocation
    private let @string mGrammarName
    private let @string mLabelName
    private let @semanticExpressionForGeneration mSourceFileExpression
    private let @actualParameterListForGeneration mActualParameterList
    private let @bool mGrammarHasTranslateFeature
    private let @stringlist mAssignementList
    private let @string mSyntaxDirectedTranslationResultVarName
  }

  #·······························································································

  override method @grammarInstructionWithSourceFileForGeneration generateInstruction
    ?!@stringset ioInclusionSet
    ?!@uint ioTemporaryVariableIndex
    ?!@stringset ioUnusedVariableCppNameSet
    ?let @bool unused inGenerateSyntaxDirectedTranslationString
    ?!@string ioGeneratedCode
  {
    ioInclusionSet += !"grammar-" + [self.mGrammarName fileNameRepresentation]
  #--- Source string
    [self.mSourceFileExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string sourceVar
    ]
  #--- Parameters
    var parameterCppNameList = @stringlist §[]
    var jokerParametersToReleaseList = @stringlist §[]
    var inputVariableList = @stringlist §[]
    for (mActualParameter) in self.mActualParameterList do
      [mActualParameter generateActualParameter
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioGeneratedCode
        !?jokerParametersToReleaseList
        !?inputVariableList
        !?ioUnusedVariableCppNameSet
        ?let @string parameterCppName
      ]
      parameterCppNameList += !parameterCppName
      if mActualParameter is @inputActualParameterForGeneration then
        ioGeneratedCode += parameterCppName + ".drop () ;\n"
      end
    end
    if self.mGrammarHasTranslateFeature then
      ioGeneratedCode += "String " + self.mSyntaxDirectedTranslationResultVarName + " ;\n"
    end
    ioGeneratedCode += "cGrammar_" + [self.mGrammarName identifierRepresentation]
                    +  "::_performSourceFileParsing_" + [self.mLabelName identifierRepresentation]
                    +  " ("
                    + compilerCppName () + ", "
                    + if self.mGrammarHasTranslateFeature then self.mSyntaxDirectedTranslationResultVarName + ", " else "" end
                    + sourceVar
    for (mValue) in parameterCppNameList do
      ioGeneratedCode += ", " + mValue
    end
    ioGeneratedCode += " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    for s in self.mAssignementList do
      ioGeneratedCode += s.mValue + "\n"
    end
  }

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION (source string)
#—————————————————————————————————————————————————————————————————————————————————————————————————

  refclass @grammarInstructionWithSourceExpressionForGeneration : @semanticInstructionForGeneration {
    private let @location mInstructionLocation
    private let @string mGrammarName
    private let @string mLabelName
    private let @semanticExpressionForGeneration mSourceStringExpression
    private let @semanticExpressionForGeneration mNameStringExpression
    private let @actualParameterListForGeneration mActualParameterList
    private let @bool mGrammarHasTranslateFeature
    private let @stringlist mAssignementList
    private let @string mSyntaxDirectedTranslationResultVarName
  }

  #·······························································································

  override method @grammarInstructionWithSourceExpressionForGeneration generateInstruction
    ?!@stringset ioInclusionSet
    ?!@uint ioTemporaryVariableIndex
    ?!@stringset ioUnusedVariableCppNameSet
    ?let @bool unused inGenerateSyntaxDirectedTranslationString
    ?!@string ioGeneratedCode {
    ioInclusionSet += !"grammar-" + [self.mGrammarName fileNameRepresentation]
  #--- Source string
    [self.mSourceStringExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string sourceVar
    ]
  #--- Name string
    [self.mNameStringExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string nameVar
    ]
  #--- Parameters
    var parameterCppNameList = @stringlist §[]
    var jokerParametersToReleaseList = @stringlist §[]
    var inputVariableList = @stringlist §[]
    for (mActualParameter) in self.mActualParameterList do
      [mActualParameter generateActualParameter
         !?ioInclusionSet
         !?ioTemporaryVariableIndex
         !?ioGeneratedCode
         !?jokerParametersToReleaseList
         !?inputVariableList
         !?ioUnusedVariableCppNameSet
         ?let @string parameterCppName
      ]
      parameterCppNameList += !parameterCppName
      if mActualParameter is @inputActualParameterForGeneration then
        ioGeneratedCode += parameterCppName + ".drop () ;\n"
      end
    end
    if self.mGrammarHasTranslateFeature then
      ioGeneratedCode += "String " + self.mSyntaxDirectedTranslationResultVarName + " ;\n"
    end
    ioGeneratedCode += "cGrammar_" + [self.mGrammarName identifierRepresentation]
                    +  "::_performSourceStringParsing_" + [self.mLabelName identifierRepresentation]
                    +  " (" + compilerCppName () + ", "
                    + if self.mGrammarHasTranslateFeature then self.mSyntaxDirectedTranslationResultVarName + ", " else "" end
                    + sourceVar
                    + ", " + nameVar
    for (mValue) in parameterCppNameList do
      ioGeneratedCode += ", " + mValue
    end
    ioGeneratedCode += " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    for s in self.mAssignementList do
      ioGeneratedCode += s.mValue + "\n"
    end
  }

#—————————————————————————————————————————————————————————————————————————————————————————————————
