#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @unaryPlusExpressionAST : @semanticExpressionAST {
  private let @location mOperatorLocation
  private let @semanticExpressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································

  rule <factor> !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $+$
    <factor> ? outExpression
    outExpression = @unaryPlusExpressionAST.new {!operatorLocation !outExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································

  rule <factor> !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $+$
    <factor> ? outExpression
    outExpression = @unaryPlusExpressionAST.new {!operatorLocation !outExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @unaryPlusExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·······················································································································

override method @unaryPlusExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Expression analysis
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: .null
    !inAnalysisContext
    !?ioVariableMap
    ?outExpression
  ]
#--- Check operator availability
  let @unifiedTypeMapEntry type = outExpression.mResultType
  if not [[type mHandledOperatorFlags] prefixPlusOperator] then
    error self.mOperatorLocation
    : "operand type is '@" + [type definition].mTypeName.string + "' and does not support the prefix '+' operator"
    :outExpression
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
