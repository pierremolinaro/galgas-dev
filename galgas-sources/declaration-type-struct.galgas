#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $struct$
    $@type$ ?let @lstring structTypeName indexing structDefinition
    let @structComparison comparison
    select
      comparison = .none
    or
      $%comparable$
      comparison = .comparable
    or
      $%equatable$
      comparison = .equatable
    end
    ${$
    var @propertyInCollectionListAST propertyList = ()
    repeat
    while
      <property_declaration_ggs3> !?ioDeclarations !?propertyList
    while
      <method_declaration_ggs3> !structTypeName !?ioDeclarations
    end
    $}$
    ioDeclarations.mDeclarationList += !@structDeclarationAST {
      !isPredefined: false # Is not predefined
      !structTypeName
      !propertyList
      !enumeratedElementTypeName: ""
      !comparison: comparison
      !isUsefullStruct: false
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $struct$
    $@type$ ?let @lstring structTypeName indexing structDefinition
    let @structComparison comparison
    select
      comparison = .none
    or
      $%comparable$
      comparison = .comparable
    or
      $%equatable$
      comparison = .equatable
    end
    ${$
    var @propertyInCollectionListAST propertyList = ()
    repeat
    while
      <property_declaration> !?ioDeclarations !?propertyList
    while
      <method_declaration> !structTypeName !?ioDeclarations
    end
    $}$
    ioDeclarations.mDeclarationList += !@structDeclarationAST {
      !isPredefined: false # Is not predefined
      !structTypeName
      !propertyList
      !enumeratedElementTypeName: ""
      !comparison: comparison
      !isUsefullStruct: false
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

private func %once forbiddenKeysForStruct -> @stringset {
  result = ()
  result += !"description"
  result += !"object"
  result += !"dynamicType"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

enum @structComparison {
  case none
  case equatable
  case comparable
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @structDeclarationAST : @semanticDeclarationAST {
  public let @lstring structTypeName
  private let @propertyInCollectionListAST mStructurePropertyListAST
  private let @string enumeratedElementTypeName %initArgLabel # Empty string if not enumerable
  private let @structComparison comparison %initArgLabel
  private let @bool isUsefullStruct %initArgLabel

  //······························································································

  override method enterDeclarationInGraph
    ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
    ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
    ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
    ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
    ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
  {
    let key = @lstring {!"@" + self.structTypeName !self.structTypeName.location}
    [!?ioSemanticTypePrecedenceGraph addNode !key !self]
    for property in self.mStructurePropertyListAST do
      let propertyKey = @lstring {!"@" + property.typeName !property.typeName.location}
      [!?ioSemanticTypePrecedenceGraph addEdge !key !propertyKey]
    end
  }

  //······························································································

  override getter keyRepresentation ->@string result {
    result = "struct @" + self.structTypeName
  }

  //······························································································

  override method enterDeclarationInSemanticContext
    ?!@equatableExtensionMap ioEquatableExtensionMap
    ?let @extensionInitializerForBuildingContext inExtensionInitializerMapForBuildingContext
    ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
    ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
    ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
    ?!@unifiedTypeMap ioTypeMap
    ?!@semanticContext ioSemanticContext {
  //--- Struct type index
    [!?ioTypeMap makeEntry !self.structTypeName ?let structTypeIndex]
  //--- Class functions and property map
    var @propertyMap propertyMap = ()
    var @classFunctionMap classFunctionMap = ()
    var @functionSignature constructorPropertyTypeList = ()
    var @typedPropertyList typedPropertyList = ()
    var @unifiedTypeMapEntryList typesToIncludeInHeaderCompilation = ()
    for property in self.mStructurePropertyListAST do
      [!?ioTypeMap makeEntry !property.typeName ?let propertyTypeEntry]
      let selector = [if property.hasSelector then property.name.string else "" end nowhere]
      if [property.initialization isNone] then
        constructorPropertyTypeList += !selector !propertyTypeEntry !property.name.string !true
      end
      typesToIncludeInHeaderCompilation += !propertyTypeEntry
      typedPropertyList +=
        !propertyTypeEntry
        !property.name
        !property.initialization
        !hasSetter: not [property.mutability isConstantProperty]
        !hasSelector: property.hasSelector
      [!?propertyMap insertKey
        !property.name
        ![property.accessControl accessControl !forDeclaringType: structTypeIndex]
        ![property.mutability isConstantProperty]
        !propertyTypeEntry
      ]
    end
    [!?classFunctionMap insertKey
      !@lstring {!"new" !.here}
      !constructorPropertyTypeList
      !true
      !structTypeIndex
    ]
  //--- Getters
    commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap)
  //--- Add Extensions
    var @setterMap setterMap = ()
    var @initializerMap initializerMap = ()
    var @instanceMethodMap instanceMethodMap = ()
    addExtensions (
      !inExtensionInitializerMapForBuildingContext
      !inExtensionMethodMapForBuildingContext
      !inExtensionGetterMapForBuildingContext
      !inExtensionSetterMapForBuildingContext
      !?ioSemanticContext
      !?ioTypeMap
      !self.structTypeName
      !isClass: false
      !?initializerMap
      !?getterMap
      !?setterMap
      !?instanceMethodMap
      !acceptSetters: true
    )
    var features = @typeFeatures.generateDescriptionGetterUtilityMethod
  //--- Synthetize an initializer, if the structure defines none
    if [initializerMap count] == 0 then
      features |= .generateSynthetizedInitializer
      [!?initializerMap insertKey
        !.init {![constructorPropertyTypeList initializerSignature] !self.structTypeName}
        !constructorPropertyTypeList
      ]
    end
  //--- Comparison
    switch self.comparison
    case none :
    case equatable :
      features |= .equatable
    case comparable :
      features |= .comparable | .equatable
    end  
    handleEquatableComparableExtension (
      !?ioEquatableExtensionMap
      !self.structTypeName
      !?features
      !acceptEquatable: true
      !acceptComparable: true
    )
  //--- Enumeration by "for" instruction
    let @unifiedTypeMapEntry enumeratedType
    if self.enumeratedElementTypeName == "" then
      enumeratedType = .null
    else
     [!?ioTypeMap makeEntryFromString !self.enumeratedElementTypeName ?enumeratedType]
    end
  //--- Enter in type map
    let typeDefinition = @unifiedTypeDefinition {
      !typeName: self.structTypeName
      !isPredefined: self.isPredefined
      !isConcrete: true
      !superType: .null
      !typeKind: .structType
      !supportCollectionValue: false
      !allTypedPropertyList: typedPropertyList
      !propertyMap: propertyMap
      !currentTypedPropertyList: typedPropertyList
      !initializerMap: initializerMap
      !classFunctionMap: classFunctionMap
      !getterMap: getterMap
      !setterMap: setterMap
      !instanceMethodMap: instanceMethodMap
      !classMethodMap: ()
      !unwrappedType: .null
      !readSubscriptMap: ()
      !enumerationDescriptorList: ()
      !features: features
      !addAssignOperatorArguments: ()
      !mapSearchMethodList: ()
      !generateHeaderInSeparateFile: false
      !typeForEnumeratedElement: enumeratedType # Type for enumerated element for "for" instruction
      !headerFileName: "struct-" + [self.structTypeName fileNameRepresentation]
      !headerKind: .oneHeader
    }
    [!?ioTypeMap insertType !typeDefinition.typeName !typeDefinition]
  }

  //······························································································

  override method semanticAnalysis
              ?!@lstringlist ioUsefulnessRootEntities
              ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
              ?let @string unused inProductDirectory
              ?let @semanticContext inSemanticContext
              ?!@unifiedTypeMap ioTypeMap
              ?let @predefinedTypes inPredefinedTypes
              ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
    let structType = [ioTypeMap typeMapEntryForLKey !self.structTypeName]
    let structNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.structTypeName)
  //---
    if [self.mStructurePropertyListAST count] == 0 then
      error self.structTypeName: "a structure cannot be empty: it must have at least one property"
    end
    var @typedPropertyList typedPropertyList = ()
    var @typedPropertyList constructorArgumentList = ()
    var @propertyIndexMap propertyMap = ()
    for property in self.mStructurePropertyListAST do
      let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!property.typeName)
      [!?ioUsefulEntitiesGraph addEdge !structNameForUsefulness !propertyTypeNameForUsefulness]
      let t = [ioTypeMap typeMapEntryForLKey !property.typeName]
      if [forbiddenKeysForStruct () hasKey !property.name.string] then
        var @string m = "an property cannot be named:"
        for s in forbiddenKeysForStruct () do
          m += " " + s
        end
        m += "; theses names are reserved"
        error property.name : m
      end
      if [property.mutability isWeakProperty] then
        switch [t definition].unwrappedType
        case null :
          error property.name : "the weak property type should be an optional class"
        case element (aWeakType) :
          if let aType = aWeakType, let ref = [[aType definition].typeKind getClassType] then
            if not [ref isReference] then
              error property.name : "the weak property type should be an optional refclass"
            end
          else
            error property.name : "the weak property type should be an optional class"
          end
        end
      end
      [!?propertyMap insertKey !property.name !t]
      switch property.initialization
      case none :
        constructorArgumentList +=
          !t
          !property.name
          !property.initialization
          !hasSetter: not [property.mutability isConstantProperty]
          !hasSelector: property.hasSelector
      case some (*) :
      end
      typedPropertyList +=
        !t
        !property.name
        !property.initialization
        !hasSetter: not [property.mutability isConstantProperty]
        !hasSelector: property.hasSelector
    //--- Check comparison
      switch self.comparison
      case none :
      case equatable :
        let propertyFeatures = [t definition].features
        if (not [propertyFeatures contains !.equatable])
           & not [propertyFeatures contains !.comparable]
           & not [propertyFeatures contains !.referenceEquatable] then
          error property.name
          : "the structure is not equatable, because '" + property.name + "' is not"
        end
      case comparable :
        if not [[t definition].features contains !.comparable] then
          error property.name
          : "the structure is not comparable, because '" + property.name + "' is not"
        end
      end  
    end
  //--- Build property initialization code
    [self.mStructurePropertyListAST buildPropertyInitializationCode
      !structNameForUsefulness
      !inSemanticContext
      !inPredefinedTypes
      !?ioUsefulEntitiesGraph
      !?ioTypeMap
      ?let unusedVariableCppNameSet
      ?let initializationCode
    ]
  //---
    let constructorNeedsCompilerVar = not [unusedVariableCppNameSet hasKey !compilerCppName ()]
    ioSemanticDeclarationListForGeneration +=
      !infoMessage: "struct " + self.structTypeName
      !@structTypeForGeneration {
        !structType
        !typedPropertyList
        !constructorArgumentList
        !initializationCode
        !constructorNeedsCompilerVar
        ![[structType definition].features contains !.generateSynthetizedInitializer]
      }
  //--- Useful entities graph
    [!?ioUsefulEntitiesGraph addNode !structNameForUsefulness !structNameForUsefulness]
    if self.isUsefullStruct || self.isPredefined then
      ioUsefulnessRootEntities += !structNameForUsefulness
    end
  //--- Add synthetized initializer ?
    if [[structType definition].features contains !.generateSynthetizedInitializer] then
      let initializerForUsefulness = initializerNameForUsefulEntitiesGraph (
        !self.structTypeName
        ![constructorArgumentList initializerSignature]
      )
      [!?ioUsefulEntitiesGraph addNode !initializerForUsefulness !initializerForUsefulness]
      [!?ioUsefulEntitiesGraph addEdge !initializerForUsefulness !structNameForUsefulness]
      if self.isUsefullStruct || self.isPredefined then
        ioUsefulnessRootEntities += !initializerForUsefulness
      end
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

class @structTypeForGeneration : @semanticTypeForGeneration {
  private let @typedPropertyList mTypedPropertyList
  private let @typedPropertyList mConstructorArgumentList
  private let @string mConstructorInitializationCode
  private let @bool mConstructorNeedsCompilerVar
  private let @bool synthetizeAnInitializer

  //······························································································

  override method appendDeclaration1 ?!@stringset ioInclusionSet !@string outHeader {
    for property in self.mTypedPropertyList do
      [property.typeEntry addHeaderFileName1 !?ioInclusionSet]
    end
    let selfTypeDefinition = [self.mSelfTypeEntry definition]
    outHeader = [filewrapper structureGenerationTemplate.structTypeHeader1
      !selfTypeDefinition.typeName.string
      ![self.mSelfTypeEntry  identifierRepresentation]
      !self.mTypedPropertyList
    ]
    outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
      !selfTypeDefinition.typeName.string
      ![self.mSelfTypeEntry identifierRepresentation]
      !selfTypeDefinition.isConcrete
      !selfTypeDefinition.initializerMap
      !selfTypeDefinition.classFunctionMap
      !selfTypeDefinition.getterMap
      !selfTypeDefinition.setterMap
      !selfTypeDefinition.instanceMethodMap
      !selfTypeDefinition.classMethodMap
      !selfTypeDefinition.readSubscriptMap
      !selfTypeDefinition.enumerationDescriptorList
      !selfTypeDefinition.features
      !selfTypeDefinition.addAssignOperatorArguments
      !selfTypeDefinition.typeForEnumeratedElement
      !selfTypeDefinition.supportCollectionValue
    ]
  }

  //······························································································

  override method appendSpecificImplementation
    ?let @unifiedTypeMap unused inTypeMap
    ?!@stringset ioInclusionSet
    !@string outImplementation
  {
    [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
    let selfTypeDefinition = [self.mSelfTypeEntry definition]
    outImplementation = [filewrapper structureGenerationTemplate.structTypeSpecificImplementation
      !selfTypeDefinition.typeName.string
      ![self.mSelfTypeEntry  identifierRepresentation]
      !self.mTypedPropertyList
      !self.mConstructorArgumentList
      !self.mConstructorInitializationCode
      !self.mConstructorNeedsCompilerVar
      !self.synthetizeAnInitializer
      ![selfTypeDefinition.features generateCppObjectComparison]
    ]
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper structureGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template structTypeHeader1 "GALGAS_struct.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList PROPERTY_LIST

  template structTypeSpecificImplementation "GALGAS_struct.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList PROPERTY_LIST
    ?@typedPropertyList INITIALIZER_ARGUMENT_LIST
    ?@string CONSTRUCTOR_INITIALIZATION_CODE
    ?@bool CONSTRUCTOR_NEEDS_COMPILER_VAR
    ?@bool GENERATE_SYNTHETIZED_INITIALIZER
    ?@bool GENERATE_COMPARISON
}

//————————————————————————————————————————————————————————————————————————————————————————————————
