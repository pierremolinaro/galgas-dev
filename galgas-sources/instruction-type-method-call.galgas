#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @typeMethodCallInstructionAST : @semanticInstructionAST {
  private let @lstring mTypeName
  private let @lstring mMethodName
  private let @actualParameterListAST mActualParameterList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $[$
    let instructionLocation = @location.here
    $@type$ ?let @lstring mTypeName indexing typeReferenceInTypeMethod
    $identifier$ ?let @lstring mMethodName
    <actual_parameter_list_ggs3> !?ioDeclarations ?let @actualParameterListAST actualParameterList
    $]$
    outInstruction = @typeMethodCallInstructionAST {
      !instructionLocation
      !mTypeName
      !mMethodName
      !actualParameterList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    let instructionLocation = @location.here
    $@type$ ?let @lstring mTypeName indexing typeReferenceInTypeMethod
    $.$
    $identifier$ ?let @lstring mMethodName
    <actual_parameter_list_within_parenthesis> !?ioDeclarations ?let @actualParameterListAST actualParameterList
    outInstruction = @typeMethodCallInstructionAST {
      !instructionLocation
      !mTypeName
      !mMethodName
      !actualParameterList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeMethodCallInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  for (mActualParameter) in self.mActualParameterList do
    [mActualParameter enterParameterInSemanticContext !?ioTypeMap]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @typeMethodCallInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap {
#--- Get type method map for the named type
  let type = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
#--- Get type method signature
  [[type definition].classMethodMap searchKey !self.mMethodName ?let routineSignature ?let hasCompilerArgument]
#--- Check effective parameters
  [self.mActualParameterList analyzeRoutineArguments
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mMethodName
    !invokedEntityNameForErrorSignaling: "'" + self.mMethodName + "' type proc header"
    !routineSignature
    !?ioVariableMap
    !?ioInstructionListForGeneration
    ?let @actualParameterListForGeneration actualParameterListForGeneration
  ]
#--- Generate instructions
  ioInstructionListForGeneration += !@typeMethodCallInstructionForGeneration {
    !self.mTypeName
    !self.mMethodName
    !actualParameterListForGeneration
    !hasCompilerArgument}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @typeMethodCallInstructionForGeneration : @semanticInstructionForGeneration {
  private let @lstring mTypeName
  private let @lstring mMethodName
  private let @actualParameterListForGeneration mActualParameterList
  private let @bool mHasCompilerArgument
}

#·····················································································································*

override method @typeMethodCallInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  ioGeneratedCode += "{\n"
#--- Parameters
  var parameterCppNameList = @stringlist ()
  var jokerParametersToReleaseList = @stringlist ()
  var inputVariableList = @stringlist ()
  for (mActualParameter) in self.mActualParameterList do
    [mActualParameter generateActualParameter
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioGeneratedCode
      !?jokerParametersToReleaseList
      !?inputVariableList
      !?ioUnusedVariableCppNameSet
      ?let @string parameterCppName]
    parameterCppNameList += !parameterCppName
  end
#--- Generate method call
  ioGeneratedCode += "GALGAS_" + [self.mTypeName.string identifierRepresentation]
                  + "::class_method_" + [self.mMethodName.string identifierRepresentation] + " ("
  for (mValue) in parameterCppNameList
    do ioGeneratedCode += mValue
    between ioGeneratedCode += ", "
  end
  if self.mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    if [parameterCppNameList count] > 0 then
      ioGeneratedCode += ", "
    end
    ioGeneratedCode +=  compilerCppName ()
  end
  if self.mHasCompilerArgument | ([parameterCppNameList count] > 0) then
    ioGeneratedCode += " COMMA_"
  end
  ioGeneratedCode += [self.mMethodName.location sourceFile] + ") ;\n"
  ioGeneratedCode += "}\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
