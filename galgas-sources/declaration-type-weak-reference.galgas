#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#—————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @weakReferenceDeclarationAST : @semanticDeclarationAST {
  private let @lstring mClassTypeName
  private let @lstring mWeakReferenceTypeName
  private let @lstring mSuperWeakReferenceTypeName # Empty if no super class
  private let @bool mGenerateInSeparateFile
  private let @propertyInCollectionListAST mPropertyList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH
#—————————————————————————————————————————————————————————————————————————————————————————————————

override getter @weakReferenceDeclarationAST keyRepresentation -> @string {
  result = "weak reference @" + self.mWeakReferenceTypeName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring {!"@" + self.mWeakReferenceTypeName !self.mWeakReferenceTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  if self.mSuperWeakReferenceTypeName.string != "" then
    [!?ioSemanticTypePrecedenceGraph addEdge
      !key
      !@lstring {!"@" + self.mSuperWeakReferenceTypeName !self.mSuperWeakReferenceTypeName.location}
    ]
  end
#  [!?ioSemanticTypePrecedenceGraph addEdge
#    !key
#    !@lstring {!"@" + self.mClassTypeName !self.mClassTypeName.location}
#  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceDeclarationAST enterDeclarationInSemanticContext
  ?!@equatableExtensionMap ioEquatableExtensionMap
  ?let @extensionInitializerForBuildingContext inExtensionInitializerMapForBuildingContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
#--- Handle super class
  let @unifiedTypeMapEntry superClassIndex
  let @bool generateHeaderInSeparateFile
  if self.mSuperWeakReferenceTypeName.string == "" then
    superClassIndex = @unifiedTypeMapEntry.null
    generateHeaderInSeparateFile = self.mGenerateInSeparateFile
  else
    [!?ioTypeMap makeEntry !self.mSuperWeakReferenceTypeName ?superClassIndex]
    let superTypeDefinition = [ioTypeMap typeDefinition !self.mSuperWeakReferenceTypeName]
    generateHeaderInSeparateFile = superTypeDefinition.generateHeaderInSeparateFile
  #---
    if not [superTypeDefinition.typeKind isWeakReferenceType] then
      error self.mSuperWeakReferenceTypeName : "the @" + self.mSuperWeakReferenceTypeName + " should be a weak reference type"
    end
  end
#--- Current class Index
  [!?ioTypeMap makeEntry
     !self.mWeakReferenceTypeName
     ?let @unifiedTypeMapEntry weakReferenceIndex
  ]
#--- Class functions
  var @classFunctionMap classFunctionMap = ()
  [!?classFunctionMap insertKey
    !@lstring {!"nil" !self.mWeakReferenceTypeName.location}
    !()
    !false
    !weakReferenceIndex
  ]
#--- Add Extensions
  var @getterMap getterMap = ()
  var @setterMap setterMap = ()
  var @instanceMethodMap instanceMethodMap = ()
  var @initializerMap initializerMap = ()
  addExtensions (
    !inExtensionInitializerMapForBuildingContext
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mWeakReferenceTypeName
    !isClass: false
    !?initializerMap
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
  for (lkey 7*) in getterMap do
    error lkey : "a weak reference does not support extension"
  end
  for (lkey 5*) in setterMap do
    error lkey : "a weak reference does not support extension"
  end
  for (lkey 6*) in instanceMethodMap do
    error lkey : "a weak reference does not support extension"
  end
  var features = @typeFeatures.referenceEquatable
  handleEquatableComparableExtension (
    !?ioEquatableExtensionMap
    !self.mWeakReferenceTypeName
    !?features
    !acceptEquatable: false
    !acceptComparable: false
  )
#--- Enter in type map
  [!?ioTypeMap makeEntry  !self.mClassTypeName ?let classIndex]
  let typeDefinition = @unifiedTypeDefinition {
    !typeName: self.mWeakReferenceTypeName
    !isPredefined: self.isPredefined
    !isConcrete: true # Concrete Type
    !superType: superClassIndex
    !typeKind: .weakReferenceType {!referenceType: classIndex}
    !supportCollectionValue: false # Does not support collection value
    !allTypedPropertyList: ()
    !propertyMap: () # attributeMap
    !currentTypedPropertyList: ()
    !initializerMap: initializerMap
    !classFunctionMap: classFunctionMap
    !getterMap: ()
    !setterMap: ()
    !instanceMethodMap: ()
    !classMethodMap: ()
    !unwrappedType: .null
    !readSubscriptMap: ()
    !enumerationDescriptorList: ()
    !features: features
    !addAssignOperatorArguments: ()
    !mapSearchMethodList: ()
    !generateHeaderInSeparateFile: generateHeaderInSeparateFile
    !typeForEnumeratedElement: .null
    !headerFileName: "weak-reference-" + [self.mWeakReferenceTypeName fileNameRepresentation]
    !headerKind: .oneHeader
  }
  [!?ioTypeMap insertType !typeDefinition.typeName !typeDefinition]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let weakRefTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mWeakReferenceTypeName)
  [!?ioUsefulEntitiesGraph addNode !weakRefTypeNameForUsefulness !weakRefTypeNameForUsefulness]
  if self.mSuperWeakReferenceTypeName.string != "" then
    let superWeakRefNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mSuperWeakReferenceTypeName)
    [!?ioUsefulEntitiesGraph addEdge !weakRefTypeNameForUsefulness !superWeakRefNameForUsefulness]
  end
#------ Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mWeakReferenceTypeName]
#--- Super class type
  let @unifiedTypeMapEntry superClassEntry = if self.mSuperWeakReferenceTypeName.string == ""
    then @unifiedTypeMapEntry.null
    else [ioTypeMap typeMapEntryForLKey !self.mSuperWeakReferenceTypeName]
  end
#------ Super type, and class features
# A class that has a super may not have any feature
# A class without a super class admits the 'generatedInSeparateFile' feature
  var @typedPropertyList allAttributeList
  if superClassEntry == .null then
    allAttributeList = ()
#    var @bool generatedInSeparateFileFeature = self.mGenerateInSeparateFile
#    if [self.mClassFeatureList count] > 0 then
#      for (mValue) in self.mClassFeatureList do
#        if mValue.string == "generatedInSeparateFile" then
#          if generatedInSeparateFileFeature then
#            error mValue:"the 'generatedInSeparateFile' is already named"
#          end
#          generatedInSeparateFileFeature = true
#        else
#          error mValue:"only the 'generatedInSeparateFile' attribute is allowed here"
#        end
#      end
#    end
  else
    allAttributeList = [superClassEntry definition].allTypedPropertyList
    if self.mGenerateInSeparateFile then
      error self.mClassTypeName:"a class that has a super class does not accept any feature"
    end
  end
#------ Enter attributes
  var @typedPropertyList typedAttributeList = ()
  var @propertyIndexMap attributeMap = ()
  for (isConstant propertyTypeName mPropertyName unused accessControl hasSelector initialization) in self.mPropertyList do
    let t = [ioTypeMap typeMapEntryForLKey !propertyTypeName]
    typedAttributeList +=
      !t
      !mPropertyName
      !initialization
      !hasSetter: not isConstant
      !hasSelector: hasSelector
    allAttributeList +=
      !t
      !mPropertyName
      !initialization
      !hasSetter: not isConstant
      !hasSelector: hasSelector
    [!?attributeMap insertKey !mPropertyName !t]
  end
#------
  let @unifiedTypeMapEntry referenceClassType = [ioTypeMap typeMapEntryForLKey
    !self.mClassTypeName
  ]
  ioSemanticDeclarationListForGeneration +=
    !infoMessage: "weak reference " + self.mWeakReferenceTypeName
    !@weakReferenceTypeForGeneration {
      !selfType
      !referenceClassType
      !superClassEntry
      !allAttributeList
      !typedAttributeList
      ![selfType definition].generateHeaderInSeparateFile
    }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @weakReferenceTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry mReferenceClassType
  private let @unifiedTypeMapEntry mSuperClass # Null if no super class
  private let @typedPropertyList allTypedPropertyList # Inherited followed by current attributes
  private let @typedPropertyList mTypedAttributeList
  private let @bool generateHeaderInSeparateFile # Significant only for classes
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceTypeForGeneration appendDeclaration1 ?!@stringset ioInclusionSet
                                                                   !@string outHeader {
  if not [self.mSuperClass isNull] then
    [self.mSuperClass addHeaderFileName !?ioInclusionSet]
  end
  [self.mReferenceClassType addHeaderFileName !?ioInclusionSet]
  let typeDefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper classGenerationTemplate.weakReferenceClassTypeHeader1
    ![self.mReferenceClassType identifierRepresentation]
    ![self.mSelfTypeEntry identifierRepresentation]
    !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !typeDefinition.typeName.string
    ![typeDefinition.typeName.string identifierRepresentation]
    !typeDefinition.isConcrete
    !typeDefinition.initializerMap
    !typeDefinition.classFunctionMap
    !typeDefinition.getterMap
    !typeDefinition.setterMap
    !typeDefinition.instanceMethodMap
    !typeDefinition.classMethodMap
    !typeDefinition.readSubscriptMap
    !typeDefinition.enumerationDescriptorList
    !typeDefinition.features
    !typeDefinition.addAssignOperatorArguments
    !typeDefinition.typeForEnumeratedElement
    !typeDefinition.supportCollectionValue
  ]
 }

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  let typeDefinition = [self.mSelfTypeEntry definition]
  outImplementation = [filewrapper classGenerationTemplate.weakReferenceClassTypeSpecificImplementation
    ![self.mReferenceClassType identifierRepresentation]
    ![typeDefinition.typeName.string identifierRepresentation]
    !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
    !self.mTypedAttributeList
    !self.allTypedPropertyList
    ![self.allTypedPropertyList subListWithRange !.init {!0 ![self.allTypedPropertyList count] - [self.mTypedAttributeList count]}]
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

