#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @templateInstructionForEnumerationAST {
  case implicit (@string prefix @location remplacementRange)
  case explicit (@lstringlist enumeration @location endOfProperties)
}

#·······················································································································

refclass @templateInstructionForeachAST : @templateInstructionAST {
  private let @bool mIsAscending
  private let @templateExpressionAST mExpression
  private let @templateInstructionForEnumerationAST mEnumeratedObjectProperties
  private let @templateInstructionListAST mBeforeInstructionList
  private let @templateInstructionListAST mDoInstructionList
  private let @lstring mIndexIdentifier
  private let @templateInstructionListAST mBetweenInstructionList
  private let @templateInstructionListAST mAfterInstructionList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension templateSyntax {

  #·······························································································

  rule <for_instruction_element> ?!@lstringlist ioElementList {
    $literalInt$ ?let count
    $*$
    var n = [count.bigint uint]
    if n == 0 then
      error count: "this value should be > 0"
    end
    loop (n) while n > 0 do
      ioElementList += !["" nowhere]
      n -= 1
    end
  }

  #·······························································································

  rule <for_instruction_element> ?!@lstringlist ioElementList {
    $*$
    ioElementList += !["" nowhere]
  }

  #·······························································································

  rule <for_instruction_element> ?!@lstringlist ioElementList {
    $identifier$ ?let constantName
    ioElementList += !constantName
  }

  #·······························································································

  rule <for_instruction_enumerated_object> !@templateInstructionForEnumerationAST outEnumeratedObject
                                           !@templateExpressionAST outExpression {
    $($
    let start = @location.here
    $)$
    let endLocation = @location.here
    $in$
    <expression_tpl> ?outExpression
    let @string foreachPrefix
    select
      foreachPrefix = ""
    or
      $:$
      $identifier$ ?let @lstring prefixString
      foreachPrefix = prefixString.string
    end
    outEnumeratedObject = .implicit {!prefix: foreachPrefix !remplacementRange: [start union !endLocation]}
  }

  #·······························································································

  rule <for_instruction_enumerated_object> !@templateInstructionForEnumerationAST outEnumeratedObject
                                           !@templateExpressionAST outExpression {
    var enumeration = @lstringlist §[]
    $($
    repeat
      <for_instruction_element> !?enumeration
    while
    end
    let endOfProperties = @location.here
    $)$
    $in$
    <expression_tpl> ?outExpression
    select
    or
      $:$
      let startLocation = @location.here
      $identifier$ ?let @lstring prefixString
      error [prefixString.location union !startLocation]
      : "useless prefix" fixit { replace "" }
    end
    outEnumeratedObject = .explicit {!enumeration: enumeration !endOfProperties: endOfProperties}
  }

  #·······························································································

  rule <template_instruction> ?!@templateInstructionListAST ioResultingInstructionList {
    $for$
    let @bool ascending
    select
      ascending = true
    or
      $<$
      ascending = true
    or
      $>$
      ascending = false
    end
    <for_instruction_enumerated_object> ?let enumeratedProperties ?let expression
  #--- before block
    var @templateInstructionListAST beforeInstructionList = §[]
    select
    or
      $before$
      repeat
        enterTemplateString (!?beforeInstructionList)
      while
        <template_instruction> !?beforeInstructionList
      end
    end
  #--- Do block
    $do$
    let @lstring indexIdentifier
    select
      indexIdentifier = @lstring {!"" !@location.here}
    or
      $($
      $identifier$ ? indexIdentifier
      $)$
    end
    var @templateInstructionListAST doInstructionList = §[]
    repeat
      enterTemplateString (!?doInstructionList)
    while
      <template_instruction> !?doInstructionList
    end
  #--- between block
    var @templateInstructionListAST betweenInstructionList = §[]
    select
    or
      $between$
      repeat
        enterTemplateString (!?betweenInstructionList)
      while
        <template_instruction> !?betweenInstructionList
      end
    end
  #--- after block
    var @templateInstructionListAST afterInstructionList = §[]
    select
    or
      $after$
      repeat
        enterTemplateString (!?afterInstructionList)
      while
        <template_instruction> !?beforeInstructionList
      end
    end
  #---
    $end$
    ioResultingInstructionList += !@templateInstructionForeachAST {
      !ascending
      !expression
      !enumeratedProperties
      !beforeInstructionList
      !doInstructionList
      !indexIdentifier
      !betweenInstructionList
      !afterInstructionList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! ANALYSIS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionForeachAST templateInstructionAnalysis
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @templateAnalysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@templateInstructionListForGeneration ioInstructionList
{
#--- Foreach expression
  [self.mExpression templateExpressionAnalysis
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    ?let expression
  ]
#--- Check expression is enumerable (empty List if cannot be enumerated)
  let @enumerationDescriptorList enumerationDescriptor = [expression.mResultType definition].enumerationDescriptorList
  if [enumerationDescriptor count] == 0 then
    error expression.mLocation : "expression of '@" + [expression.mResultType definition].typeName.string + "' cannot be enumerated"
  end
#--- Before instructions
  var beforeInstructionList = @templateInstructionListForGeneration §[]
  templateInstructionListAnalysis (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mBeforeInstructionList
    !?beforeInstructionList
  )
#--- Do instructions
  let enumeratorCppName = "enumerator_" + [[self.mIndexIdentifier.location startLocationIndex] string]
  var doVariableMap = inAnalysisContext.mTemplateVariableMap
  let cppIndexVarName = "index_" + [[self.mIndexIdentifier.location startLocationIndex] string]
    + "_" + [self.mIndexIdentifier.string identifierRepresentation]
  if self.mIndexIdentifier.string != "" then
    [!?doVariableMap insertKey !self.mIndexIdentifier !inAnalysisContext.mPredefinedTypes.mUIntType !cppIndexVarName]
  end
  switch self.mEnumeratedObjectProperties
  case implicit (@string prefix @location remplacementRange) :
    var suggestion = "("
    for (enumeratedType enumerationName) in enumerationDescriptor
    do
      [!?doVariableMap insertKey
        !@lstring {!prefix + enumerationName !expression.mLocation}
        !enumeratedType
        !enumeratorCppName +".current_" + [enumerationName identifierRepresentation] + " (HERE)"
      ]
      suggestion += prefix + enumerationName
    between
      suggestion += " "
    end
    suggestion += ")"
    if [option galgas_cli_options.errorAnomynousForInstructionEnumeratedObject value] then
      error remplacementRange
      : "anonymous 'for' enumerated object (due to '--error-anonymous-for-instruction' option)"
      fixit { replace suggestion }
    end
  case explicit (@lstringlist enumeration @location errorLocation) :
    if [enumeration count] != [enumerationDescriptor count] then
      error errorLocation
      : [[enumerationDescriptor count] string] + " variables are required here ("
      + [enumeration count] + " provided)"
    else
      for (enumeratedType enumerationName) in enumerationDescriptor,
          (optionalConstantName) in enumeration do
        if optionalConstantName.string != "" then # Empty string for joker
          [!?doVariableMap insertKey
            !optionalConstantName
            !enumeratedType
            !enumeratorCppName +".current_" + [enumerationName identifierRepresentation] + " (HERE)"
          ]
        end
      end
    end
  end
  let doAnalysisContext = @templateAnalysisContext {
    !inAnalysisContext.mSemanticContext
    !inAnalysisContext.mPredefinedTypes
    !doVariableMap}
  var doInstructionList = @templateInstructionListForGeneration §[]
  templateInstructionListAnalysis (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !doAnalysisContext
    !?ioTypeMap
    !self.mDoInstructionList
    !?doInstructionList
  )
#--- Between instructions
  var betweenInstructionList = @templateInstructionListForGeneration §[]
  templateInstructionListAnalysis (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mBetweenInstructionList
    !?betweenInstructionList
  )
#--- After instructions
  var afterInstructionList = @templateInstructionListForGeneration §[]
  templateInstructionListAnalysis (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mAfterInstructionList
    !?afterInstructionList
  )
#---
  ioInstructionList += !@templateInstructionForeachForGeneration {
    !self.mIsAscending
    !expression
    !enumeratorCppName
    !beforeInstructionList
    !doInstructionList
    !cppIndexVarName
    !betweenInstructionList
    !afterInstructionList
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @templateInstructionForeachForGeneration : @templateInstructionForGeneration {
  private let @bool mIsAscending
  private let @semanticExpressionForGeneration mExpression
  private let @string mEnumeratorCppName
  private let @templateInstructionListForGeneration mBeforeInstructionList
  private let @templateInstructionListForGeneration mDoInstructionList
  private let @string mIndexCppName
  private let @templateInstructionListForGeneration mBetweenInstructionList
  private let @templateInstructionListForGeneration mAfterInstructionList
}

#·······················································································································

override method @templateInstructionForeachForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
#---
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let foreachVarCppName]
#--- Index
  if [self.mIndexCppName count] > 0 then
    ioGeneratedCode += "GALGAS_uint " + self.mIndexCppName + " (0) ;\n"
  end
#---
  ioGeneratedCode += "if (" + foreachVarCppName + ".isValid ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
  ioGeneratedCode += "cEnumerator_" + [self.mExpression.mResultType identifierRepresentation] + " " + self.mEnumeratorCppName + " (" + foreachVarCppName + ", "
                  + if self.mIsAscending then "EnumerationOrder::up" else "EnumerationOrder::down" end + ") ;\n"
#--- Before
  if ([self.mBeforeInstructionList count] + [self.mAfterInstructionList count]) > 0 then
    ioGeneratedCode += "const bool nonEmpty_" + self.mEnumeratorCppName + " = " + self.mEnumeratorCppName + ".hasCurrentObject () ;\n"
  end
  if [self.mBeforeInstructionList count] > 0 then
    ioGeneratedCode += "if (nonEmpty_" + self.mEnumeratorCppName + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !self.mBeforeInstructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
  ioGeneratedCode += "while (" + self.mEnumeratorCppName + ".hasCurrentObject ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
#--- Do
  templateCodeGenerationForListInstruction (
    !self.mDoInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
#--- Between
  if [self.mBetweenInstructionList count] > 0 then
    ioGeneratedCode += "if (" + self.mEnumeratorCppName + ".hasNextObject ()) {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !self.mBetweenInstructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
#--- Index
  if [self.mIndexCppName count] > 0 then
    ioGeneratedCode += self.mIndexCppName + ".increment () ;\n"
  end
#---
  ioGeneratedCode += self.mEnumeratorCppName + ".gotoNextObject () ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
#--- After
  if [self.mAfterInstructionList count] > 0 then
    ioGeneratedCode += "if (nonEmpty_" + self.mEnumeratorCppName + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !self.mAfterInstructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
#---
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

