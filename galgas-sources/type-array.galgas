#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @arrayDeclarationAST : @semanticDeclarationAST {
  private let @lstring mArrayTypeName
  private let @lstring mElementTypeName
  private let @luint mDimension
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $array$
  #--- Map type name
    $@type$ ?let @lstring arrayTypeName indexing arrayTypeDefinition
    $:$
    $@type$ ?let @lstring elementListTypeName indexing arrayElementTypeReference
    $[$
    $uint32$ ?let @luint dimension
    $]$
    ioDeclarations.mDeclarationList += !@arrayDeclarationAST.new {
      !false # Is not predefined
      !arrayTypeName
      !elementListTypeName
      !dimension
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $array$
  #--- Map type name
    $@type$ ?let @lstring arrayTypeName indexing arrayTypeDefinition
    $:$
    $@type$ ?let @lstring elementListTypeName indexing arrayElementTypeReference
    $[$
    $uint32$ ?let @luint dimension
    $]$
    ioDeclarations.mDeclarationList += !@arrayDeclarationAST.new {
      !false # Is not predefined
      !arrayTypeName
      !elementListTypeName
      !dimension
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mArrayTypeName !self.mArrayTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mElementTypeName !self.mElementTypeName.location}]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext {
#---
  if self.mDimension.uint == 0 then
    error self.mDimension: "the dimension of an array should be > 0"
  end
#--- array type
  [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mArrayTypeName ?let arrayTypeIndex]
#--- element type
  [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mElementTypeName ?let elementTypeIndex]
#---
  var @constructorMap constructorMap = {}
  commonGetterMapForAllTypes ( !?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  var @setterMap setterMap ={}
  let @instanceMethodMap instanceMethodMap = {}
#--- 
  [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !"bool" ?let boolType]
#--- 
  [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !"uint" ?let uintType]
#---
  var @functionSignature uintArgs = {}
  var @uint idx = 0
  loop (self.mDimension.uint) while idx < self.mDimension.uint do
    uintArgs += !["" nowhere] !uintType !"inSize" + idx
    idx += 1
  end
#--- Constructor
  [!?constructorMap insertKey
    !@lstring.new {!"new" !@location.here}
    !uintArgs
    !false
    !arrayTypeIndex
  ]
#--- Getters
  enterBaseGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !"axisCount"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName: "sizeForAxis" !"uint" !"inAxisIndex"
    !returnedTypeName:"uint"
    !hasCompilerArgument:true
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName: "rangeForAxis"
    !"uint"
    !"inAxisIndex"
    !returnedTypeName:"range"
    !hasCompilerArgument:true
  )
  [!?getterMap insertOrReplace
    !@lstring.new {!"isValueValidAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !uintArgs
    !@location.here
    !true
    !boolType
    !@methodQualifier.isBasicFinal
    !"" # No Error message
  ]
  [!?getterMap insertOrReplace
    !@lstring.new {!"valueAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !uintArgs
    !@location.here
    !true
    !elementTypeIndex
    !@methodQualifier.isBasicFinal
    !"" # No Error message
  ]
#--- Modifiers
  var setterFormalArgumentList = @formalParameterSignature {}
  setterFormalArgumentList += !["" nowhere] !elementTypeIndex !@formalArgumentPassingModeAST.argumentConstantIn !"InValue"
  idx = 0
  loop (self.mDimension.uint) while idx < self.mDimension.uint do
    setterFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inIndex" + idx
    idx += 1
  end
  [!?setterMap insertKey
    !["setValueAtIndex" nowhere]
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !true
    !@methodQualifier.isBasicFinal
    !""
  ]
  [!?setterMap insertKey
    !["forceValueAtIndex" nowhere]
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !true
    !@methodQualifier.isBasicFinal
    !""
  ]
  [!?setterFormalArgumentList popFirst ?4*]
  [!?setterMap insertKey
    !["invalidateValueAtIndex" nowhere]
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !true
    !@methodQualifier.isBasicFinal
    !""
  ]
  [!?setterMap insertKey
    !["setSize" nowhere]
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !true
    !@methodQualifier.isBasicFinal
    !""
  ]
  setterFormalArgumentList = @formalParameterSignature {}
  setterFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inSize"
  setterFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inAxisIndex"
  [!?setterMap insertKey
    !["setSizeForAxis" nowhere]
    !@methodKind.definedAsMember
    !setterFormalArgumentList
    !true
    !@methodQualifier.isBasicFinal
    !""
  ]
#--- Enter in semantic context
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mArrayTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-entry.null
    !@typeKindEnum. listMapType
    !false # Does not support collection value
    !@typedPropertyList {}
    !{}
    !@typedPropertyList {}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !@enumerationDescriptorList {}
    !.isComparable
    !@functionSignature {} # addAssignOperatorDescription
    !{}
    !{}
    !@mapSearchMethodListAST {}
    !@mapSearchMethodListAST {}
    !false # Do not generate header in separate file
    !@unifiedTypeMap-entry.null # Type for enumerated element for "for" instruction
    !"" # No default constructor
    !"array-" + [self.mArrayTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mArrayTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mElementTypeName)
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
#---
  ioSemanticDeclarationListForGeneration +=
    !"array " + self.mArrayTypeName
    !@arrayTypeForGeneration.new {
      !@unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mArrayTypeName}
      !@unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mElementTypeName}
      !self.mDimension.uint
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @arrayTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMap-entry mElementTypeEntry
  private let @uint mDimension
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  outHeader = [filewrapper typeGenerationTemplate.arrayTypeHeader1
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mElementTypeEntry identifierRepresentation]
    !self.mDimension
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mSelfTypeEntry  mIsConcrete]
    ![self.mSelfTypeEntry  mConstructorMap]
    ![self.mSelfTypeEntry  mGetterMap]
    ![self.mSelfTypeEntry  mSetterMap]
    ![self.mSelfTypeEntry  mInstanceMethodMap]
    ![self.mSelfTypeEntry  mClassMethodMap]
    ![self.mSelfTypeEntry  mOptionalMethodMap]
    ![self.mSelfTypeEntry  mEnumerationDescriptor]
    ![self.mSelfTypeEntry  mHandledOperatorFlags]
    ![self.mSelfTypeEntry  mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry  mTypeForEnumeratedElement]
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @arrayTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  [self.mSelfTypeEntry  addHeaderFileName !?ioInclusionSet]
  [self.mElementTypeEntry addHeaderFileName !?ioInclusionSet]

  var suffixList = @stringlist {}
  var @uint idx = 0
  loop (self.mDimension) while idx < self.mDimension do
    suffixList += ![idx string]
    idx += 1
  end
  outImplementation = [filewrapper typeGenerationTemplate.arrayTypeSpecificImplementation
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mElementTypeEntry identifierRepresentation]
    !self.mDimension
    !suffixList
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

