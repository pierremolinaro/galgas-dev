#----------------------------------------------------------------------------------------------------------------------*
#   AST                                                                                                                *
#----------------------------------------------------------------------------------------------------------------------*

class @overridingExtensionSetterAST : @semanticDeclarationAST {
  @lstring mTypeName
  @lstring mOverridingExtensionSetterName
  @formalParameterListAST mOverridingExtensionSetterFormalParameterList
  @semanticInstructionListAST mOverridingExtensionSetterInstructionList
  @location mEndOfSetterDeclarationLocation
}

#----------------------------------------------------------------------------------------------------------------------*
#   SYNTAX                                                                                                             *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $setter$
    $@type$ ?var  @lstring className indexing typeReferenceOverrideExtensionSetterDefinition
    $identifier$ ?var  @lstring setterName indexing overrideExtensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfSetterLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionSetterAST.new {
      !false # Is not predefined
      !className
      !setterName
      !formalParameterList
      !routineInstructionList
      !endOfSetterLocation
    }
  }

  #·····················································································································

}

#----------------------------------------------------------------------------------------------------------------------*
#   ENTER IN GRAPH                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

override method @overridingExtensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
}

#----------------------------------------------------------------------------------------------------------------------*
#   KEY REPRESENTATION                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override getter @overridingExtensionSetterAST keyRepresentation -> @string outString {
  outString = "overriding extension setter @" + mTypeName + " " + mOverridingExtensionSetterName
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC CONTEXT                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @overridingExtensionSetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC ANALYSIS                                                                                                  *
#----------------------------------------------------------------------------------------------------------------------*

override method @overridingExtensionSetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
#--- Useful entities graph
  let nameForUsefulness = setterNameForUsefulEntitiesGraph (!mTypeName !mOverridingExtensionSetterName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-proxy selfType = @unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mTypeName}
#--- Check self type is a class
  if [selfType mTypeKindEnum] != @typeKindEnum.classType then
    error mOverridingExtensionSetterName: "cannot declare a extension setter: '@" + [selfType key] + "' is not a class"
  end
#--- Find base type name
  @string baseTypeName = ""
  @unifiedTypeMap-proxy superType = [selfType mSuperType]
  var inheritedSignature =@formalParameterSignature {}
  @location inheritedDeclarationLocation = @location.here
  loop( [inSemanticContext.mTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mSetterMap] hasKey ![mOverridingExtensionSetterName string]] then
      @methodQualifier qualifier
      [[superType mSetterMap] searchKey !mOverridingExtensionSetterName ?* ?inheritedSignature ?* ?qualifier ?*]
      if qualifier <= @methodQualifier. isBasicFinal then
        baseTypeName = [superType key]
      end
    end
    superType = [superType mSuperType]
  end
  if baseTypeName == "" then
    error mOverridingExtensionSetterName:"this setter is not declared by a super class"
  end
#--- Analyze instruction list
  var formalParameterListForGeneration =@formalParameterListForGeneration {}
  @semanticInstructionListForGeneration semanticInstructionListForGeneration
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !"object"
    !selfType
  }
  analyzeRoutineBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !mOverridingExtensionSetterFormalParameterList
    !@localConstantList.emptyList
    !@typedPropertyList.emptyList
    ![selfType mAllTypedAttributeList]
    !"object->"
    !mOverridingExtensionSetterInstructionList
    !mEndOfSetterDeclarationLocation
    ?semanticInstructionListForGeneration
    ?formalParameterListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      ![mOverridingExtensionSetterName location]
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !" overriding extension setter " + mOverridingExtensionSetterName
    !@overridingExtensionSetterForGeneration.new {
      !false # Do not generate Cpp header file
      !"setter-" + [mTypeName fileNameRepresentation] + "-" + [mOverridingExtensionSetterName fileNameRepresentation]
      !selfType
      !baseTypeName
      ![mOverridingExtensionSetterName string]
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    }
#    !"~"
}

#----------------------------------------------------------------------------------------------------------------------*
#   EXTENSION LIST MAP                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override method @overridingExtensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioOverridingExtensionSetterListMap +=
    ![mTypeName string]
    !mOverridingExtensionSetterName
}

#----------------------------------------------------------------------------------------------------------------------*
#   CODE GENERATION                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

class @overridingExtensionSetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  @unifiedTypeMap-proxy mReceiverType
  @string mBaseTypeName
  @string mExtensionSetterName
  @formalParameterListForGeneration mExtensionSetterFormalParameterList
  @typedPropertyList mTypedAttributeList
  @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @overridingExtensionSetterForGeneration headerKind ->@headerKind outResult {
  outResult = @headerKind.noHeader
}

#·······················································································································

override method @overridingExtensionSetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  generateExtensionSetter (
    ![mReceiverType key]
    !mBaseTypeName
    !mExtensionSetterName
    !?ioInclusionSet
    !mExtensionSetterFormalParameterList
    !mSemanticInstructionListForGeneration
    ?let @string methodImplementation
  )
  @unifiedTypeMap-proxy baseType = mReceiverType
  @bool searching = true
  loop( @uint. max) while searching do
    if not [[baseType mSuperType] isNull] then
      if [[[baseType mSuperType] mSetterMap] hasKey !mExtensionSetterName] then
        baseType = [baseType mSuperType]
      else
        searching = false
      end
    else
      searching = false
    end  
  end
  ioInclusionSet += !"setter-" + [[baseType key] fileNameRepresentation]+ "-" + [mExtensionSetterName fileNameRepresentation]
  [mReceiverType addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper semanticComponentGenerationTemplate.overridingExtensionSetterImplementation
    ![mReceiverType key]
    !mExtensionSetterName
    !methodImplementation
  ] 
}

#----------------------------------------------------------------------------------------------------------------------*

