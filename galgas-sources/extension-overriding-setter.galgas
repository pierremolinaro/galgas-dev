#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingExtensionSetterAST : @semanticDeclarationAST {
  private let @bool requiresSelfForAccessingProperty %selector
  private let @lstring mTypeName
  private let @lstring mOverridingExtensionSetterName
  private let @formalParameterListAST mOverridingExtensionSetterFormalParameterList
  private let @semanticInstructionListAST mOverridingExtensionSetterInstructionList
  private let @location mEndOfSetterDeclarationLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $setter$
    $@type$ ?let @lstring className indexing typeReferenceOverrideExtensionSetterDefinition
    $identifier$ ?let @lstring setterName indexing overrideExtensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfSetterLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionSetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !className
      !setterName
      !formalParameterList
      !routineInstructionList
      !endOfSetterLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $setter$
    $@type$ ?let @lstring className indexing typeReferenceOverrideExtensionSetterDefinition
    $identifier$ ?let @lstring setterName indexing overrideExtensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfSetterLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionSetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !className
      !setterName
      !formalParameterList
      !routineInstructionList
      !endOfSetterLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingExtensionSetterAST keyRepresentation -> @string {
  result = "overriding extension setter @" + self.mTypeName + " " + self.mOverridingExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionSetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionSetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
#--- Useful entities graph
  let nameForUsefulness = setterNameForUsefulEntitiesGraph (!self.mTypeName !self.mOverridingExtensionSetterName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-entry selfType = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mTypeName}
#--- Check self type is a class
  if not [[selfType mTypeKindEnum] isClassType] then
    error self.mOverridingExtensionSetterName: "cannot declare a extension setter: '@" + [selfType key] + "' is not a class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMap-entry superType = [selfType mSuperType]
  var inheritedSignature = @formalParameterSignature {}
  let @location inheritedDeclarationLocation = @location.here
  loop ([inSemanticContext.mTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mSetterMap] hasKey !self.mOverridingExtensionSetterName.string] then
      [[superType mSetterMap] searchKey !self.mOverridingExtensionSetterName ?* ?inheritedSignature ?* ?let qualifier ?*]
      if qualifier <= @methodQualifier.isBasicFinal then
        baseTypeName = [superType key]
      end
    end
    superType = [superType mSuperType]
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionSetterName:"this setter is not declared by a super class"
  end
#--- Analyze instruction list
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !"object"
    !selfType: .available {!type:  selfType !mutable: true !mutableproperties: true}
    !"object->"
    !requiresSelfForAccessingProperty: self.requiresSelfForAccessingProperty
  }
  analyzeRoutineBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !self.mOverridingExtensionSetterFormalParameterList
    !nonMutablePropertyList: @typedPropertyList {}
    !mutablePropertyList: [selfType mAllTypedPropertyList]
    !self.mOverridingExtensionSetterInstructionList
    !self.mEndOfSetterDeclarationLocation
    ?let semanticInstructionListForGeneration
    ?let formalParameterListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      !self.mOverridingExtensionSetterName.location
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !" overriding extension setter " + self.mOverridingExtensionSetterName
    !@overridingExtensionSetterForGeneration.new {
      !false # Do not generate Cpp header file
      !"setter-" + [self.mTypeName fileNameRepresentation] + "-" + [self.mOverridingExtensionSetterName fileNameRepresentation]
      !selfType
      !baseTypeName
      !self.mOverridingExtensionSetterName.string
      !formalParameterListForGeneration
      ![selfType mAllTypedPropertyList]
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioOverridingExtensionSetterListMap +=
    !self.mTypeName.string
    !self.mOverridingExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingExtensionSetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMap-entry mReceiverType
  private let @string mBaseTypeName
  private let @string mExtensionSetterName
  private let @formalParameterListForGeneration mExtensionSetterFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @overridingExtensionSetterForGeneration headerKind ->@headerKind {
  result = @headerKind.noHeader
}

#·······················································································································

override method @overridingExtensionSetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  generateExtensionSetter (
    ![self.mReceiverType key]
    !self.mBaseTypeName
    !self.mExtensionSetterName
    !?ioInclusionSet
    !self.mExtensionSetterFormalParameterList
    !self.mSemanticInstructionListForGeneration
    ?let @string methodImplementation
  )
  var @unifiedTypeMap-entry baseType = self.mReceiverType
  var @bool searching = true
  loop( @uint. max) while searching do
    if not [[baseType mSuperType] isNull] then
      if [[[baseType mSuperType] mSetterMap] hasKey !self.mExtensionSetterName] then
        baseType = [baseType mSuperType]
      else
        searching = false
      end
    else
      searching = false
    end  
  end
  ioInclusionSet += !"setter-" + [[baseType key] fileNameRepresentation]+ "-" + [self.mExtensionSetterName fileNameRepresentation]
  [self.mReceiverType addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper semanticComponentGenerationTemplate.overridingExtensionSetterImplementation
    ![self.mReceiverType key]
    !self.mExtensionSetterName
    !methodImplementation
  ] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

