#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @parseWhenInstruction : @syntaxInstructionAST {
  private let @semanticExpressionAST mWhenExpression
  private let @location mEndOfWhenExpression
  private let @syntaxInstructionList mWhenInstructionList
  private let @location mEndOfWhenInstructionList
  private let @syntaxInstructionList mElseInstructionList
  private let @location mEndOfElseInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3SyntaxComponentSyntax {

  #·················································································································

  rule <branchOfParseWhithInstruction> !@syntaxInstructionList outElseInstructionList {
    $else$
    <syntax_instruction_list_ggs3> ? outElseInstructionList
  }

  #·················································································································

  rule <branchOfParseWhithInstruction> !@syntaxInstructionList outElseInstructionList {
    $case$
    let instructionLocation = @location.here
    <expression_ggs3> ?let whenExpression
    let endOfWhenExpression = @location.here
    $:$
    <syntax_instruction_list_ggs3> ?let whenInstructionList
    let endOfWhenInstructions = @location.here
  #--- Else part
    <branchOfParseWhithInstruction> ?let elseInstructionList
    let endOfElseInstructions = @location.here
    outElseInstructionList = {}
    outElseInstructionList += !@parseWhenInstruction.new {
      !instructionLocation
      !whenExpression
      !endOfWhenExpression
      !whenInstructionList
      !endOfWhenInstructions
      !elseInstructionList
      !endOfElseInstructions
    }
  }

  #·················································································································

  rule <syntax_instruction_ggs3> !@syntaxInstructionAST outInstruction {
    $parse$
    let instructionLocation = @location.here
    $with$
    <expression_ggs3> ?let @semanticExpressionAST whenExpression
    let endOfWhenExpression = @location.here
    $:$
    <syntax_instruction_list_ggs3> ?let @syntaxInstructionList whenInstructionList
    let endOfWhenInstructions = @location.here
  #--- Else part
    <branchOfParseWhithInstruction> ?let @syntaxInstructionList elseInstructionList
    let endOfElseInstructions = @location.here
    $end$
    outInstruction = @parseWhenInstruction.new {
      !instructionLocation
      !whenExpression
      !endOfWhenExpression
      !whenInstructionList
      !endOfWhenInstructions
      !elseInstructionList
      !endOfElseInstructions
    }
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4SyntaxComponentSyntax {

  #·················································································································

  rule <branchOfParseWhithInstruction> ?!@galgasDeclarationAST ioDeclarations
                                       ?!@stringset ioUserImplicitDeclaredTypeSet
                                       !@syntaxInstructionList outElseInstructionList {
    $else$
    <syntax_instruction_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ? outElseInstructionList
  }

  #·················································································································

  rule <branchOfParseWhithInstruction> ?!@galgasDeclarationAST ioDeclarations
                                       ?!@stringset ioUserImplicitDeclaredTypeSet
                                       !@syntaxInstructionList outElseInstructionList {
    $case$
    let instructionLocation = @location.here
    <expression> ?let whenExpression
    let endOfWhenExpression = @location.here
    $:$
    <syntax_instruction_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let whenInstructionList
    let endOfWhenInstructions = @location.here
  #--- Else part
    <branchOfParseWhithInstruction> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let elseInstructionList
    let endOfElseInstructions = @location.here
    outElseInstructionList = {}
    outElseInstructionList += !@parseWhenInstruction.new {
      !instructionLocation
      !whenExpression
      !endOfWhenExpression
      !whenInstructionList
      !endOfWhenInstructions
      !elseInstructionList
      !endOfElseInstructions
    }
  }

  #·················································································································

  rule <syntax_instruction> ?!@galgasDeclarationAST ioDeclarations
                            ?!@stringset ioUserImplicitDeclaredTypeSet
                            !@syntaxInstructionAST outInstruction {
    $parse$
    let instructionLocation = @location.here
    $with$
    <expression> ?let @semanticExpressionAST whenExpression
    let endOfWhenExpression = @location.here
    $:$
    <syntax_instruction_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @syntaxInstructionList whenInstructionList
    let endOfWhenInstructions = @location.here
  #--- Else part
    <branchOfParseWhithInstruction> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @syntaxInstructionList elseInstructionList
    let endOfElseInstructions = @location.here
    $end$
    outInstruction = @parseWhenInstruction.new {
      !instructionLocation
      !whenExpression
      !endOfWhenExpression
      !whenInstructionList
      !endOfWhenInstructions
      !elseInstructionList
      !endOfElseInstructions
    }
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! TRANSFORM
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseWhenInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList
{
  transformInstructionList (
    !self.mElseInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?ioSyntaxInstructionList
  )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseWhenInstruction analyzeSyntaxInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @terminalMap inTerminalMap
  ?let @string inLexiqueName
  ?let @nonterminalMap inNonterminalMap
  ?let @string inComponentName
  ?let @stringset inIndexNameSet
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
  ?!@uint ioSelectMethodCount {
#--- When expression
  [self.mWhenExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let when_expression
  ]
#--- Begin block
  [!?ioVariableMap openOverrideForRepeatBlock]
#--- 'when' branch
  var @uint localSelectMethodCount = ioSelectMethodCount
  analyzeSyntaxInstructionList (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !inHasTranslateFeature
    !inTerminalMap
    !inLexiqueName
    !inNonterminalMap
    !inComponentName
    !self.mWhenInstructionList
    !self.mEndOfWhenInstructionList
    !inIndexNameSet
    !?ioVariableMap
    !?localSelectMethodCount
    ?let when_instructionListForGeneration
  )
#--- 'else' branch
  analyzeSyntaxInstructionList (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !inHasTranslateFeature
    !inTerminalMap
    !inLexiqueName
    !inNonterminalMap
    !inComponentName
    !self.mElseInstructionList
    !self.mEndOfElseInstructionList
    !inIndexNameSet
    !?ioVariableMap
    !?ioSelectMethodCount
    ?let else_instructionListForGeneration
  )
#--- End block
  [!?ioVariableMap closeOverride !self.mEndOfElseInstructionList]
#--- Check syntax signature
  let @bool ok = compareSyntaxSignature (
    !syntaxSignatureOfInstructionList (!"parse" !when_instructionListForGeneration)
    !syntaxSignatureOfInstructionList (!"parse" !else_instructionListForGeneration)
    !self.mEndOfElseInstructionList
  )
#--- Generate instruction
  if ok then
    ioInstructionListForGeneration += !@parseWhenInstructionForGeneration.new {
      !self.mInstructionLocation
      !when_expression
      !when_instructionListForGeneration
      !else_instructionListForGeneration}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @parseWhenInstructionForGeneration : @syntaxInstructionForGeneration {
  private let @semanticExpressionForGeneration mWhenExpression
  private let @semanticInstructionListForGeneration mInstructionList
  private let @semanticInstructionListForGeneration mElseInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseWhenInstructionForGeneration appendSyntaxSignature
  ?let @string inPosfix
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration {
  ioInstructionListForGeneration += syntaxSignatureOfInstructionList (!inPosfix !self.mInstructionList)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseWhenInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [self.mWhenExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let sourceVar]
  ioGeneratedCode += "if (" + sourceVar + ".isValidAndTrue ()) {\n"
  generateInstructionList (
    !?ioInclusionSet
    !self.mInstructionList
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  ioGeneratedCode += "}else{\n"
  generateInstructionList (
    !?ioInclusionSet
    !self.mElseInstructionList
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
