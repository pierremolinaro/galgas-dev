#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @parseRewindInstruction : @syntaxInstructionAST {
  public let @listOfSyntaxInstructionList mParseRewindBranchList
  public let @location mEndOfParseDoInstruction
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3SyntaxComponentSyntax {

  #·······························································································

  rule <syntax_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                 !@syntaxInstructionAST outInstruction {
    $parse$
    let instructionLocation = @location.here
    $do$
    var mParseDoBranchList = @listOfSyntaxInstructionList ()
    <syntax_instruction_list_ggs3> !?ioDeclarations ?let @syntaxInstructionList il
    mParseDoBranchList += !il !@location.here
    repeat
      $rewind$
      <syntax_instruction_list_ggs3> !?ioDeclarations ?let @syntaxInstructionList instructionList
      mParseDoBranchList += !instructionList !@location.here
    while
    end
    $end$
    let endOfInstruction = @location.here
    outInstruction = @parseRewindInstruction {
      !instructionLocation
      !mParseDoBranchList
      !endOfInstruction
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4SyntaxComponentSyntax {

  #·······························································································

  rule <syntax_instruction> ?!@galgasDeclarationAST ioDeclarations
                            !@syntaxInstructionAST outInstruction {
    $parse$
    let instructionLocation = @location.here
    $do$
    var mParseDoBranchList = @listOfSyntaxInstructionList ()
    <syntax_instruction_list> !?ioDeclarations ?let @syntaxInstructionList il
    mParseDoBranchList += !il !@location.here
    repeat
      $rewind$
      <syntax_instruction_list> !?ioDeclarations ?let @syntaxInstructionList instructionList
      mParseDoBranchList += !instructionList !@location.here
    while
    end
    $end$
    let endOfInstruction = @location.here
    outInstruction = @parseRewindInstruction {
      !instructionLocation
      !mParseDoBranchList
      !endOfInstruction
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! TRANSFORM
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseRewindInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList
{
  [self.mParseRewindBranchList first ?let syntaxInstructionList ?*]

  transformInstructionList (
    !syntaxInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?ioSyntaxInstructionList
  )
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseRewindInstruction analyzeSyntaxInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @terminalMap  inTerminalMap
  ?let @string inLexiqueName
  ?let @nonterminalMap inNonterminalMap
  ?let @string inComponentName
  ?let @stringset inIndexNameSet
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
  ?!@uint ioSelectMethodCount
{
#--- 'Rewind' blocks
  var listOfSemanticInstructionListForGeneration = @listOfSemanticInstructionListForGeneration ()
  let @uint referenceSelectMethodCount = ioSelectMethodCount
  for (mSyntaxInstructionList mEndOf_instructions) in self.mParseRewindBranchList do
    ioSelectMethodCount = referenceSelectMethodCount
    var instructionList = @semanticInstructionListForGeneration ()
    for (mInstruction) in mSyntaxInstructionList do
      [mInstruction analyzeSyntaxInstruction
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inAnalysisContext
        !?ioTypeMap
        !inHasTranslateFeature
        !inTerminalMap
        !inLexiqueName
        !inNonterminalMap
        !inComponentName
        !inIndexNameSet
        !?instructionList
        !?ioVariableMap
        !?ioSelectMethodCount
      ]
    end
    listOfSemanticInstructionListForGeneration += !instructionList !mEndOf_instructions
  end
#--- Check syntax signature of branches
  var @listOfSemanticInstructionListForGeneration tempListOfBranches = listOfSemanticInstructionListForGeneration
  [!?tempListOfBranches popFirst ?let instructionList ?*]
  let @semanticInstructionListForGeneration referenceSignature = syntaxSignatureOfInstructionList (!"parse" !instructionList)
  var @bool ok = true
  for (mInstructionList mEndOfInstructionList) in tempListOfBranches while ok do
    ok = compareSyntaxSignature (
      !referenceSignature
      !syntaxSignatureOfInstructionList (!"parse" !mInstructionList)
      !mEndOfInstructionList
    )
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@parseRewindInstructionForGeneration {
    !self.mInstructionLocation
    !listOfSemanticInstructionListForGeneration
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @parseRewindInstructionForGeneration : @syntaxInstructionForGeneration {
  public let @listOfSemanticInstructionListForGeneration mListOfSemanticInstructionListForGeneration
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX SIGNATURE
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseRewindInstructionForGeneration appendSyntaxSignature
  ?let @string inPosfix
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
{
  [self.mListOfSemanticInstructionListForGeneration first ?let instructionList ?*]
  ioInstructionListForGeneration += syntaxSignatureOfInstructionList (!inPosfix !instructionList)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @parseRewindInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  let @string parsingContextVar = "parsingContext_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "const C_parsingContext " + parsingContextVar + " = " + compilerCppName () + "->parsingContext () ;\n"
  for (mInstructionList *) in self.mListOfSemanticInstructionListForGeneration
  do
    generateInstructionList (
      !?ioInclusionSet
      !mInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !inGenerateSyntaxDirectedTranslationString
      !?ioGeneratedCode
    )
  between
    ioGeneratedCode += compilerCppName () + "->setParsingContext (" + parsingContextVar + ") ; // rewind\n"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
