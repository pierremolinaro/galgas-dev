#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @lexiqueIntrospectionExpressionAST : @semanticExpressionAST {
  private let @lstring mLexiqueComponentName
  private let @lstring mLexiqueGetterName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                      !@semanticExpressionAST outExpression {
    $[$
    $lexique$
    $identifier$ ?let lexiqueName
    $:$
    $identifier$ ?let getterName
    outExpression = @lexiqueIntrospectionExpressionAST.new {!lexiqueName !getterName}
    $]$
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <primary> ?!@galgasDeclarationAST unused ioDeclarations
                 !@semanticExpressionAST outExpression {
    $lexique$
    $[$
    $identifier$ ?let lexiqueName
    $:$
    $identifier$ ?let getterName
    outExpression = @lexiqueIntrospectionExpressionAST.new {!lexiqueName !getterName}
    $]$
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexiqueIntrospectionExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @lexiqueIntrospectionExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
 let usefulnessName = lexiqueNameForUsefulEntitiesGraph (!self.mLexiqueComponentName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#--- Check  lexique is declared
  [inAnalysisContext.mSemanticContext.mLexiqueComponentMapForSemanticAnalysis searchKey
    !self.mLexiqueComponentName
    ?7*
  ]
#--- Check getter name
  if self.mLexiqueGetterName.string != "symbols" then
    error self.mLexiqueGetterName:"unknown getter"
  end
#---
  outExpression = @lexiqueIntrospectionForGeneration.new {
    ![ioTypeMap typeMapEntryForLKey !["stringlist" nowhere]]
    !self.mLexiqueComponentName.location
    !self.mLexiqueComponentName.string
    !self.mLexiqueGetterName.string}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @lexiqueIntrospectionForGeneration : @semanticExpressionForGeneration {
  private let @string mLexiqueComponentName
  private let @string mLexiqueGetterName
}

#·····················································································································

override method @lexiqueIntrospectionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  ioInclusionSet += !"lexique-" + [self.mLexiqueComponentName fileNameRepresentation]
  outCppExpression = "Lexique_" + [self.mLexiqueComponentName identifierRepresentation] + "::"
  + [self.mLexiqueGetterName identifierRepresentation]
  + "(" + [self.mLocation sourceFile] + ")"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
