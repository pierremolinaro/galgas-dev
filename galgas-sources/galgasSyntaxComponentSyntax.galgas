#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3SyntaxComponentSyntax (galgasScanner3) {

  #·····················································································································
  #          Rules prototypes                 
  #·····················································································································

  rule <expression_ggs3> !@semanticExpressionAST outExpression
  
  rule <semantic_instruction_ggs3> !@semanticInstructionAST outInstruction
  
  rule <formal_parameter_list_ggs3> !@formalParameterListAST outFormalParameterList
  
  rule <actual_parameter_list_ggs3> !@actualParameterListAST outActualParameterList

  #·····················································································································
  #      S Y N T A X    C O M P O N E N T     
  #·····················································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $syntax$
    $identifier$ ?let @lstring syntaxComponentName
  #--- Imported lexique
    let @lstring importedLexiqueReference
    select
      importedLexiqueReference = ["" nowhere]
    or
      $($
      $identifier$ ?importedLexiqueReference
      $)$
    end
  #--- Feature 'translate'
    let @bool hasTranslateFeature
    select
      hasTranslateFeature = false
    or
      $%translate$
      hasTranslateFeature = true
    end
    ${$
  #--- Loop on declarations
    var nonterminalDeclarationList = @nonterminalDeclarationListAST {}
    var ruleList = @syntaxRuleListAST {}
    repeat
    while
      <nonterminal_declaration> !? nonterminalDeclarationList
    while
      <syntax_rule_declaration> !?ioDeclarations !? ruleList
    end
  #--- end
    $}$
    ioDeclarations.mSyntaxComponentList +=
      !syntaxComponentName
      !importedLexiqueReference
      !nonterminalDeclarationList
      !ruleList
      !hasTranslateFeature
  }

  #·····················································································································
  #      S Y N T A X    E X T E N S I O N     
  #·····················································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $syntax$
    $extension$
    $identifier$ ?let @lstring syntaxComponentName
    ${$
  #--- Loop on declarations
    var nonterminalDeclarationList = @nonterminalDeclarationListAST {}
    var ruleList = @syntaxRuleListAST {}
    repeat
    while
      <nonterminal_declaration> !? nonterminalDeclarationList
    while
      <syntax_rule_declaration> !?ioDeclarations !? ruleList
    end
  #--- end
    $}$
    ioDeclarations.mSyntaxExtensions +=
      !syntaxComponentName.string
      !syntaxComponentName
      !nonterminalDeclarationList
      !ruleList
  }

  #·····················································································································
  #      N O N T E R M I N A L    D E C L A R A T I O N   
  #·····················································································································

  rule <nonterminal_declaration> ?!@nonterminalDeclarationListAST ioNonterminalDeclarationList {
    $rule$
    $<non_terminal>$ ?let @lstring mNonterminalName indexing ruleDefinition
    var @nonTerminalLabelListAST labels = {}
    <formal_parameter_list_ggs3> ?let @formalParameterListAST firstBranchFormalParameters
    labels += !.new {!"" !.here} !firstBranchFormalParameters !.here
    repeat
    while
      $label$
      $identifier$ ?let @lstring labelName
      <formal_parameter_list_ggs3> ?let @formalParameterListAST formalParameters
      labels += !labelName !formalParameters !.here
    end
    ioNonterminalDeclarationList += !mNonterminalName !labels
  }

  #·····················································································································
  #      S Y N T A X    R U L E    D E C L A R A T I O N
  #·····················································································································

  rule <syntax_rule_label> ?!@galgasDeclarationAST unused ioDeclarations ?let @lstring inLabelName ?!@syntaxRuleLabelListAST ioLabelList {
    <formal_parameter_list_ggs3> ?let mFormalParameters
    let endOfArguments = @location.here
    ${$
    <syntax_instruction_list_ggs3> ?let @syntaxInstructionList mSyntaxInstructionList
    ioLabelList +=
      !inLabelName
      !mFormalParameters
      !endOfArguments
      !mSyntaxInstructionList
      !@location.here
    $}$
  }

  #·····················································································································

  rule <syntax_rule_declaration> ?!@galgasDeclarationAST ioDeclarations ?!@syntaxRuleListAST ioRuleList {
    $rule$
    $<non_terminal>$ ?let @lstring mNonterminalName indexing ruleDefinition
    var labelName = @lstring.new{!"" !@location.here}
    var mLabelList = @syntaxRuleLabelListAST {}
    repeat
      <syntax_rule_label> !?ioDeclarations !labelName !?mLabelList
    while
      $label$
      $identifier$ ?labelName
    end
    ioRuleList +=
      !mNonterminalName
      !mLabelList
  }

  #·····················································································································
  #   S Y N T A X    I N S T R U C T I O N    L I S T     
  #·····················································································································

  rule <syntax_instruction_list_ggs3> !@syntaxInstructionList outSyntaxInstructionList {
    outSyntaxInstructionList = {}
    select
    or
      repeat
        select
          <semantic_instruction_ggs3> ?let @semanticInstructionAST instruction
          outSyntaxInstructionList += !instruction
        or
          <syntax_instruction_ggs3> ?let instruction
          outSyntaxInstructionList += !instruction
        end
      while
        select
          $;$
        or
          let separator = @string.separatorString
          if not [separator containsCharacter !'\n'] then
            error .separator : "instructions on same line should be separated by ';'"
          end
        end
      end
    end
  }

  #·····················································································································
  #   T E R M I N A L    C H E C K    I N S T R U C T I O N                                                      
  #·····················································································································

  rule <actual_input_parameter_list_ggs3> !@actualInputParameterListAST outActualInputParameterList

  #·····················································································································

  rule <syntax_directed_translation_result> !@abstractGrammarInstructionSyntaxDirectedTranslationResult result

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas4SyntaxComponentSyntax (galgasScanner4) {

  #·····················································································································
  #          Rules prototypes                 
  #·····················································································································

  rule <expression> !@semanticExpressionAST outExpression
  
  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              ?!@stringset ioUserImplicitDeclaredTypeSet
                              !@semanticInstructionAST outInstruction
  
  rule <formal_parameter_list> ?!@galgasDeclarationAST ioDeclarations
                               ?!@stringset ioUserImplicitDeclaredTypeSet
                               !@formalParameterListAST outFormalParameterList
  
  rule <actual_parameter_list_within_parenthesis> !@actualParameterListAST outActualParameterList
  
  #·····················································································································
  #      S Y N T A X    C O M P O N E N T     
  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations
                     ?!@stringset ioUserImplicitDeclaredTypeSet {
    $syntax$
    $identifier$ ?let @lstring syntaxComponentName
  #--- Imported lexique
    let @lstring importedLexiqueReference
    select
      importedLexiqueReference = ["" nowhere]
    or
      $($
      $identifier$ ?importedLexiqueReference
      $)$
    end
  #--- Feature 'translate'
    let @bool hasTranslateFeature
    select
      hasTranslateFeature = false
    or
      $%translate$
      hasTranslateFeature = true
    end
    ${$
  #--- Loop on declarations
    var nonterminalDeclarationList = @nonterminalDeclarationListAST {}
    var ruleList = @syntaxRuleListAST {}
    repeat
    while
      <nonterminal_declaration> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet !? nonterminalDeclarationList
    while
      <syntax_rule_declaration> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet !? ruleList
    end
  #--- end
    $}$
    ioDeclarations.mSyntaxComponentList +=
      !syntaxComponentName
      !importedLexiqueReference
      !nonterminalDeclarationList
      !ruleList
      !hasTranslateFeature
  }

  #·····················································································································
  #      S Y N T A X    E X T E N S I O N     
  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations
                     ?!@stringset ioUserImplicitDeclaredTypeSet {
    $syntax$
    $extension$
    $identifier$ ?let @lstring syntaxComponentName
    ${$
  #--- Loop on declarations
    var nonterminalDeclarationList = @nonterminalDeclarationListAST {}
    var ruleList = @syntaxRuleListAST {}
    repeat
    while
      <nonterminal_declaration> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet !? nonterminalDeclarationList
    while
      <syntax_rule_declaration> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet !? ruleList
    end
  #--- end
    $}$
    ioDeclarations.mSyntaxExtensions +=
      !syntaxComponentName.string
      !syntaxComponentName
      !nonterminalDeclarationList
      !ruleList
  }

  #·····················································································································
  #      N O N T E R M I N A L    D E C L A R A T I O N   
  #·····················································································································

  rule <nonterminal_declaration> ?!@galgasDeclarationAST ioDeclarations
                                 ?!@stringset ioUserImplicitDeclaredTypeSet
                                 ?!@nonterminalDeclarationListAST ioNonterminalDeclarationList {
    $rule$
    $<non_terminal>$ ?let @lstring mNonterminalName indexing ruleDefinition
    var @nonTerminalLabelListAST labels = {}
    <formal_parameter_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @formalParameterListAST firstBranchFormalParameters
    labels += !.new {!"" !.here} !firstBranchFormalParameters !.here
    repeat
    while
      $label$
      $identifier$ ?let @lstring labelName
      <formal_parameter_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @formalParameterListAST formalParameters
      labels += !labelName !formalParameters !.here
    end
    ioNonterminalDeclarationList += !mNonterminalName !labels
  }

  #·····················································································································
  #      S Y N T A X    R U L E    D E C L A R A T I O N  
  #·····················································································································

  rule <syntax_rule_label> ?!@galgasDeclarationAST ioDeclarations
                           ?!@stringset ioUserImplicitDeclaredTypeSet
                           ?let @lstring inLabelName ?!@syntaxRuleLabelListAST ioLabelList {
    <formal_parameter_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let mFormalParameters
    let endOfArguments = @location.here
    ${$
    <syntax_instruction_list> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @syntaxInstructionList mSyntaxInstructionList
    ioLabelList +=
      !inLabelName
      !mFormalParameters
      !endOfArguments
      !mSyntaxInstructionList
      !@location.here
    $}$
  }

  #·····················································································································

  rule <syntax_rule_declaration> ?!@galgasDeclarationAST ioDeclarations
                                 ?!@stringset ioUserImplicitDeclaredTypeSet
                                 ?!@syntaxRuleListAST ioRuleList {
    $rule$
    $<non_terminal>$ ?let @lstring mNonterminalName indexing ruleDefinition
    var labelName = @lstring.new{!"" !@location.here}
    var mLabelList = @syntaxRuleLabelListAST {}
    repeat
      <syntax_rule_label> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet !labelName !?mLabelList
    while
      $label$
      $identifier$ ?labelName
    end
    ioRuleList +=
      !mNonterminalName
      !mLabelList
  }

  #·····················································································································
  #   S Y N T A X    I N S T R U C T I O N    L I S T     
  #·····················································································································

  rule <syntax_instruction_list> ?!@galgasDeclarationAST ioDeclarations
                                 ?!@stringset ioUserImplicitDeclaredTypeSet
                                 !@syntaxInstructionList outSyntaxInstructionList {
    outSyntaxInstructionList = {}
    select
    or
      repeat
        select
          <semantic_instruction> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let @semanticInstructionAST instruction
          outSyntaxInstructionList += !instruction
        or
          <syntax_instruction> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet ?let instruction
          outSyntaxInstructionList += !instruction
        end
      while
        select
          $;$
        or
          let separator = @string.separatorString
          if not [separator containsCharacter !'\n'] then
            error .separator : "instructions on same line should be separated by ';'"
          end
        end
      end
    end
  }

  #·····················································································································
  #   T E R M I N A L    C H E C K    I N S T R U C T I O N                                                      
  #·····················································································································

  rule <actual_input_parameter_list> !@actualInputParameterListAST outActualInputParameterList

  #·····················································································································

  rule <syntax_directed_translation_result> !@abstractGrammarInstructionSyntaxDirectedTranslationResult result

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
