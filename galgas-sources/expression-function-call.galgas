#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @functionCallExpressionAST : @semanticExpressionAST {
  private let @lstring mFunctionName
  private let @actualOutputExpressionList mExpressionList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    $identifier$ ?let @lstring functionName indexing functionCall
    $($
    <output_expression_list_ggs3> ?let @actualOutputExpressionList expressionList
    $)$
    outExpression = @functionCallExpressionAST.new {
      !functionName
      !expressionList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <primary> !@semanticExpressionAST outExpression {
    $identifier$ ?let @lstring functionName indexing functionCall
    $($
    <output_expression_list> ?let @actualOutputExpressionList expressionList
    $)$
    outExpression = @functionCallExpressionAST.new {!functionName !expressionList}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @functionCallExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for (* mExpression *) in self.mExpressionList do
    [mExpression enterExpressionInSemanticContext !?ioTypeMap]
  end
}

#·····················································································································

override method @functionCallExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = functionNameForUsefulEntitiesGraph (!self.mFunctionName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#--- Retrieve function features
  [inAnalysisContext.mSemanticContext.mFunctionMap searchKey
    !self.mFunctionName
    ?let @functionSignature functionSignature
    ?let @unifiedTypeMapEntry resultType
    ?let @bool isInternal
  ]
#--- Check internal
  if isInternal then
    let procDeclarationLocation = [inAnalysisContext.mSemanticContext.mFunctionMap locationForKey !self.mFunctionName.string]
    if [self.mFunctionName.location file] != [procDeclarationLocation file] then
      error self.mFunctionName : "this proc is internal to '" + [procDeclarationLocation file] + "' file"
    end
  end
#--- Analyze effective parameters
  if [functionSignature count] != [self.mExpressionList count] then
    error self.mFunctionName
    :"the '" + self.mFunctionName + "' function header declares " + [[functionSignature count] string]
      + " formal parameter(s), but this function call names " + [[self.mExpressionList count] string]
      + " effective argument(s)"
    : outExpression
  else
    var semanticExpressionListForGeneration = @semanticExpressionListForGeneration {}
    for (mFormalSelector mFormalArgumentType *) in functionSignature, (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressionList do
      [mExpression analyzeSemanticExpression
        !usefulnessCallerEntityName: inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inferenceType: mFormalArgumentType
        !inAnalysisContext
        !?ioTypeMap
        !?ioVariableMap
        ?@semanticExpressionForGeneration expression
      ]
      checkAssignmentTypeWithImplicitGetterCall (
        !mFormalArgumentType
        !expression.mResultType
        !mEndOfExpressionLocation
        !?expression
      )
      if mFormalSelector.string != mActualSelector.string then
        let @string s = "!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end
        error mActualSelector : "the selector should be '" + s + "'"
        fixit { replace s }
      end
      semanticExpressionListForGeneration += !expression
    end
    outExpression = @functionCallExpressionForGeneration.new {
      !resultType
      !self.mFunctionName.location
      !self.mFunctionName.string
      !semanticExpressionListForGeneration}
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @functionCallExpressionForGeneration : @semanticExpressionForGeneration {
  private let @string mFunctionName
  private let @semanticExpressionListForGeneration mExpressions
}

#·····················································································································

override method @functionCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
#--- Add return type header
  [self.mResultType addHeaderFileName !?ioInclusionSet]
#--- Add function header
  ioInclusionSet += !"func-" + [self.mFunctionName fileNameRepresentation]
#---
  var parameterList = @stringlist {}
  for (mExpression) in self.mExpressions do
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let parameter]
    parameterList += !parameter
  end
  outCppExpression = "function_" + [self.mFunctionName identifierRepresentation] + " ("
  for (mValue) in parameterList
    do outCppExpression += mValue + ", "
  end
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression += compilerCppName ()
  outCppExpression += [self.mLocation commaSourceFile] + ")"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
