#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @functionCallExpressionAST : @semanticExpressionAST {
  public var @lstring mFunctionName
  public var @actualOutputExpressionList mExpressionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $identifier$ ?let @lstring functionName indexing functionCall
    $($
    <output_expression_list> ?let @actualOutputExpressionList expressionList
    $)$
    outExpression = @functionCallExpressionAST.new {
      !functionName
      !expressionList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @functionCallExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressionList do
    [mExpression enterExpressionInSemanticContext !?ioTypeMap]
  end
}

#·····················································································································

override method @functionCallExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = functionNameForUsefulEntitiesGraph (!self.mFunctionName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
#--- Retrieve function features
  [inAnalysisContext.mSemanticContext.mFunctionMap searchKey
    !self.mFunctionName
    ?let @functionSignature functionSignature
    ?let @unifiedTypeMap-entry resultType
    ?let @bool isInternal
  ]
#--- Check internal
  if isInternal then
    let procDeclarationLocation = [inAnalysisContext.mSemanticContext.mFunctionMap locationForKey !self.mFunctionName.string]
    if [self.mFunctionName.location file] != [procDeclarationLocation file] then
      error self.mFunctionName : "this proc is internal to '" + [procDeclarationLocation file] + "' file"
    end
  end
#--- Analyze effective parameters
  if [functionSignature length] != [self.mExpressionList length] then
    error self.mFunctionName
    :"the '" + self.mFunctionName + "' function header declares " + [[functionSignature length] string]
      + " formal parameter(s), but this function call names " + [[self.mExpressionList length] string]
      + " effective argument(s)"
    : outExpression
  else
    var semanticExpressionListForGeneration =@semanticExpressionListForGeneration {}
    for (mFormalSelector mFormalArgumentType mFormalArgumentName) in functionSignature, (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressionList do
      [mExpression analyzeSemanticExpression
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !mFormalArgumentType
        !inAnalysisContext
        !?ioVariableMap
        ?@semanticExpressionForGeneration expression
      ]
      checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType !expression.mResultType !mEndOfExpressionLocation !?expression)
      if mFormalSelector.string != mActualSelector.string then
        error mActualSelector : "the selector should be '!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end + "'"
      end
      semanticExpressionListForGeneration += !expression
    end
    outExpression = @functionCallExpressionForGeneration.new {
      !resultType
      !self.mFunctionName.location
      !self.mFunctionName.string
      !semanticExpressionListForGeneration}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @functionCallExpressionForGeneration : @semanticExpressionForGeneration {
  public var @string mFunctionName
  public var @semanticExpressionListForGeneration mExpressions
}

#·····················································································································

override method @functionCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
#--- Add return type header
  [self.mResultType addHeaderFileName !?ioInclusionSet]
#--- Add function header
  ioInclusionSet += !"func-" + [self.mFunctionName fileNameRepresentation]
#---
  var parameterList =@stringlist {}
  for (mExpression) in self.mExpressions do
    var @string parameter
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?parameter]
    parameterList += !parameter  
  end
  outCppExpression = "function_" + [self.mFunctionName identifierRepresentation] + " ("
  for (mValue) in parameterList
    do outCppExpression += mValue + ", "
  end
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression += compilerCppName ()
  outCppExpression += [self.mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
