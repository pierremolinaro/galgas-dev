#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  GALGAS scanner definition                                                                                           *
#                                                                                                                      *
#  Copyright (C) 1997, ..., 2015 Pierre Molinaro.                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

lexique galgas3Scanner indexing in "../build/indexes" {
#--- Indexing keys
indexing classDefinition : "Class Definition"
indexing enumDefinition : "Enum Definition"
indexing structDefinition : "Struct Definition"
indexing listDefinition : "List Definition"
indexing sortedListDefinition : "Sorted List Definition"
indexing listmapDefinition : "Listmap Definition"
indexing mapDefinition : "Map Definition"
indexing externTypeDefinition : "Extern Type Definition"
indexing uniquemapDefinition : "Unique Map Definition"
indexing mapProxyDefinition : "Map Proxy Definition"
indexing arrayTypeDefinition : "Array Definition"
indexing arrayElementTypeReference : "Reference as array element"
indexing filewrapperDefinition : "Filewrapper Definition"
indexing filewrapperReference : "Filewrapper Reference"
indexing graphDefinition : "Graph Definition"
indexing classReferencedAsSuperClass : "Class Reference as Superclass"
indexing typeReferenceInConstructor : "Type reference in Constructor"
indexing typeReferenceInTypeMethod : "Type reference in Type Method"
indexing routineDefinition : "Routine Definition"
indexing routineCall : "Routine Call"
indexing functionDefinition : "Function Definition"
indexing functionCall : "Function Call"
indexing terminalDeclaration : "Terminal Declaration"
indexing terminalReference : "Terminal Reference"
indexing ruleDefinition : "Rule Definition"
indexing ruleReference : "Rule Reference"

indexing abstractExtensionModifierDefinition : "Abstract Extension Modifier Definition"
indexing typeReferenceAbstractExtensionModifier : "Abstract Extension Modifier Definition"
indexing overrideAbstractExtensionModifierDefinition : "Override Abstract Extension Modifier Definition"
indexing extensionModifierDefinition : "Extension Modifier Definition"
indexing typeReferenceExtensionModifier : "Extension Modifier Definition"
indexing overrideExtensionModifierDefinition : "Override Extension Modifier Definition"
indexing typeReferenceOverrideExtensionModifierDefinition : "Override Extension Modifier Definition"
indexing typeReferenceOverrideAbstractExtensionModifier : "Override Abstract Extension Modifier Definition"

indexing abstractExtensionMethodDefinition : "Abstract Extension Method Definition"
indexing typeReferenceAbstractExtensionMethod : "Abstract Extension Method Definition"
indexing overrideAbstractExtensionMethodDefinition : "Override Abstract Extension Method Definition"
indexing extensionMethodDefinition : "Extension Method Definition"
indexing typeReferenceExtensionMethod : "Extension Method Definition"
indexing overrideExtensionMethodDefinition : "Override Extension Method Definition"
indexing typeReferenceOverrideExtensionMethodDefinition : "Override Extension Method Definition"
indexing typeReferenceOverrideAbstractExtensionMethod : "Override Abstract Extension Method Definition"

indexing abstractExtensionGetterDefinition : "Abstract Extension Getter Definition"
indexing typeReferenceAbstractExtensionGetter : "Abstract Extension Getter Definition"
indexing overrideAbstractExtensionGetterDefinition : "Override Abstract Extension Getter Definition"
indexing typeReferenceOverrideAbstractExtensionGetter : "Override Abstract Extension Getter Definition"
indexing extensionGetterDefinition : "Extension Getter Definition"
indexing typeReferenceExtensionGetter : "Extension Getter Definition"
indexing overrideExtensionGetterDefinition : "Override Extension Getter Definition"
indexing typeReferenceOverrideExtensionGetter : "Override Extension Getter Definition"

indexing optionComponentDefinition : "Option Component Definition"
indexing optionComponentReference : "Option Component Reference"
indexing grammarComponentDefinition : "Grammar Component Definition"
indexing grammarComponentReference : "Grammar Component Reference"

indexing indexingNameDefinition : "Indexing Name Definition"
indexing indexingNameReference : "Indexing Name Reference"

#--- Scanner attributes
@string identifierString
@uint uint32value
@sint sint32value
@uint64 uint64value
@sint64 sint64value
@char charValue
@string tokenString

style keywordsStyle -> "Keywords"
style delimitersStyle -> "Delimiters"
style selectorStyle -> "Selectors"
style terminalStyle -> "Terminal Symbols"
style nonTerminalStyle -> "Non Terminal Symbols"
style integerStyle -> "Integer Constants"
style bigintStyle -> "Big Integer Constants"
style floatStyle -> "Floating Point Constants" 
style characterStyle -> "Character Constants"
style stringStyle -> "String Constants"
style typeNameStyle -> "Type Names (@...)"
style attributeStyle -> "Attributes (%...)"
style commentStyle -> "Comments"

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier"

list galgasKeyWordList style keywordsStyle error message "the '%K' keyword"{
  "abstract",
  "after",
  "array",
  "as",
  "before",
  "between",
  "block",
  "cast",
  "case",
  "class",
  "constructor",
  "default",
  "do",
  "drop",
  "else",
  "elsif",
  "end",
  "enum",
  "error",
  "extension",
  "extern",
  "false",
  "filewrapper",
  "for",
  "func",
  "getter",
  "grammar",
  "graph",
  "gui",
  "if",
  "in",
  "indexing",
  "insert",
  "is",
  "label",
  "let",
  "lexique",
  "list",
  "listmap",
  "log",
  "loop",
  "map",
  "match",
  "message",
  "method",
  "mod",
  "not",
  "on",
  "operator",
  "option",
  "or",
  "override",
  "parse",
#  "poison",
  "private",
  "proc",
  "project",
  "remove",
  "replace",
  "repeat",
  "rewind",
  "rule",
  "search",
  "select",
  "self",
  "send",
  "setter",
  "sortedlist",
  "state",
  "struct",
  "style",
  "switch",
  "syntax", 
  "tag",
  "template",
  "then",
  "true",
  "sharedmap",
  "unused",
  "var",
  "warning",
  "while",
  "with"
}

rule 'a'->'z' |  'A'->'Z' {
  repeat
    enterCharacterIntoString (!?identifierString !toLower (!*) )
    enterCharacterIntoString (!?tokenString !* )
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end
  send search identifierString in galgasKeyWordList default $identifier$
}

#------------------------------- Integer, floating Point Constant ------------------
@double floatValue
@bigint bigintValue
$literal_double$ !floatValue !tokenString  style floatStyle error message "a float number"
$unsigned_literal_integer$ !uint32value  style integerStyle error message "a 32-bit unsigned decimal number"
$signed_literal_integer$ !sint32value  style integerStyle error message "a 32-bit signed decimal number"
$unsigned_literal_integer64$ !uint64value  style integerStyle error message "a 64-bit unsigned decimal number"
$signed_literal_integer64$ !sint64value  style integerStyle error message "a 64-bit signed decimal number"
$bigint$ !bigintValue  style bigintStyle error message "a big integer number"

message decimalNumberTooLarge : "decimal number too large"
message floatNumberConversionError : "invalid float number"
message internalError : "internal error"
message hexDigitError : "0x should be followed by a hexadecimal digit"

rule "0x" {
  repeat
  while '_' :
  end
  select
  case '0'->'9' | 'a'->'f' | 'A'->'F' :
    enterCharacterIntoString (!?tokenString !* )
    repeat
    while '0'->'9' | 'a'->'f' | 'A'->'F' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    select
    case "LS" :
      convertHexStringIntoSInt64 (!tokenString !?sint64value error decimalNumberTooLarge, internalError)
      send $signed_literal_integer64$
    case 'S' | 's' :
      convertHexStringIntoSInt (!tokenString !?sint32value error decimalNumberTooLarge, internalError)
      send $signed_literal_integer$
    case 'L' :
      convertHexStringIntoUInt64 (!tokenString !?uint64value error decimalNumberTooLarge, internalError)
      send $unsigned_literal_integer64$
    case 'G' :
      convertHexStringIntoBigInt (!tokenString !?bigintValue error internalError)
      send $bigint$
    default
      convertHexStringIntoUInt (!tokenString !?uint32value error decimalNumberTooLarge, internalError)
      send $unsigned_literal_integer$
    end
  default
    error hexDigitError
  end
}

rule '0'->'9' {
  enterCharacterIntoString (!?tokenString !* )
  repeat
  while '0'->'9' :
    enterCharacterIntoString (!?tokenString !* )
  while '_' :
  end
  select
  case 'S' | 's' :
    convertDecimalStringIntoSInt ( !tokenString !?sint32value error decimalNumberTooLarge, internalError )
    send $signed_literal_integer$
  case "LS" :
    convertDecimalStringIntoSInt64 ( !tokenString !?sint64value error decimalNumberTooLarge, internalError )
    send $signed_literal_integer64$
  case 'L' :
    convertDecimalStringIntoUInt64 ( !tokenString !?uint64value error decimalNumberTooLarge, internalError )
    send $unsigned_literal_integer64$
  case 'G' :
    convertDecimalStringIntoBigInt (!tokenString !?bigintValue error internalError )
    send $bigint$
  case '.' :
    enterCharacterIntoString (!?tokenString !'.' )
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    convertStringToDouble ( !tokenString !?floatValue error floatNumberConversionError )
    send $literal_double$
  default
    convertDecimalStringIntoUInt ( !tokenString !?uint32value error decimalNumberTooLarge, internalError )
    send $unsigned_literal_integer$
  end
}


#------------------------------- Floating point Number ------------------
$.$  style delimitersStyle error message "the '.' delimitor"
$...$  style delimitersStyle error message "the '...' delimitor"
$..<$  style delimitersStyle error message "the '..<' delimitor"

#--- Floating Point constant begining with a dot
rule '.' {
  select
  case '0'->'9' :
    enterCharacterIntoString (!?tokenString !'0' )
    enterCharacterIntoString (!?tokenString !'.' )
    enterCharacterIntoString (!?tokenString !* )
    repeat
    while '0'->'9' :
      enterCharacterIntoString (!?tokenString !* )
    while '_' :
    end
    convertStringToDouble ( !tokenString !?floatValue error floatNumberConversionError )
    send $literal_double$
  default
    select
    case ".." :
      send $...$
    case ".<" :
      send $..<$
    default
      send $.$
    end
  end
}


# -------------------------- Type Name -----------------------------

$type_name$ ! tokenString  style typeNameStyle error message "a type name (@...)"

message incorrectTypeNameError : "in a type name, a letter, a digit or the underscore character should follow the '@' character"

rule '@' {
  select
  case 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    end
    select
    case '-' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
      end
    default
    end
    select
    case '?' :
      enterCharacterIntoString (!?tokenString !*)
    default
    end
  default
    error incorrectTypeNameError
  end
  send $type_name$ 
}

# -------------------------- Attribute -----------------------------

$attribute$ ! tokenString  style attributeStyle error message "an attribute (%...)"

message attributeError : "in an attribute name, a letter or a digit should follow the '%' character"

rule '%' {
  select
  case 'a'->'z' | 'A'->'Z' | '0'->'9' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a'->'z' | 'A'->'Z' | '-'  | '_' | '0'->'9' :
    end
  default
    error attributeError
  end
  send $attribute$ 
}

#--------------------------------- Character constant ------------------------------------
$literal_char$ ! charValue  style characterStyle error message "a character constant"

message incorrectCharConstant : "incorrect literal character"

message ASCIIcodeTooLargeError : "ASCII code > 255"

message invalideUnicodeDefinition4 : "\\u should be followed by exactly four hexadecimal digits"

message invalideUnicodeDefinition8 : "\\U should be followed by exactly eight hexadecimal digits"

message unassignedUnicodeValue : "this value does not correspond to an assigned Unicode point"

message incorrectHTMLescapeSequence : "Invalid HTML sequence, should be '&...;'"

message unknownHTMLescapeSequence : "Invalid &...; HTML sequence"

rule '\'' {
  select
  case '\\' :
    select
    case 'f' :
      enterCharacterIntoCharacter (!?charValue !'\f' )
    case 'n' :
      enterCharacterIntoCharacter (!?charValue !'\n' )
    case 'r' :
      enterCharacterIntoCharacter (!?charValue !'\r' )
    case 't' :
      enterCharacterIntoCharacter (!?charValue !'\t' )
    case 'v' :
      enterCharacterIntoCharacter (!?charValue !'\v' )
    case '\\' :
      enterCharacterIntoCharacter (!?charValue !'\\' )
    case '0' :
      enterCharacterIntoCharacter (!?charValue !'\0' )
    case '\'' :
      enterCharacterIntoCharacter (!?charValue !'\'' )
    case 'u' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
           enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
              convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
            default
              error invalideUnicodeDefinition4
            end
          default
            error invalideUnicodeDefinition4
          end
        default
          error invalideUnicodeDefinition4
        end
      default
        error invalideUnicodeDefinition4
      end
    case 'U' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
            enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
              select
              case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                select
                case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                  enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                  select
                  case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                   enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                    select
                    case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                      enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                      convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
                    default
                      error invalideUnicodeDefinition8
                    end
                  default
                    error invalideUnicodeDefinition8
                  end
                default
                  error invalideUnicodeDefinition8
                end
              default
                error invalideUnicodeDefinition8
              end
            default
              error invalideUnicodeDefinition8
            end
          default
            error invalideUnicodeDefinition8
          end
        default
          error invalideUnicodeDefinition8
        end
      default
        error invalideUnicodeDefinition8
      end
    case '&' :
      repeat
      while ~ ";" error incorrectHTMLescapeSequence :
        enterCharacterIntoString (!?tokenString !* )
      end
      convertHTMLSequenceToUnicodeCharacter (!?tokenString !?charValue error unknownHTMLescapeSequence )
    default
      error incorrectCharConstant
    end
  case ' ' -> '\uFFFD' :
     enterCharacterIntoCharacter (!?charValue !* )
  default
    error incorrectCharConstant
  end
  select
  case '\'' :
    send $literal_char$
  default
    error incorrectCharConstant
  end
}

#----------------------- Grammar terminal symbol ---------------------------
$terminal$ ! tokenString  style terminalStyle error message "a terminal symbol ($...$)"

message incorrect_terminal_start : "incorrect terminal start"

message incorrect_terminal_end : "terminal does not end with '$'"

rule '$' {
  select
  case '!' -> '#' | '%' -> '~'  : # All printable characters, but '$'
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while '!' -> '#' | '%' -> '~' :
    end
  default
    error incorrect_terminal_start
  end
  select
  case '$' :
  default
    error incorrect_terminal_end
  end
  send $terminal$ 
}

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList style delimitersStyle error message "the '%K' delimitor"{
  "*",    ",",   "+",  "&+", "&-", "&*", "&/",
  ">",    ";",   ":",  ":>",
  "-",    "(",   ")",  "->",
  "==",   "=",   "&&",
  "[",    "]",   "+=",   "-=",   "*=",   "/=",
  "/",    "!=",  ">=", "&",
  "{",    "}",   "`",  "||", "|",
  "^",    ">>",  "~",
  "--",   "++",  "&--",   "&++"
}

rule list galgasDelimitorsList

# --------- Special formal arguments, actual parameters --------------------------
$?$ ! tokenString  style selectorStyle error message "the '\?' or '\?selector:' delimitor"
$?!$ ! tokenString  style selectorStyle error message "the '\?!' or '\?!selector:' delimitor"
$!$ ! tokenString  style selectorStyle error message "the '!' or '!selector:' delimitor"
$!?$ ! tokenString  style selectorStyle error message "the '!\?' or '!\?selector:' delimitor"

rule '?' {
  tag onlyInterrogationMark
  select
  case '!' :
    tag onlyExclamationInterrogationMark
    select
    case 'a' -> 'z' | 'A' ->'Z' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $?!$
      default
        resetString (!?tokenString )
        rewind onlyExclamationInterrogationMark send $?!$
      end
    default
      send $?!$
    end
  case 'a' -> 'z' | 'A' ->'Z' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $?$
    default
      resetString (!?tokenString )
      rewind onlyInterrogationMark send $?$
    end
  default
    send $?$
  end
}

rule '!' {
  tag onlyExclamationMark
  select
  case '?' :
    tag onlyInterrogationExclamationMark
    select
    case 'a' -> 'z' | 'A' ->'Z' :
      repeat
        enterCharacterIntoString (!?tokenString !* )
      while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
      end
      select
      case ':' :
        send $!?$
      default
        resetString (!?tokenString )
        rewind onlyInterrogationExclamationMark send $!?$
      end
    default
      send $!?$
    end
  case 'a' -> 'z' | 'A' ->'Z' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
    end
    select
    case ':' :
      send $!$
    default
      resetString (!?tokenString )
      rewind onlyExclamationMark send $!$
    end
  default
    send $!$
  end
}

# --------- Special delimitors / non terminal symbol --------------------------
$<$  style delimitersStyle error message "the '<' delimitor"
$<=$  style delimitersStyle error message "the '<=' delimitor"
$<<$  style delimitersStyle error message "the '<<' delimitor"
$non_terminal_symbol$ ! tokenString  style nonTerminalStyle error message "a non terminal symbol <...>"

rule '<' {
  tag onlyInfDelimiter
  select
  case '=' :
    send $<=$
  case '<' :
    send $<<$
  case 'a' -> 'z' | 'A' ->'Z' :
    repeat
      enterCharacterIntoString (!?tokenString !* )
    while 'a' -> 'z' | 'A' ->'Z' | '0' -> '9' | '_' :
    end
    select
    case '>' :
      send $non_terminal_symbol$
    default
      rewind onlyInfDelimiter send $<$
    end
  default
    send $<$
  end
}

# -------------------- Characters string --------------------------------------
$literal_string$ ! tokenString  style stringStyle %nonAtomicSelection error message "a character string constant \"...\""

message incorrectStringEnd : "string does not end with '\"'"

message obsoleteStringConstruction : "\\ followed by digits is obsolete: now, use \\u.... or \\U........"

rule '"' {
  repeat
  while '\\' :
    select
    case 'f' :
      enterCharacterIntoString (!?tokenString !'\f' )
    case 'n' :
      enterCharacterIntoString (!?tokenString !'\n' )
    case 'r' :
      enterCharacterIntoString (!?tokenString !'\r' )
    case 't' :
      enterCharacterIntoString (!?tokenString !'\t' )
    case 'v' :
      enterCharacterIntoString (!?tokenString !'\v' )
    case '\\' :
      enterCharacterIntoString (!?tokenString !'\\' )
    case '"' :
      enterCharacterIntoString (!?tokenString !'"' )
    case '\'' :
      enterCharacterIntoString (!?tokenString !'\'' )
    case '?' :
      enterCharacterIntoString (!?tokenString !'?' )
    case '&' :
      repeat
      while ~ ";" error incorrectHTMLescapeSequence :
        enterCharacterIntoString (!?identifierString !* )
      end
      convertHTMLSequenceToUnicodeCharacter (!?identifierString !?charValue error unknownHTMLescapeSequence )
      enterCharacterIntoString (!?tokenString !charValue )
    case '0' -> '9' :
      warning obsoleteStringConstruction
      repeat
        enterHexDigitIntoASCIIcharacter (!?charValue !* error ASCIIcodeTooLargeError, internalError )
      while '0' -> '9' :
      end
      enterCharacterIntoString (!?tokenString !charValue )
    case 'u' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
           enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
              convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
              enterCharacterIntoString (!?tokenString !charValue )
            default
              error invalideUnicodeDefinition4
            end
          default
            error invalideUnicodeDefinition4
          end
        default
          error invalideUnicodeDefinition4
        end
      default
        error invalideUnicodeDefinition4
      end
    case 'U' :
      select
      case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
        select
        case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
          enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
          select
          case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
            enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
            select
            case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
              enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
              select
              case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                select
                case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                  enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                  select
                  case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                   enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                    select
                    case '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
                      enterHexDigitIntoUInt ( !* !?uint32value error internalError, internalError )
                      convertUnsignedNumberToUnicodeChar (!?uint32value !?charValue error unassignedUnicodeValue )
                      enterCharacterIntoString (!?tokenString !charValue )
                    default
                      error invalideUnicodeDefinition8
                    end
                  default
                    error invalideUnicodeDefinition8
                  end
                default
                  error invalideUnicodeDefinition8
                end
              default
                error invalideUnicodeDefinition8
              end
            default
              error invalideUnicodeDefinition8
            end
          default
            error invalideUnicodeDefinition8
          end
        default
          error invalideUnicodeDefinition8
        end
      default
        error invalideUnicodeDefinition8
      end
    default
      error incorrectCharConstant
    end
   while ' ' | '!' | '#'-> '\uFFFD' :
    enterCharacterIntoString (!?tokenString !* )
  end
  select
  case '"' :
    send $literal_string$
  default
    error incorrectStringEnd
  end
}

# ------------------------------------ Comment ----------------------------
$comment$  style commentStyle %nonAtomicSelection error message "a comment"
$commentMark$  style commentStyle %nonAtomicSelection error message "a comment"
rule '#' {
  select
  case '!' :
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $commentMark$
  default
    repeat
    while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
    end
    drop $comment$
  end
}

# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' {
}

}
