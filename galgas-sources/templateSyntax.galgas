#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Template parser
#
#  Copyright (C) 2010, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax templateSyntax (galgasTemplateScanner) {

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   E X P R E S S I O N
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <expression_tpl>
  !@templateExpressionAST outExpression {
  <relation_term_tpl> ?outExpression
  repeat
  while
    let @location operatorLocation = @location.here
    $|$
    let @templateExpressionAST leftOperand = outExpression
    let @templateExpressionAST rightOperand
    <relation_term_tpl> ?rightOperand
    outExpression = @templateOrOperationAST {!operatorLocation !leftOperand !rightOperand}
  while
    let @location operatorLocation = @location.here
    $^$
    let @templateExpressionAST leftOperand = outExpression
    let @templateExpressionAST rightOperand
    <relation_term_tpl> ?rightOperand
    outExpression = @templateXorOperationAST {!operatorLocation !leftOperand !rightOperand}
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   R E L A T I O N    T E R M
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <relation_term_tpl>
  !@templateExpressionAST outExpression {
  <relation_factor_tpl> ?outExpression
  repeat
  while
    let @location operatorLocation = @location.here
    $&$
    let @templateExpressionAST leftOperand = outExpression
   let @templateExpressionAST rightOperand
    <relation_factor_tpl> ?rightOperand
    outExpression = @templateAndOperationAST {!operatorLocation !leftOperand !rightOperand}
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   R E L A T I O N    F A C T O R
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <relation_factor_tpl>
  !@templateExpressionAST outExpression {
  <simple_expression_tpl> ?outExpression
  select
  or
    let @location operatorLocation = @location.here
    $==$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <simple_expression_tpl> ?rightExpression
    outExpression = @templateEqualTestAST {!operatorLocation !leftExpression !rightExpression}
  or
    let @location operatorLocation = @location.here
    $!=$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <simple_expression_tpl> ?rightExpression
    outExpression = @templateNonEqualTestAST {!operatorLocation !leftExpression !rightExpression}
  or
    let @location operatorLocation = @location.here
    $<=$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <simple_expression_tpl> ?rightExpression
    outExpression = @templateInfOrEqualTestAST {!operatorLocation !leftExpression !rightExpression}
  or
    let @location operatorLocation = @location.here
    $>=$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <simple_expression_tpl> ?rightExpression
    outExpression = @templateSupOrEqualTestAST {!operatorLocation !leftExpression !rightExpression}
  or
    let @location operatorLocation = @location.here
    $>$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <simple_expression_tpl> ?rightExpression
    outExpression = @templateStrictSupTestAST {!operatorLocation !leftExpression !rightExpression}
  or
    let @location operatorLocation = @location.here
    $<$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <simple_expression_tpl> ?rightExpression
    outExpression = @templateStrictInfTestAST {!operatorLocation !leftExpression !rightExpression}
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   S I M P L E    E X P R E S S I O N
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <simple_expression_tpl> !@templateExpressionAST outExpression {
  <term_tpl> ?outExpression
  repeat
  while
    let @location operatorLocation = @location.here
    $<<$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <term_tpl> ?rightExpression
    outExpression = @templateLeftShiftOperationAST {!operatorLocation !leftExpression !rightExpression}
  while
    let @location operatorLocation = @location.here
    $>>$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <term_tpl> ?rightExpression
    outExpression = @templateRightShiftOperationAST {!operatorLocation !leftExpression !rightExpression}
  while
    let @location operatorLocation = @location.here
    $+$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <term_tpl> ?rightExpression
    outExpression = @templateAddOperationAST {!operatorLocation !leftExpression !rightExpression}
  while
    let @location operatorLocation = @location.here
    $-$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <term_tpl> ?rightExpression
    outExpression = @templateSubOperationAST {!operatorLocation !leftExpression !rightExpression}
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   T E R M
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <term_tpl>
  !@templateExpressionAST outExpression {
  <factor_tpl> ?outExpression
  repeat
  while
    let @location operatorLocation = @location.here
    $*$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <factor_tpl> ?rightExpression
    outExpression = @templateMultiplyOperationAST {!operatorLocation !leftExpression !rightExpression}
  while
    let @location operatorLocation = @location.here
    $/$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <factor_tpl> ?rightExpression
    outExpression = @templateDivideOperationAST {!operatorLocation !leftExpression !rightExpression}
  while
    let @location operatorLocation = @location.here
    $mod$
    let @templateExpressionAST leftExpression = outExpression
    let @templateExpressionAST rightExpression
    <factor_tpl> ?rightExpression
    outExpression = @templateModuloOperationAST {!operatorLocation !leftExpression !rightExpression}
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   F A C T O R    :    struct field access
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <factor_tpl> !@templateExpressionAST outExpression {
  <primary_tpl> ?outExpression
  repeat
  while
    $.$
    $identifier$ ?let @lstring structFieldName
    outExpression = @structFieldAccessTemplateExpressionAST {
      !structFieldName.location
      !outExpression
      !structFieldName
    }
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   F A C T O R    :    - factor
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <factor_tpl> !@templateExpressionAST outExpression {
  let @location operatorLocation = @location.here
  $-$
  let @templateExpressionAST expression
  <factor_tpl> ?expression
  outExpression = @templateUnaryMinusOperationAST {!operatorLocation !expression}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   F A C T O R    :    not FACTOR
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <factor_tpl> !@templateExpressionAST outExpression {
  let @location operatorLocation = @location.here
  $not$
  let @templateExpressionAST ifCondition
  <factor_tpl> ?ifCondition
  outExpression = @templateNotOperatorAST {!operatorLocation !ifCondition}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   F A C T O R    :    ~ FACTOR
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <factor_tpl>
  !@templateExpressionAST outExpression {
  let @location operatorLocation = @location.here
  $~$
  let @templateExpressionAST ifCondition
  <factor_tpl> ?ifCondition
  outExpression = @templateLogicalNegateAST {!operatorLocation !ifCondition}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    <var>
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $identifier$ ?let @lstring identifier
  outExpression = @templateVarInExpressionAST {!identifier}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    ( EXPRESSION )
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $($
  <expression_tpl> ?outExpression
  $)$
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    true
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $true$
  outExpression = @templateTrueBoolAST {!@location.here}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    false
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $false$
  outExpression = @templateFalseBoolAST {!@location.here}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    a literal integer value
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $literalInt$ ?let literalInt
  outExpression = @templateLiteralUIntExpressionAST {!literalInt}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    a double value
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  let @ldouble literalDouble
  $double.xxx$ ? literalDouble ?*
  outExpression = @templateLiteralDoubleExpressionAST {!literalDouble}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    a literal character value
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $'char'$ ?let @lchar literalChar
  outExpression = @templateLiteralCharExpressionAST {!literalChar}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   P R I M A R Y  :    a literal character value
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  var @stringlist literalStringList = ()
  repeat
    $"string"$ ?let @lstring literalString
    literalStringList += !literalString.string
  while
  end
  outExpression = @templateLiteralStringExpressionAST {!literalStringList !@location.here}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#                         F A C T O R
#   description          :   [expression description]
#   getter call          :   [expression getter !... ]
#   constructor call     :   [@class constructor !... ]
#   option value         :   [option option_component_name.option_name]
#   filewrapper template :   [filewrapper fw.template_name !...]
#   extension template   :   [template expression template_name !...]
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $[$
  select
  #--------------------------------- Template
    $template$
    let @templateExpressionAST receiverExpression
    <expression_tpl> ?receiverExpression
    $identifier$ ?let @lstring templateName
    let @templateExpressionListAST expressionList
    <output_expression_list_tpl> ?expressionList
    outExpression = @templateExtensionTemplateCallAST {
      !receiverExpression
      !templateName
      !expressionList
    }
    $]$
  or #------------ Constructor call
    $@type$ ?let @lstring typeName
    $identifier$ ?let @lstring constructorName
    <output_expression_list_tpl> ?let @templateExpressionListAST expressionList
    outExpression = @templateClassFunctionAST {
      !typeName
      !constructorName
      !expressionList
    }
    $]$
  or #--------------------------------- Filewrapper
    $filewrapper$
    $identifier$ ?let @lstring filewrapperName
    $.$
    $identifier$ ?let @lstring templateName
    let @templateExpressionListAST expressionList
    <output_expression_list_tpl> ?expressionList
    $]$
    outExpression = @templateFileWrapperTemplateCallAST {!filewrapperName !templateName !expressionList}
  or #--------------------------------- Getter call
    let startLocation = @location.here
    let @templateExpressionAST receiverExpression
    <expression_tpl> ?receiverExpression
    $identifier$ ?let @lstring getterName
    let @templateExpressionListAST expressionList
    <output_expression_list_tpl> ?expressionList
    $]$
    let endLocation = @location.here
    outExpression = @templateGetterCallInExpressionAST {
      !receiverExpression
      !getterName
      !expressionList
      ![startLocation union !endLocation]
    }
  or
    $option$
    select
      $.$
      $identifier$ ?let @lstring optionName
      $identifier$ ?let @lstring getterName
      outExpression = @templateOptionAccessAST {!@lstring {!"galgas_builtin_options" !@location.here} !optionName !getterName}
    or
      $identifier$ ?let @lstring optionComponentName
      $.$
      $identifier$ ?let @lstring optionName
      $identifier$ ?let @lstring getterName
      outExpression = @templateOptionAccessAST {!optionComponentName !optionName !getterName}
    end
    $]$
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#                         F A C T O R
#   function call        :   function_name (!... )
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  $identifier$ ?let @lstring functionName
  $($
  <output_expression_list_tpl> ?let @templateExpressionListAST expressionList
  $)$
  outExpression = @templateFunctionCallAST {!functionName !expressionList}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary_tpl> !@templateExpressionAST outExpression {
  <primary_tpl> ?outExpression
  let @location endOfReceiverExpression = @location.here
  $is$
  let @dynamicTypeComparisonKind kind
  select
    $==$
    kind = .equal
  or
    $>=$
    kind = .inherited
  or
    $>$
    kind = .strictlyInherited
  end
  $@type$ ?let @lstring typeName
  outExpression = @templateTestDynamicClassAST {
    !outExpression
    !endOfReceiverExpression
    !kind
    !typeName
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#   O U T P U T    E X P R E S S I O N    L I S T
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <output_expression_list_tpl> !@templateExpressionListAST outExpressionList {
  outExpressionList = ()
  repeat
  while
    $!selector:$ ?let selector
    <expression_tpl> ?let @templateExpressionAST expression
    outExpressionList += !selector !expression !@location.here
  while
    $!$
    let selector = ["" here]
    <expression_tpl> ?let @templateExpressionAST expression
    outExpressionList += !selector !expression !@location.here
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#    I N S T R U C T I O N S
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <template_instruction> ?!@templateInstructionListAST ioResultingInstructionList {
  $!$
  <expression_tpl> ?let @templateExpressionAST expression
  ioResultingInstructionList += !@templateInstructionExpressionAST {!expression !@location.here}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <template_instruction> ?!@templateInstructionListAST ioResultingInstructionList {
  $?^$
  ioResultingInstructionList += !@templateInstructionGetColumnLocationAST {}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <template_instruction> ?!@templateInstructionListAST ioResultingInstructionList {
  $!^$
  ioResultingInstructionList += !@templateInstructionGotoColumnLocationAST {}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <template_instruction> ?!@templateInstructionListAST ioResultingInstructionList {
  $block$
  <expression_tpl> ?let @templateExpressionAST expression
  $:$
#--- Instruction list
  var blockInstructionList = @templateInstructionListAST ()
  repeat
    enterTemplateString (!?blockInstructionList)
  while
    <template_instruction> !?blockInstructionList
  end
#---
  $end$
  ioResultingInstructionList += !@templateBlockInstructionAST {
   !expression
   !@location.here
   !blockInstructionList}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <template_instruction> ?!@templateInstructionListAST ioResultingInstructionList {
  $if$
  var templateInstructionIfBranchList = @templateInstructionIfBranchListAST ()
  repeat
    <expression_tpl> ?let expression
    $then$
    var @templateInstructionListAST instructionList = ()
    repeat
      enterTemplateString (!?instructionList)
    while
      <template_instruction> !?instructionList
    end
    templateInstructionIfBranchList += !expression !instructionList
  while
    $elsif$
  end
#--- else
  var @templateInstructionListAST elseInstructionList = ()
  select
  or
    $else$
    repeat
      enterTemplateString (!?elseInstructionList)
    while
      <template_instruction> !?elseInstructionList
    end
  end
#---
  $end$
  ioResultingInstructionList += !@templateInstructionIfAST {
    !templateInstructionIfBranchList
    !elseInstructionList}
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

rule <template_parser_start_symbol> !@templateInstructionListAST outResultingInstructionList {
  outResultingInstructionList = ()
  repeat
    enterTemplateString (!?outResultingInstructionList)
  while
    <template_instruction> !?outResultingInstructionList
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc enterTemplateString ?!@templateInstructionListAST outResultingInstructionList {
  let @string s = @string.retrieveAndResetTemplateString
  if [s count] > 0 then
    outResultingInstructionList += !@templateInstructionStringAST {!s}
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
