#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mIfExpression
  public let @semanticExpressionAST mThenExpression
  public let @semanticExpressionAST mElseExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST ioDeclarations
                      !@semanticExpressionAST outExpression {
    $if$
    <expression_ggs3> !?ioDeclarations ?let ifExpression
    let operatorLocation = @location.here
    $then$
    <expression_ggs3> !?ioDeclarations ?let thenExpression
    $else$
    <expression_ggs3> !?ioDeclarations ?let elseExpression
    $end$
    outExpression = @ifExpressionAST {
      !operatorLocation
      !ifExpression
      !thenExpression
      !elseExpression
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <primary> ?!@galgasDeclarationAST ioDeclarations
                 !@semanticExpressionAST outExpression {
    $if$
    <expression> !?ioDeclarations ?let ifExpression
    let operatorLocation = @location.here
    $then$
    <expression> !?ioDeclarations ?let thenExpression
    $else$
    <expression> !?ioDeclarations ?let elseExpression
    $end$
    outExpression = @ifExpressionAST {
      !operatorLocation
      !ifExpression
      !thenExpression
      !elseExpression
    }
  }

  #·······························································································

#  rule <primary> !@semanticExpressionAST outExpression {
#    $if$
#    <expression> ?let ifExpression
#    let operatorLocation = @location.here
#    ${$
#    <expression> ?let thenExpression
#    $}$
#    $else$
#    ${$
#    <expression> ?let elseExpression
#    $}$
#    outExpression = @ifExpressionAST {
#      !operatorLocation
#      !ifExpression
#      !thenExpression
#      !elseExpression
#    }
#  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mIfExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mThenExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mElseExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·······················································································································

override method @ifExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- 'if' expression analysis
  [self.mIfExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inAnalysisContext.predefinedTypes.mBoolType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration if_expression
  ]
#--- 'then' expression analysis
  [self.mThenExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let then_expression
  ]
#--- 'else' expression analysis
  [self.mElseExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let else_expression
  ]
#--- Check 'if' expression is boolean
  if [if_expression.mResultType definition].typeName.string != "bool" then
    error self.mOperatorLocation
    :"the test expression type is '@" + [if_expression.mResultType definition].typeName.string + "', it should be '@bool'"
    :outExpression
  elsif then_expression.mResultType != else_expression.mResultType then
    error self.mOperatorLocation
    :"operand expression types are '@" + [then_expression.mResultType definition].typeName.string + "' and '@"+ [else_expression.mResultType definition].typeName.string + "': they should be the same"
    :outExpression
  else
  #--- Generate expression
    outExpression = @ifExpressionForGeneration {
      !then_expression.mResultType
      !self.mOperatorLocation
      !if_expression
      !then_expression
      !else_expression
    }
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifExpressionForGeneration : @semanticExpressionForGeneration {
  public let @semanticExpressionForGeneration mIfExpression
  public let @semanticExpressionForGeneration mThenExpression
  public let @semanticExpressionForGeneration mElseExpression
}

#·······················································································································

override method @ifExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
#--- 'if' expression
  [self.mIfExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let ifExpression
  ]
#--- Result variable
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "GALGAS_" + [self.mThenExpression.mResultType identifierRepresentation] + " " + outCppExpression + " ;\n"
  let testVar = "test_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "const enumGalgasBool " + testVar + " = " + ifExpression + ".boolEnum () ;\n"
  ioGeneratedCode += "if (kBoolTrue == " + testVar + ") {\n"
#--- 'then' expression
  [!?ioGeneratedCode incIndentation !2]
  [self.mThenExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let thenExpression
  ]
  ioGeneratedCode += outCppExpression + " = " + thenExpression + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
#--- 'else' expression
  ioGeneratedCode += "}else if (kBoolFalse == " + testVar + ") {\n"
  [!?ioGeneratedCode incIndentation !2]
  [self.mElseExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let elseExpression
  ]
  ioGeneratedCode += outCppExpression + " = " + elseExpression + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
