#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mIfExpression
  public var @semanticExpressionAST mThenExpression
  public var @semanticExpressionAST mElseExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································

  rule <primary> !@semanticExpressionAST outExpression {
    $if$
    <expression> ?let ifExpression
    let operatorLocation = @location.here
    $then$
    <expression> ?let thenExpression
    $else$
    <expression> ?let elseExpression
    $end$
    outExpression = @ifExpressionAST.new {
      !operatorLocation
      !ifExpression
      !thenExpression
      !elseExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································

  rule <primary> !@semanticExpressionAST outExpression {
    $if$
    <expression> ?let ifExpression
    let operatorLocation = @location.here
    $then$
    <expression> ?let thenExpression
    $else$
    <expression> ?let elseExpression
    $end$
    outExpression = @ifExpressionAST.new {
      !operatorLocation
      !ifExpression
      !thenExpression
      !elseExpression
    }
  }

  #·····················································································································

#  rule <primary> !@semanticExpressionAST outExpression {
#    $if$
#    <expression> ?let ifExpression
#    let operatorLocation = @location.here
#    ${$
#    <expression> ?let thenExpression
#    $}$
#    $else$
#    ${$
#    <expression> ?let elseExpression
#    $}$
#    outExpression = @ifExpressionAST.new {
#      !operatorLocation
#      !ifExpression
#      !thenExpression
#      !elseExpression
#    }
#  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @ifExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mIfExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mThenExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mElseExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·······················································································································

override method @ifExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMap-entry inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- 'if' expression analysis
  [self.mIfExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inAnalysisContext.mPredefinedTypes.mBoolType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration if_expression
  ]
#--- 'then' expression analysis
  [self.mThenExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inType
    !inAnalysisContext
    !?ioVariableMap
    ?let then_expression
  ]
#--- 'else' expression analysis
  [self.mElseExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inType
    !inAnalysisContext
    !?ioVariableMap
    ?let else_expression
  ]
#--- Check 'if' expression is boolean
  if [if_expression.mResultType key] != "bool" then
    error self.mOperatorLocation
    :"the test expression type is '@" + [if_expression.mResultType key] + "', it should be '@bool'"
    :outExpression
  elsif then_expression.mResultType != else_expression.mResultType then
    error self.mOperatorLocation
    :"operand expression types are '@" + [then_expression.mResultType key] + "' and '@"+ [else_expression.mResultType key] + "': they should be the same"
    :outExpression
  else
  #--- Generate expression
    outExpression = @ifExpressionForGeneration.new {
      !then_expression.mResultType
      !self.mOperatorLocation
      !if_expression
      !then_expression
      !else_expression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @ifExpressionForGeneration : @semanticExpressionForGeneration {
  public var @semanticExpressionForGeneration mIfExpression
  public var @semanticExpressionForGeneration mThenExpression
  public var @semanticExpressionForGeneration mElseExpression
}

#·······················································································································

override method @ifExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
#--- 'if' expression
  [self.mIfExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let ifExpression
  ]
#--- Result variable
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "GALGAS_" + [self.mThenExpression.mResultType identifierRepresentation] + " " + outCppExpression + " ;\n"
  let testVar = "test_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "const enumGalgasBool " + testVar + " = " + ifExpression + ".boolEnum () ;\n"
  ioGeneratedCode += "if (kBoolTrue == " + testVar + ") {\n"
#--- 'then' expression
  [!?ioGeneratedCode incIndentation !2]
  [self.mThenExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let thenExpression
  ]
  ioGeneratedCode += outCppExpression + " = " + thenExpression + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
#--- 'else' expression
  ioGeneratedCode += "}else if (kBoolFalse == " + testVar + ") {\n"
  [!?ioGeneratedCode incIndentation !2]
  [self.mElseExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let elseExpression
  ]
  ioGeneratedCode += outCppExpression + " = " + elseExpression + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
