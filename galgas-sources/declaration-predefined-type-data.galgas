//------------------------------------------------------------------------------------------------
//
//  Generate predefined types
//
//  Copyright (C) 2010, ..., 2024 Pierre Molinaro.
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------

class @dataPredefinedTypeAST : @predefinedTypeAST {

  //----------------------------------------------------------------------------------------------

  override getter initializers -> @initializerSignatureList {
    result = @[@(@formalInputParameterListAST ())]
  }

  //----------------------------------------------------------------------------------------------

  override method getClassFunctionMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                      !@classFunctionMap outMap {
    outMap = @()
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"emptyData"
      !resultTypeName:"data"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"dataWithContentsOfFile"
      !argTypeName:"string"
      !argName:"inFilePath"
      !resultTypeName:"data"
      !hasLexiqueArg:true
    )
  }

  //----------------------------------------------------------------------------------------------

  override getter getSupportedOperatorFlags -> @typeFeatures {
    result = .generateDescriptionGetterUtilityMethod | .equatable
  }

  //----------------------------------------------------------------------------------------------

  override method getEnumerationList ?!@unifiedTypeMap ioUnifiedTypeMap
                                      !@enumerationDescriptorList outEnumerationList
                                      !@string outEnumeratedType {
    [!?ioUnifiedTypeMap makeEntryFromString !"uint" ?let uintTypeIndex]
    outEnumerationList = @()
    outEnumerationList += !uintTypeIndex !"data"
    outEnumeratedType = "uint"
  }

  //----------------------------------------------------------------------------------------------

  override method getInstanceMethodMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                       !@instanceMethodMap outInstanceMethodMap {
    outInstanceMethodMap = @()
    enterInstanceMethodWithInputArgument (
      !?outInstanceMethodMap
      !?ioUnifiedTypeMap
      !inputArgTypeName: "string"
      !inputArgName: "inFilePath"
      !methodName: "writeToFile"
      !true
    )
    enterInstanceMethodWithInputArgument (
      !?outInstanceMethodMap
      !?ioUnifiedTypeMap
      !inputArgTypeName: "string"
      !inputArgName: "inFilePath"
      !methodName: "writeToExecutableFile"
      !true
    )
    var @formalParameterSignature argList = @()
    [!?ioUnifiedTypeMap makeEntryFromString !"string" ?@unifiedTypeMapEntry t]
    argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentConstantIn !"inFilePath"
    [!?ioUnifiedTypeMap makeEntryFromString !"bool" ?t]
    argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentOut !"outFileModified"
    [!?outInstanceMethodMap insertKey
      !@lstring {!"writeToFileWhenDifferentContents" !@location.here}
      !@methodKind. definedAsMember
      !argList
      !@location.here
      !true
      !@methodQualifier. isBasic
      !"" // No error message
    ]
  }

  //----------------------------------------------------------------------------------------------

  override method getGetterMap ?!@unifiedTypeMap ioUnifiedTypeMap
                               !@getterMap outMap {
    commonGetterMapForAllTypes (!?ioUnifiedTypeMap ?outMap)
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"count"
      !obsoleteName: "length"
      !returnedTypeName:"uint"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"cStringRepresentation"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:false
    )
  }

  //----------------------------------------------------------------------------------------------

  override method getSetterMap ?!@unifiedTypeMap ioUnifiedTypeMap
                               !@setterMap outSetterMap {
    outSetterMap = @()
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "uint"
      !argName: "inValue"
      !setterName: "appendByte"
      !compilerArg:true
    )
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "uint"
      !argName: "inValue"
      !setterName: "appendShortBE"
      !compilerArg:true
    )
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "uint"
      !argName: "inValue"
      !setterName: "appendShortLE"
      !compilerArg:true
    )
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "uint"
      !argName: "inValue"
      !setterName: "appendUIntBE"
      !compilerArg:false
    )
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "uint"
      !argName: "inValue"
      !setterName: "appendUIntLE"
      !compilerArg: false
    )
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "string"
      !argName: "inValue"
      !setterName: "appendUTF8String"
      !compilerArg: false
    )
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "data"
      !argName: "inValue"
      !setterName: "appendData"
      !compilerArg: false
    )
  }

  //----------------------------------------------------------------------------------------------

  override getter cppDeclarationString -> @string {
    result = [filewrapper predefinedTypeGenerationTemplate.data_type]
  }

  //----------------------------------------------------------------------------------------------

}

//------------------------------------------------------------------------------------------------

