#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#  'expression' syntax                                                                                                 *
#                                                                                                                      *
#  Copyright (C) 2014, ..., 2018 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@ls2n.fr                                                                                           *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3ExpressionSyntax (galgas3Scanner) {

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#   C O N C A T E N A T I O N    T E R M                                                                               *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <casted_expression> !@semanticExpressionAST outExpression {
  <relation_term> ? outExpression
  repeat
  while
    let operatorLocation = @location.here
    $|$
    let leftOperand = outExpression
    <relation_term> ?let rightOperand
    outExpression = @orExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $||$
    let leftOperand = outExpression
    <relation_term> ?let rightOperand
    outExpression = @orShortExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $^$
    let leftOperand = outExpression
    <relation_term> ?let rightOperand
    outExpression = @xorExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $...$
    let leftOperand = outExpression
    <relation_term> ?let rightOperand
    outExpression = @closedSliceExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $..<$
    let leftOperand = outExpression
    <relation_term> ?let rightOperand
    outExpression = @openedSliceExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#   R E L A T I O N    T E R M                                                                                         *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <relation_term> !@semanticExpressionAST outExpression {
  <relation_factor> ? outExpression
  repeat
  while
    let operatorLocation = @location.here
    $&$
    let leftOperand = outExpression
    <relation_factor> ?let @semanticExpressionAST rightOperand
    outExpression = @andExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $&&$
    let leftOperand = outExpression
    <relation_factor> ?let @semanticExpressionAST rightOperand
    outExpression = @andShortExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#   T E R M                                                                                                            *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <term> !@semanticExpressionAST outExpression {
  <factor> ? outExpression
  repeat
  while
    let operatorLocation = @location.here
    $*$
    let leftOperand = outExpression
    <factor> ?let @semanticExpressionAST rightOperand
    outExpression = @multiplicationExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $&*$
    let leftOperand = outExpression
    <factor> ?let @semanticExpressionAST rightOperand
    outExpression = @multiplicationExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $/$
    let leftOperand = outExpression
    <factor> ?let rightOperand
    outExpression = @divisionExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $&/$
    let leftOperand = outExpression
    <factor> ?let rightOperand
    outExpression = @divisionExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
  while
    let operatorLocation = @location.here
    $mod$
    let leftOperand = outExpression
    <factor> ?let rightOperand
    outExpression = @moduloExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#   P R I M A R Y  :    (EXPRESSION)                                                                                   *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <primary> !@semanticExpressionAST outExpression {
  $($
  <expression> ? outExpression
  $)$
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

}
