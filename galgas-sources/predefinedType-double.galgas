#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Generate predefined types
#
#  Copyright (C) 2010, ..., 2024 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @doublePredefinedTypeAST : @predefinedTypeAST {

  #-----------------------------------------------------------------------------------------------

  override getter defaultInitializerName -> @string {
    result = "default"
  }

  #-----------------------------------------------------------------------------------------------

  override getter getSupportedOperatorFlags -> @operators {
    result = .infixAddOperator | .infixSubOperator | .infixMulOperator | .infixDivOperator
      | .prefixPlusOperator | .prefixMinusOperator | .infixModOperator | .infixDivOperatorNoOVF
      | .generateDescriptionGetterUtilityMethod | .isComparable
      | .plusEqualOperatorWithExpression | .minusEqualOperatorWithExpression
      | .mulEqualOperatorWithExpression | .divEqualOperatorWithExpression
  }

  #-----------------------------------------------------------------------------------------------

  override method getGetterMap ?!@unifiedTypeMap ioUnifiedTypeMap
                               !@getterMap outMap {
    commonGetterMapForAllTypes (!?ioUnifiedTypeMap ?outMap)
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"string"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"uint"
      !obsoleteName: ""
      !returnedTypeName:"uint"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"sint"
      !obsoleteName: ""
      !returnedTypeName:"sint"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"uint64"
      !obsoleteName: ""
      !returnedTypeName:"uint64"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"sint64"
      !obsoleteName: ""
      !returnedTypeName:"sint64"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"cos"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"sin"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"tan"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"log10"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"log2"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"logn"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"exp"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"cosDegree"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"sinDegree"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"tanDegree"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"sqrt"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"power" !"double" !"inExponant"
      !returnedTypeName:"double"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"binaryImage"
      !obsoleteName: ""
      !returnedTypeName:"uint64"
      !hasCompilerArgument:false
    )
  }

  #-----------------------------------------------------------------------------------------------

  override method getClassFunctionMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                      !@classFunctionMap outMap {
    outMap = <[]>
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"pi"
      !resultTypeName:"double"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"doubleWithBinaryImage"
      !argTypeName:"uint64"
      !argName:"inBinaryImage"
      !resultTypeName:"double"
      !hasLexiqueArg:false
    )
  }

  #-----------------------------------------------------------------------------------------------

  override getter cppDeclarationString -> @string {
    result = [filewrapper predefinedTypeGenerationTemplate.double_type]
  }

  #-----------------------------------------------------------------------------------------------

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

