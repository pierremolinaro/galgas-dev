#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @multiplicationExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @multiplicationExpressionNoOverflowAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @divisionExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @divisionExpressionNoOverflowAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @moduloExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <term> !@semanticExpressionAST outExpression {
    <factor> ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $*$
      let leftOperand = outExpression
      <factor> ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&*$
      let leftOperand = outExpression
      <factor> ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $/$
      let leftOperand = outExpression
      <factor> ?let rightOperand
      outExpression = @divisionExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&/$
      let leftOperand = outExpression
      <factor> ?let rightOperand
      outExpression = @divisionExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $mod$
      let leftOperand = outExpression
      <factor> ?let rightOperand
      outExpression = @moduloExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <term> !@semanticExpressionAST outExpression {
    <factor> ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $*$
      let leftOperand = outExpression
      <factor> ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&*$
      let leftOperand = outExpression
      <factor> ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $/$
      let leftOperand = outExpression
      <factor> ?let rightOperand
      outExpression = @divisionExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&/$
      let leftOperand = outExpression
      <factor> ?let rightOperand
      outExpression = @divisionExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $mod$
      let leftOperand = outExpression
      <factor> ?let rightOperand
      outExpression = @moduloExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @multiplicationExpressionNoOverflowAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @multiplicationExpressionNoOverflowAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    ![[leftExpression.mResultType definition].mHandledOperatorFlags infixMulOperatorNoOVF]
    !"&*"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.multiply_operation_no_ovf
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


override method @multiplicationExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @multiplicationExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    ![[leftExpression.mResultType definition].mHandledOperatorFlags infixMulOperator]
    !"*"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.multiply_operation
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @divisionExpressionNoOverflowAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @divisionExpressionNoOverflowAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    ![[leftExpression.mResultType definition].mHandledOperatorFlags infixDivOperatorNoOVF]
    !"&/"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.divide_operation_no_ovf
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @divisionExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @divisionExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    ![[leftExpression.mResultType definition].mHandledOperatorFlags infixDivOperator]
    !"/"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.divide_operation
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @moduloExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @moduloExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    ![[leftExpression.mResultType definition].mHandledOperatorFlags infixModOperator]
    !"mod"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )  
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration.new {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.modulo_operation
    !rightExpression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
