#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @multiplicationExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @multiplicationExpressionNoOverflowAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @divisionExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @divisionExpressionNoOverflowAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @moduloExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @semanticExpressionAST mRightExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <term_ggs3> ?!@galgasDeclarationAST ioDeclarations
                   !@semanticExpressionAST outExpression {
    <factor_ggs3> !?ioDeclarations ?outExpression
    repeat
    while
      let operatorLocation = @location.here
      $*$
      let leftOperand = outExpression
      <factor_ggs3> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&*$
      let leftOperand = outExpression
      <factor_ggs3> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionNoOverflowAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $/$
      let leftOperand = outExpression
      <factor_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @divisionExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&/$
      let leftOperand = outExpression
      <factor_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @divisionExpressionNoOverflowAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $mod$
      let leftOperand = outExpression
      <factor_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @moduloExpressionAST {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <term> ?!@galgasDeclarationAST ioDeclarations
              !@semanticExpressionAST outExpression {
    <factor> !?ioDeclarations ?outExpression
    repeat
    while
      let operatorLocation = @location.here
      $*$
      let leftOperand = outExpression
      <factor> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&*$
      let leftOperand = outExpression
      <factor> !?ioDeclarations ?let @semanticExpressionAST rightOperand
      outExpression = @multiplicationExpressionNoOverflowAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $/$
      let leftOperand = outExpression
      <factor> !?ioDeclarations ?let rightOperand
      outExpression = @divisionExpressionAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&/$
      let leftOperand = outExpression
      <factor> !?ioDeclarations ?let rightOperand
      outExpression = @divisionExpressionNoOverflowAST {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $mod$
      let leftOperand = outExpression
      <factor> !?ioDeclarations ?let rightOperand
      outExpression = @moduloExpressionAST {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @multiplicationExpressionNoOverflowAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @multiplicationExpressionNoOverflowAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixMulOperatorNoOVF]
    !"&*"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.multiply_operation_no_ovf
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————


override method @multiplicationExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @multiplicationExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixMulOperator]
    !"*"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.multiply_operation
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @divisionExpressionNoOverflowAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @divisionExpressionNoOverflowAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixDivOperatorNoOVF]
    !"&/"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.divide_operation_no_ovf
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @divisionExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @divisionExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixDivOperator]
    !"/"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.divide_operation
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @moduloExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @moduloExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsHandled: [[leftExpression.mResultType definition].features infixModOperator]
    !"mod"
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @binaryOperatorExpressionForGeneration {
    !leftExpression.mResultType
    !self.mOperatorLocation
    !leftExpression
    !.modulo_operation
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
