#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Copyright (C) 2016, ..., 2016 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    O U T P U T    P R O D U C T I O N    R U L E S    I N    T E X                                                   *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper grammarRulesInTexDocumentTemplate in "../generation_templates/grammar_generation" {
}{
}{
  template document "grammar-rules-document.tex.galgasTemplate"
    ?@string DOCUMENT_NAME
 }

#----------------------------------------------------------------------------------------------------------------------*

func escapeForTex ?let @string inString -> @string result {
  result = ""
  for idx in 0 ..< [inString length] do
    let c = [inString characterAtIndex !idx]
    if c == '_' then
      result += "\\_"
    elsif c == '{' then
      result += "\\{"
    elsif c == '}' then
      result += "\\}"
    elsif c == '&' then
      result += "\\&"
    elsif c == '^' then
      result += "\\verb=^="
    elsif c == '%' then
      result += "\\verb=%="
    elsif c == '~' then
      result += "$\\sim$"
    elsif c == '^' then
      result += "$\\wedge$"
    else
      result += c
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc emitProductionRulesInTexFile
  ?let @string inProductDirectory
  ?let @string  inGrammarComponentName
  ?let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalMapForGrammarAnalysis
  ?let @syntaxComponentListForGrammarAnalysis inSyntaxComponentListForGrammarAnalysis
{
#---------------------------------------------------------- Print an tex file for grammar rule list
  let texDocumentFilePath = inProductDirectory + "/../tex/" + inGrammarComponentName + ".document.tex"
  [[texDocumentFilePath stringByDeletingLastPathComponent] makeDirectory]
  [[filewrapper grammarRulesInTexDocumentTemplate.document !inGrammarComponentName]
    writeToFileWhenDifferentContents !texDocumentFilePath ?*
  ]
  let texFilePath = inProductDirectory + "/../tex/" + inGrammarComponentName + ".tex"
  var s = ""
  for nonterminal in inNonTerminalMapForGrammarAnalysis do
    s += "\\ruleSection{" + escapeForTex (!nonterminal.lkey) + "}\n\n"
    for syntaxComponent in inSyntaxComponentListForGrammarAnalysis do
      for productionRule in syntaxComponent.mProductionRulesList do
        if productionRule.mLeftNonterminalSymbol.string == nonterminal.lkey then
          @string currentNode = "P0start"
          @rowList rowArray = {!{!currentNode !"[point] {}"}}
          @string arrows = ""
          @string arrowStyle = "--"
          var column = 1
          var maxUsedRowIndex = 0 # Unused
          for (instruction) in productionRule.mInstructionList do
            [instruction tikzNodeForSyntaxInstruction
              !?rowArray
              !fromRow:0
              !?column:column
              !?node:currentNode
              !?arrowShape:arrowStyle
              !?arrows:arrows
              !?maxUsedRowIndex
              !debug:false
            ]
          end
        #--- Add a final arrow
          [!?rowArray append !nodeDefinition:"[lastPoint] {}" !row:0 !column:column ?nodeName:let lastNodeName]
          arrows += "  \\draw[->] (" + currentNode + ") -- (" + lastNodeName + ") ;\n"
        #--- Write tex file
          let loc = productionRule.mLeftNonterminalSymbol.location
          s += "\\ruleSubsection{"
            + escapeForTex (!syntaxComponent.mSyntaxComponentName.string)
            + "}{"
            + escapeForTex (![[[loc file] lastPathComponent] stringByDeletingPathExtension])
            + "}{" + escapeForTex (![loc line])
            + "}\n\n"
            + "\\begin{tikzpicture}\n"
            + "  \\matrix[column sep=\\ruleMatrixColumnSeparation, row sep=\\ruleMatrixRowSeparation] {\n"
          for > (columns) in rowArray do
            s += "    "
            for column in columns do
              if column.mValue0 == "" then
                s += "& "
              else
                s += "\\node (" + column.mValue0 + ") " + column.mValue1 + "; & "
              end
            end
            s += "\\\\\n"
          end
          s += "  };\n"
        #--- Arrows
          s += arrows
          s += "\\end{tikzpicture}\n\n"
        end
      end
    end
  end
  [s writeToFileWhenDifferentContents !texFilePath ?*]
}

#----------------------------------------------------------------------------------------------------------------------*

list @rowList {
  @2stringlist columns %setter # Node name, node definition
}

#----------------------------------------------------------------------------------------------------------------------*

setter @rowList append
  ?nodeDefinition:let @string inNodeDefinition
  ?row:let @uint inRow
  ?column:let @uint inColumn
  !nodeName:@string outNodeName
{
#--- Add rows ?
  let length = [self length]
  if length <= inRow then
    for i in length ... inRow do
      self += !{}
    end
  end
#--- Get row
  var cols = [self columnsAtIndex !inRow]
#--- add column pads in row
  if [cols length] <= inColumn then
    for i in [cols length] ... inColumn do
      cols += !"" !""
    end
  end
#--- Add node
  outNodeName = "p" + inRow + "-" + [cols length]
  cols += !outNodeName !inNodeDefinition
#--- Set new row
  [!?self setColumnsAtIndex !cols !inRow]
}

#----------------------------------------------------------------------------------------------------------------------*

abstract method @abstractSyntaxInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint ioMaxUsedRowIndex
  ?debug:let @bool inDebug

#----------------------------------------------------------------------------------------------------------------------*

override method @terminalInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint unused ioMaxUsedRowIndex
  ?debug:let @bool unused inDebug
{
  [!?ioRowList append
    !nodeDefinition:"[terminal] {" + escapeForTex (!mTerminalSymbolName) + "}"
    !row:inRow
    !column:ioColumn
    ?nodeName:let nodeName
  ]
  ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + nodeName + ") ;\n"
  ioCurrentNode = nodeName
  ioArrowShape = "--"
  ioColumn ++
}

#----------------------------------------------------------------------------------------------------------------------*

override method @nonTerminalInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint unused ioMaxUsedRowIndex
  ?debug:let @bool unused inDebug
{
  [!?ioRowList append
    !nodeDefinition:"[nonterminal] {" + escapeForTex (!mNonterminalSymbolName) + "}"
    !row:inRow
    !column:ioColumn
    ?nodeName:let nodeName
  ]
  ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + nodeName + ") ;\n"
  ioCurrentNode = nodeName
  ioArrowShape = "--"
  ioColumn ++
}

#----------------------------------------------------------------------------------------------------------------------*

override method @repeatInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint unused ioMaxUsedRowIndex
  ?debug:let @bool unused inDebug
{
  [!?ioRowList append
    !nodeDefinition:"[nonterminal] {repeat" + [mRepeatBranchList length] + "}"
    !row:inRow
    !column:ioColumn
    ?nodeName:let nodeName
  ]
  ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + nodeName + ") ;\n"
  ioCurrentNode = nodeName
  ioArrowShape = "--"
  ioColumn ++
}

#----------------------------------------------------------------------------------------------------------------------*

override method @selectInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint ioMaxUsedRowIndex
  ?debug:let @bool inDebug
{
#--- Trace ?
  if inDebug then
    [!?ioRowList append
      !nodeDefinition:"[nonterminal] {S" + [mSelectBranchList length] + "}"
      !row:inRow
      !column:ioColumn
      ?nodeName:let markerStartNodeName
    ]
    ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + markerStartNodeName + ") ;\n"
    ioCurrentNode = markerStartNodeName
    ioArrowShape = "--"
    ioColumn ++
  end
#--- Enter start point
  [!?ioRowList append !nodeDefinition:"[point] {}" !row:inRow !column:ioColumn ?nodeName:let startNodeName]
  ioColumn ++
#--- Enter branch zero
  var branches = mSelectBranchList
  [!?branches popFirst ?let @syntaxInstructionListForGrammarAnalysis brancheZero]
  var branchZeroColumn = ioColumn
  for (instruction) in brancheZero do
    [instruction tikzNodeForSyntaxInstruction
      !?ioRowList
      !fromRow:inRow
      !?column:branchZeroColumn
      !?node:ioCurrentNode
      !?arrowShape:ioArrowShape
      !?arrows:ioArrows
      !?ioMaxUsedRowIndex
      !debug:inDebug
    ]
  end
  var endColumn = branchZeroColumn
#--- Enter following branches
  @stringlist endingNodes = {}
  for branch in branches do
    ioMaxUsedRowIndex ++
    var branchColumn = ioColumn
    var currentNode = startNodeName
    var arrowStyle = "|-"
    let row = ioMaxUsedRowIndex
    for (instruction) in branch.mSyntaxInstructionList do
      [instruction tikzNodeForSyntaxInstruction
        !?ioRowList
        !fromRow:row
        !?column:branchColumn
        !?node:currentNode
        !?arrowShape:arrowStyle
        !?arrows:ioArrows
        !?ioMaxUsedRowIndex
        !debug:inDebug
      ]
    end
    endingNodes += !currentNode
    if endColumn < branchColumn then
      endColumn = branchColumn
    end
  end
  ioColumn = endColumn
#--- Enter end point
  [!?ioRowList append !nodeDefinition:"[point] {}" !row:inRow !column:ioColumn ?nodeName:let endNodeName]
  ioColumn ++
  ioArrowShape = "--"
  ioArrows += "  \\draw (" + ioCurrentNode + ") " + ioArrowShape + " (" + endNodeName + ") ;\n"
  ioCurrentNode = endNodeName
#--- Add ending nodes
  for (node) in endingNodes do
    ioArrows += "  \\draw[->] (" + node + ") -| (" + endNodeName + ") ;\n"
  end
#--- Trace ?
  if inDebug then
    [!?ioRowList append
      !nodeDefinition:"[nonterminal] {E" + [mSelectBranchList length] + "}"
      !row:inRow
      !column:ioColumn
      ?nodeName:let markerEndNodeName
    ]
    ioColumn ++
    ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + markerEndNodeName + ") ;\n"
    ioCurrentNode = markerEndNodeName
  end
}

#----------------------------------------------------------------------------------------------------------------------*

