//------------------------------------------------------------------------------------------------
//
//  Copyright (C) 2016, ..., 2016 Pierre Molinaro.
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------
//
//    O U T P U T    P R O D U C T I O N    R U L E S    I N    T E X
//
//------------------------------------------------------------------------------------------------

filewrapper grammarRulesInTexDocumentTemplate in "+generation-templates/grammar_generation" {
}{
}{
  template document "grammar-rules-document.tex.galgasTemplate"
    ?@string DOCUMENT_NAME
    ?@string TEX_ESCAPED_DOCUMENT_NAME
 }

//------------------------------------------------------------------------------------------------

private func escapeForTex (let @string inString) -> @string {
  result = ""
  for @uint idx in 0 ..< [inString count] do
    let c = [inString characterAtIndex !idx]
    if c == '_' then
      result += "\\_"
    elsif c == '{' then
      result += "\\{"
    elsif c == '}' then
      result += "\\}"
    elsif c == '&' then
      result += "\\&"
    elsif c == '#' then
      result += "\\#"
    elsif c == '$' then
      result += "\\$"
    elsif c == '^' then
      result += "\\verb=^="
    elsif c == '%' then
      result += "\\verb=%="
    elsif c == '~' then
      result += "$\\sim$"
    elsif c == '^' then
      result += "$\\wedge$"
    else
      result += c
    end
  end
}

//------------------------------------------------------------------------------------------------

proc emitProductionRulesInTexFile
  ?let @string inProductDirectory
  ?let @string  inGrammarComponentName
  ?let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalMapForGrammarAnalysis
  ?let @syntaxComponentListForGrammarAnalysis inSyntaxComponentListForGrammarAnalysis
  ?let @lstring inStartSymbol
{
//--------------------------------------------------------- Print an tex file for grammar rule list
  let texDocumentFilePath = inProductDirectory + "/../tex/" + inGrammarComponentName + ".document.tex"
  [[texDocumentFilePath stringByDeletingLastPathComponent] makeDirectory]
  let document = [filewrapper grammarRulesInTexDocumentTemplate.document
    !inGrammarComponentName
    !escapeForTex (!inGrammarComponentName)
  ]
  [document writeToFileWhenDifferentContents !texDocumentFilePath ?*]
  let texFilePath = inProductDirectory + "/../tex/" + inGrammarComponentName + ".tex"
  var s = ""
  [inNonTerminalMapForGrammarAnalysis searchKey !inStartSymbol ?let startSymbolIndex ?*]
  s += "\\startSymbol{" + escapeForTex (!inStartSymbol) + "}{" + startSymbolIndex + "}\n\n"
  s += "\\nonTerminalSummaryStart "
  for nonterminal in inNonTerminalMapForGrammarAnalysis
    do s += "\\nonTerminalSummary{" + escapeForTex (!nonterminal.lkey) + "}{" + nonterminal.mNonTerminalIndex + "}"
    between s += "\\nonTerminalSummarySeparator "
  end
  s += "\\nonTerminalSummaryEnd "
  for nonterminal in inNonTerminalMapForGrammarAnalysis do
    s += "\\nonTerminalSection{" + escapeForTex (!nonterminal.lkey) + "}{" + nonterminal.mNonTerminalIndex + "}\n\n"
    for syntaxComponent in inSyntaxComponentListForGrammarAnalysis do
      for productionRule in syntaxComponent.mProductionRulesList do
        if productionRule.mLeftNonterminalSymbol.string == nonterminal.lkey then
          if [productionRule.mInstructionList displayVertically] then
            [productionRule displayRuleVertically !syntaxComponent.mSyntaxComponentName.string !?s]
          else
            [productionRule displayRule !syntaxComponent.mSyntaxComponentName.string !?s]
          end
        end
      end
    end
  end
  [s writeToFileWhenDifferentContents !texFilePath ?*]
}

//------------------------------------------------------------------------------------------------

method @productionRuleListForGrammarAnalysis.@element displayRule
  ?let @string inSyntaxComponentName
  ?!@string ioGeneratedCode
{
  var @string currentNode = "P0start"
  var @rowList rowArray = @[@(@[@(currentNode, "[firstPoint] ()")])]
  var @string arrows = ""
  var @string arrowStyle = "--"
  var @uint column = 1
  var @uint unusedMaxUsedRowIndex = 0 // Unused
  for (instruction) in self.mInstructionList do
    [instruction tikzNodeForSyntaxInstruction
      !?rowArray
      !fromRow:0
      !?column:column
      !?node:currentNode
      !?arrowShape:arrowStyle
      !?arrows:arrows
      !?unusedMaxUsedRowIndex
      !debug:false
    ]
  end
//--- Add a final arrow
  [!?rowArray appendRow !nodeDefinition:"[lastPoint] ()" !row:0 !column:column ?nodeName:let lastNodeName]
  arrows += "  \\draw[->] (" + currentNode + ") -- (" + lastNodeName + ") ;\n"
//--- Write tex file
  let loc = self.mLeftNonterminalSymbol.location
  ioGeneratedCode += "\\ruleSubsection{"
    + escapeForTex (!inSyntaxComponentName)
    + "}{"
    + escapeForTex (![[[loc file] lastPathComponent] stringByDeletingPathExtension])
    + "}{" + escapeForTex (![loc startLine])
    + "}\n\n"
    + "\\begin{tikzpicture}\n"
    + "  \\matrix[column sep=\\ruleMatrixColumnSeparation, row sep=\\ruleMatrixRowSeparation] {\n"
  for > (columns) in rowArray do
    ioGeneratedCode += "    "
    for column in columns do
      if column.mValue0 == "" then
        ioGeneratedCode += "& "
      else
        ioGeneratedCode += "\\node (" + column.mValue0 + ") " + column.mValue1 + "; & "
      end
    end
    ioGeneratedCode += "\\\\\n"
  end
  ioGeneratedCode += "  };\n"
//--- Arrows
  ioGeneratedCode += arrows
  ioGeneratedCode += "\\end{tikzpicture}\n\n"
}

//------------------------------------------------------------------------------------------------

method @productionRuleListForGrammarAnalysis.@element displayRuleVertically
  ?let @string inSyntaxComponentName
  ?!@string ioGeneratedCode
{
  var @string currentNode = "P0start"
  var @rowList rowArray = @()
  for * in 1 ..< [self.mInstructionList count] do
    rowArray += !@[@("", "")]
  end
  rowArray += !@[@(currentNode, "[firstPoint] ()")]
  var @string arrows = ""
  var @string arrowStyle = "--"
  var @uint unusedMaxUsedRowIndex = 0 // Unused
  var row = [self.mInstructionList count]
  for (instruction) in self.mInstructionList do
    row -= 1
    var @uint column = 1
    [instruction tikzNodeForSyntaxInstruction
      !?rowArray
      !fromRow:row
      !?column:column
      !?node:currentNode
      !?arrowShape:arrowStyle
      !?arrows:arrows
      !?unusedMaxUsedRowIndex
      !debug:false
    ]
  end
//--- Add a final arrow
  [!?rowArray appendRow !nodeDefinition:"[lastPoint] ()" !row:row !column:2 ?nodeName:let lastNodeName]
  arrows += "  \\draw[->] (" + currentNode + ") -- (" + lastNodeName + ") ;\n"
//--- Write tex file
  let loc = self.mLeftNonterminalSymbol.location
  ioGeneratedCode += "\\ruleSubsection{"
    + escapeForTex (!inSyntaxComponentName)
    + "}{"
    + escapeForTex (![[[loc file] lastPathComponent] stringByDeletingPathExtension])
    + "}{" + escapeForTex (![loc startLine])
    + "}\n\n"
    + "\\begin{tikzpicture}\n"
    + "  \\matrix[column sep=\\ruleMatrixColumnSeparation, row sep=\\ruleMatrixRowSeparation] {\n"
  for > (columns) in rowArray do
    ioGeneratedCode += "    "
    for column in columns do
      if column.mValue0 == "" then
        ioGeneratedCode += "& "
      else
        ioGeneratedCode += "\\node (" + column.mValue0 + ") " + column.mValue1 + "; & "
      end
    end
    ioGeneratedCode += "\\\\\n"
  end
  ioGeneratedCode += "  };\n"
//--- Arrows
  ioGeneratedCode += arrows
  ioGeneratedCode += "\\end{tikzpicture}\n\n"
}

//------------------------------------------------------------------------------------------------
//! tikzNodeForSyntaxInstruction
//------------------------------------------------------------------------------------------------

method @syntaxInstructionListForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint ioMaxUsedRowIndex
  ?debug:let @bool inDebug
{
  if [self count] == 0 then
    [!?ioRowList appendRow
      !nodeDefinition:"[point] ()"
      !row:inRow
      !column:ioColumn
      ?nodeName:let nodeName
    ]
    ioArrows += "  \\draw (" + ioCurrentNode + ") " + ioArrowShape + " (" + nodeName + ") ;\n"
    ioCurrentNode = nodeName
    ioArrowShape = "--"
    ioColumn += 1
  else
    for (instruction) in self do
      [instruction tikzNodeForSyntaxInstruction
        !?ioRowList
        !fromRow:inRow
        !?column:ioColumn
        !?node:ioCurrentNode
        !?arrowShape:ioArrowShape
        !?arrows:ioArrows
        !?ioMaxUsedRowIndex
        !debug:inDebug
      ]
    end
  end
}

//------------------------------------------------------------------------------------------------

list @rowList {
  public let @2stringlist columns // Node name, node definition
}

//------------------------------------------------------------------------------------------------

setter @rowList appendRow
  ?nodeDefinition:let @string inNodeDefinition
  ?row:let @uint inRow
  ?column:let @uint inColumn
  !nodeName:@string outNodeName
{
//--- Add rows ?
  let length = [self count]
  if length <= inRow then
    for * in length ... inRow do
      self += !@()
    end
  end
//--- Get row
  var cols = [self columnsAtIndex !inRow]
//--- add column pads in row
  if [cols count] <= inColumn then
    for * in [cols count] ... inColumn do
      cols += !"" !""
    end
  end
//--- Add node
  outNodeName = "p" + inRow + "-" + [cols count]
  cols += !outNodeName !inNodeDefinition
//--- Set new row
  [!?self setColumnsAtIndex !cols !inRow]
}

//------------------------------------------------------------------------------------------------

abstract method @abstractSyntaxInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint ioMaxUsedRowIndex
  ?debug:let @bool inDebug

//------------------------------------------------------------------------------------------------

override method @nonTerminalInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint unused ioMaxUsedRowIndex
  ?debug:let @bool unused inDebug
{
  let nodeDefinition = "[nonterminal] {\\nonTerminalSymbol{" + escapeForTex (!self.mNonterminalSymbolName)
    + "}{" + self.mNonterminalSymbolIndex + "}}"
  [!?ioRowList appendRow
    !nodeDefinition:nodeDefinition
    !row:inRow
    !column:ioColumn
    ?nodeName:let nodeName
  ]
  ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + nodeName + ") ;\n"
  ioCurrentNode = nodeName
  ioArrowShape = "--"
  ioColumn += 1
}

//------------------------------------------------------------------------------------------------

override method @selectInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint ioMaxUsedRowIndex
  ?debug:let @bool inDebug
{
//--- Trace ?
  if inDebug then
    [!?ioRowList appendRow
      !nodeDefinition:"[nonterminal] {SS" + [self.mSelectBranchList count] + "}"
      !row:inRow
      !column:ioColumn
      ?nodeName:let markerStartNodeName
    ]
    ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + markerStartNodeName + ") ;\n"
    ioCurrentNode = markerStartNodeName
    ioArrowShape = "--"
    ioColumn += 1
  end
//--- Enter start point
  [!?ioRowList appendRow !nodeDefinition:"[point] ()" !row:inRow !column:ioColumn ?nodeName:let startNodeName]
  ioColumn += 1
//--- Enter branch zero
  var branches = self.mSelectBranchList
  [!?branches popFirst ?let @syntaxInstructionListForGrammarAnalysis brancheZero]
  var branchZeroColumn = ioColumn
  var maxUsedRowIndex = inRow
  [brancheZero tikzNodeForSyntaxInstruction
    !?ioRowList
    !fromRow:inRow
    !?column:branchZeroColumn
    !?node:ioCurrentNode
    !?arrowShape:ioArrowShape
    !?arrows:ioArrows
    !?maxUsedRowIndex
    !debug:inDebug
  ]
  var endColumn = branchZeroColumn
//--- Enter following branches
  var @stringlist endingNodes = @()
  for branch in branches do
    maxUsedRowIndex += 1
    var branchColumn = ioColumn
    var currentNode = startNodeName
    var arrowStyle = "|-"
    [branch.mSyntaxInstructionList tikzNodeForSyntaxInstruction
      !?ioRowList
      !fromRow:maxUsedRowIndex
      !?column:branchColumn
      !?node:currentNode
      !?arrowShape:arrowStyle
      !?arrows:ioArrows
      !?maxUsedRowIndex
      !debug:inDebug
    ]
    endingNodes += !currentNode
    if endColumn < branchColumn then
      endColumn = branchColumn
    end
  end
  ioColumn = endColumn
  if ioMaxUsedRowIndex < maxUsedRowIndex then
    ioMaxUsedRowIndex = maxUsedRowIndex
  end
//--- Enter end point
  [!?ioRowList appendRow !nodeDefinition:"[point] ()" !row:inRow !column:ioColumn ?nodeName:let endNodeName]
  ioColumn += 1
  ioArrowShape = "--"
  ioArrows += "  \\draw (" + ioCurrentNode + ") " + ioArrowShape + " (" + endNodeName + ") ;\n"
  ioCurrentNode = endNodeName
//--- Add ending nodes
  for (node) in endingNodes do
    ioArrows += "  \\draw[->] (" + node + ") -| (" + endNodeName + ") ;\n"
  end
//--- Trace ?
  if inDebug then
    [!?ioRowList appendRow
      !nodeDefinition:"[nonterminal] {SE" + [self.mSelectBranchList count] + "}"
      !row:inRow
      !column:ioColumn
      ?nodeName:let markerEndNodeName
    ]
    ioColumn += 1
    ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + markerEndNodeName + ") ;\n"
    ioCurrentNode = markerEndNodeName
  end
}

//------------------------------------------------------------------------------------------------

override method @repeatInstructionForGrammarAnalysis tikzNodeForSyntaxInstruction
  ?!@rowList ioRowList
  ?fromRow:let @uint inRow
  ?!column:@uint ioColumn
  ?!node: @string ioCurrentNode
  ?!arrowShape: @string ioArrowShape
  ?!arrows:@string ioArrows
  ?!@uint ioMaxUsedRowIndex
  ?debug:let @bool inDebug
{
//--- Trace ?
  if inDebug then
    [!?ioRowList appendRow
      !nodeDefinition:"[nonterminal] {RS" + [self.mRepeatBranchList count] + "}"
      !row:inRow
      !column:ioColumn
      ?nodeName:let markerStartNodeName
    ]
    ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + markerStartNodeName + ") ;\n"
    ioCurrentNode = markerStartNodeName
    ioArrowShape = "--"
    ioColumn += 1
  end
//--- Enter return point
  [!?ioRowList appendRow !nodeDefinition:"[point] ()" !row:inRow !column:ioColumn ?nodeName:let returnNodeName]
  ioColumn += 1
//--- Enter branch zero
  var branches = self.mRepeatBranchList
  [!?branches popFirst ?let @syntaxInstructionListForGrammarAnalysis brancheZero]
  var maxUsedRowIndex = inRow
  [brancheZero tikzNodeForSyntaxInstruction
    !?ioRowList
    !fromRow:inRow
    !?column:ioColumn
    !?node:ioCurrentNode
    !?arrowShape:ioArrowShape
    !?arrows:ioArrows
    !?maxUsedRowIndex
    !debug:inDebug
  ]
  var endColumn = ioColumn
//--- Enter start point
  [!?ioRowList appendRow !nodeDefinition:"[point] ()" !row:inRow !column:ioColumn ?nodeName:let startNodeName]
  ioColumn += 1
//--- Enter following branches; particular case: one empty branch
  var oneEmptyBranch = [branches count] == 1
  if oneEmptyBranch then
    [branches first ?let firstBranch]
    oneEmptyBranch = [firstBranch count] == 0
  end
//--- Enter branches
  var @stringlist endingNodes = @()
  if oneEmptyBranch then
    endingNodes += !startNodeName
  else
    var nextBranchUsedRowIndex = inRow
    for branch in branches do
      nextBranchUsedRowIndex += 1
      var branchColumn = ioColumn
      var currentNode = startNodeName
      var arrowStyle = "|-"
      [branch.mSyntaxInstructionList tikzNodeForSyntaxInstruction
        !?ioRowList
        !fromRow:nextBranchUsedRowIndex
        !?column:branchColumn
        !?node:currentNode
        !?arrowShape:arrowStyle
        !?arrows:ioArrows
        !?nextBranchUsedRowIndex
        !debug:inDebug
      ]
      endingNodes += !currentNode
      if endColumn < branchColumn then
        endColumn = branchColumn
      end
    end
    ioColumn = endColumn
  //--- Compute row of return node
    ioMaxUsedRowIndex = nextBranchUsedRowIndex
  end
  if ioMaxUsedRowIndex < maxUsedRowIndex then
    ioMaxUsedRowIndex = maxUsedRowIndex
  end
  ioMaxUsedRowIndex += 1
//--- Enter upper return node, and draw back arrow
  [!?ioRowList appendRow !nodeDefinition:"[point] ()" !row:ioMaxUsedRowIndex !column:ioColumn ?nodeName:let returnUpperNodeName]
  ioColumn += 1
  ioArrows += "  \\draw[->] (" + returnUpperNodeName + ") -| (" + returnNodeName + ") ;\n"
//--- Add ending arrows
  for (node) in endingNodes do
    ioArrows += "  \\draw[->] (" + node + ") -| (" + returnUpperNodeName + ") ;\n"
  end
//--- Trace ?
  if inDebug then
    [!?ioRowList appendRow
      !nodeDefinition:"[nonterminal] {RE" + [self.mRepeatBranchList count] + "}"
      !row:inRow
      !column:ioColumn
      ?nodeName:let markerEndNodeName
    ]
    ioColumn += 1
    ioArrows += "  \\draw[->] (" + ioCurrentNode + ") " + ioArrowShape + " (" + markerEndNodeName + ") ;\n"
    ioCurrentNode = markerEndNodeName
  end
}

//------------------------------------------------------------------------------------------------
//! isLinear
//------------------------------------------------------------------------------------------------

getter @syntaxInstructionListForGrammarAnalysis displayVertically -> @bool {
  result = [self count] > 4
  for (instruction) in self while result do
    result = [instruction isLinear]
  end
}

//------------------------------------------------------------------------------------------------

abstract getter @abstractSyntaxInstructionForGrammarAnalysis isLinear -> @bool

//------------------------------------------------------------------------------------------------

override getter @nonTerminalInstructionForGrammarAnalysis isLinear -> @bool {
  result = true
}


//------------------------------------------------------------------------------------------------

override getter @selectInstructionForGrammarAnalysis isLinear -> @bool {
  result = false
}

//------------------------------------------------------------------------------------------------

override getter @repeatInstructionForGrammarAnalysis isLinear -> @bool {
  result = false
}

//------------------------------------------------------------------------------------------------

