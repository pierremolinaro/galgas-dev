//————————————————————————————————————————————————————————————————————————————————————————————————
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//————————————————————————————————————————————————————————————————————————————————————————————————
//! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  //······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST ioDeclarations
                      !@semanticExpressionAST outExpression {
    <optional_type_ggs3> ?let @lstring typeName
    $.$
    $init$
    select
      ${$
      <output_expression_list_ggs3> !?ioDeclarations ?let expressionList
      let endOfExpression = @location.here
      $}$
      outExpression = @initializerCallAST {
        !typeName
        !expressionList
        !endOfExpression
      }
    or
      <output_expression_list_ggs34> !?ioDeclarations ?let expressionList
      let endOfExpression = @location.here
      outExpression = @initializerCallAST {
        !typeName
        !expressionList
        !endOfExpression
      }
    end
  }

  //······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                      !@semanticExpressionAST outExpression {
    <optional_type_ggs3> ?let @lstring typeName
    $.$
    $init$
    let endOfExpression = @location.here
    outExpression = @initializerCallAST {
      !typeName
      !()
      !endOfExpression
    }
  }

  //······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                      !@semanticExpressionAST outExpression {
    $($
    $)$
    let endOfExpression = @location.here
    outExpression = @initializerCallAST {
      !["" here]
      !()
      !endOfExpression
    }
  }

  //······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST ioDeclarations
                      !@semanticExpressionAST outExpression {
    $@type$ ?let typeName indexing typeReferenceInConstructor
    select
      ${$
      <output_expression_list_ggs3> !?ioDeclarations ?let expressionList
      let endOfExpression = @location.here
      $}$
      outExpression = @initializerCallAST (typeName, expressionList, endOfExpression)
    or
      <output_expression_list_ggs34> !?ioDeclarations ?let expressionList
      let endOfExpression = @location.here
      outExpression = @initializerCallAST (typeName, expressionList, endOfExpression)
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  //······························································································
  //  Primary beginning with a type
  //······························································································

  rule <primary> ?!@galgasDeclarationAST ioDeclarations
                 !@semanticExpressionAST outExpression {
    <simple_type_definition> !?ioDeclarations ?let typeName
    select
      <primary_beginning_by_type> !typeName !?ioDeclarations ?outExpression
    or
      $.$
      select
        $identifier$ ?let @lstring classFuncName
        <primary_beginning_by_type_dot_name> !typeName !classFuncName !?ioDeclarations ?outExpression
      or
        <simple_type_followed_by_dot_type> !typeName !?ioDeclarations ?outExpression
      end
    end
  }
  
  //······························································································

  rule <simple_type_followed_by_dot_type> ?let @lstring inTypeName 
                                          ?!@galgasDeclarationAST ioDeclarations
                                          !@semanticExpressionAST outExpression {
  //--- Type name
    <simple_type_definition> !?ioDeclarations ?let t
    let typeName = makeEmbeddedTypeLName (!outer: inTypeName !inner: t)
    select
      <primary_beginning_by_type> !typeName !?ioDeclarations ?outExpression
    or
      $.$
      select
        $identifier$ ?let @lstring classFuncName
        <primary_beginning_by_type_dot_name> !typeName !classFuncName !?ioDeclarations ?outExpression
      or
        <simple_type_followed_by_dot_type> !typeName !?ioDeclarations ?outExpression
      end
    end
  }
  
  //······························································································
  //  Primary beginning with .(
  //······························································································

  rule <primary> ?!@galgasDeclarationAST ioDeclarations
                 !@semanticExpressionAST outExpression {
    $.($
    let initLocation = @location.here
    <output_expression_list> !?ioDeclarations ?let expressionList
    let endOfExpression = @location.here
    $)$
    outExpression = @initializerCallAST {
      !.init ("", initLocation)
      !expressionList
      !endOfExpression
    }
  }
  
  //······························································································
  //  Primary beginning with a dot
  //······························································································

  rule <primary> ?!@galgasDeclarationAST ioDeclarations
                 !@semanticExpressionAST outExpression {
    $.$
    <primary_beginning_by_dot> !?ioDeclarations ?outExpression
  }
  
  //······························································································

  rule <primary_beginning_by_type> ?let @lstring inTypeName
                                   ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticExpressionAST outExpression {
    $($
    <output_expression_list> !?ioDeclarations ?let expressionList
    let endOfExpression = @location.here
    $)$
    outExpression = @initializerCallAST {
      !inTypeName
      !expressionList
      !endOfExpression
    }
  }

  //······························································································

  rule <primary> ?!@galgasDeclarationAST unused ioDeclarations
                 !@semanticExpressionAST outExpression {
    $($
    let endOfExpression = @location.here
    $)$
    outExpression = @initializerCallAST {
      !.init ("", endOfExpression)
      !()
      !endOfExpression
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @initializerCallAST : @semanticExpressionAST {
  private let @lstring mTypeName
  private let @actualOutputArgumentList mExpressions
  private let @location mEndOfExpressions

  //······························································································

  override method enterExpressionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    if self.mTypeName.string != "" then
      [!?ioTypeMap makeEntry !self.mTypeName ?*]
    end
    [self.mExpressions enterInSemanticContext !?ioTypeMap]
  }

  //······························································································

  override method analyzeSemanticExpression
            ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
            ?inferenceType: let @unifiedTypeMapEntry inType
            ?let @analysisContext inAnalysisContext
            ?!@unifiedTypeMap ioTypeMap
            ?!@localVarManager ioVariableMap
            !@semanticExpressionForGeneration outExpression {
    analyzeInitializerInvocation (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inType
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      !self.mTypeName
      !self.mExpressions
      !self.mEndOfExpressions
      ?let @unifiedTypeMapEntry instanciedType
      ?let @lstring initializerName
      ?let @semanticExpressionListForGeneration constructorEffectiveParameterList
    )
  //--- Usefull entity graph
    let typeUsefulnessName = typeNameForUsefulEntitiesGraph ([instanciedType definition].typeName)
    [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !typeUsefulnessName]
  //---
    outExpression = @initializerCallForGeneration {
      !instanciedType
      !self.mEndOfExpressions
      !initializerName.string
      !constructorEffectiveParameterList
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

private proc analyzeInitializerInvocation ?let @lstring inUsefulnessCallerEntityName
                      ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                      ?let @unifiedTypeMapEntry inType
                      ?let @analysisContext inAnalysisContext
                      ?!@unifiedTypeMap ioTypeMap
                      ?!@localVarManager ioVariableMap
                      ?let @lstring inTypeName
                      ?let @actualOutputArgumentList inInvocationArguments
                      ?let @location inEndOfExpressions
                      !@unifiedTypeMapEntry outInstanciedType
                      !@lstring outInitializerName
                      !@semanticExpressionListForGeneration outConstructorEffectiveParameterList {
  outInstanciedType = inType
  if inTypeName.string != "" then
    outInstanciedType = [ioTypeMap typeMapEntryForLKey !inTypeName]
  end
  if [outInstanciedType isNull] then
    error inTypeName
    : "cannot infer type"
    : outInstanciedType, outConstructorEffectiveParameterList, outInitializerName
  else
    let instanciedTypeDefinition = [outInstanciedType definition]
    if not instanciedTypeDefinition.isConcrete then
      error inTypeName
      : "cannot instanciate an abstract class"
      : outInstanciedType, outConstructorEffectiveParameterList, outInitializerName
    else
    //--- Usefull entity graph
      let nameForUsefulness = initializerNameForUsefulEntitiesGraph (
        !instanciedTypeDefinition.typeName
        ![inInvocationArguments initializerSignature]
      )
      [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !nameForUsefulness]
    //--- Search initializer
      outInitializerName = .init {![inInvocationArguments initializerSignature] !inEndOfExpressions}
      let initializerMap = instanciedTypeDefinition.initializerMap
      let @functionSignature formalSignature
      if [initializerMap hasKey !outInitializerName] then
        [initializerMap searchKey !outInitializerName ?formalSignature]
      else
        var s = "@" + instanciedTypeDefinition.typeName + ".init("
        for formalArg in inInvocationArguments
        do
          s += "?"
          if formalArg.mActualSelector.string != "" then
            s += formalArg.mActualSelector.string + ":"
          end
        between
          s += ","
        end
        s += ")"
        error outInitializerName :
        "the " + s + " initializer is not declared"
        : formalSignature
      end
    //--- Analysis arguments
      outConstructorEffectiveParameterList = ()
      for effectiveParameter in inInvocationArguments,
          formalArg in formalSignature do
        [effectiveParameter.mExpression analyzeSemanticExpression
          !usefulnessCallerEntityName: inUsefulnessCallerEntityName
          !?ioUsefulEntitiesGraph
          !inferenceType: formalArg.mFormalArgumentType
          !inAnalysisContext
          !?ioTypeMap
          !?ioVariableMap
          ?@semanticExpressionForGeneration exp
        ]
        checkAssignmentTypeWithImplicitGetterCall (
          !formalArg.mFormalArgumentType
          !exp.mResultType
          !effectiveParameter.mEndOfExpressionLocation
          !?exp
        )
        outConstructorEffectiveParameterList += !exp
        if formalArg.mFormalSelector.string != effectiveParameter.mActualSelector.string then
          let @string s = "!" + if formalArg.mFormalSelector.string != ""
            then formalArg.mFormalSelector.string + ":"
            else ""
          end
          error effectiveParameter.mActualSelector
          : "the selector should be '" + s + "'" fixit { replace s }
        end
      end
    end
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

class @initializerCallForGeneration : @semanticExpressionForGeneration {
  private let @string initializerName
  private let @semanticExpressionListForGeneration mEffectiveParameterList

  //······························································································

  override method generateExpression ?!@string ioGeneratedCode
                                    ?!@stringset ioInclusionSet
                                    ?!@uint ioTemporaryVariableIndex
                                    ?!@stringset ioUnusedVariableCppNameSet
                                    !@string outCppExpression {
    [self.mResultType addHeaderFileName !?ioInclusionSet]
    var @stringlist parameterList = ()
    for (mExpression) in self.mEffectiveParameterList do
      [mExpression generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let @string parameter
      ]
      parameterList += !parameter
    end
    outCppExpression = "GGS_"  + [self.mResultType identifierRepresentation]
                     + "::" + [self.initializerName identifierRepresentation]
                     + " ("
    for (mValue) in parameterList do
      outCppExpression += mValue + ", "
    end
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    outCppExpression += compilerCppName ()
    outCppExpression += " COMMA_HERE)"
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
