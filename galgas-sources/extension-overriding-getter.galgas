#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingExtensionGetterAST : @semanticDeclarationAST {
  private let @bool requiresSelfForAccessingProperty %selector
  private let @lstring mTypeName
  private let @lstring mOverridingExtensionGetterName
  private let @formalInputParameterListAST mOverridingExtensionGetterFormalInputParameterList
  private let @lstring mOverridingExtensionGetterReturnedTypeName
  private let @lstring mOverridingExtensionGetterReturnedVariableName
  private let @semanticInstructionListAST mOverridingExtensionGetterInstructionList
  private let @location mEndOfReaderLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $getter$
    $@type$ ?let @lstring className indexing typeReferenceOverrideExtensionGetter
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionGetterDefinition
    <formal_input_parameter_list_ggs3> ?let formalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    let @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = .new {!"result" !.here}
    end
    ${$
    <semantic_instruction_list_ggs3> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfInstructionList = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionGetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !className
      !mMethodName
      !formalInputParameterList
      !mReturnedTypeName
      !resultVariableName
      !routineInstructionList
      !endOfInstructionList
    }
  }

  #·····················································································································

  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $getter$
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionGetterDefinition
    <formal_input_parameter_list_ggs3> ?let formalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    let @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = .new {!"result" !.here}
    end
    ${$
    <semantic_instruction_list_ggs3> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfInstructionList = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionGetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !inClassName
      !mMethodName
      !formalInputParameterList
      !mReturnedTypeName
      !resultVariableName
      !routineInstructionList
      !endOfInstructionList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $func$
    $@type$ ?let @lstring className indexing typeReferenceOverrideExtensionGetter
    $.$
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionGetterDefinition
    <formal_input_parameter_list> ?let formalInputParameterList
    $->$
    <type_definition> !?ioDeclarations ?let returnedTypeName
    let @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = .new {!"result" !.here}
    end
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let @location endOfInstructionList = .here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionGetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !className
      !mMethodName
      !formalInputParameterList
      !returnedTypeName
      !resultVariableName
      !routineInstructionList
      !endOfInstructionList
    }
  }

  #·····················································································································

  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $func$
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionGetterDefinition
    <formal_input_parameter_list> ?let formalInputParameterList
    $->$
    <type_definition> !?ioDeclarations ?let returnedTypeName
    let @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = .new {!"result" !.here}
    end
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let @location endOfInstructionList = .here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionGetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !inClassName
      !mMethodName
      !formalInputParameterList
      !returnedTypeName
      !resultVariableName
      !routineInstructionList
      !endOfInstructionList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
#---
  if not [ioExtensionGetterMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionGetterMapForBuildingContext insertKey
      !self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionGetterMapForBuildingContext error message searchKey  do
    [!?mExtensionGetterMapForType insertKey
      !self.mOverridingExtensionGetterName
      !self.mOverridingExtensionGetterReturnedTypeName
      !self.mOverridingExtensionGetterFormalInputParameterList
      !.isVirtualOverriding
    ]
   end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingExtensionGetterAST keyRepresentation -> @string {
  result = "overriding extension getter @" + self.mTypeName + " " + self.mOverridingExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext unused ioSemanticContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = getterNameForUsefulEntitiesGraph (!self.mTypeName !self.mOverridingExtensionGetterName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap searchKey !self.mTypeName]
#--- Check self type is a class
  if not [[selfType definition].mTypeKindEnum isClassType] then
    error self.mOverridingExtensionGetterName: "cannot declare a extension getter: '@" + [selfType definition].mTypeName.string + "' is not a class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMapEntry superType = [selfType definition].mSuperType
  var @functionSignature inheritedSignature = {}
  var inheritedReturnType = @unifiedTypeMapEntry.null{}
  var @location inheritedDeclarationLocation = @location.here
  loop ([ioTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType definition].mGetterMap hasKey !self.mOverridingExtensionGetterName.string] then
      [[superType definition].mGetterMap searchKey
        !self.mOverridingExtensionGetterName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?inheritedReturnType
        ?let @methodQualifier qualifier
        ?*
      ]
      if qualifier <= @methodQualifier.isBasicFinal then
        baseTypeName = [superType definition].mTypeName.string
      end
    end
    superType = [superType definition].mSuperType
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionGetterName: "this getter is not declared by a super class"
  end
#--- Analyze instruction list
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !"this"
    !selfType: .available {!type: selfType !mutable: false !mutableproperties: true}
    !"object."
    !requiresSelfForAccessingProperty: self.requiresSelfForAccessingProperty
  }
  analyzeFunctionBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !?ioTypeMap
    !self.mOverridingExtensionGetterFormalInputParameterList
    !if [[selfType definition].mTypeKindEnum isClassType] | ([selfType definition].mTypeKindEnum == .structType)
       then [selfType definition].mAllTypedPropertyList
       else {}
     end
    !"this->"
    !self.mOverridingExtensionGetterInstructionList
    !self.mOverridingExtensionGetterReturnedVariableName
    !self.mOverridingExtensionGetterReturnedTypeName
    !self.mEndOfReaderLocation
    ?let @formalInputParameterListForGeneration formalParameterListForGeneration
    ?let @unifiedTypeMapEntry returnType
    ?let @string returnVariableCppName
    ?let @semanticInstructionListForGeneration semanticInstructionListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkGetterSignatures (
      !formalParameterListForGeneration
      !returnType
      !self.mOverridingExtensionGetterName.location
      !inheritedSignature
      !inheritedReturnType
      !inheritedDeclarationLocation
    )
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"override extension getter " + self.mOverridingExtensionGetterName
    !@overrideExtensionGetterForGeneration.new {
      !false # Do not generate Cpp header file
      !"getter-" + [self.mTypeName fileNameRepresentation] + "-" + [self.mOverridingExtensionGetterName fileNameRepresentation]
      !selfType
      !baseTypeName
      !self.mOverridingExtensionGetterName.string
      !returnType
      !returnVariableCppName
      !formalParameterListForGeneration
      ![selfType definition].mAllTypedPropertyList
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  ioOverridingExtensionGetterListMap +=
    !self.mTypeName.string
    !self.mOverridingExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overrideExtensionGetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string mBaseTypeName
  private let @string mOverridingExtensionGetterName
  private let @unifiedTypeMapEntry mResultType
  private let @string mResultVarCppName
  private let @formalInputParameterListForGeneration mOverridingExtensionGetterFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @overrideExtensionGetterForGeneration headerKind ->@headerKind {
  result = @headerKind.noHeader
}

#·······················································································································

override method @overrideExtensionGetterForGeneration appendSpecificImplementation
                                                              ?let @unifiedTypeMap unused inTypeMap
                                                              ?!@stringset ioInclusionSet
                                                              !@string outImplementation {
  ioInclusionSet += !"class-" + [[self.mReceiverType definition].mTypeName.string fileNameRepresentation]
  generateExtensionGetterNew (
    !"cPtr_" + [[self.mReceiverType definition].mTypeName.string identifierRepresentation] + "::getter_" + [self.mOverridingExtensionGetterName identifierRepresentation]
    !?ioInclusionSet
    !self.mOverridingExtensionGetterFormalParameterList
    !self.mSemanticInstructionListForGeneration
    !"C_Compiler"
    !self.mResultType
    !self.mResultVarCppName
    ?let @string extensionGetterCode
  )
  outImplementation = [filewrapper semanticComponentGenerationTemplate.overridingExtensionGetterImplementation
    ![self.mReceiverType definition].mTypeName.string
    !self.mOverridingExtensionGetterName
    !extensionGetterCode
    !self.mResultType
  ] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

