#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                                                                                                *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @overridingExtensionGetterAST : @semanticDeclarationAST {
  @lstring mTypeName
  @lstring mOverridingExtensionGetterName
  @formalInputParameterListAST mOverridingExtensionGetterFormalInputParameterList
  @lstring mOverridingExtensionGetterReturnedTypeName
  @lstring mOverridingExtensionGetterReturnedVariableName
  @semanticInstructionListAST mOverridingExtensionGetterInstructionList
  @location mEndOfReaderLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                                                                                             *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $getter$
    $@type$ ?let @lstring className indexing typeReferenceOverrideExtensionGetter
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionGetterDefinition
    <formal_input_parameter_list> ?let formalInputParameterList
    $->$
    $@type$ ?var  @lstring mReturnedTypeName
    @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = .new {!"result" !.here}
    end
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfInstructionList = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionGetterAST.new {
      !false # Is not predefined
      !className
      !mMethodName
      !formalInputParameterList
      !mReturnedTypeName
      !resultVariableName
      !routineInstructionList
      !endOfInstructionList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingExtensionGetterAST keyRepresentation -> @string outString {
  outString = "overriding extension getter @" + self.mTypeName + " " + self.mOverridingExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                                                                                                   *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = getterNameForUsefulEntitiesGraph (!self.mTypeName !self.mOverridingExtensionGetterName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-proxy selfType = @unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !self.mTypeName}
#--- Check self type is a class
  if not [[selfType mTypeKindEnum] isClassType] then
    error self.mOverridingExtensionGetterName: "cannot declare a extension getter: '@" + [selfType key] + "' is not a class"
  end
#--- Find base type name
  @string baseTypeName = ""
  @unifiedTypeMap-proxy superType = [selfType mSuperType]
  @functionSignature inheritedSignature = {}
  var inheritedReturnType =@unifiedTypeMap-proxy.null{}
  @location inheritedDeclarationLocation = @location.here
  loop( [inSemanticContext.mTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mGetterMap] hasKey ![self.mOverridingExtensionGetterName string]] then
      [[superType mGetterMap] searchKey
        !self.mOverridingExtensionGetterName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?inheritedReturnType
        ?let @methodQualifier qualifier
        ?*
      ]
      if qualifier <= @methodQualifier. isBasicFinal then
        baseTypeName = [superType key]
      end
    end
    superType = [superType mSuperType]
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionGetterName:"this getter is not declared by a super class"
  end
#--- Analyze instruction list
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !"object"
    !@unifiedTypeMap-proxy.null
     !"object."
 }
  analyzeFunctionBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !self.mOverridingExtensionGetterFormalInputParameterList
    !if [[selfType mTypeKindEnum] isClassType] | ([selfType mTypeKindEnum] == @typeKindEnum. structType)
       then [selfType mAllTypedAttributeList]
       else {}
     end
    !"object->"
    !self.mOverridingExtensionGetterInstructionList
    !self.mOverridingExtensionGetterReturnedVariableName
    !self.mOverridingExtensionGetterReturnedTypeName
    !self.mEndOfReaderLocation
    ?let @formalInputParameterListForGeneration formalParameterListForGeneration
    ?let @unifiedTypeMap-proxy returnType
    ?let @string returnVariableCppName
    ?let @semanticInstructionListForGeneration semanticInstructionListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkGetterSignatures (
      !formalParameterListForGeneration
      !returnType
      ![self.mOverridingExtensionGetterName location]
      !inheritedSignature
      !inheritedReturnType
      !inheritedDeclarationLocation
    )
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"override extension getter " + self.mOverridingExtensionGetterName
    !@overrideExtensionGetterForGeneration.new {
      !false # Do not generate Cpp header file
      !"getter-" + [self.mTypeName fileNameRepresentation] + "-" + [self.mOverridingExtensionGetterName fileNameRepresentation]
      !selfType
      !baseTypeName
      ![self.mOverridingExtensionGetterName string]
      !returnType
      !returnVariableCppName
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionGetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  ioOverridingExtensionGetterListMap +=
    ![self.mTypeName string]
    !self.mOverridingExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @overrideExtensionGetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  @unifiedTypeMap-proxy mReceiverType
  @string mBaseTypeName
  @string mOverridingExtensionGetterName
  @unifiedTypeMap-proxy mResultType
  @string mResultVarCppName
  @formalInputParameterListForGeneration mOverridingExtensionGetterFormalParameterList
  @typedPropertyList mTypedAttributeList
  @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @overrideExtensionGetterForGeneration headerKind ->@headerKind {
  result = @headerKind.noHeader
}

#·······················································································································

override method @overrideExtensionGetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  generateExtensionGetter (
    !self.mReceiverType
    !self.mBaseTypeName
    !?ioInclusionSet
    !self.mOverridingExtensionGetterName
    !self.mOverridingExtensionGetterFormalParameterList
    !self.mSemanticInstructionListForGeneration
    !"C_Compiler"
    ![self.mResultType key]
    !self.mResultVarCppName
    ?let @string extensionReaderCode
  )
  outImplementation = [filewrapper semanticComponentGenerationTemplate.overridingExtensionGetterImplementation
    ![self.mReceiverType key]
    !self.mOverridingExtensionGetterName
    !self.mResultType
    !extensionReaderCode
  ] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

