#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @weakReferenceDeclarationAST : @semanticDeclarationAST {
  public var @lstring mClassTypeName
  public var @lstring mWeakReferenceTypeName
  public var @lstring mSuperWeakReferenceTypeName # Empty if no super class
  public var @lstringlist mClassFeatureList
  public var @propertyInCollectionListAST mPropertyList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @weakReferenceDeclarationAST keyRepresentation -> @string {
  result = "weak reference @" + self.mWeakReferenceTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mWeakReferenceTypeName !self.mWeakReferenceTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  if self.mSuperWeakReferenceTypeName.string != "" then
    [!?ioSemanticTypePrecedenceGraph addEdge
      !key
      !@lstring.new {!"@" + self.mSuperWeakReferenceTypeName !self.mSuperWeakReferenceTypeName.location}
    ]
  end
  [!?ioSemanticTypePrecedenceGraph addEdge
    !key
    !@lstring.new {!"@" + self.mClassTypeName !self.mClassTypeName.location}
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
#--- Handle super class
  var @unifiedTypeMap-entry superClassIndex
  var @bool generateHeaderInSeparateFile
  if self.mSuperWeakReferenceTypeName.string == "" then
    superClassIndex = @unifiedTypeMap-entry.null
    generateHeaderInSeparateFile = false
    for (mValue) in self.mClassFeatureList do
      if mValue.string == "generatedInSeparateFile" then
        generateHeaderInSeparateFile = true
      end
    end
  else
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mSuperWeakReferenceTypeName ?superClassIndex]
    var @typeKindEnum typeKindEnum
    var @getterMap inheritedGetterMap
    var @setterMap inheritedSetterMap
    var @instanceMethodMap inheritedMethodMap
    [ioSemanticContext.mTypeMap searchKey
      !self.mSuperWeakReferenceTypeName
      ?3*
      ?typeKindEnum
      ?5*
      ?inheritedGetterMap
      ?inheritedSetterMap
      ?inheritedMethodMap
      ?9*
      ?generateHeaderInSeparateFile
      ?4*
    ]
  #---
    if not [typeKindEnum isWeakReferenceType] then
      error self.mSuperWeakReferenceTypeName : "the @" + self.mSuperWeakReferenceTypeName + " should be a weak reference type"
    end
  end
#--- Current class Index
  [@unifiedTypeMap-entry makeEntry
     !?ioSemanticContext.mTypeMap
     !self.mWeakReferenceTypeName
     ?var @unifiedTypeMap-entry weakReferenceIndex
  ]
#--- Constructors
  var @constructorMap constructorMap = {}
  [!?constructorMap insertKey
    !@lstring.new {!"nil" !self.mWeakReferenceTypeName.location}
    !{}
    !false
    !weakReferenceIndex
  ]
#--- Add Extensions
  var @getterMap getterMap = {}
  var @setterMap setterMap = {}
  var @instanceMethodMap instanceMethodMap = {}
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mWeakReferenceTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
  for (lkey 7*) in getterMap do
    error lkey : "a weak referencev does not support extension"
  end
  for (lkey 5*) in setterMap do
    error lkey : "a weak referencev does not support extension"
  end
  for (lkey 6*) in instanceMethodMap do
    error lkey : "a weak referencev does not support extension"
  end
#--- Enter in type map
  [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mClassTypeName ?let classIndex]
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mWeakReferenceTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !superClassIndex
    !@typeKindEnum.weakReferenceType {!referenceType: classIndex}
    !false # Does not support collection value
    !{} # allTypedPropertyList
    !{} # attributeMap
    !{} # currentClassTypedPropertyList
    !constructorMap
    !{} # getterMap
    !{} # setterMap
    !{} # instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !{}
    !.isReferenceEquatable
    !{}
    !{}
    !{}
    !{}
    !{}
    !generateHeaderInSeparateFile
    !@unifiedTypeMap-entry.null # Type for enumerated element for "for" instruction
    !"nil" # Default constructor
    !"weak-reference-" + [self.mWeakReferenceTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let weakRefTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mWeakReferenceTypeName)
  [!?ioUsefulEntitiesGraph addNode !weakRefTypeNameForUsefulness !weakRefTypeNameForUsefulness]
  if self.mSuperWeakReferenceTypeName.string != "" then
    let superWeakRefNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mSuperWeakReferenceTypeName)
    [!?ioUsefulEntitiesGraph addEdge !weakRefTypeNameForUsefulness !superWeakRefNameForUsefulness]
  end
#------ Self type
  let @unifiedTypeMap-entry selfType = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mWeakReferenceTypeName}
#--- Super class type
  let superClassEntry = if self.mSuperWeakReferenceTypeName.string == ""
    then @unifiedTypeMap-entry.null
    else @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mSuperWeakReferenceTypeName}
  end
#------ Super type, and class features
# A class that has a super may not have any feature
# A class without a super class admits the 'generatedInSeparateFile' feature
  var @typedPropertyList allAttributeList
  if superClassEntry == .null then
    allAttributeList = {}
    var @bool generatedInSeparateFileFeature = false
    if [self.mClassFeatureList length] > 0 then
      for (mValue) in self.mClassFeatureList do
        if mValue.string == "generatedInSeparateFile" then
          if generatedInSeparateFileFeature then
            error mValue:"the 'generatedInSeparateFile' is already named"
          end
          generatedInSeparateFileFeature = true
        else
          error mValue:"only the 'generatedInSeparateFile' attribute is allowed here"
        end
      end
    end
  else
    allAttributeList = [superClassEntry mAllTypedPropertyList]
    if [self.mClassFeatureList length] > 0 then
      for (mValue) in self.mClassFeatureList do
        error mValue:"a class that has a super class does not accept any feature"
      end
    end
  end
#------ Enter attributes
  var @typedPropertyList typedAttributeList = {}
  var @propertyIndexMap attributeMap = {}
  for (* mPropertyTypeName mPropertyName isPublic attributeList) in self.mPropertyList do
    let t = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !mPropertyTypeName}
    var hasSelector = false
    for (mValue) in attributeList while not hasSelector do
      hasSelector = mValue.string == "selector"
    end
    typedAttributeList +=
      !t
      !mPropertyName
      !isPublic
      !hasSelector
    allAttributeList +=
      !t
      !mPropertyName
      !isPublic
      !hasSelector
    [!?attributeMap insertKey !mPropertyName !t]
  end
#------
  let @unifiedTypeMap-entry referenceClassType = @unifiedTypeMap-entry.searchKey {
    !inSemanticContext.mTypeMap
    !self.mClassTypeName
  }
  ioSemanticDeclarationListForGeneration +=
    !"weak reference " + self.mWeakReferenceTypeName
    !@weakReferenceTypeForGeneration.new {
      !selfType
      !referenceClassType
      !superClassEntry
      !allAttributeList
      !typedAttributeList
      ![selfType mGenerateHeaderInSeparateFile]
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @weakReferenceTypeForGeneration : @semanticTypeForGeneration {
  public var @unifiedTypeMap-entry mReferenceClassType
  public var @unifiedTypeMap-entry mSuperClass # Null if no super class
  public var @typedPropertyList mAllTypedPropertyList # Inherited followed by current attributes
  public var @typedPropertyList mTypedAttributeList
  public var @bool mGenerateHeaderInSeparateFile # Significant only for classes
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceTypeForGeneration appendDeclaration1
  ?!@stringset ioInclusionSet
  !@string outHeader
{
  if not [self.mSuperClass isNull] then
    [self.mSuperClass addHeaderFileName !?ioInclusionSet]
  end
  [self.mReferenceClassType addHeaderFileName !?ioInclusionSet]

  outHeader = [filewrapper typeGenerationTemplate.weakReferenceClassTypeHeader1
    ![self.mReferenceClassType identifierRepresentation]
    ![self.mSelfTypeEntry identifierRepresentation]
    !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
    ![self.mSelfTypeEntry  mDefaultConstructorName] != ""
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mSelfTypeEntry  mIsConcrete]
    ![self.mSelfTypeEntry  mConstructorMap]
    ![self.mSelfTypeEntry  mGetterMap]
    ![self.mSelfTypeEntry  mSetterMap]
    ![self.mSelfTypeEntry  mInstanceMethodMap]
    ![self.mSelfTypeEntry  mClassMethodMap]
    ![self.mSelfTypeEntry  mOptionalMethodMap]
    ![self.mSelfTypeEntry  mEnumerationDescriptor]
    ![self.mSelfTypeEntry  mHandledOperatorFlags]
    ![self.mSelfTypeEntry  mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry  mTypeForEnumeratedElement]
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @weakReferenceTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper typeGenerationTemplate.weakReferenceClassTypeSpecificImplementation
    ![self.mReferenceClassType identifierRepresentation]
    ![self.mSelfTypeEntry identifierRepresentation]
    !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
    !self.mTypedAttributeList
    !self.mAllTypedPropertyList
    ![self.mAllTypedPropertyList subListWithRange !.new {!0 ![self.mAllTypedPropertyList length] - [self.mTypedAttributeList length]}]
    ![self.mSelfTypeEntry  mDefaultConstructorName] != ""
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

