#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @fixitElementAST {
  case fixItRemove
  case fixItReplace (@semanticExpressionAST exp @location errorLocation)
  case fixItInsertAfter (@semanticExpressionAST exp @location errorLocation)
  case fixItInsertBefore (@semanticExpressionAST exp @location errorLocation)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @fixitListAST {
  public let @fixitElementAST mElement
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @errorInstructionAST : @semanticInstructionAST {
  private let @semanticExpressionAST mLocationExpression
  private let @semanticExpressionAST mMessageExpression
  private let @lstringlist mBuiltVariableList
  private let @fixitListAST mFixitListAST
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <issue_fixit> !@fixitListAST outFixitListAST {
    outFixitListAST = {}
    select
    or
      $fixit$
      ${$
      var hasFixItRemove = false
      repeat
      while
        $remove$
        if hasFixItRemove then
          warning .here : "duplicated action" fixit { remove }
        else
          outFixitListAST += !.fixItRemove
          hasFixItRemove = true
        end
      while
        $replace$
        let errorLocation = @location.here
        <expression_ggs3> ?let @semanticExpressionAST expression
        outFixitListAST += !.fixItReplace {!exp:expression !errorLocation:errorLocation}
      while
        $insert$ ; $after$
        let errorLocation = @location.here
        <expression_ggs3> ?let @semanticExpressionAST expression
        outFixitListAST += !.fixItInsertAfter {!exp:expression !errorLocation:errorLocation}
      while
        $insert$ ; $before$
        let errorLocation = @location.here
        <expression_ggs3> ?let @semanticExpressionAST expression
        outFixitListAST += !.fixItInsertBefore {!exp:expression !errorLocation:errorLocation}
      end
      $}$
    end
  }

  #·······························································································

  rule <semantic_instruction_ggs3> !@semanticInstructionAST outInstruction {
    $error$
    let instructionLocation = @location.here
    <expression_ggs3> ?let @semanticExpressionAST mReceiverExpression
    $:$
    <expression_ggs3> ?let @semanticExpressionAST mErrorExpression
    var mBuiltVariableList = @lstringlist {}
    select
    or
      $:$
      repeat
       $identifier$ ?let builtVariableName
       mBuiltVariableList += !builtVariableName
      while
        $,$
      end
    end
    <issue_fixit> ?let @fixitListAST fixitListAST
    outInstruction = @errorInstructionAST.new {
      !instructionLocation
      !mReceiverExpression
      !mErrorExpression
      !mBuiltVariableList
      !fixitListAST
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <issue_fixit> !@fixitListAST outFixitListAST {
    outFixitListAST = {}
    select
    or
      $fixit$
      $($
      var hasFixItRemove = false
      repeat
        select
          $%remove$
          if hasFixItRemove then
            warning .here : "duplicated action" fixit { remove }
          else
            outFixitListAST += !.fixItRemove
            hasFixItRemove = true
          end
        or
          $%replaceBy$
          let errorLocation = @location.here
          <expression> ?let @semanticExpressionAST expression
          outFixitListAST += !.fixItReplace {!exp:expression !errorLocation:errorLocation}
        or
          $%insertAfter$
          let errorLocation = @location.here
          <expression> ?let @semanticExpressionAST expression
          outFixitListAST += !.fixItInsertAfter {!exp:expression !errorLocation:errorLocation}
        or
          $%insertBefore$
          let errorLocation = @location.here
          <expression> ?let @semanticExpressionAST expression
          outFixitListAST += !.fixItInsertBefore {!exp:expression !errorLocation:errorLocation}
        end
      while
        $,$
      end
      $)$
    end
  }

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST unused ioDeclarations
                              ?!@stringset unused ioUserImplicitDeclaredTypeSet
                              !@semanticInstructionAST outInstruction {
    $error$
    let instructionLocation = @location.here
    <expression> ?let @semanticExpressionAST mReceiverExpression
    $:$
    <expression> ?let @semanticExpressionAST mErrorExpression
    var mBuiltVariableList = @lstringlist {}
    select
    or
      $spoil$
      $($
      repeat
       $identifier$ ?let builtVariableName
       mBuiltVariableList += !builtVariableName
      while
        $,$
      end
      $)$
    end
    <issue_fixit> ?let @fixitListAST fixitListAST
    outInstruction = @errorInstructionAST.new {
      !instructionLocation
      !mReceiverExpression
      !mErrorExpression
      !mBuiltVariableList
      !fixitListAST
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @errorInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mLocationExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mMessageExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mFixitListAST enterFixItListInSemanticContext !?ioTypeMap]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

method @fixitListAST enterFixItListInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  for (element) in self do
    switch element
    case fixItRemove :
    case fixItReplace (@semanticExpressionAST exp *) :
      [exp enterExpressionInSemanticContext !?ioTypeMap]
    case fixItInsertBefore (@semanticExpressionAST exp *) :
      [exp enterExpressionInSemanticContext !?ioTypeMap]
    case fixItInsertAfter (@semanticExpressionAST exp *) :
      [exp enterExpressionInSemanticContext !?ioTypeMap]
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @fixitElementForGeneration {
  case fixItRemove
  case fixItReplace (@semanticExpressionForGeneration exp)
  case fixItInsertBefore (@semanticExpressionForGeneration exp)
  case fixItInsertAfter (@semanticExpressionForGeneration exp)
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

list @fixitListForGeneration {
  private let @fixitElementForGeneration mElement
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeErrorOrWarningInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@unifiedTypeMap ioTypeMap
  ?let @semanticExpressionAST inLocationExpression
  ?let @semanticExpressionAST inMessageExpression
  ?let @fixitListAST inFixitListAST
  ?let @location inErrorLocation
  ?let @string inErrorOrWarningString
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outLocationExpression
  !@semanticExpressionForGeneration outMessageExpression
  !@fixitListForGeneration outFixitListForGeneration
{
#--- Analyze location expression
  [inLocationExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inAnalysisContext.mPredefinedTypes.mLocationType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?outLocationExpression
  ]
#--- Check type
  checkAssignmentTypeWithImplicitGetterCall (
    !inAnalysisContext.mPredefinedTypes.mLocationType
    !outLocationExpression.mResultType
    !inErrorLocation
    !?outLocationExpression
  )
#--- Analyze message expression
  [inMessageExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: .null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?outMessageExpression
  ]
#--- Analyze fixit expressions
  outFixitListForGeneration = {}
  for (element) in inFixitListAST do
    switch element
    case fixItRemove :
      outFixitListForGeneration += !.fixItRemove
    case fixItReplace (exp errorLocation) :
      [exp analyzeSemanticExpression
        !usefulnessCallerEntityName: inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inferenceType: inAnalysisContext.mPredefinedTypes.mStringListType
        !inAnalysisContext
        !?ioTypeMap
        !?ioVariableMap
        ?let expression
      ]
      if (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringListType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mLStringListType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringSetType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringType) then
        error errorLocation : "expression type is @" + [expression.mResultType definition].mTypeName.string
         + ", it should be an @string, @stringset, @stringlist or @lstringlist"
      end
      outFixitListForGeneration += !.fixItReplace {!exp:expression}
    case fixItInsertBefore (exp errorLocation) :
      [exp analyzeSemanticExpression
        !usefulnessCallerEntityName: inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inferenceType: inAnalysisContext.mPredefinedTypes.mStringListType
        !inAnalysisContext
        !?ioTypeMap
        !?ioVariableMap
        ?let expression
      ]
      if (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringListType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mLStringListType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringSetType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringType) then
        error errorLocation : "expression type is @" + [expression.mResultType definition].mTypeName.string
         + ", it should be an @string, @stringset, @stringlist or @lstringlist"
      end
      outFixitListForGeneration += !.fixItInsertBefore {!exp:expression}
    case fixItInsertAfter (exp errorLocation) :
      [exp analyzeSemanticExpression
        !usefulnessCallerEntityName: inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inferenceType: inAnalysisContext.mPredefinedTypes.mStringListType
        !inAnalysisContext
        !?ioTypeMap
        !?ioVariableMap
        ?let expression
      ]
      if (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringListType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mLStringListType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringSetType)
       && (expression.mResultType != inAnalysisContext.mPredefinedTypes.mStringType) then
        error errorLocation : "expression type is @" + [expression.mResultType definition].mTypeName.string
         + ", it should be an @string, @stringset, @stringlist or @lstringlist"
      end
      outFixitListForGeneration += !.fixItInsertAfter {!exp:expression}
    end
  end
#--- Check message expression type is @string
  if outMessageExpression.mResultType != inAnalysisContext.mPredefinedTypes.mStringType then
    error inErrorLocation
    :"the " + inErrorOrWarningString + " message expression type is '@" + [outMessageExpression.mResultType definition].mTypeName.string
     + "'; it should be of the '@string' type"
  end
}

#······················································································································

override method @errorInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
#---
  analyzeErrorOrWarningInstruction (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !self.mLocationExpression
    !self.mMessageExpression
    !self.mFixitListAST
    !self.mInstructionLocation
    !"error"
    !?ioVariableMap
    ?let locationExpression
    ?let messageExpression
    ?let fixitListForGeneration
  )
#--- Handle dropped variables
  var builtVariableCppNameList = @stringlist {}
  for (mValue) in self.mBuiltVariableList do
    [!?ioVariableMap searchForWriteAccess !mValue ?* ?let varCppName ?*]
    builtVariableCppNameList += !varCppName
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@errorInstructionForGeneration.new {
    !self.mInstructionLocation
    !locationExpression
    !messageExpression
    !builtVariableCppNameList
    !fixitListForGeneration
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

method @fixitListForGeneration generateFixIt
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
  !@string outFixItArrayCppName
{
  outFixItArrayCppName = "fixItArray" + ioTemporaryVariableIndex
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "TC_Array <C_FixItDescription> " + outFixItArrayCppName + " ;\n"
  for (element) in self do
    switch (element)
    case fixItRemove :
      ioGeneratedCode += outFixItArrayCppName + ".appendObject (C_FixItDescription (kFixItRemove, \"\")) ;\n"
    case fixItReplace (@semanticExpressionForGeneration exp) :
      [exp generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let receiverCppVarName
      ]
      ioGeneratedCode += "appendFixItActions (" + outFixItArrayCppName + ", kFixItReplace, " + receiverCppVarName + ") ;\n"
    case fixItInsertBefore (@semanticExpressionForGeneration exp) :
      [exp generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let receiverCppVarName
      ]
      ioGeneratedCode += "appendFixItActions (" + outFixItArrayCppName + ", kFixItInsertBefore, " + receiverCppVarName + ") ;\n"
    case fixItInsertAfter (@semanticExpressionForGeneration exp) :
      [exp generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let receiverCppVarName
      ]
      ioGeneratedCode += "appendFixItActions (" + outFixItArrayCppName + ", kFixItInsertAfter, " + receiverCppVarName + ") ;\n"
    end
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @errorInstructionForGeneration : @semanticInstructionForGeneration {
  private let @location mInstructionLocation
  private let @semanticExpressionForGeneration mReceiverExpression
  private let @semanticExpressionForGeneration mErrorExpression
  private let @stringlist mBuiltVariableCppNameList
  private let @fixitListForGeneration mFixitListForGeneration
}

#·····················································································································*

override method @errorInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let receiverCppVarName
  ]
#--- Receiver expression
  [self.mErrorExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let messageCppVarName
  ]
#--- Fix It array
  [self.mFixitListForGeneration generateFixIt
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
    ?let @string fixItArrayCppName
  ]
#--- Generate error instruction
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  ioGeneratedCode += compilerCppName () + "->emitSemanticError ("
    + receiverCppVarName + ", "
    + messageCppVarName + ", "
    + fixItArrayCppName + " "
    + [self.mInstructionLocation commaSourceFile] + ") ;\n"
#--- Release dropped variables
  for (mValue) in self.mBuiltVariableCppNameList do
    [!?ioUnusedVariableCppNameSet removeKey !mValue]
    ioGeneratedCode += mValue + ".drop () ; // Release error dropped variable\n"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
