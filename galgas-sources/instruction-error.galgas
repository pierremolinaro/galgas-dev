#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @fixitElementAST {
  case fixItRemove
  case fixItReplace (@semanticExpressionAST exp @location errorLocation)
  case fixItInsertAfter (@semanticExpressionAST exp @location errorLocation)
  case fixItInsertBefore (@semanticExpressionAST exp @location errorLocation)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @fixitListAST {
  @fixitElementAST mElement
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @errorInstructionAST : @semanticInstructionAST {
  @semanticExpressionAST mLocationExpression
  @semanticExpressionAST mMessageExpression
  @lstringlist mBuiltVariableList
  @fixitListAST mFixitListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <issue_fixit> !@fixitListAST outFixitListAST {
    outFixitListAST = {}
    select
    or
      $fixit$
      ${$
      var hasFixItRemove = false
      repeat
      while
        $remove$
        if hasFixItRemove then
          warning .here : "duplicated action" fixit { remove }
        else
          outFixitListAST += !.fixItRemove
          hasFixItRemove = true
        end
      while
        $replace$
        let errorLocation = @location.here
        <expression> ?let @semanticExpressionAST expression
        outFixitListAST += !.fixItReplace {!exp:expression !errorLocation:errorLocation}
      while
        $after$
        let errorLocation = @location.here
        <expression> ?let @semanticExpressionAST expression
        outFixitListAST += !.fixItInsertAfter {!exp:expression !errorLocation:errorLocation}
      while
        $before$
        let errorLocation = @location.here
        <expression> ?let @semanticExpressionAST expression
        outFixitListAST += !.fixItInsertBefore {!exp:expression !errorLocation:errorLocation}
      end
      $}$
    end
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $error$
    let instructionLocation = @location.here
    <expression> ?let @semanticExpressionAST mReceiverExpression
    $:$
    <expression> ?let @semanticExpressionAST mErrorExpression
    var mBuiltVariableList =@lstringlist {}
    select
    or
      $:$
      repeat
       $identifier$ ?let builtVariableName
       mBuiltVariableList += !builtVariableName
      while
        $,$
      end
    end
    <issue_fixit> ?let @fixitListAST fixitListAST
    outInstruction = @errorInstructionAST.new {
      !instructionLocation
      !mReceiverExpression
      !mErrorExpression
      !mBuiltVariableList
      !fixitListAST
    }
  }  

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @errorInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mLocationExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mMessageExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mFixitListAST enterFixItListInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @fixitListAST enterFixItListInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  for (element) in self do
    switch element 
    case fixItRemove :
    case fixItReplace (@semanticExpressionAST exp *) :
      [exp enterExpressionInSemanticContext !?ioTypeMap]
    case fixItInsertBefore (@semanticExpressionAST exp *) :
      [exp enterExpressionInSemanticContext !?ioTypeMap]
    case fixItInsertAfter (@semanticExpressionAST exp *) :
      [exp enterExpressionInSemanticContext !?ioTypeMap]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @fixitElementForGeneration {
  case fixItRemove
  case fixItReplace (@semanticExpressionForGeneration exp)
  case fixItInsertBefore (@semanticExpressionForGeneration exp)
  case fixItInsertAfter (@semanticExpressionForGeneration exp)
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @fixitListForGeneration {
  @fixitElementForGeneration mElement
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc analyzeErrorOrWarningInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?let @semanticExpressionAST inLocationExpression
  ?let @semanticExpressionAST inMessageExpression
  ?let @fixitListAST inFixitListAST
  ?let @location inErrorLocation
  ?let @string inErrorOrWarningString
  ?!@variableMap ioVariableMap
  !@semanticExpressionForGeneration outLocationExpression
  !@semanticExpressionForGeneration outMessageExpression
  !@fixitListForGeneration outFixitListForGeneration
{
#--- Analyze location expression
  [inLocationExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext.mPredefinedTypes.mLocationType
    !inAnalysisContext
    !?ioVariableMap
    ?outLocationExpression
  ]
#--- Check location expression type is either @location either has a correct location getter
  if [outLocationExpression mResultType] != inAnalysisContext.mPredefinedTypes.mLocationType then
    let @getterMap getterMap = [[outLocationExpression mResultType] mGetterMap]
    if [getterMap hasKey !"location"] then
      [getterMap searchKey
        !["location" nowhere]
        ?let @methodKind kind
        ?let @functionSignature argumentTypeList
        ?*
        ?let @bool hasCompilerArgument
        ?let @unifiedTypeMap-entry returnedType
        ?2*
      ]
      if [argumentTypeList length] != 0 then
        error inErrorLocation
        :"the " + inErrorOrWarningString + " location expression type is '@" + [[outLocationExpression mResultType] key]
        + "' and defines a 'location' getter with arguments; it should be either of the '@location' type,"
        + " either defines a 'location' getter without argument that returns an '@location' object"
      elsif returnedType != inAnalysisContext.mPredefinedTypes.mLocationType then
        error inErrorLocation
        :"the " + inErrorOrWarningString + " location expression type is '@" + [[outLocationExpression mResultType] key]
        + "' and defines a 'location' getter that returns an '@" + [returnedType key]
        + "' object; it should be either of the '@location' type, either defines a 'location' getter without"
        + " argument that returns an '@location' object"
      else
        let conversionExpression = @getterCallExpressionForGeneration.new {
          !inAnalysisContext.mPredefinedTypes.mLocationType
          !inErrorLocation
          !kind
          !outLocationExpression
          !{}
          ![inAnalysisContext.mPredefinedTypes.mLocationType key]
          !{}
          !hasCompilerArgument
        }
        outLocationExpression = conversionExpression
      end
    else
      error inErrorLocation
      :"the " + inErrorOrWarningString + " location expression type is '@" + [[outLocationExpression mResultType] key]
      + "' and does not define a 'location' getter; it should be either of the '@location' type, either"
      + " defines a 'location' getter without argument that returns an '@location' object"
    end
  end
#--- Analyze message expression
  [inMessageExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !.null
    !inAnalysisContext
    !?ioVariableMap
    ?outMessageExpression
  ]
#--- Analyze fixit expressions
  outFixitListForGeneration = {}
  for (element) in inFixitListAST do
    switch element 
    case fixItRemove :
      outFixitListForGeneration += !.fixItRemove
    case fixItReplace (exp errorLocation) :
      [exp analyzeSemanticExpression
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inAnalysisContext.mPredefinedTypes.mStringListType
        !inAnalysisContext
        !?ioVariableMap
        ?let expression
      ]
      if ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringListType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mLStringListType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringSetType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringType) then
        error errorLocation : "expression type is @" + [[expression mResultType] key]
         + ", it should be an @string, @stringset, @stringlist or @lstringlist"
      end
      outFixitListForGeneration += !.fixItReplace {!exp:expression}
    case fixItInsertBefore (exp errorLocation) :
      [exp analyzeSemanticExpression
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inAnalysisContext.mPredefinedTypes.mStringListType
        !inAnalysisContext
        !?ioVariableMap
        ?let expression
      ]
      if ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringListType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mLStringListType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringSetType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringType) then
        error errorLocation : "expression type is @" + [[expression mResultType] key]
         + ", it should be an @string, @stringset, @stringlist or @lstringlist"
      end
      outFixitListForGeneration += !.fixItInsertBefore {!exp:expression}
    case fixItInsertAfter (exp errorLocation) :
      [exp analyzeSemanticExpression
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inAnalysisContext.mPredefinedTypes.mStringListType
        !inAnalysisContext
        !?ioVariableMap
        ?let expression
      ]
      if ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringListType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mLStringListType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringSetType)
       && ([expression mResultType] != inAnalysisContext.mPredefinedTypes.mStringType) then
        error errorLocation : "expression type is @" + [[expression mResultType] key]
         + ", it should be an @string, @stringset, @stringlist or @lstringlist"
      end
      outFixitListForGeneration += !.fixItInsertAfter {!exp:expression}
    end
  end
#--- Check message expression type is @string
  if [outMessageExpression mResultType] != inAnalysisContext.mPredefinedTypes.mStringType then
    error inErrorLocation
    :"the " + inErrorOrWarningString + " message expression type is '@" + [[outMessageExpression mResultType] key]
     + "'; it should be of the '@string' type"
  end
}

#······················································································································*

override method @errorInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap
{
#---
  analyzeErrorOrWarningInstruction (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !self.mLocationExpression
    !self.mMessageExpression
    !self.mFixitListAST
    !self.mInstructionLocation
    !"error"
    !?ioVariableMap
    ?let locationExpression
    ?let messageExpression
    ?let fixitListForGeneration
  )
#--- Handle dropped variables
  var builtVariableCppNameList = @stringlist {}
  for () in self.mBuiltVariableList do
    [!?ioVariableMap searchForWriteAccess !mValue ?* ?let varCppName ?*]
    builtVariableCppNameList += !varCppName
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@errorInstructionForGeneration.new {
    !self.mInstructionLocation
    !locationExpression
    !messageExpression
    !builtVariableCppNameList
    !fixitListForGeneration
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @fixitListForGeneration generateFixIt
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
  !@string outFixItArrayCppName
{
  outFixItArrayCppName = "fixItArray" + ioTemporaryVariableIndex
  ioTemporaryVariableIndex ++
  ioGeneratedCode += "TC_Array <C_FixItDescription> " + outFixItArrayCppName + " ;\n"
  for (element) in self do
    switch (element)
    case fixItRemove :
      ioGeneratedCode += outFixItArrayCppName + ".appendObject (C_FixItDescription (kFixItRemove, \"\")) ;\n"
    case fixItReplace (@semanticExpressionForGeneration exp) :
      [exp generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let receiverCppVarName
      ]
      ioGeneratedCode += "appendFixItActions (" + outFixItArrayCppName + ", kFixItReplace, " + receiverCppVarName + ") ;\n"
    case fixItInsertBefore (@semanticExpressionForGeneration exp) :
      [exp generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let receiverCppVarName
      ]
      ioGeneratedCode += "appendFixItActions (" + outFixItArrayCppName + ", kFixItInsertBefore, " + receiverCppVarName + ") ;\n"
    case fixItInsertAfter (@semanticExpressionForGeneration exp) :
      [exp generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let receiverCppVarName
      ]
      ioGeneratedCode += "appendFixItActions (" + outFixItArrayCppName + ", kFixItInsertAfter, " + receiverCppVarName + ") ;\n"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @errorInstructionForGeneration : @semanticInstructionForGeneration {
  @location mInstructionLocation
  @semanticExpressionForGeneration mReceiverExpression
  @semanticExpressionForGeneration mErrorExpression
  @stringlist mBuiltVariableCppNameList
  @fixitListForGeneration mFixitListForGeneration
}

#·····················································································································*

override method @errorInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let receiverCppVarName
  ]
#--- Receiver expression
  [self.mErrorExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let messageCppVarName
  ]
#--- Fix It array
  [self.mFixitListForGeneration generateFixIt
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
    ?@string fixItArrayCppName
  ]
#--- Generate error instruction
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  ioGeneratedCode += compilerCppName () + "->emitSemanticError ("
    + receiverCppVarName + ", "
    + messageCppVarName + ", "
    + fixItArrayCppName + " "
    + [self.mInstructionLocation commaSourceFile] + ") ;\n"
#--- Release dropped variables
  for () in self.mBuiltVariableCppNameList do
    [!?ioUnusedVariableCppNameSet removeKey !mValue]
    ioGeneratedCode += mValue + ".drop () ; // Release error dropped variable\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
