//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
//! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  //······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $switch$
    let instructionLocation = @location.here
    <expression_ggs3> !?ioDeclarations ?let switchExpression
    let endOfSwitchExpression = @location.here
    var @switchBranchesAST switchBranches = @()
    repeat
      $case$
      <switch_case>
        !?ioDeclarations
        ?let [@lstring] constantNameList
        ?let @switchExtractedValuesListAST associatedValuesExtraction
      $:$
      <semantic_instruction_list_ggs3> !?ioDeclarations ?let instructions
      switchBranches += !constantNameList !associatedValuesExtraction !instructions !@location.here
    while
    end
    $end$
    let endOfSwitchInstruction = @location.here
    outInstruction = @switchInstructionAST {
      !instructionLocation
      !switchExpression
      !endOfSwitchExpression
      !switchBranches
      !endOfSwitchInstruction
    }
  }

  //······························································································

  rule <switch_case> ?!@galgasDeclarationAST ioDeclarations
                     ![@lstring] outConstantNameList
                     !@switchExtractedValuesListAST outAssociatedValuesExtraction  {
    outConstantNameList = @()
    repeat
      $identifier$ ?let @lstring constantName
      [!?outConstantNameList append !constantName]
    while
      $,$
    end
    outAssociatedValuesExtraction = @()
    select
    or
      $($
      repeat
        select
          $literalInt$ ?let n
          $*$
          for * in 0 ..< n.bigint do
            outAssociatedValuesExtraction += !["" here] !["" here] !false
          end
         or
          $*$
          outAssociatedValuesExtraction += !["" here] !["" here] !false
         or
          let @lstring typeName
          select
            <type_definition_ggs3> !?ioDeclarations ?typeName
          or
            typeName = ["" here]
          end
          let @bool constantMarkedAsUnused
          select
            constantMarkedAsUnused = false
          or
            $unused$
            constantMarkedAsUnused = true
          end
          $identifier$ ?let @lstring constantName
          outAssociatedValuesExtraction += !typeName !constantName !constantMarkedAsUnused
        end
      while
      end
      $)$
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  //······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $switch$
    let instructionLocation = @location.here
    <expression> !?ioDeclarations ?let switchExpression
    let endOfSwitchExpression = @location.here
    var @switchBranchesAST switchBranches = @()
    repeat
      $case$
      <switch_case>
        !?ioDeclarations
        ?let [@lstring] constantNameList
        ?let @switchExtractedValuesListAST associatedValuesExtraction
      $:$
      <semantic_instruction_list> !?ioDeclarations ?let instructions
      switchBranches += !constantNameList !associatedValuesExtraction !instructions !@location.here
    while
    end
    $end$
    let endOfSwitchInstruction = @location.here
    outInstruction = @switchInstructionAST {
      !instructionLocation
      !switchExpression
      !endOfSwitchExpression
      !switchBranches
      !endOfSwitchInstruction
    }
  }

  //······························································································

  rule <switch_case> ?!@galgasDeclarationAST ioDeclarations
                     ![@lstring] outConstantNameList
                     !@switchExtractedValuesListAST outAssociatedValuesExtraction {
    outConstantNameList = @()
    repeat
      $identifier$ ?let @lstring constantName
      [!?outConstantNameList append !constantName]
    while
      $,$
    end
    outAssociatedValuesExtraction = @()
    select
    or
      $($
      repeat
        select
          $literalInt$ ?let n
          $*$
          for * in 0 ..< n.bigint do
            outAssociatedValuesExtraction += !["" here] !["" here] !false
          end
         or
          $*$
          outAssociatedValuesExtraction += !["" here] !["" here] !false
         or
          let @lstring typeName
          select
            <type_definition> !?ioDeclarations ?typeName
          or
            typeName = ["" here]
          end
          let @bool constantMarkedAsUnused
          select
            constantMarkedAsUnused = false
          or
            $unused$
            constantMarkedAsUnused = true
          end
          $identifier$ ?let @lstring constantName
          outAssociatedValuesExtraction += !typeName !constantName !constantMarkedAsUnused
        end
      while
        $,$
      end
      $)$
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! AST
//————————————————————————————————————————————————————————————————————————————————————————————————

list @switchExtractedValuesListAST {
  public let @lstring mExtractedValueTypeName
  public let @lstring mExtractedValueName
  public let @bool mMarkedAsUnused
}

//————————————————————————————————————————————————————————————————————————————————————————————————

list @switchBranchesAST {
  public let [@lstring] mSwitchConstantList
  public let @switchExtractedValuesListAST mAssociatedValuesExtraction
  public let @semanticInstructionListAST mInstructions
  public let @location mEndOfBranch
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @switchInstructionAST : @semanticInstructionAST {
  private let @semanticExpressionAST mSwitchExpression
  private let @location mEndOfSwitchExpression
  private let @switchBranchesAST mBranches
  private let @location mEndOf_switch_instruction

  //······························································································

  override method enterInstructionInSemanticContext
    ?!@unifiedTypeMap ioTypeMap {
    [self.mSwitchExpression enterExpressionInSemanticContext !?ioTypeMap]
    for branch in self.mBranches do
      [branch.mInstructions enterInstructionListInSemanticContext !?ioTypeMap]
    end
  }

  //······························································································

  override method analyzeSemanticInstruction ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                            ?!@unifiedTypeMap ioTypeMap
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
  //--- Analyze switch expression
    [self.mSwitchExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: @unifiedTypeMapEntry.null
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?let switchExpression
    ]
  //--- Check switch expression type is and enum instance
    if let enumType = [[switchExpression.mResultType definition].typeKind getEnumType] then
    //--- Enum constant map
      var @stringset constantsNamedInSwitchInstruction = @()
    //--- Analyze branches
      [!?ioVariableMap openOverrideForSelectBlock]
      var @switchBranchesForGeneration switchBranchesForGeneration = @()
      for branch in self.mBranches do
        [!?ioVariableMap openBranch]
        var @extractedAssociatedValuesForGeneration extractedAssociatedValuesForGeneration = @()
        for constantName in branch.mSwitchConstantList do
          if [enumType.constantMap hasKey !constantName.string] then
            if [constantsNamedInSwitchInstruction hasKey !constantName.string] then
              error constantName
              :"the '" + constantName + "' constant is already named in this switch instruction"
            end
            constantsNamedInSwitchInstruction += !constantName.string
            [enumType.constantMap searchKey !constantName ?* ?let associatedTypeList]
            if ([associatedTypeList count] > 0) & ([branch.mAssociatedValuesExtraction count] == 0) then
              error constantName
                :"the associated values of '" + constantName + "' constant should be extracted"
            elsif ([associatedTypeList count] == 0) & ([branch.mAssociatedValuesExtraction count] > 0) then
              error constantName
                :"the '" + constantName + "' constant has no associated value"
            elsif [associatedTypeList count] != [branch.mAssociatedValuesExtraction count] then
              error constantName
                :"the '" + constantName + "' constant requires " + [associatedTypeList count]
                + "  associated value"
                + if [associatedTypeList count] > 1 then "s" else "" end
            else
              for descriptor in associatedTypeList, associatedValue in branch.mAssociatedValuesExtraction do (IDX)
                if associatedValue.mExtractedValueTypeName.string != "" then // Explicit type ?
                  if [descriptor.type definition].typeName.string
                           != associatedValue.mExtractedValueTypeName.string then
                    error associatedValue.mExtractedValueTypeName
                    : "the required type is '@" + [descriptor.type definition].typeName.string + "'"
                  end
                end
                let cppName = "extractedValue_"
                  + [associatedValue.mExtractedValueName.location startLocationIndex]
                  + "_" + associatedValue.mExtractedValueName + "_" + IDX
                extractedAssociatedValuesForGeneration +=
                  !descriptor.type
                  !cppName
                  !descriptor.name
                if associatedValue.mExtractedValueName.string != "" then
                  if associatedValue.mMarkedAsUnused then
                    [!?ioVariableMap insertUsedLocalConstant
                      !associatedValue.mExtractedValueName
                      !descriptor.type
                      !cppName
                      !cppName
                    ]
                  else
                    [!?ioVariableMap insertInitializedLocalConstant
                      !associatedValue.mExtractedValueName
                      !descriptor.type
                      !cppName
                      !cppName
                    ]
                  end
                end
              end
            end
          else
            error constantName
            :"'" + constantName + "' is not a constant of '@"
            + [switchExpression.mResultType definition].typeName.string + "' enumeration type"
          end
        end
        analyzeSemanticInstructionListWithoutBranch (
          !inUsefulnessCallerEntityName
          !?ioUsefulEntitiesGraph
          !inAnalysisContext
          !?ioTypeMap
          !localConstantList: @()
          !localInitializedVariableListWarnsIfNotMutated: @()
          !localInitializedVariableListNoWarnsIfNotMutated: @()
          !branch.mInstructions
          !?ioVariableMap
          ?let @semanticInstructionListForGeneration instructionList
        )
        [!?ioVariableMap closeBranch !branch.mEndOfBranch]
        switchBranchesForGeneration +=
          !branch.mSwitchConstantList
          !extractedAssociatedValuesForGeneration
          ![branch.mEndOfBranch startLocationIndex]
          !instructionList
      end
      [!?ioVariableMap closeOverride !self.mEndOf_switch_instruction]
    //--- Check all constants have been named
      let forgottenConstants = [enumType.constantMap keySet] - constantsNamedInSwitchInstruction
      if [forgottenConstants count] > 0 then
        var @string s = ""
        for (key) in forgottenConstants do
          s += "\n  - " + key
        end
        error self.mEndOf_switch_instruction
        : "the switch instruction should name all enumeration constants; missing constants are:" + s
      end
    //--- Generate instruction
      ioInstructionListForGeneration += !@switchInstructionForGeneration {
        !switchExpression.mResultType
        !switchExpression
        !switchBranchesForGeneration
      }
    else
      error self.mEndOfSwitchExpression
      : "the switch expression type should be an instance of an enumeration type (the '@"
      + [switchExpression.mResultType definition].typeName.string
      + "' type is not an enumeration type)"
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

list @extractedAssociatedValuesForGeneration {
  public let @unifiedTypeMapEntry mType
  public let @string mCppName
//  public let @uint mIndex
  public let @string name
}

//————————————————————————————————————————————————————————————————————————————————————————————————

list @switchBranchesForGeneration {
  public let [@lstring] mSwitchConstantList
  public let @extractedAssociatedValuesForGeneration mExtractedAssociatedValuesForGeneration
  public let @uint mEndOfBranchLocationIndex
  public let @semanticInstructionListForGeneration mInstructions
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @switchInstructionForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMapEntry mEnumType
  private let @semanticExpressionForGeneration mSwitchExpression
  private let @switchBranchesForGeneration mBranches

  //······························································································

  override method generateInstruction ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      ?let @bool inGenerateSyntaxDirectedTranslationString
                                      ?!@string ioGeneratedCode {
  //--- Switch expression
    [self.mSwitchExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string switchVar
    ]
    ioGeneratedCode += "switch (" + switchVar + ".enumValue ()) {\n"
    ioGeneratedCode += "case GGS_"
    ioGeneratedCode += [self.mSwitchExpression.mResultType identifierRepresentation] 
    ioGeneratedCode += "::Enumeration::invalid:\n"
    ioGeneratedCode += "  break ;\n"
    for branch in self.mBranches do
      for constantName in branch.mSwitchConstantList do
        ioGeneratedCode += "case GGS_"
        ioGeneratedCode += [self.mSwitchExpression.mResultType identifierRepresentation]
        ioGeneratedCode += "::Enumeration::enum_" 
        ioGeneratedCode += [constantName.string identifierRepresentation]
        ioGeneratedCode += ":\n"
      end
      [!?ioGeneratedCode incIndentation !2]
      if [branch.mInstructions count] > 0 then
        ioGeneratedCode += "{\n"
        if [branch.mExtractedAssociatedValuesForGeneration count] > 0 then
          for associatedValue in branch.mExtractedAssociatedValuesForGeneration do
            [associatedValue.mType addHeaderFileName !?ioInclusionSet]
            ioGeneratedCode += "  GGS_" + [associatedValue.mType identifierRepresentation]
            ioGeneratedCode += " " + associatedValue.mCppName + " ;\n"
          end
          ioGeneratedCode += "  " + switchVar + ".getAssociatedValuesFor_"
          ioGeneratedCode += [branch.mSwitchConstantList @[0] identifierRepresentation] + " ("
          for associatedValue in branch.mExtractedAssociatedValuesForGeneration
            do ioGeneratedCode += associatedValue.mCppName
            between ioGeneratedCode += ", "
          end
          ioGeneratedCode += ") ;\n"
        end
        generateInstructionList (
          !?ioInclusionSet
          !branch.mInstructions
          !?ioTemporaryVariableIndex
          !?ioUnusedVariableCppNameSet
          !inGenerateSyntaxDirectedTranslationString
          !?ioGeneratedCode
        )
        ioGeneratedCode += "}\n"
      end
      ioGeneratedCode += "break ;\n"
      [!?ioGeneratedCode decIndentation !2]
    end
    ioGeneratedCode += "}\n"
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
