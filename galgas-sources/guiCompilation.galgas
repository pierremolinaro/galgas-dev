#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  'gui' component compilation                                                                                         *
#                                                                                                                      *
#  Copyright (C) 2008, ..., 2015 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

list @guiCommandLineOptionList {
  @string mOptionComponent
  @string mOptionIdentifier
  @char mOptionChar
  @string mOptionString
  @string mComment
}

#----------------------------------------------------------------------------------------------------------------------*

map @extensionMap {
  @string mLexiqueName
  insert insertKey error message "the '%K' extension is already declared in %L"
}

#----------------------------------------------------------------------------------------------------------------------*

list @textMacroList {
  @string mKey
  @string mContents
}

#----------------------------------------------------------------------------------------------------------------------*

list @importedLexiqueList {
  @string mLexiqueClassName
  @string mBlockComment
  @string mTitle
  @textMacroList mTextMacroList
  @guiLabelListAST mLabels
}

#----------------------------------------------------------------------------------------------------------------------*

struct @guiAnalysisContext {
  @stringlist mImportedOptionComponentList
  @guiCommandLineOptionList mBoolOptionList
  @guiCommandLineOptionList mUIntOptionList
  @guiCommandLineOptionList mStringOptionList
  @stringlist mNibAndClassList
  @extensionMap mExtensionMap
  @importedLexiqueList mWithLexiqueList
}

#----------------------------------------------------------------------------------------------------------------------*
#         G E N E R A T I O N    T E M P L A T E S                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper guiGenerationTemplates in "../generation_templates/gui_generation" {
}{
}{
  template gui_implementation "gui-implementation.m.galgasTemplate"
    ?galgas3:@bool GENERATE_FOR_GALGAS3
    ?@guiAnalysisContext GUI_CONTEXT
}

#----------------------------------------------------------------------------------------------------------------------*
#       C O M P I L E   G U I   C O M P O N E N T                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

map @optionComponentMapForGeneration {
  @guiAnalysisContext mGuiComponentContext
  insert insertKey error message "redefinition of the '%K' option component: it has been already declared in %L"
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileAllGuiComponentFromASTGalgas3
  ?let @galgas3GUIComponentListAST inGuiComponentListAST
  ?let @semanticContext inSemanticContext
  !@optionComponentMapForGeneration outOptionComponentMapForGeneration {
  outOptionComponentMapForGeneration = {}
  for guiAST in inGuiComponentListAST do
    compileGuiComponentGalgas3 (
      !guiAST
      !inSemanticContext
      !?outOptionComponentMapForGeneration
    )
  end
}

#----------------------------------------------------------------------------------------------------------------------*

private proc compileGuiComponentGalgas3
  ?let @galgas3GUIComponentListAST-element inGUIComponentAST
  ?let @semanticContext inSemanticContext
  ?!@optionComponentMapForGeneration ioOptionComponentMapForGeneration
{
  if inGUIComponentAST.mGUIComponentName.string != "cocoa" then
    error inGUIComponentAST.mGUIComponentName : "the gui name should be 'cocoa'"
  end
#--- 
  @guiAnalysisContext context = .new {
    !@stringlist. emptyList
    !@guiCommandLineOptionList.emptyList # Bool options
    !@guiCommandLineOptionList.emptyList # UInt options
    !@guiCommandLineOptionList.emptyList # string options
    !@stringlist.emptyList
    !@extensionMap.emptyMap
    !@importedLexiqueList.emptyList
  }
#--- Check imported options components
  for () in inGUIComponentAST.mImportedOptionList do
    [inSemanticContext.mOptionComponentMapForSemanticAnalysis searchKey
      !mValue
      ?5*
    ]
    context.mImportedOptionComponentList += !mValue.string
  end
#--- Nib and main classes
  for () in inGUIComponentAST.mGlobalSimpleAttributeList do
    if [mKey string] != "nibAndMainClass" then
      warning mKey:"the '" + mKey + "' key is invalid and has no effect"
    else
      for () in [mValue.string componentsSeparatedByString !"."] do
        context.mNibAndClassList += !mValue
      end
    end
  end
#--- 'with lexique' construct analysis
  for () in inGUIComponentAST.mWithLexiqueList do
  #--- Check lexique
    [inSemanticContext.mLexiqueComponentMapForSemanticAnalysis searchKey
      !mLexiqueFileName
      ?var @terminalMap terminalMap
      ?2*
    ]
  #--- Build terminal symbol set
    let terminalSymbolSet = [terminalMap keySet]
  #--- Check labels
    for () in mLabels do
      for () in mTerminalList do
        if not [terminalSymbolSet hasKey ![mTerminal string]] then
          error mTerminal: "the '$"
            + mTerminal
            + "$' terminal symbol is not declared by the '"
            + mLexiqueFileName
            + "' lexique"
        end
      end
    end
  #--- Compound attributes
    var textMacroList =@textMacroList.emptyList{}
    for () in mCompoundAttributes do
      if [mKey string] != "textMacro" then
        error mKey: "for a compound attribute, only the 'textMacro' key is valid"
      else
        textMacroList += ![mAttributeName string] ![mValue string]
      end
    end
  #--- Simple attributes
    @bool hasAssociatedExtension = false
    @bool hasTabViewTitle = false
    @bool hasBlockComment = false
    @string tabViewTitle = ""
    @string blockComment = ""
    for () in mSimpleAttributes do
      if [mKey string] == "fileExtension" then
        [!?context.mExtensionMap insertKey !mValue !mLexiqueFileName.string]
        hasAssociatedExtension = true
      elsif [mKey string] == "title" then
        if hasTabViewTitle then
          error mKey: "the '" + mKey + "' key should be defined once"
        end
        hasTabViewTitle = true
        tabViewTitle = [mValue string]
      elsif [mKey string] == "blockComment" then
        if hasBlockComment then
          error mKey: "the '" + mKey + "' key should be defined once"
        end
        hasBlockComment = true
        blockComment = [mValue string]
      else
        error mKey: "the '" + mKey + "' key is not valid (valid keys: 'blockComment,', 'fileExtension', 'title')"
      end
    end
  #--- has an extension ?
    if not hasAssociatedExtension then
      error mLexiqueFileName:"one or more file extensions should be associated with a lexique (fileExtension : \"...\")"
    end
  #--- has title ?
    if not hasTabViewTitle then
      error mLexiqueFileName:"the 'title' key should be defined once (it is not defined)"
    end
  #---
    context.mWithLexiqueList +=
      !mLexiqueFileName.string
      !blockComment
      !tabViewTitle
      !textMacroList
      !mLabels
  end
#--- Generation
  [!?ioOptionComponentMapForGeneration insertKey
    !inGUIComponentAST.mGUIComponentName
    !context
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

proc generateAllGuiComponentsGalgas3
  ?let @optionComponentMapForGeneration inOptionComponentMapForGeneration
  ?let @string inOutputDirectory
  ?!@stringlist ioApplicationSourceSet
  ?!@stringset ioAllProductFileSet {
  for () in inOptionComponentMapForGeneration do
    let fileName = "gui-" + lkey + ".m"
    ioApplicationSourceSet += !fileName
    ioAllProductFileSet += !fileName
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:fileName
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper guiGenerationTemplates.gui_implementation !galgas3:true !mGuiComponentContext]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:"\n\n" # Zone 3
      !makeExecutable:false
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

