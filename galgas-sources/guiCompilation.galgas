#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @guiSimpleAttributeListAST {
  @lstring mKey
  @lstring mValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @guiCompoundAttributeListAST {
  @lstring mKey
  @lstring mAttributeName
  @lstring mValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @terminalLabelListAST {
  @lstring mTerminal
  @uint mDisplayFlags
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @guiLabelListAST {
  @uint mLeadingCharacterStrippedCount
  @terminalLabelListAST mTerminalList
  @location mLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @withLexiqueListAST {
  @lstring mLexiqueFileName
  @guiLabelListAST mLabels
  @guiSimpleAttributeListAST mSimpleAttributes
  @guiCompoundAttributeListAST mCompoundAttributes
}
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @guiCommandLineOptionList {
  @string mOptionComponent
  @string mOptionIdentifier
  @char mOptionChar
  @string mOptionString
  @string mComment
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @extensionMap {
  @string mLexiqueName
  @uint mIndex
  insert insertKey error message "the '%K' extension is already declared in %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @textMacroList {
  @string mKey
  @string mContents
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @importedLexiqueList {
  @string mLexiqueClassName
  @uint mIndex
  @string mBlockComment
  @string mTitle
  @textMacroList mTextMacroList
  @guiLabelListAST mLabels
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @galgas3GUIComponentListAST {
  @lstring mGUIComponentName
  @lstringlist mImportedOptionList
  @guiSimpleAttributeListAST mGlobalSimpleAttributeList
  @withLexiqueListAST mWithLexiqueList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3GuiComponentSyntax (galgas3Scanner) {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $gui$
    $identifier$ ?let @lstring mGUIName
    ${$
    @lstringlist importedOptionList = {}
    @guiSimpleAttributeListAST simpleGlobalAttributes = {}
    @withLexiqueListAST withLexiqueList = {}
    repeat
    while
      <gui_attributes> !?simpleGlobalAttributes
    while
      <gui_with_option_declaration> !?importedOptionList
    while
      <gui_with_lexique_declaration> !?withLexiqueList
    end
  #---
    $}$
    ioDeclarations.mGUIComponentList +=
      !mGUIName
      !importedOptionList
      !simpleGlobalAttributes
      !withLexiqueList
  }
  
  #·····················································································································
  
  rule <gui_with_lexique_declaration> ?!@withLexiqueListAST ioWithLexiqueList {
    $with$
    $lexique$
    $identifier$ ?var @lstring lexiqueReference
    @guiLabelListAST labels = {}
    @guiSimpleAttributeListAST simpleAttributes = {}
    @guiCompoundAttributeListAST compoundAttributes = {}
    ${$
    repeat
    while
      $label$
      @uint displayStyle
      select
        displayStyle = 0
      or
        $*$
        displayStyle = 1
      end
      @terminalLabelListAST terminalList = {}
      repeat
        $\$terminal\$$ ?let  @lstring terminal
        @uint displayFlags
        select
          displayFlags = 0 # Default
        or
          $-$
          displayFlags = 0xFFFF # Do not diplay
        or
          $($
          $uint32$ ?let @luint leadingStrip
          if leadingStrip.uint >= 15 then
            error leadingStrip:"leading strip should be < 15"
          end
          $,$
          $uint32$ ?let @luint endingStrip
          if endingStrip.uint >= 15 then
            error endingStrip:"tail strip should be < 15"
          end
          displayFlags = (leadingStrip.uint << 4) | endingStrip
         $)$
        end
        terminalList += !terminal !displayFlags
      while
        $,$
      end
      labels += !displayStyle !terminalList !@location.here
    while
      $identifier$ ?var @lstring key
      $"string"$ ?var @lstring name
      $:$
      var value =@lstring.new{!"" !@location.here}
      repeat
        $"string"$ ?var @lstring v
        value = @lstring.new {![value string] + [v string] ![v location]}
      while
      end
      compoundAttributes += !key !name !value
    while
      $identifier$ ?var @lstring name
      $:$
      $"string"$ ?var @lstring value
      simpleAttributes += !name !value
    end
    $}$
    ioWithLexiqueList +=  !lexiqueReference !labels !simpleAttributes !compoundAttributes
  }
  
  #·····················································································································
  
  rule <gui_with_option_declaration> ?!@lstringlist ioImportedOptionList {
    $with$
    $option$
    $identifier$ ?var @lstring optionReference
    ioImportedOptionList += !optionReference
  }

  #·····················································································································
  
  rule <gui_attributes> ?!@guiSimpleAttributeListAST ioSimpleGlobalAttributes {
    $identifier$ ?let @lstring mKey
    $:$
    var mValue = @lstring.new {!"" !.here}
    repeat
      $"string"$ ?var @lstring value
      mValue = @lstring.new {![mValue string] + [value string] ![value location]}
    while
    end
    ioSimpleGlobalAttributes += !mKey !mValue
  }
  
  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTIC ANALYSIS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @guiAnalysisContext {
  @stringlist mImportedOptionComponentList
  @guiCommandLineOptionList mBoolOptionList
  @guiCommandLineOptionList mUIntOptionList
  @guiCommandLineOptionList mStringOptionList
  @stringlist mNibAndClassList
  @extensionMap mExtensionMap
  @importedLexiqueList mWithLexiqueList
  @string mBuildRunOption
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @optionComponentMapForGeneration {
  @guiAnalysisContext mGuiComponentContext
  insert insertKey error message "redefinition of the '%K' option component: it has been already declared in %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc compileAllGuiComponentFromASTGalgas3
  ?let @galgas3GUIComponentListAST inGuiComponentListAST
  ?let @semanticContext inSemanticContext
  !@optionComponentMapForGeneration outOptionComponentMapForGeneration
{
  outOptionComponentMapForGeneration = {}
  for guiAST in inGuiComponentListAST do
    guiComponentSemanticAnalysis (
      !guiAST
      !inSemanticContext
      !?outOptionComponentMapForGeneration
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc guiComponentSemanticAnalysis
  ?let @galgas3GUIComponentListAST-element inGUIComponentAST
  ?let @semanticContext inSemanticContext
  ?!@optionComponentMapForGeneration ioOptionComponentMapForGeneration
{
  if inGUIComponentAST.mGUIComponentName.string != "cocoa" then
    error inGUIComponentAST.mGUIComponentName : "the gui name should be 'cocoa'"
  end
#--- 
  @guiAnalysisContext context = .default
#--- Check imported options components
  for (mValue) in inGUIComponentAST.mImportedOptionList do
    [inSemanticContext.mOptionComponentMapForSemanticAnalysis searchKey
      !mValue
      ?5*
    ]
    context.mImportedOptionComponentList += !mValue.string
  end
#--- Nib and main classes
  var runOptionDefined = false
  for (mKey mValue) in inGUIComponentAST.mGlobalSimpleAttributeList do
    if mKey.string == "run" then
      if runOptionDefined then
        error mKey : "option already defined"
      elsif mValue.string == "" then
        error mValue : "run option string should not be empty"
      else
        context.mBuildRunOption = mValue.string
        runOptionDefined = true
      end
    elsif mKey.string == "nibAndMainClass" then
      for component in [mValue.string componentsSeparatedByString !"."] do
        context.mNibAndClassList += !component.mValue
      end
    else
      warning mKey:"the '" + mKey + "' key is invalid and has no effect"
    end
  end
#--- 'with lexique' construct analysis
  for (mLexiqueFileName mLabels mSimpleAttributes mCompoundAttributes) in inGUIComponentAST.mWithLexiqueList do (idx)
  #--- Check lexique
    [inSemanticContext.mLexiqueComponentMapForSemanticAnalysis searchKey
      !mLexiqueFileName
      ?var @terminalMap terminalMap
      ?2*
    ]
  #--- Build terminal symbol set
    let terminalSymbolSet = [terminalMap keySet]
  #--- Check labels
    for (mLeadingCharacterStrippedCount mTerminalList mLocation) in mLabels do
      for (mTerminal mDisplayFlags) in mTerminalList do
        if not [terminalSymbolSet hasKey ![mTerminal string]] then
          error mTerminal: "the '$"
            + mTerminal
            + "$' terminal symbol is not declared by the '"
            + mLexiqueFileName
            + "' lexique"
        end
      end
    end
  #--- Compound attributes
    @textMacroList textMacroList = {}
    for (mKey mAttributeName mValue) in mCompoundAttributes do
      if [mKey string] != "textMacro" then
        error mKey: "for a compound attribute, only the 'textMacro' key is valid"
      else
        textMacroList += ![mAttributeName string] ![mValue string]
      end
    end
  #--- Simple attributes
    @bool hasAssociatedExtension = false
    @bool hasTabViewTitle = false
    @bool hasBlockComment = false
    @string tabViewTitle = ""
    @string blockComment = ""
    for (mKey mValue) in mSimpleAttributes do
      if [mKey string] == "fileExtension" then
        [!?context.mExtensionMap insertKey !mValue !mLexiqueFileName.string !idx]
        hasAssociatedExtension = true
      elsif [mKey string] == "title" then
        if hasTabViewTitle then
          error mKey: "the '" + mKey + "' key should be defined once"
        end
        hasTabViewTitle = true
        tabViewTitle = [mValue string]
      elsif [mKey string] == "blockComment" then
        if hasBlockComment then
          error mKey: "the '" + mKey + "' key should be defined once"
        end
        hasBlockComment = true
        blockComment = [mValue string]
      else
        error mKey: "the '" + mKey + "' key is not valid (valid keys: 'blockComment,', 'fileExtension', 'title')"
      end
    end
  #--- has an extension ?
    if not hasAssociatedExtension then
      error mLexiqueFileName:"one or more file extensions should be associated with a lexique (fileExtension : \"...\")"
    end
  #--- has title ?
    if not hasTabViewTitle then
      error mLexiqueFileName:"the 'title' key should be defined once (it is not defined)"
    end
  #---
    context.mWithLexiqueList +=
      !mLexiqueFileName.string
      !idx
      !blockComment
      !tabViewTitle
      !textMacroList
      !mLabels
  end
#--- Generation
  [!?ioOptionComponentMapForGeneration insertKey
    !inGUIComponentAST.mGUIComponentName
    !context
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc generateAllGuiComponentsGalgas3
  ?let @optionComponentMapForGeneration inOptionComponentMapForGeneration
  ?let @string inOutputDirectory
  ?let @bool inQuietOutputByDefault
  ?!@stringlist ioApplicationSourceSet
  ?!@stringset ioAllProductFileSet
{
  for (lkey mGuiComponentContext) in inOptionComponentMapForGeneration do
    let fileName = "gui-" + lkey + ".m"
    ioApplicationSourceSet += !fileName
    ioAllProductFileSet += !fileName
    let s = [filewrapper guiGenerationTemplates.gui_implementation
      !mGuiComponentContext
      !inQuietOutputByDefault
      !mGuiComponentContext.mBuildRunOption
    ]
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:fileName
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:s
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:"\n\n" # Zone 3
      !makeExecutable:false
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#         G E N E R A T I O N    T E M P L A T E S                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper guiGenerationTemplates in "+generation-templates/gui_generation" {
}{
}{
  template gui_implementation "gui-implementation.m.galgasTemplate"
    ?@guiAnalysisContext GUI_CONTEXT
    ?@bool QUIET_OUTPUT_BY_DEFAULT
    ?@string BUILD_RUN_OPTION
}

