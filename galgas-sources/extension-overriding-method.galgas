#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $method$
    $@type$ ?var typeName indexing typeReferenceOverrideExtensionMethodDefinition
    repeat
    while
      $.$
      $@type$ ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
    end
    $identifier$ ?let @lstring methodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let routineInstructionList
    let endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST {
      !isPredefined: false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !typeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

  rule <method_declaration_ggs3> ?let @lstring inTypeName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $method$
    var typeName = inTypeName
    repeat
    while
      $@type$ ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
      $.$
    end
    $identifier$ ?let @lstring methodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST {
      !isPredefined: false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !typeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $proc$
    <simple_type_definition> !?ioDeclarations ?var typeName
    $.$
    repeat
    while
      <simple_type_definition> !?ioDeclarations ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
      $.$
    end
    $identifier$ ?let @lstring methodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST {
      !isPredefined: false
      !requiresSelfForAccessingProperty: true
      !typeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

  rule <method_declaration> ?let @lstring inTypeName
                            ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $proc$
    $identifier$ ?let @lstring methodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST {
      !isPredefined: false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !inTypeName
      !methodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
//————————————————————————————————————————————————————————————————————————————————————————————————

class @overridingExtensionMethodAST : @semanticDeclarationAST {
  private let @bool requiresSelfForAccessingProperty %initArgLabel
  private let @lstring mTypeName
  private let @lstring mOverridingExtensionMethodName
  private let @formalParameterListAST mOverridingExtensionMethodFormalParameterList
  private let @semanticInstructionListAST mOverridingExtensionMethodInstructionList
  private let @location mEndOfMethodLocation
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION
//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingExtensionMethodAST keyRepresentation -> @string {
  result = "overriding extension method @" + self.mTypeName + " " + self.mOverridingExtensionMethodName
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
  ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
//---
  if not [ioExtensionMethodMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionMethodMapForBuildingContext insertKey
      ! self.mTypeName
      !()
    ]
  end
  with self.mTypeName in !?ioExtensionMethodMapForBuildingContext error message searchKey  do
    [!?mExtensionMethodMapForType insertKey
      !self.mOverridingExtensionMethodName
      ! self.mOverridingExtensionMethodFormalParameterList
      !.isVirtualOverriding
    ]
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST enterDeclarationInSemanticContext
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext unused ioSemanticContext {
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
//--- Useful entities graph
  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !self.mOverridingExtensionMethodName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
//--- Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
//--- Check self type is a class
  if not [[selfType definition].typeKind isClassType] then
    error self.mOverridingExtensionMethodName: "cannot declare a extension method: '@" + [selfType definition].typeName.string + "' is not a class"
  end
//--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMapEntry superType = [selfType definition].superType
  var inheritedSignature = @formalParameterSignature ()
  var @location inheritedDeclarationLocation = @location.here
  loop ([ioTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType definition].instanceMethodMap hasKey !self.mOverridingExtensionMethodName.string] then
      [[superType definition].instanceMethodMap searchKey
        !self.mOverridingExtensionMethodName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?let qualifier
        ?*
      ]
      if qualifier <= @methodQualifier.isBasicFinal then
        baseTypeName = [superType definition].typeName.string
      end
    end
    superType = [superType definition].superType
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionMethodName:"this method is not declared by a super class"
  end
//--- Analyze instruction list
  let analysisContext = @analysisContext {
    !inSemanticContext
    !inPredefinedTypes
    !selfObjectCppName: "this"
    !selfAvailability: .available {!type: selfType !selfMutability: .propertiesAreMutableSelfIsNot}
    !selfObjectCppPrefixForAccessingProperty: "this->"
    !requiresSelfForAccessingProperty: self.requiresSelfForAccessingProperty
  }
  var isclass = false
  if let classType = [[selfType definition].typeKind getClassType] then
    isclass = classType.isReference
  end
  var mutableProperties = @typedPropertyList ()
  var nonMutableProperties = @typedPropertyList ()
  if [selfType definition].typeKind == .structType then
    nonMutableProperties = [selfType definition].allTypedPropertyList
  elsif let classType = [[selfType definition].typeKind getClassType] then
    if classType.isReference then
      mutableProperties = [selfType definition].allTypedPropertyList
    else
      nonMutableProperties = [selfType definition].allTypedPropertyList
    end
  end
  analyzeRoutineBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !?ioTypeMap
    !self.mOverridingExtensionMethodFormalParameterList
    !nonMutablePropertyList: nonMutableProperties
    !mutablePropertyList: mutableProperties
    !self.mOverridingExtensionMethodInstructionList
    !self.mEndOfMethodLocation
    ?let semanticInstructionListForGeneration
    ?let formalParameterListForGeneration
  )
//--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      !self.mOverridingExtensionMethodName.location
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
//---
  ioSemanticDeclarationListForGeneration +=
    !infoMessage: "override extension method " + self.mOverridingExtensionMethodName
    !@overridingExtensionMethodForGeneration {
      !generateHeader: false # Do not generate Cpp header file
      !implementationCppFileName: "method-" + [[selfType definition].typeName.string fileNameRepresentation] + "-" + [self.mOverridingExtensionMethodName fileNameRepresentation]
      !selfType
      !baseTypeName
      !self.mOverridingExtensionMethodName.string
      !formalParameterListForGeneration
      ![selfType definition].allTypedPropertyList
      !semanticInstructionListForGeneration
    }
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
#  ioOverridingExtensionMethodListMap +=
#    !self.mTypeName.string
#    !self.mOverridingExtensionMethodName
  [!?ioOverridingExtensionMethodListMap insertKey
    !self.mTypeName.string
    !self.mOverridingExtensionMethodName
  ]
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

class @overridingExtensionMethodForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string mBaseTypeName
  private let @string mExtensionMethodName
  private let @formalParameterListForGeneration mExtensionMethodFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @overridingExtensionMethodForGeneration headerKind ->@headerKind {
  result = @headerKind.noHeader
}

#·······················································································································

override method @overridingExtensionMethodForGeneration appendSpecificImplementation
                                                            ?let @unifiedTypeMap unused inTypeMap
                                                            ?!@stringset ioInclusionSet
                                                            !@string outImplementation {
  generateExtensionMethodNew (
    !self.mReceiverType
    !?ioInclusionSet
    !self.mExtensionMethodName
    !self.mExtensionMethodFormalParameterList
    !self.mSemanticInstructionListForGeneration
    ?let @string methodImplementation
  )
  outImplementation = [filewrapper semanticComponentGenerationTemplate.overridingExtensionMethodImplementation
    ![self.mReceiverType definition].typeName.string
    !self.mExtensionMethodName
    !methodImplementation
  ]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

