#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingExtensionMethodAST : @semanticDeclarationAST {
  private let @bool requiresSelfForAccessingProperty %selector
  private let @lstring mTypeName
  private let @lstring mOverridingExtensionMethodName
  private let @formalParameterListAST mOverridingExtensionMethodFormalParameterList
  private let @semanticInstructionListAST mOverridingExtensionMethodInstructionList
  private let @location mEndOfMethodLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $method$
    $@type$ ?let @lstring className indexing typeReferenceOverrideExtensionMethodDefinition
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !className
      !mMethodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·····················································································································

  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $method$
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !inClassName
      !mMethodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $proc$
    $@type$ ?let @lstring className indexing typeReferenceOverrideExtensionMethodDefinition
    $.$
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !className
      !mMethodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·····················································································································

  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $proc$
    $identifier$ ?let @lstring mMethodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !inClassName
      !mMethodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingExtensionMethodAST keyRepresentation -> @string {
  result = "overriding extension method @" + self.mTypeName + " " + self.mOverridingExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
#---
  if not [ioExtensionMethodMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionMethodMapForBuildingContext insertKey
      ! self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionMethodMapForBuildingContext error message searchKey  do
    [!?mExtensionMethodMapForType insertKey
      !self.mOverridingExtensionMethodName
      ! self.mOverridingExtensionMethodFormalParameterList
      !.isVirtualOverriding
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext unused ioSemanticContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
#--- Useful entities graph
  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !self.mOverridingExtensionMethodName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap searchKey !self.mTypeName]
#--- Check self type is a class
  if not [[selfType definition].mTypeKindEnum isClassType] then
    error self.mOverridingExtensionMethodName: "cannot declare a extension method: '@" + [selfType definition].mTypeName.string + "' is not a class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMapEntry superType = [selfType definition].mSuperType
  var inheritedSignature = @formalParameterSignature {}
  var @location inheritedDeclarationLocation = @location.here
  loop ([ioTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType definition].mInstanceMethodMap hasKey !self.mOverridingExtensionMethodName.string] then
      [[superType definition].mInstanceMethodMap searchKey
        !self.mOverridingExtensionMethodName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?let qualifier
        ?*
      ]
      if qualifier <= @methodQualifier. isBasicFinal then
        baseTypeName = [superType definition].mTypeName.string
      end
    end
    superType = [superType definition].mSuperType
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionMethodName:"this method is not declared by a super class"
  end
#--- Analyze instruction list
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !"this"
    !selfType: .available {!type: selfType !mutable: false !mutableproperties: true}
    !"this->"
    !requiresSelfForAccessingProperty: self.requiresSelfForAccessingProperty
  }
  var isRefClass = false
  if let [[selfType definition].mTypeKindEnum classType ?isReference: let reference] then
    isRefClass = reference
  end
  var mutableProperties = @typedPropertyList {}
  var nonMutableProperties = @typedPropertyList {}
  if [selfType definition].mTypeKindEnum == .structType then
    nonMutableProperties = [selfType definition].mAllTypedPropertyList
  elsif let [[selfType definition].mTypeKindEnum classType ?isReference: let isReference] then
    if isReference then
      mutableProperties = [selfType definition].mAllTypedPropertyList
    else
      nonMutableProperties = [selfType definition].mAllTypedPropertyList
    end
  end
  analyzeRoutineBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !?ioTypeMap
    !self.mOverridingExtensionMethodFormalParameterList
    !nonMutablePropertyList: nonMutableProperties
    !mutablePropertyList: mutableProperties
    !self.mOverridingExtensionMethodInstructionList
    !self.mEndOfMethodLocation
    ?let semanticInstructionListForGeneration
    ?let formalParameterListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      !self.mOverridingExtensionMethodName.location
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"override extension method " + self.mOverridingExtensionMethodName
    !@overridingExtensionMethodForGeneration.new {
      !false # Do not generate Cpp header file
      !"method-" + [[selfType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mOverridingExtensionMethodName fileNameRepresentation]
      !selfType
      !baseTypeName
      !self.mOverridingExtensionMethodName.string
      !formalParameterListForGeneration
      ![selfType definition].mAllTypedPropertyList
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  ioOverridingExtensionMethodListMap +=
    !self.mTypeName.string
    !self.mOverridingExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingExtensionMethodForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string mBaseTypeName
  private let @string mExtensionMethodName
  private let @formalParameterListForGeneration mExtensionMethodFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @overridingExtensionMethodForGeneration headerKind ->@headerKind {
  result = @headerKind.noHeader
}

#·······················································································································

override method @overridingExtensionMethodForGeneration appendSpecificImplementation
                                                            ?let @unifiedTypeMap unused inTypeMap
                                                            ?!@stringset ioInclusionSet
                                                            !@string outImplementation {
  generateExtensionMethodNew (
    !self.mReceiverType
    !?ioInclusionSet
    !self.mExtensionMethodName
    !self.mExtensionMethodFormalParameterList
    !self.mSemanticInstructionListForGeneration
    ?let @string methodImplementation
  )
  outImplementation = [filewrapper semanticComponentGenerationTemplate.overridingExtensionMethodImplementation
    ![self.mReceiverType definition].mTypeName.string
    !self.mExtensionMethodName
    !methodImplementation
  ] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

