#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingExtensionMethodAST : @semanticDeclarationAST {
  private let @lstring mTypeName
  private let @lstring mOverridingExtensionMethodName
  private let @formalParameterListAST mOverridingExtensionMethodFormalParameterList
  private let @semanticInstructionListAST mOverridingExtensionMethodInstructionList
  private let @location mEndOfMethodLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $method$
    $@type$ ?var  @lstring className indexing typeReferenceOverrideExtensionMethodDefinition
    $identifier$ ?var  @lstring mMethodName indexing overrideExtensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfMethodLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@overridingExtensionMethodAST.new {
      !false # Is not predefined
      !className
      !mMethodName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingExtensionMethodAST keyRepresentation -> @string {
  result = "overriding extension method @" + self.mTypeName + " " + self.mOverridingExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
#--- Useful entities graph
  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !self.mOverridingExtensionMethodName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-entry selfType = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mTypeName}
#--- Check self type is a class
  if not [[selfType mTypeKindEnum] isClassType] then
    error self.mOverridingExtensionMethodName: "cannot declare a extension method: '@" + [selfType key] + "' is not a class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMap-entry superType = [selfType mSuperType]
  var inheritedSignature =@formalParameterSignature {}
  var @location inheritedDeclarationLocation = @location.here
  loop( [inSemanticContext.mTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mInstanceMethodMap] hasKey !self.mOverridingExtensionMethodName.string] then
      var @methodQualifier qualifier
      [[superType mInstanceMethodMap] searchKey
        !self.mOverridingExtensionMethodName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?qualifier
        ?2*
      ]
      if qualifier <= @methodQualifier. isBasicFinal then
        baseTypeName = [superType key]
      end
    end
    superType = [superType mSuperType]
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionMethodName:"this method is not declared by a super class"
  end
#--- Analyze instruction list
  var formalParameterListForGeneration =@formalParameterListForGeneration {}
  var @semanticInstructionListForGeneration semanticInstructionListForGeneration
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !"object"
    !selfType: .available {!type: selfType !mutable: false !mutableproperties: true}
    !"object->"
  }
  var isRefClass = false
  if let [[selfType mTypeKindEnum] classType ?isReference: let reference] then
    isRefClass = reference
  end
  var mutableProperties = @typedPropertyList {}
  var nonMutableProperties = @typedPropertyList {}
  if [selfType mTypeKindEnum] == .structType then
    nonMutableProperties = [selfType mAllTypedPropertyList]
  elsif let [[selfType mTypeKindEnum] classType ?isReference: let isReference] then
    if isReference then
      mutableProperties = [selfType mAllTypedPropertyList]
    else
      nonMutableProperties = [selfType mAllTypedPropertyList]
    end
  end
  analyzeRoutineBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !self.mOverridingExtensionMethodFormalParameterList
    !nonMutablePropertyList: nonMutableProperties
    !mutablePropertyList: mutableProperties
    !self.mOverridingExtensionMethodInstructionList
    !self.mEndOfMethodLocation
    ?semanticInstructionListForGeneration
    ?formalParameterListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      !self.mOverridingExtensionMethodName.location
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"override extension method " + self.mOverridingExtensionMethodName
    !@overridingExtensionMethodForGeneration.new {
      !false # Do not generate Cpp header file
      !"method-" + [[selfType key] fileNameRepresentation] + "-" + [self.mOverridingExtensionMethodName fileNameRepresentation]
      !selfType
      !baseTypeName
      !self.mOverridingExtensionMethodName.string
      !formalParameterListForGeneration
      ![selfType mAllTypedPropertyList]
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingExtensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  ioOverridingExtensionMethodListMap +=
    !self.mTypeName.string
    !self.mOverridingExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingExtensionMethodForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMap-entry mReceiverType
  private let @string mBaseTypeName
  private let @string mExtensionMethodName
  private let @formalParameterListForGeneration mExtensionMethodFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @overridingExtensionMethodForGeneration headerKind ->@headerKind {
  result = @headerKind.noHeader
}

#·······················································································································

override method @overridingExtensionMethodForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  generateExtensionMethod (
    !self.mReceiverType
    !self.mBaseTypeName
    !?ioInclusionSet
    !self.mExtensionMethodName
    !self.mExtensionMethodFormalParameterList
    !self.mSemanticInstructionListForGeneration
    ?let @string methodImplementation
  )
  outImplementation = [filewrapper semanticComponentGenerationTemplate.overridingExtensionMethodImplementation
    ![self.mReceiverType key]
    !self.mExtensionMethodName
    !methodImplementation
  ] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

