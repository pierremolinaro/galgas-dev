#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#
#  semantics definitions for semantics component
#
#  Copyright (C) 2010, ..., 2018 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterClassMethodWithInputArgument
  ?!@classMethodMap ioClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?methodName:let @string inClassMethodName
  ?argType:let @string inArgumentTypeName
  ?argName:let @string inArgumentName
  ?compilerArgument:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inArgumentTypeName ?let argumentTypeIndex]
  var @formalParameterSignature argList = {}
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inArgumentName
  [!?ioClassMethodMap insertOrReplace
    !.new {!inClassMethodName !.here}
    !argList
    !inHasCompilerArgument
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc enterClassMethodWith3InputArguments
  ?!@classMethodMap ioClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?methodName:let @string inClassMethodName
  ?argType1:let @string inArgumentTypeName1
  ?argName1:let @string inArgumentName1
  ?argType2:let @string inArgumentTypeName2
  ?argName2:let @string inArgumentName2
  ?argType3:let @string inArgumentTypeName3
  ?argName3:let @string inArgumentName3
  ?compilerArgument:let @bool inHasCompilerArgument
{
  var @formalParameterSignature argList = {}
#--- Argument 1
  [!?ioUnifiedTypeMap makeEntryFromString !inArgumentTypeName1 ?let argumentTypeIndex1]
  argList += !["" nowhere] !argumentTypeIndex1 !.argumentConstantIn !inArgumentName1
#--- Argument 2
  [!?ioUnifiedTypeMap makeEntryFromString !inArgumentTypeName2 ?let argumentTypeIndex2]
  argList += !["" nowhere] !argumentTypeIndex2 !.argumentConstantIn !inArgumentName2
#--- Argument 3
  [!?ioUnifiedTypeMap makeEntryFromString !inArgumentTypeName3 ?let argumentTypeIndex3]
  argList += !["" nowhere] !argumentTypeIndex3 !.argumentConstantIn !inArgumentName3
#---
  [!?ioClassMethodMap insertOrReplace !.new {!inClassMethodName !.here} !argList !inHasCompilerArgument]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterClassMethodWithStringInputArgument
  ?!@classMethodMap ioClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?classMethod:let @string inClassMethodName
  ?argName:let @string inStringArgumentName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !"string" ?let argumentTypeIndex]
  var @formalParameterSignature argList = {}
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inStringArgumentName
  [!?ioClassMethodMap insertOrReplace
    !.new {!inClassMethodName !.here}
    !argList
    !inHasCompilerArgument
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @stringPredefinedTypeAST getClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@classMethodMap outClassMethodMap
{
  outClassMethodMap = {}
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"deleteFile"
    !argName:"inFilePath"
    !compilerArg:true
  )
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"deleteFileIfExists"
    !argName:"inFilePath"
    !compilerArg:true
  )
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"removeEmptyDirectory"
    !argName:"inDirectoryPath"
    !compilerArg:true
  )
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"removeDirectoryRecursively"
    !argName:"inDirectoryPath"
    !compilerArg:true
  )
  [!?ioUnifiedTypeMap makeEntryFromString !"string" ?let @unifiedTypeMapEntry stringType]
  [!?ioUnifiedTypeMap makeEntryFromString !"bool" ?let @unifiedTypeMapEntry boolType]
#--- Generate file
  var @formalParameterSignature argList = {}
  argList += !["" nowhere] !stringType !@formalArgumentPassingModeAST. argumentConstantIn !"inStartPath"
  argList += !["" nowhere] !stringType !@formalArgumentPassingModeAST. argumentConstantIn !"inFileName"
  argList += !["" nowhere] !stringType !@formalArgumentPassingModeAST. argumentConstantIn !"inContents"
  [!?outClassMethodMap insertOrReplace
    !.new {!"generateFile" !.here}
    !argList
    !true
  ]
#--- Generate file with pattern
  argList = {}
  argList += !["startPath" nowhere] !stringType !.argumentConstantIn !"inStartPath"
  argList += !["fileName" nowhere] !stringType !.argumentConstantIn !"inFileName"
  argList += !["lineComment" nowhere] !stringType !.argumentConstantIn !"inLineCommentPrefix"
  argList += !["header" nowhere] !stringType !.argumentConstantIn !"inHeader"
  argList += !["defaultUserZone1" nowhere] !stringType !.argumentConstantIn !"inDefaultUserZone1"
  argList += !["generatedZone2" nowhere] !stringType !.argumentConstantIn !"inGeneratedZone2"
  argList += !["defaultUserZone2" nowhere] !stringType !.argumentConstantIn !"inDefaultUserZone2"
  argList += !["generatedZone3" nowhere] !stringType !.argumentConstantIn !"inGeneratedZone3"
  argList += !["makeExecutable" nowhere] !boolType !.argumentConstantIn !"inMakeExecutable"
  [!?outClassMethodMap insertOrReplace
    !@lstring.new {!"generateFileWithPattern" !@location.here}
    !argList
    !true
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

