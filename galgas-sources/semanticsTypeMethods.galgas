#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*
#                                                                                                                      *
#  semantics definitions for semantics component                                                                       *
#                                                                                                                      *
#  Copyright (C) 2010, ..., 2018 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@ls2n.fr                                                                                           *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

private proc enterClassMethodWithInputArgument
  ?!@classMethodMap ioClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?methodName:let @string inClassMethodName
  ?argType:let @string inArgumentTypeName
  ?argName:let @string inArgumentName
  ?compilerArgument:let @bool inHasCompilerArgument
{
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inArgumentTypeName ?let argumentTypeIndex]
  @formalParameterSignature argList = {}
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inArgumentName
  [!?ioClassMethodMap insertOrReplace
    !.new {!inClassMethodName !.here}
    !argList
    !inHasCompilerArgument
  ]
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

private proc enterClassMethodWith3InputArguments
  ?!@classMethodMap ioClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?methodName:let @string inClassMethodName
  ?argType1:let @string inArgumentTypeName1
  ?argName1:let @string inArgumentName1
  ?argType2:let @string inArgumentTypeName2
  ?argName2:let @string inArgumentName2
  ?argType3:let @string inArgumentTypeName3
  ?argName3:let @string inArgumentName3
  ?compilerArgument:let @bool inHasCompilerArgument
{
  @formalParameterSignature argList = {}
#--- Argument 1
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inArgumentTypeName1 ?let argumentTypeIndex1]
  argList += !["" nowhere] !argumentTypeIndex1 !.argumentConstantIn !inArgumentName1
#--- Argument 2
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inArgumentTypeName2 ?let argumentTypeIndex2]
  argList += !["" nowhere] !argumentTypeIndex2 !.argumentConstantIn !inArgumentName2
#--- Argument 3
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inArgumentTypeName3 ?let argumentTypeIndex3]
  argList += !["" nowhere] !argumentTypeIndex3 !.argumentConstantIn !inArgumentName3
#---
  [!?ioClassMethodMap insertOrReplace !.new {!inClassMethodName !.here} !argList !inHasCompilerArgument]
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

private proc enterClassMethodWithStringInputArgument
  ?!@classMethodMap ioClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?classMethod:let @string inClassMethodName
  ?argName:let @string inStringArgumentName
  ?compilerArg:let @bool inHasCompilerArgument
{
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !"string" ?let argumentTypeIndex]
  @formalParameterSignature argList = {}
  argList += !["" nowhere] !argumentTypeIndex !.argumentConstantIn !inStringArgumentName
  [!?ioClassMethodMap insertOrReplace
    !.new {!inClassMethodName !.here}
    !argList
    !inHasCompilerArgument
  ]
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @uintPredefinedTypeAST getClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@classMethodMap outClassMethodMap
{
  outClassMethodMap = {}
  enterClassMethodWithInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !methodName:"setRandomSeed"
    !argType:"uint"
    !argName:"inSeed"
    !compilerArgument:false
  )
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @applicationPredefinedTypeAST getClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@classMethodMap outClassMethodMap
{
  outClassMethodMap = {}
  enterClassMethodWith3InputArguments (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !methodName:"setBoolOptionValue"
    !argType1:"string"
    !argName1:"inDomain"
    !argType2:"string"
    !argName2:"inIdentifier"
    !argType3:"bool"
    !argName3:"inValue"
    !compilerArgument:false
  )
  enterClassMethodWith3InputArguments (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !methodName:"setUIntOptionValue"
    !argType1:"string"
    !argName1:"inDomain"
    !argType2:"string"
    !argName2:"inIdentifier"
    !argType3:"uint"
    !argName3:"inValue"
    !compilerArgument:false
  )
  enterClassMethodWith3InputArguments (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !methodName:"setStringOptionValue"
    !argType1:"string"
    !argName1:"inDomain"
    !argType2:"string"
    !argName2:"inIdentifier"
    !argType3:"string"
    !argName3:"inValue"
    !compilerArgument:false
  )
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @stringPredefinedTypeAST getClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@classMethodMap outClassMethodMap
{
  outClassMethodMap = {}
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"deleteFile"
    !argName:"inFilePath"
    !compilerArg:true
  )
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"deleteFileIfExists"
    !argName:"inFilePath"
    !compilerArg:true
  )
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"removeEmptyDirectory"
    !argName:"inDirectoryPath"
    !compilerArg:true
  )
  enterClassMethodWithStringInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !classMethod:"removeDirectoryRecursively"
    !argName:"inDirectoryPath"
    !compilerArg:true
  )
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !"string" ?let @unifiedTypeMap-proxy stringType]
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !"bool" ?let @unifiedTypeMap-proxy boolType]
#--- Generate file
  @formalParameterSignature argList = {}
  argList += !["" nowhere] !stringType !@formalArgumentPassingModeAST. argumentConstantIn !"inStartPath"
  argList += !["" nowhere] !stringType !@formalArgumentPassingModeAST. argumentConstantIn !"inFileName"
  argList += !["" nowhere] !stringType !@formalArgumentPassingModeAST. argumentConstantIn !"inContents"
  [!?outClassMethodMap insertOrReplace
    !.new {!"generateFile" !.here}
    !argList
    !true
  ]
#--- Generate file with pattern
  argList = {}
  argList += !["startPath" nowhere] !stringType !.argumentConstantIn !"inStartPath"
  argList += !["fileName" nowhere] !stringType !.argumentConstantIn !"inFileName"
  argList += !["lineComment" nowhere] !stringType !.argumentConstantIn !"inLineCommentPrefix"
  argList += !["header" nowhere] !stringType !.argumentConstantIn !"inHeader"
  argList += !["defaultUserZone1" nowhere] !stringType !.argumentConstantIn !"inDefaultUserZone1"
  argList += !["generatedZone2" nowhere] !stringType !.argumentConstantIn !"inGeneratedZone2"
  argList += !["defaultUserZone2" nowhere] !stringType !.argumentConstantIn !"inDefaultUserZone2"
  argList += !["generatedZone3" nowhere] !stringType !.argumentConstantIn !"inGeneratedZone3"
  argList += !["makeExecutable" nowhere] !boolType !.argumentConstantIn !"inMakeExecutable"
  [!?outClassMethodMap insertOrReplace
    !@lstring.new {!"generateFileWithPattern" !@location.here}
    !argList
    !true
  ]
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

override method @binarysetPredefinedTypeAST getClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@classMethodMap outClassMethodMap
{
  outClassMethodMap = {}
  enterClassMethodWithInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !methodName:"setNodeTableSize"
    !argType:"uint"
    !argName:"inTableSize"
    !compilerArgument:false
  )
  enterClassMethodWithInputArgument (
    !?outClassMethodMap
    !?ioUnifiedTypeMap
    !methodName:"setAndTableSize"
    !argType:"uint"
    !argName:"inTableSize"
    !compilerArgument:false
  )
}

#——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————*

