#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
#!  SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $enum$
    $@type$ ?let enumTypeName indexing enumDefinition
    var @structComparison comparison = .none
    repeat
    while
      $%comparable$
      switch comparison
      case none :
        comparison = .comparable
      case comparable :
        error .here : "duplicated attribute"
      case equatable :
        error .here : "%comparable and %equatable are mutually exclusive"
      end
    while
      $%equatable$
      switch comparison
      case none :
        comparison = .equatable
      case equatable :
        error .here : "duplicated attribute"
      case comparable :
        error .here : "%comparable and %equatable are mutually exclusive"
      end
    end
    ${$
    var @enumConstantList constantList = ()
    repeat
    while
      $case$
      $identifier$ ?let constantName
      var [@associatedValue] associatedValueTypeList = ()
      select
      or
        $($
        repeat
          let @bool weakQualifier
          select
            weakQualifier = false
          or
            $weak$
            weakQualifier = true
          end
          <type_definition_ggs3> !?ioDeclarations ?let associatedValueType
          $identifier$ ?let associatedValueName
          [!?associatedValueTypeList append !.init (weakQualifier, associatedValueType, associatedValueName)]
        while
        end
        $)$
      end
      constantList += !constantName !associatedValueTypeList
    while
      <method_declaration_ggs3> !enumTypeName !?ioDeclarations
    end
    $}$
    if [constantList count] == 0 then
      error enumTypeName : "an enumerated type must define at least one case constant"
    end
    ioDeclarations.mDeclarationList += !@enumDeclarationAST {
      !isPredefined: false # Is not predefined
      !enumTypeName
      !constantList
      !comparison: comparison
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $enum$
    $@type$ ?let enumTypeName indexing enumDefinition
    var @structComparison comparison = .none
    repeat
    while
      $%comparable$
      switch comparison
      case none :
        comparison = .comparable
      case comparable :
        error .here : "duplicated attribute"
      case equatable :
        error .here : "%comparable and %equatable are mutually exclusive"
      end
    while
      $%equatable$
      switch comparison
      case none :
        comparison = .equatable
      case equatable :
        error .here : "duplicated attribute"
      case comparable :
        error .here : "%comparable and %equatable are mutually exclusive"
      end
    end
    ${$
    var @enumConstantList constantList = ()
    repeat
    while
      $case$
      $identifier$ ?let constantName
      var [@associatedValue] associatedValueTypeList = ()
      select
      or
        $($
        repeat
          let @bool weakQualifier
          select
            weakQualifier = false
          or
            $weak$
            weakQualifier = true
          end
          <type_definition> !?ioDeclarations ?let associatedValueType
          $identifier$ ?let associatedValueName
          [!?associatedValueTypeList append !.init (weakQualifier, associatedValueType, associatedValueName)]
        while
          $,$
        end
        $)$
      end
      constantList += !constantName !associatedValueTypeList
    while
      <method_declaration> !enumTypeName !?ioDeclarations
    end
    $}$
    if [constantList count] == 0 then
      error enumTypeName : "an enumerated type must define at least one case constant"
    end
    ioDeclarations.mDeclarationList += !@enumDeclarationAST {
      !isPredefined: false # Is not predefined
      !enumTypeName
      !constantList
      !comparison: comparison
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
//————————————————————————————————————————————————————————————————————————————————————————————————

struct @associatedValue {
  public let @bool weakQualifier
  public let @lstring typeName
  public let @lstring valueName
}

//————————————————————————————————————————————————————————————————————————————————————————————————

list @enumConstantList {
  public let @lstring name
  public let [@associatedValue] associatedValueTypeList
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @enumDeclarationAST : @semanticDeclarationAST {
  private let @lstring enumTypeName
  private let @enumConstantList mConstantList
  private let @structComparison comparison %initArgLabel

  //······························································································

  override getter keyRepresentation -> @string {
    result = "enum @" + self.enumTypeName
  }

  //······························································································

  override method addAssociatedElement ?!@galgasDeclarationAST ioDeclarations {
    for constant in self.mConstantList do
      if [constant.associatedValueTypeList count] > 0 then
        let associatedTypeName = @lstring (
          makeEmbeddedTypeName (!outer: self.enumTypeName !inner: constant.name),
          constant.name
        )
        var @propertyInCollectionListAST propertyListAST = ()
        for associatedValue in constant.associatedValueTypeList do
          let associatedValueTypeName = if associatedValue.weakQualifier
            then makeWeakTypeLName (associatedValue.typeName)
            else associatedValue.typeName
          end
          propertyListAST +=
            !mutability: .constantProperty
            !associatedValueTypeName
            !associatedValue.valueName
            !.publicAccess
            !hasSelector: false
            !initialization: .none
        end
        let s = @structDeclarationAST (
          !isPredefined: false,
          associatedTypeName,
          propertyListAST,
          !enumeratedElementTypeName: "",
          !comparison: self.comparison,
          !isUsefullStruct: true
        )
        ioDeclarations.mDeclarationList += !s
        [!?ioDeclarations getOptionalTypeName
          ?*
          !forTypeNamed: associatedTypeName
          !isPredefined: false
        ]
      end
    end
  }

  //······························································································

  override method enterDeclarationInGraph
        ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
        ?!@equatableExtensionMap unused ioEquatableExtensionMap
        ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
        ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
        ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
        ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
        ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
    let key = @lstring {!"@" + self.enumTypeName !self.enumTypeName.location}
    [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  //--- There is a circular reference if all constants names current type in associated values
    var circularReference = true
    for constant in self.mConstantList while circularReference do
      var namesCurrentType = false
      for associatedValue in constant.associatedValueTypeList while not namesCurrentType do
        let propertyKey = @lstring {!"@" + associatedValue.typeName !associatedValue.typeName}
        if propertyKey.string == key.string then
          namesCurrentType = true
        end
      end
      if not namesCurrentType then
        circularReference = false
      end
    end
  //--- Enter dependances, and only when there is circular reference
    if circularReference then
      for constant in self.mConstantList do
        for associatedValue in constant.associatedValueTypeList do
          let propertyKey = @lstring {!"@" + associatedValue.typeName !associatedValue.typeName}
          if (propertyKey.string != key.string) then
            [!?ioSemanticTypePrecedenceGraph addEdge !key !propertyKey]
          end
        end
      end
    end
  }

  //······························································································

  override method enterDeclarationInSemanticContext
        ?!@equatableExtensionMap ioEquatableExtensionMap
        ?let @extensionInitializerForBuildingContext inExtensionInitializerMapForBuildingContext
        ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
        ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
        ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
        ?!@unifiedTypeMap ioTypeMap
        ?!@semanticContext ioSemanticContext {
  //---
    var @classFunctionMap classFunctionMap = ()
    var @setterMap setterMap = ()
  //--- currentType type index
    [!?ioTypeMap makeEntry !self.enumTypeName ?let enumTypeEntry]
  //--- Class functions
    var @constantIndexMap constantMap = ()
    var @bool hasAssociatedValues = false
    for constant in self.mConstantList do
      var @associatedValueDescriptorList associatedTypeList = ()
      var @functionSignature argumentTypeList = ()
      for associatedValue in constant.associatedValueTypeList do
        [!?ioTypeMap makeEntry !associatedValue.typeName ?let associatedTypeEntry]
        argumentTypeList += !associatedValue.valueName !associatedTypeEntry !associatedValue.typeName.string !true
        associatedTypeList += !associatedTypeEntry !associatedValue.valueName
        hasAssociatedValues = true
      end
      [!?constantMap insertKey !constant.name ![constantMap count] !associatedTypeList]
      [!?classFunctionMap insertOrReplace
        !constant.name
        !argumentTypeList
        !false
        !enumTypeEntry
      ]
    end
  //--- Methods
    var @instanceMethodMap instanceMethodMap = ()
    for constant in self.mConstantList do
      if [constant.associatedValueTypeList count] > 0 then
        var @unifiedTypeMapEntryList associatedTypeList = ()
        var @formalParameterSignature argumentTypeList = ()
        for associatedValue in constant.associatedValueTypeList do
          [!?ioTypeMap makeEntry !associatedValue.typeName ?let associatedTypeEntry]
          argumentTypeList += !associatedValue.valueName !associatedTypeEntry !.argumentOut !associatedValue.typeName.string
          associatedTypeList += !associatedTypeEntry
          hasAssociatedValues = true
        end
        [!?instanceMethodMap insertKey
          !.init ("extract" + [constant.name stringByCapitalizingFirstCharacter], constant.name)
          !.definedAsMember
          !argumentTypeList
          !constant.name.location
          !true
          !.isBasicFinal
          !""
        ]
      end
    end
  //--- getters
    commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap)
    for constant in self.mConstantList do
      if [constant.associatedValueTypeList count] > 0 then
        let associatedTypeName = makeEmbeddedTypeName (!outer: self.enumTypeName !inner: constant.name)
        let optionalTypeName = makeOptionalTypeName (!forTypeNamed: associatedTypeName)
        enterBaseGetterWithoutArgument (
          !?getterMap
          !?ioTypeMap
          !getterName: "get" + [constant.name stringByCapitalizingFirstCharacter]
          !obsoleteName: ""
          !returnedTypeName: optionalTypeName
          !hasCompilerArgument: false
        )
      end
    end
  //--- Add test getters
    for constant in self.mConstantList do
      enterBaseGetterWithoutArgument (
        !?getterMap
        !?ioTypeMap
        !getterName: "is" + [constant.name stringByCapitalizingFirstCharacter]
        !obsoleteName: ""
        !returnedTypeName: "bool"
        !hasCompilerArgument:false
      )
    end
  //--- Add Extensions
    var @initializerMap initializerMap = ()
    addExtensions (
      !inExtensionInitializerMapForBuildingContext
      !inExtensionMethodMapForBuildingContext
      !inExtensionGetterMapForBuildingContext
      !inExtensionSetterMapForBuildingContext
      !?ioSemanticContext
      !?ioTypeMap
      !self.enumTypeName
      !isClass: false
      !?initializerMap
      !?getterMap
      !?setterMap
      !?instanceMethodMap
      !acceptSetters: true
    )
  //--- Features
    var features = @typeFeatures.generateDescriptionGetterUtilityMethod
  //--- Comparison
    switch self.comparison
    case none :
    case equatable :
      features |= .equatable
    case comparable :
      features |= .comparable | .equatable
    end  
    handleEquatableComparableExtension (
      !?ioEquatableExtensionMap
      !self.enumTypeName
      !?features
      !acceptEquatable: true
      !acceptComparable: true
    )
  //--- Enter type in type map
    let typeDefinition = @unifiedTypeDefinition {
      !typeName: self.enumTypeName
      !isPredefined: self.isPredefined
      !isConcrete: true
      !superType: .null
      !typeKind: .enumType {!constantMap: constantMap}
      !supportCollectionValue: false # Does not support collection value
      !allTypedPropertyList: ()
      !propertyMap: ()
      !currentTypedPropertyList: ()
      !initializerMap: initializerMap
      !classFunctionMap: classFunctionMap
      !getterMap: getterMap
      !setterMap: setterMap
      !instanceMethodMap: instanceMethodMap
      !classMethodMap: ()
      !unwrappedType: .null
      !readSubscriptMap: ()
      !enumerationDescriptorList: ()
      !features: features
      !addAssignOperatorArguments: ()
      !mapSearchMethodList: ()
      !generateHeaderInSeparateFile: false # Do not generate header in separate file
      !typeForEnumeratedElement: .null
      !headerFileName: "enum-" + [self.enumTypeName fileNameRepresentation]
      !headerKind: .oneHeader
    }
    [!?ioTypeMap insertType !typeDefinition.typeName !typeDefinition]
  }

  //······························································································

  override method semanticAnalysis
                    ?!@lstringlist ioUsefulnessRootEntities
                    ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                    ?let @string unused inProductDirectory
                    ?let @semanticContext unused inSemanticContext
                    ?!@unifiedTypeMap ioTypeMap
                    ?let @predefinedTypes unused inPredefinedTypes
                    ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
  //--- Useful entities graph
    let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.enumTypeName)
    [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
    if self.isPredefined  then
      ioUsefulnessRootEntities += !nameForUsefulness
    end
  //--- Constant list
    var [@unifiedTypeMapEntry] associatedValuesTypes = ()
    var constantList = @stringlist ()
    var @enumConstantListForGeneration enumConstantListForGeneration = ()
    var constantMap = @constantIndexMap ()
    for constant in self.mConstantList do
      if [constant.associatedValueTypeList count] > 0 then
        let associatedTypeName = makeEmbeddedTypeName (!outer: self.enumTypeName !inner: constant.name)
        let optionalTypeName = makeOptionalTypeName (!forTypeNamed: associatedTypeName)
        let associatedType = [ioTypeMap typeMapEntryForLKey !.init (optionalTypeName, constant.name)]
        [!?associatedValuesTypes append !associatedType]    
      end
      constantList += !constant.name.string
      var @associatedValueDescriptorList associatedTypeList = ()
      var @stringset associatedValueNameSet = ()
      for associatedValue in constant.associatedValueTypeList do
        let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!associatedValue.typeName)
        [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !propertyTypeNameForUsefulness]
        let associatedTypeEntry = [ioTypeMap typeMapEntryForLKey !associatedValue.typeName]
        associatedTypeList += !associatedTypeEntry !associatedValue.valueName
        if [associatedValueNameSet hasKey !associatedValue.valueName.string] then
          error associatedValue.valueName : "duplicated name"
        end
        associatedValueNameSet += !associatedValue.valueName.string
      //--- Comparison
        switch self.comparison
        case none :
        case equatable :
          let associatedType = [associatedTypeEntry definition]
          if (not [associatedType.features contains !.comparable])
            & not [associatedType.features contains !.equatable]
            & not [associatedType.features contains !.referenceEquatable] then
            error associatedValue.typeName : "the @" + associatedValue.typeName + " should be equatable"
          end
        case comparable :
          let associatedType = [associatedTypeEntry definition]
          if not [associatedType.features contains !.comparable] then
            error associatedValue.typeName : "the @" + associatedValue.typeName + " should be comparable"
          end
        end  
      end
      [!?constantMap insertKey !constant.name ![constantMap count] !associatedTypeList]
      enumConstantListForGeneration += !constant.name.string !associatedTypeList
    end
  //---
    let selfType = [ioTypeMap typeMapEntryForLKey !self.enumTypeName]
    ioSemanticDeclarationListForGeneration +=
      !infoMessage: "enum " + self.enumTypeName
      !@enumTypeForGeneration {
        !selfType
        !enumConstantListForGeneration
        !associatedValuesTypes
      }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#!  CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

list @enumConstantListForGeneration {
  public let @string name
  public let @associatedValueDescriptorList associatedValueTypeList
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @enumTypeForGeneration : @semanticTypeForGeneration {
  private let @enumConstantListForGeneration constantList
  private let [@unifiedTypeMapEntry] associatedValuesTypes

  //······························································································

  override method appendDeclaration1 ?!@stringset unused ioInclusionSet
                                     !@string outHeader {
    var @bool hasAssociatedValues = false
    for constant in self.constantList while not hasAssociatedValues do
      hasAssociatedValues = [constant.associatedValueTypeList count] > 0
    end
    let selfTypeDefinition = [self.mSelfTypeEntry definition]
    outHeader = [filewrapper enumGenerationTemplate.enumTypeHeader1
      !selfTypeDefinition.typeName.string
      ![selfTypeDefinition.typeName.string identifierRepresentation]
      !self.constantList
      !hasAssociatedValues
    ]
    outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
      !selfTypeDefinition.typeName.string
      ![selfTypeDefinition.typeName.string identifierRepresentation]
      !selfTypeDefinition.isConcrete
      !selfTypeDefinition.initializerMap
      !selfTypeDefinition.classFunctionMap
      !selfTypeDefinition.getterMap
      !selfTypeDefinition.setterMap
      !selfTypeDefinition.instanceMethodMap
      !selfTypeDefinition.classMethodMap
      !selfTypeDefinition.readSubscriptMap
      !selfTypeDefinition.enumerationDescriptorList
      !selfTypeDefinition.features
      !selfTypeDefinition.addAssignOperatorArguments
      !selfTypeDefinition.typeForEnumeratedElement
      !selfTypeDefinition.supportCollectionValue
    ]
  }

  //······························································································

  override method appendSpecificImplementation ?let @unifiedTypeMap unused inTypeMap
                                                ?!@stringset ioInclusionSet
                                                !@string outImplementation {
    for type in self.associatedValuesTypes do
      [type addHeaderFileName !?ioInclusionSet]
    end
    var @bool hasAssociatedValues = false
    for constant in self.constantList while not hasAssociatedValues do
      hasAssociatedValues = [constant.associatedValueTypeList count] > 0
    end
    [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
    let selfTypeDefinition = [self.mSelfTypeEntry definition]
    outImplementation = [filewrapper enumGenerationTemplate.enumTypeSpecificImplementation
      !selfTypeDefinition.typeName.string
      ![selfTypeDefinition.typeName.string identifierRepresentation]
      !self.constantList
      !hasAssociatedValues
      ![selfTypeDefinition.features generateCppObjectComparison]
    ]
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper enumGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template enumTypeHeader1 "GALGAS_enum.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@enumConstantListForGeneration CONSTANT_LIST
    ?@bool HAS_ASSOCIATED_VALUES

  template enumTypeSpecificImplementation "GALGAS_enum.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@enumConstantListForGeneration CONSTANT_LIST
    ?@bool HAS_ASSOCIATED_VALUES
    ?@bool GENERATE_COMPARISON
}

//————————————————————————————————————————————————————————————————————————————————————————————————

