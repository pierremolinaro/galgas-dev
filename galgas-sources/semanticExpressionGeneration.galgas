#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#  Generate predefined types                                                                                           *
#                                                                                                                      *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@ls2n.fr                                                                                           *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#           D E T E C T    ' T R U E '    E X P R E S S I O N                                                          *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @semanticExpressionForGeneration isTrueExpression -> @bool {
  result = false
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @trueExpressionForGeneration isTrueExpression ->@bool {
  result = true
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#           E X P R E S S I O N    G E N E R A T I O N                                                                 *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfCopyInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string] ioTemporaryVariableIndex ++
  ioGeneratedCode += "const GALGAS_" + [mResultType identifierRepresentation] + " " + outCppExpression + " = " + mSelfCppName + " ;\n"
  [!?ioUnusedVariableCppNameSet removeKey !mSelfCppName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @defaultConstructorExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [mResultType addHeaderFileName !?ioInclusionSet]
  outCppExpression =
    "GALGAS_"  + [mResultType identifierRepresentation]
  + "::constructor_"
  + [[mResultType mDefaultConstructorName] identifierRepresentation]
  + " (" + [mLocation sourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @constructorExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [mResultType addHeaderFileName !?ioInclusionSet]
  @stringlist parameterList = {}
  for () in mEffectiveParameterList do
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet 
      ?let @string parameter
    ]
    parameterList += !parameter  
  end
  outCppExpression = "GALGAS_"  + [mConstructorType identifierRepresentation]
                   + "::constructor_" + [mConstructorName identifierRepresentation]
                   + " ("
  for () in parameterList
    do outCppExpression += mValue
    between outCppExpression += ", "
  end
  @bool needsComma = [parameterList length] > 0
  if mHasCompilerArgument then
    if needsComma then
      outCppExpression += ", "
    end
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    outCppExpression += compilerCppName ()
    needsComma = true
  end
  if needsComma then
    outCppExpression += " " + [mLocation commaSourceFile] + ")"
  else
    outCppExpression += [mLocation sourceFile] + ")"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! option

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionValueExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_" + [mResultType identifierRepresentation] + " (gOption_" + [mOptionComponentName identifierRepresentation]
                   + "_" + [mOptionEntryName identifierRepresentation] + ".getter_value ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionCharExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_char (gOption_" + [mOptionComponentName identifierRepresentation]
                  + "_" + [mOptionEntryName identifierRepresentation] + ".getter_char ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "GALGAS_string (gOption_" + [mOptionComponentName identifierRepresentation]
                  + "_" + [mOptionEntryName identifierRepresentation] + ".getter_string ())"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionCommentExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" + [mOptionComponentName fileNameRepresentation]
  end
  outCppExpression = "gOption_" + [mOptionComponentName identifierRepresentation]
                  + "_" + [mOptionEntryName identifierRepresentation] + ".getter_comment ()"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @orExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  @string leftTemporaryOperand
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand]
#--- Right operand
  @string rightTemporaryOperand
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".operator_or ("
                   + rightTemporaryOperand  + [mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @orShortExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string leftTemporaryOperand
  ]
#--- Generate Comparison
  let testVar = "test_" + [ioTemporaryVariableIndex string] ioTemporaryVariableIndex ++
  ioGeneratedCode += "GALGAS_bool " + testVar + " = " + leftTemporaryOperand + " ;\n"
  ioGeneratedCode += "if (kBoolTrue != " + testVar + ".boolEnum ()) {\n"
#--- Right operand
  [!?ioGeneratedCode incIndentation !2]
  [mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string rightTemporaryOperand
  ]
  ioGeneratedCode += testVar + " = " + rightTemporaryOperand + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  outCppExpression = testVar
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @xorExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let leftTemporaryOperand
  ]
#--- Right operand
  [mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".operator_xor ("
                  +  rightTemporaryOperand + [mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @closedSliceExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let leftTemporaryOperand
  ]
#--- Right operand
  [mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Generate Comparison
  outCppExpression = 
   "GALGAS_range (" + leftTemporaryOperand + ", "
   +  rightTemporaryOperand + ".substract_operation (" + leftTemporaryOperand + ", " + compilerCppName () + [mLocation commaSourceFile] + ").add_operation (GALGAS_uint (1), " + compilerCppName () + [mLocation commaSourceFile] + "))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @openedSliceExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let leftTemporaryOperand
  ]
#--- Right operand
  [mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Generate Comparison
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression = 
   "GALGAS_range (" + leftTemporaryOperand + ", "
   +  rightTemporaryOperand + ".substract_operation (" + leftTemporaryOperand + ", " + compilerCppName ()
   + [mLocation commaSourceFile] + "))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @andExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string leftTemporaryOperand
  ]
#--- Right operand
  [mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string rightTemporaryOperand
  ]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".operator_and ("
                  + rightTemporaryOperand + [mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @andShortExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [mLeftExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string leftTemporaryOperand
  ]
#--- Generate Comparison
  let testVar = "test_" + [ioTemporaryVariableIndex string] ioTemporaryVariableIndex ++
  ioGeneratedCode += "GALGAS_bool " + testVar + " = " + leftTemporaryOperand + " ;\n"
  ioGeneratedCode += "if (kBoolTrue == " + testVar + ".boolEnum ()) {\n"
#--- Right operand
  [!?ioGeneratedCode incIndentation !2]
  [mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string rightTemporaryOperand
  ]
  ioGeneratedCode += testVar + " = " + rightTemporaryOperand + " ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
  outCppExpression = testVar
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @multiplicationExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  @string leftTemporaryOperand
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand]
#--- Right operand
  @string rightTemporaryOperand
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".multiply_operation ("
                  + rightTemporaryOperand + ", " + compilerCppName () + [mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @multiplicationExpressionNoOverflowForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  @string leftTemporaryOperand
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand]
#--- Right operand
  @string rightTemporaryOperand
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".multiply_operation_no_ovf (" + rightTemporaryOperand + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @divisionExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  @string leftTemporaryOperand
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand]
#--- Right operand
  @string rightTemporaryOperand
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".divide_operation ("
                  + rightTemporaryOperand + ", " + compilerCppName () + [mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @divisionExpressionNoOverflowForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  @string leftTemporaryOperand
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand]
#--- Right operand
  @string rightTemporaryOperand
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".divide_operation_no_ovf (" + rightTemporaryOperand + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @moduloExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mLeftExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  @string leftTemporaryOperand
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand]
#--- Right operand
  @string rightTemporaryOperand
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand]
#--- Generate Comparison
  outCppExpression = leftTemporaryOperand + ".modulo_operation ("
                  + rightTemporaryOperand + ", " + compilerCppName () + [mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @unaryMinusExpressionNoOverflowForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string operand
  ]
#--- Generate Comparison
  outCppExpression = operand + ".operator_unary_minus_no_ovf ()"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @notExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Operand
  @string operand
  [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?operand]
#--- Generate
  outCppExpression = operand + ".operator_not (" + [mLocation sourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structFieldAccessExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [mResultType addHeaderFileName !?ioInclusionSet]
#--- Operand
  [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let @string operand]
#--- Generate
  outCppExpression = operand + ".getter_" + [mStructFieldName identifierRepresentation] + " (HERE)"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @tildeExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[mExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Operand
  @string operand
  [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?operand]
#--- Generate
  outCppExpression = operand + ".operator_tilde (" + [mLocation sourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalTypeInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [mLiteralType addHeaderFileName !?ioInclusionSet]
  outCppExpression = "GALGAS_type (& kTypeDescriptor_GALGAS_"
                  + [[mLiteralType key] identifierRepresentation] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extractObjectInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string] ioTemporaryVariableIndex ++
#--- Receiver expression
  [mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?var @string receiverExpression
  ]
#--- Generate code
  outCppExpression = "GALGAS_" + [mResultType identifierRepresentation]
  + "::extractObject (" + receiverExpression
  + ", " + compilerCppName ()
  + [mLocation commaSourceFile] + ")"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Appels
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @getterCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
#--- Add return type header
  [mResultType addHeaderFileName !?ioInclusionSet]
#--- Receiver expression
  [mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverCppName
  ]
#--- Reader operands
  @stringlist getterArgumentCppNameList = {}
  for () in mExpressions do
    @string argumentCppName
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?argumentCppName
    ]
    getterArgumentCppNameList += !argumentCppName
  end
#--- Generate Reader call
  switch mKind
  case definedAsExtension :
   [[[mReceiverExpression mResultType] baseType] addHeaderFileName !?ioInclusionSet]
    @unifiedTypeMap-proxy baseType = [mReceiverExpression mResultType]
    @bool searching = true
    loop (@uint.max) while searching do
      if not [[baseType mSuperType] isNull] then
        if [[[baseType mSuperType] mGetterMap] hasKey !mGetterName] then
          baseType = [baseType mSuperType]
        else
          searching = false
        end
      else
        searching = false
      end  
    end
    ioInclusionSet += !"getter-" + [[baseType key] fileNameRepresentation] + "-" + [mGetterName fileNameRepresentation]
    [!?ioUnusedVariableCppNameSet removeKey !receiverCppName]
    if [[[mReceiverExpression mResultType] mTypeKindEnum] isClassType] then
      outCppExpression = "callExtensionGetter_" + [mGetterName identifierRepresentation]
         + " ((const cPtr_" + [[mReceiverExpression mResultType] identifierRepresentation] + " *) " + receiverCppName + ".ptr (), "
    else
      [[mReceiverExpression mResultType] addHeaderFileName !?ioInclusionSet]
      outCppExpression = "extensionGetter_" + [mGetterName identifierRepresentation] + " (" + receiverCppName + ", "
    end
  case definedAsMember :
    outCppExpression = receiverCppName
    for () in mFieldList do
      outCppExpression += ".getter_" + [mValue identifierRepresentation] + " (HERE)"
    end
    [mResultType addHeaderFileName !?ioInclusionSet]
    outCppExpression +=  ".getter_" + [mGetterName identifierRepresentation] + " ("
  end
  for () in getterArgumentCppNameList
    do outCppExpression += mValue
    between outCppExpression += ", "
  end
  if [getterArgumentCppNameList length] == 0 then
    if mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
      outCppExpression += compilerCppName () + " COMMA_"
    end
  elsif mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    outCppExpression += ", " + compilerCppName () + " COMMA_"
  else
    outCppExpression += " COMMA_"
  end
  outCppExpression += [mLocation sourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @functionCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
#--- Add return type header
  [mResultType addHeaderFileName !?ioInclusionSet]
#--- Add function header
  ioInclusionSet += !"func-" + [mFunctionName fileNameRepresentation]
#---
  var parameterList =@stringlist {}
  for () in mExpressions do
    @string parameter
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?parameter]
    parameterList += !parameter  
  end
  outCppExpression = "function_" + [mFunctionName identifierRepresentation] + " ("
  for () in parameterList
    do outCppExpression += mValue + ", "
  end
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression += compilerCppName ()
  outCppExpression += [mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Filewrapper
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  ioInclusionSet += !"filewrapper-" + mFilewrapperName
  outCppExpression = "GALGAS_filewrapper (gWrapperDirectory_0_" + [mFilewrapperName identifierRepresentation] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperTemplateInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  ioInclusionSet += !"filewrapper-" + mFilewrapperName
  var parameterList =@stringlist {}
  for () in mActualOutputParameterList do
    @string parameter
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?parameter
    ]
    parameterList += !parameter  
  end
  outCppExpression = "GALGAS_string (filewrapperTemplate_" + [mFilewrapperName identifierRepresentation] + "_" + [mFilewrapperTemplateName identifierRepresentation]
                  + " (" + compilerCppName ()
  for () in parameterList do
    outCppExpression += ", " + mValue
  end
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  outCppExpression += [mLocation commaSourceFile] + "))"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperStaticPathInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  ioInclusionSet += !"filewrapper-" + mFilewrapperName
  outCppExpression = if mIsTextFile then "GALGAS_string" else "GALGAS_data" end
  outCppExpression += " (gWrapperFileContent_" + [mFilewrapperFileIndex string] + "_" + [mFilewrapperName identifierRepresentation] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Lexique introspection
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexiqueIntrospectionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  ioInclusionSet += !"lexique-" + [mLexiqueComponentName fileNameRepresentation]
  outCppExpression = "C_Lexique_" + [mLexiqueComponentName identifierRepresentation] + "::"
  + [mLexiqueGetterName identifierRepresentation]
  + "(" + [mLocation sourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! Collection value
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractCollectionValueElementForGeneration generateCollectionElementCode
  ?let @unifiedTypeMap-proxy inTargetType
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @string inCppTargetVar

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @expressionCollectionValueForGeneration generateCollectionElementCode
  ?let @unifiedTypeMap-proxy unused inTargetType
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @string inCppTargetVar {
  [mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string sourceVar
  ]
  ioGeneratedCode += inCppTargetVar
  ioGeneratedCode += ".plusAssign_operation (" + sourceVar
  ioGeneratedCode += ", " + compilerCppName ()
  ioGeneratedCode += " " + [mExpressionLocation commaSourceFile] + ") ;\n"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @expressionListCollectionForGeneration generateCollectionElementCode
  ?let @unifiedTypeMap-proxy inTargetType
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @string inCppTargetVar {
#--- Parameters
  var parameterList = @stringlist {}
  for () in mExpressionList do
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string parameter
    ]
    parameterList += !parameter  
  end
#--- Receiver
  ioGeneratedCode += inCppTargetVar
#--- Call add assign (+=) operator
  ioGeneratedCode += ".addAssign_operation ("
  for () in parameterList
    do ioGeneratedCode += mValue
    between ioGeneratedCode += ", "
  end
  if [[inTargetType mHandledOperatorFlags] plusEqualOperatorWithFieldListNeedsCompilerArg] then
    ioGeneratedCode  += ", " + compilerCppName ()
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  end
  ioGeneratedCode += " " + [mExpressionLocation commaSourceFile] + ") ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @expressionCollectionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  [mResultType addHeaderFileName !?ioInclusionSet]
#--- Create temporary variable variable
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string] ioTemporaryVariableIndex ++
#--- Declare variable and apply default constructor
  ioGeneratedCode += "GALGAS_" + [mResultType identifierRepresentation] + " " + outCppExpression
     + " = GALGAS_" +  [mResultType identifierRepresentation] + "::constructor_" + [[mResultType mDefaultConstructorName] identifierRepresentation] + " (" + [mLocation sourceFile] + ") ;\n"
#--- Add Elements
  for () in mElementList do
    [mElement generateCollectionElementCode
      !mResultType
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !outCppExpression
    ]    
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

