#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @structDeclarationAST : @semanticDeclarationAST {
  private let @lstring mStructTypeName
  private let @propertyInCollectionListAST mStructurePropertyList
  private let @string mEnumeratedElementTypeName # Empty string if not enumerable
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $struct$
    $@type$ ?let @lstring structTypeName indexing structDefinition
    ${$
    var @propertyInCollectionListAST propertyList = {}
    repeat
    while
      <property_declaration_ggs3> !?propertyList
    while
      <method_declaration> !structTypeName !?ioDeclarations
    end
    $}$
    ioDeclarations.mDeclarationList += !@structDeclarationAST.new {
      !false # Is not predefined
      !structTypeName
      !propertyList
      !""
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $struct$
    $@type$ ?let @lstring structTypeName indexing structDefinition
    ${$
    var @propertyInCollectionListAST propertyList = {}
    repeat
    while
      <property_declaration> !?propertyList
    while
      <method_declaration> !structTypeName !?ioDeclarations
    end
    $}$
    ioDeclarations.mDeclarationList += !@structDeclarationAST.new {
      !false # Is not predefined
      !structTypeName
      !propertyList
      !""
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mStructTypeName !self.mStructTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for (* propertyTypeName 4*) in self.mStructurePropertyList do
    let propertyKey = @lstring.new {!"@" + propertyTypeName !propertyTypeName.location}
    [!?ioSemanticTypePrecedenceGraph addEdge !key !propertyKey]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structDeclarationAST keyRepresentation ->@string result {
  result = "struct @" + self.mStructTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func %once selectorFeatureForNewConstructor -> @string {
  result = "selector"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
  let optionalMethodMap = @optionalMethodMap {}
#--- Struct type index
  [!?ioTypeMap makeEntry  !self.mStructTypeName ?let structTypeIndex]
#--- Constructors and property map
  var @propertyMap propertyMap = {}
  var @constructorMap constructorMap = {}
  var @functionSignature constructorPropertyTypeList = {}
  var @typedPropertyList typedPropertyList = {}
  var @unifiedTypeMapEntryList typesToIncludeInHeaderCompilation = {}
  for (isConstant propertyTypeName propertyName accessControlAST attributeList initExpression) in self.mStructurePropertyList do
    [!?ioTypeMap makeEntry  !propertyTypeName ?let propertyTypeEntry]
    var @lstring selector = ["" nowhere]
    for (mValue) in attributeList do
      if mValue.string == selectorFeatureForNewConstructor () then
        selector = propertyName
      end
    end
    if [initExpression isNone] then
      constructorPropertyTypeList += !selector !propertyTypeEntry !propertyName.string
    end
    typesToIncludeInHeaderCompilation += !propertyTypeEntry
    let hasSelector = false
    typedPropertyList += !propertyTypeEntry !propertyName !hasSetter: not isConstant !hasSelector
    [!?propertyMap insertKey
      !propertyName
      ![accessControlAST accessControl !forDeclaringType: structTypeIndex]
      !isConstant
      !propertyTypeEntry
    ]
  end
  [!?constructorMap insertKey
    !@lstring.new {!"new" !.here}
    !constructorPropertyTypeList
    !false
    !structTypeIndex
  ]
#--- Getters
  commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap)
#--- Setters
  var @setterMap setterMap = {}
#--- Instance methods
  var @instanceMethodMap instanceMethodMap = {}
#--- Add Extensions
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mStructTypeName
    !isClass: false
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Enumeration by "for" instruction
  let @unifiedTypeMapEntry enumeratedType
  if self.mEnumeratedElementTypeName == "" then
    enumeratedType = @unifiedTypeMapEntry.null
  else
   [!?ioTypeMap makeEntryFromString
     !self.mEnumeratedElementTypeName
     ?enumeratedType
    ]
  end
#--- Generate a "default" constructor ?
  var @string defaultConstructorName = "default"
  for (mPropertyTypeEntry 3*) in typedPropertyList while defaultConstructorName != "" do
    if ([mPropertyTypeEntry definition].mDefaultConstructorName == "") | not [mPropertyTypeEntry definition].mIsConcrete then
      defaultConstructorName = ""
    end
  end  
#--- Enter in type map
  let typeDefinition = @unifiedTypeDefinition.new {
    !self.mStructTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMapEntry.null
    !@typeKindEnum.structType
    !false # Does not support collection value
    !typedPropertyList
    !propertyMap
    !typedPropertyList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !optionalMethodMap
    !@enumerationDescriptorList {}
    !.generateDescriptionGetterUtilityMethod | .isComparable
    !@functionSignature {}
    !{}
    !{}
    !@mapSearchMethodListAST {}
    !@mapSearchMethodListAST {}
    !false # Do not generate header in separate file
    !enumeratedType # Type for enumerated element for "for" instruction
    !defaultConstructorName # Default constructor
    !"struct-" + [self.mStructTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  }
  [!?ioTypeMap insertType !typeDefinition.mTypeName !typeDefinition]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func %once forbiddenKeysForStruct -> @stringset {
  result = {}
  result += !"description"
  result += !"object"
  result += !"dynamicType"
}

#·······················································································································

override method @structDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let structNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mStructTypeName)
  [!?ioUsefulEntitiesGraph addNode !structNameForUsefulness !structNameForUsefulness]
#---
  if [self.mStructurePropertyList length] == 0 then
    error self.mStructTypeName: "a structure cannot be empty: it must have at least one property" 
  end
  var @typedPropertyList typedPropertyList = {}
  var @typedPropertyList constructorArgumentList = {}
  var @propertyIndexMap propertyMap = {}
  for (isConstant propertyTypeName mPropertyName * mAttributeList initExpression) in self.mStructurePropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!propertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !structNameForUsefulness !propertyTypeNameForUsefulness]
    let t = [ioTypeMap searchKey !propertyTypeName]
    var hasSelector = false
    for (mValue) in mAttributeList do
      if mValue.string != selectorFeatureForNewConstructor () then
        error mValue : "a struct property accepts only the %" + selectorFeatureForNewConstructor () + " feature"
      end if hasSelector then
        error mValue : "duplicated %" + selectorFeatureForNewConstructor () + " feature"
      else
        hasSelector = true
      end
    end
    if [forbiddenKeysForStruct () hasKey !mPropertyName.string] then
      var @string m = "an property cannot be named:"
      for s in forbiddenKeysForStruct () do
        m+= " " + s
      end
      m += "; theses names are reserved"
      error mPropertyName: m
    end
    [!?propertyMap insertKey !mPropertyName !t]
    switch initExpression
    case none :
      constructorArgumentList +=
        !t
        !mPropertyName
        !hasSetter: not isConstant
        !hasSelector
    case some (*) :
    end
    typedPropertyList +=
      !t
      !mPropertyName
      !hasSetter: not isConstant
      !hasSelector
  end
#--- Build property initialzation code
  var initializationCode = ""
  var inclusionSet = @stringset {}
  var @uint temporaryVariableIndex = 0
  var unusedVariableCppNameSet = @stringset {}
  var @usefulEntitiesGraph usefulEntitiesGraph = .emptyGraph
  for (* propertyTypeName propertyName 2* initExpression) in self.mStructurePropertyList do
   switch initExpression
    case none :
    case some (expressionAST) :
      var variableMap = @localVarManager.new {!.new {!{} !{}} !{}}
      let @analysisContext analysisContext = .new {
        !inSemanticContext
        !inPredefinedTypes
        !""
        !selfType: .none
        !""
        !requiresSelfForAccessingProperty: true
      }
      let propertyType = [ioTypeMap searchKey !propertyTypeName]
      [expressionAST analyzeSemanticExpression
        !["" nowhere]
        !?usefulEntitiesGraph
        !inferenceType: propertyType
        !analysisContext
        !?ioTypeMap
        !?variableMap
        ?var @semanticExpressionForGeneration expression
      ]
    #--- Check assignment type compatibility
      checkAssignmentTypeWithImplicitGetterCall (
        !propertyType
        !expression.mResultType
        !propertyName.location
        !?expression
      )
      [expression generateExpression
        !?initializationCode
        !?inclusionSet
        !?temporaryVariableIndex
        !?unusedVariableCppNameSet
        ?let sourceVar
      ]
      initializationCode += "  const GALGAS_" + [propertyType identifierRepresentation]
      initializationCode += " in_" + [propertyName string] + " = " + sourceVar + " ;\n"
    end

  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"struct " + self.mStructTypeName
    !@structTypeForGeneration.new {
      ![ioTypeMap searchKey !self.mStructTypeName]
      !typedPropertyList
      !constructorArgumentList
      !initializationCode
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @structTypeForGeneration : @semanticTypeForGeneration {
  private let @typedPropertyList mTypedPropertyList
  private let @typedPropertyList mConstructorArgumentList
  private let @string mConstructorInitializationCode
}

#·······················································································································

filewrapper boolsetGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template structTypeHeader1 "GALGAS_struct.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList PROPERTY_LIST
    ?@typedPropertyList CONSTRUCTOR_ARGUMENT_LIST
    ?@bool HAS_DEFAULT_CONSTRUCTOR

  template structTypeSpecificImplementation "GALGAS_struct.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList PROPERTY_LIST
    ?@typedPropertyList CONSTRUCTOR_ARGUMENT_LIST
    ?@string CONSTRUCTOR_INITIALIZATION_CODE
    ?@bool HAS_DEFAULT_CONSTRUCTOR
}

#·······················································································································

override method @structTypeForGeneration appendDeclaration1
  ?!@stringset ioInclusionSet
  !@string outHeader
{
  for (t 3*) in self.mTypedPropertyList do
    [t addHeaderFileName1 !?ioInclusionSet]
  end
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper boolsetGenerationTemplate.structTypeHeader1
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedPropertyList
    !self.mConstructorArgumentList
    !selfTypedefinition.mDefaultConstructorName != ""
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !selfTypedefinition.mIsConcrete
    !selfTypedefinition.mConstructorMap
    !selfTypedefinition.mGetterMap
    !selfTypedefinition.mSetterMap
    !selfTypedefinition.mInstanceMethodMap
    !selfTypedefinition.mClassMethodMap
    !selfTypedefinition.mOptionalMethodMap
    !selfTypedefinition.mEnumerationDescriptor
    !selfTypedefinition.mHandledOperatorFlags
    !selfTypedefinition.mAddAssignOperatorArguments
    !selfTypedefinition.mTypeForEnumeratedElement
  ]
 }

#·······················································································································

override method @structTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outImplementation = [filewrapper boolsetGenerationTemplate.structTypeSpecificImplementation
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedPropertyList
    !self.mConstructorArgumentList
    !self.mConstructorInitializationCode
    !selfTypedefinition.mDefaultConstructorName != ""
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
