#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                                                                                                *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structDeclarationAST : @semanticDeclarationAST {
  @lstring mStructTypeName
  @propertyInCollectionListAST mStructurePropertyList
  @string mEnumeratedElementTypeName # Empty string if not enumerable
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                                                                                             *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $struct$
    $@type$ ?let @lstring structTypeName indexing structDefinition
    ${$
    @propertyInCollectionListAST propertyList = {}
    repeat
    while
      <property_declaration> !?propertyList
    while
      $;$
    end
    $}$
    ioDeclarations.mDeclarationList += !@structDeclarationAST.new {
      !false # Is not predefined
      !structTypeName
      !propertyList
      !""
    }
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mStructTypeName ![self.mStructTypeName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for () in self.mStructurePropertyList do
    let propertyKey = @lstring.new {!"@" + mPropertyTypeName ![mPropertyTypeName location]}
    [!?ioSemanticTypePrecedenceGraph addEdge !key !propertyKey]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @structDeclarationAST keyRepresentation ->@string outString {
  outString = "struct @" + self.mStructTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                                                                                                   *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func %once selectorFeatureForNewConstructor -> @string {
  result = "selector"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
  let optionalMethodMap = @optionalMethodMap {}
#--- Struct type index
  [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mStructTypeName ?let structTypeIndex]
#--- Constructors and property map
  @propertyMap propertyMap = {}
  @constructorMap constructorMap = {}
  @functionSignature constructorPropertyTypeList = {}
  @typedPropertyList typedPropertyList = {}
  @unifiedTypeMapEntryList typesToIncludeInHeaderCompilation = {}
  for () in self.mStructurePropertyList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let propertyTypeEntry]
    @lstring selector = ["" nowhere]
    for () in mAttributeList do
      if mValue.string == selectorFeatureForNewConstructor () then
        selector = mPropertyName
      end
    end
    constructorPropertyTypeList += !selector !propertyTypeEntry !mPropertyName.string
    typesToIncludeInHeaderCompilation += !propertyTypeEntry
    let hasSetter = true # mIsPublic
    let hasGetter = true # mIsPublic
    let hasSelector = false
    typedPropertyList += !propertyTypeEntry !mPropertyName !hasSetter !hasGetter !hasSelector
    [!?propertyMap insertKey !mPropertyName !mIsPublic !propertyTypeEntry]
  end
  [!?constructorMap insertKey
    !@lstring.new {!"new" !.here}
    !constructorPropertyTypeList
    !false
    !structTypeIndex
  ]
#--- Readers
  @getterMap getterMap
  commonGetterMapForAllTypes ( !?ioSemanticContext.mTypeMap ?getterMap )
  for () in typedPropertyList do
    if mHasGetter then
      enterBaseFinalGetterWithoutArgument (
        !?getterMap
        !?ioSemanticContext.mTypeMap 
        !getterName:[mPropertyName string]
        !returnedTypeName:[mPropertyTypeEntry key]
        !hasCompilerArgument:false
      )
    end
  end
#--- Modifiers
  @setterMap setterMap = {}
#--- Instance methods
  @instanceMethodMap instanceMethodMap = {}
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mStructTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
#--- Enumeration by "for" instruction
  @unifiedTypeMap-entry enumeratedType
  if self.mEnumeratedElementTypeName == "" then
    enumeratedType = @unifiedTypeMap-entry.null
  else
   [@unifiedTypeMap-entry makeEntryFromString
     !?ioSemanticContext.mTypeMap
     !self.mEnumeratedElementTypeName
     ?enumeratedType
    ]
  end
#--- Generate a "default" constructor ?
  @string defaultConstructorName = "default"
  for () in typedPropertyList while defaultConstructorName != "" do
    if ([mPropertyTypeEntry mDefaultConstructorName] == "") | not [mPropertyTypeEntry mIsConcrete] then
      defaultConstructorName = ""
    end
  end  
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mStructTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-entry.null
    !@typeKindEnum.structType
    !false # Does not support collection value
    !typedPropertyList
    !propertyMap
    !typedPropertyList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !optionalMethodMap
    !@enumerationDescriptorList.emptyList
    !.generateDescriptionGetterUtilityMethod
    !@functionSignature.emptyList
    !{}
    !{}
    !@mapSearchMethodListAST.emptyList
    !@mapSearchMethodListAST.emptyList
    !false # Do not generate header in separate file
    !enumeratedType # Type for enumerated element for "for" instruction
    !defaultConstructorName # Default constructor
    !"struct-" + [self.mStructTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private func %once forbiddenKeysForStruct -> @stringset {
  result = {}
  result += !"description"
  result += !"object"
  result += !"dynamicType"
}

#·······················································································································

override method @structDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let structNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mStructTypeName)
  [!?ioUsefulEntitiesGraph addNode !structNameForUsefulness !structNameForUsefulness]
#---
  if [self.mStructurePropertyList length] == 0 then
    error self.mStructTypeName: "a structure cannot be empty: it must have at least one property" 
  end
  @typedPropertyList typedPropertyList = {}
  @propertyIndexMap propertyMap = {}
  for () in self.mStructurePropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mPropertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !structNameForUsefulness !propertyTypeNameForUsefulness]
    let t = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !mPropertyTypeName}
    var hasSelector = false
    for () in mAttributeList do
      if mValue.string != selectorFeatureForNewConstructor () then
        error mValue : "a struct property accepts only the %" + selectorFeatureForNewConstructor () + " feature"
      end if hasSelector then
        error mValue : "duplicated %" + selectorFeatureForNewConstructor () + " feature"
      else
        hasSelector = true
      end
    end
    let hasSetter = true # mIsPublic
    let hasGetter = true # mIsPublic
    typedPropertyList +=
      !t
      !mPropertyName
      !hasSetter
      !hasGetter
      !hasSelector
    if [forbiddenKeysForStruct () hasKey !mPropertyName.string] then
      @string m = "an property cannot be named:"
      for s in forbiddenKeysForStruct () do
        m+= " " + s
      end
      m += "; theses names are reserved"
      error mPropertyName: m
    end
    [!?propertyMap insertKey !mPropertyName !t]
  end
  ioSemanticDeclarationListForGeneration +=
    !"struct " + self.mStructTypeName
    !@structTypeForGeneration.new {
      !.searchKey {!inSemanticContext.mTypeMap !self.mStructTypeName}
      !typedPropertyList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @structTypeForGeneration : @semanticTypeForGeneration {
  @typedPropertyList mTypedPropertyList
}

#·······················································································································

filewrapper boolsetGenerationTemplate in "../generation_templates/type_generation" {
}{
}{
  template structTypeHeader1 "GALGAS_struct.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList PROPERTY_LIST
    ?@bool HAS_DEFAULT_CONSTRUCTOR

  template structTypeSpecificImplementation "GALGAS_struct.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList PROPERTY_LIST
    ?@bool HAS_DEFAULT_CONSTRUCTOR
}

#·······················································································································

override method @structTypeForGeneration appendDeclaration1
  ?!@stringset ioInclusionSet
  !@string outHeader
{
  for (t 4*) in self.mTypedPropertyList do
    [t addHeaderFileName1 !?ioInclusionSet]
  end

  outHeader = [filewrapper boolsetGenerationTemplate.structTypeHeader1
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedPropertyList
    ![self.mSelfTypeEntry  mDefaultConstructorName] != ""
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    ![self.mSelfTypeEntry  mIsConcrete]
    ![self.mSelfTypeEntry  mConstructorMap]
    ![self.mSelfTypeEntry  mGetterMap]
    ![self.mSelfTypeEntry  mSetterMap]
    ![self.mSelfTypeEntry  mInstanceMethodMap]
    ![self.mSelfTypeEntry  mClassMethodMap]
    ![self.mSelfTypeEntry  mOptionalMethodMap]
    ![self.mSelfTypeEntry  mEnumerationDescriptor]
    ![self.mSelfTypeEntry  mHandledOperatorFlags]
    ![self.mSelfTypeEntry  mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry  mTypeForEnumeratedElement]
  ]
 }

#·······················································································································

override method @structTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  [self.mSelfTypeEntry  addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper boolsetGenerationTemplate.structTypeSpecificImplementation
    ![self.mSelfTypeEntry  key]
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedPropertyList
    ![self.mSelfTypeEntry  mDefaultConstructorName] != ""
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
