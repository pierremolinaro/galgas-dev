#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                                                                                                *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @listDeclarationAST : @semanticDeclarationAST {
  @lstring mListTypeName
  @propertyInCollectionListAST mPropertyList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                                                                                             *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $list$
    $@type$ ?var @lstring listTypeName indexing listDefinition, structDefinition "-element"
    ${$
    @propertyInCollectionListAST propertyList = {}
    repeat
      <property_declaration> !?propertyList
      select
      or
        $;$
      end
    while
    end
    $}$
    ioDeclarations.mDeclarationList += !@listDeclarationAST.new {
      !false # Is not predefined
      !listTypeName
      !propertyList
    }
  }

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mListTypeName ![self.mListTypeName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for () in self.mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring.new {!"@" + mPropertyTypeName ![mPropertyTypeName location]}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
#--- Handle attributes
  @typedPropertyList typedAttributeList = {}
  for () in self.mPropertyList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    let hasSetter = mIsPublic
    let hasGetter = mIsPublic
    var hasSelector = false
    for () in mAttributeList do
      if [mValue string] == "setter" then
        warning mValue : "obsolete attribute: setter is implicitly generated for a public property"
#        if hasSetter then
#          error mValue : "the '%setter' attribute is already named"
#        end
#        hasSetter = true
      elsif [mValue string] == "nogetter" then
        warning mValue : "obsolete attribute: use 'private' qualifier"
#        if not hasGetter then
#          error mValue : "the '%nogetter' attribute is already named"
#        end
#        hasGetter = false
      elsif [mValue string] == "selector" then
        if hasSelector then
          error mValue : "the '%selector' attribute is already named"
        end
        hasSelector = true
      else
        error mValue
        : "only '%selector' attribute is allowed here"
        fixit { replace {!"%selector"} }
      end
    end
    typedAttributeList += !attributeTypeIndex !mPropertyName !hasSetter !hasGetter !hasSelector
  end
#--- uint type index
  [@unifiedTypeMap-entry makeEntryFromString !?ioSemanticContext.mTypeMap !"uint" ?let uintType]
#--- List type index
  [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mListTypeName ?let listTypeIndex]
#--- Element type index
  [@unifiedTypeMap-entry makeEntry
    !?ioSemanticContext.mTypeMap
    !@lstring.new {!self.mListTypeName.string + elementTypeNameSuffix () !self.mListTypeName.location}
    ?let @unifiedTypeMap-entry listElementTypeIndex
  ]
#--- Property description
  @enumerationDescriptorList enumerationDescriptor = {}
  @functionSignature constructorAttributeTypeList = {}
  @formalParameterSignature setterOutputFormalArgumentList = {}
  @formalParameterSignature setterInputFormalArgumentList = {}
  for () in typedAttributeList do
    let selector = if mHasSelector then mPropertyName.string else "" end
    enumerationDescriptor += !mPropertyTypeEntry !mPropertyName.string
    constructorAttributeTypeList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !mPropertyName.string
    setterOutputFormalArgumentList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !.argumentOut
      !mPropertyName.string
    setterInputFormalArgumentList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !.argumentConstantIn
      !mPropertyName.string
  end
#--- Constructors
  @constructorMap constructorMap = {}
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioSemanticContext.mTypeMap 
    !name:"emptyList"
    !resultTypeName:[self.mListTypeName string]
    !hasLexiqueArg:false
  )
  [!?constructorMap insertKey
    !@lstring.new {!"listWithValue" !@location.here}
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ]
#--- Readers
  commonGetterMapForAllTypes ( !?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"length"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"range"
    !returnedTypeName:"range"
    !hasCompilerArgument:false
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !"subListFromIndex" !"uint" !"inIndex"
    !returnedTypeName:[self.mListTypeName string]
    !hasCompilerArgument:true
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !"subListToIndex" !"uint" !"inIndex"
    !returnedTypeName:[self.mListTypeName string]
    !hasCompilerArgument:true
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !"subListWithRange" !"range" !"inRange"
    !returnedTypeName:[self.mListTypeName string]
    !hasCompilerArgument:true
  )
  for () in typedAttributeList do
    if mHasGetter then
      [!?getterMap insertOrReplace
        !@lstring.new {![mPropertyName string] + "AtIndex" ![mPropertyName location]}
        !@methodKind.definedAsMember
        !@functionSignature {!["" nowhere] !uintType !"inIndex"}
        !@location.here
        !true
        !mPropertyTypeEntry
        !@methodQualifier.isBasic
        !"" # No Error message
      ]
    end
  end
#------------------------- Instance methods
  @instanceMethodMap instanceMethodMap = {}
  [!?instanceMethodMap insertKey
    !@lstring.new {!"first" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?instanceMethodMap insertKey
    !@lstring.new {!"last" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !""
  ]
#----------------------------------------- Modifiers
  @setterMap setterMap = {}
  [!?setterMap insertOrReplace
    !@lstring.new {!"append" !@location.here}
    !@methodKind.definedAsMember
    !{!["" nowhere] !listElementTypeIndex !@formalArgumentPassingModeAST.argumentIn !"inElement"}
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?setterMap insertOrReplace
    !@lstring.new {!"popFirst" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?setterMap insertOrReplace
    !@lstring.new {!"popLast" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  setterOutputFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inIndex"
  [!?setterMap insertOrReplace
    !@lstring.new {!"removeAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  drop setterOutputFormalArgumentList
  for () in typedAttributeList do
    if mHasSetter then
      var setterFormalArgumentList =@formalParameterSignature {}
      setterFormalArgumentList += !["" nowhere] !mPropertyTypeEntry !@formalArgumentPassingModeAST.argumentConstantIn !mPropertyName.string
      setterFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !mPropertyName.string
      [!?setterMap insertOrReplace
        !@lstring.new {!"set" + [[mPropertyName string] stringByCapitalizingFirstCharacter] + "AtIndex" ![mPropertyName location]}
        !@methodKind.definedAsMember
        !setterFormalArgumentList
        !true
        !@methodQualifier.isBasic
        !"" # No error message
      ]
    end
  end
#--- setter 'insertAtIndex'
  setterInputFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inInsertionIndex"
  [!?setterMap insertOrReplace
    !@lstring.new {!"insertAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !setterInputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  drop setterInputFormalArgumentList
#--- Add extensions
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mListTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mListTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-entry.null
    !@typeKindEnum. listType
    !true # Support collection value
    !typedAttributeList
    !{}
    !{}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !enumerationDescriptor
    !.doNotGenererateObjectCompare | .plusEqualOperatorWithExpression | .infixAddOperator
    !constructorAttributeTypeList
    !{}
    !{}
    !@mapSearchMethodListAST.emptyList
    !@mapSearchMethodListAST.emptyList
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !"emptyList" # Default constructor
    !"list-" + [self.mListTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  ]
}

#·······················································································································

override method @listDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
{
  @propertyInCollectionListAST structAttributeList = {}
  for () in self.mPropertyList do
    structAttributeList +=
      !mPropertyTypeName
      !mPropertyName
      !true
      !{}
  end
  ioSemanticDeclarationList += !@structDeclarationAST.new {
    !self.mIsPredefined
    !.new {!self.mListTypeName.string + elementTypeNameSuffix () !self.mListTypeName.location}
    !structAttributeList
    !""
  }
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN SEMANTIC CONTEXT                                                                                          *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mListTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!self.mListTypeName.string + "-element" !self.mListTypeName})
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
#---
  @typedPropertyList typedAttributeList = {}
  @propertyIndexMap attributeMap = {}
  for () in self.mPropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mPropertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !propertyTypeNameForUsefulness]
    let t = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !mPropertyTypeName}
    let hasSetter = mIsPublic
    let hasGetter = mIsPublic
    var hasSelector = false
    for () in mAttributeList do
      if [mValue string] == "setter" then
        warning mValue : "obsolete attribute: setter is implicitly generated for a public property"
#        if hasSetter then
#          error mValue : "the '%setter' attribute is already named"
#        end
#        hasSetter = true
      elsif [mValue string] == "nogetter" then
        warning mValue : "obsolete attribute: use 'private' qualifier"
#        if not hasGetter then
#          error mValue : "the '%nogetter' attribute is already named"
#        end
#        hasGetter = false
      elsif [mValue string] == "selector" then
        if hasSelector then
          error mValue : "the '%selector' attribute is already named"
        end
        hasSelector = true
      else
        error mValue
        : "only '%selector' attribut is allowed here"
        fixit { replace {!"%selector"} }
      end
    end
    typedAttributeList +=
      !t
      !mPropertyName
      !hasSetter
      !hasGetter
      !hasSelector
    [!?attributeMap insertKey !mPropertyName !t]
  end
#---
  let selfType = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mListTypeName}
  ioSemanticDeclarationListForGeneration +=
    !"list type " + self.mListTypeName
    !@listTypeForGeneration.new {
      !selfType
      !.searchKey {!inSemanticContext.mTypeMap !.new {!self.mListTypeName.string + elementTypeNameSuffix () !self.mListTypeName.location}}
      !typedAttributeList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @listTypeForGeneration : @semanticTypeForGeneration {
  @unifiedTypeMap-entry mListElementTypeIndex
  @typedPropertyList mTypedAttributeList
}

#·······················································································································

filewrapper listGenerationTemplate in "../generation_templates/type_generation" {
}{
}{
  template listTypeHeader1 "GALGAS_list.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST

  template listTypeSpecificImplementation "GALGAS_list.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@string ELEMENT_TYPE_IDENTIFIER
}

#·······················································································································

override method @listTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  outHeader = [filewrapper listGenerationTemplate.listTypeHeader1
    ![self.mSelfTypeEntry key]
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry key]
    ![self.mSelfTypeEntry identifierRepresentation]
    ![self.mSelfTypeEntry mIsConcrete]
    ![self.mSelfTypeEntry mConstructorMap]
    ![self.mSelfTypeEntry mGetterMap]
    ![self.mSelfTypeEntry mSetterMap]
    ![self.mSelfTypeEntry mInstanceMethodMap]
    ![self.mSelfTypeEntry mClassMethodMap]
    ![self.mSelfTypeEntry mOptionalMethodMap]
    ![self.mSelfTypeEntry mEnumerationDescriptor]
    ![self.mSelfTypeEntry mHandledOperatorFlags]
    ![self.mSelfTypeEntry mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry mTypeForEnumeratedElement]
  ]
}

#·······················································································································

override method @listTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  for (t 4*) in self.mTypedAttributeList do
    [t addHeaderFileName !?ioInclusionSet]
  end
  [self.mListElementTypeIndex addHeaderFileName !?ioInclusionSet]
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper listGenerationTemplate.listTypeSpecificImplementation
    ![self.mSelfTypeEntry key]
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
    ![[self.mSelfTypeEntry mTypeForEnumeratedElement] identifierRepresentation]
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

