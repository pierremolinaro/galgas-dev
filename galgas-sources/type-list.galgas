#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @listDeclarationAST : @semanticDeclarationAST {
  private let @lstring mListTypeName
  private let @propertyInCollectionListAST mPropertyList
  private let @bool usefullList %selector
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $list$
    $@type$ ?let @lstring listTypeName indexing listDefinition, structDefinition "-element"
    var isUsefull = false
    repeat
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { %remove }
      end
      isUsefull = true
    end
    ${$
    var @propertyInCollectionListAST propertyList = {}
    repeat
      <property_declaration_ggs3> !?propertyList
      select
      or
        $;$
      end
    while
    end
    $}$
    ioDeclarations.mDeclarationList += !@listDeclarationAST.new {
      !false # Is not predefined
      !listTypeName
      !propertyList
      !usefullList: isUsefull
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations
                     ?!@stringset ioUserImplicitDeclaredTypeSet {
    $list$
    $@type$ ?let @lstring listTypeName indexing listDefinition, structDefinition "-element"
    var isUsefull = false
    repeat
    while
      $%usefull$
      if isUsefull then
        error .here : "duplicate attribute" fixit { %remove }
      end
      isUsefull = true
    end
    ${$
    var @propertyInCollectionListAST propertyList = {}
    repeat
    while
      <property_declaration> !?ioDeclarations !?ioUserImplicitDeclaredTypeSet !?propertyList
    while
      <method_declaration> !listTypeName !?ioDeclarations !?ioUserImplicitDeclaredTypeSet
    end
    $}$
    ioDeclarations.mDeclarationList += !@listDeclarationAST.new {
      !false # Is not predefined
      !listTypeName
      !propertyList
      !usefullList: isUsefull
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mListTypeName !self.mListTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for (* propertyTypeName 4*) in self.mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring.new {!"@" + propertyTypeName !propertyTypeName.location}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
#--- Handle attributes
  var @typedPropertyList typedAttributeList = {}
  for (* propertyTypeName mPropertyName unused accessControl hasSelector initExpression) in self.mPropertyList do
    if [initExpression isSome] then
      error mPropertyName : "property initialization is not handled for a list"
    end
    [!?ioTypeMap makeEntry !propertyTypeName ?let attributeTypeIndex]
    typedAttributeList += !attributeTypeIndex !mPropertyName !hasSetter: true !hasSelector: hasSelector
  end
#--- uint type index
  [!?ioTypeMap makeEntryFromString !"uint" ?let uintType]
#--- List type index
  [!?ioTypeMap makeEntry  !self.mListTypeName ?let listTypeIndex]
#--- Element type index
  [!?ioTypeMap makeEntry
    !@lstring.new {!self.mListTypeName.string + elementTypeNameSuffix () !self.mListTypeName.location}
    ?let @unifiedTypeMapEntry listElementTypeIndex
  ]
#--- Property description
  var @enumerationDescriptorList enumerationDescriptor = {}
  var @functionSignature constructorAttributeTypeList = {}
  var @formalParameterSignature setterOutputFormalArgumentList = {}
  var @formalParameterSignature setterInputFormalArgumentList = {}
  for (mPropertyTypeEntry @lstring mPropertyName * mHasSelector) in typedAttributeList do
    let selector = if mHasSelector then mPropertyName.string else "" end
    enumerationDescriptor += !mPropertyTypeEntry !mPropertyName.string
    constructorAttributeTypeList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !mPropertyName.string
    setterOutputFormalArgumentList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !.argumentOut
      !mPropertyName.string
    setterInputFormalArgumentList +=
      ![selector nowhere]
      !mPropertyTypeEntry
      !.argumentConstantIn
      !mPropertyName.string
  end
#--- Constructors
  var @constructorMap constructorMap = {}
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioTypeMap 
    !name:"emptyList"
    !resultTypeName:self.mListTypeName.string
    !hasLexiqueArg:false
  )
  [!?constructorMap insertKey
    !@lstring.new {!"listWithValue" !@location.here}
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ]
#--- Readers
  commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"count"
    !obsoleteName: "length"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"range"
    !obsoleteName: ""
    !returnedTypeName:"range"
    !hasCompilerArgument:false
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "subListFromIndex"
    !argSelector: "" !"uint" !"inIndex"
    !returnedTypeName:self.mListTypeName.string
    !hasCompilerArgument:true
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "subListToIndex"
    !argSelector: "" !"uint" !"inIndex"
    !returnedTypeName:self.mListTypeName.string
    !hasCompilerArgument:true
  )
  enterBaseGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "subListWithRange"
    !argSelector: "" !"range" !"inRange"
    !returnedTypeName:self.mListTypeName.string
    !hasCompilerArgument:true
  )
  for (mPropertyTypeEntry mPropertyName 2*) in typedAttributeList do
    [!?getterMap insertOrReplace
      !@lstring.new {!mPropertyName.string + "AtIndex" !mPropertyName.location}
      !@methodKind.definedAsMember
      !@functionSignature {!["" nowhere] !uintType !"inIndex"}
      !@location.here
      !true
      !mPropertyTypeEntry
      !@methodQualifier.isBasic
      !"" # getter name is not obsolete, no replacement getter
    ]
  end
#------------------------- Instance methods
  var @instanceMethodMap instanceMethodMap = {}
  [!?instanceMethodMap insertKey
    !@lstring.new {!"first" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?instanceMethodMap insertKey
    !@lstring.new {!"last" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !""
  ]
#----------------------------------------- Modifiers
  var @setterMap setterMap = {}
  [!?setterMap insertOrReplace
    !@lstring.new {!"append" !@location.here}
    !@methodKind.definedAsMember
    !setterInputFormalArgumentList # {!["" nowhere] !listElementTypeIndex !@formalArgumentPassingModeAST.argumentIn !"inElement"}
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?setterMap insertOrReplace
    !@lstring.new {!"popFirst" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  [!?setterMap insertOrReplace
    !@lstring.new {!"popLast" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  setterOutputFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inIndex"
  [!?setterMap insertOrReplace
    !@lstring.new {!"removeAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !setterOutputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !""
  ]
  for (mPropertyTypeEntry mPropertyName mHasSetter *) in typedAttributeList do
    if mHasSetter then
      var setterFormalArgumentList = @formalParameterSignature {}
      setterFormalArgumentList += !["" nowhere] !mPropertyTypeEntry !@formalArgumentPassingModeAST.argumentConstantIn !mPropertyName.string
      setterFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !mPropertyName.string
      [!?setterMap insertOrReplace
        !@lstring.new {!"set" + [mPropertyName.string stringByCapitalizingFirstCharacter] + "AtIndex" !mPropertyName.location}
        !@methodKind.definedAsMember
        !setterFormalArgumentList
        !true
        !@methodQualifier.isBasic
        !"" # No error message
      ]
    end
  end
#--- setter 'insertAtIndex'
  setterInputFormalArgumentList += !["" nowhere] !uintType !@formalArgumentPassingModeAST.argumentConstantIn !"inInsertionIndex"
  [!?setterMap insertOrReplace
    !@lstring.new {!"insertAtIndex" !@location.here}
    !@methodKind.definedAsMember
    !setterInputFormalArgumentList
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
#--- Add extensions
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mListTypeName
    !isClass: false
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Enter in type map
  let typeDefinition = @unifiedTypeDefinition.new {
    !self.mListTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMapEntry.null
    !@typeKindEnum.listType
    !true # Support collection value
    !typedAttributeList
    !{}
    !{}
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !enumerationDescriptor
    !.doNotGenererateObjectCompare | .plusEqualOperatorWithExpression | .infixAddOperator | .isComparable
    !constructorAttributeTypeList
    !{}
    !{}
    !@mapSearchMethodListAST {}
    !@mapSearchMethodListAST {}
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !"emptyList" # Default constructor
    !"list-" + [self.mListTypeName fileNameRepresentation]
    !@headerKind.oneHeader
  }
  [!?ioTypeMap insertType !typeDefinition.mTypeName !typeDefinition]
}

#·······················································································································

override method @listDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
{
  var @propertyInCollectionListAST structAttributeList = {}
  for (isConstant qualifiedTypeAST mPropertyName * hasSelector initExpression) in self.mPropertyList do
    structAttributeList +=
      !isConstant: isConstant
      !qualifiedTypeAST
      !mPropertyName
      !.publicAccess
      !selector: hasSelector
      !initExpression
  end
  ioSemanticDeclarationList += !@structDeclarationAST.new {
    !self.mIsPredefined
    !.new {!self.mListTypeName.string + elementTypeNameSuffix () !self.mListTypeName.location}
    !structAttributeList
    !""
  }
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN SEMANTIC CONTEXT               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @listDeclarationAST semanticAnalysis
  ?!@lstringlist ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mListTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!self.mListTypeName.string + "-element" !self.mListTypeName})
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
  if self.usefullList then
    ioUsefulnessRootEntities += !nameForUsefulness
  end
#---
  var @typedPropertyList typedAttributeList = {}
  var @propertyIndexMap attributeMap = {}
  for (* propertyTypeName propertyName unused accessControl hasSelector initExpression) in self.mPropertyList do
    if [initExpression isSome] then
      error propertyName : "property initialization is not handled for a list"
    end
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!propertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !propertyTypeNameForUsefulness]
    let t = [ioTypeMap searchKey !propertyTypeName]
    typedAttributeList +=
      !t
      !propertyName
      !hasSetter: true # not isConstant
      !hasSelector: hasSelector
    [!?attributeMap insertKey !propertyName !t]
  end
#---
  let selfType = [ioTypeMap searchKey !self.mListTypeName]
  ioSemanticDeclarationListForGeneration +=
    !"list type " + self.mListTypeName
    !@listTypeForGeneration.new {
      !selfType
      ![ioTypeMap searchKey !.new {!self.mListTypeName.string + elementTypeNameSuffix () !self.mListTypeName.location}]
      !typedAttributeList
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @listTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry mListElementTypeIndex
  private let @typedPropertyList mTypedAttributeList
}

#·······················································································································

filewrapper listGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template listTypeHeader1 "GALGAS_list.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST

  template listTypeSpecificImplementation "GALGAS_list.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedPropertyList ATTRIBUTE_LIST
    ?@string ELEMENT_TYPE_IDENTIFIER
}

#·······················································································································

override method @listTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper listGenerationTemplate.listTypeHeader1
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !selfTypedefinition.mIsConcrete
    !selfTypedefinition.mConstructorMap
    !selfTypedefinition.mGetterMap
    !selfTypedefinition.mSetterMap
    !selfTypedefinition.mInstanceMethodMap
    !selfTypedefinition.mClassMethodMap
    !selfTypedefinition.mOptionalMethodMap
    !selfTypedefinition.mEnumerationDescriptor
    !selfTypedefinition.mHandledOperatorFlags
    !selfTypedefinition.mAddAssignOperatorArguments
    !selfTypedefinition.mTypeForEnumeratedElement
  ]
}

#·······················································································································

override method @listTypeForGeneration appendSpecificImplementation
                                        ?let @unifiedTypeMap unused inTypeMap
                                        ?!@stringset ioInclusionSet
                                        !@string outImplementation {
  for (t 3*) in self.mTypedAttributeList do
    [t addHeaderFileName !?ioInclusionSet]
  end
  [self.mListElementTypeIndex addHeaderFileName !?ioInclusionSet]
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outImplementation = [filewrapper listGenerationTemplate.listTypeSpecificImplementation
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
    ![[self.mSelfTypeEntry definition].mTypeForEnumeratedElement identifierRepresentation]
  ]
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

