//————————————————————————————————————————————————————————————————————————————————————————————————
#
#  semantics definitions for semantics component
#
#  Copyright (C) 2023, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
//————————————————————————————————————————————————————————————————————————————————————————————————
#! @unifiedTypeMap
//————————————————————————————————————————————————————————————————————————————————————————————————

map @unifiedTypeMap {
  private var @unifiedTypeMapElementClass mElement
  insert internalInsertKey error message "the '%K' key is already declared in %L"

  //----------------------------------------------------------------------------------------------

  getter unsolvedEntryList -> @lstringlist {
    result = @()
    for (lkey element) in self do
      if [element.mDefinition isUnsolved] then
        result += !lkey
      end
    end
  }

  //----------------------------------------------------------------------------------------------

  setter makeEntry ?let @lstring inLKey !@unifiedTypeMapEntry outEntry {
    if inLKey.string == "" then
      outEntry = .null
    elsif let node = self @[inLKey] then
      outEntry = .element {!weakElement: node.mElement}
    else
      let newElement = @unifiedTypeMapElementClass {!.unsolved}
      [!?self internalInsertKey !inLKey !newElement]
      outEntry = .element {!weakElement: newElement}
    end
  }

  //----------------------------------------------------------------------------------------------

  setter makeEntryFromString ?let @string inKey !@unifiedTypeMapEntry outEntry {
    if inKey == "" then
      outEntry = .null
    elsif let node = self @[inKey] then
      outEntry = .element {!weakElement: node.mElement}
    else
      let newElement = @unifiedTypeMapElementClass {!.unsolved}
      [!?self internalInsertKey !@{!inKey !.nowhere} !newElement]
      outEntry = .element {!weakElement: newElement}
    end
  }

  //----------------------------------------------------------------------------------------------

  getter typeMapEntryForLKey ?let @lstring inLKey -> @unifiedTypeMapEntry {
    if inLKey.string == "" then
      result = .null
    elsif let node = self @[inLKey] then
      result = .element {!weakElement: node.mElement}
    else
      error inLKey : "there is no '@" + inLKey + "' type" : result
    end
  }

  //----------------------------------------------------------------------------------------------

  getter typeMapEntryOrNullForLKey ?let @lstring inLKey -> @unifiedTypeMapEntry {
    if inLKey.string == "" then
      result = .null
    elsif let node = self @[inLKey] then
      result = .element {!weakElement: node.mElement}
    else
      result = .null
    end
  }

  //----------------------------------------------------------------------------------------------

  setter insertType ?let @lstring inTypeName ?let @unifiedTypeDefinition inTypeDefinition {
    if let node = self @[inTypeName] then
      switch node.mElement.mDefinition
      case solved (*) :
        error inTypeName : "type already defined"
      case unsolved :
        var e = node.mElement
        e.mDefinition = .solved {!definition: inTypeDefinition}
      end
    else
      let newElement = @unifiedTypeMapElementClass {!.solved {!definition: inTypeDefinition}}
      [!?self internalInsertKey !inTypeName !newElement]
    end
  }

  //----------------------------------------------------------------------------------------------

  getter typeDefinition ?let @lstring inLKey -> @unifiedTypeDefinition {
    if let node = self @[inLKey] then
      switch node.mElement.mDefinition
      case solved (definition) :
        result = definition
      case unsolved :
        error inLKey : "unsolved type" : result
      end
    else
      error inLKey : "there is no '@" + inLKey + "' type" : result
    end
  }

  //----------------------------------------------------------------------------------------------

#  getter typeOrPackageDefinition ?let @lstring inLKey -> @unifiedTypeDefinition {
#    if let [self searchKey !inLKey ?let @unifiedTypeMapElementClass element] then
#      switch element.mDefinition
#      case solved (definition) :
#        result = definition
#      case unsolved :
#        error inLKey : "unsolved type" : result
#      end
#    else
#      error inLKey : "there is no '@" + inLKey + "' type" : result
#    end
#  }

  //----------------------------------------------------------------------------------------------

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! @typeDefinition
//————————————————————————————————————————————————————————————————————————————————————————————————

enum @typeDefinition {
  case unsolved
  case solved (@unifiedTypeDefinition definition)
}

//————————————————————————————————————————————————————————————————————————————————————————————————
# @unifiedTypeMapElementClass
//————————————————————————————————————————————————————————————————————————————————————————————————

class @unifiedTypeMapElementClass {
  public var @typeDefinition mDefinition

  //----------------------------------------------------------------------------------------------

  getter definition -> @unifiedTypeDefinition {
    switch self.mDefinition
    case unsolved :
      error .nowhere : "unsolved type" : result
    case solved (definition) :
      result = definition
    end
  }

  //----------------------------------------------------------------------------------------------

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! @unifiedTypeMapEntry
//————————————————————————————————————————————————————————————————————————————————————————————————

#struct @weakEntry %equatable {
#  public weak var @unifiedTypeMapElementClass mWeakValue
#}

//————————————————————————————————————————————————————————————————————————————————————————————————

enum @unifiedTypeMapEntry %equatable {
  case null
#  case element (@weakEntry weakElement)
  case element (@unifiedTypeMapElementClass.@weak weakElement)

  //----------------------------------------------------------------------------------------------

  getter definition -> @unifiedTypeDefinition {
    switch self
    case null :
      error .nowhere : "null type" : result
    case element (weakElement) :
      if let type = weakElement then
        switch type.mDefinition
        case unsolved :
          error .nowhere : "unsolved type" : result
        case solved (definition) :
          result = definition
        end
      else
        error .nowhere : "nil type" : result
      end
    end
  }

  //----------------------------------------------------------------------------------------------

  getter identifierRepresentation -> @string {
    result = [[self definition].typeName.string identifierRepresentation]
  }

  //----------------------------------------------------------------------------------------------

  getter typeName -> @string {
    result = [self definition].typeName.string
  }

  //----------------------------------------------------------------------------------------------

  getter baseType -> @unifiedTypeMapEntry outBaseType {
    outBaseType = self
    loop while not [[outBaseType definition].superType isNull] do
      outBaseType = [outBaseType definition].superType
    end
  }

  //----------------------------------------------------------------------------------------------

  method addHeaderFileName ?!@stringset ioInclusions {
    let typeDefinition = [self definition]
    if (not typeDefinition.isPredefined) & (typeDefinition.headerKind != .noHeader) then
      ioInclusions += !typeDefinition.headerFileName
    end
  }

  //----------------------------------------------------------------------------------------------

  method addHeaderFileName1 ?!@stringset ioInclusions {
    let typeDefinition = [self definition]
    if not typeDefinition.isPredefined then
      switch typeDefinition.headerKind
      case noHeader :
      case oneHeader :
        ioInclusions += !typeDefinition.headerFileName
      case twoHeaders :
        ioInclusions += !typeDefinition.headerFileName + "-1"
      end
    end
  }

  //----------------------------------------------------------------------------------------------

}

//————————————————————————————————————————————————————————————————————————————————————————————————
