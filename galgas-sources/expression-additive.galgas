#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @rightShiftExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @leftShiftExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @addExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @addExpressionNoOverflowAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @subExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#·······················································································································

refclass @subExpressionNoOverflowAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mLeftExpression
  public var @semanticExpressionAST mRightExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <simple_expression> !@semanticExpressionAST outExpression {
    <term> ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $<<$
      let leftOperand = outExpression
      <term> ?let rightOperand
      outExpression = @leftShiftExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $>>$
      let leftOperand = outExpression
      <term> ?let rightOperand
      outExpression = @rightShiftExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $+$
      let leftOperand = outExpression
      <term> ?let rightOperand
      outExpression = @addExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&+$
      let leftOperand = outExpression
      <term> ?let rightOperand
      outExpression = @addExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $-$
      let leftOperand = outExpression
      <term> ?let rightOperand
      outExpression = @subExpressionAST.new {!operatorLocation !leftOperand !rightOperand}
    while
      let operatorLocation = @location.here
      $&-$
      let leftOperand = outExpression
      <term> ?let rightOperand
      outExpression = @subExpressionNoOverflowAST.new {!operatorLocation !leftOperand !rightOperand}
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @rightShiftExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @rightShiftExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext.mPredefinedTypes.mBigIntType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  if let left = leftExpression as @literalBigIntExpressionForGeneration,
     let right = rightExpression as @literalUIntExpressionForGeneration then
     outExpression = @literalBigIntExpressionForGeneration.new {
       !inAnalysisContext.mPredefinedTypes.mBigIntType
       !self.mOperatorLocation
       !left.mValue >> right.mValue
     }
  elsif let left = leftExpression as @literalBigIntExpressionForGeneration,
     let right = rightExpression as @literalBigIntExpressionForGeneration then
     outExpression = @literalBigIntExpressionForGeneration.new {
       !inAnalysisContext.mPredefinedTypes.mBigIntType
       !self.mOperatorLocation
       !left.mValue >> [right.mValue uint]
     }
  elsif not [[leftType mHandledOperatorFlags] infixShiftOperator] then
    error self.mOperatorLocation
    : "left operand type is '@" + [leftType key] + "' and does not support a shift operator"
    :outExpression
  else
  #--- Generate expression
    outExpression = @binaryOperatorExpressionForGeneration.new {
      !leftType
      !self.mOperatorLocation
      !leftExpression
      !.rightShift
      !rightExpression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @leftShiftExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @leftShiftExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext.mPredefinedTypes.mBigIntType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  if let left = leftExpression as @literalBigIntExpressionForGeneration,
     let right = rightExpression as @literalUIntExpressionForGeneration then
     outExpression = @literalBigIntExpressionForGeneration.new {
       !inAnalysisContext.mPredefinedTypes.mBigIntType
       !self.mOperatorLocation
       !left.mValue << right.mValue
     }
  elsif let left = leftExpression as @literalBigIntExpressionForGeneration,
     let right = rightExpression as @literalBigIntExpressionForGeneration then
     outExpression = @literalBigIntExpressionForGeneration.new {
       !inAnalysisContext.mPredefinedTypes.mBigIntType
       !self.mOperatorLocation
       !left.mValue << [right.mValue uint]
     }
  elsif not [[leftType mHandledOperatorFlags] infixShiftOperator] then
    error self.mOperatorLocation
    : "left operand type is '@" + [leftType key] + "' and does not support a shift operator"
    :outExpression
  else
  #--- Generate expression
    outExpression = @binaryOperatorExpressionForGeneration.new {
      !leftType
      !self.mOperatorLocation
      !leftExpression
      !.leftShift
      !rightExpression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @addExpressionNoOverflowAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @addExpressionNoOverflowAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixAddOperatorNoOVF]
    !"&+"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  if let leftBigint  = leftExpression as @literalBigIntExpressionForGeneration,
     let rightBigint = rightExpression as @literalBigIntExpressionForGeneration then
    outExpression = @literalBigIntExpressionForGeneration.new {
      !inAnalysisContext.mPredefinedTypes.mBigIntType
      !self.mOperatorLocation
      !leftBigint.mValue + rightBigint.mValue
    }
  else
    outExpression = @binaryOperatorExpressionForGeneration.new {
      !leftType
      !self.mOperatorLocation
      !leftExpression
      !.addNoOverflow
      !rightExpression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @addExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @addExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixAddOperator]
    !"+"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  if let leftBigint  = leftExpression as @literalBigIntExpressionForGeneration,
     let rightBigint = rightExpression as @literalBigIntExpressionForGeneration then
    outExpression = @literalBigIntExpressionForGeneration.new {
      !inAnalysisContext.mPredefinedTypes.mBigIntType
      !self.mOperatorLocation
      !leftBigint.mValue + rightBigint.mValue
    }
  else
    outExpression = @binaryOperatorExpressionForGeneration.new {
      !leftType
      !self.mOperatorLocation
      !leftExpression
      !.add
      !rightExpression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @subExpressionNoOverflowAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @subExpressionNoOverflowAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixSubOperatorNoOVF]
    !"&-"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  if let leftBigint  = leftExpression as @literalBigIntExpressionForGeneration,
     let rightBigint = rightExpression as @literalBigIntExpressionForGeneration then
    outExpression = @literalBigIntExpressionForGeneration.new {
      !inAnalysisContext.mPredefinedTypes.mBigIntType
      !self.mOperatorLocation
      !leftBigint.mValue - rightBigint.mValue
    }
  else
    outExpression = @binaryOperatorExpressionForGeneration.new {
      !leftType
      !self.mOperatorLocation
      !leftExpression
      !.subNoOverflow
      !rightExpression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @subExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @subExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inInferenceType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inInferenceType
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !leftExpression.mResultType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration rightExpression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry leftType = leftExpression.mResultType
  checkDiadicOperator (
    !leftType
    !rightExpression.mResultType
    ![[leftType mHandledOperatorFlags] infixSubOperator]
    !"-"
    !self.mOperatorLocation
    !?rightExpression
  )  
#--- Generate expression
  if let leftBigint  = leftExpression as @literalBigIntExpressionForGeneration,
     let rightBigint = rightExpression as @literalBigIntExpressionForGeneration then
    outExpression = @literalBigIntExpressionForGeneration.new {
      !inAnalysisContext.mPredefinedTypes.mBigIntType
      !self.mOperatorLocation
      !leftBigint.mValue - rightBigint.mValue
    }
  else
    outExpression = @binaryOperatorExpressionForGeneration.new {
      !leftType
      !self.mOperatorLocation
      !leftExpression
      !.sub
      !rightExpression
    }
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @binaryOperator {
  case rightShift
  case leftShift
  case add
  case addNoOverflow
  case sub
  case subNoOverflow
  case operator_and
  case operator_or
  case operator_xor
  case multiply_operation_no_ovf
  case multiply_operation
  case divide_operation
  case divide_operation_no_ovf
  case modulo_operation
}

#·····················································································································

refclass @binaryOperatorExpressionForGeneration : @semanticExpressionForGeneration {
  public var @semanticExpressionForGeneration mLeftExpression
  public var @binaryOperator mOperator
  public var @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

override method @binaryOperatorExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  var @string leftTemporaryOperand
  [self.mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand]
#--- Right operand
  var @string rightTemporaryOperand
  [self.mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand]
#--- Generate Comparison
  var @string operatorString
  var @bool hasCompilerOption
  switch self.mOperator
  case rightShift    :
    operatorString = "right_shift_operation"
    hasCompilerOption = true
  case leftShift     :
    operatorString = "left_shift_operation"
    hasCompilerOption = true
  case add           :
    operatorString = "add_operation"
    hasCompilerOption = true
  case addNoOverflow :
    operatorString = "add_operation_no_ovf"
    hasCompilerOption = true
  case sub           :
    operatorString = "substract_operation"
    hasCompilerOption = true
  case subNoOverflow :
    operatorString = "substract_operation_no_ovf"
    hasCompilerOption = true
  case operator_and :
    operatorString = "operator_and"
    hasCompilerOption = false
  case operator_or :
    operatorString = "operator_or"
    hasCompilerOption = false
  case operator_xor :
    operatorString = "operator_xor"
    hasCompilerOption = false
  case multiply_operation_no_ovf :
    operatorString = "multiply_operation_no_ovf"
    hasCompilerOption = true
  case multiply_operation :
    operatorString = "multiply_operation"
    hasCompilerOption = true
  case divide_operation :
    operatorString = "divide_operation"
    hasCompilerOption = true
  case divide_operation_no_ovf :
    operatorString = "divide_operation_no_ovf"
    hasCompilerOption = true
  case modulo_operation :
    operatorString = "modulo_operation"
    hasCompilerOption = true
  end
  outCppExpression = leftTemporaryOperand + "." + operatorString + " ("
  outCppExpression += rightTemporaryOperand
  if hasCompilerOption then
    outCppExpression += ", " + compilerCppName ()
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  end
  outCppExpression += [self.mLocation commaSourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
