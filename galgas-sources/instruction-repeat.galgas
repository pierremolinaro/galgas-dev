#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @repeatInstruction : @syntaxInstructionAST {
  private let @syntaxInstructionList mRepeatedInstructionList
  private let @location mEndOf_repeated_instructions_branch
  private let @listOfSyntaxInstructionList mRepeatBranchList
  private let @location mEndOf_repeat_instruction
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3SyntaxComponentSyntax {

  #·····················································································································

  rule <syntax_instruction_ggs3>
    !@syntaxInstructionAST outInstruction {
    $repeat$
    let mRepeatInstructionLocation = @location.here
    <syntax_instruction_list_ggs3> ?let @syntaxInstructionList mRepeatedInstructionList
    let endOf_repeated_instructions = @location.here
    var mRepeatBranchList = @listOfSyntaxInstructionList {}
    repeat
      $while$
      <syntax_instruction_list_ggs3> ?let @syntaxInstructionList mInstructionList
      mRepeatBranchList += ! mInstructionList !@location.here
    while
    end
    $end$
    let endOf_repeat_instruction = @location.here
    select
    or
      $%attribute$ ?let @lstring terminator
      if terminator.string != "repeat" then
        error terminator : "the terminator attribute should be '%repeat'" fixit { replace "%repeat" }
      end
    end
    outInstruction = @repeatInstruction.new {
      !mRepeatInstructionLocation
      !mRepeatedInstructionList
      !endOf_repeated_instructions
      !mRepeatBranchList
      !endOf_repeat_instruction
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4SyntaxComponentSyntax {

  #·····················································································································

  rule <syntax_instruction> ?!@galgasDeclarationAST ioDeclarations !@syntaxInstructionAST outInstruction {
    $repeat$
    let mRepeatInstructionLocation = @location.here
    <syntax_instruction_list>!?ioDeclarations ?let @syntaxInstructionList mRepeatedInstructionList
    let endOf_repeated_instructions = @location.here
    var mRepeatBranchList = @listOfSyntaxInstructionList {}
    repeat
      $while$
      <syntax_instruction_list> !?ioDeclarations ?let @syntaxInstructionList mInstructionList
      mRepeatBranchList += ! mInstructionList !@location.here
    while
    end
    $end$
    let endOf_repeat_instruction = @location.here
    select
    or
      $%attribute$ ?let @lstring terminator
      if terminator.string != "repeat" then
        error terminator : "the terminator attribute should be '%repeat'" fixit { replace "%repeat" }
      end
    end
    outInstruction = @repeatInstruction.new {
      !mRepeatInstructionLocation
      !mRepeatedInstructionList
      !endOf_repeated_instructions
      !mRepeatBranchList
      !endOf_repeat_instruction
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! TRANSFORM
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @repeatInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  let @uint addedNonTerminalIndex = ioAddedNonTerminalIndex
  ioAddedNonTerminalIndex += 1

  var repeatedInstructionList = @syntaxInstructionListForGrammarAnalysis {}
  transformInstructionList (
    !self.mRepeatedInstructionList
    !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
    !nonTerminalSymbolMap:inNonTerminalSymbolMap
    !?addedTerminalIndex:ioAddedNonTerminalIndex
    !?repeatedInstructionList
  )
  var repeatBranchList = @branchListForGrammarAnalysis.listWithValue{!repeatedInstructionList}

  for (mSyntaxInstructionList *) in self.mRepeatBranchList do
    var syntaxInstructionList = @syntaxInstructionListForGrammarAnalysis {}
    transformInstructionList (
      !mSyntaxInstructionList
      !?usedTerminalMap:ioActuallyUsedTerminalSymbolMap
      !nonTerminalSymbolMap:inNonTerminalSymbolMap
      !?addedTerminalIndex:ioAddedNonTerminalIndex
      !?syntaxInstructionList
    )
    repeatBranchList += !syntaxInstructionList
  end

  ioSyntaxInstructionList += !@repeatInstructionForGrammarAnalysis.new {
    !self.mInstructionLocation
    !repeatBranchList
    !addedNonTerminalIndex
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @repeatInstruction analyzeSyntaxInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @bool inHasTranslateFeature
  ?let @terminalMap inTerminalMap
  ?let @string inLexiqueName
  ?let @nonterminalMap inNonterminalMap
  ?let @string inComponentName
  ?let @stringset inIndexNameSet
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
  ?!@uint ioSelectMethodCount
{
  let @uint choiceIndex = ioSelectMethodCount
  ioSelectMethodCount += 1
#--- Begin block
  [!?ioVariableMap openOverrideForRepeatBlock]
#--- Repeated instructions
  analyzeSyntaxInstructionList (
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inAnalysisContext
    !?ioTypeMap
    !inHasTranslateFeature
    !inTerminalMap
    !inLexiqueName
    !inNonterminalMap
    !inComponentName
    !self.mRepeatedInstructionList
    !self.mEndOf_repeated_instructions_branch
    !inIndexNameSet
    !?ioVariableMap
    !?ioSelectMethodCount
    ?let repeated_instructionList
  )
#--- 'while' blocks
  var @listOfSemanticInstructionListForGeneration listOfSemanticInstructionListForGeneration = {}
  for (mSyntaxInstructionList mEndOf_instructions) in self.mRepeatBranchList do
    analyzeSyntaxInstructionList (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !inHasTranslateFeature
      !inTerminalMap
      !inLexiqueName
      !inNonterminalMap
      !inComponentName
      !mSyntaxInstructionList
      !mEndOf_instructions
      !inIndexNameSet
      !?ioVariableMap
      !?ioSelectMethodCount
      ?let instructionList
    )
    listOfSemanticInstructionListForGeneration += !instructionList !mEndOf_instructions
  end
#--- End block
  [!?ioVariableMap closeOverride !self.mEndOf_repeat_instruction]
#---
  ioInstructionListForGeneration += !@repeatInstructionForGeneration.new {
    !self.mInstructionLocation
    !inComponentName
    !choiceIndex
    !repeated_instructionList
    !self.mEndOf_repeat_instruction
    !listOfSemanticInstructionListForGeneration
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @repeatInstructionForGeneration : @syntaxInstructionForGeneration {
  private let @string mSyntaxComponentName
  private let @uint mChoiceIndex
  private let @semanticInstructionListForGeneration m_repeated_instructionList
  private let @location mEndOfRepeatedInstructions
  private let @listOfSemanticInstructionListForGeneration mListOfSemanticInstructionListForGeneration
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @repeatInstructionForGeneration appendSyntaxSignature
  ?let @string inPosfix
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration 
{
  let repeated_instructionList = syntaxSignatureOfInstructionList (!inPosfix !self.m_repeated_instructionList)
  var listOfSemanticInstructionListForGeneration = @listOfSemanticInstructionListForGeneration {}
  for (mInstructionList mEndOfInstructionList) in self.mListOfSemanticInstructionListForGeneration do
    listOfSemanticInstructionListForGeneration +=
      !syntaxSignatureOfInstructionList (!inPosfix !mInstructionList)
      !mEndOfInstructionList
  end
#---
  ioInstructionListForGeneration += !@repeatInstructionForGeneration.new {
    !self.mInstructionLocation
    !self.mSyntaxComponentName
    !self.mChoiceIndex
    !repeated_instructionList
    !self.mEndOfRepeatedInstructions
    !listOfSemanticInstructionListForGeneration
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! COMPARE SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @repeatInstructionForGeneration compareInstructionSyntaxSignature
  ?let @semanticInstructionForGeneration inTestedInstruction ->@bool {
  if let si = inTestedInstruction as @repeatInstructionForGeneration then
#  cast inTestedInstruction
#  case >= @repeatInstructionForGeneration si :
    result = compareSyntaxSignature (!self.m_repeated_instructionList !si.m_repeated_instructionList !si.mEndOfRepeatedInstructions)
    if result & ([self.mListOfSemanticInstructionListForGeneration count] != [si.mListOfSemanticInstructionListForGeneration count]) then
      error si.mInstructionLocation
        :"syntax signature error; the reference 'repeat' instruction has "
        + [[self.mListOfSemanticInstructionListForGeneration count] string]
        + " 'while' branche(s), but this instruction has "
        + [[si.mListOfSemanticInstructionListForGeneration count] string]
      result = false
    end
    for (ref_mInstructionList *) in self.mListOfSemanticInstructionListForGeneration, (test_mInstructionList test_mEndOfInstructionList) in si.mListOfSemanticInstructionListForGeneration while result do
      result = compareSyntaxSignature (!ref_mInstructionList !test_mInstructionList !test_mEndOfInstructionList)    
    end
  elsif let si = inTestedInstruction as @syntaxInstructionForGeneration then
#  case >= @syntaxInstructionForGeneration si :
    error si.mInstructionLocation
      :"syntax signature error; the expected syntax instruction here is a 'repeat' instruction"
    result = false
  else
    error self.mInstructionLocation : "internal error"
    result = false
  end
  if not result then
    error self.mInstructionLocation
    :"reference syntax instruction is here"
  end  
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @repeatInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  let @string repeatFlagCppName = "repeatFlag_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
  ioGeneratedCode += "bool " + repeatFlagCppName + " = true ;\n"
  ioGeneratedCode += "while (" + repeatFlagCppName + ") {\n"
  generateInstructionList (
    !?ioInclusionSet
    !self.m_repeated_instructionList
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !inGenerateSyntaxDirectedTranslationString
    !?ioGeneratedCode
  )
  [!?ioGeneratedCode incIndentation !2]
  if [self.mListOfSemanticInstructionListForGeneration length] == 1 then
    ioGeneratedCode += "if (select_" + [self.mSyntaxComponentName identifierRepresentation]
    ioGeneratedCode += "_" + [self.mChoiceIndex string] + " (" + compilerCppName () + ") == 2) {\n"
    let instructionList = [self.mListOfSemanticInstructionListForGeneration mInstructionListAtIndex !0]
    generateInstructionList (
      !?ioInclusionSet
      !instructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !inGenerateSyntaxDirectedTranslationString
      !?ioGeneratedCode
    )
    ioGeneratedCode += "}else{\n"
    ioGeneratedCode += "  " + repeatFlagCppName + " = false ;\n"
    ioGeneratedCode += "}\n"  
  else
    ioGeneratedCode += "switch (select_" + [self.mSyntaxComponentName identifierRepresentation]
    ioGeneratedCode += "_" + [self.mChoiceIndex string] + " (" + compilerCppName () + ")) {\n"
    for (mInstructionList *) in self.mListOfSemanticInstructionListForGeneration do(IDX)
      ioGeneratedCode += "case " + [IDX + 2 string] + ": {\n"
      generateInstructionList (
        !?ioInclusionSet
        !mInstructionList
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        !inGenerateSyntaxDirectedTranslationString
        !?ioGeneratedCode
      )
      ioGeneratedCode += "} break ;\n"
    end
    ioGeneratedCode += "default:\n"
    ioGeneratedCode += "  " + repeatFlagCppName + " = false ;\n"
    ioGeneratedCode += "  break ;\n"
    ioGeneratedCode += "}\n"
  end
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
