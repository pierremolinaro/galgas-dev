//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//------------------------------------------------------------------------------------------------
//! AST
//------------------------------------------------------------------------------------------------

class @assignmentInstructionAST : @semanticInstructionAST {
  private let @lstring mTargetVariableName
  private let @lstring mOptionalProperty
  private let @semanticExpressionAST mSourceExpression
}

//------------------------------------------------------------------------------------------------

class @selfPropertyAssignmentInstructionAST : @semanticInstructionAST {
  private let @lstring mTargetSelfPropertyName
  private let @lstring mOptionalProperty
  private let @semanticExpressionAST mSourceExpression
}

//------------------------------------------------------------------------------------------------
//! SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension galgas3InstructionsSyntax {

  //······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST mSourceExpression
    outInstruction = @assignmentInstructionAST {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
     }
  }

  //······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $self$
    $.$
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST mSourceExpression
    outInstruction = @selfPropertyAssignmentInstructionAST {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
    }
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4InstructionsSyntax {

  //······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $[$
      <non_empty_output_expression_list>
         !?ioDeclarations
         ?let @actualOutputArgumentList unused outExpressionList
      $]$
      error .here : "not handled yet" : optionalProperty
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression> !?ioDeclarations ?let @semanticExpressionAST mSourceExpression
    outInstruction = @assignmentInstructionAST {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
     }
  }

  //······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $self$
    $.$
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $[$
      <non_empty_output_expression_list>
         !?ioDeclarations
         ?let @actualOutputArgumentList unused outExpressionList
      $]$
      error .here : "not handled yet" : optionalProperty
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression> !?ioDeclarations ?let @semanticExpressionAST mSourceExpression
    outInstruction = @selfPropertyAssignmentInstructionAST {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
    }
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------
//! CONTEXT
//------------------------------------------------------------------------------------------------

override method @assignmentInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

//------------------------------------------------------------------------------------------------

override method @selfPropertyAssignmentInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

//------------------------------------------------------------------------------------------------
//! SEMANTICS
//------------------------------------------------------------------------------------------------

override method @assignmentInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
//--- Get target variable type
  [!?ioVariableMap neutralAccess
    !self.mTargetVariableName
    ?let receiverType
    ?*
    ?*
  ]
  var targetType = receiverType
  if self.mOptionalProperty.string != "" then
    let propertyMap = [targetType definition].propertyMap
    [propertyMap searchKey !self.mOptionalProperty ?let accessControl ?let isConstant ?targetType]
    [accessControl checkSetAccess !inAnalysisContext.selfAvailability !self.mOptionalProperty]
    if isConstant then
      error self.mOptionalProperty : "a constant property cannot be modified"
    end
  end
//--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: targetType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
//--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (
    !targetType
    !expression.mResultType
    !self.mInstructionLocation
    !?expression
  )
//--- Get target variable
  let @string targetVariableCppName
  let @string nameForCheckingFormalParameterUsing
  if self.mOptionalProperty.string == "" then
    [!?ioVariableMap searchForWriteAccess
      !self.mTargetVariableName
      ?*
      ?targetVariableCppName
      ?nameForCheckingFormalParameterUsing
    ]
  else
    [!?ioVariableMap searchForReadWriteAccess
      !self.mTargetVariableName
      ?*
      ?targetVariableCppName
      ?nameForCheckingFormalParameterUsing
    ]
  end
//--- Generate instruction
  ioInstructionListForGeneration += !@assignmentInstructionForGeneration {
    !receiverType
    !targetType
    !targetVariableCppName
    !nameForCheckingFormalParameterUsing
    !self.mOptionalProperty
    !expression
    !self.mTargetVariableName.location
  }
}

//------------------------------------------------------------------------------------------------

override method @selfPropertyAssignmentInstructionAST analyzeSemanticInstruction
                        ?let @lstring inUsefulnessCallerEntityName
                        ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                        ?let @analysisContext inAnalysisContext
                        ?!@unifiedTypeMap ioTypeMap
                        ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                        ?!@localVarManager ioVariableMap {
  if let selfAvailable = [inAnalysisContext.selfAvailability getAvailable] then
    if not [selfAvailable.selfMutability propertiesAreMutable] then
      error self.mInstructionLocation : "'self' property not mutable in this context"
    end
    let propertyMap = [selfAvailable.type definition].propertyMap
    [propertyMap searchKey !self.mTargetSelfPropertyName ?* ?let isConstant ?var targetType]
    if isConstant & not [selfAvailable.selfMutability isInitializer] then
      error self.mTargetSelfPropertyName : "a constant property cannot be modified"
    end
    let targetVariableCppName = inAnalysisContext.selfObjectCppPrefixForAccessingProperty
       + "mProperty_"+ [self.mTargetSelfPropertyName.string identifierRepresentation]
  //--- Get target variable type
    if self.mOptionalProperty.string != "" then
      let propertyMap = [targetType definition].propertyMap
      [propertyMap searchKey !self.mOptionalProperty ?let accessControl ?let isConstant ?targetType]
      [accessControl checkSetAccess !inAnalysisContext.selfAvailability !self.mOptionalProperty.location]
      if isConstant then
        error self.mOptionalProperty : "a constant property cannot be modified"
      end
    end
  //--- Analyze source expression
    [self.mSourceExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: targetType
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?@semanticExpressionForGeneration expression
    ]
  //---
    [!?ioVariableMap searchForWriteAccess 
      !@{!"self." + self.mTargetSelfPropertyName !self.mTargetSelfPropertyName} ?3*
    ]
  //--- Check assignment type compatibility
    checkAssignmentTypeWithImplicitGetterCall (!targetType !expression.mResultType !self.mInstructionLocation !?expression)
  //--- Generate instruction
    ioInstructionListForGeneration += !@assignmentInstructionForGeneration {
      !selfAvailable.type
      !targetType
      !targetVariableCppName
      !inAnalysisContext.selfObjectCppName
      !self.mOptionalProperty
      !expression
      !self.mTargetSelfPropertyName.location
    }
  else
    error self.mInstructionLocation : "'self' not available in this context"
  end
}

//------------------------------------------------------------------------------------------------
//! GENERATION TYPES
//------------------------------------------------------------------------------------------------

class @assignmentInstructionForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @unifiedTypeMapEntry mTargetType
  private let @string mTargetCppName
  private let @string mNameForCheckingFormalParameterUsing
  private let @string mOptionalProperty
  private let @semanticExpressionForGeneration mSourceExpression
  private let @location mSourceLocation

  //······························································································

  override method generateInstruction ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      ?let @bool unused inGenerateSyntaxDirectedTranslationString
                                      ?!@string ioGeneratedCode {
    [self.mSourceExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let sourceVar
    ]
    [!?ioUnusedVariableCppNameSet removeKey !self.mNameForCheckingFormalParameterUsing]
  //---
    [self.mTargetType addHeaderFileName !?ioInclusionSet]
    if self.mOptionalProperty == "" then
      ioGeneratedCode += self.mTargetCppName + " = " + sourceVar + " ;\n"
    elsif [[self.mReceiverType definition].typeKind isClassType] then
      [[self.mReceiverType definition].typeKind extractClassType ?isReference: let isReference]
      if isReference then
        ioGeneratedCode += self.mTargetCppName + ".setProperty_"
        ioGeneratedCode += [self.mOptionalProperty identifierRepresentation]
        ioGeneratedCode += " (" + sourceVar + ") ;\n"
      else
        ioGeneratedCode += self.mTargetCppName + ".setter_setProperty_5F_"
        ioGeneratedCode += [[self.mOptionalProperty identifierRepresentation] stringByCapitalizingFirstCharacter]
        ioGeneratedCode += " (" + sourceVar + ", " + compilerCppName () + " COMMA_HERE) ;\n"
        [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
      end
    else
      ioGeneratedCode += self.mTargetCppName + ".mProperty_"
      ioGeneratedCode += [self.mOptionalProperty identifierRepresentation]
      ioGeneratedCode += " = " + sourceVar + " ;\n"
    end
    [!?ioUnusedVariableCppNameSet removeKey !self.mTargetCppName]
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------
