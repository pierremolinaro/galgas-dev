#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @assignmentInstructionAST : @semanticInstructionAST {
  private let @lstring mTargetVariableName
  private let @lstring mOptionalProperty
  private let @semanticExpressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @selfPropertyAssignmentInstructionAST : @semanticInstructionAST {
  private let @lstring mTargetSelfPropertyName
  private let @lstring mOptionalProperty
  private let @semanticExpressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression> ?let @semanticExpressionAST mSourceExpression
    outInstruction = @assignmentInstructionAST.new {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
     }
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    $.$
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression> ?let @semanticExpressionAST mSourceExpression
    outInstruction = @selfPropertyAssignmentInstructionAST.new {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression> ?let @semanticExpressionAST mSourceExpression
    outInstruction = @assignmentInstructionAST.new {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
     }
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    $.$
    $identifier$ ?let mTargetVariableName
    let @lstring optionalProperty
    select
      optionalProperty = ["" nowhere]
    or
      $.$
      $identifier$ ?let attributeName
      optionalProperty = attributeName
    end
    $=$
    <expression> ?let @semanticExpressionAST mSourceExpression
    outInstruction = @selfPropertyAssignmentInstructionAST.new {
      !mTargetVariableName.location
      !mTargetVariableName
      !optionalProperty
      !mSourceExpression
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfPropertyAssignmentInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @assignmentInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
#--- Get target variable type
  var @unifiedTypeMapEntry targetType
  if self.mOptionalProperty.string == "" then
    [!?ioVariableMap neutralAccess
      !self.mTargetVariableName
      ?targetType
      ?*
      ?*
    ]
  else
    [!?ioVariableMap neutralAccess
      !self.mTargetVariableName
      ?targetType
      ?*
      ?*
    ]
    let propertyMap = [targetType mPropertyMap]
    [propertyMap searchKey !self.mOptionalProperty ?let isPublic ?let isConstant ?targetType]
    if not isPublic then
      error self.mOptionalProperty : " inaccessible property (due to its 'private' qualifier)"
    end
    if isConstant then
      error self.mOptionalProperty : "a constant property cannot be modified"
    end
  end
#--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType:  targetType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (
    !targetType
    !expression.mResultType
    !self.mInstructionLocation
    !?expression
  )
#--- Get target variable
  let @string targetVariableCppName
  let @string nameForCheckingFormalParameterUsing
  if self.mOptionalProperty.string == "" then
    [!?ioVariableMap searchForWriteAccess
      !self.mTargetVariableName
      ?*
      ?targetVariableCppName
      ?nameForCheckingFormalParameterUsing
    ]
  else
    [!?ioVariableMap searchForReadWriteAccess
      !self.mTargetVariableName
      ?*
      ?targetVariableCppName
      ?nameForCheckingFormalParameterUsing
    ]
  end
#--- Generate instruction
  ioInstructionListForGeneration += !@assignmentInstructionForGeneration.new {
    !targetType
    !targetVariableCppName
    !nameForCheckingFormalParameterUsing
    !self.mOptionalProperty
    !expression
    !self.mTargetVariableName.location
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfPropertyAssignmentInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
  if let [inAnalysisContext.selfType available ?type: let selfType ?mutable: * ?mutableproperties: let mutableProperties] then
    if not mutableProperties then
      error self.mInstructionLocation : "'self' property not mutable in this context"
    end
    let propertyMap = [selfType mPropertyMap]
    [propertyMap searchKey !self.mTargetSelfPropertyName ?* ?let isConstant ?var targetType]
    if isConstant then
      error self.mTargetSelfPropertyName : "a constant property cannot be modified"
    end
    let targetVariableCppName = inAnalysisContext.mSelfObjectCppPrefixForAccessingProperty
     + "mProperty_"+ [self.mTargetSelfPropertyName.string identifierRepresentation]
  #--- Get target variable type
    if self.mOptionalProperty.string != "" then
      let propertyMap = [targetType mPropertyMap]
      [propertyMap searchKey !self.mOptionalProperty ?let isPublic ?let isConstant ?targetType]
      if not isPublic then
        error self.mOptionalProperty : " inaccessible property (due to its 'private' qualifier)"
      end
      if isConstant then
        error self.mOptionalProperty : "a constant property cannot be modified"
      end
    end
  #--- Analyze source expression
    [self.mSourceExpression analyzeSemanticExpression
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType:  targetType
      !inAnalysisContext
      !?ioVariableMap
      ?@semanticExpressionForGeneration expression
    ]
  #--- Check assignment type compatibility
    checkAssignmentTypeWithImplicitGetterCall (!targetType !expression.mResultType !self.mInstructionLocation !?expression)
  #--- Generate instruction
    ioInstructionListForGeneration += !@assignmentInstructionForGeneration.new {
      !targetType
      !targetVariableCppName
      !inAnalysisContext.mSelfObjectCppName
      !self.mOptionalProperty
      !expression
      !self.mTargetSelfPropertyName.location
    }
  else
    error self.mInstructionLocation : "'self' not available in this context"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @assignmentInstructionForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMapEntry mTargetType
  private let @string mTargetCppName
  private let @string mNameForCheckingFormalParameterUsing
  private let @string mOptionalProperty
  private let @semanticExpressionForGeneration mSourceExpression
  private let @location mSourceLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @assignmentInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [self.mSourceExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let sourceVar
  ]
  [!?ioUnusedVariableCppNameSet removeKey !self.mNameForCheckingFormalParameterUsing]
#---
  [self.mTargetType addHeaderFileName !?ioInclusionSet]
  if self.mOptionalProperty == "" then
    ioGeneratedCode += self.mTargetCppName + " = " + sourceVar + " ;\n"
  else
    ioGeneratedCode += self.mTargetCppName + ".setter_set" 
    ioGeneratedCode += [[self.mOptionalProperty stringByCapitalizingFirstCharacter] identifierRepresentation]
    ioGeneratedCode += " (" + sourceVar + " COMMA_" + [self.mSourceLocation sourceFile] + ") ;\n"
  end
  [!?ioUnusedVariableCppNameSet removeKey !self.mTargetCppName]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
