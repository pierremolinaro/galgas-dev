//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//   SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3DeclarationsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <type_definition_ggs3> ?!@galgasDeclarationAST ioDeclarations
                              !@lstring outTypeName {
    $[$
    <type_definition_ggs3> !?ioDeclarations ?let elementTypeName
    outTypeName = makeArrayTypeLName (!elementTypeName)
    if not [ioDeclarations.implicitTypeDeclarationSet hasKey !outTypeName.string] then
      ioDeclarations.implicitTypeDeclarationSet += !outTypeName.string
      ioDeclarations.mDeclarationList += !@arrayTypeDeclarationAST (
        !isPredefined: false,
        outTypeName,
        elementTypeName,
        !isUsefull: true,
        !equatable: false
      )
    end
    $]$
  }


  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4DeclarationsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

class @arrayTypeDeclarationAST : @semanticDeclarationAST {
  private let @lstring arrayTypeName
  private let @lstring elementTypeName
  private let @bool isUsefull %initArgLabel
  private let @bool equatable %initArgLabel

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override getter keyRepresentation->@string {
    result = "array [@" + self.arrayTypeName + "]"
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterDeclarationInGraph
    ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
    ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
    ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
    ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
    ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
    let key = @lstring {!"@" + self.arrayTypeName !self.arrayTypeName.location}
    [!?ioSemanticTypePrecedenceGraph addNode !key !self]
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring {!"@" + self.elementTypeName !self.elementTypeName}]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterDeclarationInSemanticContext
    ?!@equatableExtensionMap ioEquatableExtensionMap
    ?let @extensionInitializerForBuildingContext inExtensionInitializerMapForBuildingContext
    ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
    ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
    ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
    ?!@unifiedTypeMap ioTypeMap
    ?!@semanticContext ioSemanticContext {
  //--- uint type index
    [!?ioTypeMap makeEntryFromString !"uint" ?let uintType]
  //--- Element type index
    [!?ioTypeMap makeEntry !self.elementTypeName ?let elementType]
  //--- Setter argument list
    var @formalParameterSignature setterInputFormalArgumentList = @[
      @(["" nowhere], elementType, .argumentConstantIn, "inElement")
    ]
    var @formalParameterSignature setterOutputFormalArgumentList = @[
      @(["" nowhere], elementType, .argumentOut, "outElement")
    ]
  //--- Getters
    commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap )
    enterBaseGetterWithoutArgument (
      !?getterMap
      !?ioTypeMap
      !getterName: "count"
      !obsoleteName: ""
      !returnedTypeName: "uint"
      !hasCompilerArgument: false
    )
//    enterInheritedGetterWithoutArgument (
//      !?getterMap
//      !?ioTypeMap
//      !getterName:"range"
//      !obsoleteName: ""
//      !returnedTypeName:"range"
//      !hasCompilerArgument:false
//    )
//    enterBaseGetterWithArgument (
//      !?getterMap
//      !?ioTypeMap
//      !getterName: "subListFromIndex"
//      !argSelector: "" !argType: "uint" !argName: "inIndex"
//      !returnedTypeName:self.arrayTypeName.string
//      !hasCompilerArgument:true
//    )
//    enterBaseGetterWithArgument (
//      !?getterMap
//      !?ioTypeMap
//      !getterName: "subListToIndex"
//      !argSelector: "" !argType: "uint" !argName: "inIndex"
//      !returnedTypeName: self.arrayTypeName.string
//      !hasCompilerArgument: true
//    )
//    enterBaseGetterWithArgument (
//      !?getterMap
//      !?ioTypeMap
//      !getterName: "subListWithRange"
//      !argSelector: "" !argType: "range" !argName: "inRange"
//      !returnedTypeName:self.arrayTypeName.string
//      !hasCompilerArgument:true
//    )
  //------------------------ Instance methods
    var @instanceMethodMap instanceMethodMap = @()
    [!?instanceMethodMap insertKey
      !@lstring {!"first" !@location.here}
      !@methodKind.definedAsMember
      !setterOutputFormalArgumentList
      !@location.here
      !true
      !@methodQualifier.isBasic
      !""
    ]
    [!?instanceMethodMap insertKey
      !@lstring {!"last" !@location.here}
      !@methodKind.definedAsMember
      !setterOutputFormalArgumentList
      !@location.here
      !true
      !@methodQualifier.isBasic
      !""
    ]
  //---------------------------------------- Setters
    var @setterMap setterMap = @()
    [!?setterMap insertKey
      !@lstring {!"append" !.here}
      !.definedAsMember
      !@[@(["" nowhere], elementType, .argumentConstantIn, "inElement")]
      !true
      !@methodQualifier.isBasic
      !""
    ]
    [!?setterMap insertKey
      !@lstring {!"popFirst" !@location.here}
      !@methodKind.definedAsMember
      !setterOutputFormalArgumentList
      !true
      !@methodQualifier.isBasic
      !""
    ]
    [!?setterMap insertKey
      !@lstring {!"popLast" !@location.here}
      !@methodKind.definedAsMember
      !setterOutputFormalArgumentList
      !true
      !@methodQualifier.isBasic
      !""
    ]
    setterOutputFormalArgumentList += !["" nowhere] !uintType !.argumentConstantIn !"inIndex"
    [!?setterMap insertKey
      !@lstring {!"removeAtIndex" !@location.here}
      !@methodKind.definedAsMember
      !setterOutputFormalArgumentList
      !true
      !@methodQualifier.isBasic
      !""
    ]
  //--- setter 'insertAtIndex'
    setterInputFormalArgumentList += !["" nowhere] !uintType !.argumentConstantIn !"inInsertionIndex"
    [!?setterMap insertKey
      !@lstring {!"insertAtIndex" !@location.here}
      !@methodKind.definedAsMember
      !setterInputFormalArgumentList
      !true
      !@methodQualifier.isBasic
      !"" // No error message
    ]
  //--- Add initializer without argument
    var @initializerMap initializerMap = @()
    let @functionSignature emptyArgumentList = @()
    [!?initializerMap insertKey
      !@{![emptyArgumentList initializerSignature] !self.arrayTypeName}
      !emptyArgumentList
    ]
  //--- Read subscripts
    var @subscriptMap readSubscriptMap = @()
    let @functionSignature argumentTypeList = @[@(["" nowhere], uintType, "inIndex", true)]
    [!?readSubscriptMap insertKey
      !@([argumentTypeList subcriptSignature], .nowhere)
      !argumentTypeList
      !elementType
    ]
  //--- Add extensions
    addExtensions (
      !inExtensionInitializerMapForBuildingContext
      !inExtensionMethodMapForBuildingContext
      !inExtensionGetterMapForBuildingContext
      !inExtensionSetterMapForBuildingContext
      !?ioSemanticContext
      !?ioTypeMap
      !self.arrayTypeName
      !isClass: false
      !?initializerMap
      !?getterMap
      !?setterMap
      !?instanceMethodMap
      !acceptSetters: true
    )
  //--- features
    var features = @typeFeatures.infixAddOperator | .plusAssignOperatorWithExpression
    if self.equatable then
      features |= .equatable
    end
    handleEquatableComparableExtension (
      !?ioEquatableExtensionMap
      !self.arrayTypeName
      !?features
      !acceptEquatable: true
      !acceptComparable: false
    )
  //--- Enter in type map
    let typeDefinition = @unifiedTypeDefinition {
      !typeName: self.arrayTypeName
      !isPredefined: self.isPredefined
      !isConcrete: true // Concrete Type
      !superType: .null
      !typeKind: .listType
      !supportCollectionValue: true 
      !allTypedPropertyList: @()
      !propertyMap: @()
      !currentTypedPropertyList: @()
      !initializerMap: initializerMap
      !classFunctionMap: @()
      !getterMap: getterMap
      !setterMap: setterMap
      !instanceMethodMap: instanceMethodMap
      !classMethodMap: @()
      !unwrappedType: .null
      !readSubscriptMap: readSubscriptMap
      !enumerationDescriptorList: @()
      !features: features
      !addAssignOperatorArguments: @()
      !mapSearchMethodList: @()
      !generateHeaderInSeparateFile: false
      !typeForEnumeratedElement: elementType
      !headerFileName: "array-" + [self.arrayTypeName fileNameRepresentation]
      !headerKind: .oneHeader
    }
    [!?ioTypeMap insertType !typeDefinition.typeName !typeDefinition]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method addAssociatedElement
    ?!@galgasDeclarationAST unused ioDeclarations {
//    var @propertyInCollectionListAST structAttributeList = @()
//    for (isConstant qualifiedTypeAST mPropertyName * hasSelector initExpression) in self.mPropertyList do
//      structAttributeList +=
//        !isConstant: isConstant
//        !qualifiedTypeAST
//        !mPropertyName
//        !.publicAccess
//        !hasSelector: hasSelector
//        !initialization: initExpression
//    end
//    ioSemanticDeclarationList += !@structDeclarationAST {
//      !isPredefined: self.isPredefined
//      !@{!self.arrayTypeName.string + elementTypeNameSuffix () !self.arrayTypeName.location}
//      !structAttributeList
//      !enumeratedElementTypeName: ""
//      !comparison: if self.equatable then .equatable else .none end
//    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method semanticAnalysis
    ?!@lstringlist ioUsefulnessRootEntities
    ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
    ?let @string unused inProductDirectory
    ?let @semanticContext unused inSemanticContext
                                  ?!@unifiedTypeMap ioTypeMap
    ?let @predefinedTypes unused inPredefinedTypes
    ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
  {
  //--- Useful entities graph
    let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.arrayTypeName)
    [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
    if self.isUsefull || self.isPredefined then
      ioUsefulnessRootEntities += !nameForUsefulness
    end
    let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.elementTypeName)
    [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
    if self.isUsefull || self.isPredefined then
      ioUsefulnessRootEntities += !elementTypeNameForUsefulness
    end
  //--- Useful entities graph for initializer without any argument
    let initializerNameForUsefulness = initializerNameForUsefulEntitiesGraph (
      !self.arrayTypeName
      ![@formalInputParameterListAST () initializerSignature]
    )
    [!?ioUsefulEntitiesGraph addNode !initializerNameForUsefulness !initializerNameForUsefulness]
    if self.isUsefull || self.isPredefined then
      ioUsefulnessRootEntities += !initializerNameForUsefulness
    end
  //---
//    var @typedPropertyList typedAttributeList = @()
//    var @propertyIndexMap attributeMap = @()
//    for (* propertyTypeName propertyName unused accessControl hasSelector initExpression) in self.mPropertyList do
//      if [initExpression isSome] then
//        error propertyName : "property initialization is not handled for a list"
//      end
//      let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!propertyTypeName)
//      [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !propertyTypeNameForUsefulness]
//      let t = [ioTypeMap typeMapEntryForLKey !propertyTypeName]
//      typedAttributeList +=
//        !t
//        !propertyName
//        !initExpression
//        !hasSetter: true // not isConstant
//        !hasSelector: hasSelector
//      [!?attributeMap insertKey !propertyName !t]
//    end
  //---
    let selfType = [ioTypeMap typeMapEntryForLKey !self.arrayTypeName]
    ioSemanticDeclarationListForGeneration +=
      !infoMessage: "array type " + self.arrayTypeName
      !@arrayTypeForGeneration {
        !selfType
        ![ioTypeMap typeMapEntryForLKey !self.elementTypeName]
      }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//   CODE GENERATION
//--------------------------------------------------------------------------------------------------

class @arrayTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry elementType

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method appendDeclaration1 ?!@stringset unused ioInclusionSet
                                     !@string outHeader {
    let selfTypeDefinition = [self.mSelfTypeEntry definition]
    outHeader = [filewrapper arrayTypeGenerationTemplate.arrayTypeHeader1
      !selfTypeDefinition.typeName.string
      ![self.mSelfTypeEntry identifierRepresentation]
      ![selfTypeDefinition.typeForEnumeratedElement identifierRepresentation]
    ]
    outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
      !selfTypeDefinition.typeName.string
      ![self.mSelfTypeEntry identifierRepresentation]
      !selfTypeDefinition.isConcrete
      !selfTypeDefinition.initializerMap
      !selfTypeDefinition.classFunctionMap
      !selfTypeDefinition.getterMap
      !selfTypeDefinition.setterMap
      !selfTypeDefinition.instanceMethodMap
      !selfTypeDefinition.classMethodMap
      !selfTypeDefinition.readSubscriptMap
      !selfTypeDefinition.enumerationDescriptorList
      !selfTypeDefinition.features
      !selfTypeDefinition.addAssignOperatorArguments
      !selfTypeDefinition.typeForEnumeratedElement
      !selfTypeDefinition.supportCollectionValue
    ]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method appendSpecificImplementation  ?let @unifiedTypeMap unused inTypeMap
                                          ?!@stringset ioInclusionSet
                                          !@string outImplementation {
    [self.elementType addHeaderFileName !?ioInclusionSet]
    [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
    let selfTypeDefinition = [self.mSelfTypeEntry definition]
    outImplementation = [filewrapper arrayTypeGenerationTemplate.arrayTypeSpecificImplementation
      !selfTypeDefinition.typeName.string
      ![self.mSelfTypeEntry identifierRepresentation]
      ![selfTypeDefinition.typeForEnumeratedElement identifierRepresentation]
      ![selfTypeDefinition.features generateCppObjectComparison]
    ]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

filewrapper arrayTypeGenerationTemplate in "+generation-templates/type_generation" {
}{
}{
  template arrayTypeHeader1 "GALGAS_array.h1.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@string ELEMENT_TYPE_IDENTIFIER

  template arrayTypeSpecificImplementation "GALGAS_array.cpp.galgasTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@string ELEMENT_TYPE_IDENTIFIER
    ?@bool GENERATE_COMPARISON
}

//--------------------------------------------------------------------------------------------------

