//————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Generate predefined types
#
#  Copyright (C) 2010, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————

class @stringsetPredefinedTypeAST : @predefinedTypeAST {

  //----------------------------------------------------------------------------------------------

  override getter supportsCollectionValue -> @bool {
    result = true # Support collection value
  }

  //----------------------------------------------------------------------------------------------

  override getter initializers -> @initializerSignatureList {
    result = §[.init (@formalInputParameterListAST ())]
  }

  //----------------------------------------------------------------------------------------------

  override getter cppDeclarationString -> @string {
    result = [filewrapper predefinedTypeGenerationTemplate.stringset_type]
  }

  //----------------------------------------------------------------------------------------------

  override getter getSupportedOperatorFlags -> @typeFeatures {
    result = .infixSubOperator
      | .infixAndOperator | .infixOrOperator
      | .generateDescriptionGetterUtilityMethod | .plusAssignOperatorWithExpression
      | .generateEnumerationHelperMethods | .equatable | .comparable
      | .generateCopyConstructorAndAssignmentOperator
  }

  //----------------------------------------------------------------------------------------------

  override method getClassFunctionMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                      !@classFunctionMap outMap {
    outMap = ()
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"emptySet"
      !resultTypeName:"stringset"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"setWithString"
      !argTypeName:"string"
      !argName:"inString"
      !resultTypeName:"stringset"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"setWithStringList"
      !argTypeName:"stringlist"
      !argName:"inStringList"
      !resultTypeName:"stringset"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"setWithLStringList"
      !argTypeName:"lstringlist"
      !argName:"inLStringList"
      !resultTypeName:"stringset"
      !hasLexiqueArg:false
    )
  }

  //----------------------------------------------------------------------------------------------

  override method getSetterMap ?!@unifiedTypeMap ioUnifiedTypeMap
                               !@setterMap outSetterMap {
    [!?ioUnifiedTypeMap makeEntryFromString !"string" ?let stringType]
    outSetterMap = ()
    [!?outSetterMap insertKey
      !@lstring {!"removeKey" !@location.here}
      !@methodKind. definedAsMember
      !@formalParameterSignature.listWithValue {!["" nowhere] !stringType !.argumentVarIn !"inKey"}
      !false # No Compiler argument
      !@methodQualifier. isBasic
      !""
    ]
    enterModifierWithInputArgument (
      !?outSetterMap
      !?ioUnifiedTypeMap
      !argTypeName: "string"
      !argName: "inValue"
      !setterName: "insert"
      !compilerArg: true
    )
  }

  //----------------------------------------------------------------------------------------------

  override method getEnumerationList ?!@unifiedTypeMap ioUnifiedTypeMap
                                     !@enumerationDescriptorList outEnumerationList
                                     !@string outEnumeratedType {
    [!?ioUnifiedTypeMap makeEntryFromString !"string" ?let stringTypeIndex]
    outEnumerationList = ()
    outEnumerationList += !stringTypeIndex !"key"
    outEnumeratedType = "string"
  }

  //----------------------------------------------------------------------------------------------

  override method getAddAssignArgumentList ?!@unifiedTypeMap ioUnifiedTypeMap
                                           !@functionSignature outAddAssignArgumentList {
    [!?ioUnifiedTypeMap makeEntryFromString !"string" ?let @unifiedTypeMapEntry stringTypeIndex]
    outAddAssignArgumentList = §[.init (["" nowhere], stringTypeIndex, "inString", true)]
  }

  //----------------------------------------------------------------------------------------------

  override method getGetterMap ?!@unifiedTypeMap ioUnifiedTypeMap
                               !@getterMap outMap {
    commonGetterMapForAllTypes (!?ioUnifiedTypeMap ?outMap)
    enterBaseFinalGetterWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"hasKey" !"string" !"inString"
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"count"
      !obsoleteName: ""
      !returnedTypeName:"uint"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"anyString"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"stringList"
      !obsoleteName: ""
      !returnedTypeName:"stringlist"
      !hasCompilerArgument:false
    )
  }

  //----------------------------------------------------------------------------------------------

}

//————————————————————————————————————————————————————————————————————————————————————————————————
