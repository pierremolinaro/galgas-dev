//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//!   AST
//--------------------------------------------------------------------------------------------------

class @literalTypeInExpressionAST : @semanticExpressionAST {
  private let @lstring mLiteralTypeName
}

//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <primary_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                      !@semanticExpressionAST outExpression {
    $`$
    $@type$ ?let @lstring typeName
    outExpression = @literalTypeInExpressionAST {!typeName}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4ExpressionSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <primary> ?!@galgasDeclarationAST unused ioDeclarations
                 !@semanticExpressionAST outExpression {
    $`$
    $@type$ ?let @lstring typeName // Cannot use <type_definition> !? ioDeclarations ?let @lstring typeName
    outExpression = @literalTypeInExpressionAST {!typeName}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! SEMANTICS
//--------------------------------------------------------------------------------------------------

override method @literalTypeInExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [!?ioTypeMap makeEntry !self.mLiteralTypeName ?*]
}

//································································································

override method @literalTypeInExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext unused inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  let usefulnessName = typeNameForUsefulEntitiesGraph (!self.mLiteralTypeName)
  [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
//---
  let type = [ioTypeMap typeMapEntryForLKey !self.mLiteralTypeName]
  outExpression = @literalTypeInExpressionForGeneration {
    ![ioTypeMap typeMapEntryForLKey !@{!"type" !.here}]
    !self.mLiteralTypeName.location
    !type
  }
}

//--------------------------------------------------------------------------------------------------
//! CODE GENERATION
//--------------------------------------------------------------------------------------------------

class @literalTypeInExpressionForGeneration : @semanticExpressionForGeneration {
  private let @unifiedTypeMapEntry mLiteralType
}

//································································································

override method @literalTypeInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mLiteralType addHeaderFileName !?ioInclusionSet]
  outCppExpression = "GGS_type (& kTypeDescriptor_GALGAS_"
                  + [[self.mLiteralType definition].typeName.string identifierRepresentation] + ")"
}

//--------------------------------------------------------------------------------------------------
