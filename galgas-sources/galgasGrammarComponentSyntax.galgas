#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Copyright (C) 2014, ..., 2022 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3GrammarComponentSyntax (galgasScanner3) {

  #·······························································································
  #   G R A M M A R    C O M P O N E N T
  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    let @lbool hasIndexing
    select
      hasIndexing = @lbool.new {!false !@location.here}
    or
      hasIndexing = @lbool.new {!true !@location.here}
      $indexing$
    end
    $grammar$
    $identifier$ ?let @lstring mGrammarName indexing grammarComponentDefinition
    $"string"$ ?let @lstring mGrammarClass
  #--- Feature translate
    let @bool hasTranslateFeature
    select
      hasTranslateFeature = false
    or
      $%translate$
      hasTranslateFeature = true
    end
    ${$
  #--- Imports
    var @lstringlist syntaxComponents = {}
    repeat
      $syntax$
      $identifier$ ?let @lstring syntaxComponent
      syntaxComponents += !syntaxComponent
    while
    end
  #--- Root symbol
    $<non_terminal>$ ?let @lstring  mStartSymbol indexing ruleReference
    var mLabelList = @nonTerminalLabelListAST {}
    <grammar_start_symbol_label_ggs3> !@lstring.new {!"" !@location.here} !?mLabelList
    repeat
    while
      $label$
      $identifier$ ?let @lstring labelName
      <grammar_start_symbol_label_ggs3> !labelName !?mLabelList
     end
  #--- Unused non terminal symbols
    var mUnusedNonterminalList = @lstringlist {}
    repeat
    while
      $unused$
      $<non_terminal>$ ?let @lstring nonterminalSymbolName
      mUnusedNonterminalList += ! nonterminalSymbolName
    end
  #---
    $}$
    ioDeclarations.mDeclarationList += !@galgas3GrammarComponentAST.new {
      !isPredefined: false # Is not predefined
      !hasIndexing
      !mGrammarName
      !mGrammarClass
      !syntaxComponents
      !mStartSymbol
      !mLabelList
      !mUnusedNonterminalList
      !hasTranslateFeature}
  }

  #·······························································································

  rule <grammar_start_symbol_label_ggs3>
    ?let @lstring inLabelName
    ?!@nonTerminalLabelListAST ioLabelList {
    var @stringset argumentNameSet = {}
    var @formalParameterListAST mFormalParameterList = {}
    repeat
    while
      <label_formal_parameter_ggs3> ?let argumentName !?mFormalParameterList
      if [argumentNameSet hasKey !argumentName.string] then
        error argumentName: "there is already an argument named '" + argumentName + "'"
      end
      argumentNameSet += !argumentName.string
    end
    ioLabelList += !inLabelName !mFormalParameterList !.here
  }

  #·······························································································

  rule <label_formal_parameter_ggs3>
    !@lstring outArgumentName
    ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $?$ ?let selector
    $@type$ ?let @lstring mTypeName
    select
    or
     $unused$
    end
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentIn
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

  rule <label_formal_parameter_ggs3> !@lstring outArgumentName
                                ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $?$ ?let selector
    $let$
    $@type$ ?let @lstring mTypeName
    select
    or
     $unused$
    end
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentConstantIn
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

  rule <label_formal_parameter_ggs3> !@lstring outArgumentName
                                ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $?!$ ?let selector
    $@type$ ?let @lstring mTypeName
    select
    or
     $unused$
    end
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentInOut
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

  rule <label_formal_parameter_ggs3> !@lstring outArgumentName
                                ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $!$ ?let selector
    $@type$ ?let @lstring mTypeName
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentOut
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas4GrammarComponentSyntax (galgasScanner4) {

  #·······························································································
  #   G R A M M A R    C O M P O N E N T
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    let @lbool hasIndexing
    select
      hasIndexing = @lbool.new {!false !@location.here}
    or
      hasIndexing = @lbool.new {!true !@location.here}
      $indexing$
    end
    $grammar$
    $identifier$ ?let @lstring mGrammarName indexing grammarComponentDefinition
    $"string"$ ?let @lstring mGrammarClass
  #--- Feature translate
    let @bool hasTranslateFeature
    select
      hasTranslateFeature = false
    or
      $%translate$
      hasTranslateFeature = true
    end
    ${$
  #--- Imports
    var @lstringlist syntaxComponents = {}
    repeat
      $syntax$
      $identifier$ ?let @lstring syntaxComponent
      syntaxComponents += !syntaxComponent
    while
    end
  #--- Root symbol
    $<non_terminal>$ ?let @lstring startSymbol indexing ruleReference
    var mLabelList = @nonTerminalLabelListAST {}
    <grammar_start_symbol_label> !@lstring.new {!"" !@location.here} !?mLabelList
    repeat
    while
      $label$
      $identifier$ ?let @lstring labelName
      <grammar_start_symbol_label> !labelName !?mLabelList
     end
  #--- Unused non terminal symbols
    var mUnusedNonterminalList = @lstringlist {}
    repeat
    while
      $unused$
      $<non_terminal>$ ?let @lstring nonterminalSymbolName
      mUnusedNonterminalList += ! nonterminalSymbolName
    end
  #---
    $}$
    ioDeclarations.mDeclarationList += !@galgas3GrammarComponentAST.new {
      !isPredefined: false # Is not predefined
      !hasIndexing
      !mGrammarName
      !mGrammarClass
      !syntaxComponents
      !startSymbol
      !mLabelList
      !mUnusedNonterminalList
      !hasTranslateFeature}
  }

  #·······························································································

  rule <grammar_start_symbol_label> ?let @lstring inLabelName
                                    ?!@nonTerminalLabelListAST ioLabelList {
    var @stringset argumentNameSet = {}
    var @formalParameterListAST formalParameterList = {}
    $($
    select
    or
      repeat
        <label_formal_parameter> ?let argumentName !?formalParameterList
        if [argumentNameSet hasKey !argumentName.string] then
          error argumentName: "there is already an argument named '" + argumentName + "'"
        end
        argumentNameSet += !argumentName.string
      while
        $,$
      end
    end
    $)$
    ioLabelList += !inLabelName !formalParameterList !.here
  }

  #·······························································································

  rule <label_formal_parameter> !@lstring outArgumentName
                                ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $?$ ?let selector
    $@type$ ?let @lstring mTypeName
    select
    or
     $unused$
    end
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentIn
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

  rule <label_formal_parameter> !@lstring outArgumentName
                                ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $?$ ?let selector
    $let$
    $@type$ ?let @lstring mTypeName
    select
    or
     $unused$
    end
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentConstantIn
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

  rule <label_formal_parameter> !@lstring outArgumentName
                                ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $?!$ ?let selector
    $@type$ ?let @lstring mTypeName
    select
    or
     $unused$
    end
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentInOut
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

  rule <label_formal_parameter> !@lstring outArgumentName
                                ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
    $!$ ?let selector
    $@type$ ?let @lstring mTypeName
    $identifier$ ?outArgumentName
    ioStartSymbolLabelFormalParameterList +=
      !selector
      !@formalArgumentPassingModeAST. argumentOut
      !mTypeName
      !outArgumentName
      !false
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
