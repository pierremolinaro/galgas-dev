#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  GALGAS main program definition           
#                                           
#  Copyright (C) 2007, ..., 2014 Pierre Molinaro.                                                                      *
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

before { #--- Generate project
  let creationProjectName = [option galgas_cli_options.create_project value]
  projectCreation ( !creationProjectName )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

before { #--- Print predefined lexical action
  if [option galgas_cli_options.printPredefinedLexicalActions value] then
    printPredefinedLexicalActions ( )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

before { #--- Extract LIBPM
  if [option galgas_cli_options.extractLIBPMOption value] != "" then
    updateLIBPMatPath (![option galgas_cli_options.extractLIBPMOption value] )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extern proc checkGMP

before { #--- Extract LIBPM
  if [option galgas_cli_options.check_gmp value] then
    checkGMP ()
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

extern proc displayUnicodeLexicalTestFunctions

before { 
  if [option galgas_cli_options.displayUnicodeLexicalTestFunctions value] then
    displayUnicodeLexicalTestFunctions ()
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#          galgas                           
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

case . "galgas"
message "a GALGAS source file"
grammar galgas3Grammar
?sourceFilePath: @lstring inSourceFile {
#--- Search for a project file in parent directory
  let parentDirectory = [[inSourceFile.string stringByDeletingLastPathComponent] stringByDeletingLastPathComponent]
  let candidateProjectFiles = [parentDirectory regularFilesWithExtensions !false !{!"galgasProject"}]
  if [candidateProjectFiles length] == 0 then
    error inSourceFile : "no project file in parent directory of source file"
  elsif [candidateProjectFiles length] > 1 then
    var s = "several project files in source file parent directory:"
    for (mValue) in candidateProjectFiles do
      s += "\n  - " + mValue
    end
    error inSourceFile : s
  else
    let projectFilePath = parentDirectory + "/" + [candidateProjectFiles mValueAtIndex !0]
    parseAndAnalyzeProject (!.new {!projectFilePath !inSourceFile.location} !inSourceFile.string )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#          Template                         
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

case . "galgasTemplate"
message "a GALGAS Template source file"
grammar templateGrammar
?sourceFilePath:@lstring inSourceFile {
  grammar templateGrammar in inSourceFile ?*
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#          galgasProject                    
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

case . "galgasProject"
message "a GALGAS project source file"
grammar galgas3ProjectGrammar
?sourceFilePath:@lstring inProjectSourceFile {
  parseAndAnalyzeProject (!inProjectSourceFile !"" )
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#          compileProject                   
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc parseAndAnalyzeProject
  ?let @lstring inProjectSourceFile
  ?let @string inSourceToAnalyze
{
  if @application.verboseOutput then
    message "*** Parsing project files\n"
  end
  grammar galgas3ProjectGrammar in inProjectSourceFile ?let @galgas3ProjectComponentAST projectComponentAST
  if [option.mode value] == "" then
    compileProject (!inProjectSourceFile !inSourceToAnalyze !projectComponentAST)
  #--- C++ compilation
    if 0 == @uint.errorCount then
      let cppCompilationTarget = [option galgas_cli_options.cppCompile value]
      if cppCompilationTarget != "" then
        if @application.verboseOutput then
          message "*** Perform C++ compilation\n"
        end
        let buildFile = [inProjectSourceFile stringByDeletingLastPathComponent] + "/" + cppCompilationTarget + "/build.py"
        if [buildFile fileExists] then
          let resultCode = ["python " + buildFile system]
          if resultCode != 0S then
          error ["" nowhere] : "Running '" + buildFile + "' returns " + resultCode
          end
        else
          error ["" nowhere] : "Cannot perform C++ compilation of '" + cppCompilationTarget
              + "' : the '" + buildFile + "' file does not exist"
        end
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc compileProject
  ?let @lstring inProjectSourceFile
  ?let @string inSourceToAnalyze
  ?let @galgas3ProjectComponentAST inProjectComponentAST
{
  var @galgas3DeclarationAST declarationAST = .default
  for (mValue) in inProjectComponentAST.mProjectSourceList do
    if [mValue pathExtension] == "galgas" then
      let absoluteSourcePath = [mValue absolutePathFromPath ![inProjectSourceFile stringByDeletingLastPathComponent]]
      grammar galgas3Grammar in @lstring.new {!absoluteSourcePath !mValue.location} !?declarationAST
    else
      error mValue: "only \".galgas\" extension is allowed here"
    end
  end
#---------------------------------- Hand coded source files
  var @stringlist handCodedLinkToolFileList = {}
  var @stringlist handCodedLinkAppFileList = {}
  var @stringlist handCodedSourceAppFileList = {}
  var @stringlist handCodedSourceToolFileList = {}
  var @stringlist frameworkToolFileList = {}
  var @stringset handCodedSourceDirectorySet = {}
  for (mFeatureName mFeatureValue) in inProjectComponentAST.mQualifiedFeatureList do
    if "tool-source" == mFeatureName then
      handCodedSourceToolFileList += !mFeatureValue.string
      let directory = [mFeatureValue stringByDeletingLastPathComponent]
      if directory == "" then
        handCodedSourceDirectorySet += !"../"
      elsif [directory characterAtIndex !0] != '/' then
        handCodedSourceDirectorySet += !"../" + directory
      else
        handCodedSourceDirectorySet += !directory
      end
    elsif mFeatureName.string == "tool-framework" then
      frameworkToolFileList += ![mFeatureValue lastPathComponent]
    elsif mFeatureName.string == "app-source" then
      handCodedSourceAppFileList += !mFeatureValue.string
      let directory = [mFeatureValue stringByDeletingLastPathComponent]
      if directory == "" then
        handCodedSourceDirectorySet += !"../"
      elsif [directory characterAtIndex !0] != '/' then
        handCodedSourceDirectorySet += !"../" + directory
      else
        handCodedSourceDirectorySet += !directory
      end
    elsif mFeatureName.string == "tool-link" then
      handCodedLinkToolFileList += !mFeatureValue.string
    elsif mFeatureName.string == "app-link" then
      handCodedLinkAppFileList += !mFeatureValue.string
    elsif mFeatureName.string == "libpmAtPath" then
    elsif mFeatureName.string == "applicationBundleBase" then
    elsif mFeatureName.string == "macCodeSign" then
    elsif mFeatureName.string == "MacOSDeployment" then
    else
      error mFeatureName : "unknown feature"
    end
  end
#---------------------------------- Display result
#  if [@uint errorCount] == 0 then
#    message "  Semantic declarations: " . [declarationAST->mDeclarationList length] . "\n" ;
#    message "  Lexique components: " . [declarationAST->mLexiqueComponentList length] . "\n" ;
#    message "  Syntax components: " . [declarationAST->mSyntaxComponentList length] . "\n" ;
#    message "  Grammar components: " . [declarationAST->mGrammarComponentList length] . "\n" ;
#    message "  GUI components: " . [declarationAST->mGUIComponentList length] . "\n" ;
#    message "  Option components: " . [declarationAST->mOptionComponentList length] . "\n" ;
#    message "  Source rules: " . [declarationAST->mSourceRuleList length] . "\n" ;
#    message "  Prologue procs: " . [declarationAST->mPrologueDeclarationList length] . "\n" ;
#    message "  Epilogue procs: " . [declarationAST->mEpilogueDeclarationList length] . "\n" ;
#  end if ;
#---------------------------------- Group syntax components and their extensions
  groupSyntaxComponentsGalgas3 (
    !declarationAST.mSyntaxComponentList
    !declarationAST.mSyntaxExtensions
    !?declarationAST.mDeclarationList
  )
#---------------------------------- Compile semantic declarations
  var @usefulEntitiesGraph usefulEntitiesGraph = .emptyGraph
  var @lstringlist usefulnessRootEntities = {}
  let buildDirectory = [inProjectSourceFile stringByDeletingLastPathComponent] + "/build"
  let productDirectory = buildDirectory + "/output"
  var @stringlist appProductFileList = {}
  var @semanticContext semanticContext = .default
  var @semanticDeclarationListForGeneration semanticDeclarationSortedListForGeneration
  if @uint.errorCount == 0 then
    compileSemanticDeclarationsGalgas3 (
      !?usefulnessRootEntities
      !?usefulEntitiesGraph
      !productDirectory
      !inProjectComponentAST.mEndOfSourceFile
      !declarationAST.mDeclarationList
      ?semanticContext
      ?semanticDeclarationSortedListForGeneration
    )
  else
    semanticDeclarationSortedListForGeneration = {}
  end
#---------------------------------- Compile GUI components
  var @optionComponentMapForGeneration optionComponentMapForGeneration
  if @uint.errorCount == 0 then
    compileAllGuiComponentFromASTGalgas3 (
      !declarationAST.mGUIComponentList
      !semanticContext
      ?optionComponentMapForGeneration
    )
  else
    optionComponentMapForGeneration = {}
  end
#---------------------------------- Compile program declarations
  if @uint.errorCount == 0 then
    let projectVersionString = [inProjectComponentAST.mMajorVersion.uint string]
      + "." + inProjectComponentAST.mMinorVersion.uint
      + "." + inProjectComponentAST.mRevisionVersion.uint
    compileProgramComponentGalgas3 (
      !?usefulnessRootEntities
      !?usefulEntitiesGraph
      !declarationAST.mPrologueDeclarationList
      !declarationAST.mSourceRuleList
      !declarationAST.mEpilogueDeclarationList
      !semanticContext
      !projectVersionString
      ?let @programComponentForGeneration programComponentForGeneration
    )
    semanticDeclarationSortedListForGeneration +=
      !"zprogram"
      !programComponentForGeneration
#      !"z"
  end
#------------ Check entity usefulness
  checkUsefulEntities (!usefulEntitiesGraph !usefulnessRootEntities !productDirectory)
#------------------------------------ Build an HTML file that contains all declared types
  let typeDumpFilePath = [inProjectSourceFile stringByDeletingLastPathComponent]
         + "/build/helpers/" +  [inProjectSourceFile lastPathComponent] + ".html"
  if [option galgas_cli_options.outputHTMLTypeListFile value] then
    var @stringset firstLetterSet = {}
    for (lkey mIsPredefined mIsConcrete mSuperType mTypeKindEnum mSupportCollectionValue mAllTypedPropertyList mPropertyMap mCurrentTypedPropertyList mConstructorMap mGetterMap mSetterMap mInstanceMethodMap mClassMethodMap mOptionalMethodMap mEnumerationDescriptor mHandledOperatorFlags mAddAssignOperatorArguments mEnumConstantMap mEnumConstantList mMapSearchMethodList mMapEntrySearchConstructorList mGenerateHeaderInSeparateFile mTypeForEnumeratedElement mDefaultConstructorName mHeaderFileName mHeaderKind) in semanticContext.mTypeMap do
      firstLetterSet += ![[lkey.string characterAtIndex!0] string]
    end
    var @string tableOfTypeString = ""
    var @char currentFirstLetter = ' '
    for (type_lkey type_mIsPredefined type_mIsConcrete type_mSuperType type_mTypeKindEnum type_mSupportCollectionValue type_mAllTypedPropertyList type_mPropertyMap type_mCurrentTypedPropertyList type_mConstructorMap type_mGetterMap type_mSetterMap type_mInstanceMethodMap type_mClassMethodMap type_mOptionalMethodMap type_mEnumerationDescriptor type_mHandledOperatorFlags type_mAddAssignOperatorArguments type_mEnumConstantMap type_mEnumConstantList type_mMapSearchMethodList type_mMapEntrySearchConstructorList type_mGenerateHeaderInSeparateFile type_mTypeForEnumeratedElement type_mDefaultConstructorName type_mHeaderFileName type_mHeaderKind) in semanticContext.mTypeMap do
      if currentFirstLetter != [type_lkey.string characterAtIndex !0] then
        currentFirstLetter = [type_lkey.string characterAtIndex !0]
        tableOfTypeString += "<br><a name=\"" + [currentFirstLetter uint] + "\"><b>" + currentFirstLetter + "</b></a><br>"
      end
      tableOfTypeString += linkForType (!type_lkey.string) + "<br>"
    end
    let typeDumpString = [filewrapper typeDumpGenerationTemplate.typeDump
      ![inProjectSourceFile lastPathComponent]
      !semanticContext.mTypeMap
      !firstLetterSet
      !tableOfTypeString
    ]
    [typeDumpString writeToFileWhenDifferentContents !typeDumpFilePath ?*]
  else
    [@string deleteFileIfExists !typeDumpFilePath]
  end
#---------------------------------- Perform global checkings
  if (0 == @uint.errorCount) & (inSourceToAnalyze == "") then
    performGalgas3ProjectGlobalCheckings (
      !semanticContext
      !declarationAST.mDeclarationList
    )
  end
#---------------------------------- File generation
  if (0 == @uint.errorCount) & (inSourceToAnalyze == "") then
    projectGeneration (
      !semanticContext.mTypeMap
      !buildDirectory
      !optionComponentMapForGeneration
      !appProductFileList
      !semanticDeclarationSortedListForGeneration
      !declarationAST.mSourceRuleList
      !inProjectComponentAST
      !inProjectSourceFile.string
      !handCodedSourceDirectorySet
      !handCodedSourceToolFileList
      !frameworkToolFileList
      !handCodedSourceAppFileList
      !handCodedLinkAppFileList
      !handCodedLinkToolFileList
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#          projectGeneration                
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc projectGeneration
  ?let @unifiedTypeMap inTypeMap
  ?let @string inBuildDirectory
  ?let @optionComponentMapForGeneration inOptionComponentMapForGeneration
  ?let @stringlist inAppProductFileList
  ?let @semanticDeclarationListForGeneration inSemanticDeclarationSortedListForGeneration
  ?let @programRuleList inSourceRuleList
  ?let @galgas3ProjectComponentAST inProjectComponentAST
  ?let @string inProjectSourceFile
  ?let @stringset inHandCodedSourceDirectorySet
  ?let @stringlist inHandCodedSourceToolFileList
  ?let @stringlist inFrameworkToolFileList
  ?let @stringlist inHandCodedSourceAppFileList
  ?let @stringlist inHandCodedLinkAppFileList
  ?let @stringlist inHandCodedLinkToolFileList
{
  var appProductFileList = inAppProductFileList
#---------------------------------- File generation
  if @application.verboseOutput then
    message "*** Generating files\n"
  end
  var @stringset allProductFileSet = {}
#---------------------------------- Create build/user-headers if does not exist
  let userHeadersDir = inBuildDirectory + "/user-headers"
  [userHeadersDir makeDirectory] ;
#---------------------------------- %quietOutputByDefault
  let quietOutputByDefault = [@stringset.setWithLStringList {!inProjectComponentAST.mGenerationFeatureList} hasKey !"quietOutputByDefault"]
#---------------------------------- Generate GUI components
  let productDirectory = inBuildDirectory + "/output"
#  let cacheDirectory = inBuildDirectory + "/md5-cache"
#  [cacheDirectory makeDirectory]
#  message "*** Generate GUI\n" ;
  if @uint.errorCount == 0 then
    generateAllGuiComponentsGalgas3 (
      !inOptionComponentMapForGeneration
      !productDirectory
      !quietOutputByDefault
      !?appProductFileList
      !?allProductFileSet
    )
  end
#---------------------------------- Generate semantic files
#  message "*** Generate semantic\n" ;
  var @stringlist toolCppFileList = {}
  var @stringlist toolHeaderFileList = {}
  generatePredefinedTypeFiles (
    !productDirectory
    !inSemanticDeclarationSortedListForGeneration
    !?toolHeaderFileList
    !?toolCppFileList
    !?allProductFileSet
  )
  generateSemanticDeclarationsGalgas3 (
    !inTypeMap
    !productDirectory
    !inSemanticDeclarationSortedListForGeneration
    !?appProductFileList
    !?toolCppFileList
    !?toolHeaderFileList
    !?allProductFileSet
  )
#---------------------------------- Update targets
#  message "*** update targets\n" ;
  if 0 == @uint.errorCount then
    var @stringset handledExtensionSet = {}
    for (mSourceFileExtension mSourceFileHelp mSourceFileVariableName mSourceFileVariableNameIsUnused mReferenceGrammar mInstructionList mEndOfInstructionList) in inSourceRuleList do
      handledExtensionSet += !mSourceFileExtension.string
    end
  #--- Build qualified feature map
    var @stringset ignoredFeatureSet = {}
    ignoredFeatureSet += !"tool-framework"
    ignoredFeatureSet += !"tool-source"
    ignoredFeatureSet += !"tool-link"
    ignoredFeatureSet += !"app-source"
    var @projectQualifiedFeatureMap projectQualifiedFeatureMap = {}
    for (mFeatureName mFeatureValue) in inProjectComponentAST.mQualifiedFeatureList do
      if not [ignoredFeatureSet hasKey !mFeatureName.string] then
        [!?projectQualifiedFeatureMap insertKey
          !mFeatureName
          !mFeatureValue
        ]
      end
    end
    updateGalgas3Targets (
      !inProjectSourceFile
      !inProjectComponentAST.mTargetName.string
      !inProjectComponentAST.mEndOfSourceFile
      ![inProjectComponentAST.mMajorVersion.uint string] + "." + inProjectComponentAST.mMinorVersion.uint + "." + inProjectComponentAST.mRevisionVersion.uint
      !projectQualifiedFeatureMap
      !inProjectComponentAST.mGenerationFeatureList
      !quietOutputByDefault
      !toolCppFileList
      !toolHeaderFileList
      !appProductFileList
      !inHandCodedSourceToolFileList
      !inFrameworkToolFileList
      !inHandCodedSourceDirectorySet
      !handledExtensionSet
      !?allProductFileSet
      !inHandCodedSourceAppFileList
      !inHandCodedLinkAppFileList
      !inHandCodedLinkToolFileList
    )
  end
#---------------------------------- Remove useless files
  if 0 == @uint.errorCount then
    var @stringset allActualFileSet = {}
    for (mValue) in [productDirectory regularFiles !false] do
      allActualFileSet += !mValue
    end
    let uselessFileSet = allActualFileSet - allProductFileSet
    for (key) in uselessFileSet do
      [@string deleteFile !productDirectory + "/" + key]
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
