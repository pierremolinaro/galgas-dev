//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <expression_or_ggs3> ?!@galgasDeclarationAST ioDeclarations
                            !@semanticExpressionAST outExpression

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <if_instruction_core> ?!@galgasDeclarationAST ioDeclarations
                             !@semanticInstructionAST outInstruction {
    let instructionLocation = @location.here
    <comma_separated_expression_ggs3> !?ioDeclarations ?let testExpression
    $then$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let then_instructionList
    let endOf_then_branchLocation = @location.here
    let @semanticInstructionListAST else_instructionList
    select
      else_instructionList = @semanticInstructionListAST ()
    or
      $else$
      <semantic_instruction_list_ggs3> !?ioDeclarations ?else_instructionList
    or
      $elsif$
      <if_instruction_core> !?ioDeclarations ?let instruction
      else_instructionList = @[@(instruction)]
    end
    outInstruction = @ifInstructionAST {
      !instructionLocation
      !testExpression
      !then_instructionList
      !endOf_then_branchLocation
      !else_instructionList
      !@location.here
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $if$
    <if_instruction_core> !?ioDeclarations ?outInstruction
    $end$
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <expression_or> ?!@galgasDeclarationAST ioDeclarations
                       !@semanticExpressionAST outExpression

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <if_instruction_core> ?!@galgasDeclarationAST ioDeclarations
                             !@semanticInstructionAST outInstruction {
    let instructionLocation = @location.here
    <comma_separated_expression> !?ioDeclarations ?let testExpression
    $then$
    <semantic_instruction_list> !?ioDeclarations ?let then_instructionList
    let endOf_then_branchLocation = @location.here
    let @semanticInstructionListAST else_instructionList
    select
      else_instructionList = @()
    or
      $else$
      <semantic_instruction_list> !?ioDeclarations ?else_instructionList
    or
      $elsif$
      <if_instruction_core> !?ioDeclarations ?let instruction
      else_instructionList = @[@(instruction)]
    end
    outInstruction = @ifInstructionAST {
      !instructionLocation
      !testExpression
      !then_instructionList
      !endOf_then_branchLocation
      !else_instructionList
      !.here
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $if$
    <if_instruction_core> !?ioDeclarations ?outInstruction
    $end$
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! AST
//--------------------------------------------------------------------------------------------------

class @ifInstructionAST : @semanticInstructionAST {
  public let @CommaSeparatedExpressionList mExpressions
  public let @semanticInstructionListAST m_then_instructionList
  public let @location mEndOf_then_branch
  public let @semanticInstructionListAST m_else_instructionList
  public let @location mEndOf_if_instruction

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    [self.mExpressions enterExpressionListInSemanticContext !?ioTypeMap]
    [self.m_then_instructionList enterInstructionListInSemanticContext !?ioTypeMap]
    [self.m_else_instructionList enterInstructionListInSemanticContext !?ioTypeMap]
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  //! SEMANTICS
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
  // l'expression a peut être de la forme let varA = exp as @T ; idem pour b
  //
  // L'instruction : IF a, b THEN X ELSE Y END est analysée par :
  //
  //  analyser (a), création varA
  //  openOverrideForSelect
  //    openBranch
  //      insertion varA dans table des symboles
  //      analyser (b), création varB
  //      openOverrideForSelect
  //        openBranch
  //          insertion varB dans table des symboles
  //          X
  //        closeBranch
  //      closeOverride
  //    closeBranch
  //    openBranch
  //      Y
  //    closeBranch
  //  closeOverride
  //
  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method analyzeSemanticInstruction ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                            ?!@unifiedTypeMap ioTypeMap
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
  //--- Test expression
   [self.mExpressions analyzeSemanticExpressionList
     !inUsefulnessCallerEntityName
     !?ioUsefulEntitiesGraph
     !inAnalysisContext
     !?ioTypeMap
     !?ioVariableMap
     ?let @ifTestListForGeneration testListForGeneration
   ]
  //--- Then branch
    analyzeSemanticInstructionListWithoutBranch (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !localConstantList: @()
      !localInitializedVariableListWarnsIfNotMutated: @()
      !localInitializedVariableListNoWarnsIfNotMutated: @()
      !self.m_then_instructionList
      !?ioVariableMap
      ?let then_instructionList
    )
    var expressions = self.mExpressions
    [!?expressions popLast ?*]
    for (*) in expressions do
      [!?ioVariableMap closeBranch !self.mEndOf_then_branch]
      [!?ioVariableMap closeOverride !self.mEndOf_then_branch]
    end
    [!?ioVariableMap closeBranch !self.mEndOf_then_branch]
  //--- else branch
    analyzeSemanticInstructionList (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !localConstantList: @()
      !localInitializedVariableListWarnsIfNotMutated: @()
      !localInitializedVariableListNoWarnsIfNotMutated: @()
      !self.m_else_instructionList
      !self.mEndOf_if_instruction
      !?ioVariableMap
      ?let else_instructionList
    )
    [!?ioVariableMap closeOverride !self.mEndOf_if_instruction]
  //--- Generate instruction
    ioInstructionListForGeneration += !@ifInstructionForGeneration {
      !self.mEndOf_then_branch
      !testListForGeneration
      !then_instructionList
      !else_instructionList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! GENERATION
//--------------------------------------------------------------------------------------------------
// L'instruction : IF a, b THEN X ELSE Y END est traduite en :
//
//  GalgasBool testResult = GalgasBool::boolTrue ;
//  if (testResult == GalgasBool::boolTrue) {
//    testResult = evaluation (a)
//    if (testResult == GalgasBool::boolTrue) {
//      testResult = evaluation (b)
//      if (testResult == GalgasBool::boolTrue) {
//        X
//      }
//    }
//  }
//  if (testResult == GalgasBool::boolFalse) {
//    Y
//  }
//
//································································································

class @ifInstructionForGeneration : @semanticInstructionForGeneration {
  private let @location mInstructionLocation
  private let @ifTestListForGeneration mExpressions
  private let @semanticInstructionListForGeneration m_then_instructionList
  private let @semanticInstructionListForGeneration m_else_instructionList

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  override method generateInstruction ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      ?let @bool inGenerateSyntaxDirectedTranslationString
                                      ?!@string ioGeneratedCode {
  //--- Generate test expression
    [self.mExpressions generateInstruction
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
      ?let @string testVar
    ]
  //--- Then branch
    ioGeneratedCode += "if (GalgasBool::boolTrue == " + testVar + ") {\n"
    generateInstructionList (
      !?ioInclusionSet
      !self.m_then_instructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !inGenerateSyntaxDirectedTranslationString
      !?ioGeneratedCode
    )
    ioGeneratedCode += "}\n"
    for (*) in self.mExpressions do
      [!?ioGeneratedCode decIndentation !2]
      ioGeneratedCode += "}\n"
    end
  //--- else branch
    if [self.m_else_instructionList count] > 0 then
      ioGeneratedCode += "if (GalgasBool::boolFalse == " + testVar + ") {\n"
      generateInstructionList (
        !?ioInclusionSet
        !self.m_else_instructionList
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        !inGenerateSyntaxDirectedTranslationString
        !?ioGeneratedCode
      )
      ioGeneratedCode += "}\n"
    end
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
