#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@ls2n.fr                                                                                           *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3GrammarComponentSyntax (galgas3Scanner) {

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#   G R A M M A R    C O M P O N E N T                                                                                 *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <declaration>
 ?!@galgas3DeclarationAST ioDeclarations {
  @lbool hasIndexing
  select
    hasIndexing = @lbool.new {!false !@location.here}
  or
    hasIndexing = @lbool.new {!true !@location.here}
    $indexing$
  end
  $grammar$
  $identifier$ ?var  @lstring mGrammarName indexing grammarComponentDefinition
  $"string"$ ?var  @lstring mGrammarClass
#--- Feature translate
  @bool hasTranslateFeature
  select
    hasTranslateFeature = false
  or
    $%attribute$ ?let @lstring featureName
    if featureName.string != "translate" then
      error featureName: "only 'feature translate' can be declared here"
    end
    hasTranslateFeature = true
  end
  ${$
#--- Imports
  @lstringlist syntaxComponents = {}
  repeat
    $syntax$
    $identifier$ ?var  @lstring syntaxComponent
    syntaxComponents += !syntaxComponent
  while
  end
#--- Root symbol
  $<non_terminal>$ ?var @lstring  mStartSymbol indexing ruleReference
  var mLabelList =@nonTerminalLabelListAST {}
  <grammar_start_symbol_label> !@lstring.new {!"" !@location.here} !?mLabelList
  repeat
  while
    $label$
    $identifier$ ?var @lstring labelName
    <grammar_start_symbol_label> !labelName !?mLabelList
   end
#--- Unused non terminal symbols
  var mUnusedNonterminalList =@lstringlist {}
  repeat
  while
    $unused$
    $<non_terminal>$ ?var  @lstring nonterminalSymbolName
    mUnusedNonterminalList += ! nonterminalSymbolName
  end
#---
  $}$
  ioDeclarations.mDeclarationList += !@galgas3GrammarComponentAST.new {
    !false # Is not predefined
    !hasIndexing
    !mGrammarName
    !mGrammarClass
    !syntaxComponents
    !mStartSymbol
    !mLabelList
    !mUnusedNonterminalList
    !hasTranslateFeature}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <grammar_start_symbol_label>
  ?let @lstring inLabelName
  ?!@nonTerminalLabelListAST ioLabelList {
  @stringset argumentNameSet = {}
  @formalParameterListAST mFormalParameterList = {}
  repeat
  while
    <label_formal_parameter> ?let argumentName !?mFormalParameterList
    if [argumentNameSet hasKey ![argumentName string]] then
      error argumentName: "there is already an argument named '" + argumentName + "'"
    end
    argumentNameSet += ![argumentName string]
  end
  ioLabelList += !inLabelName !mFormalParameterList !.here
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
  $?$ ?let selector
  $@type$ ?var @lstring mTypeName
  select
  or
   $unused$
  end
  $identifier$ ?outArgumentName
  ioStartSymbolLabelFormalParameterList +=
    !selector
    !@formalArgumentPassingModeAST. argumentIn
    !mTypeName
    !outArgumentName
    !false
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
  $?$ ?let selector
  $let$
  $@type$ ?var @lstring mTypeName
  select
  or
   $unused$
  end
  $identifier$ ?outArgumentName
  ioStartSymbolLabelFormalParameterList +=
    !selector
    !@formalArgumentPassingModeAST. argumentConstantIn
    !mTypeName
    !outArgumentName
    !false
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
  $?!$ ?let selector
  $@type$ ?var @lstring mTypeName
  select
  or
   $unused$
  end
  $identifier$ ?outArgumentName
  ioStartSymbolLabelFormalParameterList +=
    !selector
    !@formalArgumentPassingModeAST. argumentInOut
    !mTypeName
    !outArgumentName
    !false
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList {
  $!$ ?let selector
  $@type$ ?var @lstring mTypeName
  $identifier$ ?outArgumentName
  ioStartSymbolLabelFormalParameterList +=
    !selector
    !@formalArgumentPassingModeAST. argumentOut
    !mTypeName
    !outArgumentName
    !false
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

}