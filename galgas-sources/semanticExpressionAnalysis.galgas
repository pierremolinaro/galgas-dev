#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#  Semantic Analysis of expression                                                                                     *
#                                                                                                                      *
#  Copyright (C) 2010, ..., 2016 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@ls2n.fr                                                                                           *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    V A R I A B L E    M A P                                                                                          *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared map @variableMap {
  @unifiedTypeMap-proxy mTypeProxy
  @string mCppName
  @string mNameForCheckingFormalParameterUsing

#  warning %shadow "declaration of '%K' variable shadows a variable declared in %L"

#--- Used local constant (no warning if not read)
  state readLocalConstant {
    neutralAccess   -> readLocalConstant
    readAccess      -> readLocalConstant
    writeAccess     -> readLocalConstant error "a constant cannot be written"
    readWriteAccess -> readLocalConstant error "a constant cannot be written"
    dropAccess      -> droppedLocalConstant
  }

#--- Local constant
  state localConstant warning "the '%K' constant value is unused" {
    neutralAccess   -> localConstant
    readAccess      -> readLocalConstant
    writeAccess     -> readLocalConstant error "a constant cannot be written"
    readWriteAccess -> readLocalConstant error "a constant cannot be written"
    dropAccess      -> droppedLocalConstant warning "the '%K' constant value is unused"
  }

#--- Undefined Local constant
  state undefinedLocalConstant warning "the '%K' constant value is unused" {
    neutralAccess   -> undefinedLocalConstant
    readAccess      -> undefinedLocalConstant error "the constant is undefined"
    writeAccess     -> localConstant
    readWriteAccess -> undefinedLocalConstant error "the constant is undefined"
    dropAccess      -> droppedLocalConstant warning "the dropped constant is undefined"
  }

#--- Dropped Local constant
  state droppedLocalConstant {
    neutralAccess   -> droppedLocalConstant
    readAccess      -> undefinedLocalConstant error "the constant has been dropped"
    writeAccess     -> localConstant          error "the constant has been dropped"
    readWriteAccess -> undefinedLocalConstant error "the constant has been dropped"
    dropAccess      -> undefinedLocalConstant warning "the constant has been dropped"
  }

#--- Local variable
  state undefinedLocalVariable warning "the '%K' local variable is unused" {
    neutralAccess   -> undefinedLocalVariable
    readAccess      -> undefinedLocalVariable error "an undefined local variable cannot be read"
    writeAccess     -> definedLocalVariable
    readWriteAccess -> undefinedLocalVariable error "an undefined local variable cannot be read"
    dropAccess      -> undefinedLocalVariable warning "the local variable has no value"
  }
  state definedLocalVariable { # warning "the '%K' local variable value is unused" {
    neutralAccess   -> definedLocalVariable
    readAccess      -> usedLocalVariable
    writeAccess     -> definedLocalVariable # warning "the value has been changed without any read"
    readWriteAccess -> usedLocalVariable
    dropAccess      -> droppedLocalVariable warning "the local variable has been dropped without any read"
  }
  state usedLocalVariable {
    neutralAccess   -> usedLocalVariable
    readAccess      -> usedLocalVariable
    writeAccess     -> definedLocalVariable
    readWriteAccess -> definedLocalVariable
    dropAccess      -> droppedLocalVariable
  }
  state droppedLocalVariable {
    neutralAccess   -> droppedLocalVariable
    readAccess      -> droppedLocalVariable error "a dropped local variable cannot be read"
    writeAccess     -> definedLocalVariable
    readWriteAccess -> definedLocalVariable error "a dropped local variable cannot be read"
    dropAccess      -> droppedLocalVariable warning "the local variable is already dropped"
  }

#--- Output formal parameter
  state undefinedOutputFormalArgument error "the '%K' output formal parameter is undefined" {
    neutralAccess   -> undefinedOutputFormalArgument
    readAccess      -> undefinedOutputFormalArgument error "an undefined output formal parameter cannot be read"
    writeAccess     -> definedOutputFormalArgument
    readWriteAccess -> undefinedOutputFormalArgument error "an undefined output formal parameter cannot be read"
    dropAccess      -> undefinedOutputFormalArgument warning "the output formal parameter has no value"
  }
  state definedOutputFormalArgument {
    neutralAccess   -> definedOutputFormalArgument
    readAccess      -> definedOutputFormalArgument
    writeAccess     -> definedOutputFormalArgument
    readWriteAccess -> definedOutputFormalArgument
    dropAccess      -> undefinedOutputFormalArgument
  }

#--- Input/Output formal parameter
  state unusedInputOutputFormalArgument warning "the '%K' input/output formal parameter is unused" {
    neutralAccess   -> unusedInputOutputFormalArgument
    readAccess      -> usedInputOutputFormalArgument
    writeAccess     -> usedInputOutputFormalArgument
    readWriteAccess -> usedInputOutputFormalArgument
    dropAccess      -> droppedInputOutputFormalArgument
  }
  state usedInputOutputFormalArgument {
    neutralAccess   -> usedInputOutputFormalArgument
    readAccess      -> usedInputOutputFormalArgument
    writeAccess     -> usedInputOutputFormalArgument
    readWriteAccess -> usedInputOutputFormalArgument
    dropAccess      -> droppedInputOutputFormalArgument
  }
  state droppedInputOutputFormalArgument error "the '%K' input/ouput formal argument should be valuated at the end of the routine" {
    neutralAccess   -> droppedInputOutputFormalArgument
    readAccess      -> droppedInputOutputFormalArgument error "a dropped input/output formal argument cannot be read"
    writeAccess     -> usedInputOutputFormalArgument
    readWriteAccess -> droppedInputOutputFormalArgument error "a dropped input/output formal argument cannot be read"
    dropAccess      -> droppedInputOutputFormalArgument warning "the input/output formal argument is already dropped"
  }

#--- Input/Output formal parameter declared as unused
  state inputOutputFormalArgumentDeclaredAsUnused {
    neutralAccess   -> inputOutputFormalArgumentDeclaredAsUnused
    readAccess      -> usedInputOutputFormalArgument warning "the input/output formal parameter has been declared as unused"
    writeAccess     -> usedInputOutputFormalArgument warning "the input/output formal parameter has been declared as unused"
    readWriteAccess -> usedInputOutputFormalArgument warning "the input/output formal parameter has been declared as unused"
    dropAccess      -> droppedInputOutputFormalArgument warning "the input/output formal parameter has been declared as unused"
  }

#--- Constant input formal parameter
  state constantInputFormalArgument warning "the constant '%K' input formal parameter is not used and is not declared as unused" {
    neutralAccess   -> constantInputFormalArgument
    readAccess      -> usedConstantInputFormalArgument
    writeAccess     -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be written"
    readWriteAccess -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be written"
    dropAccess      -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be dropped"
  }
  state usedConstantInputFormalArgument {
    neutralAccess   -> usedConstantInputFormalArgument
    readAccess      -> usedConstantInputFormalArgument
    writeAccess     -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be written"
    readWriteAccess -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be written"
    dropAccess      -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be dropped"
  }

#--- Constant input formal parameter declared as unused
  state constantInputFormalArgumentDeclaredAsUnused {
    neutralAccess   -> constantInputFormalArgumentDeclaredAsUnused
    readAccess      -> usedConstantInputFormalArgument warning "the constant input formal parameter is declared as unused"
    writeAccess     -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be written"
    readWriteAccess -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be written"
    dropAccess      -> usedConstantInputFormalArgument error "a constant input formal parameter cannot be dropped"
  }

#--- Input formal parameter
  state inputFormalParameter warning "the '%K' input formal parameter is not used and is not declared as unused" {
    neutralAccess   -> inputFormalParameter
    readAccess      -> usedInputFormalArgument
    writeAccess     -> usedInputFormalArgument
    readWriteAccess -> usedInputFormalArgument
    dropAccess      -> droppedInputFormalArgument
  }
  state usedInputFormalArgument {
    neutralAccess   -> usedInputFormalArgument
    readAccess      -> usedInputFormalArgument
    writeAccess     -> usedInputFormalArgument
    readWriteAccess -> usedInputFormalArgument
    dropAccess      -> droppedInputFormalArgument
  }
  state droppedInputFormalArgument {
    neutralAccess   -> droppedInputFormalArgument
    readAccess      -> droppedInputFormalArgument error "a dropped input formal parameter cannot be read"
    writeAccess     -> usedInputFormalArgument
    readWriteAccess -> droppedInputFormalArgument error "a dropped input formal parameter cannot be read"
    dropAccess      -> droppedInputFormalArgument warning "the input formal parameter is already dropped"
  }

#--- Input formal parameter declared as unused
  state inputFormalArgumentDeclaredAsUnused {
    neutralAccess   -> inputFormalArgumentDeclaredAsUnused
    readAccess      -> usedInputFormalArgument warning "the input formal parameter is declared as unused"
    writeAccess     -> usedInputFormalArgument warning "the input formal parameter is declared as unused"
    readWriteAccess -> usedInputFormalArgument warning "the input formal parameter is declared as unused"
    dropAccess      -> droppedInputFormalArgument warning "the input formal parameter is declared as unused"
  }

#--- Current instance attribute in a method or a getter
  state currentInstanceAttribute {
    neutralAccess   -> currentInstanceAttribute
    readAccess      -> currentInstanceAttribute
    writeAccess     -> currentInstanceAttribute error "an attribute cannot be written within a method or a getter"
    readWriteAccess -> currentInstanceAttribute error "an attribute cannot be modified within a method or a getter"
    dropAccess      -> currentInstanceAttribute error "an attribute cannot be dropped within a method or a getter"
  }

#--- Current instance attribute in a setter
  state currentInstanceAttributeInModifier {
    neutralAccess   -> currentInstanceAttributeInModifier
    readAccess      -> currentInstanceAttributeInModifier
    writeAccess     -> currentInstanceAttributeInModifier
    readWriteAccess -> currentInstanceAttributeInModifier
    dropAccess      -> currentInstanceDroppedAttributeInModifier
  }

  state currentInstanceDroppedAttributeInModifier warning "the '%K' attribute is in the dropped state at the end of the setter" {
    neutralAccess   -> currentInstanceDroppedAttributeInModifier
    readAccess      -> currentInstanceDroppedAttributeInModifier error "the attribute cannot be read, it has been dropped"
    writeAccess     -> currentInstanceAttributeInModifier
    readWriteAccess -> currentInstanceDroppedAttributeInModifier error "the attribute cannot be read/written, it has been dropped"
    dropAccess      -> currentInstanceDroppedAttributeInModifier  warning "the attribute is already dropped"
  }

#--- Insert methods 
  insert insertMutableAttribute state currentInstanceAttributeInModifier error message "redefinition of '%K' attribute (previous declaration was in %L)"
  insert insertNonMutableAttribute state currentInstanceAttribute error message "redefinition of '%K' attribute (previous declaration was in %L)"
  insert insertUndefinedLocalVariable state undefinedLocalVariable error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertDefinedLocalVariable state definedLocalVariable error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertUndefinedLocalConstant state undefinedLocalConstant error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertLocalConstant state localConstant error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertUsedLocalConstant state readLocalConstant error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertInputFormalArgument state inputFormalParameter error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertInputFormalArgumentDeclaredAsUnused state inputFormalArgumentDeclaredAsUnused error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertConstantInputFormalArgument state constantInputFormalArgument error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertConstantInputFormalArgumentDeclaredAsUnused state constantInputFormalArgumentDeclaredAsUnused error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertOutputFormalArgument state undefinedOutputFormalArgument error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertInputOutputFormalArgument state unusedInputOutputFormalArgument error message "redefinition of '%K' variable (previous declaration was in %L)"
  insert insertInputOutputFormalArgumentDeclaredAsUnused state inputOutputFormalArgumentDeclaredAsUnused error message "redefinition of '%K' variable (previous declaration was in %L)"

#--- Search methods
  search searchForReadAccess do readAccess error message "the '%K' variable is not declared"
  search searchForWriteAccess do writeAccess error message "the '%K' variable is not declared"
  search searchForReadWriteAccess do readWriteAccess error message "the '%K' variable is not declared"
  search searchForDropAccess do dropAccess error message "the '%K' variable is not declared"
  search neutralAccess do neutralAccess error message "the '%K' variable is not declared"

#--- 'selectBlock' override definitions
  override selectBlock {
    currentInstanceAttributeInModifier:currentInstanceDroppedAttributeInModifier -> currentInstanceDroppedAttributeInModifier
    currentInstanceDroppedAttributeInModifier:currentInstanceAttributeInModifier -> currentInstanceAttributeInModifier
    constantInputFormalArgument:usedConstantInputFormalArgument -> usedConstantInputFormalArgument
    constantInputFormalArgumentDeclaredAsUnused:usedConstantInputFormalArgument -> usedConstantInputFormalArgument
    definedLocalVariable:droppedLocalVariable -> droppedLocalVariable
    definedLocalVariable:usedLocalVariable -> usedLocalVariable
    definedOutputFormalArgument:undefinedOutputFormalArgument -> undefinedOutputFormalArgument
    droppedInputFormalArgument:usedInputFormalArgument -> usedInputFormalArgument
    droppedInputOutputFormalArgument:usedInputOutputFormalArgument -> usedInputOutputFormalArgument
    droppedLocalVariable:definedLocalVariable -> definedLocalVariable
    inputFormalParameter:droppedInputFormalArgument -> droppedInputFormalArgument
    inputFormalParameter:usedInputFormalArgument -> usedInputFormalArgument
    inputFormalArgumentDeclaredAsUnused:droppedInputFormalArgument -> droppedInputFormalArgument
    inputFormalArgumentDeclaredAsUnused:usedInputFormalArgument -> usedInputFormalArgument
    inputOutputFormalArgumentDeclaredAsUnused:droppedInputOutputFormalArgument -> droppedInputOutputFormalArgument
    inputOutputFormalArgumentDeclaredAsUnused:usedInputOutputFormalArgument -> usedInputOutputFormalArgument
    localConstant:readLocalConstant -> readLocalConstant
    undefinedLocalVariable:definedLocalVariable -> definedLocalVariable
    undefinedOutputFormalArgument:definedOutputFormalArgument -> definedOutputFormalArgument
    unusedInputOutputFormalArgument:droppedInputOutputFormalArgument -> droppedInputOutputFormalArgument
    unusedInputOutputFormalArgument:usedInputOutputFormalArgument -> usedInputOutputFormalArgument
    usedInputFormalArgument:droppedInputFormalArgument -> droppedInputFormalArgument
    usedInputOutputFormalArgument:droppedInputOutputFormalArgument -> droppedInputOutputFormalArgument
    usedLocalVariable:definedLocalVariable -> definedLocalVariable
    usedLocalVariable:droppedLocalVariable -> droppedLocalVariable
    droppedLocalVariable:usedLocalVariable -> usedLocalVariable
    undefinedLocalVariable:droppedLocalVariable -> droppedLocalVariable
    undefinedLocalVariable:usedLocalVariable -> usedLocalVariable
    undefinedLocalConstant:localConstant -> undefinedLocalConstant error "this branch defines the '%K' variable, while previous ones let it undefined"
    undefinedLocalConstant:readLocalConstant -> undefinedLocalConstant error "this branch defines the '%K' variable, while previous ones let it undefined"
    droppedLocalConstant:localConstant -> droppedLocalConstant error "this branch drops the '%K' constant, while previous ones let it defined"
    localConstant:droppedLocalConstant
      -> droppedLocalConstant error "this branch let the '%K' constant defined, while previous ones drop it"
    droppedLocalConstant:readLocalConstant -> droppedLocalConstant error "this branch drops the '%K' constant, while previous ones let it defined"
    readLocalConstant:droppedLocalConstant -> droppedLocalConstant error "this branch lets the '%K' constant defined, while previous ones drop it"
    droppedLocalConstant:undefinedLocalConstant -> droppedLocalConstant warning "this branch drops the '%K' constant, while previous ones let it undefined"
    undefinedLocalConstant:droppedLocalConstant
      -> droppedLocalConstant warning "this branch lets the '%K' undefined, while previous ones drop it"
    localConstant:undefinedLocalConstant -> droppedLocalConstant warning "this branch defines the '%K' constant, while previous ones let it undefined"
    readLocalConstant:localConstant -> readLocalConstant
    readLocalConstant:undefinedLocalConstant -> undefinedLocalConstant error "this branch lets the '%K' constant defined, while previous ones do not define it"
  }{
    readLocalConstant:undefinedLocalConstant -> undefinedLocalConstant error "this branch lets the '%K' constant defined, while previous ones do not define it"
    readLocalConstant:droppedLocalConstant -> droppedLocalConstant error "this branch lets the '%K' constant defined, while previous ones drop it"
    undefinedLocalConstant:readLocalConstant -> undefinedLocalConstant error "this branch defines the '%K' variable, while previous ones let it undefined"
    undefinedLocalConstant:droppedLocalConstant
      -> droppedLocalConstant warning "this branch lets the '%K' undefined, while previous ones drop it"
    localConstant:droppedLocalConstant
      -> droppedLocalConstant error "this branch let the '%K' constant defined, while previous ones drop it"
    droppedLocalConstant:readLocalConstant
       -> droppedLocalConstant error "this branch drops the '%K' constant, while previous ones let it defined"
    droppedLocalConstant:localConstant
        -> droppedLocalConstant error "this branch drops the '%K' constant, while previous ones let it defined"
    droppedLocalConstant:undefinedLocalConstant
        -> droppedLocalConstant warning "this branch drops the '%K' constant, while previous ones let it undefined"
    currentInstanceAttributeInModifier:currentInstanceDroppedAttributeInModifier
        -> currentInstanceAttributeInModifier error "this branch drops the '%K' attribute, while previous ones let it defined"
    currentInstanceDroppedAttributeInModifier:currentInstanceAttributeInModifier
        -> currentInstanceAttributeInModifier error "this branch lets the '%K' attribute defined, while previous ones drop it"
    constantInputFormalArgument:usedConstantInputFormalArgument
        -> usedConstantInputFormalArgument
    constantInputFormalArgumentDeclaredAsUnused:usedConstantInputFormalArgument
        -> usedConstantInputFormalArgument
    definedLocalVariable:droppedLocalVariable
        -> definedLocalVariable error "this branch drops the '%K' variable, while previous ones let it defined"
    definedLocalVariable:undefinedLocalVariable
        -> definedLocalVariable error "this branch lets the '%K' variable undefined, while previous ones define it"
    definedLocalVariable:usedLocalVariable
        -> usedLocalVariable
    definedOutputFormalArgument:undefinedOutputFormalArgument
        -> definedOutputFormalArgument error "this branch lets the '%K' variable undefined, while previous ones define it"
    droppedInputFormalArgument:inputFormalParameter
       -> droppedInputFormalArgument error "this branch drops the '%K' input formal argument, while previous ones let it defined"
    droppedInputFormalArgument:inputFormalArgumentDeclaredAsUnused
       -> droppedInputFormalArgument
    droppedInputFormalArgument:usedInputFormalArgument
       -> usedInputFormalArgument error "this branch defines the '%K' input formal argument, while previous ones let it dropped"
    droppedInputOutputFormalArgument:inputOutputFormalArgumentDeclaredAsUnused
       -> inputOutputFormalArgumentDeclaredAsUnused error "this branch lets the '%K' input formal argument defined, while previous ones drop it"
    droppedInputOutputFormalArgument:unusedInputOutputFormalArgument
       -> unusedInputOutputFormalArgument error "this branch lets the '%K' input/output formal argument defined, while previous ones drop it"
    droppedInputOutputFormalArgument:usedInputOutputFormalArgument
       -> usedInputOutputFormalArgument error "this branch lets the '%K' input/output formal argument defined, while previous ones drop it"
    droppedLocalVariable:definedLocalVariable
       -> droppedLocalVariable error "this branch defines the '%K' variable, while previous ones drop it"
    droppedLocalVariable:usedLocalVariable
       -> droppedLocalVariable error "this branch defines the '%K' variable, while previous ones drop it"
    inputFormalParameter:droppedInputFormalArgument
       ->inputFormalParameter error "this branch drops the '%K' input formal argument, while previous let it defined"
    inputFormalParameter:usedInputFormalArgument
       -> usedInputFormalArgument
    inputFormalArgumentDeclaredAsUnused:usedInputFormalArgument
       -> usedInputFormalArgument
    inputOutputFormalArgumentDeclaredAsUnused:droppedInputOutputFormalArgument
       -> inputOutputFormalArgumentDeclaredAsUnused error "this branch drops the '%K' input formal argument defined, while previous ones let it defined"
    inputOutputFormalArgumentDeclaredAsUnused:usedInputOutputFormalArgument
       -> inputOutputFormalArgumentDeclaredAsUnused
    localConstant:readLocalConstant
       -> readLocalConstant
    undefinedLocalVariable:definedLocalVariable
       -> definedLocalVariable error "this branch defines the '%K' variable, while previous ones let it undefined"
    undefinedOutputFormalArgument:definedOutputFormalArgument
       -> definedOutputFormalArgument error "this branch defines the '%K' output formal argument, while previous ones let it undefined"
    unusedInputOutputFormalArgument:droppedInputOutputFormalArgument
       -> unusedInputOutputFormalArgument error "this branch drops the '%K' input/output formal argument, while previous ones let it undefined"
    unusedInputOutputFormalArgument:usedInputOutputFormalArgument
       -> usedInputOutputFormalArgument
    usedInputFormalArgument:droppedInputFormalArgument
       -> usedInputFormalArgument error "this branch drops the '%K' input formal argument, while previous ones let it defined"
    usedInputOutputFormalArgument:droppedInputOutputFormalArgument
       -> usedInputOutputFormalArgument error "this branch drops the '%K' input/output formal argument, while previous ones let it defined"
    usedLocalVariable:droppedLocalVariable 
       -> usedLocalVariable error "this branch drops the '%K' variable, while previous ones let it defined"
    droppedLocalVariable:undefinedLocalVariable
       -> droppedLocalVariable
    undefinedLocalVariable:usedLocalVariable
       -> undefinedLocalVariable error "this branch defines the '%K' variable, while previous ones let it undefined"
    usedLocalVariable:undefinedLocalVariable
       -> usedLocalVariable error "this branch lets the '%K' variable undefined, while previous defines let it"
  }

#--- 'repeatBlock' override definitions
  override repeatBlock {
    undefinedLocalConstant:localConstant -> undefinedLocalConstant error "the repeated branch should not define the '%K' variable"
    undefinedLocalConstant:readLocalConstant -> undefinedLocalConstant error "the repeated branch should not define the '%K' variable"
    currentInstanceAttributeInModifier:currentInstanceDroppedAttributeInModifier -> currentInstanceAttributeInModifier error "the repeated branch should not drop the '%K' attribute"
    currentInstanceDroppedAttributeInModifier:currentInstanceAttributeInModifier -> currentInstanceAttributeInModifier
    constantInputFormalArgument:usedConstantInputFormalArgument -> usedConstantInputFormalArgument
    constantInputFormalArgumentDeclaredAsUnused:usedConstantInputFormalArgument -> usedConstantInputFormalArgument
    definedLocalVariable:droppedLocalVariable -> definedLocalVariable error "the repeated branch should not drop the '%K' variable"
    definedLocalVariable:usedLocalVariable -> usedLocalVariable
    definedOutputFormalArgument:undefinedOutputFormalArgument -> definedOutputFormalArgument error "the repeated branch should not drop the '%K' output formal argument"
    droppedInputFormalArgument:usedInputFormalArgument -> droppedInputFormalArgument error "the repeated branch should not drop the '%K' input formal argument"
    droppedInputOutputFormalArgument:usedInputOutputFormalArgument -> droppedInputOutputFormalArgument error "the repeated branch should define the '%K' input formal argument"
    droppedLocalVariable:definedLocalVariable -> droppedLocalVariable error "the repeated branch should not drop the '%K' variable"
    inputFormalArgumentDeclaredAsUnused:droppedInputFormalArgument -> inputFormalArgumentDeclaredAsUnused error "the repeated branch should not drop the '%K' input formal argument"
    inputFormalArgumentDeclaredAsUnused:usedInputFormalArgument -> usedInputFormalArgument
    inputFormalParameter:droppedInputFormalArgument -> inputFormalParameter error "the repeated branch should not drop the '%K' input formal argument"
    inputFormalParameter:usedInputFormalArgument -> usedInputFormalArgument
    inputOutputFormalArgumentDeclaredAsUnused:droppedInputOutputFormalArgument -> inputOutputFormalArgumentDeclaredAsUnused error "the repeated branch should not drop the '%K' input/output formal argument"
    inputOutputFormalArgumentDeclaredAsUnused:usedInputOutputFormalArgument -> usedInputOutputFormalArgument
    localConstant:readLocalConstant -> readLocalConstant
    undefinedLocalVariable:definedLocalVariable -> undefinedLocalVariable error "the repeated branch should not define the '%K' variable"
    undefinedOutputFormalArgument:definedOutputFormalArgument -> undefinedOutputFormalArgument error "the repeated branch should not define the '%K' output formal argument"
    unusedInputOutputFormalArgument:droppedInputOutputFormalArgument -> unusedInputOutputFormalArgument error "the repeated branch should not drop the '%K' input/output formal argument"
    unusedInputOutputFormalArgument:usedInputOutputFormalArgument -> usedInputOutputFormalArgument
    usedInputFormalArgument:droppedInputFormalArgument -> usedInputFormalArgument error "the repeated branch should not drop the '%K' input formal argument"
    usedInputOutputFormalArgument:droppedInputOutputFormalArgument -> usedInputOutputFormalArgument error "the repeated branch should not drop the '%K' input/output formal argument"
    usedLocalVariable:definedLocalVariable -> definedLocalVariable
    usedLocalVariable:droppedLocalVariable -> usedLocalVariable error "the repeated branch should not drop the '%K' variable"
    droppedLocalVariable:usedLocalVariable -> droppedLocalVariable error "the repeated branch should not define the dropped '%K' variable"
    undefinedLocalVariable:droppedLocalVariable -> droppedLocalVariable
    undefinedLocalVariable:usedLocalVariable -> undefinedLocalVariable error "the repeated branch should not define the '%K' variable"
    localConstant:droppedLocalConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    droppedLocalConstant:localConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    droppedLocalConstant:readLocalConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    readLocalConstant:droppedLocalConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    localConstant:undefinedLocalConstant -> droppedLocalConstant error "a branch lets the '%K' constant undefined"
    readLocalConstant:undefinedLocalConstant -> readLocalConstant error "a branch lets the '%K' constant undefined"
    droppedLocalConstant:undefinedLocalConstant -> droppedLocalConstant
    undefinedLocalConstant:droppedLocalConstant -> droppedLocalConstant
    readLocalConstant:localConstant -> readLocalConstant
  }{
    droppedLocalConstant:localConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    localConstant:droppedLocalConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    droppedLocalConstant:readLocalConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    readLocalConstant:droppedLocalConstant -> droppedLocalConstant error "a branch lets the '%K' constant dropped"
    droppedLocalConstant:undefinedLocalConstant -> droppedLocalConstant warning "a branch drops the '%K' constant, while other one lets it undefined"
    undefinedLocalConstant:droppedLocalConstant -> droppedLocalConstant warning "a branch drops the '%K' constant, while other one lets it undefined"
    currentInstanceAttributeInModifier:currentInstanceDroppedAttributeInModifier -> currentInstanceAttributeInModifier
    constantInputFormalArgument:usedConstantInputFormalArgument -> usedConstantInputFormalArgument
    constantInputFormalArgumentDeclaredAsUnused:usedConstantInputFormalArgument -> usedConstantInputFormalArgument
    definedLocalVariable:usedLocalVariable -> usedLocalVariable
    inputFormalArgumentDeclaredAsUnused:usedInputFormalArgument -> usedInputFormalArgument
    inputFormalParameter:usedInputFormalArgument -> usedInputFormalArgument
    localConstant:readLocalConstant -> readLocalConstant
    inputOutputFormalArgumentDeclaredAsUnused:usedInputOutputFormalArgument -> usedInputOutputFormalArgument
    usedInputOutputFormalArgument:unusedInputOutputFormalArgument -> usedInputOutputFormalArgument
    droppedLocalVariable:undefinedLocalVariable -> droppedLocalVariable
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkAssignmentTypes
  ?let @unifiedTypeMap-proxy inTargetType
  ?let @unifiedTypeMap-proxy inSourceType
  ?let @location inErrorLocation
{
  @unifiedTypeMap-proxy sourceType = inSourceType
  @bool ok = inTargetType == inSourceType
  loop (@uint.max) while (not ok) & (not [[sourceType mSuperType] isNull]) do
    sourceType = [sourceType mSuperType]
    ok = inTargetType == sourceType
  end
  if not ok then
    error inErrorLocation
     : "target object type is '@" + [inTargetType key] + "' and cannot be assigned from an '@" + [inSourceType key] + "' object"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkAssignmentTypeWithImplicitGetterCall
  ?let @unifiedTypeMap-proxy inTargetType
  ?let @unifiedTypeMap-proxy inSourceType
  ?let @location inErrorLocation
  ?!@semanticExpressionForGeneration ioRightExpression
{
  @unifiedTypeMap-proxy sourceType = inSourceType
  @bool ok = inTargetType == inSourceType
  loop (@uint.max) while (not ok) & (not [[sourceType mSuperType] isNull]) do
    sourceType = [sourceType mSuperType]
    ok = inTargetType == sourceType
  end
#  if not ok then
#    error inErrorLocation
#     : "target object type is '@" + [inTargetType key] + "' and cannot be assigned from an '@" + [inSourceType key] + "' object"
#  end
#--- Check if there is a conversion getter
  if (not ok) && [[inSourceType mGetterMap] hasKey ![inTargetType key]] then
    [[inSourceType mGetterMap] searchKey
      ![inTargetType lkey]
      ?let kind
      ?var @functionSignature argumentTypeList
      ?*
      ?let hasCompilerArgument
      ?let returnedType
      ?2*
    ]
    ok = ([argumentTypeList length] == 0) & (returnedType == inTargetType)
 #--- Add conversion expression
    let conversionExpression = @getterCallExpressionForGeneration.new {
      !inTargetType
      !inErrorLocation
      !kind
      !ioRightExpression
      !{}
      ![inTargetType key]
      !{}
      !hasCompilerArgument
    }
    ioRightExpression = conversionExpression
  end
  if not ok then
    error inErrorLocation
     : "target object type is '@" + [inTargetType key] + "' and cannot be assigned from an '@" + [inSourceType key]
     + "' object; this type have no '"
    + [inTargetType key] + "' getter without argument that returns a '@" + [inTargetType key] + "' object"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkDiadicOperator
  ?let @unifiedTypeMap-proxy inLeftType
  ?let @unifiedTypeMap-proxy inRightType
  ?let @bool inOperandIsHandled
  ?let @string inOperatorNameForErrorMessage
  ?let @location inErrorLocation
  ?!@semanticExpressionForGeneration ioRightExpression
{
  if not inOperandIsHandled then
    error inErrorLocation
    : "left operand type is '@" + [inLeftType key] + "' and does not accept '" + inOperatorNameForErrorMessage 
      + "' operator (right operand type is '@" + [inRightType key] + ")"
  else
    @unifiedTypeMap-proxy rightType = inRightType
    @bool ok = inLeftType == rightType
    loop (@uint.max) while (not ok) & (not [[rightType mSuperType] isNull]) do
      rightType = [rightType mSuperType]
      ok = inLeftType == rightType
    end
  #--- Check if there is a conversion getter
    if (not ok) && [[inRightType mGetterMap] hasKey ![inLeftType key]] then
      @bool hasCompilerArgument
      @unifiedTypeMap-proxy returnedType
      @methodKind kind
      [[inRightType mGetterMap] searchKey
        ![inLeftType lkey]
        ?kind
        ?var @functionSignature argumentTypeList
        ?*
        ?hasCompilerArgument
        ?returnedType
        ?2*
      ]
      ok = ([argumentTypeList length] == 0) & (returnedType == inLeftType)
   #--- Add conversion expression
      let conversionExpression = @getterCallExpressionForGeneration.new {
        !inLeftType
        !inErrorLocation
        !kind
        !ioRightExpression
        !@stringlist.emptyList
        ![inLeftType key]
        !@semanticExpressionListForGeneration.emptyList
        !hasCompilerArgument
      }
      ioRightExpression = conversionExpression
    end
    if not ok then
      error inErrorLocation
      : "left operand type of '" + inOperatorNameForErrorMessage + "' operator is '@" + [inLeftType key]
      + "', right operand type is '@" + [inRightType key]
      + "', it should be either the same, either inherits from left operand type, either have a '"
      + [inLeftType key] + "' getter without argument that returns a '@" + [inLeftType key] + "' object"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    S E M A N T I C    C O N T E X T    F O R    A N A L Y S I S                                                      *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @predefinedTypes {
  @unifiedTypeMap-proxy mLocationType
  @unifiedTypeMap-proxy mBoolType
  @unifiedTypeMap-proxy mCharType
  @unifiedTypeMap-proxy mStringType
  @unifiedTypeMap-proxy mUIntType
  @unifiedTypeMap-proxy mSIntType
  @unifiedTypeMap-proxy mUInt64Type
  @unifiedTypeMap-proxy mSInt64Type
  @unifiedTypeMap-proxy mDoubleType
  @unifiedTypeMap-proxy mLBoolType
  @unifiedTypeMap-proxy mLCharType
  @unifiedTypeMap-proxy mLStringType
  @unifiedTypeMap-proxy mLUIntType
  @unifiedTypeMap-proxy mLSIntType
  @unifiedTypeMap-proxy mLUInt64Type
  @unifiedTypeMap-proxy mLSInt64Type
  @unifiedTypeMap-proxy mLDoubleType
  @unifiedTypeMap-proxy mStringListType
  @unifiedTypeMap-proxy mLBigIntType
  @unifiedTypeMap-proxy mBigIntType
  @unifiedTypeMap-proxy mStringSetType
  @unifiedTypeMap-proxy mLStringListType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    A N A L Y S I S    C O N T E X T                                                                                  *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @analysisContext {
  @semanticContext mSemanticContext
  @predefinedTypes mPredefinedTypes
  @unifiedTypeMap-proxy mSelfCopyTypeProxy # isNull if outside a extension
  @string mSelfObjectCppName
  @unifiedTypeMap-proxy mSelfTypeProxy # isNull if outside a setter extension
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    E X P R E S S I O N    A N A L Y S I S                                                                            *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @semanticExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-proxy inType
  ?let @analysisContext inAnalysisContext
  ?!@variableMap ioVariableMap
  !@semanticExpressionForGeneration outExpression

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
