#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Semantic Analysis of expression          
#                                           
#  Copyright (C) 2010, ..., 2016 Pierre Molinaro.                                                                      *
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkAssignmentTypes
  ?let @unifiedTypeMap-entry inTargetType
  ?let @unifiedTypeMap-entry inSourceType
  ?let @location inErrorLocation
{
  @unifiedTypeMap-entry sourceType = inSourceType
  @bool ok = inTargetType == sourceType
  loop (@uint.max) while (not ok) & (not [[sourceType mSuperType] isNull]) do
    sourceType = [sourceType mSuperType]
    ok = inTargetType == sourceType
  end
  if not ok, let [[inTargetType mTypeKindEnum] weakReferenceType ?referenceType: let targetType] then
    sourceType = inSourceType
    ok = targetType == sourceType
    loop (@uint.max) while (not ok) & (not [[sourceType mSuperType] isNull]) do
      sourceType = [sourceType mSuperType]
      ok = targetType == sourceType
    end
  end
  if not ok then
    error inErrorLocation
     : "target object type is '@" + [inTargetType key] + "' and cannot be assigned from an '@" + [inSourceType key] + "' object"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkAssignmentTypeWithImplicitGetterCall
  ?let @unifiedTypeMap-entry inTargetType
  ?let @unifiedTypeMap-entry inSourceType
  ?let @location inErrorLocation
  ?!@semanticExpressionForGeneration ioRightExpression
{
  @unifiedTypeMap-entry sourceType = inSourceType
  @bool ok = inTargetType == inSourceType
  loop (@uint.max) while (not ok) & (not [[sourceType mSuperType] isNull]) do
    sourceType = [sourceType mSuperType]
    ok = inTargetType == sourceType
  end
  if not ok, let [[inTargetType mTypeKindEnum] weakReferenceType ?referenceType: let targetType] then
    sourceType = inSourceType
    ok = targetType == sourceType
    loop (@uint.max) while (not ok) & (not [[sourceType mSuperType] isNull]) do
      sourceType = [sourceType mSuperType]
      ok = targetType == sourceType
    end
  end
#--- Check if there is a conversion getter
  if (not ok) && [[inSourceType mGetterMap] hasKey ![inTargetType key]] then
    [[inSourceType mGetterMap] searchKey
      ![inTargetType lkey]
      ?let kind
      ?var @functionSignature argumentTypeList
      ?*
      ?let hasCompilerArgument
      ?let returnedType
      ?2*
    ]
    ok = ([argumentTypeList length] == 0) & (returnedType == inTargetType)
 #--- Add conversion expression
    let conversionExpression = @getterCallExpressionForGeneration.new {
      !inTargetType
      !inErrorLocation
      !kind
      !ioRightExpression
      !{}
      ![inTargetType key]
      !{}
      !hasCompilerArgument
    }
    ioRightExpression = conversionExpression
  end
  if not ok then
    error inErrorLocation
     : "target object type is '@" + [inTargetType key] + "' and cannot be assigned from an '@" + [inSourceType key]
     + "' object; this type have no '"
    + [inTargetType key] + "' getter without argument that returns a '@" + [inTargetType key] + "' object"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc checkDiadicOperator
  ?let @unifiedTypeMap-entry inLeftType
  ?let @unifiedTypeMap-entry inRightType
  ?let @bool inOperandIsHandled
  ?let @string inOperatorNameForErrorMessage
  ?let @location inErrorLocation
  ?!@semanticExpressionForGeneration ioRightExpression
{
  if not inOperandIsHandled then
    error inErrorLocation
    : "left operand type is '@" + [inLeftType key] + "' and does not accept '" + inOperatorNameForErrorMessage 
      + "' operator (right operand type is '@" + [inRightType key] + ")"
  else
    @unifiedTypeMap-entry rightType = inRightType
    @bool ok = inLeftType == rightType
    loop (@uint.max) while (not ok) & (not [[rightType mSuperType] isNull]) do
      rightType = [rightType mSuperType]
      ok = inLeftType == rightType
    end
  #--- Check if there is a conversion getter
    if (not ok) && [[inRightType mGetterMap] hasKey ![inLeftType key]] then
      @bool hasCompilerArgument
      @unifiedTypeMap-entry returnedType
      @methodKind kind
      [[inRightType mGetterMap] searchKey
        ![inLeftType lkey]
        ?kind
        ?var @functionSignature argumentTypeList
        ?*
        ?hasCompilerArgument
        ?returnedType
        ?2*
      ]
      ok = ([argumentTypeList length] == 0) & (returnedType == inLeftType)
   #--- Add conversion expression
      let conversionExpression = @getterCallExpressionForGeneration.new {
        !inLeftType
        !inErrorLocation
        !kind
        !ioRightExpression
        !{}
        ![inLeftType key]
        !{}
        !hasCompilerArgument
      }
      ioRightExpression = conversionExpression
    end
    if not ok then
      error inErrorLocation
      : "left operand type of '" + inOperatorNameForErrorMessage + "' operator is '@" + [inLeftType key]
      + "', right operand type is '@" + [inRightType key]
      + "', it should be either the same, either inherits from left operand type, either have a '"
      + [inLeftType key] + "' getter without argument that returns a '@" + [inLeftType key] + "' object"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    S E M A N T I C    C O N T E X T    F O R    A N A L Y S I S                                                      *
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @predefinedTypes {
  public var @unifiedTypeMap-entry mLocationType
  public var @unifiedTypeMap-entry mBoolType
  public var @unifiedTypeMap-entry mCharType
  public var @unifiedTypeMap-entry mStringType
  public var @unifiedTypeMap-entry mUIntType
  public var @unifiedTypeMap-entry mSIntType
  public var @unifiedTypeMap-entry mUInt64Type
  public var @unifiedTypeMap-entry mSInt64Type
  public var @unifiedTypeMap-entry mDoubleType
  public var @unifiedTypeMap-entry mLBoolType
  public var @unifiedTypeMap-entry mLCharType
  public var @unifiedTypeMap-entry mLStringType
  public var @unifiedTypeMap-entry mLUIntType
  public var @unifiedTypeMap-entry mLSIntType
  public var @unifiedTypeMap-entry mLUInt64Type
  public var @unifiedTypeMap-entry mLSInt64Type
  public var @unifiedTypeMap-entry mLDoubleType
  public var @unifiedTypeMap-entry mStringListType
  public var @unifiedTypeMap-entry mLBigIntType
  public var @unifiedTypeMap-entry mBigIntType
  public var @unifiedTypeMap-entry mStringSetType
  public var @unifiedTypeMap-entry mLStringListType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    A N A L Y S I S    C O N T E X T       
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @analysisContext {
  public var @semanticContext mSemanticContext
  public var @predefinedTypes mPredefinedTypes
  public var @unifiedTypeMap-entry mSelfCopyTypeEntry # isNull if outside a extension
  public var @string mSelfObjectCppName
  public var @unifiedTypeMap-entry mSelfTypeEntry # isNull if outside a setter extension
  public var @string mSelfObjectCppPrefixForAccessingProperty # i.e. "ioObject->", ...
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    E X P R E S S I O N    A N A L Y S I S 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @semanticExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
