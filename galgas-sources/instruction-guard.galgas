#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  //······························································································

  rule <expression_or_ggs3> ?!@galgasDeclarationAST ioDeclarations
                            !@semanticExpressionAST outExpression

  //······························································································

#  rule <if_instruction_core> ?!@galgasDeclarationAST ioDeclarations
#                             !@semanticInstructionAST outInstruction {
#    let instructionLocation = @location.here
#    <if_expression_ggs3> !?ioDeclarations ?let testExpression
#    $then$
#    <semantic_instruction_list_ggs3> !?ioDeclarations ?let then_instructionList
#    let endOf_then_branchLocation = @location.here
#    let @semanticInstructionListAST else_instructionList
#    select
#      else_instructionList = @semanticInstructionListAST ()
#    or
#      $else$
#      <semantic_instruction_list_ggs3> !?ioDeclarations ?else_instructionList
#    or
#      $elsif$
#      <if_instruction_core> !?ioDeclarations ?let instruction
#      else_instructionList = @[init  (instruction)]
#    end
#    outInstruction = @ifInstructionAST {
#      !instructionLocation
#      !testExpression
#      !then_instructionList
#      !endOf_then_branchLocation
#      !else_instructionList
#      !@location.here
#    }
#  }
#
#  //······························································································
#
#  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
#                                   !@semanticInstructionAST outInstruction {
#    $guard$
#    <if_instruction_core> !?ioDeclarations ?outInstruction
#    $end$
#  }
#
#  //······························································································
#
#  rule <if_expression_ggs3> ?!@galgasDeclarationAST ioDeclarations
#                            !@ifExpressionList outExpressionList {
#    outExpressionList = @()
#    repeat
#      select
#        $let$
#        let @lstring constantName
#        select
#          $identifier$ ?constantName
#        or
#          $*$
#          constantName = ["" here]
#        end
#        $=$
#        <expression_or_ggs3> !?ioDeclarations ?let expression
#        let endOfReceiverExpression = @location.here
#        select
#          outExpressionList += !.letExp {
#            !constantName: constantName
#            !exp: expression
#            !endOfExp: endOfReceiverExpression
#            !typeName: ["" here]
#          }
#        or
#          $as$
#          <type_definition_ggs3> !?ioDeclarations ?let typeName
#          outExpressionList += !.letExp {
#            !constantName: constantName
#            !exp: expression
#            !endOfExp: endOfReceiverExpression
#            !typeName: typeName
#          }
#        end
#      or
#        <expression_ggs3> !?ioDeclarations ?let expression
#        outExpressionList += !.regularExp {!exp: expression !endOfExp: .here}
#      end
#    while
#      $,$
#    end
#  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  //······························································································

  rule <expression_or> ?!@galgasDeclarationAST ioDeclarations
                       !@semanticExpressionAST outExpression

  //······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $guard$
    let instructionLocation = @location.here
    <if_expression> !?ioDeclarations ?let testExpression
    $else$
      $error$
#    $end$
#    <semantic_instruction_list> !?ioDeclarations ?let then_instructionList
#    $end$
    error .here : "azerty" : outInstruction
#    let endOf_then_branchLocation = @location.here
#    let @semanticInstructionListAST else_instructionList
#    select
#      else_instructionList = @()
#    or
#      $else$
#      <semantic_instruction_list> !?ioDeclarations ?else_instructionList
#    or
#      $elsif$
#      <if_instruction_core> !?ioDeclarations ?let instruction
#      else_instructionList = @[init  (instruction)]
#    end
#    outInstruction = @ifInstructionAST {
#      !instructionLocation
#      !testExpression
#      !then_instructionList
#      !endOf_then_branchLocation
#      !else_instructionList
#      !.here
#    }
  }

  //······························································································

#  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
#                              !@semanticInstructionAST outInstruction {
#    $guard$
#    <if_instruction_core> !?ioDeclarations ?outInstruction
#    $end$
#  }

  //······························································································

#  rule <if_expression> ?!@galgasDeclarationAST ioDeclarations
#                       !@ifExpressionList outExpressionList {
#    outExpressionList = @()
#    repeat
#      select
#        $let$
#        let @lstring constantName
#        select
#          $identifier$ ?constantName
#        or
#          $*$
#          constantName = ["" here]
#        end
#        $=$
#        <expression_or> !?ioDeclarations ?let expression
#        let endOfReceiverExpression = @location.here
#        select
#          outExpressionList += !.letExp {
#            !constantName: constantName
#            !exp: expression
#            !endOfExp: endOfReceiverExpression
#            !typeName: ["" here]
#          }
#        or
#          $as$
#          <type_definition> !?ioDeclarations ?let typeName
#          outExpressionList += !.letExp {
#            !constantName: constantName
#            !exp: expression
#            !endOfExp: endOfReceiverExpression
#            !typeName: typeName
#          }
#        end
#      or
#        <expression> !?ioDeclarations ?let expression
#        outExpressionList += !.regularExp {!exp: expression !endOfExp: .here}
#      end
#    while
#      $,$
#    end
#  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
