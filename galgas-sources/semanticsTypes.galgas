#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  semantics definitions for semantics component 
#                                           
#  Copyright (C) 1997, ..., 2023 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once generateFewHeaderFiles -> @bool {
  result = true
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @functionSignature {
  public let @lstring mFormalSelector
  public let @unifiedTypeMapEntry mFormalArgumentType
  public let @string mFormalArgumentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  C O N S T R U C T O R    M A P           
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @constructorMap {
  public let @functionSignature mArgumentTypeList
  public let @bool mHasCompilerArgument
  public let @unifiedTypeMapEntry mReturnedType
  insert or replace
  insert insertKey error message "the '%K' constructor has been already defined"
  search searchKey error message "the '%K' constuctor is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @methodQualifier { # NE PAS CHANGER L'ORDRE
  case isVirtual
  case isVirtualAbstract
  case isBasic
  case isBasicFinal
  case isInherited
  case isVirtualOverriding
  case isVirtualOverridingAbstract
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @methodKind {
  case definedAsMember
  case definedAsExtension
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#
#  OPTIONAL METHOD MAP
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @optionalMethodSignature {
  public let @bool mInputArgument # true -> input, false -> output
  public let @lstring mFormalSelector
  public let @unifiedTypeMapEntry mFormalArgumentType
  public let @string mFormalArgumentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @optionalMethodMap {
  public let @optionalMethodSignature mArgumentTypeList
 
  insert insertKey error message "the '%K' optional method is already declared"
  search searchKey error message "the '%K' optional method is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  R E A D E R    M A P                     
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @getterMap {
  public let @methodKind mKind
  public let @functionSignature mArgumentTypeList
  public let @location mDeclarationLocation
  public let @bool mHasCompilerArgument
  public let @unifiedTypeMapEntry mReturnedType
  public let @methodQualifier mQualifier
  public let @string mGetterNameThatObsoletesInvokationName # If not empty, this getter is the one actually called
 
  insert insertKey error message "the '%K' getter is already declared"
  search searchKey error message "the '%K' getter is not declared"

  insert or replace
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  M O D I F I E R    M A P                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @formalParameterSignature {
  public let @lstring mFormalSelector
  public let @unifiedTypeMapEntry mFormalArgumentType
  public let @formalArgumentPassingModeAST mFormalArgumentPassingMode
  public let @string mFormalArgumentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @setterMap {
  public let @methodKind mKind
  public let @formalParameterSignature mParameterList
  public let @bool mHasCompilerArgument
  public let @methodQualifier mQualifier
  public let @string mErrorMessage # If not empty, calling the setter raises an error ith this message
  insert or replace
  insert insertKey error message "the '%K' setter is already declared"
  search searchKey error message "the '%K' setter is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  M E T H O D    M A P                     
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @instanceMethodMap {
  public let @methodKind mKind
  public let @formalParameterSignature mParameterList
  public let @location mDeclarationLocation
  public let @bool mHasCompilerArgument
  public let @methodQualifier mQualifier
  public let @string mErrorMessage # If not empty, calling the method raises an error with this message
  insert insertKey error message "the '%K' instance method is already declared"
  search searchKey error message "the '%K' instance method is not declared"
  search searchInheritedKey error message "as the '%K' method is tagged as 'override', it should be declared in the super class"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  C L A S S    M E T H O D    M A P        
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @classMethodMap {
  public let @formalParameterSignature mParameterList
  public let @bool mHasCompilerArgument
  insert or replace
  insert insertKey error message "the '%K' type proc is already declared"
  search searchKey error message "the '%K' type proc is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  E N U M E R A T I O N    D E S C R I P T O R    L I S T                                                     
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @enumerationDescriptorList {
  public let @unifiedTypeMapEntry mEnumeratedType
  public let @string mEnumerationName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  T Y P E D    P R O P E R T Y    L I S T  
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @typedPropertyList {
  public let @unifiedTypeMapEntry mPropertyTypeEntry
  public let @lstring mPropertyName
  public let @bool hasSetter %selector
  public let @bool hasSelector %selector
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  P R E D E F I N E D    T Y P E    K I N D    E N U M E R A T I O N                                          
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @predefinedTypeKindEnum {
  case predefined_uint 
  case predefined_uint64 
  case predefined_sint 
  case predefined_sint64 
  case predefined_char 
  case predefined_double 
  case predefined_string 
  case predefined_stringset 
  case predefined_bool 
  case predefined_binaryset 
  case predefined_function 
  case predefined_location 
  case predefined_type 
  case predefined_object 
  case predefined_data 
  case predefined_filewrapper 
  case predefined_application
  case predefined_bigint
  case predefined_timer
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  T Y P E    K I N D    E N U M E R A T I O N   
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @typeKindEnum {
  case classType (@bool isReference)
  case weakReferenceType (@unifiedTypeMapEntry referenceType)
  case enumType 
  case listType 
  case sortedListType 
  case mapType 
  case sharedMapType 
  case sharedMapEntryType 
  case listMapType 
  case boolsetType 
  case structType 
  case graphType 
  case externType 
  case arrayType 
  case predefinedType
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @typeKindEnum string -> @string {
  switch self
    case classType (isReference) : result = if isReference then "reference class" else "value class" end
    case enumType : result = "enumeration"
    case listType : result = "list"
    case sortedListType : result = "sorted list"
    case mapType : result = "map"
    case sharedMapType : result = "shared map"
    case sharedMapEntryType : result = "shared map entry"
    case listMapType : result = "list map"
    case structType : result = "struct"
    case boolsetType : result = "boolset"
    case graphType : result = "graph"
    case predefinedType : result = "predefined"
    case arrayType : result = "array"
    case externType : result = "extern"
    case weakReferenceType (*) : result = "weak reference"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  O P E R A T O R    Boolset               
#                                           
# This type is used for the mHandledOperatorFlags attribute of the @unifiedTypeMap map, for indicating the handled  
# operators.                                
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

boolset @operators {
  infixAddOperator,
  infixSubOperator,
  infixMulOperator,
  infixDivOperator,
  infixModOperator,
  infixShiftOperator,
  prefixPlusOperator,
  prefixMinusOperator,
  prefixTildeOperator,
  incDecOperator,

  infixAndOperator,
  infixOrOperator,
  infixXorOperator,
  prefixNotOperator,

  isComparable, # Supports <, <=, >, >=, ==, != operators
  isReferenceEquatable,  # Supports ===, !== operators

  plusEqualOperatorWithExpression, # var += exp ;
  minusEqualOperatorWithExpression, # var -= exp ;
  mulEqualOperatorWithExpression, # var *= exp ;
  divEqualOperatorWithExpression, # var /= exp ;

  infixAddOperatorNoOVF,
  infixSubOperatorNoOVF,
  infixMulOperatorNoOVF,
  infixDivOperatorNoOVF,
  prefixMinusOperatorNoOVF,
  incDecOperatorNoOVF,

  supportWithAccessor,
  plusEqualOperatorWithFieldListNeedsCompilerArg,
  generateEnumerationHelperMethods,
  doNotGenererateObjectCompare,
  generateDescriptionGetterUtilityMethod,
  generateCopyConstructorAndAssignmentOperator
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @propertyMap {
  public let @AccessControl mAccessControl
  public let @bool mIsConstant
  public let @unifiedTypeMapEntry mPropertyType
  insert insertKey error message "the '%K' property has been already declared in %L"
  search searchKey error message "the '%K' property is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

enum @headerKind {
  case noHeader
  case oneHeader
  case twoHeaders
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @constantIndexMap {
  public let @uint mIndex
  public let @unifiedTypeMapEntryList mAssociatedTypeList
  insert insertKey error message "the '%K' constant is already declared"
  search searchKey error message "the '%K' constant is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  A S T   C L A S S E S    F O R    P R E D E F I N E D   T Y P E S                                           
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————


refclass @bigintPredefinedTypeAST : @predefinedTypeAST {}

refclass @objectPredefinedTypeAST : @predefinedTypeAST {}

refclass @filewrapperPredefinedTypeAST : @predefinedTypeAST {}

refclass @binarysetPredefinedTypeAST : @predefinedTypeAST {}

refclass @boolPredefinedTypeAST : @predefinedTypeAST {}

refclass @uintPredefinedTypeAST : @predefinedTypeAST {}

refclass @uint64PredefinedTypeAST : @predefinedTypeAST {}

refclass @sintPredefinedTypeAST : @predefinedTypeAST {}

refclass @sint64PredefinedTypeAST : @predefinedTypeAST {}

refclass @charPredefinedTypeAST : @predefinedTypeAST {}

refclass @doublePredefinedTypeAST : @predefinedTypeAST {}

refclass @stringPredefinedTypeAST : @predefinedTypeAST {}

refclass @locationPredefinedTypeAST : @predefinedTypeAST {}

refclass @stringsetPredefinedTypeAST : @predefinedTypeAST {}

refclass @functionPredefinedTypeAST : @predefinedTypeAST {}

refclass @typePredefinedTypeAST : @predefinedTypeAST {}

refclass @dataPredefinedTypeAST : @predefinedTypeAST {}

refclass @timerPredefinedTypeAST : @predefinedTypeAST {}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

