#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @comparison {
  case equal # ==
  case notEqual # !=
  case lowerOrEqual
  case lowerThan
  case greaterOrEqual
  case greaterThan
  case sameInstance # ===
  case differentInstances # !==
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @comparisonExpressionAST : @semanticExpressionAST {
  public let @location mOperatorLocation
  public let @semanticExpressionAST mLeftExpression
  public let @comparison mComparison
  public let @semanticExpressionAST mRightExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·······························································································

  rule <relation_factor_ggs3> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticExpressionAST outExpression {
    <simple_expression_ggs3> !?ioDeclarations ? outExpression
    repeat
    while
      let operatorLocation = @location.here
      $==$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.equal !rightOperand}
    while
      let operatorLocation = @location.here
      $!=$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.notEqual !rightOperand}
    while
      let operatorLocation = @location.here
      $<=$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.lowerOrEqual !rightOperand}
    while
      let operatorLocation = @location.here
      $>=$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.greaterOrEqual !rightOperand}
    while
      let operatorLocation = @location.here
      $>$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.greaterThan !rightOperand}
    while
      let operatorLocation = @location.here
      $<$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.lowerThan !rightOperand}
    while
      let operatorLocation = @location.here
      $===$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.sameInstance !rightOperand}
    while
      let operatorLocation = @location.here
      $!==$
      let leftOperand = outExpression
      <simple_expression_ggs3> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.differentInstances !rightOperand}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·······························································································

  rule <relation_factor> ?!@galgasDeclarationAST ioDeclarations
                         !@semanticExpressionAST outExpression {
    <simple_expression> !?ioDeclarations ?outExpression
    repeat
    while
      let operatorLocation = @location.here
      $==$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.equal !rightOperand}
    while
      let operatorLocation = @location.here
      $!=$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.notEqual !rightOperand}
    while
      let operatorLocation = @location.here
      $<=$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.lowerOrEqual !rightOperand}
    while
      let operatorLocation = @location.here
      $>=$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.greaterOrEqual !rightOperand}
    while
      let operatorLocation = @location.here
      $>$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.greaterThan !rightOperand}
    while
      let operatorLocation = @location.here
      $<$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.lowerThan !rightOperand}
    while
      let operatorLocation = @location.here
      $===$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.sameInstance !rightOperand}
    while
      let operatorLocation = @location.here
      $!==$
      let leftOperand = outExpression
      <simple_expression> !?ioDeclarations ?let rightOperand
      outExpression = @comparisonExpressionAST {!operatorLocation !leftOperand !.differentInstances !rightOperand}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @comparisonExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mLeftExpression enterExpressionInSemanticContext !?ioTypeMap]
  [self.mRightExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @comparisonExpressionAST analyzeSemanticExpression
  ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inInferenceType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--- Left expression analysis
  [self.mLeftExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inInferenceType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration leftExpression
  ]
#--- Right expression analysis
  [self.mRightExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: leftExpression.mResultType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?var @semanticExpressionForGeneration rightExpression
  ]
#--- Operator name
  let isEquatable = [[leftExpression.mResultType definition].features equatable]
  let isComparable = [[leftExpression.mResultType definition].features comparable]
  let isReferenceEquatable = [[leftExpression.mResultType definition].features referenceEquatable]
  let @bool operatorIsAvailable
  let @string operatorName
  switch self.mComparison
  case equal :
    operatorName = "=="
    operatorIsAvailable = isEquatable
  case notEqual :
    operatorName = "!="
    operatorIsAvailable = isEquatable
  case lowerOrEqual :
    operatorName = "<="
    operatorIsAvailable = isComparable
  case lowerThan :
    operatorName = "<"
    operatorIsAvailable = isComparable
  case greaterOrEqual :
    operatorName = ">="
    operatorIsAvailable = isComparable
  case greaterThan :
    operatorName = ">"
    operatorIsAvailable = isComparable
  case sameInstance :
    operatorName = "==="
    operatorIsAvailable = isReferenceEquatable
  case differentInstances :
    operatorName = "!=="
    operatorIsAvailable = isReferenceEquatable
  end
#--- Check operator availability
  checkDiadicOperator (
    !operatorIsAvailable
    !operatorName
    !self.mOperatorLocation
    !?leftExpression
    !?rightExpression
  )
#--- Generate expression
  outExpression = @comparisonExpressionForGeneration {
    !inAnalysisContext.predefinedTypes.mBoolType
    !self.mOperatorLocation
    !leftExpression
    !self.mComparison
    !rightExpression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @comparisonExpressionForGeneration : @semanticExpressionForGeneration {
  public let @semanticExpressionForGeneration mLeftExpression
  public let @comparison mComparison
  public let @semanticExpressionForGeneration mRightExpression
}

#·····················································································································

override method @comparisonExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
  [self.mLeftExpression.mResultType addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mLeftExpression  generateExpression
     !?ioGeneratedCode
     !?ioInclusionSet
     !?ioTemporaryVariableIndex
     !?ioUnusedVariableCppNameSet
     ?let leftTemporaryOperand
   ]
#--- Right operand
  [self.mRightExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let rightTemporaryOperand
  ]
#--- Operator name
  let @string operatorName
  switch self.mComparison
  case equal, sameInstance : operatorName = "ComparisonKind::equal"
  case notEqual, differentInstances : operatorName = "ComparisonKind::notEqual"
  case lowerOrEqual : operatorName = "ComparisonKind::lowerOrEqual"
  case lowerThan : operatorName = "ComparisonKind::lowerThan"
  case greaterOrEqual : operatorName = "ComparisonKind::greaterOrEqual"
  case greaterThan : operatorName = "ComparisonKind::greaterThan"
  end
#--- Generate Comparison
  outCppExpression = "GALGAS_bool (" + operatorName + ", " + leftTemporaryOperand + ".objectCompare (" + rightTemporaryOperand + "))"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
