#---------------------------------------------------------------------------*
#                                                                           *
#  'syntax' component metamodel                                             *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*



#---------------------------------------------------------------------------*

list @syntaxInstructionList {
  @syntaxInstructionAST mInstruction feature nogetter ;
}

#---------------------------------------------------------------------------*

list @nonTerminalLabelListAST {
  @lstring mLabelName feature nogetter ;
  @formalParameterListAST mFormalArgumentList feature nogetter ;
  @location mEndOfArgumentLocation feature nogetter ;
}

#---------------------------------------------------------------------------*

list @nonterminalDeclarationListAST {
  @lstring mNonterminalName feature nogetter ;
  @nonTerminalLabelListAST mLabels feature nogetter ;
}

#---------------------------------------------------------------------------*

list @syntaxRuleLabelListAST {
  @lstring mLabelName feature nogetter ;
  @formalParameterListAST mFormalArguments feature nogetter ;
  @location mEndOfArgumentLocation feature nogetter ;
  @syntaxInstructionList mSyntaxInstructionList feature nogetter ;
  @location mEndOfInstructionList feature nogetter ;
}

#---------------------------------------------------------------------------*

list @syntaxRuleListAST {
  @lstring mNonterminalName feature nogetter ;
  @syntaxRuleLabelListAST mLabelList feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   N O N T E R M I N A L    C A L L    I N S T R U C T I O N               *
#                                                                           *
#---------------------------------------------------------------------------*

class @nonterminalCallInstruction : @syntaxInstructionAST {
  @lstring mNonterminalName ;
  @lstring mLabelName ; # No label : empty string
  @actualParameterListAST mActualParameterList ;
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationResult ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   T E R M I N A L    C H E C K    I N S T R U C T I O N                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @terminalCheckInstruction : @syntaxInstructionAST {
  @lstring mTerminalName ;
  @actualInputParameterListAST mActualInputParameterList ;
  @lstringlist mIndexingKeyList ; # Empty list if no index
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationPreceedingDelimitor ;
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationToken ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   R E P E A T    I N S T R U C T I O N                                    *
#                                                                           *
#---------------------------------------------------------------------------*

list @listOfSyntaxInstructionList {
  @syntaxInstructionList mSyntaxInstructionList feature nogetter ;
  @location mEndOf_instructions feature nogetter ;
}

#---------------------------------------------------------------------------*

class @repeatInstruction : @syntaxInstructionAST {
  @syntaxInstructionList mRepeatedInstructionList ;
  @location mEndOf_repeated_instructions_branch ;
  @listOfSyntaxInstructionList mRepeatBranchList ;
  @location mEndOf_repeat_instruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   S E L E C T    I N S T R U C T I O N                                    *
#                                                                           *
#---------------------------------------------------------------------------*

class @selectInstruction : @syntaxInstructionAST {
  @listOfSyntaxInstructionList mSelectBranchList ;
  @location mEndOf_select_instruction ;
}

#---------------------------------------------------------------------------*

class @syntaxSendInstruction : @syntaxInstructionAST {
  @semanticExpressionAST mExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   P A R S E   R E W I N D    I N S T R U C T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

class @parseRewindInstruction : @syntaxInstructionAST {
  @listOfSyntaxInstructionList mParseRewindBranchList ;
  @location mEndOfParseDoInstruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   P A R S E   L O O P    I N S T R U C T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @parseLoopInstruction : @syntaxInstructionAST {
  @semanticExpressionAST mVariantExpression ;
  @location mEndOfVariantExpression ;
  @semanticExpressionAST mWhileExpression ;
  @location mEndOfWhileExpression ;
  @syntaxInstructionList mDoInstructionList ;
  @location mEndOfInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   P A R S E   W H E N    I N S T R U C T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @parseWhenInstruction : @syntaxInstructionAST {
  @semanticExpressionAST mWhenExpression ;
  @location mEndOfWhenExpression ;
  @syntaxInstructionList mWhenInstructionList ;
  @location mEndOfWhenInstructionList ;
  @syntaxInstructionList mElseInstructionList ;
  @location mEndOfElseInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   S Y N T A X    C O M P O N E N T    A S T                               *
#                                                                           *
#---------------------------------------------------------------------------*

struct @syntaxComponentAST {
  @lstring mSyntaxComponentName ;
  @lstring mImportedLexiqueFilePath ; 
  @lstringlist mImportedComponentFileNameList ;
  @nonterminalDeclarationListAST mNonterminalDeclarationList ;
  @syntaxRuleListAST mRuleList ;
  @semanticDeclarationListAST mSemanticDeclarationList ;
  @location mEndOfSourceFile ;
  @bool mHasTranslateFeature ;
}

#---------------------------------------------------------------------------*

