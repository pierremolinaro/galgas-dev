#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Copyright (C) 2007, ..., 2014 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

map @commandLineOptionMap { # the key is the option identifier
  @char mOptionChar
  @string mOptionString
  @string mComment
  @string mDefaultValue
  insert insertKey error message "the '%K' command line option has been already declared in %L"
  search searchKey error message "the '%K' command line option is not declared"
}

#----------------------------------------------------------------------------------------------------------------------*
#         G E N E R A T I O N    T E M P L A T E S                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper optionGenerationTemplates in "../generation_templates/option_generation" {
}{
}{
  template optionHeaderZone2 "option-header-zone2.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME

  template optionHeaderZone3 "option-header-zone3.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
    ?@commandLineOptionMap STRING_LIST_OPTION_MAP

  template optionImplementation "option-implementation.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
    ?@commandLineOptionMap STRING_LIST_OPTION_MAP

  template optionImplementationGalgas3 "option-implementation-galgas3.cpp.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
    ?@commandLineOptionMap STRING_LIST_OPTION_MAP

  template optionHeaderCocoaZone2 "option-header-cocoa-zone2.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME

  template optionHeaderCocoaZone3 "option-header-cocoa-zone3.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME

  template optionImplementationCocoa "option-implementation-cocoa.galgasTemplate"
    ?@string OPTION_HEADER_FILE_NAME
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
    ?@commandLineOptionMap STRING_LIST_OPTION_MAP
}

#----------------------------------------------------------------------------------------------------------------------*
#                  semanticAnalysisOfOptionComponent                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

proc semanticAnalysisOfOptionComponent
  ?let @optionComponentAST inOptionComponentRoot
  !@commandLineOptionMap outBoolOptionMap
  !@commandLineOptionMap outUIntOptionMap
  !@commandLineOptionMap outStringOptionMap
  !@commandLineOptionMap outStringListOptionMap {
  outBoolOptionMap = {}
  outUIntOptionMap = {}
  outStringOptionMap = {}
  outStringListOptionMap = {}
  var optionNameSet = @stringset.emptySet
  for () in [inOptionComponentRoot mOptions] do
    if [optionNameSet hasKey ![mOptionInternalName string]] then
      error mOptionInternalName: "the '" + [mOptionInternalName string] + "' command line option has been already declared"
    elsif [mOptionTypeName string] == "bool" then
      [!?outBoolOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        !"false"
      ]
      if mOptionDefaultValueKind != @optionDefaultValueEnumAST. noDefaultValue then
        error mOptionDefaultValue:"an @bool option cannot have a default value (default value is allways false)"      
      end
    elsif [mOptionTypeName string] == "uint" then
      [!?outUIntOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        !if [mOptionDefaultValue string] == "" then "0" else [mOptionDefaultValue string] end
      ]
      if mOptionDefaultValueKind == @optionDefaultValueEnumAST.stringDefaultValue then
        error mOptionDefaultValue:"an @uint option default value cannot be an @string value"      
      end
    elsif [mOptionTypeName string] == "string" then
      [!?outStringOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        ![mOptionDefaultValue string]
      ]
      if mOptionDefaultValueKind == @optionDefaultValueEnumAST.unsignedDefaultValue then
        error mOptionDefaultValue:"an @string option default value cannot be an @uint value"      
      end
    elsif [mOptionTypeName string] == "stringlist" then
      [!?outStringListOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        ![mOptionDefaultValue string]
      ]
      if mOptionDefaultValueKind != .noDefaultValue then
        error mOptionDefaultValue:"an @stringlist option cannot accept default value"      
      end
    else
      error mOptionTypeName: "only the @bool, @uint, @string or @stringlist types are allowed here"
    end
    optionNameSet += !mOptionInternalName.string
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                         parseOptionComponent                                                                         *
#----------------------------------------------------------------------------------------------------------------------*

proc parseOptionComponent
  ?let @lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@lstring outOptionComponentName
  !@commandLineOptionMap outBoolOptionMap
  !@commandLineOptionMap outUIntOptionMap
  !@commandLineOptionMap outStringOptionMap
  !@commandLineOptionMap outStringListOptionMap {
  outOptionComponentName = @lstring.new {![[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension] ![inSourceFile location]}
  if [[ioParsedComponentStruct mParsedOptionComponentMap] hasKey ! [outOptionComponentName string]] then
    [ioParsedComponentStruct.mParsedOptionComponentMap searchKey
      !outOptionComponentName
      ?outBoolOptionMap
      ?outUIntOptionMap
      ?outStringOptionMap
      ?outStringListOptionMap
    ]
  else
    grammar optionLL1grammar in inSourceFile ?var @optionComponentAST optionComponentAST
  #--- Check component name
    @lstring componentName = [optionComponentAST mOptionComponentName]
    @string basename = [[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension]
    if [componentName string] != basename then
      warning componentName: "GALGAS checks "
        "the component name ('" + [componentName string]
      + "') against the source file base name ('" + basename + "'): they should be the same"
    end 
  #--- Check component name
    @string baseName = [[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension]
    if [[optionComponentAST mOptionComponentName] string] != baseName then
      error [optionComponentAST mOptionComponentName]: "the component name is '"
      + [optionComponentAST mOptionComponentName] + "' should be the file base name '"
      + baseName + "'"
    end
  #--- Semantic Analysis of option component
    semanticAnalysisOfOptionComponent (
      !optionComponentAST
      ?outBoolOptionMap
      ?outUIntOptionMap
      ?outStringOptionMap
      ?outStringListOptionMap
    )
  #--- Enter option component in parsed option component map
    [!?ioParsedComponentStruct.mParsedOptionComponentMap insertKey
      !outOptionComponentName
      !outBoolOptionMap
      !outUIntOptionMap
      !outStringOptionMap
      !outStringListOptionMap
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileOptionComponentAST
  ?let @string inOutputDirectory
  ?let @lstring inOptionComponentName
  ?let @commandLineOptionMap boolOptionMap
  ?let @commandLineOptionMap uintOptionMap
  ?let @commandLineOptionMap stringOptionMap
  ?let @commandLineOptionMap stringListOptionMap {
#--- Generate header
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:[inOptionComponentName string] + ".h"
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper optionGenerationTemplates.optionHeaderZone2
        ![inOptionComponentName string]
      ]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:[filewrapper optionGenerationTemplates.optionHeaderZone3
        ![inOptionComponentName string]
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
        !stringListOptionMap
      ] + "\n#endif\n"
      !makeExecutable:false
    ]
  end
#--- Generate Implementation
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:[inOptionComponentName string] + ".cpp"
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper optionGenerationTemplates.optionImplementation
        ![inOptionComponentName string]
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
        !stringListOptionMap
      ]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:"\n\n" # User Zone 3
      !makeExecutable:false
    ]
 end
#--- Generate Cocoa header
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:[inOptionComponentName string] + "-cocoa.h"
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper optionGenerationTemplates.optionHeaderCocoaZone2
        ![inOptionComponentName string]
      ]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:[filewrapper optionGenerationTemplates.optionHeaderCocoaZone3
        ![inOptionComponentName string]
      ]
      !makeExecutable:false
    ]
  end
#--- Generate Cocoa Implementation
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !startPath:inOutputDirectory
      !fileName:[inOptionComponentName string] + "-cocoa.m"
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper optionGenerationTemplates.optionImplementationCocoa
        !inOptionComponentName.string + "-cocoa"
        !inOptionComponentName.string
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
        !stringListOptionMap
      ]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:"\n\n" # User Zone 3
      !makeExecutable:false
    ]
 end
}

#----------------------------------------------------------------------------------------------------------------------*

proc compileOptionComponentFromSourceFile
  ?let @lstring inSourceFile
  ?let @string inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct {
#--- Parse option component
  parseOptionComponent (
    !inSourceFile
    !?ioParsedComponentStruct
    ?let @lstring optionComponentName
    ?let @commandLineOptionMap boolOptionMap
    ?let @commandLineOptionMap uintOptionMap
    ?let @commandLineOptionMap stringOptionMap
    ?let @commandLineOptionMap stringListOptionMap
  )
#---
  compileOptionComponentAST (
    !inOutputDirectory
    !optionComponentName
    !boolOptionMap
    !uintOptionMap
    !stringOptionMap
    !stringListOptionMap
  )
}

#----------------------------------------------------------------------------------------------------------------------*

