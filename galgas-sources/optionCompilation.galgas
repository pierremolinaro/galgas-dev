#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
//————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
//————————————————————————————————————————————————————————————————————————————————————————————————

enum @optionDefaultValueEnumAST %equatable {
  case noDefaultValue
  case unsignedDefaultValue
  case stringDefaultValue
}

//————————————————————————————————————————————————————————————————————————————————————————————————

list @commandLineOptionListAST {
  public let @lstring mOptionTypeName
  public let @lstring mOptionInternalName
  public let @lchar mOptionInvocationLetter
  public let @lstring mOptionInvocationString
  public let @lstring mOptionComment
  public let @lstring mOptionDefaultValue
  public let @optionDefaultValueEnumAST mOptionDefaultValueKind
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @optionComponentDeclarationAST : @semanticDeclarationAST {
  public let @lstring mOptionComponentName
  public let @commandLineOptionListAST mOptions
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————


syntax galgas3OptionComponentSyntax (galgasScanner3) {

  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $option$
    $identifier$ ?let @lstring optionComponentName
    ${$
    var @commandLineOptionListAST options = @()
    repeat
    while
      <option_declaration_ggs3> !?options
    end
    $}$
    ioDeclarations.mDeclarationList += !@optionComponentDeclarationAST {
      !isPredefined: false
      !optionComponentName
      !options
    }
  }

  //······························································································

  rule <option_declaration_ggs3> ?!@commandLineOptionListAST ioCommandLineOptionList {
    $@type$ ?let @lstring mOptionTypeName
    $identifier$ ?let @lstring mOptionInternalName
    $:$
    $'char'$ ?let @lchar mOptionInvocationLetter
    $,$
    $"string"$ ?let @lstring mOptionInvocationString
    $->$
    $"string"$ ?let @lstring mOptionComment
    var defaultValue = @lstring {!"" !@location.here}
    let @optionDefaultValueEnumAST optionDefaultValueKind
    select
      optionDefaultValueKind = @optionDefaultValueEnumAST. noDefaultValue
    or
      $default$
      select
        $"string"$ ? defaultValue
        optionDefaultValueKind = @optionDefaultValueEnumAST. stringDefaultValue
      or
        $literalInt$ ?let v
        defaultValue = @lstring {![v.bigint string] !v.location}
        optionDefaultValueKind = @optionDefaultValueEnumAST. unsignedDefaultValue
      end
    end
    ioCommandLineOptionList +=
      !mOptionTypeName
      !mOptionInternalName
      !mOptionInvocationLetter
      !mOptionInvocationString
      !mOptionComment
      !defaultValue
      !optionDefaultValueKind
  }

  //······························································································
}

//————————————————————————————————————————————————————————————————————————————————————————————————


syntax galgas4OptionComponentSyntax (galgasScanner4) {

  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $option$
    $identifier$ ?let @lstring optionComponentName
    ${$
    var @commandLineOptionListAST options = @()
    repeat
    while
      <option_declaration_ggs3> !?options
    end
    $}$
    ioDeclarations.mDeclarationList += !@optionComponentDeclarationAST {
      !isPredefined: false
      !optionComponentName
      !options
    }
  }

  //······························································································

  rule <option_declaration_ggs3> ?!@commandLineOptionListAST ioCommandLineOptionList {
    $@type$ ?let @lstring mOptionTypeName
    $identifier$ ?let @lstring mOptionInternalName
    $:$
    $'char'$ ?let @lchar mOptionInvocationLetter
    $,$
    $"string"$ ?let @lstring mOptionInvocationString
    $->$
    $"string"$ ?let @lstring mOptionComment
    var defaultValue = @lstring {!"" !@location.here}
    let @optionDefaultValueEnumAST optionDefaultValueKind
    select
      optionDefaultValueKind = @optionDefaultValueEnumAST. noDefaultValue
    or
      $default$
      select
        $"string"$ ? defaultValue
        optionDefaultValueKind = @optionDefaultValueEnumAST. stringDefaultValue
      or
        $literalInt$ ?let v
        defaultValue = @lstring {![v.bigint string] !v.location}
        optionDefaultValueKind = @optionDefaultValueEnumAST. unsignedDefaultValue
      end
    end
    ioCommandLineOptionList +=
      !mOptionTypeName
      !mOptionInternalName
      !mOptionInvocationLetter
      !mOptionInvocationString
      !mOptionComment
      !defaultValue
      !optionDefaultValueKind
  }

  //······························································································
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! ENTER IN GRAPH
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionComponentDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! ENTER IN CONTEXT
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionComponentDeclarationAST enterDeclarationInSemanticContext
  ?!@equatableExtensionMap unused ioEquatableExtensionMap
  ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext ioSemanticContext
{
  var @commandLineOptionMap boolOptionMap = @()
  var @commandLineOptionMap uintOptionMap = @()
  var @commandLineOptionMap stringOptionMap = @()
  var @commandLineOptionMap stringListOptionMap = @()
  var optionNameSet = @stringset.emptySet
  for (mOptionTypeName mOptionInternalName mOptionInvocationLetter mOptionInvocationString mOptionComment mOptionDefaultValue mOptionDefaultValueKind) in self.mOptions do
    if [optionNameSet hasKey !mOptionInternalName.string] then
      error mOptionInternalName: "the '" + mOptionInternalName.string + "' command line option has been already declared"
    elsif mOptionTypeName.string == "bool" then
      [!?boolOptionMap insertKey
        !mOptionInternalName
        !mOptionInvocationLetter.char
        !mOptionInvocationString.string
        !mOptionComment.string
        !"false"
      ]
      if mOptionDefaultValueKind != @optionDefaultValueEnumAST. noDefaultValue then
        error mOptionDefaultValue:"an @bool option cannot have a default value (default value is always false)"
      end
    elsif mOptionTypeName.string == "uint" then
      [!?uintOptionMap insertKey
        !mOptionInternalName
        !mOptionInvocationLetter.char
        !mOptionInvocationString.string
        !mOptionComment.string
        !if mOptionDefaultValue.string == "" then "0" else mOptionDefaultValue.string end
      ]
      if mOptionDefaultValueKind == @optionDefaultValueEnumAST. stringDefaultValue then
        error mOptionDefaultValue:"an @uint option default value cannot be an @string value"
      end
    elsif mOptionTypeName.string == "string" then
      [!?stringOptionMap insertKey
        !mOptionInternalName
        !mOptionInvocationLetter.char
        !mOptionInvocationString.string
        !mOptionComment.string
        !mOptionDefaultValue.string
      ]
      if mOptionDefaultValueKind == @optionDefaultValueEnumAST. unsignedDefaultValue then
        error mOptionDefaultValue:"an @string option default value cannot be an @uint value"
      end
    elsif mOptionTypeName.string == "stringlist" then
      [!?stringListOptionMap insertKey
        !mOptionInternalName
        !mOptionInvocationLetter.char
        !mOptionInvocationString.string
        !mOptionComment.string
        !mOptionDefaultValue.string
      ]
      if mOptionDefaultValueKind != .noDefaultValue then
        error mOptionDefaultValue:"an @stringlist option cannot accept default value"
      end
    else
      error mOptionTypeName: "only the @bool, @uint or @string types are allowed here"
    end
    optionNameSet += !mOptionInternalName.string
  end
//--- Insert option
  [!?ioSemanticContext.mOptionComponentMapForSemanticAnalysis insertKey
    !self.mOptionComponentName
    !self.isPredefined
    !boolOptionMap
    !uintOptionMap
    !stringOptionMap
    !stringListOptionMap
  ]
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTIC ANALYSIS
//————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionComponentDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
//--- Useful entities graph
  let nameForUsefulness = optionNameForUsefulEntitiesGraph (!self.mOptionComponentName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
//---
  [inSemanticContext.mOptionComponentMapForSemanticAnalysis searchKey
    !self.mOptionComponentName
    ?let @bool optionIsPredefined
    ?let @commandLineOptionMap boolOptionMap
    ?let @commandLineOptionMap uintOptionMap
    ?let @commandLineOptionMap stringOptionMap
    ?let @commandLineOptionMap stringListOptionMap
  ]
//--- Sort options
  var @commandLineOptionSortedList boolOptionSortedList = @()
  for anOption in boolOptionMap do
    boolOptionSortedList +=
      !anOption.lkey.string
      !anOption.mOptionChar
      !anOption.mOptionString
      !anOption.mComment
      !anOption.mDefaultValue
  end
  var @commandLineOptionSortedList uintOptionSortedList = @()
  for anOption in uintOptionMap do
    uintOptionSortedList +=
      !anOption.lkey.string
      !anOption.mOptionChar
      !anOption.mOptionString
      !anOption.mComment
      !anOption.mDefaultValue
  end
  var @commandLineOptionSortedList stringOptionSortedList = @()
  for anOption in stringOptionMap do
    stringOptionSortedList +=
      !anOption.lkey.string
      !anOption.mOptionChar
      !anOption.mOptionString
      !anOption.mComment
      !anOption.mDefaultValue
  end
  var @commandLineOptionSortedList stringListOptionSortedList = @()
  for anOption in stringListOptionMap do
    stringListOptionSortedList +=
      !anOption.lkey.string
      !anOption.mOptionChar
      !anOption.mOptionString
      !anOption.mComment
      !anOption.mDefaultValue
  end
//--- Enter filewrapper in generated list
  ioSemanticDeclarationListForGeneration +=
    !infoMessage: "option " + self.mOptionComponentName
    !@optionComponentForGeneration {
      !generateHeader: true # Generate Cpp header file
      !implementationCppFileName: "option-" + [self.mOptionComponentName fileNameRepresentation]
      !optionIsPredefined
      !self.mOptionComponentName.string
      !boolOptionSortedList
      !uintOptionSortedList
      !stringOptionSortedList
      !stringListOptionSortedList
    }
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

class @optionComponentForGeneration : @semanticDeclarationWithHeaderForGeneration {
  public let @bool mIsPredefined
  public let @string mOptionComponentName
  public let @commandLineOptionSortedList mBoolOptionSortedList
  public let @commandLineOptionSortedList mUIntOptionSortedList
  public let @commandLineOptionSortedList mStringOptionSortedList
  public let @commandLineOptionSortedList mStringListSortedList
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @optionComponentForGeneration isPredefined -> @bool {
  result = self.mIsPredefined
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @optionComponentForGeneration headerKind -> @headerKind {
  result = if self.mIsPredefined then .noHeader else .oneHeader end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionComponentForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  if self.mIsPredefined then
    outHeader = ""
  else
    outHeader = [filewrapper optionGenerationTemplates.optionHeaderZone3
      !self.mOptionComponentName
      !self.mBoolOptionSortedList
      !self.mUIntOptionSortedList
      !self.mStringOptionSortedList
      !self.mStringListSortedList
    ]
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionComponentForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  if self.mIsPredefined then
    outImplementation = ""
  else
    ioInclusionSet += !"option-" + [self.mOptionComponentName fileNameRepresentation]
    outImplementation = [filewrapper optionGenerationTemplates.optionImplementationGalgas3
      !self.mOptionComponentName
      !self.mBoolOptionSortedList
      !self.mUIntOptionSortedList
      !self.mStringOptionSortedList
      !self.mStringListSortedList
    ]
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override method @optionComponentForGeneration appendSpecificFiles
  ?let @string inProductDirectory
  ?!@stringset ioAllProductFileSet
  ?!@stringlist ioCocoaProductFileList
{
//--- Generate Cocoa header
  if @uint.errorCount == 0 && not self.mIsPredefined then
    ioAllProductFileSet += !"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.h"
    [@string generateFileWithPattern
      !startPath:inProductDirectory
      !fileName:"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.h"
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper optionGenerationTemplates.optionHeaderCocoaZone2
        !self.mOptionComponentName
      ]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:[filewrapper optionGenerationTemplates.optionHeaderCocoaZone3
        !self.mOptionComponentName
      ]
      !makeExecutable:false
    ]
  //--- Generate Cocoa Implementation
    ioAllProductFileSet += !"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.m"
    ioCocoaProductFileList += !"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.m"
    [@string generateFileWithPattern
      !startPath:inProductDirectory
      !fileName:"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.m"
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper optionGenerationTemplates.optionImplementationCocoa
        !"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa"
        !self.mOptionComponentName
        !self.mBoolOptionSortedList
        !self.mUIntOptionSortedList
        !self.mStringOptionSortedList
        !self.mStringListSortedList
      ]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:"\n\n" # User Zone 3
      !makeExecutable:false
    ]
  //--- Generate Swift Cocoa Implementation
    ioAllProductFileSet += !"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.swift"
    ioCocoaProductFileList += !"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.swift"
    [@string generateFileWithPattern
      !startPath:inProductDirectory
      !fileName:"option-" + [self.mOptionComponentName fileNameRepresentation] + "-cocoa.swift"
      !lineComment:"//"
      !header:"" # Header
      !defaultUserZone1:"\n\n" # Defaut user zone1
      !generatedZone2:[filewrapper optionGenerationTemplates.optionImplementationSwiftCocoa
        !"option-" + [self.mOptionComponentName fileNameRepresentation] + "-swift-cocoa"
        !self.mOptionComponentName
        !self.mBoolOptionSortedList
        !self.mUIntOptionSortedList
        !self.mStringOptionSortedList
        !self.mStringListSortedList
      ]
      !defaultUserZone2:"\n\n" # Defaut user zone2
      !generatedZone3:"\n\n" # User Zone 3
      !makeExecutable:false
    ]
 end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

map @commandLineOptionMap { # the key is the option identifier
  public let @char mOptionChar
  public let @string mOptionString
  public let @string mComment
  public let @string mDefaultValue
  insert insertKey error message "the '%K' command line option has been already declared in %L"
  search searchKey error message "the '%K' command line option is not declared"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

sortedlist @commandLineOptionSortedList {
  public let @string mOptionIdentifier
  public let @char mOptionChar
  public let @string mOptionString
  public let @string mComment
  public let @string mDefaultValue
}{
  mComment <
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#         G E N E R A T I O N    T E M P L A T E S
//————————————————————————————————————————————————————————————————————————————————————————————————

filewrapper optionGenerationTemplates in "+generation-templates/option_generation" {
}{
}{
  template optionHeaderZone3 "option-header-zone3.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionSortedList BOOL_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList UINT_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_LIST_OPTION_SORTED_LIST

  template optionImplementationGalgas3 "option-implementation-galgas3.cpp.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionSortedList BOOL_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList UINT_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_LIST_OPTION_SORTED_LIST

  template optionHeaderCocoaZone2 "option-header-cocoa-zone2.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME

  template optionHeaderCocoaZone3 "option-header-cocoa-zone3.galgasTemplate"
    ?@string OPTION_COMPONENT_NAME

  template optionImplementationCocoa "option-implementation-cocoa.galgasTemplate"
    ?@string OPTION_HEADER_FILE_NAME
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionSortedList BOOL_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList UINT_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_LIST_OPTION_SORTED_LIST

  template optionImplementationSwiftCocoa "option-implementation-swift-cocoa.galgasTemplate"
    ?@string OPTION_HEADER_FILE_NAME
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionSortedList BOOL_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList UINT_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_OPTION_SORTED_LIST
    ?@commandLineOptionSortedList STRING_LIST_OPTION_SORTED_LIST
}

//————————————————————————————————————————————————————————————————————————————————————————————————

