#---------------------------------------------------------------------------*
#                                                                           *
#  Copyright (C) 2007, ..., 2014 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*



#---------------------------------------------------------------------------*
#         G E N E R A T I O N    T E M P L A T E S                          *
#---------------------------------------------------------------------------*

filewrapper optionGenerationTemplates in "../generation_templates/option_generation" {
}{
}{
  template optionHeaderZone2 "option-header-zone2.gTemplate"
    ?@string OPTION_COMPONENT_NAME
  template optionHeaderZone3 "option-header-zone3.gTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
  template optionImplementation "option-implementation.gTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
  template optionImplementationGalgas3 "option-implementation-galgas3.cpp.gTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
  template optionHeaderCocoaZone2 "option-header-cocoa-zone2.gTemplate"
    ?@string OPTION_COMPONENT_NAME
  template optionHeaderCocoaZone3 "option-header-cocoa-zone3.gTemplate"
    ?@string OPTION_COMPONENT_NAME
  template optionImplementationCocoa "option-implementation-cocoa.gTemplate"
    ?@string OPTION_HEADER_FILE_NAME
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
}

#---------------------------------------------------------------------------*
#                  semanticAnalysisOfOptionComponent                        *
#---------------------------------------------------------------------------*

proc semanticAnalysisOfOptionComponent
  ?let @optionComponentAST inOptionComponentRoot
  !@commandLineOptionMap outBoolOptionMap
  !@commandLineOptionMap outUIntOptionMap
  !@commandLineOptionMap outStringOptionMap {
  outBoolOptionMap = @commandLineOptionMap. emptyMap
  outUIntOptionMap = @commandLineOptionMap. emptyMap
  outStringOptionMap = @commandLineOptionMap. emptyMap
  var optionNameSet =@stringset.emptySet{}
  for () in  [inOptionComponentRoot mOptions] do
    if [optionNameSet hasKey ![mOptionInternalName string]] then
      error mOptionInternalName: "the '" + [mOptionInternalName string] + "' command line option has been already declared"
    elsif [mOptionTypeName string] == "bool" then
      [!?outBoolOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        !"false"
      ]
      if mOptionDefaultValueKind != @optionDefaultValueEnumAST. noDefaultValue then
        error mOptionDefaultValue:"an @bool option cannot have a default value (default value is allways false)"      
      end
    elsif [mOptionTypeName string] == "uint" then
      [!?outUIntOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        !if [mOptionDefaultValue string] == "" then "0" else [mOptionDefaultValue string] end
      ]
      if mOptionDefaultValueKind == @optionDefaultValueEnumAST. stringDefaultValue then
        error mOptionDefaultValue:"an @uint option default value cannot be an @string value"      
      end
    elsif [mOptionTypeName string] == "string" then
      [!?outStringOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        ![mOptionDefaultValue string]
      ]
      if mOptionDefaultValueKind == @optionDefaultValueEnumAST. unsignedDefaultValue then
        error mOptionDefaultValue:"an @string option default value cannot be an @uint value"      
      end
    else
      error mOptionTypeName: "only the @bool, @uint or @string types are allowed here"
    end
    optionNameSet += ![mOptionInternalName string]
  end
}

#---------------------------------------------------------------------------*
#                         parseOptionComponent                              *
#---------------------------------------------------------------------------*

proc parseOptionComponent
  ?let @lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@lstring outOptionComponentName
  !@commandLineOptionMap outBoolOptionMap
  !@commandLineOptionMap outUIntOptionMap
  !@commandLineOptionMap outStringOptionMap {
  outOptionComponentName = @lstring. new { ![[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension] ![inSourceFile location]}
  if [[ioParsedComponentStruct mParsedOptionComponentMap] hasKey ! [outOptionComponentName string]] then
    [ioParsedComponentStruct.mParsedOptionComponentMap searchKey !outOptionComponentName ?outBoolOptionMap ?outUIntOptionMap ?outStringOptionMap]
  else
    grammar optionLL1grammar in inSourceFile ?var @optionComponentAST optionComponentAST
  #--- Check component name
    @lstring componentName = [optionComponentAST mOptionComponentName]
    @string basename = [[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension]
    if [componentName string] != basename then
      warning componentName: "GALGAS checks "
        "the component name ('" + [componentName string]
      + "') against the source file base name ('" + basename + "'): they should be the same"
    end 
  #--- Check component name
    @string baseName = [[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension]
    if [[optionComponentAST mOptionComponentName] string] != baseName then
      error [optionComponentAST mOptionComponentName]: "the component name is '"
      + [optionComponentAST mOptionComponentName] + "' should be the file base name '"
      + baseName + "'"
    end
  #--- Semantic Analysis of option component
    semanticAnalysisOfOptionComponent (
      !optionComponentAST
      ?outBoolOptionMap
      ?outUIntOptionMap
      ?outStringOptionMap
    )
  #--- Enter option component in parsed option component map
    [!?ioParsedComponentStruct.mParsedOptionComponentMap insertKey !outOptionComponentName !outBoolOptionMap !outUIntOptionMap !outStringOptionMap]
  end
}

#---------------------------------------------------------------------------*

proc compileOptionComponentAST
  ?let @string inOutputDirectory
  ?let @lstring inOptionComponentName
  ?let @commandLineOptionMap boolOptionMap
  ?let @commandLineOptionMap uintOptionMap
  ?let @commandLineOptionMap stringOptionMap {
#--- Generate header
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !inOutputDirectory
      ![inOptionComponentName string] + ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionHeaderZone2
        ![inOptionComponentName string]
      ]
      !"\n\n" # Defaut user zone2
      ![filewrapper optionGenerationTemplates.optionHeaderZone3
        ![inOptionComponentName string]
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
      ] + "\n#endif\n"
    ]
  end
#--- Generate Implementation
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !inOutputDirectory
      ![inOptionComponentName string] + ".cpp"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionImplementation
        ![inOptionComponentName string]
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
      ]
      !"\n\n" # Defaut user zone2
      !"\n\n" # User Zone 3
    ]
 end
#--- Generate Cocoa header
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !inOutputDirectory
      ![inOptionComponentName string] + "-cocoa.h"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionHeaderCocoaZone2
        ![inOptionComponentName string]
      ]
      !"\n\n" # Defaut user zone2
      ![filewrapper optionGenerationTemplates.optionHeaderCocoaZone3
        ![inOptionComponentName string]
      ]
    ]
  end
#--- Generate Cocoa Implementation
  if @uint. errorCount == 0 then
    [@string generateFileWithPattern
      !inOutputDirectory
      ![inOptionComponentName string] + "-cocoa.m"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionImplementationCocoa
        !inOptionComponentName.string + "-cocoa"
        !inOptionComponentName.string
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
      ]
      !"\n\n" # Defaut user zone2
      !"\n\n" # User Zone 3
    ]
 end
}

#---------------------------------------------------------------------------*

proc compileOptionComponentFromSourceFile
  ?let @lstring inSourceFile
  ?let @string inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct {
#--- Parse option component
  @commandLineOptionMap boolOptionMap
  @commandLineOptionMap uintOptionMap
  @commandLineOptionMap stringOptionMap
  @lstring optionComponentName
  parseOptionComponent (
    !inSourceFile
    !?ioParsedComponentStruct
    ?optionComponentName
    ?boolOptionMap
    ?uintOptionMap
    ?stringOptionMap
  )
#---
  compileOptionComponentAST (
    !inOutputDirectory
    !optionComponentName
    !boolOptionMap
    !uintOptionMap
    !stringOptionMap
  )
}

#---------------------------------------------------------------------------*

