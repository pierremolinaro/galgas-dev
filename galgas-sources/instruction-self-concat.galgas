#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

shared class @selfPlusEqualElementsInstructionAST : @semanticInstructionAST {
  @actualOutputExpressionList mExpressions
}

#·····················································································································*

shared class @selfPlusEqualExpressionInstructionAST : @semanticInstructionAST {
  @semanticExpressionAST mExpression
}

#·····················································································································*

shared class @selfMinusEqualExpressionInstructionAST : @semanticInstructionAST {
  @semanticExpressionAST mExpression
}

#·····················································································································*

shared class @selfMulEqualExpressionInstructionAST : @semanticInstructionAST {
  @semanticExpressionAST mExpression
}

#·····················································································································*

shared class @selfDivEqualExpressionInstructionAST : @semanticInstructionAST {
  @semanticExpressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $+=$
    <non_empty_output_expression_list> ?let @actualOutputExpressionList expressionList
    outInstruction = @selfPlusEqualElementsInstructionAST.new {
      !instructionLocation
      !expressionList
    }
  }
  
  #·····················································································································
  
  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $+=$
    <expression> ?let @semanticExpressionAST expression
    outInstruction = @selfPlusEqualExpressionInstructionAST.new {
      !instructionLocation
      !expression
    }
  }  

  #·····················································································································
  
  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $-=$
    <expression> ?let @semanticExpressionAST expression
    outInstruction = @selfMinusEqualExpressionInstructionAST.new {
      !instructionLocation
      !expression
    }
  }  

  #·····················································································································
  
  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $*=$
    <expression> ?let @semanticExpressionAST expression
    outInstruction = @selfMulEqualExpressionInstructionAST.new {
      !instructionLocation
      !expression
    }
  }  

  #·····················································································································
  
  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $self$
    let instructionLocation = @location.here
    $/=$
    <expression> ?let @semanticExpressionAST expression
    outInstruction = @selfDivEqualExpressionInstructionAST.new {
      !instructionLocation
      !expression
    }
  }  

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfPlusEqualExpressionInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfMinusEqualExpressionInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfMulEqualExpressionInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfDivEqualExpressionInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································*

override method @selfPlusEqualElementsInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mExpressions enterInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @selfPlusEqualElementsInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap {
#--- Analyze "self", as receiver expression
  @unifiedTypeMap-proxy selfTypeProxy
  @string selfObjectCppName
  if [inAnalysisContext.mSelfTypeProxy isNull] then
    error self.mInstructionLocation: "'self' can be used only in extension setters" : selfObjectCppName, selfTypeProxy
  else
    selfObjectCppName = inAnalysisContext.mSelfObjectCppName
    selfTypeProxy = inAnalysisContext.mSelfTypeProxy
  end
#--- Check target variable type support '+=' operator
  let addAssignOperatorArguments= [selfTypeProxy mAddAssignOperatorArguments] # Empty list if += operator is not supported
  if [addAssignOperatorArguments length] == 0 then
    error self.mInstructionLocation
    :"the target object has the '@" + [selfTypeProxy key] + "' type, but this type does not support the '+=' operator"
#--- Analyze source expressions
  elsif [self.mExpressions length] != [addAssignOperatorArguments length] then
    error self.mInstructionLocation
    : "calling the '+=' operator on an '@" + [selfTypeProxy key] + "' object requires "
    + [[addAssignOperatorArguments length] string] + " parameter(s), while this invocation has "
    + [[self.mExpressions length] string] + " parameter(s)"
  else
    var effectiveParameterList =@semanticExpressionListForGeneration {}
    for () in self.mExpressions, () in addAssignOperatorArguments do
      [mExpression analyzeSemanticExpression
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !mFormalArgumentType
        !inAnalysisContext
        !?ioVariableMap
        ?@semanticExpressionForGeneration expression
      ]
      if mFormalSelector.string != mActualSelector.string then
        error mActualSelector
          : "the selector should be '!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end + "'"
      end
      checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType ![expression mResultType] !mEndOfExpressionLocation !?expression)
      effectiveParameterList += !expression
    end
  #--- Generate instruction
    ioInstructionListForGeneration += !@plusEqualnstructionForGeneration.new {
      !selfObjectCppName
      !selfTypeProxy
      !""
      !self.mInstructionLocation
      !@lstringlist.emptyList
      !effectiveParameterList}
  end
}

#·····················································································································*

override method @selfPlusEqualExpressionInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap {
#--- Analyze "self", as receiver expression
  @unifiedTypeMap-proxy selfTypeProxy
  @string selfObjectCppName
  if [inAnalysisContext.mSelfTypeProxy isNull] then
    error self.mInstructionLocation: "'self' can be used only in extension setters" : selfObjectCppName, selfTypeProxy
  else
    selfObjectCppName = inAnalysisContext.mSelfObjectCppName
    selfTypeProxy = inAnalysisContext.mSelfTypeProxy
  end
#--- Check target variable type support '+= exp' operator
  if not [[selfTypeProxy mHandledOperatorFlags] plusEqualOperatorWithExpression] then
    error self.mInstructionLocation
    :"the target object has the '@" + [selfTypeProxy key] + "' type, but this type does not support the '+=' operator"
  end
#--- Analyze source expression
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !selfTypeProxy
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!selfTypeProxy ![expression mResultType] !self.mInstructionLocation !?expression)
#--- Generate instruction
  ioInstructionListForGeneration += !@opEqualInstructionForGeneration.new {
    !self.mInstructionLocation
    !selfTypeProxy
    !selfObjectCppName
    !""
    !{}
    !expression
    !"plusAssign_operation"
  }
}

#·····················································································································*

override method @selfMinusEqualExpressionInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap {
#--- Analyze "self", as receiver expression
  @unifiedTypeMap-proxy selfTypeProxy
  @string selfObjectCppName
  if [inAnalysisContext.mSelfTypeProxy isNull] then
    error self.mInstructionLocation: "'self' can be used only in extension setters" : selfObjectCppName, selfTypeProxy
  else
    selfObjectCppName = inAnalysisContext.mSelfObjectCppName
    selfTypeProxy = inAnalysisContext.mSelfTypeProxy
  end
#--- Check target variable type support '-= exp' operator
  if not [[selfTypeProxy mHandledOperatorFlags] minusEqualOperatorWithExpression] then
    error self.mInstructionLocation
    :"the target object has the '@" + [selfTypeProxy key] + "' type, but this type does not support the '-=' operator"
  end
#--- Analyze source expression
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !selfTypeProxy
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!selfTypeProxy ![expression mResultType] !self.mInstructionLocation !?expression)
#--- Generate instruction
  ioInstructionListForGeneration += !@opEqualInstructionForGeneration.new {
    !self.mInstructionLocation
    !selfTypeProxy
    !selfObjectCppName
    !""
    !{}
    !expression
    !"minusAssign_operation"
  }
}

#·····················································································································*

override method @selfMulEqualExpressionInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap {
#--- Analyze "self", as receiver expression
  @unifiedTypeMap-proxy selfTypeProxy
  @string selfObjectCppName
  if [inAnalysisContext.mSelfTypeProxy isNull] then
    error self.mInstructionLocation: "'self' can be used only in extension setters" : selfObjectCppName, selfTypeProxy
  else
    selfObjectCppName = inAnalysisContext.mSelfObjectCppName
    selfTypeProxy = inAnalysisContext.mSelfTypeProxy
  end
#--- Check target variable type support '*= exp' operator
  if [[selfTypeProxy mHandledOperatorFlags] mulEqualOperatorWithExpression] then
    error self.mInstructionLocation
    :"the target object has the '@" + [selfTypeProxy key] + "' type, but this type does not support the '*=' operator"
  end
#--- Analyze source expression
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !selfTypeProxy
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!selfTypeProxy ![expression mResultType] !self.mInstructionLocation !?expression)
#--- Generate instruction
  ioInstructionListForGeneration += !@opEqualInstructionForGeneration.new {
    !self.mInstructionLocation
    !selfTypeProxy
    !selfObjectCppName
    !""
    !{}
    !expression
    !"mulAssign_operation"
  }
}

#·····················································································································*

override method @selfDivEqualExpressionInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap {
#--- Analyze "self", as receiver expression
  @unifiedTypeMap-proxy selfTypeProxy
  @string selfObjectCppName
  if [inAnalysisContext.mSelfTypeProxy isNull] then
    error self.mInstructionLocation: "'self' can be used only in extension setters" : selfObjectCppName, selfTypeProxy
  else
    selfObjectCppName = inAnalysisContext.mSelfObjectCppName
    selfTypeProxy = inAnalysisContext.mSelfTypeProxy
  end
#--- Check target variable type support '/= exp' operator
  if [[selfTypeProxy mHandledOperatorFlags] divEqualOperatorWithExpression] then
    error self.mInstructionLocation
    :"the target object has the '@" + [selfTypeProxy key] + "' type, but this type does not support the '/=' operator"
  end
#--- Analyze source expression
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !selfTypeProxy
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!selfTypeProxy ![expression mResultType] !self.mInstructionLocation !?expression)
#--- Generate instruction
  ioInstructionListForGeneration += !@opEqualInstructionForGeneration.new {
    !self.mInstructionLocation
    !selfTypeProxy
    !selfObjectCppName
    !""
    !{}
    !expression
    !"divAssign_operation"
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
