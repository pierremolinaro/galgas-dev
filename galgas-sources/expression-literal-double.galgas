#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalDoubleExpressionAST : @semanticExpressionAST {
  private let @ldouble mValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·················································································································
  
  rule <primary_ggs3> !@semanticExpressionAST outExpression {
    $double.xxx$ ?let @ldouble literalDouble ?*
    outExpression = @literalDoubleExpressionAST.new {!literalDouble}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $double.xxx$ ?let @ldouble literalDouble ?*
    outExpression = @literalDoubleExpressionAST.new {!literalDouble}
  }

  #·················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @literalDoubleExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @literalDoubleExpressionAST analyzeSemanticExpression
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry unused inType
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@localVarManager unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
  outExpression = @literalDoubleExpressionForGeneration.new {
    !inAnalysisContext.mPredefinedTypes.mDoubleType
    !self.mValue.location
    !self.mValue.double
  }
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @literalDoubleExpressionForGeneration : @semanticExpressionForGeneration {
  private let @double mValue
}

#·····················································································································

override method @literalDoubleExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression {
  outCppExpression = "GALGAS_double (" + [self.mValue string]+ ")"
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
