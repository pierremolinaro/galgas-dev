#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionSetterAST : @semanticDeclarationAST {
  private let @bool requiresSelfForAccessingProperty %selector
  private let @lstring mTypeName
  private let @lstring mExtensionSetterName
  private let @formalParameterListAST mExtensionSetterFormalParameterList
  private let @semanticInstructionListAST mExtensionSetterInstructionList
  private let @location mEndOfSetterDeclarationLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $setter$
    $@type$ ?let @lstring className indexing typeReferenceExtensionSetter
    $identifier$ ?let @lstring setterName indexing extensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfSetterLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionSetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: [option galgas_cli_options.propertyAccessRequiresSelf value]
      !className
      !setterName
      !formalParameterList
      !routineInstructionList
      !endOfSetterLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $mutating$
    $proc$
    $@type$ ?let @lstring className indexing typeReferenceExtensionSetter
    $.$
    $identifier$ ?let @lstring setterName indexing extensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfSetterLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionSetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !className
      !setterName
      !formalParameterList
      !routineInstructionList
      !endOfSetterLocation
    }
  }

 #·····················································································································

  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $mutating$
    $proc$
    $identifier$ ?let @lstring setterName indexing extensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfSetterLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionSetterAST.new {
      !false # Is not predefined
      !requiresSelfForAccessingProperty: true
      !inClassName
      !setterName
      !formalParameterList
      !routineInstructionList
      !endOfSetterLocation
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @extensionSetterAST keyRepresentation -> @string {
  result = "extension setter @" + self.mTypeName + " " + self.mExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   DECLARATION GRAPH                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {
    !"extension setter @" + self.mTypeName + " " + self.mExtensionSetterName
    !self.mExtensionSetterName.location
  }
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mTypeName !self.mTypeName.location}]
#---
  if not [ioExtensionSetterMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionSetterMapForBuildingContext insertKey
      !self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionSetterMapForBuildingContext error message searchKey  do
    [!?mExtensionSetterMapForType insertKey
      !self.mExtensionSetterName
      !self.mExtensionSetterFormalParameterList
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionSetterAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionSetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = setterNameForUsefulEntitiesGraph (!self.mTypeName !self.mExtensionSetterName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [inSemanticContext.mTypeMap searchKey !self.mTypeName]
  let @string selfObjectName
  let @string selfObjectAccessor
  let @bool implementedAsFunction
#--- Check self type is a class
  if [[selfType definition].mTypeKindEnum isClassType] then
    selfObjectName = "object"
    selfObjectAccessor = "object->"
    implementedAsFunction = false
  else
    selfObjectName = "ioObject"
    selfObjectAccessor = "ioObject."
    implementedAsFunction = true
  end
#--- Analyze instruction list
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !selfObjectName
    !selfType: .available {!type:  selfType !mutable: true !mutableproperties: true}
    !selfObjectAccessor
    !requiresSelfForAccessingProperty: self.requiresSelfForAccessingProperty
  }
  analyzeRoutineBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !?ioTypeMap
    !self.mExtensionSetterFormalParameterList
    !nonMutablePropertyList: {}
    !mutablePropertyList: [selfType definition].mAllTypedPropertyList
    !self.mExtensionSetterInstructionList
    !self.mEndOfSetterDeclarationLocation
    ?let semanticInstructionListForGeneration
    ?let formalParameterListForGeneration
  )
#---
  ioSemanticDeclarationListForGeneration +=
    !"extension setter " + self.mExtensionSetterName
    !@extensionSetterForGeneration.new {
      !true # Generate Cpp header file
      !"setter-" + [[selfType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mExtensionSetterName fileNameRepresentation]
      !selfType
      !self.mExtensionSetterName.string
      !implementedAsFunction
      !formalParameterListForGeneration
      ![selfType definition].mAllTypedPropertyList
      !semanticInstructionListForGeneration}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAPS                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioExtensionSetterListMap +=
    !self.mTypeName.string
    !self.mExtensionSetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionSetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string mExtensionSetterName
  private let @bool mImplementedAsFunction
  private let @formalParameterListForGeneration mExtensionSetterFormalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @extensionSetterForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @extensionSetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  if self.mImplementedAsFunction then
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionSetterAsFunctionDeclaration
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionSetterName
      !self.mExtensionSetterFormalParameterList
    ] 
  else
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionSetterDeclaration
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionSetterName
      !self.mExtensionSetterFormalParameterList
    ]
  end
}

#·······················································································································

override method @extensionSetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  for (* * mFormalArgumentType * *) in self.mExtensionSetterFormalParameterList do
    [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
  if self.mImplementedAsFunction then
    var extensionSetterFormalParameterList = self.mExtensionSetterFormalParameterList
    [!?extensionSetterFormalParameterList insertAtIndex
      !["" nowhere]
      !@formalArgumentPassingModeAST. argumentInOut
      !self.mReceiverType
      !@lstring.new {!"self" !@location.here}
      !"ioObject"
      !0
    ]
    ioInclusionSet += !"setter-" + [[self.mReceiverType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mExtensionSetterName fileNameRepresentation]
    generateProcedure (
      !static:false
      !"extensionSetter_" + [self.mExtensionSetterName identifierRepresentation]
      !?ioInclusionSet
      !extensionSetterFormalParameterList
      !self.mSemanticInstructionListForGeneration
      !false # is not const
      !"C_Compiler"
      !true # Generate location Argument
      !false # Do not generate 'resetTemplateString'
      !false # Do not generate syntaxDirectedTranslationString argument
      ?let @string code
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionMethodAsFunctionImplementation
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionSetterName
      !code
    ] 
  else
    var @unifiedTypeMapEntry baseType = self.mReceiverType
    var @bool searching = true
    loop (@uint. max) while searching do
      if not [[baseType definition].mSuperType isNull] then
        if [[[baseType definition].mSuperType definition].mSetterMap hasKey !self.mExtensionSetterName] then
          baseType = [baseType definition].mSuperType
        else
          searching = false
        end
      else
        searching = false
      end  
    end
    ioInclusionSet += !"setter-" + [[baseType definition].mTypeName.string fileNameRepresentation] + "-" + [self.mExtensionSetterName fileNameRepresentation]
    [baseType addHeaderFileName !?ioInclusionSet]
    generateExtensionSetter (
      ![self.mReceiverType definition].mTypeName.string
      !""
      !self.mExtensionSetterName
      !?ioInclusionSet
      !self.mExtensionSetterFormalParameterList
      !self.mSemanticInstructionListForGeneration
      ?let @string setterImplementation
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionsetterImplementation
      ![self.mReceiverType definition].mTypeName.string
      !self.mExtensionSetterName
      !self.mExtensionSetterFormalParameterList
      !setterImplementation
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

