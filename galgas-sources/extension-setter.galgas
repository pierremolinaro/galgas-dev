#----------------------------------------------------------------------------------------------------------------------*
#   AST                                                                                                                *
#----------------------------------------------------------------------------------------------------------------------*

class @extensionSetterAST : @semanticDeclarationAST {
  @lstring mTypeName
  @lstring mExtensionSetterName
  @formalParameterListAST mExtensionSetterFormalParameterList
  @semanticInstructionListAST mExtensionSetterInstructionList
  @location mEndOfSetterDeclarationLocation
}

#----------------------------------------------------------------------------------------------------------------------*
#   SYNTAX                                                                                                             *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $setter$
    $type_name$ ?var  @lstring className indexing typeReferenceExtensionSetter
    $identifier$ ?var  @lstring setterName indexing extensionSetterDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfSetterLocation = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionSetterAST.new {
      !false # Is not predefined
      !className
      !setterName
      !formalParameterList
      !routineInstructionList
      !endOfSetterLocation
    }
  }

  #·····················································································································

}

#----------------------------------------------------------------------------------------------------------------------*
#   KEY REPRESENTATION                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override getter @extensionSetterAST keyRepresentation
  ->@string outString {
  outString = "extension setter @" + mTypeName + " " + mExtensionSetterName
}

#----------------------------------------------------------------------------------------------------------------------*
#   DECLARATION GRAPH                                                                                                  *
#----------------------------------------------------------------------------------------------------------------------*

override method @extensionSetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"extension setter @" + mTypeName + " " + mExtensionSetterName ![mExtensionSetterName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + mTypeName ![mTypeName location]}]
#---
  if not [ioExtensionSetterMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioExtensionSetterMapForBuildingContext insertKey
      !mTypeName
      !@extensionSetterMapForType. emptyMap
    ]
  end
  with mTypeName in !?ioExtensionSetterMapForBuildingContext error message searchKey  do
    [!?mExtensionSetterMapForType insertKey
      !mExtensionSetterName
      !mExtensionSetterFormalParameterList
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC CONTEXT                                                                                                   *
#----------------------------------------------------------------------------------------------------------------------*

override method @extensionSetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC ANALYSIS                                                                                                  *
#----------------------------------------------------------------------------------------------------------------------*

override method @extensionSetterAST semanticAnalysis
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Self type
  let @unifiedTypeMap-proxy selfType = @unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mTypeName}
  @string selfObjectName
  @string selfObjectAccessor
  @bool implementedAsFunction
#--- Check self type is a class
  if [selfType mTypeKindEnum] == @typeKindEnum. classType then
    selfObjectName = "object"
    selfObjectAccessor = "object->"
    implementedAsFunction = false
  else
    selfObjectName = "ioObject"
    selfObjectAccessor = "ioObject."
    implementedAsFunction = true
  end
#--- Analyze instruction list
  var formalParameterListForGeneration =@formalParameterListForGeneration {}
  @semanticInstructionListForGeneration semanticInstructionListForGeneration
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !selfObjectName
    !selfType}
  analyzeRoutineBody (
    !analysisContext
    !mExtensionSetterFormalParameterList
    !@localConstantList.emptyList
    !@typedPropertyList.emptyList
    ![selfType mAllTypedAttributeList]
    !selfObjectAccessor
    !mExtensionSetterInstructionList
    !mEndOfSetterDeclarationLocation
    ?semanticInstructionListForGeneration
    ?formalParameterListForGeneration
  )
#---
  ioSemanticDeclarationListForGeneration +=
    !"extension setter " + mExtensionSetterName
    !@extensionSetterForGeneration.new {
      !true # Generate Cpp header file
      !"setter-" + [selfType key] + "-" + mExtensionSetterName
      !selfType
      ![mExtensionSetterName string]
      !implementedAsFunction
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration}
    !"~"
}

#----------------------------------------------------------------------------------------------------------------------*
#   EXTENSION LIST MAPS                                                                                                *
#----------------------------------------------------------------------------------------------------------------------*

override method @extensionSetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioExtensionSettierListMap +=
    ![mTypeName string]
    !mExtensionSetterName
}

#----------------------------------------------------------------------------------------------------------------------*
#   CODE GENERATION                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

class @extensionSetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  @unifiedTypeMap-proxy mReceiverType
  @string mExtensionSetterName
  @bool mImplementedAsFunction
  @formalParameterListForGeneration mExtensionSetterFormalParameterList
  @typedPropertyList mTypedAttributeList
  @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @extensionSetterForGeneration headerKind ->@headerKind outResult {
  outResult = @headerKind.oneHeader
}

#·······················································································································

override method @extensionSetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  if mImplementedAsFunction then
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionSetterAsFunctionDeclaration
      ![mReceiverType key]
      !mExtensionSetterName
      !mExtensionSetterFormalParameterList
    ] 
  else
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionSetterDeclaration
      ![mReceiverType key]
      !mExtensionSetterName
      !mExtensionSetterFormalParameterList
    ]
  end
}

#·······················································································································

override method @extensionSetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  if mImplementedAsFunction then
    var extensionSetterFormalParameterList = mExtensionSetterFormalParameterList
    [!?extensionSetterFormalParameterList insertAtIndex
      !["" nowhere]
      !@formalArgumentPassingModeAST. argumentInOut
      !mReceiverType
      !@lstring.new {!"self" !@location.here}
      !"ioObject"
      !0
    ]
    ioInclusionSet += !"setter-" + [mReceiverType key] + "-" + mExtensionSetterName
    generateProcedure (
      !static:false
      !"extensionSetter_" + [mExtensionSetterName identifierRepresentation]
      !?ioInclusionSet
      !extensionSetterFormalParameterList
      !mSemanticInstructionListForGeneration
      !false # is not const
      !"C_Compiler"
      !true # Generate location Argument
      !false # Do not generate 'resetTemplateString'
      !false # Do not generate syntaxDirectedTranslationString argument
      ?let @string code
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionMethodAsFunctionImplementation
      ![mReceiverType key]
      !mExtensionSetterName
      !code
    ] 
  else
    @unifiedTypeMap-proxy baseType = mReceiverType
    @bool searching = true
    loop( @uint. max) while searching do
      if not [[baseType mSuperType] isNull] then
        if [[[baseType mSuperType] mSetterMap] hasKey !mExtensionSetterName] then
          baseType = [baseType mSuperType]
        else
          searching = false
        end
      else
        searching = false
      end  
    end
    ioInclusionSet += !"setter-" + [baseType key]+ "-" + mExtensionSetterName
    [baseType addHeaderFileName !?ioInclusionSet]
    generateExtensionSetter (
      ![mReceiverType key]
      !""
      !mExtensionSetterName
      !?ioInclusionSet
      !mExtensionSetterFormalParameterList
      !mSemanticInstructionListForGeneration
      ?let @string setterImplementation
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionsetterImplementation
      ![mReceiverType key]
      !mExtensionSetterName
      !mExtensionSetterFormalParameterList
      !setterImplementation
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

