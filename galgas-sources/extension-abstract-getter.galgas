#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @abstractExtensionGetterAST : @semanticDeclarationAST {
  private let @lstring mTypeName
  private let @lstring mAbstractExtensionGetterName
  private let @formalInputParameterListAST mAbstractExtensionGetterFormalInputParameterList
  private let @lstring mAbstractExtensionGetterReturnedTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $getter$
    $@type$ ?let className indexing typeReferenceAbstractExtensionGetter
    $identifier$ ?let mGetterName indexing abstractExtensionGetterDefinition
    <formal_input_parameter_list> ?let @formalInputParameterListAST mFormalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    select
    or
      $identifier$ ? let idf
      warning idf : "an identifier is no longer required here" fixit { remove }
    end
    ioDeclarations.mDeclarationList += !@abstractExtensionGetterAST.new {
      !false # Is not predefined
      !className
      !mGetterName
      !mFormalInputParameterList
      !mReturnedTypeName
    }
  }

  #·····················································································································

  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $getter$
    $identifier$ ?let mGetterName indexing abstractExtensionGetterDefinition
    <formal_input_parameter_list> ?let @formalInputParameterListAST mFormalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    select
    or
      $identifier$ ? let idf
      warning idf : "an identifier is no longer required here" fixit { remove }
    end
    ioDeclarations.mDeclarationList += !@abstractExtensionGetterAST.new {
      !false # Is not predefined
      !inClassName
      !mGetterName
      !mFormalInputParameterList
      !mReturnedTypeName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $func$
    $@type$ ?let className indexing typeReferenceAbstractExtensionGetter
    $.$
    $identifier$ ?let mGetterName indexing abstractExtensionGetterDefinition
    <formal_input_parameter_list> ?let @formalInputParameterListAST mFormalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    select
    or
      $identifier$ ? let idf
      warning idf : "an identifier is no longer required here" fixit { remove }
    end
    ioDeclarations.mDeclarationList += !@abstractExtensionGetterAST.new {
      !false # Is not predefined
      !className
      !mGetterName
      !mFormalInputParameterList
      !mReturnedTypeName
    }
  }

  #·····················································································································

  rule <method_declaration> ?let @lstring inClassName ?!@galgasDeclarationAST ioDeclarations {
    $abstract$
    $func$
    $identifier$ ?let mGetterName indexing abstractExtensionGetterDefinition
    <formal_input_parameter_list> ?let @formalInputParameterListAST mFormalInputParameterList
    $->$
    $@type$ ?let @lstring mReturnedTypeName
    select
    or
      $identifier$ ? let idf
      warning idf : "an identifier is no longer required here" fixit { remove }
    end
    ioDeclarations.mDeclarationList += !@abstractExtensionGetterAST.new {
      !false # Is not predefined
      !inClassName
      !mGetterName
      !mFormalInputParameterList
      !mReturnedTypeName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @abstractExtensionGetterAST keyRepresentation -> @string {
  result = "abstract extension getter @" + self.mTypeName + " " + self.mAbstractExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {
    !"extension getter @" + self.mTypeName + " " + self.mAbstractExtensionGetterName
    !self.mAbstractExtensionGetterName.location
  }
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mTypeName !self.mTypeName.location}]
#---
  if not [ioExtensionGetterMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionGetterMapForBuildingContext insertKey
      !self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionGetterMapForBuildingContext error message searchKey  do
    [!?mExtensionGetterMapForType insertKey
      !self.mAbstractExtensionGetterName
      !self.mAbstractExtensionGetterReturnedTypeName
      !self.mAbstractExtensionGetterFormalInputParameterList
      !.isVirtualAbstract
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap searchKey !self.mTypeName]
#--- Check self type is an abstract class
  if not [[selfType definition].mTypeKindEnum isClassType] then
    error self.mAbstractExtensionGetterName
      : "cannot declare an extension getter: '@" + [selfType definition].mTypeName.string + "' is not a class"
  elsif [selfType definition].mIsConcrete then
    error self.mAbstractExtensionGetterName
      : "cannot declare an abstract extension getter: '@" + [selfType definition].mTypeName.string + "' is not an abstract class"
  end
#--- Compute method signature
  var @formalInputParameterListForGeneration formalParameterListForGeneration = {}
  for (mFormalSelector mFormalArgumentTypeName mFormalArgumentName * mIsConstant) in self.mAbstractExtensionGetterFormalInputParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      ![ioTypeMap searchKey !mFormalArgumentTypeName]
      !mFormalArgumentName.string
      !mFormalArgumentName
      !mIsConstant
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"abstract extension getter " + self.mAbstractExtensionGetterName
    !@abstractExtensionGetterForGeneration.new {
      !true # Generate Cpp header file
      !"getter-" + [self.mTypeName fileNameRepresentation] + "-" + [self.mAbstractExtensionGetterName fileNameRepresentation]
      !selfType
      !self.mAbstractExtensionGetterName.string
      ![ioTypeMap searchKey !self.mAbstractExtensionGetterReturnedTypeName]
      !formalParameterListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                                                                                                 
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioAbstractExtensionGetterListMap += !self.mTypeName.string !self.mAbstractExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @abstractExtensionGetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string mAbstractExtensionGetterName
  private let @unifiedTypeMapEntry mResultType
  private let @formalInputParameterListForGeneration mAbstractExtensionGetterFormalParameterList
}

#·······················································································································

override getter @abstractExtensionGetterForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @abstractExtensionGetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  outHeader = [filewrapper semanticComponentGenerationTemplate.abstractExtensionGetterDeclaration
    ![self.mReceiverType definition].mTypeName.string
    !self.mAbstractExtensionGetterName
    !self.mAbstractExtensionGetterFormalParameterList
    !self.mResultType
  ] 
}

#·······················································································································

override method @abstractExtensionGetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  ioInclusionSet += !"getter-"
    + [[self.mReceiverType definition].mTypeName.string fileNameRepresentation]
    + "-" + [self.mAbstractExtensionGetterName fileNameRepresentation]
  [self.mResultType addHeaderFileName !?ioInclusionSet]
  [self.mReceiverType addHeaderFileName !?ioInclusionSet]
  for (* mFormalArgumentType * * *) in self.mAbstractExtensionGetterFormalParameterList do
    [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
  outImplementation = [filewrapper semanticComponentGenerationTemplate.abstractExtensionGetterImplementation
    ![self.mReceiverType definition].mTypeName.string
    !self.mAbstractExtensionGetterName
    !self.mAbstractExtensionGetterFormalParameterList
    !self.mResultType
  ] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

