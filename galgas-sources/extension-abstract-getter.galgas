#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                                                                                                *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @abstractExtensionGetterAST : @semanticDeclarationAST {
  @lstring mTypeName
  @lstring mAbstractExtensionGetterName
  @formalInputParameterListAST mAbstractExtensionGetterFormalInputParameterList
  @lstring mAbstractExtensionGetterReturnedTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                                                                                             *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $abstract$
    $getter$
    $@type$ ?let className indexing typeReferenceAbstractExtensionGetter
    $identifier$ ?let mGetterName indexing abstractExtensionGetterDefinition
    <formal_input_parameter_list> ?let @formalInputParameterListAST mFormalInputParameterList
    $->$
    $@type$ ?var  @lstring mReturnedTypeName
    select
    or
      $identifier$ ? let idf
      warning idf : "an identifier is no longer required here" fixit { remove }
    end
    ioDeclarations.mDeclarationList += !@abstractExtensionGetterAST.new {
      !false # Is not predefined
      !className
      !mGetterName
      !mFormalInputParameterList
      !mReturnedTypeName
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @abstractExtensionGetterAST keyRepresentation
  ->@string outString {
  outString = "abstract extension getter @" + mTypeName + " " + mAbstractExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                                                                                                     *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {
    !"extension getter @" + mTypeName + " " + mAbstractExtensionGetterName
    ![mAbstractExtensionGetterName location]
  }
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + mTypeName ![mTypeName location]}]
#---
  if not [ioExtensionGetterMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioExtensionGetterMapForBuildingContext insertKey
      !mTypeName
      !{}
    ]
  end
#  if not [option galgas_cli_options.newExtensionGeneration value] then
    with mTypeName in !?ioExtensionGetterMapForBuildingContext error message searchKey  do
      [!?mExtensionGetterMapForType insertKey
        !mAbstractExtensionGetterName
        !mAbstractExtensionGetterReturnedTypeName
        !mAbstractExtensionGetterFormalInputParameterList
      ]
    end
#  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                                                                                                   *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                                                                                                  *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Self type
  let @unifiedTypeMap-proxy selfType = @unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mTypeName}
#--- Check self type is an abstract class
  if not [[selfType mTypeKindEnum] isClassType] then
    error mAbstractExtensionGetterName: "cannot declare a extension getter: '@" + [selfType key] + "' is not a class"
  elsif [selfType mIsConcrete] then
    error mAbstractExtensionGetterName: "cannot declare an abstract extension getter: '@" + [selfType key] + "' is not an abstract class"
  end
#--- Compute method signature
  @formalInputParameterListForGeneration formalParameterListForGeneration = {}
  for () in mAbstractExtensionGetterFormalInputParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      !.searchKey {!inSemanticContext.mTypeMap !mFormalArgumentTypeName}
      ![mFormalArgumentName string]
      !mFormalArgumentName
      !mIsConstant
  end
#---
  ioSemanticDeclarationListForGeneration +=
    !"abstract extension getter " + mAbstractExtensionGetterName
    !@abstractExtensionGetterForGeneration.new {
      !true # Generate Cpp header file
      !"getter-" + [mTypeName fileNameRepresentation] + "-" + [mAbstractExtensionGetterName fileNameRepresentation]
      !selfType
      ![mAbstractExtensionGetterName string]
      !@unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mAbstractExtensionGetterReturnedTypeName}
      !formalParameterListForGeneration
    }
#    !"~"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                                                                                                 *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @abstractExtensionGetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioAbstractExtensionGetterListMap +=
    ![mTypeName string]
    !mAbstractExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                                                                                                    *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @abstractExtensionGetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  @unifiedTypeMap-proxy mReceiverType
  @string mAbstractExtensionGetterName
  @unifiedTypeMap-proxy mResultType
  @formalInputParameterListForGeneration mAbstractExtensionGetterFormalParameterList
}

#·······················································································································

override getter @abstractExtensionGetterForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @abstractExtensionGetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  outHeader = [filewrapper semanticComponentGenerationTemplate.abstractExtensionGetterDeclaration
    ![mReceiverType key]
    !mAbstractExtensionGetterName
    !mAbstractExtensionGetterFormalParameterList
    !mResultType
  ] 
}

#·······················································································································

override method @abstractExtensionGetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  ioInclusionSet += !"getter-" + [[mReceiverType key] fileNameRepresentation] + "-" + [mAbstractExtensionGetterName fileNameRepresentation]
  [mResultType addHeaderFileName !?ioInclusionSet]
  [mReceiverType addHeaderFileName !?ioInclusionSet]
  for () in mAbstractExtensionGetterFormalParameterList do
    [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
  outImplementation = [filewrapper semanticComponentGenerationTemplate.abstractExtensionGetterImplementation
    ![mReceiverType key]
    !mAbstractExtensionGetterName
    !mAbstractExtensionGetterFormalParameterList
    !mResultType
  ] 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

