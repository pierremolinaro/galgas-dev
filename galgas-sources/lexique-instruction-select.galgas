//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//------------------------------------------------------------------------------------------------
//! AST
//------------------------------------------------------------------------------------------------

class @lexicalSelectInstructionAST : @lexicalInstructionAST {
  private let @lexicalSelectBranchListAST mLexicalSelectBranchList
  private let @lexicalInstructionListAST mDefaultInstructionList
}

//------------------------------------------------------------------------------------------------
//! SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension galgas3LexiqueComponentSyntax {

  //······························································································

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $select$
    var @lexicalSelectBranchListAST lexicalWhileBranchList = @()
    repeat
      $case$
      <lexical_expression> ?let @lexicalExpressionAST selectExpression
      $:$
      var @lexicalInstructionListAST selectInstructionList = @()
      repeat
      while
        <lexical_instruction> !?selectInstructionList
      end
      lexicalWhileBranchList += !selectExpression !selectInstructionList
    while
    end
    $default$
    var @lexicalInstructionListAST defaultInstructionList = @()
    repeat
    while
      <lexical_instruction> !?defaultInstructionList
    end
    $end$
    ioInstructionList += !@lexicalSelectInstructionAST {
      !lexicalWhileBranchList
      !defaultInstructionList
    }
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4LexiqueComponentSyntax {

  //······························································································

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $select$
    var @lexicalSelectBranchListAST lexicalWhileBranchList = @()
    repeat
      $case$
      <lexical_expression> ?let @lexicalExpressionAST selectExpression
      $:$
      var @lexicalInstructionListAST selectInstructionList = @()
      repeat
      while
        <lexical_instruction> !?selectInstructionList
      end
      lexicalWhileBranchList += !selectExpression !selectInstructionList
    while
    end
    $default$
    var @lexicalInstructionListAST defaultInstructionList = @()
    repeat
    while
      <lexical_instruction> !?defaultInstructionList
    end
    $end$
    ioInstructionList += !@lexicalSelectInstructionAST {
      !lexicalWhileBranchList
      !defaultInstructionList
    }
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------
//! CHECK LEXICAL INSTRUCTION
//------------------------------------------------------------------------------------------------

override method @lexicalSelectInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext ioLexiqueAnalysisContext
  ?!@lexicalTagMap  ioTagMap {
  for (mSelectExpression mSelectInstructionList) in self.mLexicalSelectBranchList do
    [mSelectExpression checkLexicalExpression !?ioLexiqueAnalysisContext]
    var tagMap = @lexicalTagMap.mapWithMapToOverride{!ioTagMap}
    for (mInstruction) in mSelectInstructionList do
      [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
    end
  end
  var tagMap = @lexicalTagMap.mapWithMapToOverride{!ioTagMap}
  for (mInstruction) in self.mDefaultInstructionList do
    [mInstruction checkLexicalInstruction !?ioLexiqueAnalysisContext !?tagMap]
  end
}

//------------------------------------------------------------------------------------------------
//! COCOA GENERATION
//------------------------------------------------------------------------------------------------

override getter @lexicalSelectInstructionAST generateObjcCocoaInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = ""
//---
  for (mSelectExpression mSelectInstructionList) in self.mLexicalSelectBranchList
  do
    outGeneratedCode += "if (scanningOk && ("
    outGeneratedCode += [mSelectExpression generateObjcCocoaConditionCode !inLexiqueAnalysisContext]
    outGeneratedCode += ")) {\n"
    [!?outGeneratedCode incIndentation !2]
    for (mInstruction) in mSelectInstructionList do
      outGeneratedCode += [mInstruction generateObjcCocoaInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
    end
    [!?outGeneratedCode decIndentation !2]
  between
    outGeneratedCode += "}else "
  end
//--- Default branch
  if [self.mDefaultInstructionList count] > 0 then
    outGeneratedCode += "}else{\n"
    [!?outGeneratedCode incIndentation !2]
    for (mInstruction) in self.mDefaultInstructionList do
      outGeneratedCode += [mInstruction generateObjcCocoaInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
    end
    [!?outGeneratedCode decIndentation !2]
  end
  outGeneratedCode += "}\n"
}

//------------------------------------------------------------------------------------------------

override getter @lexicalSelectInstructionAST generateSwiftCocoaInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = ""
//---
  for (mSelectExpression mSelectInstructionList) in self.mLexicalSelectBranchList
  do
    outGeneratedCode += "if scanningOk && ("
    outGeneratedCode += [mSelectExpression generateSwiftCocoaConditionCode !inLexiqueAnalysisContext]
    outGeneratedCode += ") {\n"
    [!?outGeneratedCode incIndentation !2]
    for (mInstruction) in mSelectInstructionList do
      outGeneratedCode += [mInstruction generateSwiftCocoaInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
    end
    [!?outGeneratedCode decIndentation !2]
  between
    outGeneratedCode += "}else "
  end
//--- Default branch
  if [self.mDefaultInstructionList count] > 0 then
    outGeneratedCode += "}else{\n"
    [!?outGeneratedCode incIndentation !2]
    for (mInstruction) in self.mDefaultInstructionList do
      outGeneratedCode += [mInstruction generateSwiftCocoaInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
    end
    [!?outGeneratedCode decIndentation !2]
  end
  outGeneratedCode += "}\n"
}

//------------------------------------------------------------------------------------------------
//! C++ CODE GENERATION
//------------------------------------------------------------------------------------------------

override getter @lexicalSelectInstructionAST lexicalInstructionUsesLoopLocalVariable -> @bool {
  result = false
  for (* selectInstructionList) in self.mLexicalSelectBranchList while not result do
    for (instruction) in selectInstructionList while not result do
      result = [instruction lexicalInstructionUsesLoopLocalVariable]
    end
  end
  for (instruction) in self.mDefaultInstructionList while not result do
    result = [instruction lexicalInstructionUsesLoopLocalVariable]
  end
}

//·································································································

override getter @lexicalSelectInstructionAST generateLexicalInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string {
  result = ""
//---
  for (mSelectExpression mSelectInstructionList) in self.mLexicalSelectBranchList
  do
    result += "if ("
    result += [mSelectExpression generateConditionCode !context:inLexiqueAnalysisContext]
    result += ") {\n"
    [!?result incIndentation !2]
    for (mInstruction) in mSelectInstructionList do
      result += [mInstruction generateLexicalInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
    end
    [!?result decIndentation !2]
  between
    result += "}else "
  end
//--- Default branch
  if [self.mDefaultInstructionList count] > 0 then
    result += "}else{\n"
    [!?result incIndentation !2]
    for (instruction) in self.mDefaultInstructionList do
      result += [instruction generateLexicalInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
    end
    [!?result decIndentation !2]
  end
  result += "}\n"
}

//------------------------------------------------------------------------------------------------

