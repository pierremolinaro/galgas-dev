//————————————————————————————————————————————————————————————————————————————————————————————————
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
//! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  //······························································································

  rule <optional_type_ggs3> !@lstring outTypeName {
    select
      outTypeName = .init {!"" !.here}
    or
      $@type$ ?outTypeName indexing typeReferenceInConstructor
    end
  }

  //······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST ioDeclarations
                      !@semanticExpressionAST outExpression {
  //--- Type name
    <optional_type_ggs3> ?let @lstring typeName
    $.$
    let startOfExpression = @location.here
  //--- Constructor name
    $identifier$ ?let classFuncName
  //--- Actual arguments
    let @actualOutputArgumentList expressionList
    select
      expressionList = ()
    or
      ${$
      <output_expression_list_ggs3> !?ioDeclarations ?expressionList
      $}$
    end
    let endOfExpression = @location.here
    outExpression = @classFuncExpressionAST {
      !typeName
      !classFuncName
      !expressionList
      ![startOfExpression union !endOfExpression]
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  //······························································································

  rule <primary_beginning_by_dot> ?!@galgasDeclarationAST ioDeclarations
                                  !@semanticExpressionAST outExpression {
  //--- Initializer name
    $identifier$ ?let @lstring classFuncName
  //--- Actual arguments
    let startOfExpression = @location.here
    let @actualOutputArgumentList expressionList
    select
      expressionList = ()
    or
      $($
      <output_expression_list> !?ioDeclarations ?expressionList
      $)$
    end
    let endOfExpression = @location.here
    outExpression = @classFuncExpressionAST {
      !.init ("", startOfExpression)
      !classFuncName
      !expressionList
      ![startOfExpression union !endOfExpression]
    }
  }

  //······························································································

  rule <primary_beginning_by_type_dot_name> ?let @lstring inTypeName
                                       ?let @lstring inClassFunctionName
                                       ?!@galgasDeclarationAST ioDeclarations
                                       !@semanticExpressionAST outExpression {
  //--- Actual arguments
    let @actualOutputArgumentList expressionList
    let startOfExpression = @location.here
    select
      expressionList = ()
    or
      $($
      <output_expression_list> !?ioDeclarations ?expressionList
      $)$
    end
    let endOfExpression = @location.here
    outExpression = @classFuncExpressionAST {
      !inTypeName
      !inClassFunctionName
      !expressionList
      ![startOfExpression union !endOfExpression]
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @classFuncExpressionAST : @semanticExpressionAST {
  private let @lstring typeName
  private let @lstring classFuncName
  private let @actualOutputArgumentList expressions
  private let @location locationForOldStyleCollectionInitializerError

  //······························································································

  override method enterExpressionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    if self.typeName.string != "" then
      [!?ioTypeMap makeEntry !self.typeName ?*]
    end
    [self.expressions enterInSemanticContext !?ioTypeMap]
  }

  //······························································································

  override method analyzeSemanticExpression
                          ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
                          ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                          ?inferenceType: let @unifiedTypeMapEntry inType
                          ?let @analysisContext inAnalysisContext
                          ?!@unifiedTypeMap ioTypeMap
                          ?!@localVarManager ioVariableMap
                          !@semanticExpressionForGeneration outExpression {
    analyzeConstructorInvocation (
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inType
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      !self.typeName
      !self.classFuncName
      !self.expressions
      !self.locationForOldStyleCollectionInitializerError
      ?let @unifiedTypeMapEntry returnedType
      ?let @unifiedTypeMapEntry classFuncType
      ?let @semanticExpressionListForGeneration constructorEffectiveParameterList
      ?let @bool hasCompilerArgument
      ?let [@unifiedTypeMapEntry] requiredTypes
    )
    let constructorTypeUsefulnessName = typeNameForUsefulEntitiesGraph (!.init{![classFuncType definition].typeName.string !self.typeName})
    [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !constructorTypeUsefulnessName]
    let returnedTypeUsefulnessName = typeNameForUsefulEntitiesGraph (!.init{![returnedType definition].typeName.string !self.typeName})
    [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !returnedTypeUsefulnessName]
  //---
    outExpression = @classFuncExpressionForGeneration {
      !returnedType
      !self.classFuncName.location
      !classFuncType
      !self.classFuncName.string
      !constructorEffectiveParameterList
      !hasCompilerArgument
      !requiredTypes
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

private proc analyzeConstructorInvocation ?let @lstring inUsefulnessCallerEntityName
                      ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                      ?let @unifiedTypeMapEntry inType
                      ?let @analysisContext inAnalysisContext
                      ?!@unifiedTypeMap ioTypeMap
                      ?!@localVarManager ioVariableMap
                      ?let @lstring inTypeName
                      ?let @lstring inConstructorName
                      ?let @actualOutputArgumentList inInitializerEffectiveParameterExpressions
                      ?let @location inLocationForOldStyleCollectionInitializerError
                      !@unifiedTypeMapEntry outReturnedType
                      !@unifiedTypeMapEntry outConstructorType
                      !@semanticExpressionListForGeneration outConstructorEffectiveParameterList
                      !@bool outHasCompilerArgument
                      ![@unifiedTypeMapEntry] outRequiredTypes {
  outConstructorType = inType
  outRequiredTypes = ()
  if inTypeName.string != "" then
    outConstructorType = [ioTypeMap typeMapEntryForLKey !inTypeName]
  end
  if [outConstructorType isNull] then
    error inTypeName
    : "cannot infer type"
    : outReturnedType, outConstructorType, outConstructorEffectiveParameterList, outHasCompilerArgument
  else
  //--- Get constructor map from type map
    let @classFunctionMap classFunctionMap = [outConstructorType definition].classFunctionMap
  //--- Search initializer
    if (inConstructorName.string == "new") && ([outConstructorType definition].typeKind == .structType) then
      let initializerSignature = [inInitializerEffectiveParameterExpressions initializerSignature]
      let initializerMap = [outConstructorType definition].initializerMap
      if not [initializerMap hasKey !initializerSignature] then
        warning inConstructorName
        : "initializer @" + [outConstructorType definition].typeName
        + "." + initializerSignature + " does not exist"
      end
    end
  //--- Search contructor
    let @functionSignature constructorFormalArgumentTypeList
    with inConstructorName.string in classFunctionMap  do
      constructorFormalArgumentTypeList = mArgumentTypeList
      outHasCompilerArgument = mHasCompilerArgument
      outReturnedType = mReturnedType
    else
      if [classFunctionMap count] == 0 then
        error inConstructorName
        : "the '@"+ [outConstructorType definition].typeName.string 
        + "' type does not define any constructor"
        : constructorFormalArgumentTypeList, outHasCompilerArgument, outReturnedType
      else
        error inConstructorName
        : "the '@"+ [outConstructorType definition].typeName.string
        + "' type does not define the '" + inConstructorName + "' constructor"
        : constructorFormalArgumentTypeList, outHasCompilerArgument, outReturnedType
        fixit { replace [classFunctionMap keyList] }
      end
    end
  //--- Analysis arguments
    if [inInitializerEffectiveParameterExpressions count] != [constructorFormalArgumentTypeList count] then
      error inConstructorName
      : "calling the '" + inConstructorName + "' constructor of '@"
      + [outConstructorType definition].typeName.string + "' requires "
      + [[constructorFormalArgumentTypeList count] string] + " parameter(s), while this call has "
      + [[inInitializerEffectiveParameterExpressions count] string] + " parameter(s)"
    end
    outConstructorEffectiveParameterList = ()
    for effectiveParameter in inInitializerEffectiveParameterExpressions,
        formalArg in constructorFormalArgumentTypeList do
      [!?outRequiredTypes append !formalArg.mFormalArgumentType]
      [effectiveParameter.mExpression analyzeSemanticExpression
        !usefulnessCallerEntityName: inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inferenceType: formalArg.mFormalArgumentType
        !inAnalysisContext
        !?ioTypeMap
        !?ioVariableMap
        ?@semanticExpressionForGeneration exp
      ]
      checkAssignmentTypeWithImplicitGetterCall (
        !formalArg.mFormalArgumentType
        !exp.mResultType
        !effectiveParameter.mEndOfExpressionLocation
        !?exp
      )
      outConstructorEffectiveParameterList += !exp
      if formalArg.mFormalSelector.string != effectiveParameter.mActualSelector.string then
        let @string s = "!" + if formalArg.mFormalSelector.string != ""
          then formalArg.mFormalSelector.string + ":"
          else ""
        end
        error effectiveParameter.mActualSelector
        : "the selector should be '" + s + "'" fixit { replace s }
      end
    end
  end
//---
  if [option galgas_cli_options.errorOldStyleCollectionInitializer value] && 
     ([inInitializerEffectiveParameterExpressions count] == 0) then
    let oldCollectionInitializers = @stringset §["emptyList", "emptyMap", "emptySortedList", "emptyDict"]
    if [oldCollectionInitializers hasKey !inConstructorName.string] then
      error inLocationForOldStyleCollectionInitializerError
      : "old style collection initializer call (due to '--error-old-syle-collection-initializer' option)"
      fixit { replace " ()" }
    end
  end
  if [option galgas_cli_options.errorUsingNewInsteadOfInit value] then
    let oldInitializers = @stringset §["emptyGraph", "new"]
    if [oldInitializers hasKey !inConstructorName.string]  then
      error inConstructorName : "old style constructor, use initializer '.init (...)'"
    end
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————
//! CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

class @classFuncExpressionForGeneration : @semanticExpressionForGeneration {
  private let @unifiedTypeMapEntry classFuncType
  private let @string classFuncName
  private let @semanticExpressionListForGeneration mEffectiveParameterList
  private let @bool mHasCompilerArgument
  private let [@unifiedTypeMapEntry] requiredTypes

  //······························································································

  override method generateExpression ?!@string ioGeneratedCode
                                      ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      !@string outCppExpression {
    [self.mResultType addHeaderFileName !?ioInclusionSet]
    for type in self.requiredTypes do
      [type addHeaderFileName !?ioInclusionSet]
    end
    var @stringlist parameterList = ()
    for (mExpression) in self.mEffectiveParameterList do
      [mExpression generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let @string parameter
      ]
      parameterList += !parameter
    end
    outCppExpression =  "GGS_"  + [self.classFuncType identifierRepresentation]
    outCppExpression += "::class_func_" + [self.classFuncName identifierRepresentation]
    outCppExpression += " ("
    for (mValue) in parameterList
      do outCppExpression += mValue
      between outCppExpression += ", "
    end
    var @bool needsComma = [parameterList count] > 0
    if self.mHasCompilerArgument then
      if needsComma then
        outCppExpression += ", "
      end
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
      outCppExpression += compilerCppName ()
      needsComma = true
    end
    if needsComma then
      outCppExpression += " " + [self.mLocation commaSourceFile] + ")"
    else
      outCppExpression += [self.mLocation sourceFile] + ")"
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
