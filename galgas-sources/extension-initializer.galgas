//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------

syntax extension galgas3DeclarationsSyntax {

  //······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $extension$
    $@type$ ?var @lstring typeName indexing typeReferenceExtensionMethod
    $.$
    repeat
    while
      $@type$ ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
      $.$
    end
    $init$
    <formal_input_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let routineInstructionList
    $}$
    let endOfMethodLocation = @location.here
    ioDeclarations.mDeclarationList += !@initializerAST {
      !isPredefined: false // Is not predefined
      !typeName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

  rule <method_declaration_ggs3> ?let @lstring inClassName
                                 ?!@galgasDeclarationAST ioDeclarations {
    $init$
    <formal_input_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let routineInstructionList
    $}$
    let endOfMethodLocation = @location.here
    ioDeclarations.mDeclarationList += !@initializerAST {
      !isPredefined: false // Is not predefined
      !inClassName
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4DeclarationsSyntax {

  //······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $extension$
    <simple_type_definition> !?ioDeclarations ?var typeName
    $.$
    repeat
    while
      <simple_type_definition> !?ioDeclarations ?let t
      typeName = makeEmbeddedTypeLName (!outer: typeName !inner: t)
      $.$
    end
    $init$
    let initLocation = @location.here
    <formal_input_parameter_list> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let routineInstructionList
    $}$
    let endOfMethodLocation = @location.here
    ioDeclarations.mDeclarationList += !@initializerAST {
      !isPredefined: false // Is not predefined
      !@lstring (!typeName, initLocation)
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

  rule <method_declaration> ?let @lstring inTypeName
                            ?!@galgasDeclarationAST ioDeclarations {
    $init$
    let initLocation = @location.here
    <formal_input_parameter_list> !?ioDeclarations ?let formalParameterList
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let routineInstructionList
    $}$
    let endOfMethodLocation = @location.here
    ioDeclarations.mDeclarationList += !@initializerAST {
      !isPredefined: false // Is not predefined
      !@lstring (!inTypeName, initLocation)
      !formalParameterList
      !routineInstructionList
      !endOfMethodLocation
    }
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------
//   AST
//------------------------------------------------------------------------------------------------

class @initializerAST : @semanticDeclarationAST {
  private let @lstring mTypeName
  private let @formalInputParameterListAST mFormalParameterList
  private let @semanticInstructionListAST mInstructionList
  private let @location mEndOfInitializerLocation

  //······························································································

  override getter keyRepresentation -> @string {
    result = initializerNameForUsefulEntitiesGraph (
      self.mTypeName,
      [self.mFormalParameterList initializerSignature]
    )
  }

  //······························································································

  override method enterDeclarationInGraph
          ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
          ?!@equatableExtensionMap unused ioEquatableExtensionMap
          ?!@extensionInitializerForBuildingContext ioExtensionInitializerForBuildingContext
          ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
          ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
          ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
          ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
    let key = @lstring {![self keyRepresentation] !self.mTypeName.location}
    [!?ioSemanticTypePrecedenceGraph addNode !key !self]
    [!?ioSemanticTypePrecedenceGraph addEdge !key !@("@" + self.mTypeName, self.mTypeName)]
  //---
    if not [ioExtensionInitializerForBuildingContext hasKey !self.mTypeName.string] then
      [!?ioExtensionInitializerForBuildingContext insertKey
        !self.mTypeName
        !@()
      ]
    end
    with self.mTypeName in !?ioExtensionInitializerForBuildingContext error message searchKey  do
      [!?mExtensionInitializerMapForType insertKey
        !@lstring {![self.mFormalParameterList initializerSignature] !self.mTypeName.location}
        !self.mFormalParameterList
      ]
    end
  }

  //······························································································

  override method enterDeclarationInSemanticContext
    ?!@equatableExtensionMap unused ioEquatableExtensionMap
    ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
    ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
    ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
    ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
    ?!@unifiedTypeMap unused ioTypeMap
    ?!@semanticContext unused ioSemanticContext {
  }

  //······························································································

  override method semanticAnalysis
                ?!@lstringlist unused ioUsefulnessRootEntities
                ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                ?let @string unused inProductDirectory
                ?let @semanticContext inSemanticContext
                ?!@unifiedTypeMap ioTypeMap
                ?let @predefinedTypes inPredefinedTypes
                ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration {
  //--- Useful entities graph
    let nameForUsefulness = initializerNameForUsefulEntitiesGraph (
      !self.mTypeName
      ![self.mFormalParameterList initializerSignature]
    )
    [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  //--- Self type
    let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
    let @string selfObjectNameString
    let @string selfObjectAccessorString
  //--- Check self type is a class
    var isReferenceClass = false
    if let classType = [[selfType definition].typeKind getClassType] then
      isReferenceClass = classType.isReference
      selfObjectNameString = "<< this >>"
      selfObjectAccessorString = ""
    else
      selfObjectNameString = "result"
      selfObjectAccessorString = "result."
    end
  //--- Analyze instruction list
    let analysisContextNew = @analysisContext {
      !inSemanticContext
      !inPredefinedTypes
      !selfObjectCppName: selfObjectNameString
      !selfAvailability: .available {!type: selfType !selfMutability: .initializer}
      !selfObjectCppPrefixForAccessingProperty: selfObjectAccessorString
      !requiresSelfForAccessingProperty: true
    }
    analyzeInitializerBody (
      !nameForUsefulness
      !?ioUsefulEntitiesGraph
      !analysisContextNew
      !?ioTypeMap
      !self.mFormalParameterList
      !self.mInstructionList
      !self.mEndOfInitializerLocation
      ?let semanticInstructionListForGeneration
      ?let formalParameterListForGeneration
    )
  //---
    let initializerName = [self.mFormalParameterList initializerSignature]
    ioSemanticDeclarationListForGeneration +=
      !infoMessage: "initializer @" + self.mTypeName + "." + initializerName
      !@extensionInitializerForGeneration {
        !generateHeader: false // Generate Cpp header file
        !implementationCppFileName: "initializer-" + [[selfType definition].typeName.string fileNameRepresentation] + "-" + [initializerName fileNameRepresentation]
        !selfType
        !initializerName
        !formalParameterListForGeneration
        ![selfType definition].allTypedPropertyList
        !semanticInstructionListForGeneration
      }
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------

private proc analyzeInitializerBody ?let @lstring inUsefulnessCallerEntityName
                        ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                        ?let @analysisContext inAnalysisContext
                        ?!@unifiedTypeMap ioTypeMap
                        ?let @formalInputParameterListAST inFormalArgumentListAST
                        ?let @semanticInstructionListAST inInstructionList
                        ?let @location inEndOfMethodLocation
                        !@semanticInstructionListForGeneration outSemanticInstructionListForGeneration
                        !@formalInputParameterListForGeneration outSignatureForGeneration {
  var variableMap = @localVarManager {}
//--- Enter properties that should be explicitly initialized
  if let selfAvailable = [inAnalysisContext.selfAvailability getAvailable] then
    for property in [selfAvailable.type definition].allTypedPropertyList do
      let initialized = if selfAvailable.selfMutability == .initializer
        then property.initialization != .none
        else true
      end
      [!?variableMap insertInitializerSelfProperty
        !property.name.string
        !inEndOfMethodLocation
        !property.typeEntry
        !"<< unused >>"
        !"self." + property.name
        !initialized: initialized
      ]
    end
  end
//--- Enter formal parameters
  outSignatureForGeneration = @formalInputParameterListForGeneration ()
  for formalArg in inFormalArgumentListAST do
    let parameterType = [ioTypeMap typeMapEntryForLKey !formalArg.mFormalArgumentTypeName]
    if formalArg.mIsConstant then
      let @string cppName = "constinArgument_" + [formalArg.mFormalArgumentName.string identifierRepresentation]
      outSignatureForGeneration +=
        !formalArg.mFormalSelector
        !parameterType
        !cppName
        !formalArg.mFormalArgumentName
        !formalArg.mIsConstant
      if formalArg.mIsUnused then
        [!?variableMap insertConstantInputFormalArgumentDeclaredAsUnused !formalArg.mFormalArgumentName !parameterType !cppName !cppName]
      else
        [!?variableMap insertConstantInputFormalArgument !formalArg.mFormalArgumentName !parameterType !cppName !cppName]
      end
    else
      let @string cppName = "inArgument_" + [formalArg.mFormalArgumentName.string identifierRepresentation]
      outSignatureForGeneration +=
        !formalArg.mFormalSelector
        !parameterType
        !cppName
        !formalArg.mFormalArgumentName
        !formalArg.mIsConstant
      if formalArg.mIsUnused then
        [!?variableMap insertInputFormalArgumentDeclaredAsUnused !formalArg.mFormalArgumentName !parameterType !cppName !cppName]
      else
        [!?variableMap insertInputFormalArgument !formalArg.mFormalArgumentName !parameterType !cppName !cppName]
      end
    end
  end
//---  Analyze instruction list
  outSemanticInstructionListForGeneration = @semanticInstructionListForGeneration ()
  for (mInstruction) in inInstructionList do
    [mInstruction analyzeSemanticInstruction
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !?outSemanticInstructionListForGeneration
      !?variableMap
    ]
   end
//---
  [variableMap checkAutomatonStates !inEndOfMethodLocation]
}

//------------------------------------------------------------------------------------------------
//   CODE GENERATION
//------------------------------------------------------------------------------------------------

class @extensionInitializerForGeneration : @semanticDeclarationWithHeaderForGeneration {
  private let @unifiedTypeMapEntry mReceiverType
  private let @string initializerName
  private let @formalInputParameterListForGeneration formalParameterList
  private let @typedPropertyList mTypedAttributeList
  private let @semanticInstructionListForGeneration semanticInstructionListForGeneration

  //······························································································

  override getter headerKind -> @headerKind {
    result = .noHeader
  }

  //······························································································

  override method appendSpecificImplementation ?let @unifiedTypeMap unused inTypeMap
                                                ?!@stringset ioInclusionSet
                                                !@string outImplementation {
    for formalArg in self.formalParameterList do
      [formalArg.mFormalArgumentType addHeaderFileName !?ioInclusionSet]
    end
    generateInitializer (
      !self.mReceiverType
      !self.initializerName
      !?ioInclusionSet
      !self.formalParameterList
      !self.semanticInstructionListForGeneration
      ?let @string methodImplementation
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.initializerImplementation
      ![self.mReceiverType definition].typeName.string
      !self.initializerName
      !self.formalParameterList
      !methodImplementation
    ]
  }

  //······························································································

}

//------------------------------------------------------------------------------------------------
// INITIALIZER IMPLEMENTATION
//------------------------------------------------------------------------------------------------

private proc generateInitializer ?let @unifiedTypeMapEntry inReceiverType
                         ?let @string inInitializerName
                         ?!@stringset ioInclusionSet
                         ?let @formalInputParameterListForGeneration inFormalArgumentList
                         ?let @semanticInstructionListForGeneration inInstructionList
                         !@string outGeneratedCode {
  let className = [inReceiverType definition].typeName.string
//--- Build unused variable set
  var @stringset unusedVariableCppNameSet = @()
  unusedVariableCppNameSet += !compilerCppName ()
  for formalArg in inFormalArgumentList do
    unusedVariableCppNameSet += !formalArg.mFormalArgumentCppName
  end
//--- Generate body
  var @uint temporaryVariableIndex = 0
  var @string routineBody = ""
  [!?routineBody incIndentation !2]
  for (mInstruction) in inInstructionList do
    [mInstruction generateInstruction
      !?ioInclusionSet
      !?temporaryVariableIndex
      !?unusedVariableCppNameSet
      !false // inGenerateSyntaxDirectedTranslationString
      !?routineBody
    ]
  end
  [!?routineBody decIndentation !2]
//--- Generate inclusions
  [inReceiverType addHeaderFileName !?ioInclusionSet]
  for formalArg in inFormalArgumentList do
    [formalArg.mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
//--- Generate header
  let isStruct = [inReceiverType definition].typeKind == .structType
//--- Generate routine body
  if isStruct then
    outGeneratedCode = "GGS_" + [className identifierRepresentation]
       + " GGS_" + [className identifierRepresentation] 
       + "::" + [inInitializerName identifierRepresentation] + " ("
    let @uint colRef = [outGeneratedCode currentColumn]
  //---
    for formalArg in inFormalArgumentList do
      if formalArg.mIsConstant then
        outGeneratedCode += "const GGS_" + [formalArg.mFormalArgumentType identifierRepresentation] + " & "
      else
        outGeneratedCode += "GGS_" + [formalArg.mFormalArgumentType identifierRepresentation] + " "
      end
      if [unusedVariableCppNameSet hasKey !formalArg.mFormalArgumentCppName] then
        outGeneratedCode += "/* " + formalArg.mFormalArgumentCppName + " */"
      else
        outGeneratedCode +=  formalArg.mFormalArgumentCppName
      end
      outGeneratedCode += ",\n"
      [!?outGeneratedCode appendSpacesUntilColumn !colRef]
    end
  //--- Compiler argument
    outGeneratedCode += "Compiler * " + compilerCppName () + "\n"
    [!?outGeneratedCode appendSpacesUntilColumn !colRef]
    outGeneratedCode += "COMMA_UNUSED_LOCATION_ARGS"
    outGeneratedCode += ") {\n"
    outGeneratedCode += "  GGS_" + [className identifierRepresentation] + " result ;\n"
    outGeneratedCode += "  result.setInitializedProperties (" + compilerCppName () + ") ;\n"
    outGeneratedCode += routineBody
    outGeneratedCode += "  return result ;\n"
    outGeneratedCode += "}"
  else // class
    outGeneratedCode = "GGS_" + [className identifierRepresentation]
       + " GGS_" + [className identifierRepresentation] 
       + "::" + [inInitializerName identifierRepresentation] + " ("
    let @uint colRef = [outGeneratedCode currentColumn]
  //---
    for formalArg in inFormalArgumentList do
      if formalArg.mIsConstant then
        outGeneratedCode += "const GGS_" + [formalArg.mFormalArgumentType identifierRepresentation] + " & "
      else
        outGeneratedCode += "GGS_" + [formalArg.mFormalArgumentType identifierRepresentation] + " & "
      end
      outGeneratedCode +=  formalArg.mFormalArgumentCppName
      outGeneratedCode += ",\n"
      [!?outGeneratedCode appendSpacesUntilColumn !colRef]
    end
  //--- Compiler argument
    outGeneratedCode += "Compiler * " + compilerCppName () + "\n"
    [!?outGeneratedCode appendSpacesUntilColumn !colRef]
    outGeneratedCode += "COMMA_LOCATION_ARGS) {\n"
    outGeneratedCode += "  cPtr_" + [className identifierRepresentation] + " * object = nullptr ;\n"
    outGeneratedCode += "  macroMyNew (object, cPtr_" + [className identifierRepresentation]
    outGeneratedCode += " (" + compilerCppName () + " COMMA_THERE)) ;\n"
    outGeneratedCode += "  object->" + [className identifierRepresentation] 
       + "_" + [inInitializerName identifierRepresentation] + " ("
    for formalArg in inFormalArgumentList do
      outGeneratedCode +=  formalArg.mFormalArgumentCppName
      outGeneratedCode += ", "
    end
    outGeneratedCode += compilerCppName () + ") ;\n"
    outGeneratedCode += "  const GGS_" + [className identifierRepresentation] + " result (object) ;\n"
    outGeneratedCode += "  macroDetachSharedObject (object) ;\n"
    outGeneratedCode += "  return result ;\n"
    outGeneratedCode += "}\n\n"
    outGeneratedCode += "void cPtr_" + [className identifierRepresentation]
       + "::" + [className identifierRepresentation] 
       + "_" + [inInitializerName identifierRepresentation] + " ("
    for formalArg in inFormalArgumentList do
      if formalArg.mIsConstant then
        outGeneratedCode += "const "
      end
      outGeneratedCode += "GGS_" + [formalArg.mFormalArgumentType identifierRepresentation] + " & "
      if [unusedVariableCppNameSet hasKey !formalArg.mFormalArgumentCppName] then
        outGeneratedCode += "/* " + formalArg.mFormalArgumentCppName + " */"
      else
        outGeneratedCode +=  formalArg.mFormalArgumentCppName
      end
      outGeneratedCode += ",\n"
      [!?outGeneratedCode appendSpacesUntilColumn !colRef]
    end
  //--- Compiler argument
    outGeneratedCode += "Compiler * "
    if [unusedVariableCppNameSet hasKey !compilerCppName ()] then
      outGeneratedCode += "/* " + compilerCppName () + " */"
    else
      outGeneratedCode += compilerCppName ()
    end
    outGeneratedCode += ") {\n"
    outGeneratedCode += routineBody
    outGeneratedCode += "}"
  end
}

//------------------------------------------------------------------------------------------------

