#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#   AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingAbstractExtensionMethodAST : @semanticDeclarationAST {
  public let @lstring mTypeName
  public let @lstring mOverridingExtensionMethodName
  public let @formalParameterListAST mOverridingExtensionMethodFormalParameterList
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $method$
    $@type$ ?var typeName indexing typeReferenceOverrideAbstractExtensionMethod
    repeat
    while
      $.$
      $@type$ ?let t
      typeName = .init (typeName.string + "-" + t.string, [typeName.location union !t.location])
    end
    $identifier$ ?let @lstring methodName indexing overrideAbstractExtensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionMethodAST {
      !isPredefined: false # Is not predefined
      !typeName
      !methodName
      !formalParameterList
    }
  }

  #·······························································································

  rule <method_declaration_ggs3> ?let @lstring inTypeName ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $method$
    $identifier$ ?let @lstring methodName indexing overrideAbstractExtensionMethodDefinition
    <formal_parameter_list_ggs34> !?ioDeclarations ?let formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionMethodAST {
      !isPredefined: false # Is not predefined
      !inTypeName
      !methodName
      !formalParameterList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $proc$
    <simple_type_definition> !?ioDeclarations ?var typeName
    $.$
    repeat
    while
      <simple_type_definition> !?ioDeclarations ?let t
      typeName = .init (typeName.string + "-" + t.string, [typeName.location union !t.location])
      $.$
    end
    $identifier$ ?let @lstring methodName indexing overrideAbstractExtensionMethodDefinition
    <formal_parameter_list>!?ioDeclarations ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionMethodAST {
      !isPredefined: false # Is not predefined
      !typeName
      !methodName
      !formalParameterList
    }
  }

  #·······························································································

  rule <method_declaration> ?let @lstring inTypeName
                            ?!@galgasDeclarationAST ioDeclarations {
    $override$
    $abstract$
    $proc$
    var typeName = inTypeName
    repeat
    while
      <simple_type_definition> !?ioDeclarations ?let t
      typeName = .init (typeName.string + "-" + t.string, [typeName.location union !t.location])
      $.$
    end
    $identifier$ ?let @lstring methodName indexing overrideAbstractExtensionMethodDefinition
    <formal_parameter_list> !?ioDeclarations ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionMethodAST {
      !isPredefined: false # Is not predefined
      !typeName
      !methodName
      !formalParameterList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingAbstractExtensionMethodAST keyRepresentation -> @string {
  result = "overriding extension method @" + self.mTypeName + " " + self.mOverridingExtensionMethodName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionInitializerForBuildingContext unused ioExtensionInitializerForBuildingContext
  ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
#---
  if not [ioExtensionMethodMapForBuildingContext hasKey !self.mTypeName.string] then
    [!?ioExtensionMethodMapForBuildingContext insertKey
      ! self.mTypeName
      !()
    ]
  end
  with self.mTypeName in !?ioExtensionMethodMapForBuildingContext error message searchKey  do
    [!?mExtensionMethodMapForType insertKey
      !self.mOverridingExtensionMethodName
      ! self.mOverridingExtensionMethodFormalParameterList
      !.isVirtualOverridingAbstract
    ]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST enterDeclarationInSemanticContext
  ?let @extensionInitializerForBuildingContext unused inExtensionInitializerMapForBuildingContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext unused ioSemanticContext {
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
#  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !mOverridingExtensionMethodName)
#  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mTypeName)
#  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMapEntry selfType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
#--- Check type is an abstract class
  if not [[selfType definition].typeKind isClassType] then
    error self.mOverridingExtensionMethodName: "cannot declare a extension method: '@" + [selfType definition].typeName.string + "' is not a class"
  elsif [selfType definition].isConcrete then
    error self.mOverridingExtensionMethodName: "cannot declare an abstract extension method: '@" + [selfType definition].typeName.string + "' is not an abstract class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMapEntry superType = [selfType definition].superType
  var inheritedSignature = @formalParameterSignature ()
  var @location inheritedDeclarationLocation = @location.here
  loop ([ioTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType definition].instanceMethodMap hasKey !self.mOverridingExtensionMethodName.string] then
      [[superType definition].instanceMethodMap searchKey
        !self.mOverridingExtensionMethodName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?let qualifier
        ?*
      ]
      if qualifier <= @methodQualifier. isBasicFinal then
        baseTypeName = [superType definition].typeName.string
      end
    end
    superType = [superType definition].superType
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionMethodName:"this getter is not declared by a super class"
  end
#--- Analyze formal argument list
  var variableMap = @localVarManager {}
  buildLocalVariableMapAndSignature (
    !inSemanticContext
    !?ioTypeMap
    !self.mOverridingExtensionMethodFormalParameterList
    !?variableMap
    ?let formalParameterListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      !self.mOverridingExtensionMethodName.location
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
#  ioOverridingAbstractExtensionMethodListMap +=
#    !self.mTypeName.string
#    !self.mOverridingExtensionMethodName
  [!?ioOverridingAbstractExtensionMethodListMap insertKey
    !self.mTypeName.string
    !self.mOverridingExtensionMethodName
  ]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
