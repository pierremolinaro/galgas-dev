#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @overridingAbstractExtensionMethodAST : @semanticDeclarationAST {
  public var @lstring mTypeName
  public var @lstring mOverridingExtensionMethodName
  public var @formalParameterListAST mOverridingExtensionMethodFormalParameterList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $override$
    $abstract$
    $method$
    $@type$ ?var  @lstring className indexing typeReferenceOverrideAbstractExtensionMethod
    $identifier$ ?var  @lstring mMethodName indexing overrideAbstractExtensionMethodDefinition
    <formal_parameter_list> ?let @formalParameterListAST formalParameterList
    ioDeclarations.mDeclarationList += !@overridingAbstractExtensionMethodAST.new {
      !false # Is not predefined
      !className
      !mMethodName
      !formalParameterList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @overridingAbstractExtensionMethodAST keyRepresentation -> @string {
  result = "overriding extension method @" + self.mTypeName + " " + self.mOverridingExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList
{
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
#  let nameForUsefulness = methodNameForUsefulEntitiesGraph (!self.mTypeName !mOverridingExtensionMethodName)
#  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
#  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mTypeName)
#  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-entry selfType = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mTypeName}
#--- Check type is an abstract class
  if not [[selfType mTypeKindEnum] isClassType] then
    error self.mOverridingExtensionMethodName: "cannot declare a extension method: '@" + [selfType key] + "' is not a class"
  elsif [selfType mIsConcrete] then
    error self.mOverridingExtensionMethodName: "cannot declare an abstract extension method: '@" + [selfType key] + "' is not an abstract class"
  end
#--- Find base type name
  var @string baseTypeName = ""
  var @unifiedTypeMap-entry superType = [selfType mSuperType]
  var inheritedSignature = @formalParameterSignature {}
  var @location inheritedDeclarationLocation = @location.here
  loop( [inSemanticContext.mTypeMap count] + 1)
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mInstanceMethodMap] hasKey !self.mOverridingExtensionMethodName.string] then
      var @methodQualifier qualifier
      [[superType mInstanceMethodMap] searchKey
        !self.mOverridingExtensionMethodName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?qualifier
        ?2*
      ]
      if qualifier <= @methodQualifier. isBasicFinal then
        baseTypeName = [superType key]
      end
    end
    superType = [superType mSuperType]
  end
  if baseTypeName == "" then
    error self.mOverridingExtensionMethodName:"this getter is not declared by a super class"
  end
#--- Analyze formal argument list
  var variableMap = @localVarManager.default
  var @formalParameterListForGeneration formalParameterListForGeneration
  buildLocalVariableMapAndSignature (
    !inSemanticContext
    !self.mOverridingExtensionMethodFormalParameterList
    !?variableMap
    ?formalParameterListForGeneration
  )
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures (
      !formalParameterListForGeneration
      !self.mOverridingExtensionMethodName.location
      !inheritedSignature
      !inheritedDeclarationLocation
    )
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @overridingAbstractExtensionMethodAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap
{
  ioOverridingAbstractExtensionMethodListMap +=
    !self.mTypeName.string
    !self.mOverridingExtensionMethodName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
