#----------------------------------------------------------------------------------------------------------------------*
#   AST                                                                                                                *
#----------------------------------------------------------------------------------------------------------------------*

list @insertMethodListAST {
  @lstring mInsertMethodName %nogetter
  @lstring mErrorMessage %nogetter
  @lstring mShadowErrorMessage %nogetter
  @lstring mInitialStateName %nogetter
}

#·······················································································································

list @mapSearchMethodListAST {
  @lstring mSearchMethodName %nogetter
  @lstring mErrorMessage %nogetter
  @lstring mActionName %nogetter
  @bool mLocationAttribute %nogetter
}

#·······················································································································

list @mapRemoveMethodListAST {
  @lstring mMethodName %nogetter
  @lstring mErrorMessage %nogetter
}

#·······················································································································

list @insertOrReplaceDeclarationListAST {
  @location mInsertOrReplaceDeclarationLocation %nogetter
}

#·······················································································································

class @mapDeclarationAST : @semanticDeclarationAST {
  @lstring mMapTypeName
  @lstringlist mAttributeList
  @propertyInCollectionListAST mPropertyList
  @insertMethodListAST mInsertMethodList
  @mapSearchMethodListAST mSearchMethodList
  @mapRemoveMethodListAST mRemoveMethodList
  @insertOrReplaceDeclarationListAST mInsertOrReplaceDeclarationListAST
}

#----------------------------------------------------------------------------------------------------------------------*
#   SYNTAX                                                                                                             *
#----------------------------------------------------------------------------------------------------------------------*

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································
  
  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $map$
  #--- Map type name
    $@type$ ?var  @lstring mMapTypeName indexing mapDefinition, structDefinition "-element"
  #--- Map attributes
    @lstringlist mapAttributeList = {}
    repeat
    while
      $%attribute$ ?let attribute
      mapAttributeList += !attribute
    end
  #--- Map properties
    ${$
    var propertyList =@propertyInCollectionListAST {}
    var mInsertMethodList =@insertMethodListAST {}
    @mapSearchMethodListAST mSearchMethodList = {}
    @mapRemoveMethodListAST mRemoveMethodList = {}
    @insertOrReplaceDeclarationListAST insertOrReplaceDeclarationListAST = {}
    repeat
    while
      <property_declaration> !? propertyList
    while
      <map_insert_setter_declaration> !? mInsertMethodList
    while
      <search_declaration> !?mSearchMethodList
    while
      <remove_declaration> !?mRemoveMethodList
    while
      <insert_or_replace_declaration> !?insertOrReplaceDeclarationListAST
    while
      $;$
    end
    $}$
    ioDeclarations.mDeclarationList += !@mapDeclarationAST.new {
      !false # Is not predefined
      !mMapTypeName
      !mapAttributeList
      !propertyList
      !mInsertMethodList
      !mSearchMethodList
      !mRemoveMethodList
      !insertOrReplaceDeclarationListAST
    }
  }
  
  #·····················································································································

  rule <search_declaration> ?!@mapSearchMethodListAST ioMapSearchMethodListAST {
    $search$
    $identifier$ ?var  @lstring methodName
    @bool locationAttribute
    select
      locationAttribute = false
    or
      $%attribute$ ?let attribute
      if attribute.string == "location" then
        locationAttribute = true
      else
        error attribute : "only the %location is allowed here" : locationAttribute fixit { replace "%location" }
      end
    end
    $error$
    $message$
    $"string"$ ?var  @lstring errorMessage
    ioMapSearchMethodListAST += !methodName !errorMessage !.new {!"" !.here} !locationAttribute
  }

  #·····················································································································

  rule <remove_declaration> ?!@mapRemoveMethodListAST ioMapRemoveMethodListAST {
    $remove$
    $identifier$ ?var  @lstring mMethodName
    $error$
    $message$
    $"string"$ ?var  @lstring mErrorMessage
    ioMapRemoveMethodListAST += !mMethodName !mErrorMessage
  }

  #·····················································································································

  rule <insert_or_replace_declaration> ?!@insertOrReplaceDeclarationListAST ioInsertOrReplaceDeclarationListAST {
    $insert$
    $or$
    $replace$
    ioInsertOrReplaceDeclarationListAST += !@location.here
  }

  #·····················································································································

  rule <map_insert_setter_declaration> ?!@insertMethodListAST ioMapMethodList {
    $insert$
    $identifier$ ?var  @lstring mMethodName
    @lstring stateName
    select
      stateName = @lstring.new {!"" !@location.here}
    or
      $state$
      $identifier$ ? stateName
    end
    $error$
    $message$
    $"string"$ ?var  @lstring mErrorMessage
    @lstring mShadowErrorMessage
    select
      mShadowErrorMessage = @lstring.new {!"" !@location.here}
    or
      $,$
      $"string"$ ? mShadowErrorMessage
    end
    ioMapMethodList +=
      !mMethodName
      !mErrorMessage
      !mShadowErrorMessage
      !stateName
  }

  #·····················································································································

}

#----------------------------------------------------------------------------------------------------------------------*
#   ASSOCIATED ELEMENT                                                                                                 *
#----------------------------------------------------------------------------------------------------------------------*

override method @mapDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList {
  var structAttributeList =@propertyInCollectionListAST {}
  structAttributeList +=
    !["lstring" nowhere]
    !["lkey" nowhere]
    !@lstringlist.emptyList
  for () in mPropertyList do
    structAttributeList +=
      !mPropertyTypeName
      !mPropertyName
      !@lstringlist.emptyList
  end
  ioSemanticDeclarationList += !@structDeclarationAST.new {
    !mIsPredefined
    !@lstring.new {!mMapTypeName.string + elementTypeNameSuffix () !mMapTypeName.location}
    !structAttributeList
    !""
  }
}

#----------------------------------------------------------------------------------------------------------------------*
#   ENTER IN GRAPH                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

override method @mapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + mMapTypeName ![mMapTypeName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for () in mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring.new {!"@" + mPropertyTypeName ![mPropertyTypeName location]}]
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#   ENTER IN SEMANTIC CONTEXT                                                                                          *
#----------------------------------------------------------------------------------------------------------------------*

override method @mapDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext {
#--- string type index
  [@unifiedTypeMap-proxy makeProxyFromString !?ioSemanticContext.mTypeMap !"string" ?let stringTypeIndex]
#--- location type index
  [@unifiedTypeMap-proxy makeProxyFromString !?ioSemanticContext.mTypeMap !"location" ?let locationTypeProxy]
#--- lstring type index
  [@unifiedTypeMap-proxy makeProxyFromString !?ioSemanticContext.mTypeMap !"lstring" ?let lstringTypeIndex]
#--- Enumeration description
  var enumerationDescriptor = @enumerationDescriptorList.listWithValue {!lstringTypeIndex !"lkey"}
#--- Attributes
  @bool usesSelectorsInInsertAndSearch = false
  for (s) in mAttributeList do
    if s.string == "selectors" then
      if usesSelectorsInInsertAndSearch then
        error s : "duplicated attribute"
      end
      usesSelectorsInInsertAndSearch = true
    else
      error s : "unknown attribute"
    end
  end
#---
  var constructorMap =@constructorMap.emptyMap{}
  commonGetterMapForAllTypes ( !?ioSemanticContext.mTypeMap ?var @getterMap getterMap )
  var setterMap =@setterMap.emptyMap{}
  var instanceMethodMap =@instanceMethodMap.emptyMap{}
#--- Constructors
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioSemanticContext.mTypeMap
    !name:"emptyMap"
    !resultTypeName:[mMapTypeName string]
    !hasLexiqueAndLocationArgs:false
  )
  enterConstructorWithArgument (
    !?constructorMap
    !?ioSemanticContext.mTypeMap
    !name:"mapWithMapToOverride"
    !argTypeName:[mMapTypeName string]
    !argName:"inMap"
    !resultTypeName:[mMapTypeName string]
    !hasLexiqueAndLocationArgs:false
  )
#--- Getters
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"levels"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWith2Arguments (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !"hasKeyAtLevel"
    !"string"
    !"inKey"
    !"uint"
    !"inLevel"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"keySet"
    !returnedTypeName:"stringset"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"keyList"
    !returnedTypeName:"lstringlist"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"hasKey"
    !argumentTypeName:"string"
    !argumentName:"inKey"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap 
    !getterName:"locationForKey"
    !argumentTypeName:"string"
    !argumentName:"inKey" 
    !returnedTypeName:"location"
    !hasCompilerArgument:true
  )
  enterBaseGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !"overriddenMap"
    !returnedTypeName:[mMapTypeName string]
    !hasCompilerArgument:true
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioSemanticContext.mTypeMap
    !getterName:"count"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
#--- Handle properties
  var insertMethodFormalArgumentList = @formalParameterSignature {}
  var typedPropertyList = @typedPropertyList {}
  @functionSignature argumentTypeListForAddAssignWithFieldExpressionList = {}
  argumentTypeListForAddAssignWithFieldExpressionList += !["" nowhere] !lstringTypeIndex !"lkey"
  insertMethodFormalArgumentList +=
    ![if usesSelectorsInInsertAndSearch then "lkey" else "" end nowhere]
    !lstringTypeIndex
    !@formalArgumentPassingModeAST.argumentConstantIn
    !"inLKey"
  @formalParameterSignature removeMethodFormalArgumentList = {}
  removeMethodFormalArgumentList +=
    ![if usesSelectorsInInsertAndSearch then "lkey" else "" end nowhere]
    !lstringTypeIndex
    !@formalArgumentPassingModeAST.argumentConstantIn
    !"inLKey"
  var typesToIncludeInHeaderCompilation = @unifiedTypeMapProxyList.emptyList
  for () in mPropertyList do
    [@unifiedTypeMap-proxy makeProxy !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    @bool hasGetter = true
    @bool hasSetter = true
    argumentTypeListForAddAssignWithFieldExpressionList += !["" nowhere] !attributeTypeIndex !mPropertyName.string
    typedPropertyList += !attributeTypeIndex !mPropertyName !hasSetter !hasGetter
    typesToIncludeInHeaderCompilation += !attributeTypeIndex
    enumerationDescriptor += !attributeTypeIndex ![mPropertyName string]
    insertMethodFormalArgumentList +=
      !if usesSelectorsInInsertAndSearch then mPropertyName else ["" nowhere] end
      !attributeTypeIndex
      !@formalArgumentPassingModeAST.argumentConstantIn
      !mPropertyName.string
    removeMethodFormalArgumentList +=
      !if usesSelectorsInInsertAndSearch then mPropertyName else ["" nowhere] end
      !attributeTypeIndex
      !@formalArgumentPassingModeAST.argumentOut
      !mPropertyName.string
  end
#--- Handle insert setters
  for () in mInsertMethodList do
    if [setterMap hasKey ![mInsertMethodName string]] then
      error mInsertMethodName:"the '" + mInsertMethodName + "' insert method is already declared"
    else
      [!?setterMap insertOrReplace
        !mInsertMethodName
        !@methodKind.definedAsMember
        !insertMethodFormalArgumentList
        !true
        !@methodQualifier.isBasic
        !""
      ]
    end
  end
#--- Handle remove setters
  for () in mRemoveMethodList do
    if [setterMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" + mMethodName + "' method is already declared as an insert setter or a remove setter"
    else
      [!?setterMap insertOrReplace
        !mMethodName
        !@methodKind.definedAsMember
        !removeMethodFormalArgumentList
        !true
        !@methodQualifier.isBasic
        !""
      ]
    end
  end
#--- Handle search methods (methods if no state, setters if states)
  for () in mSearchMethodList do
    var searchMethodFormalArgumentList = removeMethodFormalArgumentList
    if mLocationAttribute then
      searchMethodFormalArgumentList +=
        !if usesSelectorsInInsertAndSearch then ["keyLocation" nowhere] else ["" nowhere] end
        !locationTypeProxy
        !.argumentOut
        !"outKeyLocation"
    end
    [!?instanceMethodMap insertKey
      !mSearchMethodName
      !@methodKind.definedAsMember
      !searchMethodFormalArgumentList
      !mSearchMethodName.location
      !true
      !@methodQualifier.isBasic
      !"" # No error message
    ]
  end
#--- Enter "attributeForKey" getters
  for () in mPropertyList do
    let accessorName = @lstring.new {![mPropertyName string] + "ForKey" ![mPropertyName location]}
    [@unifiedTypeMap-proxy makeProxy !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    [!?getterMap insertOrReplace
      !accessorName
      !@methodKind.definedAsMember
      !@functionSignature {!["" nowhere] !stringTypeIndex !"inKey"}
      !@location.here
      !true
      !attributeTypeIndex
      !@methodQualifier.isBasic
      !"" # No Error message
    ]
  end
#---------- Handle "insertOrReplace" setter
  if [mInsertOrReplaceDeclarationListAST length] >= 1 then
    @location insertOrReplaceLocation
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceLocation]
    [!?setterMap insertOrReplace
      !@lstring.new {!"insertOrReplace" !insertOrReplaceLocation}
      !@methodKind.definedAsMember
      !insertMethodFormalArgumentList
      !false
      !@methodQualifier.isBasic
      !"" # No error message
    ]
  end
#---------- Enter "set...Attribute...forKey" setters, and 'with' accessor
  for () in mPropertyList do
    let accessorName = @lstring.new {
      !"set" + [[mPropertyName string] stringByCapitalizingFirstCharacter] + "ForKey"
      ![mPropertyName location]
    }
    [@unifiedTypeMap-proxy makeProxy
      !?ioSemanticContext.mTypeMap
      !mPropertyTypeName
      ?let @unifiedTypeMap-proxy attributeTypeIndex
    ]
    var accessorFormalArgumentList =@formalParameterSignature {}
    accessorFormalArgumentList += !["" nowhere] !attributeTypeIndex !.argumentConstantIn !mPropertyName.string
    accessorFormalArgumentList += !["" nowhere] !stringTypeIndex !.argumentConstantIn !"key"
    [!?setterMap insertOrReplace
      !accessorName
      !@methodKind.definedAsMember
      !accessorFormalArgumentList
      !true
      !@methodQualifier.isBasic
      !"" # No error message
    ]
  end
#--- Add Categories
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !mMapTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
  )
#--- Element type index
  [@unifiedTypeMap-proxy makeProxy
    !?ioSemanticContext.mTypeMap
    !@lstring.new {!mMapTypeName.string + elementTypeNameSuffix () !mMapTypeName.location}
    ?let @unifiedTypeMap-proxy elementTypeProxy
  ]
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !mMapTypeName
    !mIsPredefined
    !true # Concrete Type
    !@unifiedTypeMap-proxy.null
    !@typeKindEnum.mapType
    !true # Support collection value
    !@typedPropertyList.emptyList
    !@attributeMap. emptyMap
    !typedPropertyList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !@classMethodMap. emptyMap
    !enumerationDescriptor
    !doNotGenererateObjectCompare () | plusEqualOperatorWithFieldListNeedsCompilerArg () | supportWithAccessor ()
    !argumentTypeListForAddAssignWithFieldExpressionList
    !{}
    !{}
    !mSearchMethodList
    !@mapSearchMethodListAST.emptyList
    !false # Do not generate header in separate file
    !elementTypeProxy # Type for enumerated element for "for" instruction
    !"emptyMap"
    !"map-" + [mMapTypeName fileNameRepresentation]
    !@headerKind.twoHeaders
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
#   SEMANTIC ANALYSIS                                                                                                  *
#----------------------------------------------------------------------------------------------------------------------*

map @insertMethodMap {
  insert insertKey error message "the '%K' insert setter is already declared"
}

#----------------------------------------------------------------------------------------------------------------------*

map @searchMethodMap {
  insert insertKey error message "the '%K' search method is already declared"
}

#----------------------------------------------------------------------------------------------------------------------*

proc check_K_escapeCharacters ?@lstring inString {  #--- Check escape sequences : only %K or %%
  for components in [[inString string] componentsSeparatedByString !"%%"] do
    @stringlist explodedArray = [components.mValue componentsSeparatedByString !"%"]
    [!?explodedArray popFirst ?*]
    for () in explodedArray do
      if [mValue length] > 0 then
        let @char c = [mValue characterAtIndex !0]
        if c != 'K' then
          error inString: "only '%K' and '%%' escape sequences are allowed in this error message"
        end
      end
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc check_K_L_escapeCharacters ?@lstring inString {  #--- Check escape sequences : only %K, %L or %%
  for components in [[inString string] componentsSeparatedByString !"%%"] do
    @stringlist explodedArray = [components.mValue componentsSeparatedByString !"%"]
    [!?explodedArray popFirst ?*]
    for () in explodedArray do
      if [mValue length] > 0 then
        let @char c = [mValue characterAtIndex !0]
        if (c != 'K') & (c != 'L') then
          error inString: "only '%K', '%L' and '%%' escape sequences are allowed in this error message"
        end
      end
    end
  end
}

#----------------------------------------------------------------------------------------------------------------------*

private func %once forbiddenKeysForMap -> @stringset outResult {
  outResult = {}
  outResult += !"lkey"
  outResult += !"description"
  outResult += !"object"
}

#----------------------------------------------------------------------------------------------------------------------*

override method @mapDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!mMapTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!mMapTypeName.string + "-element" !mMapTypeName})
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
#------ Enter attributes
  var typedAttributeList =@typedPropertyList {}
  var attributeMap =@attributeIndexMap.emptyMap{}
  for () in mPropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mPropertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !propertyTypeNameForUsefulness]
    @unifiedTypeMap-proxy t = .searchKey{!inSemanticContext.mTypeMap !mPropertyTypeName}
    @bool hasSetter = true
    @bool hasGetter = true
    typedAttributeList +=
      !t
      !mPropertyName
      !hasSetter
      !hasGetter
    if [forbiddenKeysForMap () hasKey !mPropertyName.string] then
      @string m = "a property cannot be named:"
      for s in forbiddenKeysForMap () do
        m+= " " + s
      end
      m += "; theses names are reserved"
      error mPropertyName: m
    end
    [!?attributeMap insertKey !mPropertyName !t]
  end
#--- Enter insert setters
  var insertMethodMap =@insertMethodMap.emptyMap{}
  for () in mInsertMethodList do
    [!?insertMethodMap insertKey !mInsertMethodName]
    check_K_L_escapeCharacters ( !mErrorMessage )
    check_K_L_escapeCharacters ( !mShadowErrorMessage )
  end
#--- Enter search methods
  var searchMethodMap =@searchMethodMap.emptyMap{}
  for () in mSearchMethodList do
    [!?searchMethodMap insertKey !mSearchMethodName]
    check_K_escapeCharacters ( !mErrorMessage )
  end
#--- Enter remove methods
  for () in mRemoveMethodList do
    [!?insertMethodMap insertKey !mMethodName]
    check_K_escapeCharacters ( !mErrorMessage )
  end
#--- Warn for duplicated declarations or 'insertOrReplace' setter
  for () in mInsertOrReplaceDeclarationListAST do(IDX)
    if IDX > 0 then
      warning mInsertOrReplaceDeclarationLocation: "the 'insertOrReplace' setter is already declared"
    end
  end
  let @bool hasInsertOrReplaceModifier = [mInsertOrReplaceDeclarationListAST length] > 0
  if hasInsertOrReplaceModifier & [insertMethodMap hasKey !"insertOrReplace"] then
    @location insertOrReplaceDeclarationLocation
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceDeclarationLocation]
    error insertOrReplaceDeclarationLocation : "the insertOrReplace' setter cannot be declared : an insert setter or a remove setter has been declared with this name"
  end
#--- Enter map declaration
  ioSemanticDeclarationListForGeneration +=
    !"map " + mMapTypeName
    !@mapTypeForGeneration.new {
      !@unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !mMapTypeName}
      !@unifiedTypeMap-proxy.searchKey {!inSemanticContext.mTypeMap !@lstring.new {!mMapTypeName.string + elementTypeNameSuffix () !mMapTypeName.location}}
      !mMapTypeName
      !typedAttributeList
      !mInsertMethodList
      !mSearchMethodList
      !mRemoveMethodList
      !hasInsertOrReplaceModifier
    }
}
  
#----------------------------------------------------------------------------------------------------------------------*
#   CODE GENERATION                                                                                                    *
#----------------------------------------------------------------------------------------------------------------------*

class @mapTypeForGeneration : @semanticTypeForGeneration {
  @unifiedTypeMap-proxy mElementTypeProxy
  @lstring mMapTypeName
  @typedPropertyList mTypedAttributeList
  @insertMethodListAST mInsertMethodList
  @mapSearchMethodListAST mSearchMethodList
  @mapRemoveMethodListAST mRemoveMethodList
  @bool mHasInsertOrReplaceModifier
}

#----------------------------------------------------------------------------------------------------------------------*

override method @mapTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  outHeader = [filewrapper typeGenerationTemplate.mapTypeHeader1
    ![mTypeProxy key]
    ![mTypeProxy identifierRepresentation]
    !mTypedAttributeList
    !mSearchMethodList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![mTypeProxy key]
    ![mTypeProxy identifierRepresentation]
    ![mTypeProxy mIsConcrete]
    ![mTypeProxy mConstructorMap]
    ![mTypeProxy mGetterMap]
    ![mTypeProxy mSetterMap]
    ![mTypeProxy mInstanceMethodMap]
    ![mTypeProxy mClassMethodMap]
    ![mTypeProxy mEnumerationDescriptor]
    ![mTypeProxy mHandledOperatorFlags]
    ![mTypeProxy mAddAssignOperatorArguments]
    ![mTypeProxy mTypeForEnumeratedElement]
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @mapTypeForGeneration appendDeclaration2
  ?let @string unused inOutputDirectory
  ?!@stringset ioInclusionSet
  !@string outHeader {
  for (t ...) in mTypedAttributeList do
    [t addHeaderFileName1 !?ioInclusionSet]
  end

  outHeader = [filewrapper typeGenerationTemplate.mapTypeHeader2
    ![mTypeProxy key]
    ![mTypeProxy identifierRepresentation]
    !mTypedAttributeList
  ]
}

#----------------------------------------------------------------------------------------------------------------------*

override method @mapTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  [mElementTypeProxy addHeaderFileName !?ioInclusionSet]
  [mTypeProxy addHeaderFileName !?ioInclusionSet]
  outImplementation = [filewrapper typeGenerationTemplate.mapTypeSpecificImplementation
    ![mTypeProxy identifierRepresentation]
    !mTypedAttributeList
    !mInsertMethodList
    !mSearchMethodList
    !mRemoveMethodList
    !mHasInsertOrReplaceModifier
  ]
}

#----------------------------------------------------------------------------------------------------------------------*
