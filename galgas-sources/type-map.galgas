#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @insertMethodListAST {
  public let @lstring mInsertMethodName
  public let @lstring mErrorMessage
  public let @lstring mShadowErrorMessage
}

#·······················································································································

list @mapSearchMethodListAST {
  public let @lstring mSearchMethodName
  public let @lstring mErrorMessage
  public let @bool mLocationAttribute
}

#·······················································································································

list @mapRemoveMethodListAST {
  public let @lstring mMethodName
  public let @lstring mErrorMessage
}

#·······················································································································

list @insertOrReplaceDeclarationListAST {
  public let @location mInsertOrReplaceDeclarationLocation
}

#·······················································································································

refclass @mapDeclarationAST : @semanticDeclarationAST {
  private let @lstring mMapTypeName
  private let @lstringlist mAttributeList
  private let @propertyInCollectionListAST mPropertyList
  private let @insertMethodListAST mInsertMethodList
  private let @mapSearchMethodListAST mSearchMethodList
  private let @mapRemoveMethodListAST mRemoveMethodList
  private let @insertOrReplaceDeclarationListAST mInsertOrReplaceDeclarationListAST
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @mapDeclarationAST keyRepresentation ->@string result {
  result = "map @" + self.mMapTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································
  
  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $map$
  #--- Map type name
    $@type$ ?let @lstring mMapTypeName indexing mapDefinition, structDefinition "-element"
  #--- Map attributes
    var @lstringlist mapAttributeList = {}
    repeat
    while
      $%attribute$ ?let attribute
      mapAttributeList += !attribute
    end
  #--- Map properties
    ${$
    var propertyList = @propertyInCollectionListAST {}
    var mInsertMethodList = @insertMethodListAST {}
    var @mapSearchMethodListAST mSearchMethodList = {}
    var @mapRemoveMethodListAST mRemoveMethodList = {}
    var @insertOrReplaceDeclarationListAST insertOrReplaceDeclarationListAST = {}
    repeat
    while
      <property_declaration_ggs3> !? propertyList
    while
      <map_insert_setter_declaration> !? mInsertMethodList
    while
      <search_declaration> !?mSearchMethodList
    while
      <remove_declaration> !?mRemoveMethodList
    while
      <insert_or_replace_declaration> !?insertOrReplaceDeclarationListAST
    while
      <method_declaration> !mMapTypeName !?ioDeclarations
    end
    $}$
    ioDeclarations.mDeclarationList += !@mapDeclarationAST.new {
      !false # Is not predefined
      !mMapTypeName
      !mapAttributeList
      !propertyList
      !mInsertMethodList
      !mSearchMethodList
      !mRemoveMethodList
      !insertOrReplaceDeclarationListAST
    }
  }
  
  #·····················································································································

  rule <search_declaration> ?!@mapSearchMethodListAST ioMapSearchMethodListAST {
    $search$
    $identifier$ ?let @lstring methodName
    let @bool locationAttribute
    select
      locationAttribute = false
    or
      $%attribute$ ?let attribute
      if attribute.string == "location" then
        locationAttribute = true
      else
        error attribute : "only the %location is allowed here" : locationAttribute fixit { replace "%location" }
      end
    end
    $error$
    $message$
    $"string"$ ?let @lstring errorMessage
    ioMapSearchMethodListAST += !methodName !errorMessage !locationAttribute
  }

  #·····················································································································

  rule <remove_declaration> ?!@mapRemoveMethodListAST ioMapRemoveMethodListAST {
    $remove$
    $identifier$ ?let @lstring mMethodName
    $error$
    $message$
    $"string"$ ?let @lstring mErrorMessage
    ioMapRemoveMethodListAST += !mMethodName !mErrorMessage
  }

  #·····················································································································

  rule <insert_or_replace_declaration> ?!@insertOrReplaceDeclarationListAST ioInsertOrReplaceDeclarationListAST {
    $insert$
    $or$
    $replace$
    ioInsertOrReplaceDeclarationListAST += !@location.here
  }

  #·····················································································································

  rule <map_insert_setter_declaration> ?!@insertMethodListAST ioMapMethodList {
    $insert$
    $identifier$ ?let @lstring mMethodName
    $error$
    $message$
    $"string"$ ?let @lstring mErrorMessage
    let @lstring mShadowErrorMessage
    select
      mShadowErrorMessage = @lstring.new {!"" !@location.here}
    or
      $,$
      $"string"$ ? mShadowErrorMessage
    end
    ioMapMethodList +=
      !mMethodName
      !mErrorMessage
      !mShadowErrorMessage
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································
  
  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $map$
  #--- Map type name
    $@type$ ?let @lstring mMapTypeName indexing mapDefinition, structDefinition "-element"
  #--- Map attributes
    var @lstringlist mapAttributeList = {}
    repeat
    while
      $%attribute$ ?let attribute
      mapAttributeList += !attribute
    end
  #--- Map properties
    ${$
    var propertyList = @propertyInCollectionListAST {}
    var mInsertMethodList = @insertMethodListAST {}
    var @mapSearchMethodListAST mSearchMethodList = {}
    var @mapRemoveMethodListAST mRemoveMethodList = {}
    var @insertOrReplaceDeclarationListAST insertOrReplaceDeclarationListAST = {}
    repeat
    while
      <property_declaration> !? propertyList
    while
      <map_insert_setter_declaration> !? mInsertMethodList
    while
      <search_declaration> !?mSearchMethodList
    while
      <remove_declaration> !?mRemoveMethodList
    while
      <insert_or_replace_declaration> !?insertOrReplaceDeclarationListAST
    while
      <method_declaration> !mMapTypeName !?ioDeclarations
    end
    $}$
    ioDeclarations.mDeclarationList += !@mapDeclarationAST.new {
      !false # Is not predefined
      !mMapTypeName
      !mapAttributeList
      !propertyList
      !mInsertMethodList
      !mSearchMethodList
      !mRemoveMethodList
      !insertOrReplaceDeclarationListAST
    }
  }
  
  #·····················································································································

  rule <search_declaration> ?!@mapSearchMethodListAST ioMapSearchMethodListAST {
    $search$
    $identifier$ ?let @lstring methodName
    let @bool locationAttribute
    select
      locationAttribute = false
    or
      $%attribute$ ?let attribute
      if attribute.string == "location" then
        locationAttribute = true
      else
        error attribute : "only the %location is allowed here" : locationAttribute fixit { replace "%location" }
      end
    end
    $error$
    $message$
    $"string"$ ?let @lstring errorMessage
    ioMapSearchMethodListAST += !methodName !errorMessage !locationAttribute
  }

  #·····················································································································

  rule <remove_declaration> ?!@mapRemoveMethodListAST ioMapRemoveMethodListAST {
    $remove$
    $identifier$ ?let @lstring mMethodName
    $error$
    $message$
    $"string"$ ?let @lstring mErrorMessage
    ioMapRemoveMethodListAST += !mMethodName !mErrorMessage
  }

  #·····················································································································

  rule <insert_or_replace_declaration> ?!@insertOrReplaceDeclarationListAST ioInsertOrReplaceDeclarationListAST {
    $insert$
    $or$
    $replace$
    ioInsertOrReplaceDeclarationListAST += !@location.here
  }

  #·····················································································································

  rule <map_insert_setter_declaration> ?!@insertMethodListAST ioMapMethodList {
    $insert$
    $identifier$ ?let @lstring mMethodName
    $error$
    $message$
    $"string"$ ?let @lstring mErrorMessage
    let @lstring mShadowErrorMessage
    select
      mShadowErrorMessage = @lstring.new {!"" !@location.here}
    or
      $,$
      $"string"$ ? mShadowErrorMessage
    end
    ioMapMethodList +=
      !mMethodName
      !mErrorMessage
      !mShadowErrorMessage
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ASSOCIATED ELEMENT                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList {
  var structAttributeList = @propertyInCollectionListAST {}
  structAttributeList +=
    !isConstant: false
    !["lstring" nowhere]
    !["lkey" nowhere]
    !.publicAccess
    !{}
    !.none
  for (* qualifiedTypeAST mPropertyName * * initExpression) in self.mPropertyList do
    structAttributeList +=
      !isConstant: false
      !qualifiedTypeAST
      !mPropertyName
      !.publicAccess
      !{}
      !initExpression
  end
  ioSemanticDeclarationList += !@structDeclarationAST.new {
    !self.mIsPredefined
    !@lstring.new {!self.mMapTypeName.string + elementTypeNameSuffix () !self.mMapTypeName.location}
    !structAttributeList
    !""
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"@" + self.mMapTypeName !self.mMapTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for (* propertyTypeName 4*) in self.mPropertyList do
    [!?ioSemanticTypePrecedenceGraph noteNode !@lstring.new {!"@" + propertyTypeName !propertyTypeName.location}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN SEMANTIC CONTEXT               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
#--- string type index
  [!?ioTypeMap makeEntryFromString !"string" ?let stringTypeIndex]
#--- location type index
  [!?ioTypeMap makeEntryFromString !"location" ?let locationTypeEntry]
#--- lstring type index
  [!?ioTypeMap makeEntryFromString !"lstring" ?let lstringTypeIndex]
#--- Enumeration description
  var @enumerationDescriptorList enumerationDescriptor = {!lstringTypeIndex !"lkey"}
#--- Attributes
  var usesSelectorsInInsertAndSearch = false
  var activateSuggestion = true
  for (s) in self.mAttributeList do
    if s.string == "selectors" then
      if usesSelectorsInInsertAndSearch then
        error s : "duplicated attribute"
      end
      usesSelectorsInInsertAndSearch = true
    elsif s.string == "noSuggestion" then
      if not activateSuggestion then
        error s : "duplicated attribute"
      end
      activateSuggestion = false
    else
      error s : "unknown attribute"
    end
  end
#---
  var @constructorMap constructorMap = {}
  commonGetterMapForAllTypes (!?ioTypeMap ?var @getterMap getterMap)
  var @setterMap setterMap = {}
  var @instanceMethodMap instanceMethodMap = {}
#--- Constructors
  enterConstructorWithoutArgument (
    !?constructorMap
    !?ioTypeMap
    !name:"emptyMap"
    !resultTypeName:self.mMapTypeName.string
    !hasLexiqueArg:false
  )
  enterConstructorWithArgument (
    !?constructorMap
    !?ioTypeMap
    !name:"mapWithMapToOverride"
    !argTypeName:self.mMapTypeName.string
    !argName:"inMap"
    !resultTypeName:self.mMapTypeName.string
    !hasLexiqueArg:false
  )
#--- Getters
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"levels"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWith2Arguments (
    !?getterMap
    !?ioTypeMap
    !"hasKeyAtLevel"
    !"string"
    !"inKey"
    !"uint"
    !"inLevel"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"keySet"
    !returnedTypeName:"stringset"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"keyList"
    !returnedTypeName:"lstringlist"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"hasKey"
    !argumentTypeName:"string"
    !argumentName:"inKey"
    !returnedTypeName:"bool"
    !hasCompilerArgument:false
  )
  enterInheritedGetterWithArgument (
    !?getterMap
    !?ioTypeMap 
    !getterName:"locationForKey"
    !argumentTypeName:"string"
    !argumentName:"inKey" 
    !returnedTypeName:"location"
    !hasCompilerArgument:true
  )
  enterBaseGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName: "overriddenMap"
    !returnedTypeName:self.mMapTypeName.string
    !hasCompilerArgument:true
  )
  enterInheritedGetterWithoutArgument (
    !?getterMap
    !?ioTypeMap
    !getterName:"count"
    !returnedTypeName:"uint"
    !hasCompilerArgument:false
  )
#--- Handle properties
  var insertMethodFormalArgumentList = @formalParameterSignature {}
  var typedPropertyList = @typedPropertyList {}
  var @optionalMethodSignature optionalMethodSignature = {}
  optionalMethodSignature +=
    !true
    ![if usesSelectorsInInsertAndSearch then "key" else "" end nowhere]
    !stringTypeIndex
    !"inKey"
  var @functionSignature argumentTypeListForAddAssignWithFieldExpressionList = {}
  argumentTypeListForAddAssignWithFieldExpressionList += !["" nowhere] !lstringTypeIndex !"lkey"
  insertMethodFormalArgumentList +=
    ![if usesSelectorsInInsertAndSearch then "lkey" else "" end nowhere]
    !lstringTypeIndex
    !@formalArgumentPassingModeAST.argumentConstantIn
    !"inLKey"
  var @formalParameterSignature removeMethodFormalArgumentList = {}
  removeMethodFormalArgumentList +=
    ![if usesSelectorsInInsertAndSearch then "lkey" else "" end nowhere]
    !lstringTypeIndex
    !@formalArgumentPassingModeAST.argumentConstantIn
    !"inLKey"
  var @unifiedTypeMapEntryList typesToIncludeInHeaderCompilation = {}
  for (* propertyTypeName mPropertyName * mAttributeList initExpression) in self.mPropertyList do
    if [initExpression isSome] then
      error mPropertyName : "property initialization is not handled for a map"
    end
    [!?ioTypeMap makeEntry !propertyTypeName ?let attributeTypeIndex]
    var hasSelector = false
    for (attribute) in mAttributeList do
      if attribute.string == "selector" then
        hasSelector = true
        if hasSelector && usesSelectorsInInsertAndSearch then
          warning attribute : "%selector useless, map has %selectors attributes"
        end
      end
    end
    argumentTypeListForAddAssignWithFieldExpressionList += !["" nowhere] !attributeTypeIndex !mPropertyName.string
    typedPropertyList += !attributeTypeIndex !mPropertyName !hasSetter: true !hasSelector
    typesToIncludeInHeaderCompilation += !attributeTypeIndex
    enumerationDescriptor += !attributeTypeIndex !mPropertyName.string
    insertMethodFormalArgumentList +=
      !if usesSelectorsInInsertAndSearch || hasSelector then mPropertyName else ["" nowhere] end
      !attributeTypeIndex
      !.argumentConstantIn
      !mPropertyName.string
    removeMethodFormalArgumentList +=
      !if usesSelectorsInInsertAndSearch || hasSelector then mPropertyName else ["" nowhere] end
      !attributeTypeIndex
      !.argumentOut
      !mPropertyName.string
    optionalMethodSignature +=
      !false
      !if usesSelectorsInInsertAndSearch || hasSelector then mPropertyName else ["" nowhere] end
      !attributeTypeIndex
      !mPropertyName.string
  end
#--- Handle insert setters
  for (mInsertMethodName * *) in self.mInsertMethodList do
    if [setterMap hasKey !mInsertMethodName.string] then
      error mInsertMethodName:"the '" + mInsertMethodName + "' insert method is already declared"
    else
      [!?setterMap insertOrReplace
        !mInsertMethodName
        !@methodKind.definedAsMember
        !insertMethodFormalArgumentList
        !true
        !@methodQualifier.isBasic
        !""
      ]
    end
  end
#--- Handle remove setters
  for (mMethodName *) in self.mRemoveMethodList do
    if [setterMap hasKey !mMethodName.string] then
      error mMethodName:"the '" + mMethodName + "' method is already declared as an insert setter or a remove setter"
    else
      [!?setterMap insertOrReplace
        !mMethodName
        !.definedAsMember
        !removeMethodFormalArgumentList
        !true
        !.isBasic
        !""
      ]
    end
  end
#--- Handle search methods (methods if no state, setters if states)
  for (mSearchMethodName * mLocationAttribute) in self.mSearchMethodList do
    var searchMethodFormalArgumentList = removeMethodFormalArgumentList
    if mLocationAttribute then
      searchMethodFormalArgumentList +=
        !if usesSelectorsInInsertAndSearch then ["keyLocation" nowhere] else ["" nowhere] end
        !locationTypeEntry
        !.argumentOut
        !"outKeyLocation"
    end
    [!?instanceMethodMap insertKey
      !mSearchMethodName
      !.definedAsMember
      !searchMethodFormalArgumentList
      !mSearchMethodName.location
      !true
      !.isBasic
      !"" # No error message
    ]
  end
#--- Enter "attributeForKey" getters
  for (* propertyTypeName mPropertyName 3*) in self.mPropertyList do
    let accessorName = @lstring.new {!mPropertyName.string + "ForKey" !mPropertyName.location}
    [!?ioTypeMap makeEntry !propertyTypeName ?let attributeTypeIndex]
    [!?getterMap insertOrReplace
      !accessorName
      !.definedAsMember
      !@functionSignature {!["" nowhere] !stringTypeIndex !"inKey"}
      !.here
      !true
      !attributeTypeIndex
      !.isBasic
      !"" # No Error message
    ]
  end
#---------- Handle "insertOrReplace" setter
  if [self.mInsertOrReplaceDeclarationListAST length] >= 1 then
    [self.mInsertOrReplaceDeclarationListAST first ?let insertOrReplaceLocation]
    [!?setterMap insertOrReplace
      !@lstring.new {!"insertOrReplace" !insertOrReplaceLocation}
      !.definedAsMember
      !insertMethodFormalArgumentList
      !false
      !.isBasic
      !"" # No error message
    ]
  end
#---------- Enter "set...Attribute...forKey" setters, and 'with' accessor
  for (* propertyTypeName mPropertyName 3*) in self.mPropertyList do
    let accessorName = @lstring.new {
      !"set" + [mPropertyName.string stringByCapitalizingFirstCharacter] + "ForKey"
      !mPropertyName.location
    }
    [!?ioTypeMap makeEntry
      !propertyTypeName
      ?let @unifiedTypeMapEntry attributeTypeIndex
    ]
    var @formalParameterSignature accessorFormalArgumentList = {}
    accessorFormalArgumentList += !["" nowhere] !attributeTypeIndex !.argumentConstantIn !mPropertyName.string
    accessorFormalArgumentList += !["" nowhere] !stringTypeIndex !.argumentConstantIn !"key"
    [!?setterMap insertOrReplace
      !accessorName
      !@methodKind.definedAsMember
      !accessorFormalArgumentList
      !true
      !@methodQualifier.isBasic
      !"" # No error message
    ]
  end
#--- Add Optional method
  var optionalMethodMap = @optionalMethodMap {}
  [!?optionalMethodMap insertKey !["searchKey" nowhere] !optionalMethodSignature]
#--- Add extensions
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !?ioTypeMap
    !self.mMapTypeName
    !isClass: false
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: true
  )
#--- Element type index
  [!?ioTypeMap makeEntry
    !@lstring.new {!self.mMapTypeName.string + elementTypeNameSuffix () !self.mMapTypeName.location}
    ?let @unifiedTypeMapEntry elementTypeEntry
  ]
#--- Enter in type map
  let typeDefinition = @unifiedTypeDefinition.new {
    !self.mMapTypeName
    !self.mIsPredefined
    !true # Concrete Type
    !.null
    !.mapType
    !true # Support collection value
    !{}
    !{}
    !typedPropertyList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !optionalMethodMap
    !enumerationDescriptor
    !.doNotGenererateObjectCompare | .plusEqualOperatorWithFieldListNeedsCompilerArg | .supportWithAccessor | .isComparable
    !argumentTypeListForAddAssignWithFieldExpressionList
    !{}
    !{}
    !self.mSearchMethodList
    !{}
    !false # Do not generate header in separate file
    !elementTypeEntry # Type for enumerated element for "for" instruction
    !"emptyMap"
    !"map-" + [self.mMapTypeName fileNameRepresentation]
    !@headerKind.twoHeaders
  }
  [!?ioTypeMap insertType !typeDefinition.mTypeName !typeDefinition]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @insertMethodMap {
  insert insertKey error message "the '%K' insert setter is already declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @searchMethodMap {
  insert insertKey error message "the '%K' search method is already declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext unused  inSemanticContext
                                ?!@unifiedTypeMap ioTypeMap
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mMapTypeName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let elementTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new{!self.mMapTypeName.string + "-element" !self.mMapTypeName})
  [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !elementTypeNameForUsefulness]
#--- Attributes
  var usesSelectorsInInsertAndSearch = false
  var activateSuggestion = true
  for (s) in self.mAttributeList do
    if s.string == "selectors" then
      usesSelectorsInInsertAndSearch = true
    elsif s.string == "noSuggestion" then
      activateSuggestion = false
    end
  end
#------ Enter property
  var @typedPropertyList typedAttributeList = {}
  var @propertyIndexMap attributeMap = {}
  for (* propertyTypeName mPropertyName 3*) in self.mPropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!propertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !nameForUsefulness !propertyTypeNameForUsefulness]
    let @unifiedTypeMapEntry t = [ioTypeMap searchKey !propertyTypeName]
    let hasSelector = false
    typedAttributeList +=
      !t
      !mPropertyName
      !hasSetter: true
      !hasSelector
    if [forbiddenKeysForMapAndDict () hasKey !mPropertyName.string] then
      var @string m = "a property cannot be named:"
      for s in forbiddenKeysForMapAndDict () do
        m+= " " + s
      end
      m += "; theses names are reserved"
      error mPropertyName: m
    end
    [!?attributeMap insertKey !mPropertyName !t]
  end
#--- Enter insert setters
  var @insertMethodMap insertMethodMap = {}
  for (mInsertMethodName mErrorMessage mShadowErrorMessage) in self.mInsertMethodList do
    [!?insertMethodMap insertKey !mInsertMethodName]
    check_K_L_escapeCharacters (!mErrorMessage )
    check_K_L_escapeCharacters (!mShadowErrorMessage )
  end
#--- Enter search methods
  var @searchMethodMap searchMethodMap = {}
  for (mSearchMethodName mErrorMessage *) in self.mSearchMethodList do
    [!?searchMethodMap insertKey !mSearchMethodName]
    check_K_escapeCharacters (!mErrorMessage )
  end
#--- Enter remove methods
  for (mMethodName mErrorMessage) in self.mRemoveMethodList do
    [!?insertMethodMap insertKey !mMethodName]
    check_K_escapeCharacters (!mErrorMessage )
  end
#--- Warn for duplicated declarations or 'insertOrReplace' setter
  for (mInsertOrReplaceDeclarationLocation) in self.mInsertOrReplaceDeclarationListAST do(IDX)
    if IDX > 0 then
      warning mInsertOrReplaceDeclarationLocation: "the 'insertOrReplace' setter is already declared"
    end
  end
  let @bool hasInsertOrReplaceModifier = [self.mInsertOrReplaceDeclarationListAST length] > 0
  if hasInsertOrReplaceModifier & [insertMethodMap hasKey !"insertOrReplace"] then
    [self.mInsertOrReplaceDeclarationListAST first ?let insertOrReplaceDeclarationLocation]
    error insertOrReplaceDeclarationLocation 
      : "the insertOrReplace' setter cannot be declared : an insert setter or a remove setter has been declared with this name"
  end
#--- Enter map declaration
  ioSemanticDeclarationListForGeneration +=
    !"map " + self.mMapTypeName
    !@mapTypeForGeneration.new {
      ![ioTypeMap searchKey !self.mMapTypeName]
      ![ioTypeMap searchKey !.new {!self.mMapTypeName.string + elementTypeNameSuffix () !self.mMapTypeName}]
      !self.mMapTypeName
      !typedAttributeList
      !self.mInsertMethodList
      !self.mSearchMethodList
      !self.mRemoveMethodList
      !hasInsertOrReplaceModifier
      !activateSuggestion
    }
}
  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @mapTypeForGeneration : @semanticTypeForGeneration {
  private let @unifiedTypeMapEntry mElementTypeEntry
  private let @lstring mMapTypeName
  private let @typedPropertyList mTypedAttributeList
  private let @insertMethodListAST mInsertMethodList
  private let @mapSearchMethodListAST mSearchMethodList
  private let @mapRemoveMethodListAST mRemoveMethodList
  private let @bool mHasInsertOrReplaceModifier
  private let @bool mActivateSuggestions
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapTypeForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader
{
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper typeGenerationTemplate.mapTypeHeader1
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !self.mTypedAttributeList
    !self.mSearchMethodList
  ]
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry identifierRepresentation]
    !selfTypedefinition.mIsConcrete
    !selfTypedefinition.mConstructorMap
    !selfTypedefinition.mGetterMap
    !selfTypedefinition.mSetterMap
    !selfTypedefinition.mInstanceMethodMap
    !selfTypedefinition.mClassMethodMap
    !selfTypedefinition.mOptionalMethodMap
    !selfTypedefinition.mEnumerationDescriptor
    !selfTypedefinition.mHandledOperatorFlags
    !selfTypedefinition.mAddAssignOperatorArguments
    !selfTypedefinition.mTypeForEnumeratedElement
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapTypeForGeneration appendDeclaration2
  ?let @string unused inOutputDirectory
  ?!@stringset ioInclusionSet
  !@string outHeader {
  for (t 3*) in self.mTypedAttributeList do
    [t addHeaderFileName1 !?ioInclusionSet]
  end
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outHeader = [filewrapper typeGenerationTemplate.mapTypeHeader2
    !selfTypedefinition.mTypeName.string
    ![self.mSelfTypeEntry  identifierRepresentation]
    !self.mTypedAttributeList
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @mapTypeForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation {
  [self.mElementTypeEntry addHeaderFileName !?ioInclusionSet]
  [self.mSelfTypeEntry  addHeaderFileName !?ioInclusionSet]
  let selfTypedefinition = [self.mSelfTypeEntry definition]
  outImplementation = [filewrapper typeGenerationTemplate.mapTypeSpecificImplementation
    ![selfTypedefinition.mTypeName.string identifierRepresentation]
    !self.mTypedAttributeList
    !self.mInsertMethodList
    !self.mSearchMethodList
    !self.mRemoveMethodList
    !self.mHasInsertOrReplaceModifier
    !self.mActivateSuggestions
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
