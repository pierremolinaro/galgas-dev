#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @classDeclarationAST : @semanticDeclarationAST {
  private let @bool mIsAbstract
  private let @bool mIsReference
  private let @lstring mClassTypeName
  private let @lstring mSuperClassName # Empty if no super class
  private let @lstringlist mClassFeatureList
  private let @propertyInCollectionListAST mPropertyList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func weakSuffix -> @string { result = "-weak" }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    let @bool isAbstract
    select
      isAbstract = false
    or
      $abstract$
      isAbstract = true
    end
    let @bool isReference
    select
      $class$
      if [option galgas_cli_options.errorClassDeclaration value] then
        error .here : "'class' declaration is obsolete, use 'valueclass'"
      else
        warning .here : "'class' declaration is obsolete, use 'valueclass'"
      end
      isReference = false
    or
      $valueclass$
      isReference = false
    or
      $refclass$
      isReference = true
    end
    if not isReference && [option galgas_cli_options.errorValueClassDeclaration value] then
      error .here : "'value class' is obsolete, use 'refclass'"
    end
    $@type$ ?let @lstring className indexing classDefinition
    let @lstring superClassName # Empty if no super class
    select
      superClassName = ["" nowhere]
    or
      $:$
      $@type$ ? superClassName indexing classReferencedAsSuperClass
    end
    var classFeatureList = @lstringlist {}
    repeat
    while
      $%attribute$ ?let @lstring classFeatureName
      classFeatureList += !classFeatureName
    end
    ${$
  #--- Class properties
    var @propertyInCollectionListAST propertyList = {}
    repeat
    while
      <property_declaration> !? propertyList
    while
      $;$
    end
    $}$
    ioDeclarations.mDeclarationList += !@classDeclarationAST.new {
      !false # Is not predefined
      !isAbstract
      !isReference
      !className
      !superClassName # Empty if no super class
      !classFeatureList
      !propertyList
    }
    if isReference then
      ioDeclarations.mDeclarationList += !@weakReferenceDeclarationAST.new {
        !false # Is not predefined
        !className
        !.new {!className.string + weakSuffix () !className.location}
        !if superClassName.string == ""
           then superClassName
           else .new {!superClassName.string + "-weak" !superClassName.location}
         end
        !classFeatureList
        !propertyList
      }
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    let @bool isAbstract
    select
      isAbstract = false
    or
      $abstract$
      isAbstract = true
    end
    $class$
    $@type$ ?let @lstring className indexing classDefinition
    let @lstring superClassName # Empty if no super class
    select
      superClassName = ["" nowhere]
    or
      $:$
      $@type$ ? superClassName indexing classReferencedAsSuperClass
    end
    var classFeatureList = @lstringlist {}
    repeat
    while
      $%attribute$ ?let @lstring classFeatureName
      classFeatureList += !classFeatureName
    end
    ${$
  #--- Class properties
    var @propertyInCollectionListAST propertyList = {}
    repeat
    while
      <property_declaration> !? propertyList
    while
      $;$
    end
    $}$
    ioDeclarations.mDeclarationList += !@classDeclarationAST.new {
      !false # Is not predefined
      !isAbstract
      !true
      !className
      !superClassName # Empty if no super class
      !classFeatureList
      !propertyList
    }
  #--- Assiciated Weak Type
    ioDeclarations.mDeclarationList += !@weakReferenceDeclarationAST.new {
      !false # Is not predefined
      !className
      !.new {!className.string + weakSuffix () !className.location}
      !if superClassName.string == ""
         then superClassName
         else .new {!superClassName.string + "-weak" !superClassName.location}
       end
      !classFeatureList
      !propertyList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @classDeclarationAST keyRepresentation -> @string {
  result = "valueclass @" + self.mClassTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"@" + self.mClassTypeName !self.mClassTypeName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  if self.mSuperClassName.string != "" then
    [!?ioSemanticTypePrecedenceGraph addEdge
      !key
      !.new {!"@" + self.mSuperClassName !self.mSuperClassName.location}
    ]
  end
#  if not self.mIsReference then
    for (* mPropertyTypeName * * *) in self.mPropertyList do
      [!?ioSemanticTypePrecedenceGraph addEdge
        !key !@lstring.new {!"@" + mPropertyTypeName !self.mSuperClassName.location}
      ]
    end
#  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classDeclarationAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
  ?!@semanticContext ioSemanticContext
{
  var @getterMap getterMap
  var @setterMap setterMap
  var @instanceMethodMap instanceMethodMap
  let @typedPropertyList inheritedTypedPropertyList
  var @propertyMap attributeMap = {}
#--- Handle super class
  let @unifiedTypeMap-entry superClassIndex
  var @bool generateHeaderInSeparateFile
  if self.mSuperClassName.string == "" then
    superClassIndex = @unifiedTypeMap-entry.null
    commonGetterMapForAllTypes (!?ioSemanticContext.mTypeMap ?getterMap )
    setterMap = {}
    instanceMethodMap = {}
    inheritedTypedPropertyList = {}
    attributeMap = {}
    generateHeaderInSeparateFile = false
    for (mValue) in self.mClassFeatureList do
      if mValue.string == "generatedInSeparateFile" then
        generateHeaderInSeparateFile = true
      end
    end
  else
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !self.mSuperClassName ?superClassIndex]
    [ioSemanticContext.mTypeMap searchKey
      !self.mSuperClassName
      ?3*
      ?let typeKindEnum
      ?*
      ?inheritedTypedPropertyList
      ?attributeMap
      ?2*
      ?let inheritedGetterMap
      ?let inheritedSetterMap
      ?let inheritedMethodMap
      ?9*
      ?generateHeaderInSeparateFile
      ?4*
    ]
  #---
    if not [typeKindEnum isClassType] then
      error self.mSuperClassName : "the @" + self.mSuperClassName + " should be a class type"
    end
  #--- Mark all setters as inherited
    setterMap = {}
    for (lkey mKind mParameterList mHasCompilerArgument * *) in inheritedSetterMap do
      [!?setterMap insertKey
        !lkey
        !mKind
        !mParameterList
        !mHasCompilerArgument
        !.isInherited
        !"" # No error message
      ] 
    end
  #--- Mark all getters as inherited
    getterMap = {}
    for (lkey mKind mArgumentTypeList mDeclarationLocation mHasCompilerArgument mReturnedType * mErrorMessage) in inheritedGetterMap do
      [!?getterMap insertKey
        !lkey
        !mKind
        !mArgumentTypeList
        !mDeclarationLocation
        !mHasCompilerArgument
        !mReturnedType
        !.isInherited
        !mErrorMessage
      ] 
    end
  #--- Mark all methods as inherited
    instanceMethodMap = {}
    for (lkey mKind mParameterList mDeclarationLocation mHasCompilerArgument * mutability mErrorMessage) in inheritedMethodMap do
      [!?instanceMethodMap insertKey
        !lkey
        !mKind
        !mParameterList
        !mDeclarationLocation
        !mHasCompilerArgument
        !.isInherited
        !mutability
        !mErrorMessage
      ] 
    end
  end
#--- Build attribute Map and constructor argument list
  var @functionSignature constructorPropertyTypeList = {}
  for (mPropertyTypeEntry mPropertyName * mHasSelector) in inheritedTypedPropertyList do
    constructorPropertyTypeList +=
      !if mHasSelector then mPropertyName else ["" nowhere] end
      !mPropertyTypeEntry
      !mPropertyName.string
  end
  for (isConstant mPropertyTypeName mPropertyName mIsPublic mAttributeList) in self.mPropertyList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    var hasSelector = false
    for (attribute) in mAttributeList do
      if attribute.string == "selector" then
        if hasSelector then
          error attribute : "duplicated attribute" fixit { remove }
        end
        hasSelector = true
      end
    end
    constructorPropertyTypeList += 
      !if hasSelector then mPropertyName else ["" nowhere] end
      !attributeTypeIndex
      !mPropertyName.string
    [!?attributeMap insertKey
      !mPropertyName
      !mIsPublic
      !isConstant
      !attributeTypeIndex
    ]
    if [getterMap hasKey !mPropertyName.string] then
      error mPropertyName: "'" + mPropertyName + "' is the name of a prefefined or a user defined getter"
    end
  end
#--- Current class Index
  [@unifiedTypeMap-entry makeEntry
     !?ioSemanticContext.mTypeMap
     !self.mClassTypeName
     ?let @unifiedTypeMap-entry classIndex
  ]
#--- Constructors
  var @constructorMap constructorMap = {}
  if not self.mIsAbstract then
    [!?constructorMap insertKey
      !@lstring.new {!"new" !@location.here}
      !constructorPropertyTypeList
      !false
      !classIndex
    ]
  end
#--- Typed attribute list
  var @typedPropertyList currentClassTypedPropertyList = {}
  var @typedPropertyList allTypedAttributeList = inheritedTypedPropertyList
  for (* mPropertyTypeName mPropertyName isPublic mAttributeList) in self.mPropertyList do
    [@unifiedTypeMap-entry makeEntry !?ioSemanticContext.mTypeMap !mPropertyTypeName ?let attributeTypeIndex]
    var hasSelector = false
    for (mValue) in mAttributeList do
      if mValue.string == "setter" then
        warning mValue : "'%nogetter' is obsolete and has no effect"
      elsif mValue.string == "nogetter" then
        warning mValue : "'%setter' is obsolete and has no effect"
      elsif mValue.string == "selector" then
        hasSelector = true
      end
    end
    currentClassTypedPropertyList += !attributeTypeIndex !mPropertyName !isPublic !hasSelector
    allTypedAttributeList += !attributeTypeIndex !mPropertyName !isPublic !hasSelector
  end
#--- set...attribute setter
  for (mPropertyTypeEntry mPropertyName mHasSetter *) in currentClassTypedPropertyList do
    if mHasSetter then
      [!?setterMap insertKey
        !@lstring.new {!"set"+ [mPropertyName.string stringByCapitalizingFirstCharacter] !@location.here}
        !@methodKind.definedAsMember
        !{!["" nowhere] !mPropertyTypeEntry !@formalArgumentPassingModeAST.argumentIn !mPropertyName.string}
        !false # Compiler argument
        !@methodQualifier.isBasicFinal
        !"" # No error message
      ]
    end
  end
#--- Add Extensions
  addExtensions (
    !inExtensionMethodMapForBuildingContext
    !inExtensionGetterMapForBuildingContext
    !inExtensionSetterMapForBuildingContext
    !?ioSemanticContext
    !self.mClassTypeName
    !?getterMap
    !?setterMap
    !?instanceMethodMap
    !acceptSetters: not self.mIsReference
  )
#--- Generate a "default" constructor ?
  var @string defaultConstructorName = if self.mIsAbstract then "" else "default" end
  for (propertyTypeEntry 3*) in allTypedAttributeList while defaultConstructorName != "" do
    if [propertyTypeEntry mDefaultConstructorName] == "" then 
      defaultConstructorName = ""
    end
  end
#--- Enter in type map
  [!?ioSemanticContext.mTypeMap insertKey
    !self.mClassTypeName
    !self.mIsPredefined
    !not self.mIsAbstract # Concrete Type
    !superClassIndex
    !@typeKindEnum.classType {!isReference: self.mIsReference}
    !false # Does not support collection value
    !allTypedAttributeList
    !attributeMap
    !currentClassTypedPropertyList
    !constructorMap
    !getterMap
    !setterMap
    !instanceMethodMap
    !{}
    !@optionalMethodMap {}
    !{}
    !if self.mIsReference then .isReferenceEquatable else .isComparable end
    !{}
    !{}
    !{}
    !{}
    !{}
    !generateHeaderInSeparateFile
    !@unifiedTypeMap-entry.null # Type for enumerated element for "for" instruction
    !defaultConstructorName # Default constructor name
    !"class-" + [self.mClassTypeName fileNameRepresentation]
    !@headerKind.twoHeaders
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classDeclarationAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let classTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mClassTypeName)
  [!?ioUsefulEntitiesGraph addNode !classTypeNameForUsefulness !classTypeNameForUsefulness]
  if self.mSuperClassName.string != "" then
    let superClassNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mSuperClassName)
    [!?ioUsefulEntitiesGraph addEdge !classTypeNameForUsefulness !superClassNameForUsefulness]
  end
  if self.mIsReference then
    let weakRefTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!.new {!self.mClassTypeName.string + weakSuffix () !self.mClassTypeName})
    [!?ioUsefulEntitiesGraph addEdge !classTypeNameForUsefulness !weakRefTypeNameForUsefulness]
  end
#------ Self type
  let @unifiedTypeMap-entry selfType = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mClassTypeName}
#--- Super class type
  let superClassEntry = if self.mSuperClassName.string == ""
    then @unifiedTypeMap-entry.null
    else @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mSuperClassName}
  end
#------ check "reference" status:
# a base class can be freely declared as shared or not
# a class should the same 'reference' status as its super class
  if superClassEntry != .null then
    [[superClassEntry mTypeKindEnum] classType ?isReference: let superClassIsReference]
    if superClassIsReference & not self.mIsReference then
      error self.mClassTypeName : "this class should be declared by 'refClass', as its super class"
    elsif not superClassIsReference & self.mIsReference then
      error self.mClassTypeName : "this class should be declared by 'valueclass', as its super class"
    end
  end
#------ Super type, and class features
# A class that has a super may not have any feature
# A class without a super class admits the 'generatedInSeparateFile' feature
  var @typedPropertyList allAttributeList
  if superClassEntry == .null then
    allAttributeList = {}
    var @bool generatedInSeparateFileFeature = false
    if [self.mClassFeatureList length] > 0 then
      for (mValue) in self.mClassFeatureList do
        if mValue.string == "generatedInSeparateFile" then
          if generatedInSeparateFileFeature then
            error mValue:"the 'generatedInSeparateFile' is already named"
          end
          generatedInSeparateFileFeature = true
        else
          error mValue:"only the 'generatedInSeparateFile' attribute is allowed here"
        end
      end
    end
  else
    allAttributeList = [superClassEntry mAllTypedPropertyList]
    if [self.mClassFeatureList length] > 0 then
      for (mValue) in self.mClassFeatureList do
        error mValue:"a class that has a super class does not accept any feature"
      end
    end
  end
#------ Enter attributes
  var @typedPropertyList typedAttributeList = {}
  var @propertyIndexMap attributeMap = {}
  for (* mPropertyTypeName mPropertyName isPublic mAttributeList) in self.mPropertyList do
    let propertyTypeNameForUsefulness = typeNameForUsefulEntitiesGraph (!mPropertyTypeName)
    [!?ioUsefulEntitiesGraph addEdge !classTypeNameForUsefulness !propertyTypeNameForUsefulness]
    let t = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !mPropertyTypeName}
    var hasSelector = false
    for (mValue) in mAttributeList while not hasSelector do
      hasSelector = mValue.string == "selector"
    end
    typedAttributeList +=
      !t
      !mPropertyName
      !isPublic
      !hasSelector
    allAttributeList +=
      !t
      !mPropertyName
      !isPublic
      !hasSelector
    [!?attributeMap insertKey !mPropertyName !t]
  end
#------
  ioSemanticDeclarationListForGeneration +=
    !"class " + self.mClassTypeName
    !@classTypeForGeneration.new {
      !selfType
      !self.mIsAbstract
      !self.mIsReference
      !superClassEntry
      !allAttributeList
      !typedAttributeList
      ![selfType mGenerateHeaderInSeparateFile]
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @classTypeForGeneration : @semanticTypeForGeneration {
  private let @bool mIsAbstract
  private let @bool mIsReference
  private let @unifiedTypeMap-entry mSuperClass # Null if no super class
  private let @typedPropertyList mAllTypedAttributeList # Inherited followed by current attributes
  private let @typedPropertyList mCurrentTypedAttributeList
  private let @bool mGenerateHeaderInSeparateFile # Significant only for classes
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classTypeForGeneration appendDeclaration1 ?!@stringset ioInclusionSet
                                                           !@string outHeader {
  if not [self.mSuperClass isNull] then
    [self.mSuperClass addHeaderFileName !?ioInclusionSet]
  end

  if self.mIsReference then
    outHeader = [filewrapper typeGenerationTemplate.referenceClassTypeHeader1
      ![self.mSelfTypeEntry key]
      ![self.mSelfTypeEntry identifierRepresentation]
      !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
      !self.mIsAbstract
      ![self.mSelfTypeEntry mDefaultConstructorName] != ""
      !self.mCurrentTypedAttributeList
    ]
  else
    outHeader = [filewrapper typeGenerationTemplate.valueClassTypeHeader1
      ![self.mSelfTypeEntry key]
      ![self.mSelfTypeEntry identifierRepresentation]
      !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
      !self.mIsAbstract
      ![self.mSelfTypeEntry mDefaultConstructorName] != ""
      !self.mCurrentTypedAttributeList
    ]  
  end
  outHeader += [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![self.mSelfTypeEntry key]
    ![self.mSelfTypeEntry identifierRepresentation]
    ![self.mSelfTypeEntry mIsConcrete]
    ![self.mSelfTypeEntry mConstructorMap]
    ![self.mSelfTypeEntry mGetterMap]
    ![self.mSelfTypeEntry mSetterMap]
    ![self.mSelfTypeEntry mInstanceMethodMap]
    ![self.mSelfTypeEntry mClassMethodMap]
    ![self.mSelfTypeEntry mOptionalMethodMap]
    ![self.mSelfTypeEntry mEnumerationDescriptor]
    ![self.mSelfTypeEntry mHandledOperatorFlags]
    ![self.mSelfTypeEntry mAddAssignOperatorArguments]
    ![self.mSelfTypeEntry mTypeForEnumeratedElement]
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classTypeForGeneration appendDeclaration2 ?let @string inOutputDirectory
                                                           ?!@stringset ioInclusionSet
                                                           !@string outHeader {
  for (t 3*) in self.mCurrentTypedAttributeList do
    [t addHeaderFileName !?ioInclusionSet]
  end

  if self.mIsReference then
    if self.mGenerateHeaderInSeparateFile then
      let part1 = [filewrapper typeGenerationTemplate.referenceClassTypeHeader2part1
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
        ![self.mSelfTypeEntry mGetterMap]
      ]
      let part2 = [filewrapper typeGenerationTemplate.referenceClassTypeHeader2part2
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
      ]
      let headerFileName = "separateHeaderFor_" + [self.mSelfTypeEntry identifierRepresentation] + ".h"
      [@string generateFileWithPattern
        !startPath:inOutputDirectory + "/../user-headers"
        !fileName:headerFileName
        !lineComment:"//"
        !header:"" # Header
        !defaultUserZone1:"\n\n" # Defaut user zone1
        !generatedZone2:part1
        !defaultUserZone2:"\n\n" # Defaut user zone2
        !generatedZone3:part2
        !makeExecutable:false
      ]
      outHeader = "#include \"" + headerFileName + "\"\n\n"
    else
      outHeader = [filewrapper typeGenerationTemplate.referenceClassTypeHeader2part1
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
        ![self.mSelfTypeEntry mGetterMap]
      ]
      outHeader += [filewrapper typeGenerationTemplate.referenceClassTypeHeader2part2
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
      ]
    end
  else
    if self.mGenerateHeaderInSeparateFile then
      let part1 = [filewrapper typeGenerationTemplate.valueClassTypeHeader2part1
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
      ]
      let part2 = [filewrapper typeGenerationTemplate.valueClassTypeHeader2part2
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
      ]
      let headerFileName = "separateHeaderFor_" + [self.mSelfTypeEntry identifierRepresentation] + ".h"
      [@string generateFileWithPattern
        !startPath:inOutputDirectory + "/../user-headers"
        !fileName:headerFileName
        !lineComment:"//"
        !header:"" # Header
        !defaultUserZone1:"\n\n" # Defaut user zone1
        !generatedZone2:part1
        !defaultUserZone2:"\n\n" # Defaut user zone2
        !generatedZone3:part2
        !makeExecutable:false
      ]
      outHeader = "#include \"" + headerFileName + "\"\n\n"
    else
      outHeader = [filewrapper typeGenerationTemplate.valueClassTypeHeader2part1
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
      ]
      outHeader += [filewrapper typeGenerationTemplate.valueClassTypeHeader2part2
        ![self.mSelfTypeEntry key]
        ![self.mSelfTypeEntry identifierRepresentation]
        !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
        !self.mCurrentTypedAttributeList
        !self.mAllTypedAttributeList
        !self.mIsAbstract
      ]
    end
  end
 }

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @classTypeForGeneration appendSpecificImplementation ?let @unifiedTypeMap unused inTypeMap
                                                                     ?!@stringset ioInclusionSet
                                                                     !@string outImplementation {
  [self.mSelfTypeEntry addHeaderFileName !?ioInclusionSet]
#  if self.mIsReference then
#    for (type 3*) in self.mAllTypedAttributeList do
#      [type addHeaderFileName !?ioInclusionSet]
#    end
#  end

  let at = [self.mAllTypedAttributeList subListWithRange
    !.new {!0 ![self.mAllTypedAttributeList length] - [self.mCurrentTypedAttributeList length]}
  ]
  if self.mIsReference then
    outImplementation = [filewrapper typeGenerationTemplate.referenceClassTypeSpecificImplementation
      ![self.mSelfTypeEntry key]
      ![self.mSelfTypeEntry identifierRepresentation]
      !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
      !currentPropertyList: self.mCurrentTypedAttributeList
      !allPropertyList: self.mAllTypedAttributeList
      !inheritedPropertyList: at
      !self.mIsAbstract
      ![self.mSelfTypeEntry mDefaultConstructorName] != ""
    ]
  else
    outImplementation = [filewrapper typeGenerationTemplate.valueClassTypeSpecificImplementation
      ![self.mSelfTypeEntry key]
      ![self.mSelfTypeEntry identifierRepresentation]
      !if [self.mSuperClass isNull] then "" else [self.mSuperClass identifierRepresentation] end
      !self.mCurrentTypedAttributeList
      !self.mAllTypedAttributeList
      !at
      !self.mIsAbstract
      ![self.mSelfTypeEntry mDefaultConstructorName] != ""
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func generateClassGetterDeclaration ?let @lstring inGetterName
#                                    ?let @methodKind inKind
                                    ?let @functionSignature inArgumentTypeList
                                    ?let @bool inHasCompilerArgument
                                    ?let @unifiedTypeMap-entry inReturnedType
                                    ?let @methodQualifier inQualifier -> @string {
  var generate = true
  var suffix = ""
#---
  switch inQualifier
  case isAbstract :
    suffix = " = 0"
  case isBasic :
  case isBasicFinal :
  case isInherited :
    generate = false
  case isOverriding :
    suffix = " overriding = 0"
  case isOverridingAbstract :
    suffix = " overriding = 0"
  end
#---
  result = ""
  if generate then
    result = "/* § public: virtual GALGAS_" + [inReturnedType identifierRepresentation]
    result += " getter_" + [inGetterName identifierRepresentation] + " ("
    var first = true
    for formalArgument in inArgumentTypeList 
    do
      if first then
        first = false
      else
        result += ",\n           "
      end
      result += "const GALGAS_" + [formalArgument.mFormalArgumentType identifierRepresentation] 
      result += " " + formalArgument.mFormalArgumentName
    end
    if inHasCompilerArgument then
      if not first then
        result += ",\n           "
      end
      result += "C_Compiler *"
      first = false
    end
    result += if first then "LOCATION_ARGS" else " COMMA_LOCATION_ARGS" end + ") const" + suffix + " ; */\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

