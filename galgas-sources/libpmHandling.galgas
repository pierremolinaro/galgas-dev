//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------

filewrapper libpmFileWrapper in "../libpm" {
 "h", "cpp", "c", "m", "py", "swift" // Text files
}{
 "tiff", "png", "xib", "gif" // Binary files
}{
}

//------------------------------------------------------------------------------------------------

proc updateLIBPMatPath ?let @string inLIBPMPath {
  let fw = [filewrapper libpmFileWrapper]
//--- Create directories
  for (path) in [fw allDirectoryPathes] do
    let @string actualDirectory = inLIBPMPath + path
    [actualDirectory makeDirectory]
  end
//--- Update text files
  var @stringset allNeededFileSet = @()
  for (path) in [fw allTextFilePathes] do
    let contents = [fw textFileContentsAtPath !path]
    let actualFilePath = inLIBPMPath + path
    if [actualFilePath pathExtension] == "py" then
      [contents writeToExecutableFileWhenDifferentContents !actualFilePath ?*]
    else
      [contents writeToFileWhenDifferentContents !actualFilePath ?*]
    end
    allNeededFileSet += !path
  end
//--- Update binary files
  for (value) in [fw allBinaryFilePathes] do
    let contents = [fw binaryFileContentsAtPath !value]
    let actualFilePath = inLIBPMPath + value
    [contents writeToFileWhenDifferentContents !actualFilePath ?*]
    allNeededFileSet += !value
  end
//--- Remove useless files
  var @stringset allActualFileSet = @()
  for (value) in [inLIBPMPath regularFiles !true] do
    allActualFileSet += !"/" + value
  end
  let uselessFileSet = allActualFileSet - allNeededFileSet
  for (key) in uselessFileSet do
    [@string deleteFile !inLIBPMPath + key]
  end
}

//------------------------------------------------------------------------------------------------

