#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @collectionValueElementList {
  public var @abstractCollectionValueElement mElement
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @abstractCollectionValueElement {}

#·····················································································································

refclass @expressionCollectionValue : @abstractCollectionValueElement {
  public var @semanticExpressionAST mExpression
  public var @location mExpressionLocation
}

#·····················································································································

refclass @expressionListCollectionValue : @abstractCollectionValueElement {
  public var @actualOutputExpressionList mExpressionList
  public var @location mEndOfExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @collectionValueAST : @semanticExpressionAST {
  public var @lstring mTypeName # Empty string if infered
  public var @collectionValueElementList mElementList
  public var @location mEndOfCollectionValue
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    <optional_type> ?let @lstring typeName
    ${$
    var @collectionValueElementList elementList = {}
    select
    or
      repeat
        <collection_value_element> ?let @abstractCollectionValueElement element
        elementList += !element
      while
        $,$
      end
    end
    outExpression = @collectionValueAST.new {
      !typeName
      !elementList
      !.here
    }  
    $}$
  }
  
  #·····················································································································
  
  rule <collection_value_element> !@abstractCollectionValueElement outValueElement {
    var @actualOutputExpressionList expressionList = {}
    repeat
      $!$ ?let selector
      <expression> ?let @semanticExpressionAST expression
      expressionList += !selector !expression !@location.here
    while
    end
    outValueElement = @expressionListCollectionValue.new {!expressionList !@location.here}
  }
  
  #·····················································································································
  
  rule <collection_value_element> !@abstractCollectionValueElement outValueElement {
    <expression> ?let @semanticExpressionAST expression
    outValueElement = @expressionCollectionValue.new {!expression !@location.here}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    <optional_type> ?let @lstring typeName
    ${$
    var @collectionValueElementList elementList = {}
    select
    or
      repeat
        <collection_value_element> ?let @abstractCollectionValueElement element
        elementList += !element
      while
        $,$
      end
    end
    outExpression = @collectionValueAST.new {
      !typeName
      !elementList
      !.here
    }  
    $}$
  }
  
  #·····················································································································
  
  rule <collection_value_element> !@abstractCollectionValueElement outValueElement {
    var @actualOutputExpressionList expressionList = {}
    repeat
      $!$ ?let selector
      <expression> ?let @semanticExpressionAST expression
      expressionList += !selector !expression !@location.here
    while
    end
    outValueElement = @expressionListCollectionValue.new {!expressionList !@location.here}
  }
  
  #·····················································································································
  
  rule <collection_value_element> !@abstractCollectionValueElement outValueElement {
    <expression> ?let @semanticExpressionAST expression
    outValueElement = @expressionCollectionValue.new {!expression !@location.here}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @collectionValueAST enterExpressionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  for (mElement) in self.mElementList do
    [mElement enterInSemanticContext !?ioTypeMap]
  end
}

#·····················································································································

override method @collectionValueAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMapEntry inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Type
  let @unifiedTypeMapEntry targetType
  if self.mTypeName.string == "" then
    targetType = inType
  else
    targetType = [inAnalysisContext.mSemanticContext.mTypeMap searchKey !self.mTypeName]
  end
#---
  if targetType == .null then
    error self.mTypeName : "Cannot infer type" : outExpression
  elsif not [targetType definition].mSupportCollectionValue then
    error self.mTypeName : "the @" + [targetType definition].mTypeName.string + " type does not support collection value" : outExpression
  else
    let usefulnessName = typeNameForUsefulEntitiesGraph (!.new {![targetType definition].mTypeName.string !self.mEndOfCollectionValue})
    [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !usefulnessName]
    if [self.mElementList length] == 0 then
      outExpression = @defaultConstructorExpressionForGeneration.new {
        !targetType
        !self.mTypeName.location
      }
    else
      var @collectionValueElementListForGeneration collectionValueElementListForGeneration = {}
      for (mElement) in self.mElementList do
        [mElement analyze
          !inUsefulnessCallerEntityName
          !?ioUsefulEntitiesGraph
          !inAnalysisContext
          !targetType
          !?ioVariableMap
          !?collectionValueElementListForGeneration
        ]
      end
      outExpression = @expressionCollectionForGeneration.new {
        !targetType
        !self.mEndOfCollectionValue
        !collectionValueElementListForGeneration
      }
    end
  end
#---
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractCollectionValueElement enterInSemanticContext ?!@unifiedTypeMap ioTypeMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @expressionCollectionValue enterInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @expressionListCollectionValue enterInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [self.mExpressionList enterInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @abstractCollectionValueElement analyze
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?let @unifiedTypeMapEntry inElementType
  ?!@localVarManager ioVariableMap
  ?!@collectionValueElementListForGeneration ioCollectionValueElementListForGeneration

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @expressionCollectionValue analyze
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?let @unifiedTypeMapEntry inElementType
  ?!@localVarManager ioVariableMap
  ?!@collectionValueElementListForGeneration ioCollectionValueElementListForGeneration
{
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: inElementType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!inElementType !expression.mResultType !self.mExpressionLocation !?expression)
#---
  ioCollectionValueElementListForGeneration += !@expressionCollectionValueForGeneration.new {!self.mExpressionLocation !expression}
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @expressionListCollectionValue analyze
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?let @unifiedTypeMapEntry inElementType
  ?!@localVarManager ioVariableMap
  ?!@collectionValueElementListForGeneration ioCollectionValueElementListForGeneration {
  let @functionSignature formalParameterTypeList = [inElementType definition].mAddAssignOperatorArguments
  var @semanticExpressionListForGeneration semanticExpressionListForGeneration
  if [formalParameterTypeList length] != [self.mExpressionList length] then
    error self.mEndOfExpressionLocation: "element of of '@" + [inElementType definition].mTypeName.string + "' requires "
    + [formalParameterTypeList length] + " parameter(s), while this list has "
    + [self.mExpressionList length] + " element(s)" : semanticExpressionListForGeneration
  else
    semanticExpressionListForGeneration = @semanticExpressionListForGeneration {}
    for expression in self.mExpressionList, (mFormalSelector mFormalArgumentType *) in formalParameterTypeList do
      [expression.mExpression analyzeSemanticExpression
        !inUsefulnessCallerEntityName
        !?ioUsefulEntitiesGraph
        !inferenceType: mFormalArgumentType
        !inAnalysisContext
        !?ioVariableMap
        ?@semanticExpressionForGeneration exp
      ]
      if mFormalSelector.string != expression.mActualSelector.string then
        let @string s = "!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end
        error expression.mActualSelector : "the selector should be '" + s + "'" fixit { replace s }
#        error expression.mActualSelector
#          : "the selector should be '!" + mFormalSelector + if mFormalSelector.string != "" then ":" else "" end + "'"
      end
      checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType !exp.mResultType !self.mEndOfExpressionLocation !?exp)
      semanticExpressionListForGeneration += !exp
    end
    ioCollectionValueElementListForGeneration += !@expressionListCollectionForGeneration.new {
      !self.mEndOfExpressionLocation
      !semanticExpressionListForGeneration}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @collectionValueElementListForGeneration {
  public var @abstractCollectionValueElementForGeneration mElement
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract refclass @abstractCollectionValueElementForGeneration {
  public var @location mExpressionLocation
}

#·····················································································································

abstract method @abstractCollectionValueElementForGeneration generateCollectionElementCode
  ?let @unifiedTypeMapEntry inTargetType
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @string inCppTargetVar

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @expressionCollectionValueForGeneration : @abstractCollectionValueElementForGeneration {
  public var @semanticExpressionForGeneration mExpression
}

#·····················································································································

override method @expressionCollectionValueForGeneration generateCollectionElementCode
  ?let @unifiedTypeMapEntry unused inTargetType
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @string inCppTargetVar {
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string sourceVar
  ]
  ioGeneratedCode += inCppTargetVar
  ioGeneratedCode += ".plusAssign_operation (" + sourceVar
  ioGeneratedCode += ", " + compilerCppName ()
  ioGeneratedCode += " " + [self.mExpressionLocation commaSourceFile] + ") ;\n"
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @expressionListCollectionForGeneration : @abstractCollectionValueElementForGeneration {
  public var @semanticExpressionListForGeneration mExpressionList
}

#·····················································································································

override method @expressionListCollectionForGeneration generateCollectionElementCode
  ?let @unifiedTypeMapEntry inTargetType
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @string inCppTargetVar {
#--- Parameters
  var parameterList = @stringlist {}
  for (mExpression) in self.mExpressionList do
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string parameter
    ]
    parameterList += !parameter  
  end
#--- Receiver
  ioGeneratedCode += inCppTargetVar
#--- Call add assign (+=) operator
  ioGeneratedCode += ".addAssign_operation ("
  for (mValue) in parameterList
    do ioGeneratedCode += mValue
    between ioGeneratedCode += ", "
  end
  if [[inTargetType definition].mHandledOperatorFlags plusEqualOperatorWithFieldListNeedsCompilerArg] then
    ioGeneratedCode  += ", " + compilerCppName ()
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  end
  ioGeneratedCode += " " + [self.mExpressionLocation commaSourceFile] + ") ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @expressionCollectionForGeneration : @semanticExpressionForGeneration {
  public var @collectionValueElementListForGeneration mElementList
}

#·····················································································································

override method @expressionCollectionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
#---
  [self.mResultType addHeaderFileName !?ioInclusionSet]
#--- Create temporary variable variable
  outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
  ioTemporaryVariableIndex += 1
#--- Declare variable and apply default constructor
  ioGeneratedCode += "GALGAS_" + [self.mResultType identifierRepresentation] + " " + outCppExpression
     + " = GALGAS_" +  [self.mResultType identifierRepresentation] + "::constructor_" + [[self.mResultType definition].mDefaultConstructorName identifierRepresentation] + " (" + [self.mLocation sourceFile] + ") ;\n"
#--- Add Elements
  for (mElement) in self.mElementList do
    [mElement generateCollectionElementCode
      !self.mResultType
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !outCppExpression
    ]    
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
