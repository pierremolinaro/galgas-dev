#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  //······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST ioDeclarations
                      !@semanticExpressionAST outExpression {
    <optional_type_ggs3> ?let @lstring typeName
    $§[$
    var @collectionValueElementList expressionList = @()
    select
    or
      repeat
        <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
        expressionList += !expression !.here
      while
        $,$
      end
    end
    outExpression = @collectionValueAST (typeName, expressionList, .here)
    $]$
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  //······························································································

  rule <primary> ?!@galgasDeclarationAST ioDeclarations
                 !@semanticExpressionAST outExpression {
    let startLocation = @location.here
    $[$
    var @collectionValueElementList expressionList = @()
    select
    or
      repeat
        <expression> !?ioDeclarations ?let @semanticExpressionAST expression
        expressionList += !expression !.here
      while
        $,$
      end
    end
    outExpression = @collectionValueAST (@("", startLocation), expressionList, .here)
    $]$
  }

  //······························································································

  rule <primary_beginning_by_type> ?let @lstring inTypeName
                                   ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticExpressionAST outExpression {
    $[$
    var @collectionValueElementList expressionList = @()
    select
    or
      repeat
        <expression> !?ioDeclarations ?let @semanticExpressionAST expression
        expressionList += !expression !.here
      while
        $,$
      end
    end
    outExpression = @collectionValueAST (inTypeName, expressionList, .here)
    $]$
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

list @collectionValueElementList {
  public let @semanticExpressionAST mExpression
  public let @location location
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @collectionValueAST : @semanticExpressionAST {
  public let @lstring mTypeName # Empty string if infered
  public let @collectionValueElementList mExpressionList
  public let @location mEndOfCollectionValue

  //······························································································

  override method enterExpressionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    for (expression *) in self.mExpressionList do
      [expression enterExpressionInSemanticContext !?ioTypeMap]
    end
  }

  //······························································································

  override method analyzeSemanticExpression
        ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
        ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
        ?inferenceType: let @unifiedTypeMapEntry inType
        ?let @analysisContext inAnalysisContext
        ?!@unifiedTypeMap ioTypeMap
        ?!@localVarManager ioVariableMap
        !@semanticExpressionForGeneration outExpression {
  //--- Type
    let @unifiedTypeMapEntry targetType
    if self.mTypeName.string == "" then
      targetType = inType
    else
      targetType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
    end
  //---
    if targetType == .null then
      error self.mTypeName : "Cannot infer type" : outExpression
    elsif not [targetType definition].supportCollectionValue then
      error self.mTypeName
      : "the @" + [targetType definition].typeName.string
      + " type does not support collection value" : outExpression
    else
      let initializerMap = [targetType definition].initializerMap
      let @functionSignature emptyArgumentList = @()
      if not [initializerMap hasKey ![emptyArgumentList initializerSignature]] then
        error self.mTypeName : "the @" + self.mTypeName + " has no @() initializer"
      end
    //--- Usefull entity graph
      let nameForUsefulness = initializerNameForUsefulEntitiesGraph (
        ![targetType definition].typeName
        ![emptyArgumentList initializerSignature]
      )
      [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !nameForUsefulness]
    //---
      let elementType = [targetType definition].typeForEnumeratedElement
      var @collectionValueElementListForGeneration expressionListForGeneration = @()
      for (expression location) in self.mExpressionList do
        [expression analyzeSemanticExpression
          !usefulnessCallerEntityName: inUsefulnessCallerEntityName
          !?ioUsefulEntitiesGraph
          !inferenceType: elementType
          !inAnalysisContext
          !?ioTypeMap
          !?ioVariableMap
          ?var expressionForGeneration
        ]
      //--- Check assignment type compatibility
        checkAssignmentTypeWithImplicitGetterCall (
          !elementType
          !expressionForGeneration.mResultType
          !location
          !?expressionForGeneration
        )
        expressionListForGeneration += !expressionForGeneration !location
      end
      outExpression = @expressionCollectionForGeneration {
        !targetType
        !self.mEndOfCollectionValue
        !expressionListForGeneration
      }
    //--- Usefull entity graph
      let typeUsefulnessName = typeNameForUsefulEntitiesGraph ([targetType definition].typeName)
      [!?ioUsefulEntitiesGraph addEdge !inUsefulnessCallerEntityName !typeUsefulnessName]
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

list @collectionValueElementListForGeneration {
  public let @semanticExpressionForGeneration expression
  public let @location location
}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @expressionCollectionForGeneration : @semanticExpressionForGeneration {
  public let @collectionValueElementListForGeneration expressionList

  //······························································································

  override method generateExpression ?!@string ioGeneratedCode
                                      ?!@stringset ioInclusionSet
                                      ?!@uint ioTemporaryVariableIndex
                                      ?!@stringset ioUnusedVariableCppNameSet
                                      !@string outCppExpression {
  //---
    [self.mResultType addHeaderFileName !?ioInclusionSet]
  //--- Create temporary variable variable
    outCppExpression = "temp_" + [ioTemporaryVariableIndex string]
    ioTemporaryVariableIndex += 1
  //--- Declare variable and apply default constructor
    ioGeneratedCode += "GGS_" + [self.mResultType identifierRepresentation] + " " + outCppExpression
    ioGeneratedCode += " = GGS_" +  [self.mResultType identifierRepresentation]
    ioGeneratedCode += "::init (" + compilerCppName () + [self.mLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  //--- Add Elements
    for (expression location) in self.expressionList do
      [expression generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let argumentCppName
      ]
      ioGeneratedCode += outCppExpression + ".enterElement ("
      ioGeneratedCode += argumentCppName + ", "
      ioGeneratedCode += compilerCppName () + [location commaSourceFile] + ") ;\n"
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
