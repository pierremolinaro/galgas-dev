#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    <semantic_instruction_beginning_with_identifier> !?ioDeclarations !prefixedBySelf: false ?outInstruction
  }
  
  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $self$
    $.$
    <semantic_instruction_beginning_with_identifier> !?ioDeclarations !prefixedBySelf: true ?outInstruction
  }

  #·······························································································

  rule <semantic_instruction_beginning_with_identifier> ?!@galgasDeclarationAST ioDeclarations
                                                        ?prefixedBySelf: let @bool inHasSelfPrefix
                                                        !@semanticInstructionAST outInstruction {
    $identifier$ ?let @lstring receiverName
    let instructionLocation = @location.here
    var @lstringlist propertyList = ()
    repeat
    while
      $.$
      $identifier$ ?let attributeName
      propertyList += !attributeName
    end
    select
      $-=$
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.minusAssign
        !expression
      }
    or
      $+=$
      select
        <non_empty_output_expression_list_ggs3> !?ioDeclarations ?let @actualOutputArgumentList expressionList
        outInstruction = @plusEqualElementsInstructionAST {
          !instructionLocation
          !inHasSelfPrefix
          !receiverName
          !propertyList
          !expressionList
        }
      or
        <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
        outInstruction = @opAssignExpressionInstructionAST {
          !instructionLocation
          !inHasSelfPrefix
          !receiverName
          !propertyList
          !.plusAssign
          !expression
        }
      end
    or
      $*=$
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.mulAssign
        !expression
      }
    or
      $&=$
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.andAssign
        !expression
      }
    or
      $|=$
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.orAssign
        !expression
      }
    or
      $^=$
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.xorAssign
        !expression
      }
    or
      $/=$
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.divAssign
        !expression
      }
    end
  }

  #·······························································································

  rule <non_empty_output_expression_list_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                               !@actualOutputArgumentList outExpressionList {
    outExpressionList = ()
    repeat
      let @lstring selector
      select
        $!selector:$ ?selector
      or
        $!$
        selector = ["" here]
      end
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST expression
      outExpressionList += !selector !expression !@location.here
    while
    end
  }

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    <semantic_instruction_beginning_with_identifier> !?ioDeclarations !prefixedBySelf: false ?outInstruction
  }
  
  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $self$
    $.$
    <semantic_instruction_beginning_with_identifier> !?ioDeclarations !prefixedBySelf: true ?outInstruction
  }

  #·······························································································

  rule <semantic_instruction_beginning_with_identifier> ?!@galgasDeclarationAST ioDeclarations
                                                        ?prefixedBySelf: let @bool inHasSelfPrefix
                                                        !@semanticInstructionAST outInstruction {
    $identifier$ ?let @lstring receiverName
    let instructionLocation = @location.here
    var @lstringlist propertyList = ()
    repeat
    while
      $.$
      $identifier$ ?let attributeName
      propertyList += !attributeName
    end
  #---
    select
      $-=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.minusAssign
        !expression
      }
    or
      $+=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.plusAssign
        !expression
      }
    or
      $*=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.mulAssign
        !expression
      }
    or
      $&=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.andAssign
        !expression
      }
    or
      $|=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.orAssign
        !expression
      }
    or
      $^=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.xorAssign
        !expression
      }
    or
      $/=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST expression
      outInstruction = @opAssignExpressionInstructionAST {
        !instructionLocation
        !inHasSelfPrefix
        !receiverName
        !propertyList
        !.divAssign
        !expression
      }
    or
      <actual_parameter_list_within_parenthesis> !?ioDeclarations ?let @actualParameterListAST actualParameterList
      if inHasSelfPrefix then
        if [propertyList count] == 0 then
          outInstruction = @methodCallInstructionAST {
            !instructionLocation
            !@selfInExpressionAST {!instructionLocation}
            !receiverName # Method name
            !actualParameterList
          }
        else
          [!?propertyList popLast ?let methodName]
          var @semanticExpressionAST receiverExpression = @selfInExpressionAST {!@location.here}
          receiverExpression = @structPropertyAccessExpressionAST {!receiverName.location !receiverExpression !receiverName}
          for (propertyName) in propertyList do
            receiverExpression = @structPropertyAccessExpressionAST {!propertyName.location !receiverExpression !propertyName}
          end
          outInstruction = @methodCallInstructionAST {
            !instructionLocation
            !receiverExpression
            !methodName
            !actualParameterList
          }
        end
      elsif [propertyList count] == 0 then
        outInstruction = @procCallInstructionAST {
          !receiverName.location
          !receiverName # Proc name
          !actualParameterList
        }
      else
        [!?propertyList popLast ?let methodName]
        var @semanticExpressionAST receiverExpression = @varInExpressionAST {!receiverName}
        for (propertyName) in propertyList do
          receiverExpression = @structPropertyAccessExpressionAST {!propertyName.location !receiverExpression !propertyName}
        end
        outInstruction = @methodCallInstructionAST {
          !instructionLocation
          !receiverExpression
          !methodName
          !actualParameterList
        }
      end
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @opAssignmentOperator {
  case andAssign // &=
  case orAssign // &=
  case xorAssign // ^=
  case plusAssign // +=
  case minusAssign // -=
  case mulAssign // *=
  case divAssign // /=

  #·······························································································
  
  getter features -> @typeFeatures {
    switch self
    case orAssign  : result = .orAssignOperatorWithExpression # var |= exp ;
    case xorAssign  : result = .xorAssignOperatorWithExpression # var ^= exp ;
    case andAssign : result = .andAssignOperatorWithExpression # var &= exp ;
    case plusAssign  : result = .plusAssignOperatorWithExpression # var += exp ;
    case minusAssign  : result = .minusAssignOperatorWithExpression # var -= exp ;
    case mulAssign  : result = .mulAssignOperatorWithExpression # var *= exp ;
    case divAssign  : result = .divAssignOperatorWithExpression # var /= exp ;
    end
  }

  #·······························································································
  
  getter string -> @string {
    switch self
    case orAssign  : result = "|="
    case xorAssign  : result = "^="
    case andAssign : result = "&="
    case plusAssign : result = "+="
    case minusAssign : result = "-="
    case mulAssign : result = "*="
    case divAssign : result = "/="
    end
  }

  #·······························································································
  
  getter cppFunctionName -> @string {
    switch self
    case orAssign  : result = "orAssign_operation"
    case xorAssign  : result = "xorAssign_operation"
    case andAssign : result = "andAssign_operation"
    case plusAssign : result = "plusAssign_operation"
    case minusAssign : result = "minusAssign_operation"
    case mulAssign : result = "mulAssign_operation"
    case divAssign : result = "divAssign_operation"
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

class @opAssignExpressionInstructionAST : @semanticInstructionAST {
  private let @bool mPrefixedBySelf
  private let @lstring mReceiverName
  private let @lstringlist mStructAttributeList
  private let @opAssignmentOperator mOperator
  private let @semanticExpressionAST mExpression

  #·······························································································
  
  override method enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
  }

  #·······························································································

  override method analyzeSemanticInstruction
                    ?let @lstring inUsefulnessCallerEntityName
                    ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                    ?let @analysisContext inAnalysisContext
                    ?!@unifiedTypeMap ioTypeMap
                    ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                    ?!@localVarManager ioVariableMap {
  #--- Check target variable, or self.property
    var @unifiedTypeMapEntry targetType
    let @string targetVariableCppName
    let @string nameForCheckingFormalParameterUsing
    if self.mPrefixedBySelf then
      if let selfAvailable = [inAnalysisContext.selfAvailability getAvailable] then
        if not [selfAvailable.selfMutability propertiesAreMutable] then
          error self.mInstructionLocation : "property not mutable in this context"
        end
#        if not [selfAvailable.selfMutability selfIsMutable] then
#          error self.mInstructionLocation : "'self' not mutable in this context"
#        end
        let propertyMap = [selfAvailable.type definition].propertyMap
        [propertyMap searchKey !self.mReceiverName ?* ?let isConstant ?targetType]
        nameForCheckingFormalParameterUsing = inAnalysisContext.selfObjectCppName
        targetVariableCppName = inAnalysisContext.selfObjectCppPrefixForAccessingProperty
          + "mProperty_"+ [self.mReceiverName.string identifierRepresentation]
        if isConstant then
          error self.mReceiverName : "a constant property cannot be modified"
        end
        if not [selfAvailable.selfMutability propertiesAreMutable] then
          error self.mReceiverName : "the property is not mutable in this context"
        end
      else
        error self.mInstructionLocation : "'self' not available in this context"
        : targetType, targetVariableCppName, nameForCheckingFormalParameterUsing
      end
    else
      [!?ioVariableMap searchForReadWriteAccess
        !self.mReceiverName
        ?targetType
        ?targetVariableCppName
        ?nameForCheckingFormalParameterUsing
      ]
    end
  #--- Check target variable
    for (value) in self.mStructAttributeList do
      let propertyMap = [targetType definition].propertyMap
      [propertyMap searchKey !value ?let accessControl ?let isConstant ?targetType]
      [accessControl checkSetAccess !inAnalysisContext.selfAvailability !value.location]
      if isConstant then
        error self.mReceiverName : "a constant property cannot be modified"
      end
    end
  #--- Check target variable type support 'X= exp' operator
    if not [[targetType definition].features contains ![self.mOperator features]] then
      error self.mInstructionLocation
      :"the target object has the '@" + [targetType definition].typeName.string
      + "' type, but this type does not support the '" + [self.mOperator string] + "' operator"
    end
  #--- Analyze source expression
    [self.mExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: targetType
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?@semanticExpressionForGeneration expression
    ]
  #--- Check assignment type compatibility
    checkAssignmentTypeWithImplicitGetterCall (!targetType !expression.mResultType !self.mInstructionLocation !?expression)
  #--- Generate instruction
    ioInstructionListForGeneration += !@opAssignInstructionForGeneration {
      !self.mInstructionLocation
      !targetType
      !targetVariableCppName
      !nameForCheckingFormalParameterUsing
      !self.mStructAttributeList
      !expression
      ![self.mOperator cppFunctionName]
    }
}

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

class @plusEqualElementsInstructionAST : @semanticInstructionAST {
  private let @bool mPrefixedBySelf
  private let @lstring mReceiverName
  private let @lstringlist mStructAttributeList
  private let @actualOutputArgumentList mExpressions

  #·······························································································

  override method enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    [self.mExpressions enterInSemanticContext !?ioTypeMap]
  }

  #·······························································································

  override method analyzeSemanticInstruction
                            ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                            ?!@unifiedTypeMap ioTypeMap
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
  #--- Check target variable, or self.property
    var @unifiedTypeMapEntry targetType
    let @string targetVariableCppName
    let @string nameForCheckingFormalParameterUsing
    if self.mPrefixedBySelf then
      if let selfAvailable = [inAnalysisContext.selfAvailability getAvailable] then
        let propertyMap = [selfAvailable.type definition].propertyMap
        [propertyMap searchKey !self.mReceiverName ?* ?let isConstant ?targetType]
        nameForCheckingFormalParameterUsing = inAnalysisContext.selfObjectCppName
        targetVariableCppName = inAnalysisContext.selfObjectCppPrefixForAccessingProperty
          + "mProperty_"+ [self.mReceiverName.string identifierRepresentation]
        if isConstant then
          error self.mReceiverName : "a constant property cannot be modified"
        end
        if not [selfAvailable.selfMutability propertiesAreMutable] then
          error self.mReceiverName : "the property cannot be mutated in this context"
        end
      else
        error self.mInstructionLocation : "'self' not available in this context"
        : targetType, targetVariableCppName, nameForCheckingFormalParameterUsing
      end
    else
      [!?ioVariableMap searchForReadWriteAccess
        !self.mReceiverName
        ?targetType
        ?targetVariableCppName
        ?nameForCheckingFormalParameterUsing
      ]
    end
  #--- Check target variable
    for (value) in self.mStructAttributeList do
      let propertyMap = [targetType definition].propertyMap
  #    let previousTargetType = targetType
      [propertyMap searchKey !value ?let accessControl ?let isConstant ?targetType]
      [accessControl checkSetAccess !inAnalysisContext.selfAvailability !value]
  #    if not isPublic  then
  #      switch inAnalysisContext.selfType
  #      case none :
  #        error value : " inaccessible property (due to its 'private' qualifier)"
  #      case available (selfType 2*) :
  #        if previousTargetType != selfType then
  #          error value : " inaccessible property (due to its 'private' qualifier)"
  #        end
  #      end
  #    end
      if isConstant then
        error value : "a constant property cannot be modified"
      end
    end
  #--- Check target variable type support '+=' operator
    let addAssignOperatorArguments= [targetType definition].addAssignOperatorArguments # Empty list if += operator is not supported
    if [addAssignOperatorArguments count] == 0 then
      error self.mInstructionLocation
      :"the target object has the '@" + [targetType definition].typeName.string + "' type, but this type does not support the '+=' operator"
  #--- Analyze source expressions
    elsif [self.mExpressions count] != [addAssignOperatorArguments count] then
      error self.mInstructionLocation
      : "calling the '+=' operator on an '@" + [targetType definition].typeName.string + "' object requires "
      + [[addAssignOperatorArguments count] string] + " parameter(s), while this invocation has "
      + [[self.mExpressions count] string] + " parameter(s)"
    else
      var @semanticExpressionListForGeneration effectiveParameterList = ()
      for (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressions, (mFormalSelector mFormalArgumentType 2*) in addAssignOperatorArguments do
        [mExpression analyzeSemanticExpression
          !usefulnessCallerEntityName: inUsefulnessCallerEntityName
          !?ioUsefulEntitiesGraph
          !inferenceType: mFormalArgumentType
          !inAnalysisContext
          !?ioTypeMap
          !?ioVariableMap
          ?@semanticExpressionForGeneration expression
        ]
        if mFormalSelector.string != mActualSelector.string then
          let @string s = "!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end
          error mActualSelector : "the selector should be '" + s + "'" fixit { replace s }
  #        error mActualSelector
  #          : "the selector should be '!" + mFormalSelector + if mFormalSelector.string != "" then ":" else "" end + "'"
        end
        checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType !expression.mResultType !mEndOfExpressionLocation !?expression)
        effectiveParameterList += !expression
      end
    #--- Generate instruction
      ioInstructionListForGeneration += !@plusEqualnstructionForGeneration {
        !targetVariableCppName
        !targetType
        !nameForCheckingFormalParameterUsing
        !self.mInstructionLocation
        !self.mStructAttributeList
        !effectiveParameterList}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

class @plusEqualnstructionForGeneration : @semanticInstructionForGeneration {
  private let @string mReceiverCppName
  private let @unifiedTypeMapEntry mTargetType
  private let @string mNameForCheckingFormalParameterUsing
  private let @location mInstructionLocation
  private let @lstringlist mStructAttributeList
  private let @semanticExpressionListForGeneration mExpressionList

  #·······························································································

  override method generateInstruction
    ?!@stringset ioInclusionSet
    ?!@uint ioTemporaryVariableIndex
    ?!@stringset ioUnusedVariableCppNameSet
    ?let @bool unused inGenerateSyntaxDirectedTranslationString
    ?!@string ioGeneratedCode {
  #--- Parameters
    [self.mTargetType addHeaderFileName !?ioInclusionSet]
    var parameterList = @stringlist ()
    for (mExpression) in self.mExpressionList do
      [mExpression generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let @string parameter
      ]
      parameterList += !parameter
    end
  #--- Receiver
    [!?ioUnusedVariableCppNameSet removeKey !self.mNameForCheckingFormalParameterUsing]
    ioGeneratedCode += self.mReceiverCppName
    for (mValue) in self.mStructAttributeList do
      ioGeneratedCode += ".mProperty_" + [mValue.string identifierRepresentation]
    end
  #--- Call add assign (+=) operator
    ioGeneratedCode += ".addAssign_operation ("
    [!?ioUnusedVariableCppNameSet removeKey !self.mReceiverCppName]
    for (mValue) in parameterList
      do ioGeneratedCode += mValue
      between ioGeneratedCode += ", "
    end
    if [[self.mTargetType definition].features contains !.plusEqualOperatorWithFieldListNeedsCompilerArg] then
      ioGeneratedCode  += ", " + compilerCppName ()
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    end
    ioGeneratedCode += " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

class @opAssignInstructionForGeneration : @semanticInstructionForGeneration {
  private let @location mInstructionLocation
  private let @unifiedTypeMapEntry mTargetType
  private let @string mTargetVariableCppName
  private let @string mNameForCheckingFormalParameterUsing
  private let @lstringlist mStructAttributeList
  private let @semanticExpressionForGeneration mSourceExpression
  private let @string mGeneratedMethod

  #·······························································································

  override method generateInstruction
    ?!@stringset ioInclusionSet
    ?!@uint ioTemporaryVariableIndex
    ?!@stringset ioUnusedVariableCppNameSet
    ?let @bool unused inGenerateSyntaxDirectedTranslationString
    ?!@string ioGeneratedCode {
    [self.mTargetType addHeaderFileName !?ioInclusionSet]
    [self.mSourceExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string sourceVar
    ]
    [!?ioUnusedVariableCppNameSet removeKey !self.mNameForCheckingFormalParameterUsing]
    ioGeneratedCode += self.mTargetVariableCppName
    for (mValue) in self.mStructAttributeList do
      ioGeneratedCode += ".mProperty_" + mValue
    end
    ioGeneratedCode += "." + self.mGeneratedMethod + "(" + sourceVar
    ioGeneratedCode += ", " + compilerCppName ()
    ioGeneratedCode += " " + [self.mInstructionLocation commaSourceFile] + ") ;\n"
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    [!?ioUnusedVariableCppNameSet removeKey !self.mTargetVariableCppName]
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
