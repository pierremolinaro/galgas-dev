#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

valueclass @unaryWrappingMinusExpressionAST : @semanticExpressionAST {
  @location mOperatorLocation
  @semanticExpressionAST mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <factor> !@semanticExpressionAST outExpression {
    let operatorLocation = @location.here
    $&-$
    <factor> ? outExpression
    outExpression = @unaryWrappingMinusExpressionAST.new {!operatorLocation !outExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @unaryWrappingMinusExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @unaryWrappingMinusExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Expression analysis
  @semanticExpressionForGeneration expression
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !@unifiedTypeMap-entry.null
    !inAnalysisContext
    !?ioVariableMap
    ?expression
  ]
#--- Check operator availability
  let @unifiedTypeMap-entry type = [expression mResultType]
  if not [[type mHandledOperatorFlags] prefixMinusOperatorNoOVF] then
    error self.mOperatorLocation
    : "operand type is '@" + [type key] + "' and does not support the prefix minus operator"
    :outExpression
  else
  #--- Generate expression
    outExpression = @unaryWrappingMinusExpressionForGeneration.new {
      !type
      !self.mOperatorLocation
      !expression}
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

valueclass @unaryWrappingMinusExpressionForGeneration : @semanticExpressionForGeneration {
  @semanticExpressionForGeneration mExpression
}

#·····················································································································

override method @unaryWrappingMinusExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [[self.mExpression mResultType] addHeaderFileName !?ioInclusionSet]
#--- Left operand
  [self.mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string operand
  ]
#--- Generate Comparison
  outCppExpression = operand + ".operator_unary_minus_no_ovf ()"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
