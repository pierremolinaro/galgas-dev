#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Component for compiling a semantics component                                                                       *
#                                                                                                                      *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#           G E N E R A T I O N    F I L E W R A P P E R S                                                             *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

filewrapper semanticFileGenerationTemplate in "../generation_templates/semantic_generation" {
}{
}{
  template semanticFileHeader "semantic-file.h.galgasTemplate"
    ?@string COMPONENT_NAME
    ?@stringlist IMPORTED_COMPONENT_LIST
  template semanticFileImplementation "semantic-file.cpp.galgasTemplate"
    ?@stringlist IMPORTED_COMPONENT_LIST
}
                            
#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#    C O M P I L E    S E M A N T I C S   C O M P O N E N T                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

graph @semanticImportDependenceGraph (@stringlist) {
  insert insertNode error message "-- INTERNAL ERROR --"
}

#----------------------------------------------------------------------------------------------------------------------*

proc buildLexiqueComponentMapForSemanticAnalysis
  ?let @parsedComponentStruct inParsedComponentStruct
  !@lexiqueComponentMapForSemanticAnalysis outLexiqueComponentMapForSemanticAnalysis {
  outLexiqueComponentMapForSemanticAnalysis = @lexiqueComponentMapForSemanticAnalysis. emptyMap
  for () in inParsedComponentStruct.mParsedLexiqueComponentMap do
    buildTerminalMap ( !mLexiqueComponentAST ?let @terminalMap terminalMap )
    [!?outLexiqueComponentMapForSemanticAnalysis insertKey
      !lkey
      !terminalMap
      !mLexiqueComponentAST.mIndexingListAST
      !mLexiqueComponentAST.mIndexingDirectory
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

proc buildGrammarComponentMapForSemanticAnalysis
  ?let @grammarComponentASTList inGrammarComponentASTList
  ?!@semanticContext ioSemanticContext {
#--- Perform semantic analysis of grammar components
  for () in inGrammarComponentASTList do
  #--- Analyze start symbol labels
    var grammarLabelMap =@grammarLabelMap.emptyMap{}
    for () in [mGrammarComponentAST mStartSymbolLabelList] do
    #--- Analyze signature
      var formalArgumentList =@formalParameterSignature.emptyList{}
      for () in mFormalArgumentList do
        formalArgumentList +=
          !mFormalSelector
          !@unifiedTypeMap-proxy. searchKey {!ioSemanticContext.mTypeMap !mFormalArgumentTypeName}
          !mFormalArgumentPassingMode
          !mFormalArgumentName.string
      end
      [!?grammarLabelMap insertKey
        !mLabelName
        !formalArgumentList
      ]
    end
  #--- Insert grammar in grammar map
    [!?ioSemanticContext.mGrammarMap insertGrammar
      !mGrammarComponentAST.mGrammarComponentName
      !grammarLabelMap
      ![[mGrammarComponentAST mHasIndexing] bool]
      !mGrammarComponentAST.mHasTranslateFeature
    ]
  end
}

#----------------------------------------------------------------------------------------------------------------------*

