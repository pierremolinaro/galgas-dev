#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @localVariableDeclarationWithAssignmentAST : @semanticInstructionAST {
  private let @lstring mVariableName
  private let @semanticExpressionAST mSourceExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @localVariableDeclarationNoAssignmentAST : @semanticInstructionAST {
  private let @lstring mTypeName
  private let @lstring mVariableName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $@type$ ?let typeName # Obsolete, dont't use <type_definition_ggs3>
    $identifier$ ?let variableName
    outInstruction = @localVariableDeclarationNoAssignmentAST {!typeName.location !typeName !variableName}
    if [option galgas_cli_options.errorOldStyleLocalVarDeclaration value] then
      error typeName : "old style local variable declaration (due to '--error-old-style-local-var-declaration' option)"
      fixit { replace "var @" + typeName }
    end
  }

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $var$
    $identifier$ ?let variableName
    $=$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @localVariableDeclarationWithAssignmentAST {
      !variableName.location
      !variableName
      !sourceExpression
    }
  }

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $var$
    <type_definition_ggs3> !?ioDeclarations ?let typeName
    $identifier$ ?let variableName
    select
      outInstruction = @localVariableDeclarationNoAssignmentAST {
        !typeName.location
        !typeName
        !variableName
      }
    or
      $=$
      <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
      outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST {
        !typeName.location
        !false
        !typeName
        !variableName
        !sourceExpression
      }
    end
  }

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $@type$ ?let typeName # Obsolete, dont't use <type_definition_ggs3>
    $identifier$ ?let variableName
    $=$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST {
      !typeName.location
      !false
      !typeName
      !variableName
      !sourceExpression
    }
    if [option galgas_cli_options.errorOldStyleLocalVarDeclaration value] then
      error typeName : "old style local variable declaration (due to '--error-old-style-local-var-declaration' option)"
      fixit { replace "var @" + typeName }
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $var$
    $identifier$ ?let variableName
    $=$
    <expression> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @localVariableDeclarationWithAssignmentAST {
      !variableName.location
      !variableName
      !sourceExpression
    }
  }

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $var$
    <type_definition> !?ioDeclarations ?let typeName
    $identifier$ ?let variableName
    select
      outInstruction = @localVariableDeclarationNoAssignmentAST {!typeName.location !typeName !variableName}
    or
      $=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
      outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST {
        !typeName.location
        !false
        !typeName
        !variableName
        !sourceExpression
      }
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @localVariableDeclarationWithAssignmentAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @localVariableDeclarationWithAssignmentAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
#--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMapEntry.null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
#--- Check target variable
  let targetVariableCppName = "var_" + [self.mVariableName identifierRepresentation] + "_" + [self.mVariableName.location startLocationIndex]
  [!?ioVariableMap insertInitializedLocalVariable
    !self.mVariableName
    !warnsIfNotMutated: true
    !expression.mResultType
    !targetVariableCppName
    !targetVariableCppName
  ]
#--- Generate instruction
  ioInstructionListForGeneration += !@localVariableOrConstantDeclarationWithSourceExpressionForGeneration {
    !expression.mResultType
    !false
    !targetVariableCppName
    !expression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @localVariableDeclarationNoAssignmentAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
  [!?ioTypeMap makeEntry !self.mTypeName ?*]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @localVariableDeclarationNoAssignmentAST analyzeSemanticInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext unused inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
{
#--- Check target variable
  let targetType = [ioTypeMap typeMapEntryForLKey !self.mTypeName]
  let targetVariableCppName = "var_" + [self.mVariableName identifierRepresentation] + "_" + [self.mVariableName.location startLocationIndex]
  [!?ioVariableMap insertDeclaredLocalVariable
    !self.mVariableName
    !targetType
    !targetVariableCppName
    !targetVariableCppName
  ]
#--- Generate instruction
  ioInstructionListForGeneration += !@localVariableDeclarationForGeneration {
    !targetType
    !targetVariableCppName
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @localVariableDeclarationForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMapEntry mVariableType
  private let @string mCppVariableName
}

#·······················································································································

override method @localVariableDeclarationForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [self.mVariableType addHeaderFileName !?ioInclusionSet]
  ioGeneratedCode += "GALGAS_" + [self.mVariableType identifierRepresentation] + " " + self.mCppVariableName + " ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
