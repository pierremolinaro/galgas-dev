#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Semantic decorated types for template generation                                                                    *
#                                           
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                                                                      *
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @templateInstructionStringForGeneration : @templateInstructionForGeneration {
  private let @string mTemplateString
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @templateInstructionExpressionForGeneration : @templateInstructionForGeneration {
  private let @semanticExpressionForGeneration mExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @templateBlockInstructionForGeneration : @templateInstructionForGeneration {
  private let @semanticExpressionForGeneration mExpression
  private let @location mLocation
  private let @templateInstructionListForGeneration mBlockInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @templateInstructionGetColumnLocationForGeneration : @templateInstructionForGeneration {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @templateInstructionGotoColumnLocationForGeneration : @templateInstructionForGeneration {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @templateInstructionIfBranchListForGeneration {
  public var @semanticExpressionForGeneration mExpression
  public var @templateInstructionListForGeneration mInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @templateInstructionIfForGeneration : @templateInstructionForGeneration {
  private let @templateInstructionIfBranchListForGeneration mTemplateInstructionIfBranchList
  private let @templateInstructionListForGeneration mElseInstructionList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

