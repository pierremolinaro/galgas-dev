#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
//————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  //······························································································

  rule <primary_ggs3> ?!@galgasDeclarationAST ioDeclarations
                      !@semanticExpressionAST outExpression {
    $[$
  //--- Get source identity characteristics
    let startLocation = @location.here
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST receiverExpression
  //--- Get getter name
    $identifier$ ?let @lstring getterName
  //--- Actual parameters
    <output_expression_list_ggs3> !?ioDeclarations ?let @actualOutputArgumentList expressionList
    $]$
    let endLocation = @location.here
    outExpression = @getterCallExpressionAST {
      !errorOnGetterCallInsteadOfPropertyRead: [option galgas_cli_options.errorPropertyGetterCall value]
      !receiverExpression
      !getterName
      !expressionList
      ![startLocation union !endLocation]
    }
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————

class @getterCallExpressionAST : @semanticExpressionAST {
  private let @bool errorOnGetterCallInsteadOfPropertyRead %initArgLabel
  private let @semanticExpressionAST mReceiver
  private let @lstring mGetterName
  private let @actualOutputArgumentList mActualArgumentList
  private let @location mExpressionLocation

  //······························································································

  override method enterExpressionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    [self.mReceiver enterExpressionInSemanticContext !?ioTypeMap]
    [self.mActualArgumentList enterInSemanticContext !?ioTypeMap]
  }

  //······························································································

  override method analyzeSemanticExpression
                          ?usefulnessCallerEntityName: let @lstring inUsefulnessCallerEntityName
                          ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                          ?inferenceType: let @unifiedTypeMapEntry unused inType
                          ?let @analysisContext inAnalysisContext
                          ?!@unifiedTypeMap ioTypeMap
                          ?!@localVarManager ioVariableMap
                          !@semanticExpressionForGeneration outExpression {
  //--- Check self is not inkoed before full initialization
    if self.mReceiver is @selfInExpressionAST then
      [ioVariableMap checkSelfObjectIsFullyInitialized !self.mGetterName.location]
    end
  //-------------------------------------- Expression analysis
    [self.mReceiver analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: @unifiedTypeMapEntry.null
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?@semanticExpressionForGeneration receiverExpression
    ]
    let @unifiedTypeMapEntry receiverType = receiverExpression.mResultType
  //-------------------------------------- Search getter
    if let aGetter = [receiverType definition].getterMap @[self.mGetterName] then
      if (aGetter.mGetterNameThatObsoletesInvokationName != "") && [option galgas_cli_options.errorObsoleteGetterCall value] then
        error self.mGetterName : "obsolete getter" fixit {
          replace aGetter.mGetterNameThatObsoletesInvokationName
        }
      end
      if self.errorOnGetterCallInsteadOfPropertyRead
        && [[receiverType definition].propertyMap hasKey !self.mGetterName.string]
        && ([self.mActualArgumentList count] == 0) then
        error self.mExpressionLocation : "property getter call (due to '--error-property-getter-call' option)"
      end
    //--- Analysis arguments
      if [self.mActualArgumentList count] != [aGetter.mArgumentTypeList count] then
        error self.mGetterName: "calling the '" + self.mGetterName + "' getter of '@" + [receiverType definition].typeName.string + "' requires "
        + [aGetter.mArgumentTypeList count] + " parameter(s), while this call has "
        + [self.mActualArgumentList count] + " parameter(s)" : outExpression
      else
        var @semanticExpressionListForGeneration constructorEffectiveParameterList = @()
        for (mActualSelector mExpression mEndOfExpressionLocation) in self.mActualArgumentList,
            (mFormalSelector mFormalArgumentType 2*) in aGetter.mArgumentTypeList do
          [mExpression analyzeSemanticExpression
            !usefulnessCallerEntityName: inUsefulnessCallerEntityName
            !?ioUsefulEntitiesGraph
            !inferenceType: mFormalArgumentType
            !inAnalysisContext
            !?ioTypeMap
            !?ioVariableMap
            ?@semanticExpressionForGeneration exp
          ]
          if mFormalSelector.string != mActualSelector.string then
            let @string s = "!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end
            error mActualSelector : "the selector should be '" + s + "'" fixit { replace s }
          end
          checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType !exp.mResultType !mEndOfExpressionLocation !?exp)
          constructorEffectiveParameterList += !exp
        end
        outExpression = @getterCallExpressionForGeneration {
          !aGetter.mReturnedType
          !self.mGetterName.location
          !aGetter.mKind
          !receiverExpression
          !@()
          !if aGetter.mGetterNameThatObsoletesInvokationName == "" then self.mGetterName.string else aGetter.mGetterNameThatObsoletesInvokationName end
          !constructorEffectiveParameterList
          !aGetter.mHasCompilerArgument
        }
        if inAnalysisContext.semanticContext.galgas4
         && ([self.mActualArgumentList count] == 0)
         && [option galgas_cli_options.errorOnGetterCallWithNoArgument value] then
          error self.mExpressionLocation : "getter with no argument, remove parenthesis" fixit { remove }
        end
      end
  //-------------------------------------- The getter does not exist, it is a property ?
    elsif [self.mActualArgumentList count] == 0, let prop = [receiverType definition].propertyMap @[self.mGetterName] then
      [prop.mAccessControl checkGetAccess !inAnalysisContext.selfAvailability !self.mGetterName]
      outExpression = @propertyAccessExpressionForGeneration {
        !prop.mPropertyType
        !self.mGetterName.location
        !receiverExpression
        !self.mGetterName.string
      }
      if self.errorOnGetterCallInsteadOfPropertyRead then # [option galgas_cli_options.errorPropertyGetterCall value] then
        error self.mExpressionLocation : "property getter call (due to '--error-property-getter-call' option)"
      end
  //-------------------------------------- not found, old style search
    else
      var @uint matchingReaderCount = 0
      if [receiverType definition].typeKind == .structType then
        var @functionSignature getterFormalArgumentTypeList = @()
        var hasCompilerArgument = true
        var returnedType = @unifiedTypeMapEntry.null
        var kind = @methodKind.definedAsExtension
        let @stringlist fieldList = @()
        var obsoletedByGetter = ""
        for (propertyTypeEntry propertyName 3*) in [receiverType definition].currentTypedPropertyList do
          let propertyType = [ioTypeMap typeMapEntryForLKey !@{![propertyTypeEntry definition].typeName.string !.here}]
          let aMap = [propertyType definition].getterMap
          with self.mGetterName.string in aMap do
            if [propertyType definition].typeName.string == propertyName.string then
              matchingReaderCount += 1
              getterFormalArgumentTypeList = mArgumentTypeList
              hasCompilerArgument = mHasCompilerArgument
              returnedType = mReturnedType
              receiverExpression = @propertyAccessExpressionForGeneration {
                !returnedType
                !self.mGetterName.location
                !receiverExpression
                !propertyName.string
              }
              kind = mKind
              obsoletedByGetter = mGetterNameThatObsoletesInvokationName
            end
          end
        end
        if matchingReaderCount == 0 then
          error self.mGetterName
          : "the '@"+ [receiverType definition].typeName.string + "' struct type does not define the '" + self.mGetterName.string
          + "' getter, and none of its fields defines it"
          : getterFormalArgumentTypeList, hasCompilerArgument, returnedType, kind
        elsif matchingReaderCount > 1 then
          var @string s = ""
          for (mValue) in fieldList
            do s += mValue
            between s += ", "
          end
          error self.mGetterName
          : "the '@"+ [receiverType definition].typeName.string + "' struct type does not define the '" + self.mGetterName.string
          + "' getter, and several of its fields defines it:" + s + " (exactly one field should define it)"
          : getterFormalArgumentTypeList, hasCompilerArgument, returnedType, kind
        end
      //--- Analysis arguments
        if [self.mActualArgumentList count] != [getterFormalArgumentTypeList count] then
          error self.mGetterName: "calling the '" + self.mGetterName + "' getter of '@" + [receiverType definition].typeName.string + "' requires "
          + [[getterFormalArgumentTypeList count] string] + " parameter(s), while this call has "
          + [[self.mActualArgumentList count] string] + " parameter(s)" : outExpression
        else
          var @semanticExpressionListForGeneration constructorEffectiveParameterList = @()
          for (mActualSelector mExpression mEndOfExpressionLocation) in self.mActualArgumentList,
              (mFormalSelector mFormalArgumentType 2*) in getterFormalArgumentTypeList do
            [mExpression analyzeSemanticExpression
              !usefulnessCallerEntityName: inUsefulnessCallerEntityName
              !?ioUsefulEntitiesGraph
              !inferenceType: mFormalArgumentType
              !inAnalysisContext
              !?ioTypeMap
              !?ioVariableMap
              ?@semanticExpressionForGeneration exp
            ]
            if mFormalSelector.string != mActualSelector.string then
              let @string s = "!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end
              error mActualSelector : "the selector should be '" + s + "'" fixit { replace s }
            end
            checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType !exp.mResultType !mEndOfExpressionLocation !?exp)
            constructorEffectiveParameterList += !exp
          end
          if (obsoletedByGetter != "") && [option galgas_cli_options.errorObsoleteGetterCall value] then
            error self.mGetterName : "obsolete getter" fixit { replace obsoletedByGetter }
          end
          outExpression = @getterCallExpressionForGeneration {
            !returnedType
            !self.mGetterName.location
            !kind
            !receiverExpression
            !fieldList
            !if obsoletedByGetter == "" then self.mGetterName.string else obsoletedByGetter end
            !constructorEffectiveParameterList
            !hasCompilerArgument
          }
        end
      elsif [[receiverType definition].getterMap count] == 0 then
        error self.mGetterName
        : "the '@"+ [receiverType definition].typeName.string + "' type does not define any getter"
        : outExpression
      else
        error self.mGetterName
        : "the '@"+ [receiverType definition].typeName.string + "' type does not define the '" + self.mGetterName + "' getter "
        : outExpression
        fixit { replace [[receiverType definition].getterMap keyList] }
      end
    end
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
//————————————————————————————————————————————————————————————————————————————————————————————————

class @getterCallExpressionForGeneration : @semanticExpressionForGeneration {
  public let @methodKind mKind
  public let @semanticExpressionForGeneration mReceiverExpression
  public let @stringlist mFieldList
  public let @string mGetterName
  public let @semanticExpressionListForGeneration mActualArgumentList
  public let @bool mHasCompilerArgument

  //······························································································

  override method generateExpression
    ?!@string ioGeneratedCode
    ?!@stringset ioInclusionSet
    ?!@uint ioTemporaryVariableIndex
    ?!@stringset ioUnusedVariableCppNameSet
    !@string outCppExpression
  {
  //--- Add return type header
    [self.mResultType addHeaderFileName !?ioInclusionSet]
  //--- Receiver expression
    [self.mReceiverExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let @string receiverCppName
    ]
  //--- Reader operands
    var @stringlist getterArgumentCppNameList = @()
    for (mExpression) in self.mActualArgumentList do
      [mExpression generateExpression
        !?ioGeneratedCode
        !?ioInclusionSet
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        ?let argumentCppName
      ]
      getterArgumentCppNameList += !argumentCppName
    end
  //--- Generate Reader call
    switch self.mKind
    case definedAsExtension :
      var @unifiedTypeMapEntry baseType = self.mReceiverExpression.mResultType
     [baseType addHeaderFileName !?ioInclusionSet]
      var @bool searching = true
      loop (@uint.max) while searching do
        if not [[baseType definition].superType isNull] then
          if [[[baseType definition].superType definition].getterMap hasKey !self.mGetterName] then
            baseType = [baseType definition].superType
          else
            searching = false
          end
        else
          searching = false
        end
      end
      ioInclusionSet += !"getter-" + [[baseType definition].typeName.string fileNameRepresentation] + "-" + [self.mGetterName fileNameRepresentation]
      [!?ioUnusedVariableCppNameSet removeKey !receiverCppName]
      if [[self.mReceiverExpression.mResultType definition].typeKind isClassType] then
        outCppExpression = "callExtensionGetter_" + [self.mGetterName identifierRepresentation]
           + " ((const cPtr_" + [self.mReceiverExpression.mResultType identifierRepresentation] + " *) " + receiverCppName + ".ptr (), "
      else
        [self.mReceiverExpression.mResultType addHeaderFileName !?ioInclusionSet]
        outCppExpression = "extensionGetter_" + [self.mGetterName identifierRepresentation] + " (" + receiverCppName + ", "
      end
    case definedAsMember :
      outCppExpression = receiverCppName
      for (mValue) in self.mFieldList do
        outCppExpression += ".readProperty_" + [mValue identifierRepresentation] + " ()"
      end
      [self.mResultType addHeaderFileName !?ioInclusionSet]
      outCppExpression +=  ".getter_" + [self.mGetterName identifierRepresentation] + " ("
    end
    for (mValue) in getterArgumentCppNameList
      do outCppExpression += mValue
      between outCppExpression += ", "
    end
    if [getterArgumentCppNameList count] == 0 then
      if self.mHasCompilerArgument then
        [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
        outCppExpression += compilerCppName () + " COMMA_"
      end
    elsif self.mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
      outCppExpression += ", " + compilerCppName () + " COMMA_"
    else
      outCppExpression += " COMMA_"
    end
    outCppExpression += [self.mLocation sourceFile] + ")"
  }

  //······························································································

}

//————————————————————————————————————————————————————————————————————————————————————————————————
