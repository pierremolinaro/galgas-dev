#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @getterCallExpressionAST : @semanticExpressionAST {
  private let @bool errorOnGetterCallInsteadOfPropertyRead %selector
  private let @semanticExpressionAST mReceiver
  private let @lstring mGetterName
  private let @actualOutputExpressionList mExpressions
  private let @location mExpressionLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $[$
  #--- Get source identity characteristics
    let startLocation = @location.here
    <expression> ?let @semanticExpressionAST receiverExpression
  #--- Get getter name
    $identifier$ ?let @lstring getterName
  #--- Actual parameters
    <output_expression_list> ?let @actualOutputExpressionList expressionList
    $]$
    let endLocation = @location.here
    outExpression = @getterCallExpressionAST.new {
      !errorOnGetterCallInsteadOfPropertyRead: [option galgas_cli_options.errorPropertyGetterCall value]
      !receiverExpression
      !getterName
      !expressionList
      ![startLocation union !endLocation]
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4ExpressionSyntax {

  #·····················································································································
  
  rule <primary> !@semanticExpressionAST outExpression {
    $[$
  #--- Get source identity characteristics
    let startLocation = @location.here
    <expression> ?let @semanticExpressionAST receiverExpression
  #--- Get getter name
    $identifier$ ?let @lstring getterName
  #--- Actual parameters
    <output_expression_list> ?let @actualOutputExpressionList expressionList
    $]$
    let endLocation = @location.here
    outExpression = @getterCallExpressionAST.new {
      !errorOnGetterCallInsteadOfPropertyRead: true
      !receiverExpression
      !getterName
      !expressionList
      ![startLocation union !endLocation]
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @getterCallExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  [self.mReceiver enterExpressionInSemanticContext !?ioTypeMap]
  [self.mExpressions enterInSemanticContext !?ioTypeMap]
}

#·····················································································································

override method @getterCallExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression
{
#--------------------------------------- Expression analysis
  [self.mReceiver analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMap-entry.null
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration receiverExpression
  ]
  let @unifiedTypeMap-entry receiverType = receiverExpression.mResultType
#--------------------------------------- Search getter
  if let [[receiverType mGetterMap] searchKey
      !self.mGetterName.string
      ?let kind
      ?let getterFormalArgumentTypeList
      ?*
      ?let @bool hasCompilerArgument
      ?let @unifiedTypeMap-entry returnedType
      ?*
      ?let @string getterErrorMessage] then
    if getterErrorMessage != "" then
      error self.mGetterName : getterErrorMessage
    end
    if self.errorOnGetterCallInsteadOfPropertyRead # [option galgas_cli_options.errorPropertyGetterCall value]
      && [[receiverType mPropertyMap] hasKey !self.mGetterName.string]
      && ([self.mExpressions length] == 0) then
      error self.mExpressionLocation : "property getter call (due to '--error-property-getter-call' option)"
    end
  #--- Analysis arguments
    if [self.mExpressions length] != [getterFormalArgumentTypeList length] then
      error self.mGetterName: "calling the '" + self.mGetterName + "' getter of '@" + [receiverType key] + "' requires "
      + [[getterFormalArgumentTypeList length] string] + " parameter(s), while this call has "
      + [[self.mExpressions length] string] + " parameter(s)" : outExpression
    else
      var @semanticExpressionListForGeneration constructorEffectiveParameterList = {}
      for (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressions,
          (mFormalSelector mFormalArgumentType *) in getterFormalArgumentTypeList do
        [mExpression analyzeSemanticExpression
          !inUsefulnessCallerEntityName
          !?ioUsefulEntitiesGraph
          !inferenceType: mFormalArgumentType
          !inAnalysisContext
          !?ioVariableMap
          ?@semanticExpressionForGeneration exp
        ]
        if mFormalSelector.string != mActualSelector.string then
          let s = "!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end
          error mActualSelector : "the selector should be '" + s + "'" fixit { replace s }
        end
        checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType !exp.mResultType !mEndOfExpressionLocation !?exp)
        constructorEffectiveParameterList += !exp
      end
      outExpression = @getterCallExpressionForGeneration.new {
        !returnedType
        !self.mGetterName.location
        !kind
        !receiverExpression
        !{}
        !self.mGetterName.string
        !constructorEffectiveParameterList
        !hasCompilerArgument
      }
    end
#--------------------------------------- The getter does not exist, it is a property ?
  elsif [self.mExpressions length] == 0, let [[receiverType mPropertyMap] searchKey !self.mGetterName.string ?let isPublic ?* ?let propertyType] then
    if not isPublic then
      error self.mGetterName : " inaccessible property (due to its 'private' qualifier)"
    end
    outExpression = @structPropertyAccessExpressionForGeneration.new {
      !propertyType
      !self.mGetterName.location
      !receiverExpression
      !self.mGetterName.string
    }
    if self.errorOnGetterCallInsteadOfPropertyRead then # [option galgas_cli_options.errorPropertyGetterCall value] then
      error self.mExpressionLocation : "property getter call (due to '--error-property-getter-call' option)"
    end
#--------------------------------------- not found, old style search
  else
    var @uint matchingReaderCount = 0
    if [receiverType mTypeKindEnum] == @typeKindEnum.structType then
      var @functionSignature getterFormalArgumentTypeList = {}
      var hasCompilerArgument = true
      var returnedType = @unifiedTypeMap-entry.null
      var kind = @methodKind.definedAsExtension
      let @stringlist fieldList = {}
      for (propertyTypeEntry propertyName * *) in [receiverType mCurrentTypedPropertyList] do
        let propertyType = @unifiedTypeMap-entry.searchKey {
          !inAnalysisContext.mSemanticContext.mTypeMap
          !.new {![propertyTypeEntry key] !.here}
        }
        let aMap = [propertyType mGetterMap]
        with self.mGetterName.string in aMap  do
          if [propertyType key] == propertyName.string then
            matchingReaderCount += 1
            getterFormalArgumentTypeList = mArgumentTypeList
            hasCompilerArgument = mHasCompilerArgument
            returnedType = mReturnedType
            receiverExpression = @structPropertyAccessExpressionForGeneration.new {
              !returnedType
              !self.mGetterName.location
              !receiverExpression
              !propertyName.string
            }
            kind = mKind
            if mErrorMessage != "" then
              error self.mGetterName : mErrorMessage
            end
          end
        end
      end
      if matchingReaderCount == 0 then
        error self.mGetterName
        : "the '@"+ [receiverType key] + "' struct type does not define the '" + self.mGetterName.string
        + "' getter, and none of its fields defines it"
        : getterFormalArgumentTypeList, hasCompilerArgument, returnedType, kind
      elsif matchingReaderCount > 1 then
        var @string s = ""
        for (mValue) in fieldList
          do s += mValue
          between s += ", "
        end
        error self.mGetterName
        : "the '@"+ [receiverType key] + "' struct type does not define the '" + self.mGetterName.string
        + "' getter, and several of its fields defines it:" + s + " (exactly one field should define it)"
        : getterFormalArgumentTypeList, hasCompilerArgument, returnedType, kind
      end
    #--- Analysis arguments
      if [self.mExpressions length] != [getterFormalArgumentTypeList length] then
        error self.mGetterName: "calling the '" + self.mGetterName + "' getter of '@" + [receiverType key] + "' requires "
        + [[getterFormalArgumentTypeList length] string] + " parameter(s), while this call has "
        + [[self.mExpressions length] string] + " parameter(s)" : outExpression
      else
        var @semanticExpressionListForGeneration constructorEffectiveParameterList = {}
        for (mActualSelector mExpression mEndOfExpressionLocation) in self.mExpressions,
            (mFormalSelector mFormalArgumentType *) in getterFormalArgumentTypeList do
          [mExpression analyzeSemanticExpression
            !inUsefulnessCallerEntityName
            !?ioUsefulEntitiesGraph
            !inferenceType: mFormalArgumentType
            !inAnalysisContext
            !?ioVariableMap
            ?@semanticExpressionForGeneration exp
          ]
          if mFormalSelector.string != mActualSelector.string then
            let s = "!" + if mFormalSelector.string != "" then mFormalSelector.string + ":" else "" end
            error mActualSelector : "the selector should be '" + s + "'" fixit { replace s }
          end
          checkAssignmentTypeWithImplicitGetterCall (!mFormalArgumentType !exp.mResultType !mEndOfExpressionLocation !?exp)
          constructorEffectiveParameterList += !exp
        end
        outExpression = @getterCallExpressionForGeneration.new {
          !returnedType
          !self.mGetterName.location
          !kind
          !receiverExpression
          !fieldList
          !self.mGetterName.string
          !constructorEffectiveParameterList
          !hasCompilerArgument
        }
      end
    elsif [[receiverType mGetterMap] count] == 0 then
      error self.mGetterName
      : "the '@"+ [receiverType key] + "' type does not define any getter"
      : outExpression
    else
      error self.mGetterName
      : "the '@"+ [receiverType key] + "' type does not define the '" + self.mGetterName + "' getter "
      : outExpression
      fixit { replace [[receiverType mGetterMap] keyList] }
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @getterCallExpressionForGeneration : @semanticExpressionForGeneration {
  public var @methodKind mKind
  public var @semanticExpressionForGeneration mReceiverExpression
  public var @stringlist mFieldList
  public var @string mGetterName
  public var @semanticExpressionListForGeneration mExpressions
  public var @bool mHasCompilerArgument
}

#·····················································································································

override method @getterCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
{
#--- Add return type header
  [self.mResultType addHeaderFileName !?ioInclusionSet]
#--- Receiver expression
  [self.mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string receiverCppName
  ]
#--- Reader operands
  var @stringlist getterArgumentCppNameList = {}
  for (mExpression) in self.mExpressions do
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let argumentCppName
    ]
    getterArgumentCppNameList += !argumentCppName
  end
#--- Generate Reader call
  switch self.mKind
  case definedAsExtension :
    var @unifiedTypeMap-entry baseType = self.mReceiverExpression.mResultType
   [baseType addHeaderFileName !?ioInclusionSet]
    var @bool searching = true
    loop (@uint.max) while searching do
      if not [[baseType mSuperType] isNull] then
        if [[[baseType mSuperType] mGetterMap] hasKey !self.mGetterName] then
          baseType = [baseType mSuperType]
        else
          searching = false
        end
      else
        searching = false
      end  
    end
    ioInclusionSet += !"getter-" + [[baseType key] fileNameRepresentation] + "-" + [self.mGetterName fileNameRepresentation]
    [!?ioUnusedVariableCppNameSet removeKey !receiverCppName]
    if [[self.mReceiverExpression.mResultType mTypeKindEnum] isClassType] then
      outCppExpression = "callExtensionGetter_" + [self.mGetterName identifierRepresentation]
         + " ((const cPtr_" + [self.mReceiverExpression.mResultType identifierRepresentation] + " *) " + receiverCppName + ".ptr (), "
    else
      [self.mReceiverExpression.mResultType addHeaderFileName !?ioInclusionSet]
      outCppExpression = "extensionGetter_" + [self.mGetterName identifierRepresentation] + " (" + receiverCppName + ", "
    end
  case definedAsMember :
    outCppExpression = receiverCppName
    for (mValue) in self.mFieldList do
      outCppExpression += ".readProperty_" + [mValue identifierRepresentation] + " ()"
    end
    [self.mResultType addHeaderFileName !?ioInclusionSet]
    outCppExpression +=  ".getter_" + [self.mGetterName identifierRepresentation] + " ("
  end
  for (mValue) in getterArgumentCppNameList
    do outCppExpression += mValue
    between outCppExpression += ", "
  end
  if [getterArgumentCppNameList length] == 0 then
    if self.mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
      outCppExpression += compilerCppName () + " COMMA_"
    end
  elsif self.mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    outCppExpression += ", " + compilerCppName () + " COMMA_"
  else
    outCppExpression += " COMMA_"
  end
  outCppExpression += [self.mLocation sourceFile] + ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
