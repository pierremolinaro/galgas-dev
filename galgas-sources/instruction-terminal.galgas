#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @terminalCheckInstruction : @syntaxInstructionAST {
  @lstring mTerminalName
  @actualInputParameterListAST mActualInputParameterList
  @2lstringlist mIndexingKeyList # Empty list if no index
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationPreceedingDelimitor
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationToken
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3SyntaxComponentSyntax {

  #·····················································································································

  rule <syntax_instruction> !@syntaxInstructionAST outInstruction {
    $\$terminal\$$ ?let @lstring terminalName indexing terminalReference
    <actual_input_parameter_list> ?let @actualInputParameterListAST actualInputParameterList
    <terminal_instruction_indexing> ?let indexNameList
  #--- Get syntax directed translation result string
    @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationPreceedingDelimitor
    @abstractGrammarInstructionSyntaxDirectedTranslationResult grammarInstructionSyntaxDirectedTranslationPreceedingToken
    select
      grammarInstructionSyntaxDirectedTranslationPreceedingDelimitor = @grammarInstructionSyntaxDirectedTranslationResultNone.new
      grammarInstructionSyntaxDirectedTranslationPreceedingToken = @grammarInstructionSyntaxDirectedTranslationResultNone.new
    or
      $:>$
      <syntax_directed_translation_result> ?grammarInstructionSyntaxDirectedTranslationPreceedingDelimitor
      <syntax_directed_translation_result> ?grammarInstructionSyntaxDirectedTranslationPreceedingToken
    end
    outInstruction = @terminalCheckInstruction.new {
      ![terminalName location]
      !terminalName
      !actualInputParameterList
      !indexNameList
      !grammarInstructionSyntaxDirectedTranslationPreceedingDelimitor
      !grammarInstructionSyntaxDirectedTranslationPreceedingToken
    }
  }

  #·····················································································································

  rule <terminal_instruction_indexing> !@2lstringlist outIndexNameList {
    outIndexNameList = {}
    select
    or
      $indexing$
      repeat
        $identifier$ ?let @lstring indexName indexing indexingNameReference
        @lstring postfixName
        select
          postfixName = ["" nowhere]
        or
          $"string"$ ?postfixName
        end
        outIndexNameList += !indexName !postfixName
      while
        $,$
      end
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! TRANSFORM
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @terminalCheckInstruction transformInstruction
  ?!usedTerminalMap:@terminalSymbolsMapForGrammarAnalysis ioActuallyUsedTerminalSymbolMap
  ?nonTerminalSymbolMap:let @nonTerminalSymbolMapForGrammarAnalysis unused inNonTerminalSymbolMap
  ?!addedTerminalIndex:@uint unused ioAddedNonTerminalIndex
  ?!@syntaxInstructionListForGrammarAnalysis ioSyntaxInstructionList {
  @uint terminalSymbolIndex
  with [self.mTerminalName string] in ioActuallyUsedTerminalSymbolMap  do
    terminalSymbolIndex = mTerminalIndex
  else
    terminalSymbolIndex = [ioActuallyUsedTerminalSymbolMap count]
    [!?ioActuallyUsedTerminalSymbolMap insertKey !self.mTerminalName !terminalSymbolIndex]
  end
  ioSyntaxInstructionList += !@terminalInstructionForGrammarAnalysis.new {
    !self.mInstructionLocation
    !self.mTerminalName
    !terminalSymbolIndex
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @terminalCheckInstruction analyzeSyntaxInstruction
  ?let @lstring unused inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?let @bool inHasTranslateFeature
  ?let @terminalMap inTerminalMap
  ?let @string inLexiqueName
  ?let @nonterminalMap unused inNonterminalMap
  ?let @string unused inComponentName
  ?let @stringset inIndexNameSet
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap
  ?!@uint unused ioSelectMethodCount {
  [inTerminalMap searchKey !self.mTerminalName ?let @lexicalSentValueList sentAttributeList]
#---
  if [self.mActualInputParameterList length] != [sentAttributeList length] then
    error self.mTerminalName
    : "naming the '$" + self.mTerminalName + "$' terminal requires " + [[sentAttributeList length] string]
    + " input parameter" + if [sentAttributeList length] > 1 then "s" else "" end
    + ", but this instruction names "
    + [[self.mActualInputParameterList length] string] + " input parameter" 
    + if [self.mActualInputParameterList length] > 1 then "s" else "" end
  end
#---
  var terminalCheckAssignementList =@terminalCheckAssignementList {}
  for (mActualSelector mInputParameter) in self.mActualInputParameterList, (mLexicalFormalSelector mLexicalAttributeName mLexicalType) in sentAttributeList do
    [mInputParameter analyzeInputParameter
      !inAnalysisContext
      !mLexicalType
      !mLexicalAttributeName
      !?terminalCheckAssignementList
      !?ioVariableMap
    ]
    if mLexicalFormalSelector.string != mActualSelector.string then
      error mActualSelector : "the actual selector should be '?" + mLexicalFormalSelector + if mLexicalFormalSelector.string != "" then ":" else "" end + "'"
      warning mLexicalFormalSelector : "the formal selector is declared here"
    end
  end
#---
  for (mValue0 mValue1) in self.mIndexingKeyList do
    if not [inIndexNameSet hasKey ![mValue0 string]] then
      error mValue0 : "the '" + mValue0 + "' indexing name is not declared by the lexique" fixit { replace inIndexNameSet }
    end
  end
#--- Check syntax directed translation destination variable
  [self.mGrammarInstructionSyntaxDirectedTranslationPreceedingDelimitor analyzeSDT
    !inAnalysisContext
    !inHasTranslateFeature
    !?ioVariableMap
  ]
  [self.mGrammarInstructionSyntaxDirectedTranslationToken analyzeSDT
    !inAnalysisContext
    !inHasTranslateFeature
    !?ioVariableMap
  ]
#---
  ioInstructionListForGeneration += !@terminalCheckInstructionForGeneration.new {
    !self.mInstructionLocation
    !self.mTerminalName
    !inLexiqueName
    !terminalCheckAssignementList
    !self.mIndexingKeyList
    !self.mGrammarInstructionSyntaxDirectedTranslationPreceedingDelimitor
    !self.mGrammarInstructionSyntaxDirectedTranslationToken
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION TYPES
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @terminalCheckInstructionForGeneration : @syntaxInstructionForGeneration {
  @lstring mTerminalName
  @string mLexiqueIdentifier
  @terminalCheckAssignementList mTerminalCheckAssignementList
  @2lstringlist mIndexingKeyList
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationPreceedingDelimitor
  @abstractGrammarInstructionSyntaxDirectedTranslationResult mGrammarInstructionSyntaxDirectedTranslationToken
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @terminalCheckInstructionForGeneration appendSyntaxSignature
  ?let @string unused inPosfix
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
 {
  ioInstructionListForGeneration += !@terminalCheckInstructionForGeneration.new {
    !self.mInstructionLocation
    !self.mTerminalName
    !self.mLexiqueIdentifier
    !@terminalCheckAssignementList.emptyList
    !self.mIndexingKeyList
    !@grammarInstructionSyntaxDirectedTranslationResultNone.new
    !@grammarInstructionSyntaxDirectedTranslationResultNone.new
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! COMPARE SYNTAX SIGNATURE
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @terminalCheckInstructionForGeneration compareInstructionSyntaxSignature
  ?let @semanticInstructionForGeneration inTestedInstruction
  ->@bool outOk
{
  cast inTestedInstruction
  case >= @terminalCheckInstructionForGeneration si :
    outOk = [self.mTerminalName string] == [[si mTerminalName] string]
    if not outOk then
      error [si mInstructionLocation]
      :"syntax signature error; the expected syntax instruction here is the '$" + self.mTerminalName + "$' terminal check"
    end
  case >= @syntaxInstructionForGeneration si :
    error [si mInstructionLocation]
      :"syntax signature error; the expected syntax instruction here is the '$" + self.mTerminalName + "$' terminal check"
    outOk = false
  else
    error self.mInstructionLocation : "internal error"
    outOk = false
  end
  if not outOk then
    error self.mInstructionLocation
    :"reference syntax instruction is here"
  end  
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @terminalCheckInstructionForGeneration generateInstruction
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
#--- Get synthetized attributes
  for (mTypeName mTargetVarCppName mSourceLexicalAttributeName) in self.mTerminalCheckAssignementList do
    if mTypeName != "" then
      ioGeneratedCode += "GALGAS_" + [mTypeName identifierRepresentation] + " "
    else
    end
    ioGeneratedCode += mTargetVarCppName + " = " + compilerCppName () + "->synthetizedAttribute_"
                    + [mSourceLexicalAttributeName identifierRepresentation]
                    + " () ;\n"
  end
#--- Indexing
  for (mValue0 mValue1) in self.mIndexingKeyList do
    ioGeneratedCode += compilerCppName ()
    ioGeneratedCode += "->enterIndexing (C_Lexique_" + self.mLexiqueIdentifier + "::kIndexing_"
    ioGeneratedCode += [mValue0 identifierRepresentation]
    ioGeneratedCode += ", " + [mValue1 utf8Representation] + ") ;\n"
  end
#--- Syntax directed translation
  [self.mGrammarInstructionSyntaxDirectedTranslationPreceedingDelimitor generateCode
    !inGenerateSyntaxDirectedTranslationString
    !"inCompiler->separatorString ()"
    !?ioUnusedVariableCppNameSet
    !?ioGeneratedCode
  ]
  [self.mGrammarInstructionSyntaxDirectedTranslationToken generateCode
    !inGenerateSyntaxDirectedTranslationString
    !"inCompiler->tokenString ()"
    !?ioUnusedVariableCppNameSet
    !?ioGeneratedCode
  ]
#--- Check terminal symbol
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
  ioGeneratedCode += compilerCppName () + "->acceptTerminal (C_Lexique_"
                  + self.mLexiqueIdentifier + "::kToken_" + [self.mTerminalName identifierRepresentation]
                  + [self.mInstructionLocation commaSourceFile] + ") ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
