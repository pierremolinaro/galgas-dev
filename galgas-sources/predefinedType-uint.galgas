#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Generate predefined types
#
#  Copyright (C) 2010, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @uintPredefinedTypeAST : @predefinedTypeAST {

  #-----------------------------------------------------------------------------------------------

  override getter cppDeclarationString -> @string {
    result = [filewrapper predefinedTypeGenerationTemplate.uint_type]
  }

  #-----------------------------------------------------------------------------------------------

  override getter getSupportedOperatorFlags -> @typeFeatures {
    result = .infixAddOperator | .infixSubOperator | .infixMulOperator | .infixDivOperator
      | .infixModOperator | .infixShiftOperator | .prefixPlusOperator
      | .infixAndOperator | .infixOrOperator | .infixXorOperator | .prefixTildeOperator
      | .generateDescriptionGetterUtilityMethod | .incDecOperator | .incDecOperatorNoOVF | .comparable | .equatable
      | .infixAddOperatorNoOVF | .infixSubOperatorNoOVF | .infixMulOperatorNoOVF | .infixDivOperatorNoOVF
      | .plusEqualOperatorWithExpression | .minusEqualOperatorWithExpression
      | .mulEqualOperatorWithExpression | .divEqualOperatorWithExpression
  }

  #-----------------------------------------------------------------------------------------------

  override method getClassFunctionMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                      !@classFunctionMap outMap {
    outMap = ()
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"compilationMode"
      !resultTypeName:"uint"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"random"
      !resultTypeName:"uint"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"max"
      !resultTypeName:"uint"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"errorCount"
      !resultTypeName:"uint"
      !hasLexiqueArg:false
    )
    enterClassFunctionWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"warningCount"
      !resultTypeName:"uint"
      !hasLexiqueArg:false
    )
    enterClassFunctionWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"valueWithMask"
      !argTypeName1:"uint"
      !argName1:"inLowerIndex"
      !argTypeName2:"uint"
      !argName2:"inUpperIndex"
      !resultTypeName:"uint"
      !hasLexiqueArg:true
    )
  }

  #-----------------------------------------------------------------------------------------------

  override method getGetterMap ?!@unifiedTypeMap ioUnifiedTypeMap
                               !@getterMap outMap {
    commonGetterMapForAllTypes (!?ioUnifiedTypeMap ?outMap)
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"double"
      !obsoleteName: ""
      !returnedTypeName:"double"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"sint"
      !obsoleteName: ""
      !returnedTypeName:"sint"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"sint64"
      !obsoleteName: ""
      !returnedTypeName:"sint64"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"bigint"
      !obsoleteName: ""
      !returnedTypeName:"bigint"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"uint64"
      !obsoleteName: ""
      !returnedTypeName:"uint64"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"lsbIndex"
      !obsoleteName: ""
      !returnedTypeName:"uint"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"significantBitCount"
      !obsoleteName: ""
      !returnedTypeName:"uint"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"oneBitCount"
      !obsoleteName: ""
      !returnedTypeName:"uint"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"string"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"alphaString"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"hexString"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"hexStringSeparatedBy"
      !"char"
      !"inSeparator"
      !"uint"
      !"inGroupCount"
      !returnedTypeName:"string"
      !hasCompilerArgument:true
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"xString"
      !obsoleteName: ""
      !returnedTypeName:"string"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"isUnicodeValueAssigned"
      !obsoleteName: ""
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"isInRange" !"range" !"inRange"
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )

    enterBaseFinalGetterWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"canAdd" !"uint" !"inOperand"
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"canSubstract" !"uint" !"inOperand"
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"canMultiply" !"uint" !"inOperand"
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )
    enterBaseFinalGetterWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !getterName:"canDivide" !"uint" !"inOperand"
      !returnedTypeName:"bool"
      !hasCompilerArgument:false
    )
  }

  #-----------------------------------------------------------------------------------------------

  override method getClassMethodMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                    !@classMethodMap outClassMethodMap {
    outClassMethodMap = ()
    enterClassMethodWithInputArgument (
      !?outClassMethodMap
      !?ioUnifiedTypeMap
      !methodName:"setRandomSeed"
      !argType:"uint"
      !argName:"inSeed"
      !compilerArgument:false
    )
  }

  #-----------------------------------------------------------------------------------------------

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

