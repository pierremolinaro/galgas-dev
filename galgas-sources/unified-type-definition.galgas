#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  semantics definitions for semantics component 
#                                           
#  Copyright (C) 2022, ..., 2022 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @unifiedTypeDefinition {
  public let @lstring mTypeName
  public let @bool mIsPredefined
  public let @bool mIsConcrete # false if abstract class
  public let @unifiedTypeMapEntry mSuperType
  public let @typeKindEnum mTypeKindEnum
  public let @bool mSupportCollectionValue
  public let @typedPropertyList mAllTypedPropertyList
  public let @propertyMap mPropertyMap # struct, class
  public let @typedPropertyList mCurrentTypedPropertyList
  public let @constructorMap mConstructorMap
  public let @getterMap mGetterMap
  public let @setterMap mSetterMap
  public let @instanceMethodMap mInstanceMethodMap
  public let @classMethodMap mClassMethodMap
  public let @optionalMethodMap mOptionalMethodMap
  public let @enumerationDescriptorList mEnumerationDescriptor # Empty List if cannot be enumerated
  public let @operators mHandledOperatorFlags
  public let @functionSignature mAddAssignOperatorArguments # Empty list if += operator is not supported
  public let @constantIndexMap mEnumConstantMap
  public let @enumConstantList mEnumConstantList
  public let @mapSearchMethodListAST mMapSearchMethodList # For a map, the list of search methods
  public let @mapSearchMethodListAST mMapEntrySearchConstructorList # For a map entry, the list of search methods of the associated map
  public let @bool mGenerateHeaderInSeparateFile # Significant only for classes
  public let @unifiedTypeMapEntry mTypeForEnumeratedElement
  public let @string defaultConstructorName %selector # Used in [@xxx default] (empty string if no default constructor)
  public let @string mHeaderFileName # Name of C++ header file that contains type declaration
  public let @headerKind mHeaderKind
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @unifiedTypeMapEntry identifierRepresentation -> @string {
  result = [[self definition].mTypeName.string identifierRepresentation]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @unifiedTypeMapEntry typeName -> @string {
  result = [self definition].mTypeName.string
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @unifiedTypeMapEntry baseType -> @unifiedTypeMapEntry outBaseType {
  outBaseType = self
  loop while not [[outBaseType definition].mSuperType isNull] do
    outBaseType = [outBaseType definition].mSuperType
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @unifiedTypeMapEntry addHeaderFileName ?!@stringset ioInclusions {
  let typeDefinition = [self definition]
  if (not typeDefinition.mIsPredefined) & (typeDefinition.mHeaderKind != .noHeader) then
    ioInclusions += !typeDefinition.mHeaderFileName
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @unifiedTypeMapEntry addHeaderFileName1 ?!@stringset ioInclusions {
  let typeDefinition = [self definition]
  if not typeDefinition.mIsPredefined then
    switch typeDefinition.mHeaderKind
    case noHeader :
    case oneHeader :
      ioInclusions += !typeDefinition.mHeaderFileName
    case twoHeaders :
      ioInclusions += !typeDefinition.mHeaderFileName + "-1"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

