#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  semantics definitions for semantics component
#
#  Copyright (C) 2022, ..., 2022 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

struct @unifiedTypeDefinition {
  public let @lstring typeName %initArgLabel
  public let @bool isPredefined %initArgLabel
  public let @bool isConcrete %initArgLabel # false if abstract class
  public let @unifiedTypeMapEntry superType %initArgLabel
  public let @typeKindEnum typeKind %initArgLabel
  public let @bool supportCollectionValue %initArgLabel
  public let @typedPropertyList allTypedPropertyList %initArgLabel
  public let @propertyMap propertyMap %initArgLabel # struct, class
  public let @typedPropertyList currentTypedPropertyList %initArgLabel
  public let @initializerMap initializerMap %initArgLabel
  public let @classFunctionMap classFunctionMap %initArgLabel
  public let @getterMap getterMap %initArgLabel
  public let @setterMap setterMap %initArgLabel
  public let @instanceMethodMap instanceMethodMap %initArgLabel
  public let @classMethodMap classMethodMap %initArgLabel
  public let @optionalMethodMap optionalMethodMap %initArgLabel
  public let @enumerationDescriptorList enumerationDescriptorList %initArgLabel # Empty List if cannot be enumerated
  public let @operators mHandledOperatorFlags
  public let @functionSignature mAddAssignOperatorArguments # Empty list if += operator is not supported
  public let @mapSearchMethodListAST mMapSearchMethodList # For a map, the list of search methods
  public let @mapSearchMethodListAST mMapEntrySearchConstructorList # For a map entry, the list of search methods of the associated map
  public let @bool generateHeaderInSeparateFile %initArgLabel # Significant only for classes
  public let @unifiedTypeMapEntry mTypeForEnumeratedElement
  public let @string defaultConstructorName %initArgLabel # Used in [@xxx default] (empty string if no default initializer)
  public let @string mHeaderFileName # Name of C++ header file that contains type declaration
  public let @headerKind headerKind %initArgLabel
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#  T Y P E    K I N D    E N U M E R A T I O N
#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @typeKindEnum {
  case classType (@bool isReference)
  case weakReferenceType (@unifiedTypeMapEntry referenceType)
  case enumType (@constantIndexMap constantMap)
  case listType
  case sortedListType
  case mapType
  case sharedMapType
  case sharedMapEntryType
  case listMapType
  case boolsetType
  case structType
  case graphType
  case externType
  case otherType
  case packageType

  #-----------------------------------------------------------------------------------------------

  getter string -> @string {
    switch self
      case classType (isReference) : result = if isReference then "reference class" else "value class" end
      case enumType (*) : result = "enumeration"
      case listType : result = "list"
      case sortedListType : result = "sorted list"
      case mapType : result = "map"
      case sharedMapType : result = "shared map"
      case sharedMapEntryType : result = "shared map entry"
      case listMapType : result = "list map"
      case structType : result = "struct"
      case boolsetType : result = "boolset"
      case graphType : result = "graph"
      case otherType : result = "other"
      case externType : result = "extern"
      case packageType : result = "package"
      case weakReferenceType (*) : result = "weak reference"
    end
  }

  #-----------------------------------------------------------------------------------------------

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

