//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
//------------------------------------------------------------------------------------------------
//! AST
//------------------------------------------------------------------------------------------------

class @lexicalDropInstructionAST : @lexicalInstructionAST {
  private let @lstring mTerminalName
}

//------------------------------------------------------------------------------------------------
//! SYNTAX
//------------------------------------------------------------------------------------------------

syntax extension galgas3LexiqueComponentSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $drop$
    $\$terminal\$$ ?let terminalName
    ioInstructionList += !@lexicalDropInstructionAST {!terminalName}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------

syntax extension galgas4LexiqueComponentSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $drop$
    $\$terminal\$$ ?let terminalName
    ioInstructionList += !@lexicalDropInstructionAST {!terminalName}
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//------------------------------------------------------------------------------------------------
//! CHECK LEXICAL INSTRUCTION
//------------------------------------------------------------------------------------------------

override method @lexicalDropInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext  ioLexiqueAnalysisContext
  ?!@lexicalTagMap unused ioTagMap {
  [ioLexiqueAnalysisContext.mTerminalMap searchKey !self.mTerminalName ?*]
}

//------------------------------------------------------------------------------------------------
//! COCOA GENERATION
//------------------------------------------------------------------------------------------------

override getter @lexicalDropInstructionAST generateObjcCocoaInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "mTokenCode = " + inScannerClassName + "_1_" + [self.mTerminalName.string identifierRepresentation] + " ;\n"
}

//------------------------------------------------------------------------------------------------

override getter @lexicalDropInstructionAST generateSwiftCocoaInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "tokenCode = " + inScannerClassName + "_1_" + [self.mTerminalName.string identifierRepresentation] + "\n"
}

//------------------------------------------------------------------------------------------------
//! C++ CODE GENERATION
//------------------------------------------------------------------------------------------------

override getter @lexicalDropInstructionAST lexicalInstructionUsesLoopLocalVariable -> @bool {
  result = false
}

//·································································································

override getter @lexicalDropInstructionAST generateLexicalInstructionCode
  ?let @string unused inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string
{
  result = "enterDroppedTerminal (kToken_" + [self.mTerminalName identifierRepresentation] + ") ;\n"
}

//------------------------------------------------------------------------------------------------

