#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   AST                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionGetterAST : @semanticDeclarationAST {
  @lstring mTypeName
  @lstring mExtensionGetterName
  @formalInputParameterListAST mExtensionGetterFormalInputParameterList
  @lstring mExtensionGetterReturnedTypeName
  @lstring mExtensionGetterReturnedVariableName
  @semanticInstructionListAST mExtensionGetterInstructionList
  @location mEndOfReaderLocation
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SYNTAX                                  
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·····················································································································

  rule <declaration> ?!@galgas3DeclarationAST ioDeclarations {
    $getter$
    $@type$ ?var  @lstring className indexing typeReferenceExtensionGetter
    $identifier$ ?var  @lstring mMethodName indexing extensionGetterDefinition
    @formalInputParameterListAST mFormalInputParameterList
    <formal_input_parameter_list> ? mFormalInputParameterList
    $->$
    $@type$ ?var  @lstring mReturnedTypeName
    @lstring resultVariableName
    select
      $identifier$ ?resultVariableName
    or
      resultVariableName = .new {!"result" !.here}
    end
    ${$
    <semantic_instruction_list> ?let @semanticInstructionListAST routineInstructionList
    let @location endOfInstructionList = @location.here
    $}$
    ioDeclarations.mDeclarationList += !@extensionGetterAST.new {
      !false # Is not predefined
      !className
      !mMethodName
      !mFormalInputParameterList
      !mReturnedTypeName
      !resultVariableName
      !routineInstructionList
      !endOfInstructionList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   KEY REPRESENTATION                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @extensionGetterAST keyRepresentation -> @string outString {
  outString = "extension getter @" + self.mTypeName + " " + self.mExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   ENTER IN GRAPH                          
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionGetterAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList
{
  let key = @lstring.new {!"extension getter @" + self.mTypeName + " " + self.mExtensionGetterName ![self.mExtensionGetterName location]}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + self.mTypeName ![self.mTypeName location]}]
#---
  if not [ioExtensionGetterMapForBuildingContext hasKey ![self.mTypeName string]] then
    [!?ioExtensionGetterMapForBuildingContext insertKey
      !self.mTypeName
      !{}
    ]
  end
  with self.mTypeName in !?ioExtensionGetterMapForBuildingContext error message searchKey  do
    [!?mExtensionGetterMapForType insertKey
      !self.mExtensionGetterName
      !self.mExtensionGetterReturnedTypeName
      !self.mExtensionGetterFormalInputParameterList
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC CONTEXT                        
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionGetterAST enterInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
{
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   SEMANTIC ANALYSIS                       
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionGetterAST semanticAnalysis
  ?!@lstringlist unused ioUsefulnessRootEntities 
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @string unused inProductDirectory
  ?let @semanticContext inSemanticContext
  ?let @predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
{
#--- Useful entities graph
  let nameForUsefulness = getterNameForUsefulEntitiesGraph (!self.mTypeName !self.mExtensionGetterName)
  [!?ioUsefulEntitiesGraph addNode !nameForUsefulness !nameForUsefulness]
  let typeNameForUsefulness = typeNameForUsefulEntitiesGraph (!self.mTypeName)
  [!?ioUsefulEntitiesGraph addEdge !typeNameForUsefulness !nameForUsefulness]
#--- Self type
  let @unifiedTypeMap-entry selfType = @unifiedTypeMap-entry.searchKey {!inSemanticContext.mTypeMap !self.mTypeName}
  @string selfObjectName
  @string selfObjectAccessor
  @bool implementedAsFunction
#--- Check self type is a class
  if [[selfType mTypeKindEnum] isClassType] then
    selfObjectName = "object"
    selfObjectAccessor = "object->"
    implementedAsFunction = false
  else
    selfObjectName = "inObject"
    selfObjectAccessor = "inObject."
    implementedAsFunction = true
  end
#--- Analyze instruction list
  let analysisContext = @analysisContext.new {
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !selfObjectName
    !@unifiedTypeMap-entry.null
    !selfObjectAccessor
  }
  @unifiedTypeMap-entry returnType
  @string returnVariableCppName
  @formalInputParameterListForGeneration formalParameterListForGeneration
  @semanticInstructionListForGeneration semanticInstructionListForGeneration
  analyzeFunctionBody (
    !nameForUsefulness
    !?ioUsefulEntitiesGraph
    !analysisContext
    !self.mExtensionGetterFormalInputParameterList
    !if [[selfType mTypeKindEnum] isClassType] | ([selfType mTypeKindEnum] == .structType) | ([selfType mTypeKindEnum] == .sharedMapEntryType)
       then [selfType mAllTypedPropertyList]
       else @typedPropertyList.emptyList
     end
    !selfObjectAccessor
    !self.mExtensionGetterInstructionList
    !self.mExtensionGetterReturnedVariableName
    !self.mExtensionGetterReturnedTypeName
    !self.mEndOfReaderLocation
    ?formalParameterListForGeneration
    ?returnType
    ?returnVariableCppName
    ?semanticInstructionListForGeneration
  )
#---
  ioSemanticDeclarationListForGeneration +=
    !"extension getter " + self.mExtensionGetterName
    !@extensionGetterForGeneration.new {
      !true # Generate Cpp header file
      !"getter-" + [[selfType key] fileNameRepresentation] + "-" + [self.mExtensionGetterName fileNameRepresentation]
      !selfType
      ![self.mExtensionGetterName string]
      !implementedAsFunction
      !returnType
      !returnVariableCppName
      !formalParameterListForGeneration
      ![selfType mAllTypedPropertyList]
      !semanticInstructionListForGeneration
    }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   EXTENSION LIST MAP                      
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @extensionGetterAST buildExtensionListMaps
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioExtensionSettierListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionSetterListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionMethodListMapAST
  ?!@genericExtensionMethodListMap unused ioExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionMethodListMap
  ?!@genericExtensionMethodListMap unused ioAbstractExtensionGetterListMap
  ?!@genericExtensionMethodListMap ioExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingExtensionGetterListMap
  ?!@genericExtensionMethodListMap unused ioOverridingAbstractExtensionGetterListMap {
  ioExtensionGetterListMap +=
    ![self.mTypeName string]
    !self.mExtensionGetterName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   CODE GENERATION                         
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @extensionGetterForGeneration : @semanticDeclarationWithHeaderForGeneration {
  @unifiedTypeMap-entry mReceiverType
  @string mExtensionGetterName
  @bool mImplementedAsFunction
  @unifiedTypeMap-entry mResultType
  @string mResultVarCppName
  @formalInputParameterListForGeneration mExtensionGetterFormalParameterList
  @typedPropertyList mTypedAttributeList
  @semanticInstructionListForGeneration mSemanticInstructionListForGeneration
}

#·······················································································································

override getter @extensionGetterForGeneration headerKind ->@headerKind {
  result = @headerKind.oneHeader
}

#·······················································································································

override method @extensionGetterForGeneration appendDeclaration1
  ?!@stringset unused ioInclusionSet
  !@string outHeader {
  if self.mImplementedAsFunction then
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionGetterAsFunctionDeclaration
      ![self.mReceiverType key]
      !self.mExtensionGetterName
      !self.mExtensionGetterFormalParameterList
      ![self.mResultType identifierRepresentation]
    ] 
  else
    outHeader = [filewrapper semanticComponentGenerationTemplate.extensionGetterDeclaration
      ![self.mReceiverType key]
      !self.mExtensionGetterName
      !self.mExtensionGetterFormalParameterList
      !self.mResultType
    ]
  end 
}

#·······················································································································

override method @extensionGetterForGeneration appendSpecificImplementation
  ?let @unifiedTypeMap unused inTypeMap
  ?!@stringset ioInclusionSet
  !@string outImplementation
{
  for (mFormalSelector mFormalArgumentType mFormalArgumentCppName mFormalArgumentName mIsConstant) in self.mExtensionGetterFormalParameterList do
    [mFormalArgumentType addHeaderFileName !?ioInclusionSet]
  end
  [self.mResultType addHeaderFileName !?ioInclusionSet] 
  if self.mImplementedAsFunction then
    var extensionReaderFormalParameterList = self.mExtensionGetterFormalParameterList
    [!?extensionReaderFormalParameterList insertAtIndex
      !["" nowhere]
      !self.mReceiverType
      !"inObject"
      !@lstring.new {!"self" !@location.here}
      !true  
      !0    
    ]
    ioInclusionSet += !"getter-" + [[self.mReceiverType key] fileNameRepresentation] + "-" + [self.mExtensionGetterName fileNameRepresentation]
    generateFunction (
      !"extensionGetter_" + [self.mExtensionGetterName identifierRepresentation]
      !?ioInclusionSet
      !extensionReaderFormalParameterList
      !self.mSemanticInstructionListForGeneration
      !"C_Compiler"
      !self.mResultType
      !self.mResultVarCppName
      !false # is not static
      ?let @string code
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionGetterAsFunctionImplementation
      ![self.mReceiverType key]
      !self.mExtensionGetterName
      !code
    ] 
  else
    [self.mReceiverType addHeaderFileName !?ioInclusionSet]
    @unifiedTypeMap-entry baseType = self.mReceiverType
    @bool searching = true
    loop( @uint. max) while searching do
      if not [[baseType mSuperType] isNull] then
        if [[[baseType mSuperType] mGetterMap] hasKey !self.mExtensionGetterName] then
          baseType = [baseType mSuperType]
        else
          searching = false
        end
      else
        searching = false
      end  
    end
    ioInclusionSet += !"getter-" + [[baseType key] fileNameRepresentation] + "-" + [self.mExtensionGetterName fileNameRepresentation]
    generateExtensionGetter (
      !self.mReceiverType
      !""
      !?ioInclusionSet
      !self.mExtensionGetterName
      !self.mExtensionGetterFormalParameterList
      !self.mSemanticInstructionListForGeneration
      !"C_Compiler"
      ![self.mResultType key]
      !self.mResultVarCppName
      ?let @string extensionGetterCode
    )
    outImplementation = [filewrapper semanticComponentGenerationTemplate.extensionGetterImplementation
      ![self.mReceiverType key]
      !self.mExtensionGetterName
      !self.mExtensionGetterFormalParameterList
      !self.mResultType
      !extensionGetterCode
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

