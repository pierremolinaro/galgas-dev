#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.                                                                      *
#                                                                                                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                                                               *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

syntax galgas3SyntaxComponentSyntax (galgas3Scanner) {

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#          Rules prototypes                                                                                            *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <expression> !@semanticExpressionAST outExpression

rule <semantic_instruction>
  !@semanticInstructionAST outInstruction

rule <formal_parameter_list> !@formalParameterListAST outFormalParameterList

rule <actual_parameter_list>
  !@actualParameterListAST outActualParameterList

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#      S Y N T A X    C O M P O N E N T                                                                                *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <declaration>
 ?!@galgas3DeclarationAST ioDeclarations {
  $syntax$
  $identifier$ ?let @lstring syntaxComponentName
#--- Imported lexique
  @lstring importedLexiqueReference
  select
    importedLexiqueReference = ["" nowhere]
  or
    $($
    $identifier$ ?importedLexiqueReference
    $)$
  end
#--- Feature 'translate'
  @bool hasTranslateFeature
  select
    hasTranslateFeature = false
  or
    $attribute$ ?let @lstring featureName
    if featureName.string != "translate" then
      error featureName: "only 'feature translate' can be declared here"
    end
    hasTranslateFeature = true
  end
  ${$
#--- Loop on declarations
  var nonterminalDeclarationList =@nonterminalDeclarationListAST.emptyList{}
  var ruleList =@syntaxRuleListAST.emptyList{}
  var mSemanticDeclarations =@semanticDeclarationListAST.emptyList{}
  repeat
  while
    <nonterminal_declaration> !? nonterminalDeclarationList
  while
    <syntax_rule_declaration> !? ruleList
  end
#--- end
  $}$
  ioDeclarations.mSyntaxComponentList +=
    !syntaxComponentName
    !importedLexiqueReference
    !@lstringlist.emptyList  # inutile GALGAS 3
    !nonterminalDeclarationList
    !ruleList
    !@semanticDeclarationListAST.emptyList # inutile GALGAS 3
    !hasTranslateFeature
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#      S Y N T A X    E X T E N S I O N                                                                                *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <declaration>
 ?!@galgas3DeclarationAST ioDeclarations {
  $syntax$
  $extension$
  $identifier$ ?let @lstring syntaxComponentName
  ${$
#--- Loop on declarations
  var nonterminalDeclarationList =@nonterminalDeclarationListAST.emptyList{}
  var ruleList =@syntaxRuleListAST.emptyList{}
  var mSemanticDeclarations =@semanticDeclarationListAST.emptyList{}
  repeat
  while
    <nonterminal_declaration> !? nonterminalDeclarationList
  while
    <syntax_rule_declaration> !? ruleList
  end
#--- end
  $}$
  ioDeclarations.mSyntaxExtensions +=
    !syntaxComponentName.string
    !syntaxComponentName
    !nonterminalDeclarationList
    !ruleList
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#      N O N T E R M I N A L    D E C L A R A T I O N                                                                  *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <nonterminal_label_declaration> ?let @lstring inLabelName ?!@nonTerminalLabelListAST ioNonTerminalLabelList {
  <formal_parameter_list> ?let @formalParameterListAST mFormalParameters
  ioNonTerminalLabelList +=
    !inLabelName
    !mFormalParameters
    !@location.here
}

#----------------------------------------------------------------------------------------------------------------------*

rule <nonterminal_declaration> ?!@nonterminalDeclarationListAST ioNonterminalDeclarationList {
  $rule$
  $non_terminal_symbol$ ?let @lstring mNonterminalName indexing ruleDefinition
  var mLabels =@nonTerminalLabelListAST.emptyList{}
  <nonterminal_label_declaration> !@lstring.new {!"" !@location.here} !?mLabels
  repeat
  while
    $label$
    $identifier$ ?let @lstring labelName
    <nonterminal_label_declaration> !labelName !?mLabels
  end
  ioNonterminalDeclarationList +=
    !mNonterminalName
    !mLabels
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#      S Y N T A X    R U L E    D E C L A R A T I O N                                                                 *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <syntax_rule_label>
  ?let @lstring inLabelName
  ?!@syntaxRuleLabelListAST ioLabelList {
  @formalParameterListAST mFormalParameters
  <formal_parameter_list> ? mFormalParameters
  let endOfArguments = @location.here
  ${$
  <syntax_instruction_list> ?let @syntaxInstructionList mSyntaxInstructionList
  ioLabelList +=
    !inLabelName
    !mFormalParameters
    !endOfArguments
    !mSyntaxInstructionList
    !@location.here
  $}$
}

#----------------------------------------------------------------------------------------------------------------------*

rule <syntax_rule_declaration> ?!@syntaxRuleListAST ioRuleList {
  $rule$
  $non_terminal_symbol$ ?var  @lstring mNonterminalName indexing ruleDefinition
  var labelName =@lstring.new{!"" !@location.here}
  var mLabelList =@syntaxRuleLabelListAST.emptyList{}
  repeat
    <syntax_rule_label> !labelName !?mLabelList
  while
    $label$
    $identifier$ ?labelName
  end
  ioRuleList +=
    !mNonterminalName
    !mLabelList
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   S Y N T A X    I N S T R U C T I O N    L I S T                                                                    *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

rule <syntax_instruction_list> !@syntaxInstructionList outSyntaxInstructionList {
  outSyntaxInstructionList = @syntaxInstructionList.emptyList
  repeat
  while 
    $;$
  while
    <semantic_instruction> ?let @semanticInstructionAST instruction
    outSyntaxInstructionList += !instruction
  while
    <syntax_instruction> ?let instruction
    outSyntaxInstructionList += !instruction
  end
}

#----------------------------------------------------------------------------------------------------------------------*
#                                                                                                                      *
#   T E R M I N A L    C H E C K    I N S T R U C T I O N                                                              *
#                                                                                                                      *
#----------------------------------------------------------------------------------------------------------------------*

#! Terminal instruction

#----------------------------------------------------------------------------------------------------------------------*

rule <actual_input_parameter_list>
  !@actualInputParameterListAST outActualInputParameterList

#----------------------------------------------------------------------------------------------------------------------*

rule <syntax_directed_translation_result>
  !@abstractGrammarInstructionSyntaxDirectedTranslationResult outResult

#----------------------------------------------------------------------------------------------------------------------*

}