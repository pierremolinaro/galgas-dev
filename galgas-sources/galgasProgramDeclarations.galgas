#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  'program' component parser, as model builder
#
#  Copyright (C) 2007, ..., 2022 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas3ProgramDeclarations (galgasScanner3) {

  #·······························································································

  rule <semantic_instruction_list_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                                        !@semanticInstructionListAST outInstructionsList

  #·······························································································
  #   P R O L O G U E
  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $before$
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST prologueInstructionList
    let endOfPrologue = @location.here
    $}$
    ioDeclarations.mPrologueDeclarationList +=
      !prologueInstructionList
      !endOfPrologue
  }

  #·······························································································
  #   E P I L O G U E
  #·······························································································

  rule <declaration_ggs3> ?!@galgasDeclarationAST ioDeclarations {
    $after$
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST prologueInstructionList
    let endOfPrologue = @location.here
    $}$
    ioDeclarations.mEpilogueDeclarationList +=
      !prologueInstructionList
      !endOfPrologue
  }

  #·······························································································
  #   S O U R C E    R U L E
  #·······························································································

  rule <declaration_ggs3>
   ?!@galgasDeclarationAST ioDeclarations {
    $case$
    $.$
    $"string"$ ?let @lstring mSourceFileExtension
    $message$
    $"string"$ ?let @lstring mSourceFileHelp
  #--- Reference grammar
    let @lstring referenceGrammar
    select
      referenceGrammar = ["" nowhere]
    or
      $grammar$
      $identifier$ ?referenceGrammar
    end
  #--- Source file
    $?selector:$ ?let selector
    if selector.string != "sourceFilePath" then
      error selector : "the selector should be '?sourceFilePath:'" fixit { replace "?sourceFilePath:" }
    end
    select
    or
      $@type$ ?let typeName
      if typeName.string != "lstring" then
        error typeName : "the only type allowed here is '@lstring'"
      end
    end
    let @bool isUnused
    select
      isUnused = false
    or
      $unused$
      isUnused = true
    end
    $identifier$ ?let @lstring mSourceFileVariableName
  #---
    ${$
    <semantic_instruction_list_ggs3> !?ioDeclarations ?let @semanticInstructionListAST mInstructionList
    let endOfInstructionList = @location.here
    $}$
    ioDeclarations.mSourceRuleList +=
      !mSourceFileExtension
      !mSourceFileHelp
      !mSourceFileVariableName
      !isUnused
      !referenceGrammar
      !mInstructionList
      !endOfInstructionList
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax galgas4ProgramDeclarations (galgasScanner4) {

  #·······························································································

  rule <semantic_instruction_list> ?!@galgasDeclarationAST unused ioDeclarations
                                   !@semanticInstructionListAST outInstructionsList

  #·······························································································
  #   P R O L O G U E
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $before$
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST prologueInstructionList
    let endOfPrologue = @location.here
    $}$
    ioDeclarations.mPrologueDeclarationList +=
      !prologueInstructionList
      !endOfPrologue
  }

  #·······························································································
  #   E P I L O G U E
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $after$
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST prologueInstructionList
    let endOfPrologue = @location.here
    $}$
    ioDeclarations.mEpilogueDeclarationList +=
      !prologueInstructionList
      !endOfPrologue
  }

  #·······························································································
  #   S O U R C E    R U L E
  #·······························································································

  rule <declaration> ?!@galgasDeclarationAST ioDeclarations {
    $case$
    $.$
    $"string"$ ?let @lstring mSourceFileExtension
    $%errorMessage$
    $"string"$ ?let @lstring mSourceFileHelp
  #--- Reference grammar
    let @lstring referenceGrammar
    select
      referenceGrammar = ["" nowhere]
    or
      $grammar$
      $identifier$ ?referenceGrammar
    end
  #--- Source file
    $?selector:$ ?let selector
    if selector.string != "sourceFilePath" then
      error selector : "the selector should be '?sourceFilePath:'" fixit { replace "?sourceFilePath:" }
    end
    select
    or
      $@type$ ?let typeName
      if typeName.string != "lstring" then
        error typeName : "the only type allowed here is '@lstring'"
      end
    end
    let @bool isUnused
    select
      isUnused = false
    or
      $unused$
      isUnused = true
    end
    $identifier$ ?let @lstring mSourceFileVariableName
  #---
    ${$
    <semantic_instruction_list> !?ioDeclarations ?let @semanticInstructionListAST mInstructionList
    let endOfInstructionList = @location.here
    $}$
    ioDeclarations.mSourceRuleList +=
      !mSourceFileExtension
      !mSourceFileHelp
      !mSourceFileVariableName
      !isUnused
      !referenceGrammar
      !mInstructionList
      !endOfInstructionList
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
