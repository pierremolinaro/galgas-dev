#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Semantic decorated types for template generation     
#                                           
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @templateInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc templateCodeGenerationForListInstruction
  ?let @templateInstructionListForGeneration inInstructionList
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
 {
  for (mInstruction) in inInstructionList do
    [mInstruction templateCodeGeneration
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionStringForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused  ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker {
  ioGeneratedCode += "result += " + [self.mTemplateString utf8RepresentationEscapingQuestionMark] + " ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionExpressionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker {
#--- Expression
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let cppName]
  ioGeneratedCode += "result += " + cppName + ".stringValue () ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateBlockInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
#--- Expression
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let indendationVarCppName]
  ioGeneratedCode += "if (" + indendationVarCppName + ".isValid ()) {\n"
  ioGeneratedCode += "  result.incIndentation (int32_t (" + indendationVarCppName + ".uintValue ())) ;\n"
  ioGeneratedCode += "}\n"
  templateCodeGenerationForListInstruction (
    !self.mBlockInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
  ioGeneratedCode += "if (" + indendationVarCppName + ".isValid ()) {\n"
  ioGeneratedCode += "  result.incIndentation (- int32_t (" + indendationVarCppName + ".uintValue ())) ;\n"
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionGetColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
  ioUseColumnMarker = true
  ioGeneratedCode += "columnMarker = result.currentColumn () ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionGotoColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
  ioUseColumnMarker = true
  ioGeneratedCode += "result.appendSpacesUntilColumn (columnMarker) ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionIfForGeneration templateCodeGeneration
                                                        ?!@string ioGeneratedCode
                                                        ?!@stringset ioInclusionSet
                                                        ?!@uint ioTemporaryVariableIndex
                                                        ?!@stringset ioUnusedVariableCppNameSet
                                                        ?!@bool ioUseColumnMarker {
  for (expression instructionList) in self.mTemplateInstructionIfBranchList do
  #--- IF expression
    [expression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let ifVarCppName
    ]
    let @string testVar = "test_" + [ioTemporaryVariableIndex string]
    ioTemporaryVariableIndex += 1
    ioGeneratedCode += "const enumGalgasBool " + testVar + " = " + ifVarCppName + ".boolEnum () ;\n"
    ioGeneratedCode += "if (kBoolTrue == " + testVar + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !instructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}else if (kBoolFalse == " + testVar + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
  end
#--- else instructions
  templateCodeGenerationForListInstruction (
    !self.mElseInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
  for (* *) in self.mTemplateInstructionIfBranchList do
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

