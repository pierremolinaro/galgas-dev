#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Semantic decorated types for template generation
#
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @templateInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker

#—————————————————————————————————————————————————————————————————————————————————————————————————

proc templateCodeGenerationForListInstruction ?let @templateInstructionListForGeneration inInstructionList
                                              ?!@string ioGeneratedCode
                                              ?!@stringset ioInclusionSet
                                              ?!@uint ioTemporaryVariableIndex
                                              ?!@stringset ioUnusedVariableCppNameSet
                                              ?!@bool ioUseColumnMarker {
  for (mInstruction) in inInstructionList do
    [mInstruction templateCodeGeneration
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionStringForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused  ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker {
  ioGeneratedCode += "result.appendString (" + [self.mTemplateString utf8RepresentationEscapingQuestionMark] + ") ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionExpressionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker {
#--- Expression
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let cppName]
  ioGeneratedCode += "result.appendString (" + cppName + ".stringValue ()) ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateBlockInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
#--- Expression
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let indendationVarCppName]
  ioGeneratedCode += "if (" + indendationVarCppName + ".isValid ()) {\n"
  ioGeneratedCode += "  result.incIndentation (int32_t (" + indendationVarCppName + ".uintValue ())) ;\n"
  ioGeneratedCode += "}\n"
  templateCodeGenerationForListInstruction (
    !self.mBlockInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
  ioGeneratedCode += "if (" + indendationVarCppName + ".isValid ()) {\n"
  ioGeneratedCode += "  result.incIndentation (- int32_t (" + indendationVarCppName + ".uintValue ())) ;\n"
  ioGeneratedCode += "}\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionGetColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
  ioUseColumnMarker = true
  ioGeneratedCode += "columnMarker = result.currentColumn () ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionGotoColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
  ioUseColumnMarker = true
  ioGeneratedCode += "result.appendSpacesUntilColumn (columnMarker) ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionIfForGeneration templateCodeGeneration
                                                        ?!@string ioGeneratedCode
                                                        ?!@stringset ioInclusionSet
                                                        ?!@uint ioTemporaryVariableIndex
                                                        ?!@stringset ioUnusedVariableCppNameSet
                                                        ?!@bool ioUseColumnMarker {
  for (expression instructionList) in self.mTemplateInstructionIfBranchList do
  #--- IF expression
    [expression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?let ifVarCppName
    ]
    let testVar = "test_" + [ioTemporaryVariableIndex string]
    ioTemporaryVariableIndex += 1
    ioGeneratedCode += "const enumGalgasBool " + testVar + " = " + ifVarCppName + ".boolEnum () ;\n"
    ioGeneratedCode += "switch (" + testVar + ") {\n"
    ioGeneratedCode += "case kBoolTrue : {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !instructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    ioGeneratedCode += "} break ;\n"
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "case kBoolFalse : {\n"
    [!?ioGeneratedCode incIndentation !2]
  end
#--- else instructions
  templateCodeGenerationForListInstruction (
    !self.mElseInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
  for (* *) in self.mTemplateInstructionIfBranchList do
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "  } break ;\n"
    ioGeneratedCode += "default :\n"
    ioGeneratedCode += "  break ;\n"
    ioGeneratedCode += "}\n"
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

