#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Semantic decorated types for template generation                                                                    *
#                                           
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                                                                      *
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @templateInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc templateCodeGenerationForListInstruction
  ?let @templateInstructionListForGeneration inInstructionList
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
 {
  for (mInstruction) in inInstructionList do
    [mInstruction templateCodeGeneration
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionStringForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused  ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker {
  ioGeneratedCode += "result << " + [self.mTemplateString utf8Representation] + " ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionExpressionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker {
#--- Expression
  var @string cppName
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?cppName]
  ioGeneratedCode += "result << " + cppName + ".stringValue () ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateBlockInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
#--- Expression
  var @string indendationVarCppName
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?indendationVarCppName]
  ioGeneratedCode += "if (" + indendationVarCppName + ".isValid ()) {\n"
  ioGeneratedCode += "  result.incIndentation ((int32_t) " + indendationVarCppName + ".uintValue ()) ;\n"
  ioGeneratedCode += "}\n"
  templateCodeGenerationForListInstruction (
    !self.mBlockInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
  ioGeneratedCode += "if (" + indendationVarCppName + ".isValid ()) {\n"
  ioGeneratedCode += "  result.incIndentation (- ((int32_t) " + indendationVarCppName + ".uintValue ())) ;\n"
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionGetColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
  ioUseColumnMarker = true
  ioGeneratedCode += "columnMarker = result.currentColumn () ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionGotoColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
  ioUseColumnMarker = true
  ioGeneratedCode += "result.appendSpacesUntilColumn (columnMarker) ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionForeachForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
#---
  var @string foreachVarCppName
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?foreachVarCppName]
#--- Index
  if [self.mIndexCppName length] > 0 then
    ioGeneratedCode += "GALGAS_uint " + self.mIndexCppName + " (0) ;\n"
  end
#---
  ioGeneratedCode += "if (" + foreachVarCppName + ".isValid ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
  ioGeneratedCode += "cEnumerator_" + [[self.mExpression mResultType] identifierRepresentation] + " " + self.mEnumeratorCppName + " (" + foreachVarCppName + ", "
                  + if self.mIsAscending then "kENUMERATION_UP" else "kENUMERATION_DOWN" end + ") ;\n"
#--- Before
  if ([self.mBeforeInstructionList length] + [self.mAfterInstructionList length]) > 0 then
    ioGeneratedCode += "const bool nonEmpty_" + self.mEnumeratorCppName + " = " + self.mEnumeratorCppName + ".hasCurrentObject () ;\n"
  end
  if [self.mBeforeInstructionList length] > 0 then
    ioGeneratedCode += "if (nonEmpty_" + self.mEnumeratorCppName + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !self.mBeforeInstructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
  ioGeneratedCode += "while (" + self.mEnumeratorCppName + ".hasCurrentObject ()) {\n"
  [!?ioGeneratedCode incIndentation !2]
#--- Do
  templateCodeGenerationForListInstruction (
    !self.mDoInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
#--- Between
  if [self.mBetweenInstructionList length] > 0 then
    ioGeneratedCode += "if (" + self.mEnumeratorCppName + ".hasNextObject ()) {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !self.mBetweenInstructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
#--- Index
  if [self.mIndexCppName length] > 0 then
    ioGeneratedCode += self.mIndexCppName + ".increment () ;\n"
  end
#---
  ioGeneratedCode += self.mEnumeratorCppName + ".gotoNextObject () ;\n"
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
#--- After
  if [self.mAfterInstructionList length] > 0 then
    ioGeneratedCode += "if (nonEmpty_" + self.mEnumeratorCppName + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !self.mAfterInstructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
#---   
  [!?ioGeneratedCode decIndentation !2]
  ioGeneratedCode += "}\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @templateInstructionIfForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker {
  for (mExpression mInstructionList) in self.mTemplateInstructionIfBranchList do
  #--- IF expression
    var @string ifVarCppName
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?ifVarCppName]
    let @string testVar = "test_" + [ioTemporaryVariableIndex string] ioTemporaryVariableIndex ++
    ioGeneratedCode += "const enumGalgasBool " + testVar + " = " + ifVarCppName + ".boolEnum () ;\n"
    ioGeneratedCode += "if (kBoolTrue == " + testVar + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
    templateCodeGenerationForListInstruction (
      !mInstructionList
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    )
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}else if (kBoolFalse == " + testVar + ") {\n"
    [!?ioGeneratedCode incIndentation !2]
  end
#--- else instructions
  templateCodeGenerationForListInstruction (
    !self.mElseInstructionList
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  )
  for (mExpression mInstructionList) in self.mTemplateInstructionIfBranchList do
    [!?ioGeneratedCode decIndentation !2]
    ioGeneratedCode += "}\n"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

