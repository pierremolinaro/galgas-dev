//————————————————————————————————————————————————————————————————————————————————————————————————
#
#  'lexique' component metamodel
#
#  Copyright (C) 2007, ..., 2015 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software
# and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish,
# distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or
# substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
# BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
# DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
//————————————————————————————————————————————————————————————————————————————————————————————————
#   L E X I C A L    E X P R E S S I O N    C O D E    G E N E R A T I O N (OBJC)
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalExpressionAST generateObjcCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalOrExpressionAST generateObjcCocoaConditionCode
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string result {
  result = [self.mLeftOperand generateObjcCocoaConditionCode !inLexiqueAnalysisContext]
  result += " || "
  result += [self.mRightOperand generateObjcCocoaConditionCode !inLexiqueAnalysisContext]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterIntervalMatchAST generateObjcCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = ""
  outGeneratedCode = "[self testForInputFromChar:"
  outGeneratedCode += [[self.mLowerBound.char uint] string]
  outGeneratedCode += " toChar:"
  outGeneratedCode += [[self.mUpperBound.char uint] string]
  outGeneratedCode += "]"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringMatchAST generateObjcCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "[self testForInputString:@" + [self.mString.string utf8RepresentationEscapingQuestionMark]
  outGeneratedCode += " advance:YES]"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringNotMatchAST generateObjcCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "[self notTestForInputString:@"
  outGeneratedCode += [self.mString.string utf8RepresentationEscapingQuestionMark]
  outGeneratedCode += " error:& scanningOk]"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterMatchAST generateObjcCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "[self testForInputChar:"
  outGeneratedCode += [[self.mCharacter.char uint] string]
  outGeneratedCode += "]"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterSetMatchAST generateObjcCocoaConditionCode
            ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext  -> @string outGeneratedCode {
  outGeneratedCode = "[self testForCharWithFunction: "
  outGeneratedCode += self.mCharacterSetName.string
  outGeneratedCode += "]"
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#   L E X I C A L    E X P R E S S I O N    C O D E    G E N E R A T I O N (SWIFT)
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalExpressionAST generateSwiftCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalOrExpressionAST generateSwiftCocoaConditionCode
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string result {
  result = [self.mLeftOperand generateSwiftCocoaConditionCode !inLexiqueAnalysisContext]
  result += " || "
  result += [self.mRightOperand generateSwiftCocoaConditionCode !inLexiqueAnalysisContext]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterIntervalMatchAST generateSwiftCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = ""
  outGeneratedCode = "self.testForInputFromChar ("
  outGeneratedCode += [[self.mLowerBound.char uint] string]
  outGeneratedCode += ", toChar:"
  outGeneratedCode += [[self.mUpperBound.char uint] string]
  outGeneratedCode += ")"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringMatchAST generateSwiftCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "self.testForInputString (" + [self.mString.string utf8RepresentationEscapingQuestionMark]
  outGeneratedCode += ", advance: true)"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringNotMatchAST generateSwiftCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "self.notTestForInputString ("
  outGeneratedCode += [self.mString.string utf8RepresentationEscapingQuestionMark]
  outGeneratedCode += ", error: &scanningOk)"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterMatchAST generateSwiftCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "self.testForInputChar ("
  outGeneratedCode += [[self.mCharacter.char uint] string]
  outGeneratedCode += ")"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterSetMatchAST generateSwiftCocoaConditionCode
            ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext -> @string outGeneratedCode {
  outGeneratedCode = "self.testForCharWithFunction ("
  outGeneratedCode += self.mCharacterSetName.string
  outGeneratedCode += ")"
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#     R O U T I N E    O R    F U N C T I O N    A R G U M E N T
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalRoutineOrFunctionFormalInputArgumentAST generateObjcCocoaRoutineOrFunctionArgument
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalAttributeInputArgumentAST generateObjcCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "mLexicalAttribute_" + self.mAttributeName
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterInputArgumentAST generateObjcCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = [[self.mCharacter.char uint] string]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalUnsignedInputArgumentAST generateObjcCocoaRoutineOrFunctionArgument -> @string outGeneratedCode {
  outGeneratedCode = [self.mUnsigned.bigint string]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCurrentCharacterInputArgumentAST generateObjcCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "mPreviousChar"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalFunctionInputArgumentAST generateObjcCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "scanner_cocoa_function_" + self.mFunctionName + " ("
  for (mLexicalActualInputArgument) in self.mFunctionActualArgumentList
  do outGeneratedCode += [mLexicalActualInputArgument generateObjcCocoaRoutineOrFunctionArgument]
  between outGeneratedCode += ", "
  end
  outGeneratedCode += ")"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalRoutineOrFunctionFormalInputArgumentAST generateSwiftCocoaRoutineOrFunctionArgument
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalAttributeInputArgumentAST generateSwiftCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "mLexicalAttribute_" + self.mAttributeName
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterInputArgumentAST generateSwiftCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = [[self.mCharacter.char uint] string]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalUnsignedInputArgumentAST generateSwiftCocoaRoutineOrFunctionArgument -> @string outGeneratedCode {
  outGeneratedCode = [self.mUnsigned.bigint string]
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCurrentCharacterInputArgumentAST generateSwiftCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "self.previousChar"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalFunctionInputArgumentAST generateSwiftCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "scanner_cocoa_function_" + self.mFunctionName + " ("
  for (mLexicalActualInputArgument) in self.mFunctionActualArgumentList
  do outGeneratedCode += [mLexicalActualInputArgument generateSwiftCocoaRoutineOrFunctionArgument]
  between outGeneratedCode += ", "
  end
  outGeneratedCode += ")"
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#  L E X I C A L    S E N D  I N S T R U C T I O N    D E F A U L T
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalSendDefaultActionAST generateObjcCocoaDefaultSendCode
  ?let @string inScannerClassName
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalSendTerminalByDefaultAST generateObjcCocoaDefaultSendCode
  ?let @string inScannerClassName
  -> @string outGeneratedCode {
  outGeneratedCode = "mTokenCode = " + inScannerClassName + "_1_" + [self.mDefaultSentTerminal.string identifierRepresentation] + " ;\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalErrorByDefaultAST generateObjcCocoaDefaultSendCode
  ?let @string unused inScannerClassName
  -> @string outGeneratedCode {
  outGeneratedCode = "scanningOk = NO ;\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalSendDefaultActionAST generateSwiftCocoaDefaultSendCode
  ?let @string inScannerClassName
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalSendTerminalByDefaultAST generateSwiftCocoaDefaultSendCode
  ?let @string inScannerClassName
  -> @string outGeneratedCode {
  outGeneratedCode = "tokenCode = " + inScannerClassName + "_1_" + [self.mDefaultSentTerminal.string identifierRepresentation] + " ;\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalErrorByDefaultAST generateSwiftCocoaDefaultSendCode
  ?let @string unused inScannerClassName
  -> @string outGeneratedCode {
  outGeneratedCode = "scanningOk = false\n"
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#  L E X I C A L    I N S T R U C T I O N    C O D E    G E N E R A T I O N
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalInstructionAST generateObjcCocoaInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalInstructionAST generateSwiftCocoaInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————
#        L E X I C A L    R U L E    C O D E    G E N E R A T I O N (OBJC)
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @abstractLexicalRuleAST generateObjcCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalImplicitRuleAST generateObjcCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  [inLexiqueAnalysisContext.mLexicalTokenListMap searchKey !self.mListName ?* ?let tokenSortedList ?*]
  outGeneratedCode = ""
  for > (* mName mTerminalName) in tokenSortedList do
    outGeneratedCode += "if (scanningOk && [self testForInputString:@"
    outGeneratedCode += [mName utf8RepresentationEscapingQuestionMark]
    outGeneratedCode += " advance:YES]) {\n"
    outGeneratedCode += "  mTokenCode = " + inScannerClassName + "_1_" + [mTerminalName identifierRepresentation] + " ;\n"
    outGeneratedCode += "}else "
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalExplicitRuleAST generateObjcCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "if (scanningOk && ("
  outGeneratedCode += [self.mLexicalRuleExpression generateObjcCocoaConditionCode !inLexiqueAnalysisContext]
  outGeneratedCode += ")) {\n"
  [!?outGeneratedCode incIndentation !2]
  for (mInstruction) in self.mInstructionList do
    outGeneratedCode += [mInstruction generateObjcCocoaInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
  end
  [!?outGeneratedCode decIndentation !2]
  outGeneratedCode += "}else "
}

//————————————————————————————————————————————————————————————————————————————————————————————————
#        L E X I C A L    R U L E    C O D E    G E N E R A T I O N (SWIFT)
//————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @abstractLexicalRuleAST generateSwiftCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalImplicitRuleAST generateSwiftCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  [inLexiqueAnalysisContext.mLexicalTokenListMap searchKey !self.mListName ?* ?let tokenSortedList ?*]
  outGeneratedCode = ""
  for > (* mName mTerminalName) in tokenSortedList do
    outGeneratedCode += "if scanningOk && self.testForInputString ("
    outGeneratedCode += [mName utf8RepresentationEscapingQuestionMark]
    outGeneratedCode += ", advance: true) {\n"
    outGeneratedCode += "  tokenCode = " + inScannerClassName + "_1_" + [mTerminalName identifierRepresentation] + "\n"
    outGeneratedCode += "}else "
  end
}

//————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalExplicitRuleAST generateSwiftCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "if scanningOk && ("
  outGeneratedCode += [self.mLexicalRuleExpression generateSwiftCocoaConditionCode !inLexiqueAnalysisContext]
  outGeneratedCode += ") {\n"
  [!?outGeneratedCode incIndentation !2]
  for (mInstruction) in self.mInstructionList do
    outGeneratedCode += [mInstruction generateSwiftCocoaInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
  end
  [!?outGeneratedCode decIndentation !2]
  outGeneratedCode += "}else "
}

//————————————————————————————————————————————————————————————————————————————————————————————————

