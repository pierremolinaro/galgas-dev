#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  'lexique' component metamodel            
#                                           
#  Copyright (C) 2007, ..., 2015 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#   L E X I C A L    E X P R E S S I O N    C O D E    G E N E R A T I O N                                     
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalExpressionAST generateCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalOrExpressionAST generateCocoaConditionCode
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string result {
  result = [self.mLeftOperand generateCocoaConditionCode !inLexiqueAnalysisContext]
  result += " || "
  result += [self.mRightOperand generateCocoaConditionCode !inLexiqueAnalysisContext]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterIntervalMatchAST generateCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = ""
  outGeneratedCode = "[self testForInputFromChar:"
  outGeneratedCode += [[self.mLowerBound.char uint] string]
  outGeneratedCode += " toChar:"
  outGeneratedCode += [[self.mUpperBound.char uint] string]
  outGeneratedCode += "]"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringMatchAST generateCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "[self testForInputString:@" + [self.mString.string utf8Representation]
  outGeneratedCode += " advance:YES]"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalStringNotMatchAST generateCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "[self notTestForInputString:@"
  outGeneratedCode += [self.mString.string utf8Representation]
  outGeneratedCode += " error:& scanningOk]"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterMatchAST generateCocoaConditionCode
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "[self testForInputChar:"
  outGeneratedCode += [[self.mCharacter.char uint] string]
  outGeneratedCode += "]"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterSetMatchAST generateCocoaConditionCode
            ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext  -> @string outGeneratedCode {
  outGeneratedCode = "[self testForCharWithFunction: "
  outGeneratedCode += self.mCharacterSetName.string
  outGeneratedCode += "]"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#     R O U T I N E    O R    F U N C T I O N    A R G U M E N T                                               
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalRoutineOrFunctionFormalInputArgumentAST generateCocoaRoutineOrFunctionArgument
  -> @string 

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalAttributeInputArgumentAST generateCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "mLexicalAttribute_" + self.mAttributeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCharacterInputArgumentAST generateCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = [[self.mCharacter.char uint] string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalUnsignedInputArgumentAST generateCocoaRoutineOrFunctionArgument -> @string outGeneratedCode {
  outGeneratedCode = [self.mUnsigned.bigint string]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalCurrentCharacterInputArgumentAST generateCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "mPreviousChar"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalFunctionInputArgumentAST generateCocoaRoutineOrFunctionArgument
  -> @string outGeneratedCode {
  outGeneratedCode = "scanner_cocoa_function_" + self.mFunctionName + " ("
  for (mLexicalActualInputArgument) in self.mFunctionActualArgumentList
  do outGeneratedCode += [mLexicalActualInputArgument generateCocoaRoutineOrFunctionArgument]
  between outGeneratedCode += ", "
  end
  outGeneratedCode += ")"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  L E X I C A L    S E N D  I N S T R U C T I O N    D E F A U L T                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalSendDefaultActionAST generateCocoaDefaultSendCode
  ?let @string inScannerClassName
  -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalSendTerminalByDefaultAST generateCocoaDefaultSendCode
  ?let @string inScannerClassName
  -> @string outGeneratedCode {
  outGeneratedCode = "mTokenCode = " + inScannerClassName + "_1_" + [self.mDefaultSentTerminal.string identifierRepresentation] + " ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalErrorByDefaultAST generateCocoaDefaultSendCode
  ?let @string unused inScannerClassName
  -> @string outGeneratedCode {
  outGeneratedCode = "scanningOk = NO ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#  L E X I C A L    I N S T R U C T I O N    C O D E    G E N E R A T I O N                                    
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @lexicalInstructionAST generateCocoaInstructionCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#        L E X I C A L    R U L E    C O D E    G E N E R A T I O N                                            
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @abstractLexicalRuleAST generateCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalImplicitRuleAST generateCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  [inLexiqueAnalysisContext.mLexicalTokenListMap searchKey !self.mListName ?* ?let tokenSortedList ?*]
  outGeneratedCode = ""
  for > (* mName mTerminalName) in tokenSortedList do
    outGeneratedCode += "if (scanningOk && [self testForInputString:@"
    outGeneratedCode += [mName utf8Representation]
    outGeneratedCode += " advance:YES]) {\n"
    outGeneratedCode += "  mTokenCode = " + inScannerClassName + "_1_" + [mTerminalName identifierRepresentation] + " ;\n"
    outGeneratedCode += "}else "
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalExplicitRuleAST generateCocoaCode
  ?let @string inScannerClassName
  ?let @lexiqueAnalysisContext inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "if (scanningOk && ("
  outGeneratedCode += [self.mLexicalRuleExpression generateCocoaConditionCode !inLexiqueAnalysisContext]
  outGeneratedCode += ")) {\n"
  [!?outGeneratedCode incIndentation !2]
  for (mInstruction) in self.mInstructionList do
    outGeneratedCode += [mInstruction generateCocoaInstructionCode !inScannerClassName !inLexiqueAnalysisContext]
  end
  [!?outGeneratedCode decIndentation !2]
  outGeneratedCode += "}else "
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

