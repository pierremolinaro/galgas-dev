#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  semantics definitions for semantics component 
#                                           
#  Copyright (C) 2010, ..., 2022 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @location sourceFile -> @string {
  if [self isNowhere] then
    result = "SOURCE_FILE (\"\", 0)"
  else
    result = "SOURCE_FILE (" + [[[self file] lastPathComponent] utf8RepresentationEscapingQuestionMark] + ", " + [self startLine] + ")"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @location commaSourceFile -> @string {
  result = " COMMA_" + [self sourceFile]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once compilerCppName ->@string outCompilerCppName {
  outCompilerCppName = "inCompiler"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once syntaxDirectedTranslationResultVarName ->@string outName {
  outName = "ioSyntaxDirectedTranslationResult"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @semanticInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @semanticExpressionAST enterExpressionInSemanticContext ?!@unifiedTypeMap ioTypeMap

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @semanticInstructionListAST enterInstructionListInSemanticContext 
  ?!@unifiedTypeMap ioTypeMap
{
  for (mInstruction) in self do
    [mInstruction enterInstructionInSemanticContext !?ioTypeMap]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  G R A M M A R   M A P                    
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @grammarLabelMap {
  public let @formalParameterSignature mLabelSignature
  %insertSetter insertKey %errorMessage "the '%K' grammar label has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' grammar label is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @grammarMap {
  public let @grammarLabelMap mLabelMap
  public let @bool mHasIndexing
  public let @bool mHasTranslateFeature
  %insertSetter insertGrammar %errorMessage "the '%K' grammar has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' grammar is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  R O U T I N E   M A P                    
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @routineMap {
  public let @formalParameterSignature mRoutineSignature
  public let @bool mIsInternal
  %insertSetter insertKey %errorMessage "the '%K' routine has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' routine is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  F U N C T I O N   M A P                  
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @functionMap {
  public let @functionSignature mFunctionSignature
  public let @unifiedTypeMapEntry mResultType
  public let @bool mIsInternal
  %insertSetter insertKey %errorMessage "the '%K' function has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' function is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  F I L E W R A P P E R   M A P            
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @wrapperFileMap { # Key is file name
  public let @string mAbsoluteFilePath
  public let @bool mIsTextFile # true: text file, false: binary file
  public let @uint mWrapperDirectoryIndex
  public let @uint mWrapperFileIndex
  %insertSetter insertKey %errorMessage "INTERNAL ERROR"
  %searchMethod searchKey %errorMessage "INTERNAL ERROR"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @wrapperDirectoryMap { # Key is directory name
  public let @wrapperFileMap mRegularFileMap
  public let @wrapperDirectoryMap mDirectoryMap
  public let @uint mWrapperDirectoryIndex
  %insertSetter insertKey %errorMessage "INTERNAL ERROR"
  %searchMethod searchKey %errorMessage "INTERNAL ERROR"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @filewrapperTemplateMap {
  public let @functionSignature mTemplateSignature
  public let @lstring mFilewrapperTemplatePath
  %insertSetter insertKey %errorMessage "the '%K' filewrapper template has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' filewrapper template is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @filewrapperMap {
  public let @lstring mFilewrapperPath
  public let @lstringlist mFilewrapperExtensionList
  public let @wrapperFileMap mFilewrapperFileMap
  public let @wrapperDirectoryMap mFilewrapperDirectoryMap
  public let @filewrapperTemplateMap mFilewrapperTemplateMap
  public let @bool mIsInternal
  %insertSetter insertKey %errorMessage "the '%K' filewrapper has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' filewrapper is not declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  O P T I O N   M A P                      
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @optionComponentMapForSemanticAnalysis {
  public let @bool mIsPredefined
  public let @commandLineOptionMap mBoolOptionMap
  public let @commandLineOptionMap mUIntOptionMap
  public let @commandLineOptionMap mStringOptionMap
  public let @commandLineOptionMap mStringListOptionMap
  %insertSetter insertKey %errorMessage "redefinition of the '%K' option component: it has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' option component is not imported"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  L E X I Q U E   M A P                    
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @lexiqueComponentMapForSemanticAnalysis {
  public let @bool mIsTemplate
  public let @terminalMap mTerminalMap
  public let @indexingListAST mIndexingListAST
#  public let @lstring mIndexingDirectory
  public let @terminalDeclarationListAST mTerminalListAST
  private let @lexicalAttributeListAST mLexicalAttributeListAST
  private let @lexicalStyleListAST mLexicalStyleListAST
  private let @lexicalListDeclarationListAST mLexicalListDeclarationListAST
  %insertSetter insertKey %errorMessage "redefinition of the '%K' lexique component: it has been already declared in %L"
  %searchMethod searchKey %errorMessage "the '%K' lexique component is not imported"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  S Y N T A X   M A P                      
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @syntaxComponentMap {
  public let @lstring mLexiqueName 
  public let @nonterminalDeclarationListAST mNonterminalDeclarationList
  public let @syntaxRuleListAST mRuleList
  public let @bool mHasTranslateFeature
  %insertSetter insertKey %errorMessage "the '%K' syntax component has already been parsed"
  %searchMethod searchKey %errorMessage "the '%K' syntax component is not parsed"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    S E M A N T I C    C O N T E X T       
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

struct @semanticContext {
  public var @routineMap mRoutineMap %selector
  public var @functionMap mFunctionMap %selector
  public var @filewrapperMap mFilewrapperMap %selector
  public var @grammarMap mGrammarMap %selector
  public var @optionComponentMapForSemanticAnalysis mOptionComponentMapForSemanticAnalysis %selector
  public var @lexiqueComponentMapForSemanticAnalysis mLexiqueComponentMapForSemanticAnalysis %selector
  public var @syntaxComponentMap mSyntaxComponentMapForSemanticAnalysis %selector
  public var @bool galgas4 %selector
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    E X T E N S I O N    M E T H O D    M A P
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @extensionMethodMapForType {
  public let @formalParameterListAST mFormalParameterList
  public let @methodQualifier mQualifier
  %insertSetter insertKey %errorMessage "the '%K' method has been already declared in %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @extensionMethodMapForBuildingContext {
  public let @extensionMethodMapForType mExtensionMethodMapForType
  %insertSetter insertKey %errorMessage "internal error"
  %searchMethod searchKey %errorMessage "internal error"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    E X T E N S I O N    M O D I F I E R    M A P 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @extensionSetterMapForType {
  public let @formalParameterListAST mFormalParameterList
  %insertSetter insertKey %errorMessage "the '%K' setter has been already declared in %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @extensionSetterMapForBuildingContext {
  public let @extensionSetterMapForType mExtensionSetterMapForType
  %insertSetter insertKey %errorMessage "internal error"
  %searchMethod searchKey %errorMessage "internal error"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    E X T E N S I O N    G E T T E R    M A P     
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @extensionGetterMapForType {
  public let @lstring mResultTypeName
  public let @formalInputParameterListAST mInputFormalParameterList
  public let @methodQualifier mQualifier
  %insertSetter insertKey %errorMessage "the '%K' getter has been already declared in %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @extensionGetterMapForBuildingContext {
  public let @extensionGetterMapForType mExtensionGetterMapForType
  %insertSetter insertKey %errorMessage "internal error"
  %searchMethod searchKey %errorMessage "internal error"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    D I S P L A Y                          
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract getter @semanticDeclarationAST keyRepresentation -> @string

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @galgas3GrammarComponentAST keyRepresentation
  ->@string {
  result = "grammar " + self.mGrammarComponentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @galgas3SyntaxComponentAST keyRepresentation
  ->@string {
  result = "syntax " + self.mSyntaxComponentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @predefinedTypeAST keyRepresentation
  ->@string {
  result = "predefined type @" + self.mPredefinedTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @enumDeclarationAST keyRepresentation
  ->@string {
  result = "enum @" + self.mEnumTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @sortedListDeclarationAST keyRepresentation
  ->@string {
  result = "sorted list @" + self.mSortedListTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @listDeclarationAST keyRepresentation
  ->@string {
  result = "list @" + self.mListTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @arrayDeclarationAST keyRepresentation
  ->@string {
  result = "array @" + self.mArrayTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @listmapDeclarationAST keyRepresentation
  ->@string {
  result = "listmap @" + self.mListmapTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @filewrapperDeclarationAST keyRepresentation
  ->@string {
  result = "filewrapper @" + self.mFilewrapperName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @optionComponentDeclarationAST keyRepresentation
  ->@string {
  result = "option " + self.mOptionComponentName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @graphDeclarationAST keyRepresentation
  ->@string {
  result = "graph @" + self.mGraphTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @externTypeDeclarationAST keyRepresentation
  ->@string {
  result = "extern @" + self.mExternTypeName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @onceFunctionDeclarationAST keyRepresentation
  ->@string {
  result = "once function " + self.mFunctionName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @externFunctionDeclarationAST keyRepresentation -> @string {
  result = "extern function " + self.mFunctionName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override getter @externRoutineDeclarationAST keyRepresentation -> @string {
  result = "extern routine " + self.mRoutineName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    E N T E R    T Y P E S                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc addExtensions ?let @extensionMethodMapForBuildingContext inExtensionMethodMapForBuildingContext
                   ?let @extensionGetterMapForBuildingContext inExtensionGetterMapForBuildingContext
                   ?let @extensionSetterMapForBuildingContext inExtensionSetterMapForBuildingContext
                   ?!@semanticContext unused ioSemanticContext
                   ?!@unifiedTypeMap ioTypeMap
                   ?let @lstring inTypeName
                   ?isClass: let @bool inIsClass
                   ?!@getterMap ioGetterMap
                   ?!@setterMap ioSetterMap
                   ?!@instanceMethodMap ioInstanceMethodMap
                   ?acceptSetters: let @bool inAcceptSetters {
#------------------------  Extension getters
  if [inExtensionGetterMapForBuildingContext hasKey !inTypeName.string] then
    [inExtensionGetterMapForBuildingContext searchKey !inTypeName ?let extensionGetterMapForType]
    for (lkey mResultTypeName mInputFormalParameterList qualifier) in extensionGetterMapForType do
      var @functionSignature formalArgumentList = {}
      for (mFormalSelector mFormalArgumentTypeName mFormalArgumentName * *) in mInputFormalParameterList do
        [!?ioTypeMap makeEntry !mFormalArgumentTypeName ?let typeIndex]
        formalArgumentList += !mFormalSelector !typeIndex !mFormalArgumentName.string
      end
      [!?ioTypeMap makeEntry !mResultTypeName ?let returnedType]
      if qualifier == .isVirtualOverriding then
        if [ioGetterMap hasKey !lkey] then
          [!?ioGetterMap setMQualifierForKey !.isVirtualOverriding !lkey]
        end
      elsif qualifier == .isVirtualOverridingAbstract then
        if [ioGetterMap hasKey !lkey] then
          [!?ioGetterMap setMQualifierForKey !.isVirtualOverridingAbstract !lkey]
        end
      elsif inIsClass & (qualifier == .isBasic) then
        [!?ioGetterMap insertKey
          !lkey
          !.definedAsExtension
          !formalArgumentList
          !lkey.location
          !true
          !returnedType
          !.isVirtual
          !"" # getter name is not obsolete, no replacement getter
        ]
      else
        [!?ioGetterMap insertKey
          !lkey
          !.definedAsExtension
          !formalArgumentList
          !lkey.location
          !true
          !returnedType
          !qualifier
          !"" # getter name is not obsolete, no replacement getter
        ]
      end
    end
  end
#------------------------  Extension methods
  if [inExtensionMethodMapForBuildingContext hasKey !inTypeName.string] then
    [inExtensionMethodMapForBuildingContext searchKey !inTypeName ?let extensionMethodMapForType]
    for (lkey mFormalParameterList qualifier) in extensionMethodMapForType do
      var formalArgumentList = @formalParameterSignature {}
      for parameter in mFormalParameterList do
        [!?ioTypeMap makeEntry
          !parameter.mFormalArgumentTypeName
          ?let @unifiedTypeMapEntry typeIndex
        ]
        formalArgumentList +=
          !parameter.mFormalSelector
          !typeIndex
          !parameter.mFormalArgumentPassingMode
          !parameter.mFormalArgumentName.string
      end
      if qualifier == .isVirtualOverriding then
        if [ioInstanceMethodMap hasKey !lkey] then
          [!?ioInstanceMethodMap setMQualifierForKey !.isVirtualOverriding !lkey]
        end
      elsif qualifier == .isVirtualOverridingAbstract then
        if [ioInstanceMethodMap hasKey !lkey] then
          [!?ioInstanceMethodMap setMQualifierForKey !.isVirtualOverridingAbstract !lkey]
        end
      elsif inIsClass & (qualifier == .isBasic) then
        [!?ioInstanceMethodMap insertKey
          !lkey
          !.definedAsExtension
          !formalArgumentList
          !lkey.location
          !true
          !.isVirtual
          !"" # No Error message
        ]
      else
        [!?ioInstanceMethodMap insertKey
          !lkey
          !@methodKind.definedAsExtension
          !formalArgumentList
          !lkey.location
          !true
          !qualifier
          !"" # No error message
        ]
      end
    end
  end
#------------------------  Extension setters
  if [inExtensionSetterMapForBuildingContext hasKey !inTypeName.string] then
    [inExtensionSetterMapForBuildingContext searchKey !inTypeName ?let extensionSetterMapForType]
    for (lkey mFormalParameterList) in extensionSetterMapForType do
      var @formalParameterSignature formalArgumentList = {}
      for parameter in mFormalParameterList do
        [!?ioTypeMap makeEntry  !parameter.mFormalArgumentTypeName ?let typeIndex]
        formalArgumentList +=
          !parameter.mFormalSelector
          !typeIndex
          !parameter.mFormalArgumentPassingMode
          !parameter.mFormalArgumentName.string
      end
      [!?ioSetterMap insertKey
        !lkey
        !@methodKind.definedAsExtension
        !formalArgumentList
        !true
        !@methodQualifier.isBasic
        !"" # No Error message
      ]
      if not inAcceptSetters then
        error lkey : "a refclass does not accept any setter; use method instead"
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! enterInSemanticContext
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @semanticDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
  ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext unused ioSemanticContext

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @predefinedTypeKindEnum defaultConstructorName
  -> @string {
  switch self
  case predefined_bool, predefined_char,
       predefined_double, predefined_sint, predefined_sint64,
       predefined_string, predefined_uint, predefined_uint64
    : result = "default"
  case predefined_binaryset : result = "emptyBinarySet"
  case predefined_stringset : result = "emptySet"
  case predefined_type : result = ""
  case predefined_application : result = ""
  case predefined_data : result = "emptyData"
  case predefined_location : result = "nowhere"
  case predefined_function : result = ""
  case predefined_object : result = ""
  case predefined_filewrapper : result = ""
  case predefined_bigint : result = "zero"
  case predefined_timer : result = "start"
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func %once elementTypeNameSuffix -> @string {
  result = "-element"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

map @wrapperExtensionMap {
  %insertSetter insertKey %errorMessage "the '%K' extension has been already declared"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

proc recursivelyEnumerateDirectories
  ?let @string inAbsoluteSourcePath
  ?let @string inPathInWrapper
  ?let @wrapperExtensionMap inTextFileExtensionMap
  ?let @wrapperExtensionMap inBinaryFileExtensionMap
  !@wrapperFileMap outWrapperFileMap
  !@wrapperDirectoryMap outWrapperDirectoryMap
  ?!@uint ioWrapperFileIndex
  ?!@uint ioWrapperDirectoryIndex {
  let @uint currentDirectoryIndex = ioWrapperDirectoryIndex
  ioWrapperDirectoryIndex += 1
#--- Enumerates regular files
  let @stringlist files = [inAbsoluteSourcePath regularFiles !false]
  outWrapperFileMap = {}
  for (mValue) in files do
    if [inTextFileExtensionMap hasKey ![mValue pathExtension]] then
      let @string absoluteFilePath = inAbsoluteSourcePath + "/" + mValue
      [!?outWrapperFileMap insertKey
        !@lstring.new {!mValue !@location.here}
        !absoluteFilePath
        !true # Text File
        !currentDirectoryIndex
        !ioWrapperFileIndex
      ]
      ioWrapperFileIndex += 1
    elsif [inBinaryFileExtensionMap hasKey ![mValue pathExtension]] then
      let @string absoluteFilePath = inAbsoluteSourcePath + "/" + mValue
      [!?outWrapperFileMap insertKey
        !@lstring.new {!mValue !@location.here}
        !absoluteFilePath
        !false # Binary file
        !currentDirectoryIndex
        !ioWrapperFileIndex
      ]
      ioWrapperFileIndex += 1
    end
  end
#--- Enumerates regular directories
  let @stringlist directories = [inAbsoluteSourcePath directories !false]
  outWrapperDirectoryMap = {}
  for (mValue) in directories do
    let @uint theDirectoryIndex = ioWrapperDirectoryIndex
    recursivelyEnumerateDirectories (
      !inAbsoluteSourcePath + "/" + mValue
      !inPathInWrapper + mValue + "/"
      !inTextFileExtensionMap
      !inBinaryFileExtensionMap
      ?let internalWrapperFileMap
      ?let internalWrapperDirectoryMap
      !?ioWrapperFileIndex
      !?ioWrapperDirectoryIndex
    )
    [!?outWrapperDirectoryMap insertKey
      !@lstring.new {!mValue !@location.here}
      !internalWrapperFileMap
      !internalWrapperDirectoryMap
      !theDirectoryIndex
    ]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
#--- Templates
  var @filewrapperTemplateMap filewrapperTemplateMap = {}
  for (mFilewrapperTemplateName mFilewrapperTemplatePath mFilewrapperTemplateFormalInputParameters) in self.mFilewrapperTemplateList do
    var @functionSignature templateSignature = {}
    for (mFormalTemplateSelector mFormalArgumentTypeName mFormalArgumentName *) in mFilewrapperTemplateFormalInputParameters do
      [!?ioTypeMap makeEntry  !mFormalArgumentTypeName ?let parameterTypeIndex]
      templateSignature += !mFormalTemplateSelector !parameterTypeIndex !mFormalArgumentName.string
    end
    [!?filewrapperTemplateMap insertKey
      !mFilewrapperTemplateName
      !templateSignature
      !mFilewrapperTemplatePath
    ]
  end
#--- Build text file extension map
  var @wrapperExtensionMap textExtensionMap = {}
  for (mValue) in self.mFilewrapperTextFileExtensionList do
    [!?textExtensionMap insertKey !mValue]
  end
#--- Build binary file extension map
  var @wrapperExtensionMap binaryFileExtensionMap = {}
  for (mValue) in self.mFilewrapperBinaryFileExtensionList do
    if [textExtensionMap hasKey !mValue.string] then
      error mValue:"the '" + mValue + "' extension is already used for text files"
    else
    [!?binaryFileExtensionMap insertKey !mValue]
    end
  end
#--- Enumerate filewrapper files
  let @wrapperFileMap regularRootFileMap
  let @wrapperDirectoryMap wrapperDirectoryMap
  let @string absoluteSourcePath
  if [self.mFilewrapperPath.string firstCharacterOrNul] == '/' then
    absoluteSourcePath = self.mFilewrapperPath.string
  else
    absoluteSourcePath = [self.mSourceFileAbsolutePath stringByDeletingLastPathComponent] + "/" + self.mFilewrapperPath.string
  end
  if not [absoluteSourcePath directoryExists] then
    error self.mFilewrapperPath: "The '" + absoluteSourcePath + "' directory does not exist" 
    : regularRootFileMap, wrapperDirectoryMap
  else
  #--- Enumerate pathes
    var @uint wrapperFileIndex = 0
    var @uint wrapperDirectoryIndex = 0
    recursivelyEnumerateDirectories (
     !absoluteSourcePath
     !"/"
     !textExtensionMap
     !binaryFileExtensionMap
     ?regularRootFileMap
     ?wrapperDirectoryMap
     !?wrapperFileIndex
     !?wrapperDirectoryIndex
   )
  end
#--- Insert filewrapper
  [!?ioSemanticContext.mFilewrapperMap insertKey
    !self.mFilewrapperName
    !self.mFilewrapperPath
    !self.mFilewrapperTextFileExtensionList
    !regularRootFileMap
    !wrapperDirectoryMap
    !filewrapperTemplateMap
    !self.mIsInternal
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externRoutineDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext {
#--- Build signature
  var routineSignature = @formalParameterSignature {}
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentTypeName mFormalArgumentName *) in self.mFormalArgumentList do
    [!?ioTypeMap makeEntry  !mFormalArgumentTypeName ?let parameterTypeIndex]
    routineSignature += !mFormalSelector !parameterTypeIndex !mFormalArgumentPassingMode !mFormalArgumentName.string
  end
#--- Enter routine in routine map
  [!?ioSemanticContext.mRoutineMap insertKey
    !self.mRoutineName
    !routineSignature
    !self.mIsInternal
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @procDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext {
#--- Build signature
  var routineSignature = @formalParameterSignature {}
  for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentTypeName mFormalArgumentName *) in self.mFormalArgumentList do
    [!?ioTypeMap makeEntry  !mFormalArgumentTypeName ?let parameterTypeIndex]
    routineSignature += !mFormalSelector !parameterTypeIndex !mFormalArgumentPassingMode !mFormalArgumentName.string
  end
#--- Enter types for instruction list
  [self.mRoutineInstructionList enterInstructionListInSemanticContext !?ioTypeMap]
#--- Enter routine in routine map
  [!?ioSemanticContext.mRoutineMap insertKey
    !self.mRoutineName
    !routineSignature
    !self.mIsInternal
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externFunctionDeclarationAST enterDeclarationInSemanticContext # Handles also function declaration
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext {
#--- Build signature
  var functionSignature = @functionSignature {}
  for (mFormalSelector mFormalArgumentTypeName * * *) in self.mFormalArgumentList do
    [!?ioTypeMap makeEntry  !mFormalArgumentTypeName ?let parameterTypeIndex]
    functionSignature += !mFormalSelector !parameterTypeIndex !mFormalArgumentTypeName.string
  end
#--- Result type
  [!?ioTypeMap makeEntry  !self.mResultTypeName ?let resultTypeIndex]
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey
    !self.mFunctionName
    !functionSignature
    !resultTypeIndex
    !false # Is not internal
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @onceFunctionDeclarationAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext {
#--- Result type
  [!?ioTypeMap makeEntry  !self.mResultTypeName ?let @unifiedTypeMapEntry resultTypeIndex]
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !self.mFunctionName !{} !resultTypeIndex !self.mIsInternal]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @galgas3SyntaxComponentAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap unused ioTypeMap
  ?!@semanticContext ioSemanticContext
{
  [!?ioSemanticContext.mSyntaxComponentMapForSemanticAnalysis insertKey
    !self.mSyntaxComponentName
    !self.mLexiqueName
    !self.mNonterminalDeclarationList
    !self.mRuleList
    !self.mHasTranslateFeature
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @galgas3GrammarComponentAST enterDeclarationInSemanticContext
  ?let @extensionMethodMapForBuildingContext unused inExtensionMethodMapForBuildingContext
  ?let @extensionGetterMapForBuildingContext unused inExtensionGetterMapForBuildingContext
  ?let @extensionSetterMapForBuildingContext unused inExtensionSetterMapForBuildingContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticContext ioSemanticContext
{
#--- Analyze start symbol labels
  var @grammarLabelMap grammarLabelMap = {}
  for (mLabelName mFormalArgumentList *) in self.mStartSymbolLabelList do
  #--- Analyze signature
    var @formalParameterSignature formalArgumentList = {}
    for (mFormalSelector mFormalArgumentPassingMode mFormalArgumentTypeName mFormalArgumentName *) in mFormalArgumentList do
      [!?ioTypeMap makeEntry  !mFormalArgumentTypeName ?let argumentType]
      formalArgumentList +=
        !mFormalSelector
        !argumentType
        !mFormalArgumentPassingMode
        !mFormalArgumentName.string
    end
    [!?grammarLabelMap insertKey
      !mLabelName
      !formalArgumentList
    ]
  end
#--- Insert grammar in grammar map
  [!?ioSemanticContext.mGrammarMap insertGrammar
    !self.mGrammarComponentName
    !grammarLabelMap
    !self.mHasIndexing.bool
    !self.mHasTranslateFeature
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#    B U I L D    O R D E R E D     S E M A N T I C    L I S T                                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

#! enterDeclarationInGraph

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

graph @semanticTypePrecedenceGraph (@semanticDeclarationListAST) {
  %insertSetter addNode %errorMessage "the '%K' type is already declared at %L"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

abstract method @semanticDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @galgas3GrammarComponentAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"grammar " + self.mGrammarComponentName !self.mGrammarComponentName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  for (s) in self.mSyntaxComponents do
    [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"syntax " + s !s.location}]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @galgas3SyntaxComponentAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioExtensionOverrideDefinitionList {
  let key = @lstring.new {!"syntax " + self.mSyntaxComponentName !self.mSyntaxComponentName.location}
  [!?ioSemanticTypePrecedenceGraph addNode !key !self]
  [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"lexique " + self.mLexiqueName !self.mLexiqueName.location}]
  for (* mLabelList) in self.mRuleList do
    for (* mFormalArguments * * *) in mLabelList do
      for (* mFormalArgumentPassingMode mFormalArgumentTypeName * *) in mFormalArguments do
        switch mFormalArgumentPassingMode
          case argumentIn : [!?ioSemanticTypePrecedenceGraph addEdge !key !@lstring.new {!"@" + mFormalArgumentTypeName !mFormalArgumentTypeName.location}]
          case argumentOut, argumentInOut, argumentConstantIn :
        end
      end
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externFunctionDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList {
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @onceFunctionDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList {
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @externRoutineDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList {
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @filewrapperDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@extensionMethodMapForBuildingContext unused ioExtensionMethodMapForBuildingContext
  ?!@extensionGetterMapForBuildingContext unused ioExtensionGetterMapForBuildingContext
  ?!@extensionSetterMapForBuildingContext unused ioExtensionSetterMapForBuildingContext
  ?!@semanticDeclarationListAST ioExtensionOverrideDefinitionList {
  ioExtensionOverrideDefinitionList += !self
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @semanticDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST unused ioSemanticDeclarationList {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
