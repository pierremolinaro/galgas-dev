#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @lexicalTagInstructionAST : @lexicalInstructionAST {
  private let @lstring mLexicalTagName
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3LexiqueComponentSyntax {

  #·······························································································

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $tag$
    $identifier$ ?let tagName
    ioInstructionList += !@lexicalTagInstructionAST.new {!tagName}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4LexiqueComponentSyntax {

  #·······························································································

  rule <lexical_instruction> ?!@lexicalInstructionListAST ioInstructionList {
    $tag$
    $identifier$ ?let tagName
    ioInstructionList += !@lexicalTagInstructionAST.new {!tagName}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CHECK LEXICAL INSTRUCTION
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @lexicalTagInstructionAST checkLexicalInstruction
  ?!@lexiqueAnalysisContext unused ioLexiqueAnalysisContext
  ?!@lexicalTagMap ioTagMap {
  [!?ioTagMap insertKey !self.mLexicalTagName]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! COCOA GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalTagInstructionAST generateObjcCocoaInstructionCode
  ?let @string unused inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "scanningPointStructForCocoa locationForTag_" + self.mLexicalTagName + " ;\n"
  outGeneratedCode += "[self saveScanningPoint: & locationForTag_" + self.mLexicalTagName + "] ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalTagInstructionAST generateSwiftCocoaInstructionCode
  ?let @string unused inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string outGeneratedCode {
  outGeneratedCode = "let locationForTag_" + self.mLexicalTagName + " = self.savedScanningPoint ()\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! C++ CODE GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

override getter @lexicalTagInstructionAST lexicalInstructionUsesLoopLocalVariable -> @bool {
  result = false
}

#······················································································································

override getter @lexicalTagInstructionAST generateLexicalInstructionCode
  ?let @string unused inScannerClassName
  ?let @lexiqueAnalysisContext unused inLexiqueAnalysisContext
  -> @string {
  result = "const LocationInSource currentLocationForTag_" + self.mLexicalTagName + " = mCurrentLocation ;\n"
                    + "const LocationInSource endLocationForTag_" + self.mLexicalTagName + " = mTokenEndLocation ;\n"
                    + "const utf32 currentCharForTag_" + self.mLexicalTagName + " = mCurrentChar ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

