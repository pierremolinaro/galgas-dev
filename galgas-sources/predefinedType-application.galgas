#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  Generate predefined types                
#                                           
#  Copyright (C) 2010, ..., 2023 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @applicationPredefinedTypeAST : @predefinedTypeAST {

  #-----------------------------------------------------------------------------------------------------------------
  
  override getter typeKind -> @typeKindEnum {
    result = .packageType
  }
  
  #-----------------------------------------------------------------------------------------------------------------

  override getter cppDeclarationString -> @string {
    result = [filewrapper predefinedTypeGenerationTemplate.application_type]
  }

  #-----------------------------------------------------------------------------------------------------------------

  override getter defaultInitializerName -> @string {
    result = "" // No default initializer
  }

  #-----------------------------------------------------------------------------------------------------------------

  override getter getSupportedOperatorFlags -> @operators {
    result = .generateDescriptionGetterUtilityMethod
  }

  #-----------------------------------------------------------------------------------------------------------------

  override method getConstructorMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                    !@constructorMap outMap {
    outMap = {}
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"system"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"verboseOutput"
      !resultTypeName:"bool"
      !hasLexiqueArg:false
    )
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"projectVersionString"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"galgasVersionString"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"commandLineArgumentCount"
      !resultTypeName:"uint"
      !hasLexiqueArg:false
    )
    enterConstructorWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"commandLineArgumentAtIndex"
      !argTypeName:"uint"
      !argName:"inIndex"
      !resultTypeName:"string"
      !hasLexiqueArg:true
    )
  #--- Constructors for "bool" options
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"boolOptionNameList"
      !resultTypeName:"2stringlist"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"boolOptionInvocationCharacter"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"char"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"boolOptionInvocationString"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"boolOptionCommentString"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"boolOptionValue"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"bool"
      !hasLexiqueArg:false
    )
  #--- Constructors for "uint" options
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"uintOptionNameList"
      !resultTypeName:"2stringlist"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"uintOptionInvocationCharacter"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"char"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"uintOptionInvocationString"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"uintOptionCommentString"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"uintOptionValue"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"uint"
      !hasLexiqueArg:false
    )
  #--- Constructors for "string" options
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"stringOptionNameList"
      !resultTypeName:"2stringlist"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"stringOptionInvocationCharacter"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"char"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"stringOptionInvocationString"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"stringOptionCommentString"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
    enterConstructorWith2Arguments (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"stringOptionValue"
      !argTypeName1:"string"
      !argName1:"inOptionComponentName"
      !argTypeName2:"string"
      !argName2:"inOptionName"
      !resultTypeName:"string"
      !hasLexiqueArg:false
    )
  #--- Constructors for lexical keyword lists
    enterConstructorWithoutArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"keywordIdentifierSet"
      !resultTypeName:"stringset"
      !hasLexiqueArg:false
    )
    enterConstructorWithArgument (
      !?outMap
      !?ioUnifiedTypeMap
      !name:"keywordListForIdentifier"
      !argTypeName:"string"
      !argName:"inIdentifier"
      !resultTypeName:"stringlist"
      !hasLexiqueArg:false
    )
  }

  #-----------------------------------------------------------------------------------------------------------------

  override method getClassMethodMap ?!@unifiedTypeMap ioUnifiedTypeMap
                                    !@classMethodMap outClassMethodMap {
    outClassMethodMap = {}
    enterClassMethodWithInputArgument (
      !?outClassMethodMap
      !?ioUnifiedTypeMap
      !methodName: "exit"
      !argType: "uint"
      !argName: "inErrorCode"
      !compilerArgument:false
    )
    enterClassMethodWith3InputArguments (
      !?outClassMethodMap
      !?ioUnifiedTypeMap
      !methodName:"setBoolOptionValue"
      !argType1:"string"
      !argName1:"inDomain"
      !argType2:"string"
      !argName2:"inIdentifier"
      !argType3:"bool"
      !argName3:"inValue"
      !compilerArgument:false
    )
    enterClassMethodWith3InputArguments (
      !?outClassMethodMap
      !?ioUnifiedTypeMap
      !methodName:"setUIntOptionValue"
      !argType1:"string"
      !argName1:"inDomain"
      !argType2:"string"
      !argName2:"inIdentifier"
      !argType3:"uint"
      !argName3:"inValue"
      !compilerArgument:false
    )
    enterClassMethodWith3InputArguments (
      !?outClassMethodMap
      !?ioUnifiedTypeMap
      !methodName:"setStringOptionValue"
      !argType1:"string"
      !argName1:"inDomain"
      !argType2:"string"
      !argName2:"inIdentifier"
      !argType3:"string"
      !argName3:"inValue"
      !compilerArgument:false
    )
  }

  #-----------------------------------------------------------------------------------------------------------------

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

