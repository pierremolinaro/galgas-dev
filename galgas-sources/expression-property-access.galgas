#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#!   AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @structPropertyAccessExpressionAST : @semanticExpressionAST {
  public var @location mOperatorLocation
  public var @semanticExpressionAST mExpression
  public var @lstring mPropertyName
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3ExpressionSyntax {

  #·····················································································································
  
  rule <factor> !@semanticExpressionAST outExpression {
    <primary> ? outExpression
    repeat
    while
      $.$
      $identifier$ ?let structFieldName
      outExpression = @structPropertyAccessExpressionAST.new {!structFieldName.location !outExpression !structFieldName}
    end
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @structPropertyAccessExpressionAST enterExpressionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#·····················································································································

override method @structPropertyAccessExpressionAST analyzeSemanticExpression
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?inferenceType: let @unifiedTypeMap-entry unused inType
  ?let @analysisContext inAnalysisContext
  ?!@localVarManager ioVariableMap
  !@semanticExpressionForGeneration outExpression {
#--- Expression analysis
  [self.mExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: @unifiedTypeMap-entry.null
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
#--- Check field access availability
  let @unifiedTypeMap-entry expressionType = expression.mResultType
  if (not [[expressionType mTypeKindEnum] isStructType]) & (not [[expressionType mTypeKindEnum] isClassType]) then
    error self.mPropertyName: "the '.' operator requires the receiver to be a struct or a class"
  end
  let propertyMap = [expressionType mPropertyMap]
  [propertyMap searchKey !self.mPropertyName ?let isPublic ?* ?let type]
#  if not isPublic then
#    error self.mPropertyName : "inaccessible property (due to its 'private' qualifier)zzzz"
#  end

  if isPublic then
    # Ok
  elsif let [inAnalysisContext.selfType available ?type: let selfType ?2*], expressionType != selfType then
#  elsif [inAnalysisContext.nonMutableSelfType isNull] then
#    error self.mPropertyName : "inaccessible property (due to its 'private' qualifier)"
#  elsif expressionType != inAnalysisContext.nonMutableSelfType then
    error self.mPropertyName : "inaccessible property (due to its 'private' qualifier)"
  end
#  if isPublic then
#    # Ok
#  elsif [inAnalysisContext.nonMutableSelfType isNull] then
#    error self.mStructFieldName : "inaccessible property (due to its 'private' qualifier)"
#  elsif expressionType != inAnalysisContext.nonMutableSelfType then
#    error self.mStructFieldName : "inaccessible property (due to its 'private' qualifier)"
#  end
#--- Generate expression
  outExpression = @structPropertyAccessExpressionForGeneration.new {
    !type
    !self.mOperatorLocation
    !expression
    !self.mPropertyName.string
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CODE GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @structPropertyAccessExpressionForGeneration : @semanticExpressionForGeneration {
  public var @semanticExpressionForGeneration mExpression
  public var @string mStructFieldName
}

#·····················································································································

override method @structPropertyAccessExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression {
  [self.mResultType addHeaderFileName !?ioInclusionSet]
#--- Operand
  [self.mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let @string operand]
#--- Generate
  outCppExpression = operand + ".getter_" + [self.mStructFieldName identifierRepresentation] + " (HERE)"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
