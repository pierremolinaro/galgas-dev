#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#  Syntax component semantic analysis                                                                                  *
#                                                                                                                      *
#  Copyright (C) 2010, ..., 2016 Pierre Molinaro.                                                                      *
#  e-mail : pierre@pcmolinaro.name                                                                                     *
#                                                                                                                      *
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public   *
#  License as published by the Free Software Foundation.                                                               *
#                                                                                                                      *
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied       *
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more        *
#  details.                                                                                                            *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    S Y N T A X    S I G N A T U R E                                                                                  *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

method @semanticInstructionForGeneration appendSyntaxSignature # Capture all semantic instructions
  ?let @string unused inPosfix
  ?!@semanticInstructionListForGeneration unused ioInstructionListForGeneration {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func syntaxSignatureOfInstructionList
  ?let @string inPosfix
  ?let @semanticInstructionListForGeneration inInstructionList
  -> @semanticInstructionListForGeneration
{
  result = {}
  for () in inInstructionList do
    [mInstruction appendSyntaxSignature !inPosfix !?result]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                                                                                                      *
#    S Y N T A X    S I G N A T U R E    C O M P A R I S O N                                                           *
#                                                                                                                      *
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

getter @semanticInstructionForGeneration compareInstructionSyntaxSignature
  ?let @semanticInstructionForGeneration unused inTestedInstruction
  ->@bool outOk
{
  outOk = true
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

func compareSyntaxSignature
  ?let @semanticInstructionListForGeneration inReferenceSignature
  ?let @semanticInstructionListForGeneration inTestedSignature
  ?let @location inErrorLocation
  ->@bool outOk
{
  outOk = true
  for () ref_ in inReferenceSignature, () test_ in inTestedSignature while outOk do
     outOk = [ref_mInstruction compareInstructionSyntaxSignature !test_mInstruction]
  end
  if outOk & ([inReferenceSignature length] < [inTestedSignature length]) then
    @semanticInstructionForGeneration instruction = [inTestedSignature mInstructionAtIndex ![inReferenceSignature length]]
    cast instruction
    case >= @syntaxInstructionForGeneration si :
      error [si mInstructionLocation]
      :"syntax signature error, exceeding instruction; this branch has more syntax instructions than reference branch"
    else
      error inErrorLocation : "internal error"
    end
  elsif outOk & ([inReferenceSignature length] > [inTestedSignature length]) then
    error inErrorLocation
    :"syntax signature error, missing instruction; this branch has less syntax instructions than reference branch"
    @semanticInstructionForGeneration instruction = [inReferenceSignature mInstructionAtIndex ![inTestedSignature length]]
    cast instruction
    case >= @syntaxInstructionForGeneration si :
      error [si mInstructionLocation]
      :"this is the syntax instruction in reference branch that corresponds to the first missing instruction"
    else
      error inErrorLocation : "internal error"
    end
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

