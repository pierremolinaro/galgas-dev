#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#
#  semantics definitions for semantics component
#
#  Copyright (C) 2010, ..., 2021 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterInstanceMethodWithoutArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?methodName:let @string inInstanceMethodName
  ?let @bool inHasCompilerArgument
{
  [!?ioInstanceMethodMap insertKey
    ![inInstanceMethodName nowhere]
    !@methodKind.definedAsMember
    !{}
    !.nowhere
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !"" # No error message
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterInstanceMethodWithInputArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?inputArgTypeName:let @string inInputArgumentTypeName
  ?inputArgName:let @string inInputArgumentName
  ?methodName:let @string inInstanceMethodName
  ?let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inInputArgumentTypeName ?let argumentTypeIndex]
  var @formalParameterSignature argList = {}
  argList += !["" nowhere] !argumentTypeIndex !@formalArgumentPassingModeAST. argumentConstantIn !inInputArgumentName
  [!?ioInstanceMethodMap insertKey
    ![inInstanceMethodName nowhere]
    !@methodKind. definedAsMember
    !argList
    !.nowhere
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !"" # No error message
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @dataPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap {
  outInstanceMethodMap = {}
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToExecutableFile"
    !true
  )
  var @formalParameterSignature argList = {}
  [!?ioUnifiedTypeMap makeEntryFromString !"string" ?@unifiedTypeMapEntry t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentConstantIn !"inFilePath"
  [!?ioUnifiedTypeMap makeEntryFromString !"bool" ?t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentOut !"outFileModified"
  [!?outInstanceMethodMap insertKey
    !@lstring.new {!"writeToFileWhenDifferentContents" !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !true
    !@methodQualifier. isBasic
    !"" # No error message
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @stringPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
{
  outInstanceMethodMap = {}
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToExecutableFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"makeDirectoryAndWriteToFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"makeDirectoryAndWriteToExecutableFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"makeSymbolicLinkWithPath"
    !true
  )
  enterInstanceMethodWithoutArgument (
    !?outInstanceMethodMap
    !methodName:"makeDirectory"
    !true
  )
#--- writeToFileWhenDifferentContents, writeToExecutableFileWhenDifferentContents
  var @formalParameterSignature argList = {}
  [!?ioUnifiedTypeMap makeEntryFromString !"string" ?@unifiedTypeMapEntry t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentConstantIn !"inFilePath"
  [!?ioUnifiedTypeMap makeEntryFromString !"bool" ?t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentOut !"outFileModified"
  [!?outInstanceMethodMap insertKey
    !@lstring.new {!"writeToFileWhenDifferentContents" !@location.here}
    !@methodKind.definedAsMember
    !argList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  [!?outInstanceMethodMap insertKey
    !.new {!"writeToExecutableFileWhenDifferentContents" !.here}
    !@methodKind.definedAsMember
    !argList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

