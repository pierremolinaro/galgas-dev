//------------------------------------------------------------------------------------------------
//
//  semantics definitions for semantics component
//
//  Copyright (C) 2010, ..., 2021 Pierre Molinaro.
//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//------------------------------------------------------------------------------------------------

proc enterInstanceMethodWithoutArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?methodName:let @string inInstanceMethodName
  ?let @bool inHasCompilerArgument
{
  [!?ioInstanceMethodMap insertKey
    ![inInstanceMethodName nowhere]
    !@methodKind.definedAsMember
    !@()
    !.nowhere
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !"" // No error message
  ]
}

//------------------------------------------------------------------------------------------------

proc enterInstanceMethodWithInputArgument ?!@instanceMethodMap ioInstanceMethodMap
                                          ?!@unifiedTypeMap ioUnifiedTypeMap
                                          ?inputArgTypeName:let @string inInputArgumentTypeName
                                          ?inputArgName:let @string inInputArgumentName
                                          ?methodName:let @string inInstanceMethodName
                                          ?let @bool inHasCompilerArgument {
  [!?ioUnifiedTypeMap makeEntryFromString !inInputArgumentTypeName ?let argumentTypeIndex]
  var @formalParameterSignature argList = @()
  argList += !["" nowhere] !argumentTypeIndex !@formalArgumentPassingModeAST. argumentConstantIn !inInputArgumentName
  [!?ioInstanceMethodMap insertKey
    ![inInstanceMethodName nowhere]
    !@methodKind. definedAsMember
    !argList
    !.nowhere
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !"" // No error message
  ]
}

//------------------------------------------------------------------------------------------------

