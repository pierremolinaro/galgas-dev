#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#                                           
#  semantics definitions for semantics component 
#                                           
#  Copyright (C) 2010, ..., 2021 Pierre Molinaro.
#                                           
#  e-mail : pierre@pcmolinaro.name          
#                                           
#  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
#  License as published by the Free Software Foundation.
#                                           
#  This program is distributed in the hope it will be useful, but WITHOUT ANY WARRANTY; without even the implied
#  warranty of MERCHANDIBILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
#  details.                                 
#                                           
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterInstanceMethodWithoutArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?methodName:let @string inInstanceMethodName
  ?let @bool inHasCompilerArgument
{
  [!?ioInstanceMethodMap insertKey
    ![inInstanceMethodName nowhere]
    !@methodKind.definedAsMember
    !{}
    !.nowhere
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !"" # No error message
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

private proc enterInstanceMethodWithInputArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?inputArgTypeName:let @string inInputArgumentTypeName
  ?inputArgName:let @string inInputArgumentName
  ?methodName:let @string inInstanceMethodName
  ?let @bool inHasCompilerArgument
{
  [!?ioUnifiedTypeMap makeEntryFromString !inInputArgumentTypeName ?let argumentTypeIndex]
  var @formalParameterSignature argList = {}
  argList += !["" nowhere] !argumentTypeIndex !@formalArgumentPassingModeAST. argumentConstantIn !inInputArgumentName
  [!?ioInstanceMethodMap insertKey
    ![inInstanceMethodName nowhere]
    !@methodKind. definedAsMember
    !argList
    !.nowhere
    !inHasCompilerArgument
    !@methodQualifier. isBasic
    !"" # No error message
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @dataPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap {
  outInstanceMethodMap = {}
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToExecutableFile"
    !true
  )
  var @formalParameterSignature argList = {}
  [!?ioUnifiedTypeMap makeEntryFromString !"string" ?@unifiedTypeMapEntry t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentConstantIn !"inFilePath"
  [!?ioUnifiedTypeMap makeEntryFromString !"bool" ?t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentOut !"outFileModified"
  [!?outInstanceMethodMap insertKey
    !@lstring.new {!"writeToFileWhenDifferentContents" !@location.here}
    !@methodKind. definedAsMember
    !argList
    !@location.here
    !true
    !@methodQualifier. isBasic
    !"" # No error message
  ]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @stringPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
{
  outInstanceMethodMap = {}
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"writeToExecutableFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"makeDirectoryAndWriteToFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"makeDirectoryAndWriteToExecutableFile"
    !true
  )
  enterInstanceMethodWithInputArgument (
    !?outInstanceMethodMap
    !?ioUnifiedTypeMap
    !inputArgTypeName:"string"
    !inputArgName:"inFilePath"
    !methodName:"makeSymbolicLinkWithPath"
    !true
  )
  enterInstanceMethodWithoutArgument (
    !?outInstanceMethodMap
    !methodName:"makeDirectory"
    !true
  )
#--- writeToFileWhenDifferentContents, writeToExecutableFileWhenDifferentContents
  var @formalParameterSignature argList = {}
  [!?ioUnifiedTypeMap makeEntryFromString !"string" ?@unifiedTypeMapEntry t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentConstantIn !"inFilePath"
  [!?ioUnifiedTypeMap makeEntryFromString !"bool" ?t]
  argList += !["" nowhere] !t !@formalArgumentPassingModeAST. argumentOut !"outFileModified"
  [!?outInstanceMethodMap insertKey
    !@lstring.new {!"writeToFileWhenDifferentContents" !@location.here}
    !@methodKind.definedAsMember
    !argList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
  [!?outInstanceMethodMap insertKey
    !.new {!"writeToExecutableFileWhenDifferentContents" !.here}
    !@methodKind.definedAsMember
    !argList
    !@location.here
    !true
    !@methodQualifier.isBasic
    !"" # No error message
  ]
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————

