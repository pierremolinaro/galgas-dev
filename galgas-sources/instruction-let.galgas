#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @localVariableOrConstantDeclarationWithAssignmentAST : @semanticInstructionAST {
  private let @bool mIsConstant
  private let @lstring mOptionalTypeName
  private let @lstring mVariableName
  private let @semanticExpressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @undefinedLocalConstantDeclarationAST : @semanticInstructionAST {
  private let @lstring mConstantTypeName
  private let @lstring mConstantName
}

#·····················································································································*

refclass @localConstantDeclarationWithAssignmentAST : @semanticInstructionAST {
  private let @lstring mVariableName
  private let @semanticExpressionAST mSourceExpression
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $let$
    $@type$ ?let typeName
    $identifier$ ?let constantName
    outInstruction = @undefinedLocalConstantDeclarationAST.new {
      !typeName.location
      !typeName
      !constantName
   }
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $let$
    $@type$ ?let typeName
    $identifier$ ?let variableName
    $=$
    <expression> ?let @semanticExpressionAST sourceExpression
    outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST.new {
      !typeName.location
      !true # Is Constant
      !typeName
      !variableName
      !sourceExpression}
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $let$
    $identifier$ ?let variableName
    $=$
    <expression> ?let @semanticExpressionAST sourceExpression
    outInstruction = @localConstantDeclarationWithAssignmentAST.new {
      !variableName.location
      !variableName
      !sourceExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $let$
    $@type$ ?let typeName
    $identifier$ ?let constantName
    outInstruction = @undefinedLocalConstantDeclarationAST.new {
      !typeName.location
      !typeName
      !constantName
   }
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $let$
    $@type$ ?let typeName
    $identifier$ ?let variableName
    $=$
    <expression> ?let @semanticExpressionAST sourceExpression
    outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST.new {
      !typeName.location
      !true # Is Constant
      !typeName
      !variableName
      !sourceExpression}
  }

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $let$
    $identifier$ ?let variableName
    $=$
    <expression> ?let @semanticExpressionAST sourceExpression
    outInstruction = @localConstantDeclarationWithAssignmentAST.new {
      !variableName.location
      !variableName
      !sourceExpression}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @undefinedLocalConstantDeclarationAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#······················································································································*

  
override method @localConstantDeclarationWithAssignmentAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap {
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#······················································································································*

override method @localVariableOrConstantDeclarationWithAssignmentAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap {
  if self.mOptionalTypeName.string != "" then
    [!?ioTypeMap makeEntry !self.mOptionalTypeName ?*]
  end
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @undefinedLocalConstantDeclarationAST analyzeSemanticInstruction
                                          ?let @lstring unused inUsefulnessCallerEntityName
                                          ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
                                          ?let @analysisContext inAnalysisContext
                                          ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                                          ?!@localVarManager ioVariableMap {
  let targetType = [inAnalysisContext.mSemanticContext.mTypeMap searchKey !self.mConstantTypeName]
  let targetVariableCppName = "var_" + [self.mConstantName identifierRepresentation]
                            + "_" + [self.mConstantName.location locationIndex]
  [!?ioVariableMap insertDeclaredLocalConstant
    !self.mConstantName
    !targetType
    !targetVariableCppName
    !targetVariableCppName
  ]
#--- Generate instruction
  ioInstructionListForGeneration += !@undefinedLocalConstantDeclarationForGeneration.new {
    !targetType
    !targetVariableCppName
  }
}

#······················································································································*

override method @localConstantDeclarationWithAssignmentAST analyzeSemanticInstruction
                            ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
#--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: .null
    !inAnalysisContext
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
#--- Enter target variable
  let targetVariableCppName = "var_" + [self.mVariableName identifierRepresentation]
                                     + "_" + [self.mVariableName.location locationIndex]
  [!?ioVariableMap insertInitializedLocalConstant
    !self.mVariableName
    !expression.mResultType
    !targetVariableCppName
    !targetVariableCppName
  ]
#--- Generate instruction
  ioInstructionListForGeneration += !@localVariableOrConstantDeclarationWithSourceExpressionForGeneration.new {
    !expression.mResultType
    !true
    !targetVariableCppName
    !expression}
}

#······················································································································*

override method @localVariableOrConstantDeclarationWithAssignmentAST analyzeSemanticInstruction
                            ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
  let targetType = [inAnalysisContext.mSemanticContext.mTypeMap searchKey !self.mOptionalTypeName]
#--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: targetType
    !inAnalysisContext
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check target variable
  let targetVariableCppName = "var_" + [self.mVariableName identifierRepresentation]
                            + "_" + [self.mVariableName.location locationIndex]
  if self.mIsConstant then
    [!?ioVariableMap insertInitializedLocalConstant
      !self.mVariableName
      !targetType
      !targetVariableCppName
      !targetVariableCppName
    ]
  else
    [!?ioVariableMap insertInitializedLocalVariable
      !self.mVariableName
      !warnsIfNotMutated: true
      !targetType
      !targetVariableCppName
      !targetVariableCppName
    ]
  end
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!targetType !expression.mResultType !self.mInstructionLocation !?expression)
#--- Generate instruction
  ioInstructionListForGeneration += !@localVariableOrConstantDeclarationWithSourceExpressionForGeneration.new {
    !targetType
    !self.mIsConstant
    !targetVariableCppName
    !expression
  }
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @undefinedLocalConstantDeclarationForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMap-entry mTargetType
  private let @string mCppVariableName
}

#······················································································································*

refclass @localVariableOrConstantDeclarationWithSourceExpressionForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMap-entry mTargetType
  private let @bool mIsConstant
  private let @string mCppVariableName
  private let @semanticExpressionForGeneration mSourceExpression
}

#······················································································································*

override method @undefinedLocalConstantDeclarationForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [self.mTargetType addHeaderFileName !?ioInclusionSet]
  ioGeneratedCode += "GALGAS_" + [self.mTargetType identifierRepresentation] + " " + self.mCppVariableName + " ;\n"
}

#······················································································································*

override method @localVariableOrConstantDeclarationWithSourceExpressionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [self.mTargetType addHeaderFileName !?ioInclusionSet]
  [self.mSourceExpression generateExpression
     !?ioGeneratedCode
     !?ioInclusionSet
     !?ioTemporaryVariableIndex
     !?ioUnusedVariableCppNameSet
     ?let @string sourceVar
  ]
  ioGeneratedCode += "GALGAS_" + [self.mTargetType identifierRepresentation] + " " + self.mCppVariableName + " = " + sourceVar + " ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
