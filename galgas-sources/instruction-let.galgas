#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @localVariableOrConstantDeclarationWithAssignmentAST : @semanticInstructionAST {
  private let @bool mIsConstant
  private let @lstring mOptionalTypeName
  private let @lstring mVariableName
  private let @semanticExpressionAST mSourceExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @undefinedLocalConstantDeclarationAST : @semanticInstructionAST {
  private let @lstring mConstantTypeName
  private let @lstring mConstantName
}

#·····················································································································*

refclass @localConstantDeclarationWithAssignmentAST : @semanticInstructionAST {
  private let @lstring mVariableName
  private let @semanticExpressionAST mSourceExpression
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST unused ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $let$
    $@type$ ?let typeName
    $identifier$ ?let constantName
    outInstruction = @undefinedLocalConstantDeclarationAST.new {
      !typeName.location
      !typeName
      !constantName
   }
  }

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $let$
    $@type$ ?let typeName
    $identifier$ ?let variableName
    $=$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST.new {
      !typeName.location
      !true # Is Constant
      !typeName
      !variableName
      !sourceExpression
    }
  }

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $let$
    $identifier$ ?let variableName
    $=$
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @localConstantDeclarationWithAssignmentAST.new {
      !variableName.location
      !variableName
      !sourceExpression}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $let$
    <type_definition> !?ioDeclarations ?let typeName
    $identifier$ ?let constantName
    select
      outInstruction = @undefinedLocalConstantDeclarationAST.new {
        !typeName.location
        !typeName
        !constantName
     }
    or
      $=$
      <expression> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
      outInstruction = @localVariableOrConstantDeclarationWithAssignmentAST.new {
        !typeName.location
        !true # Is Constant
        !typeName
        !constantName
        !sourceExpression
      }
    end
  }

  #·······························································································

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $let$
    $identifier$ ?let variableName
    $=$
    <expression> !?ioDeclarations ?let @semanticExpressionAST sourceExpression
    outInstruction = @localConstantDeclarationWithAssignmentAST.new {
      !variableName.location
      !variableName
      !sourceExpression}
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @undefinedLocalConstantDeclarationAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap unused ioTypeMap
{
}

#······················································································································


override method @localConstantDeclarationWithAssignmentAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap {
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#······················································································································

override method @localVariableOrConstantDeclarationWithAssignmentAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap {
  if self.mOptionalTypeName.string != "" then
    [!?ioTypeMap makeEntry !self.mOptionalTypeName ?*]
  end
  [self.mSourceExpression enterExpressionInSemanticContext !?ioTypeMap]
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#—————————————————————————————————————————————————————————————————————————————————————————————————

override method @undefinedLocalConstantDeclarationAST analyzeSemanticInstruction
                                          ?let @lstring unused inUsefulnessCallerEntityName
                                          ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
                                          ?let @analysisContext unused inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
                                          ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                                          ?!@localVarManager ioVariableMap {
  let targetType = [ioTypeMap typeMapEntryForLKey !self.mConstantTypeName]
  let targetVariableCppName = "var_" + [self.mConstantName identifierRepresentation]
                            + "_" + [self.mConstantName.location startLocationIndex]
  [!?ioVariableMap insertDeclaredLocalConstant
    !self.mConstantName
    !targetType
    !targetVariableCppName
    !targetVariableCppName
  ]
#--- Generate instruction
  ioInstructionListForGeneration += !@undefinedLocalConstantDeclarationForGeneration.new {
    !targetType
    !targetVariableCppName
  }
}

#······················································································································

override method @localConstantDeclarationWithAssignmentAST analyzeSemanticInstruction
                            ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                            ?!@unifiedTypeMap ioTypeMap
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
#--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: .null
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?let @semanticExpressionForGeneration expression
  ]
#--- Enter target variable
  let targetVariableCppName = "var_" + [self.mVariableName identifierRepresentation]
                                     + "_" + [self.mVariableName.location startLocationIndex]
  [!?ioVariableMap insertInitializedLocalConstant
    !self.mVariableName
    !expression.mResultType
    !targetVariableCppName
    !targetVariableCppName
  ]
#--- Generate instruction
  ioInstructionListForGeneration += !@localVariableOrConstantDeclarationWithSourceExpressionForGeneration.new {
    !expression.mResultType
    !true
    !targetVariableCppName
    !expression}
}

#······················································································································

override method @localVariableOrConstantDeclarationWithAssignmentAST analyzeSemanticInstruction
                            ?let @lstring inUsefulnessCallerEntityName
                            ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
                            ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
                            ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
                            ?!@localVarManager ioVariableMap {
  let targetType = [ioTypeMap typeMapEntryForLKey !self.mOptionalTypeName]
#--- Analyze source expression
  [self.mSourceExpression analyzeSemanticExpression
    !usefulnessCallerEntityName: inUsefulnessCallerEntityName
    !?ioUsefulEntitiesGraph
    !inferenceType: targetType
    !inAnalysisContext
    !?ioTypeMap
    !?ioVariableMap
    ?@semanticExpressionForGeneration expression
  ]
#--- Check target variable
  let targetVariableCppName = "var_" + [self.mVariableName identifierRepresentation]
                            + "_" + [self.mVariableName.location startLocationIndex]
  if self.mIsConstant then
    [!?ioVariableMap insertInitializedLocalConstant
      !self.mVariableName
      !targetType
      !targetVariableCppName
      !targetVariableCppName
    ]
  else
    [!?ioVariableMap insertInitializedLocalVariable
      !self.mVariableName
      !warnsIfNotMutated: true
      !targetType
      !targetVariableCppName
      !targetVariableCppName
    ]
  end
#--- Check assignment type compatibility
  checkAssignmentTypeWithImplicitGetterCall (!targetType !expression.mResultType !self.mInstructionLocation !?expression)
#--- Generate instruction
  ioInstructionListForGeneration += !@localVariableOrConstantDeclarationWithSourceExpressionForGeneration.new {
    !targetType
    !self.mIsConstant
    !targetVariableCppName
    !expression
  }
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @undefinedLocalConstantDeclarationForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMapEntry mTargetType
  private let @string mCppVariableName
}

#······················································································································

refclass @localVariableOrConstantDeclarationWithSourceExpressionForGeneration : @semanticInstructionForGeneration {
  private let @unifiedTypeMapEntry mTargetType
  private let @bool mIsConstant
  private let @string mCppVariableName
  private let @semanticExpressionForGeneration mSourceExpression
}

#······················································································································

override method @undefinedLocalConstantDeclarationForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [self.mTargetType addHeaderFileName !?ioInclusionSet]
  ioGeneratedCode += "GALGAS_" + [self.mTargetType identifierRepresentation] + " " + self.mCppVariableName + " ;\n"
}

#······················································································································

override method @localVariableOrConstantDeclarationWithSourceExpressionForGeneration generateInstruction
                                                    ?!@stringset ioInclusionSet
                                                    ?!@uint ioTemporaryVariableIndex
                                                    ?!@stringset ioUnusedVariableCppNameSet
                                                    ?let @bool unused inGenerateSyntaxDirectedTranslationString
                                                    ?!@string ioGeneratedCode {
  [self.mTargetType addHeaderFileName !?ioInclusionSet]
  [self.mSourceExpression generateExpression
     !?ioGeneratedCode
     !?ioInclusionSet
     !?ioTemporaryVariableIndex
     !?ioUnusedVariableCppNameSet
     ?let @string sourceVar
  ]
  ioGeneratedCode += "GALGAS_" + [self.mTargetType identifierRepresentation] + " " + self.mCppVariableName + " = " + sourceVar + " ;\n"
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
