#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

refclass @dropInstructionAST : @semanticInstructionAST {
  private let @lstringlist mDropList
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $drop$
    let instructionLocation = @location.here
    var @lstringlist dropList = {}
    repeat
      $identifier$ ?let variableName
      dropList += !variableName
    while
      $,$
    end
    outInstruction = @dropInstructionAST.new {!instructionLocation !dropList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $drop$
    let instructionLocation = @location.here
    var @lstringlist dropList = {}
    repeat
      $identifier$ ?let variableName
      dropList += !variableName
    while
      $,$
    end
    outInstruction = @dropInstructionAST.new {!instructionLocation !dropList}
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @dropInstructionAST enterInstructionInSemanticContext ?!@unifiedTypeMap unused ioTypeMap {
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @dropInstructionAST analyzeSemanticInstruction
                    ?let @lstring unused inUsefulnessCallerEntityName
                    ?!@usefulEntitiesGraph unused ioUsefulEntitiesGraph
                    ?let @analysisContext unused inAnalysisContext
                                ?!@unifiedTypeMap unused ioTypeMap
                    ?!@semanticInstructionListForGeneration unused ioInstructionListForGeneration
                    ?!@localVarManager ioVariableMap {
  for (mValue) in self.mDropList do
    [!?ioVariableMap searchForDropAccess !mValue]
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
