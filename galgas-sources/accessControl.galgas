#—————————————————————————————————————————————————————————————————————————————————————————————————
#
#  Copyright (C) 2023, ..., 2023 Pierre Molinaro.
#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3DeclarationsSyntax {

  #·······························································································

  rule <acces_control> !@AccessControlAST outAccessControl {
    select
      outAccessControl = .publicAccess
    or
      $public$
      outAccessControl = .publicAccess
    or
      $protected$
      select
        outAccessControl = .protectedAccess
      or
        $($
        $identifier$ ?let value
        if value.string != "set" then
          error value.location : "only 'set' is allowed here"
        end
        $)$
        outAccessControl = .protectedSetAccess
      end
    or
      $private$
      select
        outAccessControl = .privateAccess
      or
        $($
        $identifier$ ?let value
        if value.string != "set" then
          error value.location : "only 'set' is allowed here"
        end
        $)$
        outAccessControl = .privateSetAccess
      end
    or
      $fileprivate$
      select
        outAccessControl = .fileprivateAccess {!declarationLocation: .here}
      or
        $($
        outAccessControl = .fileprivateSetAccess {!declarationLocation: .here}
        $identifier$ ?let value
        if value.string != "set" then
          error value.location : "only 'set' is allowed here"
        end
        $)$
      end
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4DeclarationsSyntax {

  #·······························································································

  rule <acces_control> !@AccessControlAST outAccessControl {
    select
      outAccessControl = .publicAccess
    or
      $public$
      outAccessControl = .publicAccess
    or
      $protected$
      select
        outAccessControl = .protectedAccess
      or
        $($
        $identifier$ ?let value
        if value.string != "set" then
          error value.location : "only 'set' is allowed here"
        end
        $)$
        outAccessControl = .protectedSetAccess
      end
    or
      $private$
      select
        outAccessControl = .privateAccess
      or
        $($
        $identifier$ ?let value
        if value.string != "set" then
          error value.location : "only 'set' is allowed here"
        end
        $)$
        outAccessControl = .privateSetAccess
      end
    or
      $fileprivate$
      select
        outAccessControl = .fileprivateSetAccess {!declarationLocation: .here}
      or
        $($
        $identifier$ ?let value
        outAccessControl = .fileprivateSetAccess {!declarationLocation: .here}
        if value.string != "set" then
          error value.location : "only 'set' is allowed here"
        end
        $)$
      end
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @AccessControlAST {
  case publicAccess
  case protectedAccess
  case protectedSetAccess
  case privateAccess
  case privateSetAccess
  case fileprivateAccess (@location declarationLocation)
  case fileprivateSetAccess (@location declarationLocation)

  #·······························································································

  method checkCompatibilityWithLet ?let @location inLocation {
    switch self
    case publicAccess :
    case protectedAccess :
    case protectedSetAccess :
      error inLocation : "'protected(set)' and 'let' are incompatible"
    case privateAccess :
    case privateSetAccess :
      error inLocation : "'private(set)' and 'let' are incompatible"
    case fileprivateAccess (*) :
    case fileprivateSetAccess (*) :
      error inLocation : "'private(set)' and 'let' are incompatible"
    end
  }

  #·······························································································

  getter accessControl ?forDeclaringType: let @unifiedTypeMapEntry inDeclaringType -> @AccessControl {
    switch self
    case publicAccess :
      result = .publicAccess
    case protectedAccess :
      result = .protectedAccess {!declaringType: inDeclaringType}
    case protectedSetAccess :
      result = .protectedSetAccess {!declaringType: inDeclaringType}
    case privateAccess :
      result = .privateAccess {!declaringType: inDeclaringType}
    case privateSetAccess :
      result = .privateSetAccess {!declaringType: inDeclaringType}
    case fileprivateAccess (declarationLocation) :
      result = .fileprivateAccess {!declarationLocation: declarationLocation}
    case fileprivateSetAccess (declarationLocation) :
      result = .fileprivateSetAccess {!declarationLocation: declarationLocation}
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

enum @AccessControl {
  case publicAccess
  case protectedAccess (@unifiedTypeMapEntry declaringType)
  case protectedSetAccess (@unifiedTypeMapEntry declaringType)
  case privateAccess (@unifiedTypeMapEntry declaringType)
  case privateSetAccess (@unifiedTypeMapEntry declaringType)
  case fileprivateAccess (@location declarationLocation)
  case fileprivateSetAccess (@location declarationLocation)

  #·······························································································

  method checkSetAccess ?let @selfAvailability inOptionalCurrentType
                        ?let @location inErrorLocation {
    switch self
    case publicAccess :
    case protectedAccess (declaringType) :
      switch inOptionalCurrentType
      case none :
        error inErrorLocation : "inaccessible property (due to 'protected' qualifier)"
      case available (t 2*) :
        var currentType = t
        var ok = [declaringType typeName] == [currentType typeName]
        loop while (not ok) && (not [[currentType definition].superType isNull]) do
          currentType = [currentType definition].superType
          ok = [declaringType typeName] == [currentType typeName]
        end
        if not ok then
          error inErrorLocation : "inaccessible property (due to 'protected' qualifier)"
        end
      case initializer (*) :
      end
    case protectedSetAccess (declaringType) :
      switch inOptionalCurrentType
      case none :
         warning inErrorLocation : "inaccessible property (due to 'protected(set)' qualifier)"
      case available (t 2*) :
        var currentType = t
        var ok = [declaringType typeName] == [currentType typeName]
        loop while (not ok) && (not [[currentType definition].superType isNull]) do
          currentType = [currentType definition].superType
          ok = [declaringType typeName] == [currentType typeName]
        end
        if not ok then
          warning inErrorLocation : "inaccessible property (due to 'protected(set)' qualifier)"
        end
      case initializer (*) :
      end
    case privateAccess (declaringType) :
      switch inOptionalCurrentType
      case none :
        error inErrorLocation : "inaccessible property (due to 'private' qualifier)"
      case available (currentType 2*) :
        if [declaringType typeName] != [currentType typeName] then
          error inErrorLocation : "inaccessible property (due to 'private' qualifier)"
        end
      case initializer (*) :
      end
    case privateSetAccess (declaringType) :
      switch inOptionalCurrentType
      case none :
         warning inErrorLocation : "inaccessible property (due to 'private(set)' qualifier)"
      case available (currentType 2*) :
        if [declaringType typeName] != [currentType typeName] then
          error inErrorLocation : "inaccessible property (due to 'private(set)' qualifier)"
        end
      case initializer (*) :
      end
    case fileprivateAccess (declaringLocation) :
      if [declaringLocation sourceFile] != [inErrorLocation sourceFile] then
        error inErrorLocation : "inaccessible property (due to 'fileprivate' qualifier)"
      end
    case fileprivateSetAccess (declaringLocation) :
      if [declaringLocation sourceFile] != [inErrorLocation sourceFile] then
        error inErrorLocation : "inaccessible property (due to 'fileprivate(set)' qualifier)"
      end
    end
  }

  #·······························································································

  method checkGetAccess ?let @selfAvailability inOptionalCurrentType
                        ?let @location inErrorLocation {
    switch self
    case publicAccess :
    case protectedSetAccess (*) :
    case privateSetAccess (*) :
    case protectedAccess (declaringType) :
      switch inOptionalCurrentType
      case none :
        error inErrorLocation : "inaccessible property (due to 'private' qualifier)"
      case available (t 2*) :
        var currentType = t
        var ok = [declaringType typeName] == [currentType typeName]
        loop while (not ok) && (not [[currentType definition].superType isNull]) do
          currentType = [currentType definition].superType
          ok = [declaringType typeName] == [currentType typeName]
        end
        if not ok then
          error inErrorLocation : "inaccessible property (due to 'protected' qualifier)"
        end
      case initializer (*) :
      end
    case privateAccess (declaringType) :
      switch inOptionalCurrentType
      case none :
        error inErrorLocation : "inaccessible property (due to 'private' qualifier)"
      case available (currentType 2*) :
        if [declaringType typeName] != [currentType typeName] then
          error inErrorLocation : "inaccessible property (due to 'private' qualifier)"
        end
      case initializer (*) :
      end
    case fileprivateAccess (declaringLocation) :
      if [declaringLocation sourceFile] != [inErrorLocation sourceFile] then
        error inErrorLocation : "inaccessible property (due to 'fileprivate' qualifier)"
      end
    case fileprivateSetAccess (*) :
    end
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
