#
#  MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the "Software"), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions
# of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
# CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.
#
#—————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·······························································································

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $[$
    let instructionLocation = @location.here
    <expression_ggs3> !?ioDeclarations ?let @semanticExpressionAST mReceiverExpression
    $identifier$ ?let mMethodName
    <actual_parameter_list_ggs3> !?ioDeclarations ?let @actualParameterListAST actualParameterList
    $]$
    outInstruction = @methodCallInstructionAST {
      !instructionLocation
      !mReceiverExpression
      !mMethodName
      !actualParameterList
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas4InstructionsSyntax {

  #·······························································································

#  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
#    $[$
#    let instructionLocation = @location.here
#    <expression> ?let @semanticExpressionAST receiverExpression
#    $identifier$ ?let methodName
#    <actual_parameter_list_within_parenthesis> ?let @actualParameterListAST actualParameterList
#    outInstruction = @methodCallInstructionAST {
#      !instructionLocation
#      !receiverExpression
#      !methodName
#      !actualParameterList
#    }
#  }

  #·······························································································

#  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
#    $($
#    let instructionLocation = @location.here
#    <expression> ?let @semanticExpressionAST receiverExpression
#    $)$
#    $.$
#    $identifier$ ?let methodName
#    <actual_parameter_list_within_parenthesis> ?let @actualParameterListAST actualParameterList
#    outInstruction = @methodCallInstructionAST {
#      !instructionLocation
#      !receiverExpression
#      !methodName
#      !actualParameterList
#    }
#  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @methodCallInstructionAST : @semanticInstructionAST {
  private let @semanticExpressionAST mReceiverExpression
  private let @lstring mMethodName
  private let @actualParameterListAST mActualParameterList

  #·······························································································

  override method enterInstructionInSemanticContext ?!@unifiedTypeMap ioTypeMap {
    [self.mReceiverExpression enterExpressionInSemanticContext !?ioTypeMap]
    for (mActualParameter) in self.mActualParameterList do
      [mActualParameter enterParameterInSemanticContext !?ioTypeMap]
    end
  }

  #·······························································································

  override method analyzeSemanticInstruction
    ?let @lstring inUsefulnessCallerEntityName
    ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
    ?let @analysisContext inAnalysisContext
                                  ?!@unifiedTypeMap ioTypeMap
    ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
    ?!@localVarManager ioVariableMap
  {
  #--- Check self is not inkoed before full initialization
    if self.mReceiverExpression is @selfInExpressionAST then
      [ioVariableMap checkSelfObjectIsFullyInitialized !self.mMethodName.location]
    end
  #--- Analyze receiver expression
    [self.mReceiverExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: .null
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?let @semanticExpressionForGeneration receiverExpression
    ]
  #--- Get type method signature
    [[receiverExpression.mResultType definition].instanceMethodMap searchKey
      !self.mMethodName
      ?let kind
      ?let routineSignature
      ?*
      ?let hasCompilerArgument
      ?*
      ?let errorMessage
    ]
    if errorMessage != "" then
      error self.mMethodName : errorMessage
    end
  #--- Check effective parameters
    [self.mActualParameterList analyzeRoutineArguments
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inAnalysisContext
      !?ioTypeMap
      !self.mMethodName
      !invokedEntityNameForErrorSignaling: "'" + self.mMethodName + "' instance method header"
      !routineSignature
      !?ioVariableMap
      !?ioInstructionListForGeneration
      ?let @actualParameterListForGeneration actualParameterListForGeneration
    ]
  #--- Search base type that declares the method
    var baseType = receiverExpression.mResultType
    var searching = true
    if @uint.errorCount == 0 then
      loop (@uint.max) while searching do
        if [[baseType definition].superType isNull] then
          searching = false
        else
          if [[[baseType definition].superType definition].instanceMethodMap hasKey !self.mMethodName.string] then
            baseType = [baseType definition].superType
          else
            searching = false
          end
        end
      end
    end
  #--- Generate instructions
    ioInstructionListForGeneration += !@methodCallInstructionForGeneration {
      !self.mInstructionLocation
      !receiverExpression.mResultType
      !receiverExpression
      !self.mMethodName.string
      !kind
      !actualParameterListForGeneration
      !hasCompilerArgument
      !baseType
    }
  }

  #·······························································································

}

#—————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#—————————————————————————————————————————————————————————————————————————————————————————————————

refclass @methodCallInstructionForGeneration : @semanticInstructionForGeneration {
  private let @location mInstructionLocation
  private let @unifiedTypeMapEntry mReceiverType
  private let @semanticExpressionForGeneration mReceiverExpression
  private let @string mMethodName
  private let @methodKind mKind
  private let @actualParameterListForGeneration mActualParameterList
  private let @bool mHasCompilerArgument
  private let @unifiedTypeMapEntry mMethodBaseType
}

#·····················································································································*

override method @methodCallInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
#--- Receiver expression
  [self.mReceiverExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let @string receiverCppName]
  [!?ioUnusedVariableCppNameSet removeKey !receiverCppName]
#---
  var parameterCppNameList = @stringlist §[]
  var jokerParametersToReleaseList = @stringlist §[]
  var inputVariableList = @stringlist §[]
  for (mActualParameter) in self.mActualParameterList do
    [mActualParameter generateActualParameter !?ioInclusionSet !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?inputVariableList !?ioUnusedVariableCppNameSet ?let parameterCppName]
    parameterCppNameList += !parameterCppName
  end
#--- Generate method call
  switch self.mKind
  case definedAsExtension :
    ioInclusionSet += !"method-" + [[self.mMethodBaseType definition].typeName.string fileNameRepresentation] + "-" + [self.mMethodName fileNameRepresentation]
    if [[self.mReceiverType definition].typeKind isClassType] then
      ioGeneratedCode += "callExtensionMethod_" + [self.mMethodName identifierRepresentation]
                      + " ((cPtr_" + [self.mReceiverExpression.mResultType identifierRepresentation]
                      + " *) " + receiverCppName + ".ptr (), "
    else
      ioGeneratedCode += "extensionMethod_" + [self.mMethodName identifierRepresentation]
                      + " (" + receiverCppName + ", "
    end
  case definedAsMember :
    ioGeneratedCode += receiverCppName + ".method_" + [self.mMethodName identifierRepresentation] + " ("
  end
  for (mValue) in parameterCppNameList
    do ioGeneratedCode += mValue
    between ioGeneratedCode += ", "
  end
  if [parameterCppNameList count] == 0 then
    if self.mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
      ioGeneratedCode += compilerCppName ()
      ioGeneratedCode += " COMMA_"
    end
  elsif self.mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName ()]
    ioGeneratedCode += ", " + compilerCppName ()
    ioGeneratedCode += " COMMA_"
  else
    ioGeneratedCode += " COMMA_"
  end
  ioGeneratedCode += [self.mInstructionLocation sourceFile] + ") ;\n"
#--- Generate poisoned variables
  for (actualParameter) in self.mActualParameterList do
    [actualParameter generatePoisonedVariables
      !?ioGeneratedCode
      !?ioUnusedVariableCppNameSet
    ]
  end
}

#—————————————————————————————————————————————————————————————————————————————————————————————————
