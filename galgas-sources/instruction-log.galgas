#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! AST
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

list @logListAST {
  @lstring mLogMessage
  @semanticExpressionAST mLogExpression
}

#·····················································································································*

class @logInstructionAST : @semanticInstructionAST {
  @logListAST mLogList
}


#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SYNTAX
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

syntax extension galgas3InstructionsSyntax {

  #·····················································································································

  rule <semantic_instruction> !@semanticInstructionAST outInstruction {
    $log$
    let instructionLocation = @location.here
    var logList =@logListAST {}
    repeat
      select
        $identifier$ ?let @lstring loggedVariableName
        logList += !loggedVariableName !@varInExpressionAST.new {!loggedVariableName}
      or
        $"string"$ ?let logMessage
        $:$
        <expression> ?let @semanticExpressionAST logExpression
        logList += !logMessage !logExpression
      end
    while
      $,$
    end
    outInstruction = @logInstructionAST.new {
      !instructionLocation
      !logList
    }
  }

  #·····················································································································

}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! CONTEXT
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
  
override method @logInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for () in self.mLogList do
    [mLogExpression enterExpressionInSemanticContext !?ioTypeMap]
  end 
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! SEMANTICS
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

override method @logInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@variableMap ioVariableMap {
  for () in self.mLogList do
  #--- Analyze source expression
    @semanticExpressionForGeneration expression
    [mLogExpression analyzeSemanticExpression
      !inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !@unifiedTypeMap-proxy.null
      !inAnalysisContext
      !?ioVariableMap
      ?expression
    ]
  #--- Generate instruction
    ioInstructionListForGeneration += !@logInstructionForGeneration.new {
      !mLogMessage
      !expression}  
  end
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
#! GENERATION
#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

class @logInstructionForGeneration : @semanticInstructionForGeneration {
  @lstring mLogMessage
  @semanticExpressionForGeneration mLogExpression
}

#·····················································································································*

override method @logInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode {
  [self.mLogExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?let @string logVar]
  ioGeneratedCode += logVar + ".log (" + [self.mLogMessage utf8Representation]
  + " " + [[self.mLogMessage location] commaSourceFile] + ") ;\n"
}

#———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————
