//
//  MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software
// and associated documentation files (the "Software"), to deal in the Software without
// restriction, including without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the
// Software is furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING
// BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//--------------------------------------------------------------------------------------------------
//! AST
//--------------------------------------------------------------------------------------------------

list @logListAST {
  public let @lstring mLogMessage
  public let @semanticExpressionAST mLogExpression
}

//································································································*

class @logInstructionAST : @semanticInstructionAST {
  public let @logListAST mLogList
}


//--------------------------------------------------------------------------------------------------
//! SYNTAX
//--------------------------------------------------------------------------------------------------

syntax extension galgas3InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction_ggs3> ?!@galgasDeclarationAST ioDeclarations
                                   !@semanticInstructionAST outInstruction {
    $log$
    let instructionLocation = @location.here
    var @logListAST logList = @()
    repeat
      select
        $identifier$ ?let loggedVariableName
        logList += !loggedVariableName !@varInExpressionAST {!loggedVariableName}
      or
        $self$
        $.$
        $identifier$ ?let propertyName
        logList +=
         !propertyName
         !@structPropertyAccessExpressionAST {!propertyName.location !@selfInExpressionAST {!propertyName.location} !propertyName}
      or
        $"string"$ ?let logMessage
        $:$
        <expression_ggs3> !?ioDeclarations ?let logExpression
        logList += !logMessage !logExpression
      end
    while
      $,$
    end
    outInstruction = @logInstructionAST {
      !instructionLocation
      !logList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------

syntax extension galgas4InstructionsSyntax {

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

  rule <semantic_instruction> ?!@galgasDeclarationAST ioDeclarations
                              !@semanticInstructionAST outInstruction {
    $log$
    let instructionLocation = @location.here
    var @logListAST logList = @()
    repeat
      select
        $identifier$ ?let loggedVariableName
        logList += !loggedVariableName !@varInExpressionAST {!loggedVariableName}
      or
        $self$
        $.$
        $identifier$ ?let propertyName
        logList +=
         !propertyName
         !@structPropertyAccessExpressionAST {!propertyName.location !@selfInExpressionAST {!propertyName.location} !propertyName}
      or
        $"string"$ ?let logMessage
        $:$
        <expression> !?ioDeclarations ?let logExpression
        logList += !logMessage !logExpression
      end
    while
      $,$
    end
    outInstruction = @logInstructionAST {
      !instructionLocation
      !logList
    }
  }

  // - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

}

//--------------------------------------------------------------------------------------------------
//! CONTEXT
//--------------------------------------------------------------------------------------------------

override method @logInstructionAST enterInstructionInSemanticContext
  ?!@unifiedTypeMap ioTypeMap
{
  for (* mLogExpression) in self.mLogList do
    [mLogExpression enterExpressionInSemanticContext !?ioTypeMap]
  end
}

//--------------------------------------------------------------------------------------------------
//! SEMANTICS
//--------------------------------------------------------------------------------------------------

override method @logInstructionAST analyzeSemanticInstruction
  ?let @lstring inUsefulnessCallerEntityName
  ?!@usefulEntitiesGraph ioUsefulEntitiesGraph
  ?let @analysisContext inAnalysisContext
                                ?!@unifiedTypeMap ioTypeMap
  ?!@semanticInstructionListForGeneration ioInstructionListForGeneration
  ?!@localVarManager ioVariableMap {
  for (mLogMessage mLogExpression) in self.mLogList do
  //--- Analyze source expression
    [mLogExpression analyzeSemanticExpression
      !usefulnessCallerEntityName: inUsefulnessCallerEntityName
      !?ioUsefulEntitiesGraph
      !inferenceType: @unifiedTypeMapEntry.null
      !inAnalysisContext
      !?ioTypeMap
      !?ioVariableMap
      ?let expression
    ]
  //--- Generate instruction
    ioInstructionListForGeneration += !@logInstructionForGeneration {
      !mLogMessage
      !expression
    }
  end
}

//--------------------------------------------------------------------------------------------------
//! GENERATION
//--------------------------------------------------------------------------------------------------

class @logInstructionForGeneration : @semanticInstructionForGeneration {
  public let @lstring mLogMessage
  public let @semanticExpressionForGeneration mLogExpression
}

//································································································*

override method @logInstructionForGeneration generateInstruction
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?let @bool unused inGenerateSyntaxDirectedTranslationString
  ?!@string ioGeneratedCode
{
  [self.mLogExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?let @string logVar
  ]
  ioGeneratedCode += logVar + ".log (" + [self.mLogMessage utf8RepresentationEscapingQuestionMark]
  ioGeneratedCode += " " + [self.mLogMessage.location commaSourceFile] + ") ;\n"
}

//--------------------------------------------------------------------------------------------------
