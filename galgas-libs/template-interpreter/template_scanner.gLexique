#---------------------------------------------------------------------------*
#                                                                           *
#  GOIL template scanner definition                                         *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

template lexique template_scanner :

template "%" ... "%" ;

replace "\\%" -> "%" ;

replace "\\n" -> "\n" ;

replace "\\\\" -> "\\" ;

@string identifierString ;
@uint64 uint64value ;
@string tokenString ;

style keywordsStyle -> "Keywords" ;
style delimitersStyle -> "Delimiters" ;
style nonTerminalStyle -> "Non Terminal Symbols" ;
style integerStyle -> "Integer Constants" ;
style float_csts -> "Floating Point Constants" ;
style stringStyle -> "String literals";
style commentStyle -> "Comments" ;

# -------------------------- identifier or lkey word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier" ;

list goilTemplateKeyWordList error message "the '%K' keyword" style keywordsStyle :
  "after",
  "before",
  "between",
  "block",
  "by",
  "default",
  "display",
  "do",
  "else",
  "elsif",
  "emptylist",
  "emptymap",
  "end",
  "error",
  "exists",
  "false",
  "for",
  "foreach",
  "from",
  "here",
  "if",
  "in",
  "list",
  "let",
  "loop",
  "mapof",
  "mod",
  "no",
  "not",
  "or",
  "prefixedby",
  "sort",
  "template",
#  "templateresult",
  "then",
  "to",
  "true",
  "typeof",
  "yes",
  "warning",
  "while",
  "write";

rule 'a'->'z' |  'A'->'Z' :
  repeat
    enterCharacterIntoString !?identifierString !toLower (!*) ;
    enterCharacterIntoString !?tokenString !* ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send search identifierString in goilTemplateKeyWordList default $identifier$ ;
end rule ;

#------------------------------- Integer, floating Point Constant ------------------
@double floatValue ;
$literal_double$ !floatValue !tokenString error message "a float number" style float_csts ;
$unsigned_literal_integer64$ ! uint64value error message "a 64-bit unsigned decimal number" style integerStyle ;

message decimalNumberTooLarge : "decimal number too large" ;
message floatNumberConversionError : "invalid float number" ;
message internalError : "internal error" ;

rule '0'->'9' :
  enterCharacterIntoString !?tokenString !* ;
  repeat
  while '0'->'9' :
    enterCharacterIntoString !?tokenString !* ;
  while '_' :
  end repeat ;
  select
  when '.' :
    enterCharacterIntoString !?tokenString !'.' ;
    repeat
    while '0'->'9' :
      enterCharacterIntoString !?tokenString !* ;
    while '_' :
    end repeat ;
    convertStringToDouble !tokenString !?floatValue error floatNumberConversionError ;
    send $literal_double$ ;
  default
    convertDecimalStringIntoUInt64 !tokenString !?uint64value error decimalNumberTooLarge, internalError ;
    send $unsigned_literal_integer64$ ;
  end select ;
end rule ;


#------------------------------- Floating point Number ------------------
$.$ error message "the '.' delimitor" style delimitersStyle ;
$.=$ error message "the '.=' delimitor" style delimitersStyle ;
$...$ error message "the '...' delimitor" style delimitersStyle ;

#--- Floating Point constant begining with a dot
rule '.' :
  select
  when '0'->'9' :
    enterCharacterIntoString !?tokenString !'0' ;
    enterCharacterIntoString !?tokenString !'.' ;
    enterCharacterIntoString !?tokenString !* ;
    repeat
    while '0'->'9' :
      enterCharacterIntoString !?tokenString !* ;
    while '_' :
    end repeat ;
    convertStringToDouble !tokenString !?floatValue error floatNumberConversionError ;
    send $literal_double$ ;
  default
    select
    when ".." :
      send $...$ ;
    when "=" :
      send $.=$ ;
    default
      send $.$ ;
    end select ;
  end select ;
end rule ;

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList error message "the '%K' delimitor" style delimitersStyle :
  "*",     "|",    ",",      "+",     "--",
  "::",    ">",    ";",      ":",
  "-",     "(",    ")",     "->",      "?",
  "==",   "??",    "!",     ":=",     "++",
  "[",     "]",   "+=",     "?!",     "!?",
  "/",    "!=",   ">=",      "&",
  "{",     "}",   "+>",     "-=",
  "^",    ">>",    "~",     "<-",
  "@";

rule list galgasDelimitorsList ;


# --------- Special delimitors / non terminal symbol --------------------------
$<$ error message "the '<' delimitor" style delimitersStyle ;
$<=$ error message "the '<=' delimitor" style delimitersStyle ;
$<<$ error message "the '<<' delimitor" style delimitersStyle ;

rule '<' :
  select
  when '=' :
    send $<=$ ;
  when '<' :
    send $<<$ ;
  default
    send $<$ ;
  end select ;
end rule ;

# ------------------------------------ String ----------------------------

message unterminatedLitteralString : "Unterminated literal string"; 

@string a_string;

$string$ !a_string error message "literal string" style stringStyle;

rule '"' :
    repeat
    while '\u0020'->'\u0021' | '\u0023' -> '\uFFFD' :
        enterCharacterIntoString !?a_string !* ;
    end repeat;
    select
        when '"' :
            send $string$;
        default
            error unterminatedLitteralString;
    end select;
end rule;

# ------------------------------------ Comment ----------------------------
$comment$ error message "a comment" style commentStyle ;
rule '#' :
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end repeat ;
  drop $comment$ ;
end rule ;

# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' :
end rule ;

end lexique ;
