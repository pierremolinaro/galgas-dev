#---------------------------------------------------------------------------*
#                                                                           *
#  GOIL template invocation                                                 *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics template_invocation :
#--- Import for GALGAS 2
import "goil_routines.gSemantics";
import "template_semantics.gSemantics";
import "template_grammar.gGrammar";
import "goil_options.gOption";

#------------------------------------------------------------------------------*

once allowedFunctions -> @stringset outAllowedFunctionSet :
  outAllowedFunctionSet := [@stringset emptySet];
  outAllowedFunctionSet += !"testFunction";
  outAllowedFunctionSet += !"tasks";
  outAllowedFunctionSet += !"trueFalse";
  outAllowedFunctionSet += !"yesNo";
end once;


function fullPrefix
  ??@TfieldMap vars
  ??@lstring prefix
  ->@string full
:
  @string stringPrefix := [prefix string];
  if stringPrefix == "compiler" then
    @Ttype type;
    @Tvalue value;
    [vars searchKey !lstringWith[!"COMPILER"] ?type ?value];
    stringPrefix .= "/" . [value mStringValue];
  elsif stringPrefix == "linker" then
    @Ttype type;
    @Tvalue value;
    [vars searchKey !lstringWith[!"LINKER"] ?type ?value];
    stringPrefix .= "/" . [value mStringValue];
  elsif stringPrefix == "assembler" then
    @Ttype type;
    @Tvalue value;
    [vars searchKey !lstringWith[!"ASSEMBLER"] ?type ?value];
    stringPrefix .= "/" . [value mStringValue];
  end if;
  full := stringPrefix;
end function;


#------------------------------------------------------------------------------*
#                                                                              *
#  D I S P L A Y    T Y P E    A N D    V A L U E                              *
#                                                                              *
#------------------------------------------------------------------------------*

function displayTypeAndValue
  ??@Ttype inType
  ??@Tvalue inValue
  -> @string outResult
:
  switch inType
  when boolType :
    outResult := "bool: " . if [inValue mUnsigned64Value] == 1L then "yes" else "no" end;
  when unsignedType :
    outResult := "unsigned: " . [[inValue mUnsigned64Value] string];
  when stringType :
    outResult := "string: '" . [inValue mStringValue] . "'";
  when listType :
    outResult := "list, " . [[[inValue mMapListValue] length] string] . " element" . if [[inValue mMapListValue] length] > 1 then "s" else "" end . ":";
    foreach [inValue mMapListValue] index idx do
      outResult .= "\n  #" . [idx string] . ":";
      foreach mMap do
        outResult .= "'" . lkey . "' ";
        switch mType
        when boolType :
          outResult .= "bool: " . if [mValue mUnsigned64Value] == 1L then "yes" else "no" end;
        when unsignedType :
          outResult .= "unsigned: " . [[mValue mUnsigned64Value] string];
        when stringType :
          outResult .= "string: '" . [mValue mStringValue] . "'";
        when listType, structType, mapType :
        when enumType :
        when unconstructedType:
          error here: "internal error, unconstructed type found";
        end switch;
      between outResult .= ", ";
      end foreach;
    end foreach;
  when structType, mapType:
    outResult := "";
  when enumType:
    outResult := "";
  when unconstructedType:
    error here: "internal error, unconstructed type found" : outResult;
  end switch;
end function;

#------------------------------------------------------------------------------*

routine displayTemplateVariableMap
  ??@TfieldMap inTemplateVariableMap
:
  foreach inTemplateVariableMap do
    message "'" . lkey . "' " . displayTypeAndValue [!mType !mValue] . "\n";
  end foreach;
end routine;

routine displayPathList
  ??@stringlist pathList
:
  message " -----------------------------------------\n";
  foreach pathList do
    message " - '" . mValue . "'\n";
  end foreach;
  message " -----------------------------------------\n";
end routine;

#------------------------------------------------------------------------------*

routine findFileInHierarchy
  ??@string file
  ??@string rootPath
  ??@string searchPath
  ?!@stringlist searchedPathList
  ?!@bool found
  ?!@string fullPath
:
  @string partialPath := searchPath;
  loop [searchPath length]:
  while ([partialPath length] > 0) & not found do
    const @string fullFilePath := rootPath . "/" . partialPath . "/" . file;
    searchedPathList += !fullFilePath;
    found := [fullFilePath fileExists];
    if found then
      fullPath := fullFilePath;
    else
      partialPath := [partialPath stringByDeletingLastPathComponent];
    end if;
  end loop;
  if not found then
    const @string fullFilePath := rootPath . "/" . file;
    searchedPathList += !fullFilePath;
    found := [fullFilePath fileExists];
    if found then
      fullPath := fullFilePath;
    end if;
  end if;
end routine;

#------------------------------------------------------------------------------*

routine findAllFilesInHierarchy
  ??@string file
  ??@string rootPath
  ??@string searchPath
  ?!@stringlist searchedPathList
  ?!@stringlist fullPaths
:
  @string partialPath := searchPath;
  loop [searchPath length]:
  while ([partialPath length] > 0) do
    const @string fullFilePath := rootPath . "/" . partialPath . "/" . file;
    searchedPathList += !fullFilePath;
    if [fullFilePath fileExists] then
      fullPaths += !fullFilePath;
    end if;
    @string newPartialPath := [partialPath stringByDeletingLastPathComponent];
    if newPartialPath == partialPath then
      partialPath := "";
    else
      partialPath := newPartialPath;
    end if;
  end loop; 
  const @string fullFilePath := rootPath . "/" . file;
  searchedPathList += !fullFilePath;
  if [fullFilePath fileExists] then
    fullPaths += !fullFilePath;
  end if;
end routine;

#------------------------------------------------------------------------------*

routine findFileInPathList
  ??@string file
  ??@stringlist rootPathList
  ??@string searchPath
  !@stringlist searchedPathList
  !@bool found
  !@string fullPath
:
  searchedPathList := [@stringlist emptyList];
  found := false;
  fullPath := "";
  
  foreach rootPathList (@string rootPath) do
    findFileInHierarchy
      !file
      !rootPath
      !searchPath
      !?searchedPathList
      !?found
      !?fullPath
    ;
  end foreach;  
end routine;

#------------------------------------------------------------------------------*

routine findAllFilesInPathList
  ??@string file
  ??@stringlist rootPathList
  ??@string searchPath
  !@stringlist searchedPathList
  !@stringlist fullPaths
:
  searchedPathList := [@stringlist emptyList];
  fullPaths := [@stringlist emptyList];
  
  foreach rootPathList (@string rootPath) do
    findAllFilesInHierarchy
      !file
      !rootPath
      !searchPath
      !?searchedPathList
      !?fullPaths
    ;
  end foreach;  
end routine;

#------------------------------------------------------------------------------*

routine templateInvocation
  ??@lstring   inTemplateName
  ??@string    inPrefix
  ??@string    inPath
  ??@string    inTemplateDirectory
  ??@bool      inErrorIfNotFound
  ??@TfieldMap inTemplateVariableMap
  ?!@string    ioResultingString
  !@bool       outNoErrorOccured
:
  outNoErrorOccured := true;
  if [@uint errorCount] == 0 then
    const @string templateDir := inTemplateDirectory;
    if [templateDir length] == 0 then
      error inTemplateName:"the '--goil-templates' option or the environment variable GOIL_TEMPLATES is required for generating code";
    elsif not [templateDir directoryExists] then
      error inTemplateName:"the template path '" . templateDir . "' exists but is not a valid directory path";
    else
      const @string targetDir := [option goil_options.target_platform value];
      @string fullTemplateDir;
      if inPrefix == "" then
        fullTemplateDir := templateDir;
      else
        fullTemplateDir := templateDir . "/" . inPrefix;
      end if;
      if [targetDir length] == 0 then
        error inTemplateName:"the '--target' (or '-t') option is required for generating code";
      elsif not [fullTemplateDir directoryExists] then
        error inTemplateName: "internal. no '". fullTemplateDir . "' template found";
#      elsif not [templateDir . "/" . targetDir directoryExists] then
#        error inTemplateName:"the '--target' (or '-t') option value is '" . templateDir
#        . "', so the path formed with '--goil-templates' option is '"
#        . templateDir . "/" . targetDir
#        . "', but it is not a valid directory path";
      else
        @stringlist pathList [emptyList];
        @bool found := false;
        if inPath != "" then
          @string userTemplateDir;
          if inPrefix == "" then
            userTemplateDir := inPath;
          else
            userTemplateDir := inPath . "/" . inPrefix;
          end if;
          const @string fullTemplatePath := userTemplateDir . "/" . inTemplateName . ".goilTemplate";
          pathList += !fullTemplatePath;
          found := [fullTemplatePath fileExists];
          if found then
            #displayPathList !pathList;
            grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;
          end if;
        end if;
        @string targetTemplatePartialPath := targetDir;
        loop [targetDir length] :
        while ([targetTemplatePartialPath length] > 0) & not found
        do
          const @string fullTemplatePath := fullTemplateDir . "/" . targetTemplatePartialPath . "/" . inTemplateName . ".goilTemplate";
          pathList += !fullTemplatePath;
          found := [fullTemplatePath fileExists];
          if found then
            #displayPathList !pathList;
            grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;
          else
            targetTemplatePartialPath := [targetTemplatePartialPath stringByDeletingLastPathComponent];
          end if;
        end loop;
        if not found then
          const @string fullTemplatePath := fullTemplateDir . "/" . inTemplateName . ".goilTemplate";
          pathList += !fullTemplatePath;
          found := [fullTemplatePath fileExists];
          if found then
            #displayPathList !pathList;
            grammar template_grammar in [@lstring new !fullTemplatePath !here] !inPrefix !inPath !inTemplateDirectory !inTemplateVariableMap !?ioResultingString;
          end if;
        end if;
        if not found then
          outNoErrorOccured := false;
          if inErrorIfNotFound then
            @string m := "cannot find a valid path for the '" . inTemplateName . "' template; I have tried:";
            foreach pathList do
              m .= "\n  - '" . mValue . "';";
            end foreach;
            error inTemplateName :m;
          end if;
        end if;
      end if;
    end if;
  end if;
end routine;

#------------------------------------------------------------------------------*

end semantics;
