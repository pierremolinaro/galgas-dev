#----------------------------------------------------------------------------*#                                                                            *#  This file shows a dangling else problem solution.                         *#                                                                            *# From the book "COMPILATEURS, principes, techniques et outils", by Alfred   *# Aho, Ravi Sethi, Jeffrey Ullman, pages 200-201, grammaire 4.9.             *#                                                                            *#----------------------------------------------------------------------------*#----------------------------------------------------------------------------*#  S C A N N E R                                                             *#----------------------------------------------------------------------------*lexique dangling_else_solution_scanner :#--- Key wordslist keyWordList error message "the '%' key word" : "I", # IF EXPR THEN "E", # ELSE "O" ; # OTHER#--- Identifiers$id$ error message "an identifier" ;@lstring identifierString ;rule 'a'->'z' | 'A'->'Z' :  enterCharacterIntoString (identifierString, toLower (*)) ;  send search identifierString in keyWordList default $id$ ;end rule ;#--- Delimitorslist delimitorsList error message "the '%' delimitor" :  "+" , "*", "(", ")" ;rule list delimitorsList ;# --------------------- separators -----------------------------------------rule '\1' -> ' ' :end rule ;end lexique ;#----------------------------------------------------------------------------*#  P A R S E R                                                               *#----------------------------------------------------------------------------*syntax dangling_else_solution_parser :import lexique dangling_else_solution_scanner ;rule <S> ;rule <non_closed_instruction> ;rule <closed_instruction> ;rule <S> :  <non_closed_instruction> ;end rule ;rule <S> :  <closed_instruction> ;end rule ;rule <closed_instruction> : # Other instruction  $O$ ;end rule ;rule <closed_instruction> : # IF EXPR THEN <instruction> ELSE <instruction>  $I$ ;  <closed_instruction> ;  $E$ ;  <closed_instruction> ;end rule ;rule <non_closed_instruction> : # IF EXPR THEN <instruction>  $I$ ;  <S> ;end rule ;rule <non_closed_instruction> : # IF EXPR THEN <instruction> ELSE <instruction>  $I$ ;  <closed_instruction> ;  $E$ ;  <non_closed_instruction> ;end rule ;end syntax ;#----------------------------------------------------------------------------*#  G R A M M A R                                                             *#----------------------------------------------------------------------------*grammar dangling_else_solution_grammar "" : # Try LL(1), SLR# This grammar is not not LL(1), but SLR.  import lexique dangling_else_solution_scanner ;  import syntax dangling_else_solution_parser ;  start <S> ;end grammar ;#--------------------------------------------------------------------------------*