semantics method_call :#----------------------------------------------------------------------*routine mySecondMethod ??@location unused inParameter :end routine ;#----------------------------------------------------------------------*abstract class @myAbstractClass {  abstract reader myFirstMethod ??@location inParameter ;
  reader myMethod ??@location inParameter :    [self myFirstMethod !inParameter] ;  end reader ;}#----------------------------------------------------------------------*class @myClass extends @myAbstractClass {  override reader myMethod ??@location unused inParameter :  end reader ;  reader mySecondMethod ??@location unused inParameter :  end reader ;  override reader myFirstMethod ??@location inParameter :    [self mySecondMethod !inParameter] ; # Local method call    mySecondMethod !inParameter ; # Routine call    [self myMethod !inParameter] ; # method of this class call    [super myMethod !inParameter] ; # method of 'myAbstractClass' class call    [super myFirstMethod !inParameter] ; # error : the method is abstract (NOT DETECTED)  end reader ;}#----------------------------------------------------------------------*routine myAction :  @myAbstractClass c := [@myClass new] ;  @location currentLocation := here ;  [c myFirstMethod !currentLocation] ;  drop c ;end routine ;#----------------------------------------------------------------------*end semantics ;