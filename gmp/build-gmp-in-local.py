#! /usr/bin/env python
# -*- coding: UTF-8 -*-

#----------------------------------------------------------------------------------------------------------------------*

import sys, os, subprocess

#----------------------------------------------------------------------------------------------------------------------*
#   processorCount                                                                                                     *
#----------------------------------------------------------------------------------------------------------------------*

if sys.version_info >= (2, 6) :
  import multiprocessing


def processorCount () :
  if sys.version_info >= (2, 6) :
    coreCount = multiprocessing.cpu_count ()
  else:
    coreCount = 1
  return coreCount

#----------------------------------------------------------------------------------------------------------------------*
#   FOR PRINTING IN COLOR                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

def BLACK () :
  return '\033[90m'

#----------------------------------------------------------------------------------------------------------------------*

def RED () :
  return '\033[91m'

#----------------------------------------------------------------------------------------------------------------------*

def GREEN () :
  return '\033[92m'

#----------------------------------------------------------------------------------------------------------------------*

def YELLOW () :
  return '\033[93m'

#----------------------------------------------------------------------------------------------------------------------*

def BLUE () :
  return '\033[94m'

#----------------------------------------------------------------------------------------------------------------------*

def MAGENTA () :
  return '\033[95m'

#----------------------------------------------------------------------------------------------------------------------*

def CYAN () :
  return '\033[96m'

#----------------------------------------------------------------------------------------------------------------------*

def WHITE () :
  return '\033[97m'

#----------------------------------------------------------------------------------------------------------------------*

def ENDC () :
  return '\033[0m'

#----------------------------------------------------------------------------------------------------------------------*

def BOLD () :
  return '\033[1m'

#----------------------------------------------------------------------------------------------------------------------*

def UNDERLINE () :
  return '\033[4m'

#----------------------------------------------------------------------------------------------------------------------*

def BLINK () :
  return '\033[5m'

#----------------------------------------------------------------------------------------------------------------------*

def BOLD_BLUE () :
  return BOLD () + BLUE ()

#----------------------------------------------------------------------------------------------------------------------*

def BOLD_GREEN () :
  return BOLD () + GREEN ()

#----------------------------------------------------------------------------------------------------------------------*

def BOLD_RED () :
  return BOLD () + RED ()

#----------------------------------------------------------------------------------------------------------------------*
#   runCommand                                                                                                         *
#----------------------------------------------------------------------------------------------------------------------*

def runCommand (cmd) :
  cmdAsString = ""
  for s in cmd:
    if (s == "") or (s.find (" ") >= 0):
      cmdAsString += '"' + s + '" '
    else:
      cmdAsString += s + ' '
  print BOLD_BLUE () + cmdAsString + ENDC ()
  childProcess = subprocess.Popen (cmd)
  childProcess.wait ()
  if childProcess.returncode != 0 :
    sys.exit (childProcess.returncode)

#----------------------------------------------------------------------------------------------------------------------*
#    MAIN                                                                                                              *
#----------------------------------------------------------------------------------------------------------------------*

GMP_VERSION = "6.0.0"
GMP_SUFFIXE = "a"

#----------------------------------------------------------------- Get script absolute path
scriptDir = os.path.dirname (os.path.abspath (sys.argv [0]))
os.chdir (scriptDir)
#----------------------------------------------------------------- Build
INSTALL_DIR = scriptDir + "/GMP-PRODUCT"
GMP_NAME = "gmp-"
GMP_DIR =  GMP_NAME + GMP_VERSION
GMP_TARFILE = GMP_DIR + GMP_SUFFIXE + ".tar"
GMP_ARCHIVE = GMP_TARFILE + ".bz2"
runCommand (["rm", "-fr", GMP_DIR])
runCommand (["rm", "-f", GMP_TARFILE])
runCommand (["bunzip2", "-k", GMP_ARCHIVE])
runCommand (["tar", "xf", GMP_TARFILE])
runCommand (["rm", "-f", GMP_TARFILE])
os.chdir (scriptDir + "/" + GMP_DIR)
runCommand (["./configure", "--prefix=" + INSTALL_DIR])
runCommand (["make", "-j" + str (processorCount ())])
runCommand (["make", "install"])
runCommand (["make", "check"])
os.chdir (scriptDir)
runCommand (["rm", "-fr", GMP_DIR])

#----------------------------------------------------------------------------------------------------------------------*
