syntax assignment_language_syntax ("assignment_language_lexique.gLexique") :
import "assignment_language_options.gOption" ;
import "typesForAST.gSemantics" ;

#----------------------------------------------------------------------------*

rule <expression> !@expressionAST outExpressionAST :
  <expression_term> ?outExpressionAST ;
  repeat
  while
    $+$ ;
    @expressionAST rightExpression ;
    <expression_term> ?rightExpression ;
    outExpressionAST := [@additionAST new
      !outExpressionAST
      !rightExpression
    ] ;
  end repeat ;
end rule ;

#----------------------------------------------------------------------------*

rule <expression_term> !@expressionAST outExpressionAST :
  <expression_factor> ?outExpressionAST ;
  repeat
  while
    $*$ ;
    @expressionAST rightExpression ;
    <expression_factor> ?rightExpression ;
    outExpressionAST := [@multiplicationAST new
      !outExpressionAST
      !rightExpression
    ] ;
  end repeat ;
end rule ;

#----------------------------------------------------------------------------*

rule <expression_factor> !@expressionAST outExpressionAST :
  select
    $($ ;
    <expression> ?outExpressionAST ;
    $)$ ;
  or
    $identifier$ ? @lstring varName ;
    outExpressionAST := [@varInExpressionAST new !varName] ;
  or
    $unsigned_literal_integer$ ? @luint constant ;
    outExpressionAST := [@cstInExpressionAST new !constant] ;
  end select ;
end rule ;


rule <instruction> ?!@instructionListAST ioInstructionList :
  $int$ ;
  $identifier$ ? @lstring varName ;
  $;$ ;
  ioInstructionList += ![@varDeclarationAST new !varName] ;
end rule ;

rule <instruction> ?!@instructionListAST ioInstructionList :
  $identifier$ ? @lstring targetVarName ;
  $:=$ ;
  @expressionAST expression ;
  <expression> ? expression ;
  $;$ ;
  ioInstructionList += ![@assignmentAST new !targetVarName !expression] ;
end rule ;

rule <instruction> ?!@instructionListAST ioInstructionList :
  $print$ ;
  $identifier$ ? @lstring targetVarName ;
  $;$ ;
  ioInstructionList += ![@printVariableAST new !targetVarName] ;
end rule ;

rule <start_symbol> !@programAST programAST :
  @instructionListAST programInstructionList [emptyList] ;
  repeat
  while 
    <instruction> !?programInstructionList ;
  end repeat ;
  $end$ ;
  programAST := [@programAST new !programInstructionList] ;
end rule ;

end syntax ;
