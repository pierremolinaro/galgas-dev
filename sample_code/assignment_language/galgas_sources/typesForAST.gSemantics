semantics typesForAST :
  import "assignment_language_options.gOption" ;

abstract class @expressionAST {
}

class @varInExpressionAST extends @expressionAST {
  @lstring mVarName ;
}

class @cstInExpressionAST extends @expressionAST {
  @luint mConstant ;
}

class @additionAST extends @expressionAST {
  @expressionAST mLeftExpression ;
  @expressionAST mRightExpression ;
}

class @multiplicationAST extends @expressionAST {
  @expressionAST mLeftExpression ;
  @expressionAST mRightExpression ;
}

abstract class @instructionAST {
}

list @instructionListAST {
  @instructionAST mInstruction ;
}

class @assignmentAST extends @instructionAST {
  @lstring mTargetVarName ;
  @expressionAST mSourceExpression ;
}

struct @programAST {
  @instructionListAST mProgramInstructionList ;
}

class @varDeclarationAST extends @instructionAST {
  @lstring mVarName ;
}

class @printVariableAST extends @instructionAST {
  @lstring mVarName ;
}

#---------------------------------------------------------------------------*

end semantics ;
