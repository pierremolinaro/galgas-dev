syntax assignment_language_syntax (assignment_language_lexique) {

#----------------------------------------------------------------------------*

rule <expression> !@expressionAST outExpressionAST {
  <expression_term> ?outExpressionAST
  repeat
  while
    $+$
    <expression_term> ?let rightExpression
    outExpressionAST = @additionAST.new {
      !outExpressionAST
      !rightExpression}
  end
}

#----------------------------------------------------------------------------*

rule <expression_term> !@expressionAST outExpressionAST {
  <expression_factor> ?outExpressionAST
  repeat
  while
    $*$
    <expression_factor> ?let rightExpression
    outExpressionAST = @multiplicationAST.new {
      !outExpressionAST
      !rightExpression}
  end
}

#----------------------------------------------------------------------------*

rule <expression_factor> !@expressionAST outExpressionAST {
  select
    $($
    <expression> ?outExpressionAST
    $)$
  or
    $identifier$ ?let @lstring varName
    outExpressionAST = @varInExpressionAST.new { !varName}
  or
    $uint32$ ?let @luint constant
    outExpressionAST = @cstInExpressionAST.new { !constant}
  end
}


rule <instruction> ?!@instructionListAST ioInstructionList {
  $int$
  $identifier$ ?let @lstring varName
  $;$
  ioInstructionList += !@varDeclarationAST.new { !varName}
}

rule <instruction> ?!@instructionListAST ioInstructionList {
  $identifier$ ?let @lstring targetVarName
  $:=$
  <expression> ?let expression
  $;$
  ioInstructionList += !@assignmentAST.new { !targetVarName !expression}
}

rule <instruction> ?!@instructionListAST ioInstructionList {
  $print$
  $identifier$ ?let @lstring targetVarName
  $;$
  ioInstructionList += !@printVariableAST.new { !targetVarName}
}

rule <start_symbol> !@programAST programAST {
  var programInstructionList =@instructionListAST {}
  repeat
  while 
    <instruction> !?programInstructionList
  end
  $end$
  programAST = @programAST.new { !programInstructionList !@location.here}
}

}