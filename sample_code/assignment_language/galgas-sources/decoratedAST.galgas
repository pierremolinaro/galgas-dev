

abstract shared class @expressionForGeneration {
}

shared class @varInExpressionForGeneration : @expressionForGeneration {
  @string mVarCppName
}

shared class @cstInExpressionForGeneration : @expressionForGeneration {
  @uint mConstantValue
}

enum @diadicOperation {
 case addition  case multiplication
}

shared class @diadicForGeneration : @expressionForGeneration {
  @expressionForGeneration mLeftExpression
  @diadicOperation mOperation
  @expressionForGeneration mRightExpression
}

abstract shared class @instructionForGeneration {
}

list @instructionListForGeneration {
  @instructionForGeneration mInstruction
}

shared class @assignmentForGeneration : @instructionForGeneration {
  @string mTargetVarCppName
  @expressionForGeneration mSourceExpression
}

shared class @varDeclarationForGeneration : @instructionForGeneration {
  @string mVarCppName
}

shared class @printVariableForGeneration : @instructionForGeneration {
  @string mSourceName
  @string mVarCppName
}

#---------------------------------------------------------------------------*

shared map @variableMap {
  @string mCppName

#--- Variable states
  state declaredState warning "the '%K' variable is unused" {
    readAccess      -> declaredState error "this variable has no value, it cannot be read"
    writeAccess     -> assignedState
  }

  state assignedState warning "the '%K' variable value has not been read" {
    readAccess      -> assignedAndReadState
    writeAccess     -> assignedState warning "the previous value has not been read"
  }

  state assignedAndReadState {
    readAccess      -> assignedAndReadState
    writeAccess     -> assignedState
  }

  insert declareVariable state declaredState error message "redefinition of '%K' variable"

  search searchForReadAccess do readAccess error message "the '%K' variable is not declared"
  search searchForWriteAccess do writeAccess error message "the '%K' variable is not declared"

}

#---------------------------------------------------------------------------*

abstract method @instructionAST semanticAnalysis
  ?!@variableMap ioVariableMap
  ?!@instructionListForGeneration ioInstructionListForGeneration

#---------------------------------------------------------------------------*

override method @varDeclarationAST semanticAnalysis
  ?!@variableMap ioVariableMap
  ?!@instructionListForGeneration ioInstructionListForGeneration {
  let @string cppName = "var_" + [self.mVarName identifierRepresentation] + "_" + [self.mVarName.location locationIndex]
  [!?ioVariableMap declareVariable !self.mVarName !cppName]
  ioInstructionListForGeneration += !@varDeclarationForGeneration.new { !cppName}
}

#---------------------------------------------------------------------------*

override method @printVariableAST semanticAnalysis
  ?!@variableMap ioVariableMap
  ?!@instructionListForGeneration ioInstructionListForGeneration {
  @string cppName
  [!?ioVariableMap searchForReadAccess !self.mVarName ?cppName]
  ioInstructionListForGeneration += !@printVariableForGeneration.new { ![self.mVarName string] !cppName}
}

#---------------------------------------------------------------------------*

override method @assignmentAST semanticAnalysis
  ?!@variableMap ioVariableMap
  ?!@instructionListForGeneration ioInstructionListForGeneration {
#--- Expression
  @expressionForGeneration expression
  [self.mSourceExpression expSemanticAnalysis !?ioVariableMap ?expression]
#--- Target variable
  @string cppName
  [!?ioVariableMap searchForWriteAccess !self.mTargetVarName ?cppName]
#---
  ioInstructionListForGeneration += !@assignmentForGeneration.new { !cppName !expression}
}

#---------------------------------------------------------------------------*

abstract method @expressionAST expSemanticAnalysis
  ?!@variableMap ioVariableMap
  !@expressionForGeneration outExpression

#---------------------------------------------------------------------------*

override method @varInExpressionAST expSemanticAnalysis
  ?!@variableMap ioVariableMap
  !@expressionForGeneration outExpression {
  @string cppName
  [!?ioVariableMap searchForReadAccess !self.mVarName ?cppName]
  outExpression = @varInExpressionForGeneration.new { !cppName}
}

#---------------------------------------------------------------------------*

override method @cstInExpressionAST expSemanticAnalysis
  ?!@variableMap unused ioVariableMap
  !@expressionForGeneration outExpression {
  outExpression = @cstInExpressionForGeneration.new { ![self.mConstant uint]}
}

#---------------------------------------------------------------------------*

override method @additionAST expSemanticAnalysis
  ?!@variableMap ioVariableMap
  !@expressionForGeneration outExpression {
#--- Left expression
  @expressionForGeneration leftExpression
  [self.mLeftExpression expSemanticAnalysis !?ioVariableMap ?leftExpression]
#--- Right expression
  @expressionForGeneration rightExpression
  [self.mRightExpression expSemanticAnalysis !?ioVariableMap ?rightExpression]
#---
  outExpression = @diadicForGeneration.new {
    !leftExpression
    !@diadicOperation. addition
    !rightExpression}
}

#---------------------------------------------------------------------------*

override method @multiplicationAST expSemanticAnalysis
  ?!@variableMap ioVariableMap
  !@expressionForGeneration outExpression {
#--- Left expression
  @expressionForGeneration leftExpression
  [self.mLeftExpression expSemanticAnalysis !?ioVariableMap ?leftExpression]
#--- Right expression
  @expressionForGeneration rightExpression
  [self.mRightExpression expSemanticAnalysis !?ioVariableMap ?rightExpression]
#---
  outExpression = @diadicForGeneration.new {
    !leftExpression
    !@diadicOperation. multiplication
    !rightExpression}
}

#---------------------------------------------------------------------------*

