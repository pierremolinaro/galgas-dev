program lbb_program :
import "lbb_semantics.gSemantics" ;
import "lbb_grammar.gGrammar" ;

#--- Prologue routine
before {
}

#--- 'when' clauses
when . "lbb"
message "a source text file with the .lbb extension"
??@lstring inSourceFile {
#--- Build AST
  @programAST programAST ;
  grammar lbb_grammar in inSourceFile ?programAST ;
#--- Build box type map
  @boxTypeMap boxTypeMap [emptyMap] ;
  foreach [programAST mBoxTypeListAST] do
    @stringset portStringSet [emptySet] ;
    foreach mPortNameList do
      if [portStringSet hasKey !mValue->string] then
        error mValue : "the '" . mValue . "' port is already declared" ;
      end if ;
      portStringSet += !mValue->string ;
    end foreach ;
    [!?boxTypeMap insertKey !mBoxTypeName !mPortNameList] ;
  end foreach ;
#--- Build box map and connections
  @boxInstanceMap boxInstanceMap [emptyMap] ;
  foreach [programAST mBoxInstanceListAST] do
    @lstringlist portNameList ;
    [boxTypeMap searchKey !mBoxTypeName ?portNameList] ;
    if [portNameList length] != [mConnectionList length] then
      error mBoxInstanceName: "this instance names " . [mConnectionList length]
      . " connection(s), although the '" . mBoxTypeName . "' type declares "
      . [portNameList length] . " ports" ;
    end if ;
    @connectionMap connectionMap [emptyMap] ;
    foreach portNameList, mConnectionList do
      @boxInstanceProxy connectedBoxProxy ;
      [@boxInstanceProxy makeProxy !?boxInstanceMap !mConnectedBoxName ?connectedBoxProxy] ;
      [!?connectionMap insertKey !mValue !connectedBoxProxy !mOppositePortName] ;
    end foreach ;
    [!?boxInstanceMap insertKey !mBoxInstanceName !connectionMap] ;
  end foreach ;
#--- Raise an error for every undefined box
  foreach [boxInstanceMap unsolvedProxyList] do
    error mValue : "the '" . mValue . "' box is not defined" ;
  end foreach ;
#--- Check connections
  if [@uint errorCount] == 0 then
    foreach boxInstanceMap prefixedby box_ do
      foreach box_mConnectionMap do
        @connectionMap oppositeConnectionMap := [mBoxProxy mConnectionMap] ;
        @boxInstanceProxy oppositeOfOppositeBox ;
        @lstring myPortName ;
        [oppositeConnectionMap searchKey !mOppositePortName ?oppositeOfOppositeBox ?myPortName] ;
        if [oppositeOfOppositeBox key] != box_lkey->string then
          error mOppositePortName : "the opposite connection does not name this box, but '" . [oppositeOfOppositeBox key] . "' box" ;
        elsif lkey->string != myPortName->string then
          error myPortName : "the opposite connection does not name this port" ;
        end if ;
      end foreach ;
    end foreach ;
  end if ;
}

#--- Epilogue routine
after {
}

#---

end program ;
