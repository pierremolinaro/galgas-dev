program class_sample_language_program :
import "class_sample_language_grammar.gGrammar" ;
import "class_sample_language_semantics.gSemantics" ;

before {
}

when . "class_sample_language"
message "an '.class_sample_language' source file"
indexing with class_sample_language_grammar
??@lstring inSourceFile {
#--- Build Abstract Syntax Tree
  @declarationListAST declarationListAST ;
  grammar class_sample_language_grammar in inSourceFile
    ?declarationListAST
  ;
#--- Build dependence graph
  @inheritanceGraph inheritanceGraph [emptyGraph] ;
  foreach declarationListAST do
    [mDeclaration buildGraph !?inheritanceGraph] ;
  end foreach ;
#--- Undefined classes ?
  if [inheritanceGraph undefinedNodeCount] > 0 then
    foreach [inheritanceGraph undefinedNodeReferenceList] do
      error mValue : "the '" . mValue . "' class is not declared" ;
    end foreach ;
  else
  #--- Topologic sort
    [inheritanceGraph topologicalSort
      ??@declarationListAST sortedDeclarationListAST
      ?*
      ?*
      ??@lstringlist circularDefinitionClassNameList
    ] ;
    if [circularDefinitionClassNameList length] > 0 then
      foreach circularDefinitionClassNameList do
        error mValue : "the '" . mValue . "' class is involved in a circular definition" ;
      end foreach ;
    else
    #--- Generate code
      @string codeToGenerate := "" ;
      foreach sortedDeclarationListAST do
        [mDeclaration generateCode !?codeToGenerate] ;
      end foreach ;
      const @string targetFile := [inSourceFile stringByDeletingPathExtension] . ".cpp" ;
      [codeToGenerate writeToFile !targetFile] ;
    end if ;
  end if ;
}

after {
}

end program ;
