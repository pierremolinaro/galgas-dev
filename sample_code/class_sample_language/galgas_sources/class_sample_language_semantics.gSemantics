semantics class_sample_language_semantics :

abstract class @declarationAST {
}

list @declarationListAST {
  @declarationAST mDeclaration ;
}

class @classWithoutSuperClassAST extends @declarationAST {
  @lstring mClassName ;
}

class @classWithSuperClassAST extends @declarationAST {
  @lstring mClassName ;
  @lstring mSuperClassName ;
}


graph @inheritanceGraph (@declarationListAST) {
  insert addNode error message "the '%K' class is already declared" ;
}

abstract method @declarationAST buildGraph
  ?!@inheritanceGraph ioGraph
;

override method @classWithoutSuperClassAST buildGraph
  ?!@inheritanceGraph ioGraph
:
  [!?ioGraph addNode !mClassName !selfcopy] ;
end method ;

override method @classWithSuperClassAST buildGraph
  ?!@inheritanceGraph ioGraph
:
  [!?ioGraph addNode !mClassName !selfcopy] ;
  [!?ioGraph addEdge  !mClassName !mSuperClassName] ;
end method ;


abstract method @declarationAST generateCode
  ?!@string ioCodeToGenerate
;

override method @classWithoutSuperClassAST generateCode
  ?!@string ioCodeToGenerate
:
  ioCodeToGenerate .= "class " . mClassName . " { } ;\n" ;
end method ;

override method @classWithSuperClassAST generateCode
  ?!@string ioCodeToGenerate
:
  ioCodeToGenerate .= "class " . mClassName . " : " . mSuperClassName . " { } ;\n" ;
end method ;

end semantics ;
