syntax pascal_syntax ("pascal_lexique.gLexique") :
import "pascal_options.gOption" ;
import "pascal_AST.gSemantics" ;

#----------------------------------------------------------------------------*

#nonterminal <start_symbol> !@pascalProgramAST outPascalProgramAST ;
#
#nonterminal <declaration_list> ?!@declarationListAST ioDeclarationListAST ;
#
#nonterminal <declaration> ?!@declarationListAST ioDeclarationListAST ;
#
#nonterminal <instruction_list> ?!@instructionListAST ioInstructionListAST ;
#
#nonterminal <instruction> ?!@instructionListAST ioInstructionListAST ;
#
#nonterminal <expression> !@expressionAST outExpressionAST ;
#
#nonterminal <expression_term> !@expressionAST outExpressionAST ;
#
#nonterminal <expression_factor> !@expressionAST outExpressionAST ;

#----------------------------------------------------------------------------*

rule <expression> !@expressionAST outExpressionAST :
  <expression_term> ?outExpressionAST ;
  repeat
  while
    $+$ ;
    @expressionAST rightExpression ;
    <expression_term> ?rightExpression ;
    outExpressionAST := [@additionAST new
      !outExpressionAST
      !rightExpression
    ] ;
  end repeat ;
end rule ;

#----------------------------------------------------------------------------*

rule <expression_term> !@expressionAST outExpressionAST :
  <expression_factor> ?outExpressionAST ;
  repeat
  while
    $*$ ;
    @expressionAST rightExpression ;
    <expression_factor> ?rightExpression ;
    outExpressionAST := [@multiplicationAST new
      !outExpressionAST
      !rightExpression
    ] ;
  end repeat ;
end rule ;

#----------------------------------------------------------------------------*

rule <expression_factor> !@expressionAST outExpressionAST :
  select
    $($ ;
    <expression> ?outExpressionAST ;
    $)$ ;
  or
    $identifier$ ? @lstring varName ;
    outExpressionAST := [@varInExpression new !varName] ;
  end select ;
end rule ;

#----------------------------------------------------------------------------*

rule <instruction_list>
  ?!@instructionListAST ioInstructionListAST
:
  repeat
  while
    <instruction> !?ioInstructionListAST ;
  end repeat ;
end rule ;

#----------------------------------------------------------------------------*

rule <instruction> # Assignment
  ?!@instructionListAST ioInstructionListAST
:
  $identifier$ ? @lstring targetVarName ;
  $:=$ ;
  @expressionAST expression ;
  <expression> ?expression ;
  ioInstructionListAST += ![@assignmentAST new
    !targetVarName
    !expression
  ] ;
  $;$ ;
end rule ;

#----------------------------------------------------------------------------*

rule <declaration_list>
  ?!@declarationListAST ioDeclarationListAST
:
  repeat
  while
    <declaration> !?ioDeclarationListAST ;
  end repeat ;
end rule ;

#----------------------------------------------------------------------------*

rule <declaration>
  ?!@declarationListAST ioDeclarationListAST
:
  $type$ ;
  $identifier$ ? @lstring recordTypeName ;
  $=$ ;
  $record$ ;
  @recordFieldList recordFieldList [emptyList] ;
  repeat
    $identifier$ ? @lstring fieldName ;
    $:$ ;
    $identifier$ ? @lstring fieldType ;
    recordFieldList += !fieldType !fieldName ;
  while
    $;$ ;
  end repeat ;
  $end$ ;
  $;$ ;
  ioDeclarationListAST += ![@recordDeclarationAST new
    !recordTypeName
    !recordFieldList
  ] ;
end rule ;

#----------------------------------------------------------------------------*

rule <start_symbol> !@pascalProgramAST outPascalProgramAST :
  $program$ ;
  @declarationListAST declarationList [emptyList] ;
  <declaration_list> !?declarationList ;
  @instructionListAST programInstructionList [emptyList] ;
  $begin$ ;
  <instruction_list> !?programInstructionList ;
  $end$ ;
  $.$ ;
  outPascalProgramAST := [@pascalProgramAST new
    !declarationList
    !programInstructionList
  ] ;
end rule ;

#----------------------------------------------------------------------------*

end syntax ;
