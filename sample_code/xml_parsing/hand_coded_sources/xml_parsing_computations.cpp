//---------------------------------------------------------------------------*
//                                                                           *
//                             xml_parsing Project                           *
//                   Generated by GALGAS Project Creation                    *
//                      march 29th, 2008, at 21h55'21"                       *
//                                                                           *
//---------------------------------------------------------------------------*

#include "xml_parsing_semantics.h"
#include "utilities/MF_MemoryControl.h"
#include "tiny_xml/tinyxml.h"

//---------------------------------------------------------------------------*

static void handleNode (const TiXmlNode * inNode, const sint32 inIndendation) {
  for (sint32 i=0 ; i<inIndendation ; i++) {
    printf ( " ") ;
  }
  switch (inNode->Type ()) {
  case TiXmlNode::ELEMENT:
    { printf ("ELEMENT '%s' {", inNode->Value ()) ;
      const TiXmlElement * element = inNode->ToElement () ;
      const TiXmlAttribute * attribute = element->FirstAttribute() ;
      while (NULL != attribute) {
        const char * name = attribute->Name () ;
        const char * value = attribute->Value () ;
        printf ("'%s'->'%s'", name, value) ;
        attribute = attribute->Next () ;
        if (NULL != attribute) {
          printf (", ") ;
        }
      }
      printf ("}\n") ;  
      const TiXmlNode * child = element->FirstChild ()  ;
      while (NULL != child) {
        handleNode (child, inIndendation + 1) ;
        child = child->NextSibling () ;
      }
    } break ;
  case TiXmlNode::DOCUMENT : printf ("\n") ; exit (0) ;
    break ;
    break ;
  case TiXmlNode::DECLARATION:
    { const TiXmlDeclaration * declaration = inNode->ToDeclaration () ;
      printf ("DECLARATION version '%s', encoding '%s', standalone '%s'\n",
              declaration->Version (),
              declaration->Encoding (),
              declaration->Standalone ()) ;
    }
    break ;
  case TiXmlNode::COMMENT :
    printf ("COMMENT '%s'\n", inNode->Value ()) ;
    break ;
  case TiXmlNode::TEXT:
    printf ("TEXT '%s'\n", inNode->Value ()) ;
    break ;
  default: 
    printf ("UNKNOWN\n") ;
    exit (1) ;
    break ;
  }
}

//---------------------------------------------------------------------------*

void routine_temporaryParseXML (C_Compiler & /* inCompiler */,
                                const GGS_lstring inSourceFileName
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (inSourceFileName._isBuilt ()) {
    TiXmlDocument doc (inSourceFileName.cString ()) ;
    const bool ok = doc.LoadFile () ;
    if (ok) {
      const TiXmlNode * node = doc.FirstChild () ;
      while (NULL != node) {
        handleNode (node, 0) ;
        node = node->NextSibling () ;
      }
      printf ("***********\n") ;
    }else{
      printf ("XML error %d\n", doc.ErrorId ()) ;
    }
  }
}

//---------------------------------------------------------------------------*

