template lexique xml_parsing_lexique {

template "<"  %preserved ... ""

replace "&amp;" -> "&"
replace "&lt;" -> "<"
replace "&gt;" -> ">"
replace "&quot;" -> "\""
replace "&apos;" -> "'"
replace "&#" ... ";" : codePointToUnicode

style delimitersStyle -> "Delimiter"
style nameStyle -> "Name"
style attributeValue -> "Attribute value"
style commentStyle -> "Comment"
style textStyle -> "Text"

@string tokenString

//------------------------- comment  --------------------

$comment$ ! tokenString  style commentStyle %templateEndMark error message "a comment"

message incorrectCommentError : "incorrect XML comment"

rule "<!--" {
  repeat
  while "&amp;" :
    enterCharacterIntoString (!?tokenString !'&' )
  while "&lt;" :
    enterCharacterIntoString (!?tokenString !'<' )
  while "&gt;" :
    enterCharacterIntoString (!?tokenString !'>' )
  while "&quot;" :
    enterCharacterIntoString (!?tokenString !'"' )
  while "&apos;" :
    enterCharacterIntoString (!?tokenString !''' )
  while '\u0001' -> ',' | '.' -> '\U0010FFFF' :
    enterCharacterIntoString (!?tokenString !* )
  while ~ "-->" error incorrectCommentError :
    enterCharacterIntoString (!?tokenString !'-' )
  end
  send $comment$
}

// ---------------------------- Delimiters ---------------------------------------
list xmlDelimitorsList style delimitersStyle error message "the '%K' delimitor"{
  "<",
  "<?",
  ">" %templateEndMark,
  "?>" %templateEndMark,
  "/>" %templateEndMark,
  "</",
  "=" }

rule list xmlDelimitorsList

//------------------------- name  --------------------

$name$ ! tokenString  style nameStyle error message "a name"

rule isUnicodeLetter {
  repeat
    enterCharacterIntoString (!?tokenString !* )
  while isUnicodeLetter | '0'->'9' :
  end
  send $name$
}

//------------------------- Attribute value  --------------------

$value$ ! tokenString  style attributeValue error message "an attribute value"

message incorrectAttributeEnd : "attribute value should be enclosed between apostrophes (') or quotation marks (\")"

rule '"' {
  repeat
  while "&amp;" :
    enterCharacterIntoString (!?tokenString !'&' )
  while "&lt;" :
    enterCharacterIntoString (!?tokenString !'<' )
  while "&gt;" :
    enterCharacterIntoString (!?tokenString !'>' )
  while "&quot;" :
    enterCharacterIntoString (!?tokenString !'"' )
  while "&apos;" :
    enterCharacterIntoString (!?tokenString !''' )
  while ~ "\"" error incorrectAttributeEnd :
    enterCharacterIntoString (!?tokenString !* )
  end
  send $value$
}

rule ''' {
  repeat
  while "&amp;" :
    enterCharacterIntoString (!?tokenString !'&' )
  while "&lt;" :
    enterCharacterIntoString (!?tokenString !'<' )
  while "&gt;" :
    enterCharacterIntoString (!?tokenString !'>' )
  while "&quot;" :
    enterCharacterIntoString (!?tokenString !'"' )
  while "&apos;" :
    enterCharacterIntoString (!?tokenString !''' )
  while ~ "'" error incorrectAttributeEnd :
    enterCharacterIntoString (!?tokenString !* )
  end
  send $value$
}

// -------------------- separators -----------------------------------------
rule '\u0001' -> ' ' {
}

//---------------------------------------------------------------------------*

}
