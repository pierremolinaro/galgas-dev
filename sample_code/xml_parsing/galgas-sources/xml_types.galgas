

#------------------------------------------------------------*

enum @xmlNodeType {
  case element  case text  case comment
}

#------------------------------------------------------------*

map @xmlAttributeMap {
  public let @lstring value
  %insertSetter insertKey %errorMessage "the '%K' attribute has been already declared"
  %searchMethod searchKey %errorMessage "the '%K' attribute is not declared"
}

#------------------------------------------------------------*

refclass @xmlNode {
  public let @xmlNodeType mType
  public let @string name
  public let @xmlAttributeMap attributeMap
  public let @xmlNodeList nodeList
}

#------------------------------------------------------------*

list @xmlNodeList {
  public let @xmlNode node
}

#------------------------------------------------------------*

proc internal_logXMLNodes
  ?let @xmlNodeList inNodeList
  ?let @string inIndentationString
  ?!@string ioString {
  for (node) in  inNodeList do
    ioString += inIndentationString
    switch node.mType
    case element :
      ioString+= "ELEMENT '" + node.name + "' {"
      for (lkey value) in  node.attributeMap do
        ioString += "'" + lkey + "' "
        ioString += [[lkey.location line] string]
        ioString += ":" + [[lkey.location column] string]
        ioString += ":" + [[lkey.location locationIndex] string]
        ioString += " -> '" + value + "' "
        ioString += [[value.location line] string]
        ioString += ":" + [[value.location column] string]
        ioString += ":" + [[value.location locationIndex] string]
      between ioString += ", "
      end
      ioString += "}\n"
      internal_logXMLNodes (!node.nodeList ! inIndentationString + " " !?ioString )
    case text :
      ioString += "TEXT '" + node.name + "'\n"
    case comment :
      ioString+= "COMMENT '" + node.name + "'\n"
    end
  end
}

#------------------------------------------------------------*

proc logXMLNodes ?let @xmlNodeList inNodeList {
  var @string s = ""
  internal_logXMLNodes (!inNodeList !"" !?s )
  print (!s)
}

#------------------------------------------------------------*

