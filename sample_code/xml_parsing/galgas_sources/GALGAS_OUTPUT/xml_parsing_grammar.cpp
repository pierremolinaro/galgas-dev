//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'xml_parsing_grammar.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                        may 5th, 2009, at 10h46'2"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include "xml_parsing_grammar.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_parsing_grammar.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              L L ( 1 )    P R O D U C T I O N    R U L E S                *
//                                                                           *
//---------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const sint16 gProductions [] = {
// At index 0 : <element>, in file 'xml_parsing_syntax.ggs', line 126
  TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_comment) // $comment$
, END_PRODUCTION
// At index 2 : <element>, in file 'xml_parsing_syntax.ggs', line 160
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C) // $<$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) // $name$
, NONTERMINAL (5) // <select_repeat_xml_parsing_syntax_2>
, NONTERMINAL (6) // <select_xml_parsing_syntax_3>
, END_PRODUCTION
// At index 7 : <element_list>, in file 'xml_parsing_syntax.ggs', line 99
, NONTERMINAL (4) // <select_repeat_xml_parsing_syntax_1>
, END_PRODUCTION
// At index 9 : <start_symbol>, in file 'xml_parsing_syntax.ggs', line 32
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C_3F) // $<?$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) // $name$
, NONTERMINAL (3) // <select_repeat_xml_parsing_syntax_0>
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3F_3E) // $?>$
, NONTERMINAL (1) // <element_list>
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 15 : <select_repeat_xml_parsing_syntax_0>, in file 'xml_parsing_syntax.ggs', line 46
, END_PRODUCTION
// At index 16 : <select_repeat_xml_parsing_syntax_0>, in file 'xml_parsing_syntax.ggs', line 46
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) // $name$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3D) // $=$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_value) // $value$
, NONTERMINAL (3) // <select_repeat_xml_parsing_syntax_0>
, END_PRODUCTION
// At index 21 : <select_repeat_xml_parsing_syntax_1>, in file 'xml_parsing_syntax.ggs', line 107
, END_PRODUCTION
// At index 22 : <select_repeat_xml_parsing_syntax_1>, in file 'xml_parsing_syntax.ggs', line 107
, NONTERMINAL (0) // <element>
, NONTERMINAL (4) // <select_repeat_xml_parsing_syntax_1>
, END_PRODUCTION
// At index 25 : <select_repeat_xml_parsing_syntax_2>, in file 'xml_parsing_syntax.ggs', line 171
, END_PRODUCTION
// At index 26 : <select_repeat_xml_parsing_syntax_2>, in file 'xml_parsing_syntax.ggs', line 171
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) // $name$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3D) // $=$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_value) // $value$
, NONTERMINAL (5) // <select_repeat_xml_parsing_syntax_2>
, END_PRODUCTION
// At index 31 : <select_xml_parsing_syntax_3>, in file 'xml_parsing_syntax.ggs', line 201
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__2F_3E) // $/>$
, END_PRODUCTION
// At index 33 : <select_xml_parsing_syntax_3>, in file 'xml_parsing_syntax.ggs', line 201
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3E) // $>$
, NONTERMINAL (1) // <element_list>
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C_2F) // $</$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) // $name$
, TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3E) // $>$
, END_PRODUCTION
// At index 39 : <>, in file '.ggs', line 0
, NONTERMINAL (2) // <start_symbol>
, END_PRODUCTION
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O D U C T I O N    N A M E S                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const char * gProductionNames [13] = {
 "<element>, in file 'xml_parsing_syntax.ggs', line 126", // at index 0
 "<element>, in file 'xml_parsing_syntax.ggs', line 160", // at index 1
 "<element_list>, in file 'xml_parsing_syntax.ggs', line 99", // at index 2
 "<start_symbol>, in file 'xml_parsing_syntax.ggs', line 32", // at index 3
 "<select_repeat_xml_parsing_syntax_0>, in file 'xml_parsing_syntax.ggs', line 46", // at index 4
 "<select_repeat_xml_parsing_syntax_0>, in file 'xml_parsing_syntax.ggs', line 46", // at index 5
 "<select_repeat_xml_parsing_syntax_1>, in file 'xml_parsing_syntax.ggs', line 107", // at index 6
 "<select_repeat_xml_parsing_syntax_1>, in file 'xml_parsing_syntax.ggs', line 107", // at index 7
 "<select_repeat_xml_parsing_syntax_2>, in file 'xml_parsing_syntax.ggs', line 171", // at index 8
 "<select_repeat_xml_parsing_syntax_2>, in file 'xml_parsing_syntax.ggs', line 171", // at index 9
 "<select_xml_parsing_syntax_3>, in file 'xml_parsing_syntax.ggs', line 201", // at index 10
 "<select_xml_parsing_syntax_3>, in file 'xml_parsing_syntax.ggs', line 201", // at index 11
 "<>, in file '.ggs', line 0" // at index 12
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            L L ( 1 )    P R O D U C T I O N    I N D E X E S              *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gProductionIndexes [13] = {
0, // index 0 : <element>, in file 'xml_parsing_syntax.ggs', line 126
2, // index 1 : <element>, in file 'xml_parsing_syntax.ggs', line 160
7, // index 2 : <element_list>, in file 'xml_parsing_syntax.ggs', line 99
9, // index 3 : <start_symbol>, in file 'xml_parsing_syntax.ggs', line 32
15, // index 4 : <select_repeat_xml_parsing_syntax_0>, in file 'xml_parsing_syntax.ggs', line 46
16, // index 5 : <select_repeat_xml_parsing_syntax_0>, in file 'xml_parsing_syntax.ggs', line 46
21, // index 6 : <select_repeat_xml_parsing_syntax_1>, in file 'xml_parsing_syntax.ggs', line 107
22, // index 7 : <select_repeat_xml_parsing_syntax_1>, in file 'xml_parsing_syntax.ggs', line 107
25, // index 8 : <select_repeat_xml_parsing_syntax_2>, in file 'xml_parsing_syntax.ggs', line 171
26, // index 9 : <select_repeat_xml_parsing_syntax_2>, in file 'xml_parsing_syntax.ggs', line 171
31, // index 10 : <select_xml_parsing_syntax_3>, in file 'xml_parsing_syntax.ggs', line 201
33, // index 11 : <select_xml_parsing_syntax_3>, in file 'xml_parsing_syntax.ggs', line 201
39 // index 12 : <>, in file '.ggs', line 0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//      L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S       *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gFirstProductionIndexes [9] = {
0, // at 0 : <element>
2, // at 1 : <element_list>
3, // at 2 : <start_symbol>
4, // at 3 : <select_repeat_xml_parsing_syntax_0>
6, // at 4 : <select_repeat_xml_parsing_syntax_1>
8, // at 5 : <select_repeat_xml_parsing_syntax_2>
10, // at 6 : <select_xml_parsing_syntax_3>
12, // at 7 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               L L ( 1 )    D E C I S I O N    T A B L E S                 *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gDecision [] = {
// At index 0 : <element>
xml_parsing_lexique::xml_parsing_lexique_1_comment, -1, // Choice 1
xml_parsing_lexique::xml_parsing_lexique_1__3C, -1, // Choice 2
  -1,
// At index 5 : <element_list> only one production, no choice
  -1,
// At index 6 : <start_symbol> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 7 : <select_repeat_xml_parsing_syntax_0>
xml_parsing_lexique::xml_parsing_lexique_1__3F_3E, -1, // Choice 1
xml_parsing_lexique::xml_parsing_lexique_1_name, -1, // Choice 2
  -1,
// At index 12 : <select_repeat_xml_parsing_syntax_1>
xml_parsing_lexique::xml_parsing_lexique_1__3C_2F, xml_parsing_lexique::xml_parsing_lexique_1_, -1, // Choice 1
xml_parsing_lexique::xml_parsing_lexique_1_comment, xml_parsing_lexique::xml_parsing_lexique_1__3C, -1, // Choice 2
  -1,
// At index 19 : <select_repeat_xml_parsing_syntax_2>
xml_parsing_lexique::xml_parsing_lexique_1__3E, xml_parsing_lexique::xml_parsing_lexique_1__2F_3E, -1, // Choice 1
xml_parsing_lexique::xml_parsing_lexique_1_name, -1, // Choice 2
  -1,
// At index 25 : <select_xml_parsing_syntax_3>
xml_parsing_lexique::xml_parsing_lexique_1__2F_3E, -1, // Choice 1
xml_parsing_lexique::xml_parsing_lexique_1__3E, -1, // Choice 2
  -1,
// At index 30 : <> only one production, no choice
  -1,
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//       L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S        *
//                                                                           *
//---------------------------------------------------------------------------*

static const sint16 gDecisionIndexes [9] = {
0, // at 0 : <element>
5, // at 1 : <element_list>
6, // at 2 : <start_symbol>
7, // at 3 : <select_repeat_xml_parsing_syntax_0>
12, // at 4 : <select_repeat_xml_parsing_syntax_1>
19, // at 5 : <select_repeat_xml_parsing_syntax_2>
25, // at 6 : <select_xml_parsing_syntax_3>
30, // at 7 : <>
0} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  'element' non terminal implementation                    *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_grammar::
nt_element_ (xml_parsing_lexique & _inLexique,
                                GGS_xmlNodeList & parameter_1,
                                const GGS_bool parameter_2,
                                const GGS_bool parameter_3,
                                const GGS_bool parameter_4,
                                const GGS_string parameter_5) {
  switch (_inLexique.nextProductionIndex ()) {
  case 1 :
  pr_element_xml_parsing_syntax_126_14_ (_inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  case 2 :
  pr_element_xml_parsing_syntax_160_14_ (_inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
    break ;
  default :
    break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                'element_list' non terminal implementation                 *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_grammar::
nt_element_list_ (xml_parsing_lexique & _inLexique,
                                GGS_xmlNodeList & parameter_1,
                                const GGS_bool parameter_2,
                                const GGS_bool parameter_3,
                                const GGS_bool parameter_4,
                                const GGS_string parameter_5) {
pr_element_list_xml_parsing_syntax_99_19_ (_inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4, parameter_5) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                'start_symbol' non terminal implementation                 *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_grammar::
nt_start_symbol_ (xml_parsing_lexique & _inLexique,
                                GGS_xmlNodeList & parameter_1,
                                const GGS_bool parameter_2,
                                const GGS_bool parameter_3,
                                const GGS_bool parameter_4) {
pr_start_symbol_xml_parsing_syntax_32_19_ (_inLexique, parameter_1, parameter_2, parameter_3,
                  parameter_4) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Grammar start symbol implementation                     *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_grammar::_performSourceFileParsing_ (C_Compiler & _inCompiler,
                                const C_String & _inDependancyExtension,
                                const C_String & _inDependancyPath,
                                GGS_string * _inSentStringPtr,
                                const GGS_lstring _inFileName,
                                GGS_xmlNodeList & parameter_1,
                                const GGS_bool parameter_2,
                                const GGS_bool parameter_3,
                                const GGS_bool parameter_4
                                COMMA_LOCATION_ARGS) {
  const C_String sourceFileName = _inFileName.string ().isAbsolutePath ()
    ? _inFileName.string ()
    : _inCompiler.sourceFileName ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (_inFileName.string ()) ;
  if (sourceFileName.fileExists ()) {
    xml_parsing_lexique * scanner_ = NULL ;
    macroMyNew (scanner_, xml_parsing_lexique (& _inCompiler, _inDependancyExtension, _inDependancyPath, _inCompiler.ioParametersPtr (), sourceFileName COMMA_HERE)) ;
    if (scanner_->needsCompiling ()) {
      if (scanner_->sourceText () != NULL) {
        scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
        const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                         gFirstProductionIndexes, gDecision, gDecisionIndexes, 39) ;
        if (ok && ! scanner_->mParseOnlyFlag) {
          xml_parsing_grammar _grammar ;
          _grammar.nt_start_symbol_ (*scanner_, parameter_1, parameter_2, parameter_3, parameter_4) ;
          if (_inSentStringPtr != NULL) {
            _inSentStringPtr->_dotAssign_operation (scanner_->sentString ()) ;
          }
        }
      }else{
        C_String message ;
        message << "the '" << sourceFileName << "' file exits, but cannot be read" ;
        _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
        parameter_1._drop () ;
      }
    }
    macroDetachPointer (scanner_, xml_parsing_lexique) ;
  }else{
    C_String message ;
    message << "the '" << sourceFileName << "' file does not exist" ;
    _inFileName.signalSemanticError (_inCompiler, message COMMA_THERE) ;
    parameter_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

void xml_parsing_grammar::_performSourceStringParsing_ (C_Compiler & _inCompiler,
                                GGS_string * _inSentStringPtr,
                                const GGS_string _inSourceString,
                                GGS_xmlNodeList & parameter_1,
                                const GGS_bool parameter_2,
                                const GGS_bool parameter_3,
                                const GGS_bool parameter_4
                                COMMA_UNUSED_LOCATION_ARGS) {
  xml_parsing_lexique * scanner_ = NULL ;
  macroMyNew (scanner_, xml_parsing_lexique (& _inCompiler, _inCompiler.ioParametersPtr (), _inSourceString.string (), "Error when parsing dynamic string" COMMA_HERE)) ;
  scanner_->mPerformGeneration = _inCompiler.mPerformGeneration ;
  const bool ok = scanner_->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                   gFirstProductionIndexes, gDecision, gDecisionIndexes, 39) ;
  if (ok && ! scanner_->mParseOnlyFlag) {
    xml_parsing_grammar _grammar ;
    _grammar.nt_start_symbol_ (*scanner_, parameter_1, parameter_2, parameter_3, parameter_4) ;
    if (_inSentStringPtr != NULL) {
      _inSentStringPtr->_dotAssign_operation (scanner_->sentString ()) ;
    }
  }
  macroDetachPointer (scanner_, xml_parsing_lexique) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_xml_parsing_syntax_0' added non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 xml_parsing_grammar::select_repeat_xml_parsing_syntax_0 (xml_parsing_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_xml_parsing_syntax_1' added non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 xml_parsing_grammar::select_repeat_xml_parsing_syntax_1 (xml_parsing_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  'select_repeat_xml_parsing_syntax_2' added non terminal implementation   *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 xml_parsing_grammar::select_repeat_xml_parsing_syntax_2 (xml_parsing_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     'select_xml_parsing_syntax_3' added non terminal implementation       *
//                                                                           *
//---------------------------------------------------------------------------*


sint16 xml_parsing_grammar::select_xml_parsing_syntax_3 (xml_parsing_lexique & _inLexique) {
  return _inLexique.nextProductionIndex () ;
}

//---------------------------------------------------------------------------*

