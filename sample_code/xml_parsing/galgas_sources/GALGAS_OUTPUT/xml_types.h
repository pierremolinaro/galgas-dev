//---------------------------------------------------------------------------*
//                                                                           *
//                            File 'xml_types.h'                             *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      april 26th, 2009, at 11h4'52"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef xml_types_DEFINED
#define xml_types_DEFINED

#include <string.h>

//---------------------------------------------------------------------------*

#include "galgas/C_GGS_Object.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/GGS_binaryset.h"
#include "galgas/GGS_filewrapper.h"
#include "galgas/predefined_types.h"
#include "galgas/AC_galgas_class.h"
#include "galgas/AC_galgas_domain.h"
#include "galgas/AC_galgas_mapindex.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/AC_galgas_listmap.h"
#include "galgas/AC_galgas_list.h"
#include "galgas/AC_galgas_sortedlist.h"

//---------------------------------------------------------------------------*

#include "galgas/C_Lexique.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_xmlNodeType ;
class GGS_xmlAttributeMap ;
class GGS_xmlNode ;
class cPtr_xmlNode ;
class GGS_xmlNodeList ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Class for 'xmlNodeType' Enumeration                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_xmlNodeType {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_comment, enum_element, enum_text} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const { return mValue ; }

//--- Default constructor
  public : inline GGS_xmlNodeType (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_xmlNodeType (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : bool _isBuilt (void) const ;

//--- Construction from GALGAS constructor
  public : static inline GGS_xmlNodeType  constructor_comment (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_xmlNodeType (enum_comment) ;
  }
  public : static inline GGS_xmlNodeType  constructor_element (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_xmlNodeType (enum_element) ;
  }
  public : static inline GGS_xmlNodeType  constructor_text (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
    return GGS_xmlNodeType (enum_text) ;
  }

//--- Readers

//--- Modifiers

//--- Methods

//--- Operators

//--- 'description' reader
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;

//--- Drop operation
  public : inline void _drop (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool _operator_isEqual (const GGS_xmlNodeType inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_xmlNodeType inOperand) const ;
  public : GGS_bool _operator_infOrEqual (const GGS_xmlNodeType inOperand) const ;
  public : GGS_bool _operator_supOrEqual (const GGS_xmlNodeType inOperand) const ;
  public : GGS_bool _operator_strictInf (const GGS_xmlNodeType inOperand) const ;
  public : GGS_bool _operator_strictSup (const GGS_xmlNodeType inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Map '@xmlAttributeMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_xmlAttributeMap ;

class GGS_xmlAttributeMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_xmlAttributeMap cElement ;

//--- Get pointers
  public : inline cElement * firstObject (void) const { return (cElement *) internalFirstObject () ; }
  public : inline cElement * lastObject (void) const { return (cElement *) internalLastObject () ; }

//--- Comparison methods
  public : GGS_bool _operator_isEqual (const GGS_xmlAttributeMap & inOperand) const ;
  public : GGS_bool _operator_isNotEqual (const GGS_xmlAttributeMap & inOperand) const ;

//--- Create a new element
  protected : virtual AC_galgas_map_element *
  new_element (const GGS_lstring & inKey, void * inInfo) ;

//--- Assign information to an existing element
  protected : virtual void
  assignInfo (AC_galgas_map_element * inPtr, void * inInfo) ;

//--- Enter an index
  public : void enterIndex (const GGS_lstring & inKey,
                            AC_galgas_index_core & outIndex) ;

//--- Get object pointer (for method call)
  public : inline GGS_xmlAttributeMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_xmlAttributeMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }

//--- 'emptyMap' constructor
  public : static GGS_xmlAttributeMap constructor_emptyMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) ;

//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;

//--- Modifiers "set'Value'ForKey"
  public : void modifier_setValueForKey (C_Compiler & inLexique,
                        const GGS_lstring & inValue,
                        const GGS_string & inKey
                        COMMA_LOCATION_ARGS) ;

//--- 'insertKey' Insert Modifier
  public : void modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void _insertElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   const GGS_lstring & inParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void _searchElement (C_Compiler & inLexique,
                                   const char * inErrorMessage,
                                   const GGS_lstring & inKey,
                                   GGS_lstring & outParameter0,
                                   GGS_luint * outIndex
                                   COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Compiler & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_xmlAttributeMap constructor_mapWithMapToOverride (C_Compiler & inLexique,
                                            const GGS_xmlAttributeMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_xmlAttributeMap reader_overriddenMap (C_Compiler & inLexique
                                            COMMA_LOCATION_ARGS) const ;
//--------------------------------- Map Enumerator
  public : class cEnumerator : public cAbstractMapEnumerator {
  //--- Constructors
    public : inline cEnumerator (const GGS_xmlAttributeMap & inMap,
                                 const bool inAscending) :
    cAbstractMapEnumerator (inMap, inAscending) {
    }
    public : inline cEnumerator (const GGS_xmlAttributeMap & inMap) :
    cAbstractMapEnumerator (inMap) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
    public : /* const */ GGS_lstring   & _value (LOCATION_ARGS) const ;
  } ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        GALGAS class 'GGS_xmlNode'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_xmlNode : public AC_galgas_class {
//--- Default constructor
  public : inline GGS_xmlNode (void) :
  AC_galgas_class () {}

//--- Pointer assignment constructor
  public : GGS_xmlNode (cPtr__AC_galgas_class * inPointer) ;

//--- Object assignment constructor
  public : GGS_xmlNode (cPtr__AC_galgas_class & inObject) ;

//--- _castFrom class method (implements cast expression)
  public : static GGS_xmlNode
  _castFrom (C_Compiler & inLexique,
             cPtr__AC_galgas_class * inPointer,
             const bool inUseKindOfClass,
             const GGS_location & inErrorLocation
             COMMA_LOCATION_ARGS) ;

//--- 'new' constructor
  public : static GGS_xmlNode constructor_new (C_Compiler & inLexique,
                                const GGS_xmlNodeType& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_xmlAttributeMap & argument_2,
                                const GGS_xmlNodeList & argument_3
                                COMMA_LOCATION_ARGS) ;

//--- getPtr
  public : inline cPtr_xmlNode * getPtr (void) const {
    return (cPtr_xmlNode *) mPointer ;
  }

//--- 'description' reader
  public : virtual const char * actualTypeName (void) const ;

//--- Readers
  public : GGS_xmlNodeType reader_type (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_lstring  reader_name (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_xmlAttributeMap  reader_attributeMap (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;
  public : GGS_xmlNodeList  reader_nodeList (C_Compiler & inLexique COMMA_LOCATION_ARGS) const ;

//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_xmlNode * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_xmlNode * operator () (LOCATION_ARGS) const {
      return (cPtr_xmlNode *) mPointer ;
    }
  #endif

//--- Galgas RTTI
AC_galgasClassRunTimeInformation * _galgasObjectRunTimeInfo (void) const ;

} ;

//---------------------------------------------------------------------------*

extern C_galgasRootClassRunTimeInformation gClassInfoFor__xmlNode ;

//---------------------------------------------------------------------------*
//                                                                           *
//                           list '@xmlNodeList'                             *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_xmlNodeList ;

class GGS_xmlNodeList : public AC_galgas_list {
  public : typedef elementOf_GGS_xmlNodeList cElement ;

//--- Constructor 'emptyList'
  public : static GGS_xmlNodeList constructor_emptyList (void) ;
  public : static GGS_xmlNodeList constructor_listWithValue (const GGS_xmlNode & argument_0) ;
//--- Get sublist
  protected : void
  internalSubListWithRange (GGS_xmlNodeList & ioList,
                            const sint32 inFirstIndex,
                            const sint32 inCount) const ;

  public : GGS_xmlNodeList
  reader_subListWithRange (C_Compiler & _inLexique,
                           const GGS_uint & inFirstIndex,
                           const GGS_uint & inCount
                           COMMA_LOCATION_ARGS) const ;

  public : GGS_xmlNodeList
  reader_subListFromIndex (C_Compiler & _inLexique,
                           const GGS_uint & inIndex
                           COMMA_LOCATION_ARGS) const ;

//--- Get first object
  public : inline cElement * firstObject (void) const {
    return (cElement *) internalFirstObject () ;
  }
//--- Get last object
  public : inline cElement * lastObject (void) const {
    return (cElement *) internalLastObject () ;
  }
//--- Operator () used for method call
  public : const GGS_xmlNodeList * operator () (UNUSED_LOCATION_ARGS) const { return this ;} 
//--- Method 'first'
  public : void method_first (C_Compiler & _inLexique,
                              GGS_xmlNode & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Compiler & _inLexique,
                             GGS_xmlNode & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Modifier 'popLast'
  public : void modifier_popLast (C_Compiler & _inLexique,
                                GGS_xmlNode & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Modifier 'popFirst'
  public : void modifier_popFirst (C_Compiler & _inLexique,
                                 GGS_xmlNode & _out_0
                                 COMMA_LOCATION_ARGS) ;
//--- Handle '.=' operator
  public : void _dotAssign_operation (const GGS_xmlNodeList inOperand) ;

//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_xmlNode & argument_0) ;
//--- Handling '.' GALGAS operator
  public : GGS_xmlNodeList _operator_concat (const GGS_xmlNodeList & inOperand) const ;
  public : void modifier_prependValue (C_Compiler & _inLexique,
                                const GGS_xmlNode & argument_0
                                COMMA_LOCATION_ARGS) ;
//--- Internal Methods
  protected : void _internalAppendValues (const GGS_xmlNode & argument_0
                                COMMA_LOCATION_ARGS) ;

  protected : void _internalPrependValues (const GGS_xmlNode & argument_0
                                COMMA_LOCATION_ARGS) ;

//--- List Insulation
  protected : void _insulateList (void) ;

//--- Reader 'description
  public : GGS_string
  reader_description (C_Compiler & _inLexique
                      COMMA_LOCATION_ARGS,
                      const sint32 inIndentation = 0) const ;

//--------------------------------- Direct Read Access
  public : GGS_xmlNode 
  reader_nodeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const ;

//--------------------------------- Direct Write Access
  public : void
  modifier_setNodeAtIndex (C_Compiler & inLexique,
                              const GGS_xmlNode  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const ;

//--------------------------------- List Enumerator
  public : class cEnumerator : public cAbstractListEnumerator {
  //--- Constructor
    public : inline cEnumerator (const GGS_xmlNodeList & inList,
                                 const bool inAscending) :
    cAbstractListEnumerator (inList, inAscending) {
    }
  //--- Iterator method
    public : inline cElement * nextObject (void) {
      return (cElement *) internalNextObject () ;
    }
  public : /* const */ GGS_xmlNode   & _node (LOCATION_ARGS) const ;
  } ;

} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Routine 'internal_logXMLNodes'                       *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_internal_logXMLNodes (C_Compiler &,
                                const GGS_xmlNodeList  ,
                                const GGS_string ,
                                GGS_string & COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          Routine 'logXMLNodes'                            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_logXMLNodes (C_Compiler &,
                                const GGS_xmlNodeList   COMMA_LOCATION_ARGS) ;

void routine_parseXMLFile (C_Compiler &,
                                const GGS_lstring  ,
                                GGS_xmlNodeList  &,
                                const GGS_bool ,
                                const GGS_bool ,
                                const GGS_bool  COMMA_LOCATION_ARGS) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    Element of map '@xmlAttributeMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class e_xmlAttributeMap {
  public : GGS_lstring  value ;

  public : e_xmlAttributeMap (void) ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_xmlAttributeMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_xmlAttributeMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_xmlAttributeMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_xmlAttributeMap * nextObject (void) const { return (elementOf_GGS_xmlAttributeMap *) mNextItem ; }
  public : inline elementOf_GGS_xmlAttributeMap * infObject (void) const { return (elementOf_GGS_xmlAttributeMap *) mInfPtr ; }
  public : inline elementOf_GGS_xmlAttributeMap * supObject (void) const { return (elementOf_GGS_xmlAttributeMap *) mSupPtr ; }
//--- Comparison
  protected : virtual bool isEqualToMapElement (const AC_galgas_map_element * inOperand) const ;
//--- Data member
  public : e_xmlAttributeMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Compiler & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      abstract class 'cPtr_xmlNode'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_xmlNode : public cPtr__AC_galgas_class {
//--- Constructor
  public : cPtr_xmlNode (const GGS_xmlNodeType& ,
                                const GGS_lstring & ,
                                const GGS_xmlAttributeMap & ,
                                const GGS_xmlNodeList & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_xmlNode (void) {}
  #endif

//--- Attributes
  public : GGS_xmlNodeType type ;
  public : GGS_lstring  name ;
  public : GGS_xmlAttributeMap  attributeMap ;
  public : GGS_xmlNodeList  nodeList ;
//--- Class message
  public : virtual const char * _message (void) const ;
  public : static const char * _static_message (void) ;

//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;

//--- Galgas RTTI
  public : virtual AC_galgasClassRunTimeInformation * galgasRTTI (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                      Element of list '@xmlNodeList'                       *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_xmlNodeList : public AC_galgas_list::cListElement {
//--- Attributes
  public : GGS_xmlNode  node ;
//--- Constructor
  public : elementOf_GGS_xmlNodeList (const GGS_xmlNode & 
                                COMMA_LOCATION_ARGS) ;

//--- Access to next
  public : inline elementOf_GGS_xmlNodeList * nextObject (void) const { return (elementOf_GGS_xmlNodeList *) internalNextItem () ; }

//--- Access to previous
  public : inline elementOf_GGS_xmlNodeList * previousObject (void) const { return (elementOf_GGS_xmlNodeList *) internalPreviousItem () ; }

//--- Element comparison
  protected : virtual bool
  isEqualToObject (const cListElement * inOperand) const ;

//--- Method used for description
  public : virtual void
  appendForDescription (C_Compiler & _inLexique,
                        C_String & ioString,
                        const sint32 inIndentation
                        COMMA_LOCATION_ARGS) const ;

//--- Friend class declaration
  friend class GGS_xmlNodeList ;
} ;

//---------------------------------------------------------------------------*

#endif
