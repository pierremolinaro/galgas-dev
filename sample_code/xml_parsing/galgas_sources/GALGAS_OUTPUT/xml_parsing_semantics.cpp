//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'xml_parsing_semantics.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 6th, 2009, at 17h24'20"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_parsing_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_parsing_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "listUnicodeCharacterProperties"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_listUnicodeCharacterProperties (C_Compiler & _inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_listUnicodeCharacterProperties at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  _inLexique.printMessage (GGS_string (true, "---- Unassigned Unicode Characters\n") COMMA_SOURCE_FILE_AT_LINE (6)) ;
  GGS_uint  var_cas_unicodeValue ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_458 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (8)) ;
  GGS_bool _condition_458 (_variant_458._isBuilt (), true) ;
  while (_condition_458.isBuiltAndTrue ()) {
    _condition_458 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_458.isBuiltAndTrue ()) {
      if (_variant_458.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (14)) ;
        _condition_458 = GGS_bool (true, false) ;
      }else{
        _variant_458._decrement_operation (_inLexique COMMA_HERE) ;
        if (((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (10)))._operator_not ()).isBuiltAndTrue ()) {
          _inLexique.printMessage (((GGS_string (true, "Unicode '\\U"))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (11))))._operator_concat (GGS_string (true, "' not assigned.\n")) COMMA_SOURCE_FILE_AT_LINE (11)) ;
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (13)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_listUnicodeCharacterProperties\n") ;
  #endif
}

//---------------------------------------------------------------------------*

