//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'xml_parsing_semantics.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                        may 8th, 2009, at 21h41'9"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_parsing_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_parsing_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "listUnicodeCharacterProperties"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_listUnicodeCharacterProperties (C_Compiler & _inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_listUnicodeCharacterProperties at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  _inLexique.printMessage (GGS_string ("---- Unassigned Unicode Characters\n") COMMA_SOURCE_FILE_AT_LINE (6)) ;
  GGS_uint  var_cas_unicodeValue ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint  var_cas_matchedValue ;
  var_cas_matchedValue = GGS_uint (true, 0U) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_670 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (10)) ;
  GGS_bool _condition_670 (_variant_670.isBuilt (), true) ;
  while (_condition_670.isBuiltAndTrue ()) {
    _condition_670 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_670.isBuiltAndTrue ()) {
      if (_variant_670.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (22)) ;
        _condition_670 = GGS_bool (true, false) ;
      }else{
        _variant_670._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (12))).isBuiltAndTrue ()) {
          if ((var_cas_found).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string ("  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (14))))._operator_concat (GGS_string (", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (14)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (14))))._operator_concat (GGS_string ("]\n")) COMMA_SOURCE_FILE_AT_LINE (14)) ;
            var_cas_found = GGS_bool (true, false) ;
          }
        }else if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_matchedValue = var_cas_unicodeValue ;
          var_cas_found = GGS_bool (true, true) ;
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
      }
    }
  }
  if ((var_cas_found).isBuiltAndTrue ()) {
    _inLexique.printMessage (((((GGS_string ("  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))))._operator_concat (GGS_string (", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (24)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))))._operator_concat (GGS_string ("]\n")) COMMA_SOURCE_FILE_AT_LINE (24)) ;
    var_cas_found = GGS_bool (true, false) ;
  }
  _inLexique.printMessage (GGS_string ("---- Unicode Letters\n") COMMA_SOURCE_FILE_AT_LINE (28)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_1408 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (30)) ;
  GGS_bool _condition_1408 (_variant_1408.isBuilt (), true) ;
  while (_condition_1408.isBuiltAndTrue ()) {
    _condition_1408 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_1408.isBuiltAndTrue ()) {
      if (_variant_1408.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (44)) ;
        _condition_1408 = GGS_bool (true, false) ;
      }else{
        _variant_1408._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (32))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeLetter (_inLexique COMMA_SOURCE_FILE_AT_LINE (34))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((((((((GGS_string ("  '"))._operator_concat (var_cas_c.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (35))))._operator_concat (GGS_string ("' (")))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (36))))._operator_concat (GGS_string ("), name: '")))._operator_concat (var_cas_c.reader_unicodeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (37))))._operator_concat (GGS_string ("', to upper: '")))._operator_concat (var_cas_c.reader_unicodeToUpper (_inLexique COMMA_SOURCE_FILE_AT_LINE (38)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (38))))._operator_concat (GGS_string ("', to lower: '")))._operator_concat (var_cas_c.reader_unicodeToLower (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (39))))._operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (35)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string ("---- Unicode Numbers\n") COMMA_SOURCE_FILE_AT_LINE (46)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_1855 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (48)) ;
  GGS_bool _condition_1855 (_variant_1855.isBuilt (), true) ;
  while (_condition_1855.isBuiltAndTrue ()) {
    _condition_1855 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_1855.isBuiltAndTrue ()) {
      if (_variant_1855.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (57)) ;
        _condition_1855 = GGS_bool (true, false) ;
      }else{
        _variant_1855._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (50))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeNumber (_inLexique COMMA_SOURCE_FILE_AT_LINE (52))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((((GGS_string ("  '"))._operator_concat (var_cas_c.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (53))))._operator_concat (GGS_string ("' (")))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (53))))._operator_concat (GGS_string ("), name: '")))._operator_concat (var_cas_c.reader_unicodeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (53))))._operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (53)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string ("---- Unicode Separators\n") COMMA_SOURCE_FILE_AT_LINE (59)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_2308 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (61)) ;
  GGS_bool _condition_2308 (_variant_2308.isBuilt (), true) ;
  while (_condition_2308.isBuiltAndTrue ()) {
    _condition_2308 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_2308.isBuiltAndTrue ()) {
      if (_variant_2308.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (70)) ;
        _condition_2308 = GGS_bool (true, false) ;
      }else{
        _variant_2308._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (63))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeSeparator (_inLexique COMMA_SOURCE_FILE_AT_LINE (65))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((((GGS_string ("  '"))._operator_concat (var_cas_c.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (66))))._operator_concat (GGS_string ("' (")))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (66))))._operator_concat (GGS_string ("), name: '")))._operator_concat (var_cas_c.reader_unicodeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (66))))._operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (66)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (69)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string ("---- Unicode Punctuation\n") COMMA_SOURCE_FILE_AT_LINE (72)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_2743 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (74)) ;
  GGS_bool _condition_2743 (_variant_2743.isBuilt (), true) ;
  while (_condition_2743.isBuiltAndTrue ()) {
    _condition_2743 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_2743.isBuiltAndTrue ()) {
      if (_variant_2743.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (83)) ;
        _condition_2743 = GGS_bool (true, false) ;
      }else{
        _variant_2743._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (76))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodePunctuation (_inLexique COMMA_SOURCE_FILE_AT_LINE (78))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string ("  - "))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (79))))._operator_concat (GGS_string (", name: '")))._operator_concat (var_cas_c.reader_unicodeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (79))))._operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (79)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (82)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string ("---- Unicode Command\n") COMMA_SOURCE_FILE_AT_LINE (85)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_3170 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (87)) ;
  GGS_bool _condition_3170 (_variant_3170.isBuilt (), true) ;
  while (_condition_3170.isBuiltAndTrue ()) {
    _condition_3170 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_3170.isBuiltAndTrue ()) {
      if (_variant_3170.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (96)) ;
        _condition_3170 = GGS_bool (true, false) ;
      }else{
        _variant_3170._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (89))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeCommand (_inLexique COMMA_SOURCE_FILE_AT_LINE (91))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string ("  - "))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (92))))._operator_concat (GGS_string (", name: '")))._operator_concat (var_cas_c.reader_unicodeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (92))))._operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (92)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (95)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string ("---- Unicode Mark\n") COMMA_SOURCE_FILE_AT_LINE (98)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_3591 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (100)) ;
  GGS_bool _condition_3591 (_variant_3591.isBuilt (), true) ;
  while (_condition_3591.isBuiltAndTrue ()) {
    _condition_3591 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_3591.isBuiltAndTrue ()) {
      if (_variant_3591.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (109)) ;
        _condition_3591 = GGS_bool (true, false) ;
      }else{
        _variant_3591._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (102))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeMark (_inLexique COMMA_SOURCE_FILE_AT_LINE (104))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string ("  - "))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (105))))._operator_concat (GGS_string (", name: '")))._operator_concat (var_cas_c.reader_unicodeName (_inLexique COMMA_SOURCE_FILE_AT_LINE (105))))._operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (105)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string ("---- Done.\n") COMMA_SOURCE_FILE_AT_LINE (111)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_listUnicodeCharacterProperties\n") ;
  #endif
}

//---------------------------------------------------------------------------*

