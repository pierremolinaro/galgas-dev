//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'xml_parsing_semantics.cpp'                      *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 6th, 2009, at 20h51'27"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_parsing_semantics.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_parsing_semantics.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of routine "listUnicodeCharacterProperties"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_listUnicodeCharacterProperties (C_Compiler & _inLexique COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_listUnicodeCharacterProperties at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  _inLexique.printMessage (GGS_string (true, "---- Unassigned Unicode Characters\n") COMMA_SOURCE_FILE_AT_LINE (6)) ;
  GGS_uint  var_cas_unicodeValue ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint  var_cas_matchedValue ;
  var_cas_matchedValue = GGS_uint (true, 0U) ;
  GGS_bool var_cas_found ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_670 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (10)) ;
  GGS_bool _condition_670 (_variant_670._isBuilt (), true) ;
  while (_condition_670.isBuiltAndTrue ()) {
    _condition_670 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_670.isBuiltAndTrue ()) {
      if (_variant_670.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (22)) ;
        _condition_670 = GGS_bool (true, false) ;
      }else{
        _variant_670._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (12))).isBuiltAndTrue ()) {
          if ((var_cas_found).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (14))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (14)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (14))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (14)) ;
            var_cas_found = GGS_bool (true, false) ;
          }
        }else if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
          var_cas_matchedValue = var_cas_unicodeValue ;
          var_cas_found = GGS_bool (true, true) ;
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (21)) ;
      }
    }
  }
  if ((var_cas_found).isBuiltAndTrue ()) {
    _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (24)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (24))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (24)) ;
    var_cas_found = GGS_bool (true, false) ;
  }
  _inLexique.printMessage (GGS_string (true, "---- Unicode Letters\n") COMMA_SOURCE_FILE_AT_LINE (28)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_1227 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (30)) ;
  GGS_bool _condition_1227 (_variant_1227._isBuilt (), true) ;
  while (_condition_1227.isBuiltAndTrue ()) {
    _condition_1227 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_1227.isBuiltAndTrue ()) {
      if (_variant_1227.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (39)) ;
        _condition_1227 = GGS_bool (true, false) ;
      }else{
        _variant_1227._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (32))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeLetter (_inLexique COMMA_SOURCE_FILE_AT_LINE (34))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string (true, "  '"))._operator_concat (var_cas_c.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (35))))._operator_concat (GGS_string (true, "' (")))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (35))))._operator_concat (GGS_string (true, ")\n")) COMMA_SOURCE_FILE_AT_LINE (35)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (38)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string (true, "---- Unicode Numbers\n") COMMA_SOURCE_FILE_AT_LINE (41)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_1641 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (43)) ;
  GGS_bool _condition_1641 (_variant_1641._isBuilt (), true) ;
  while (_condition_1641.isBuiltAndTrue ()) {
    _condition_1641 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_1641.isBuiltAndTrue ()) {
      if (_variant_1641.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (52)) ;
        _condition_1641 = GGS_bool (true, false) ;
      }else{
        _variant_1641._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (45))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeNumber (_inLexique COMMA_SOURCE_FILE_AT_LINE (47))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string (true, "  '"))._operator_concat (var_cas_c.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (48))))._operator_concat (GGS_string (true, "' (")))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (48))))._operator_concat (GGS_string (true, ")\n")) COMMA_SOURCE_FILE_AT_LINE (48)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string (true, "---- Unicode Separators\n") COMMA_SOURCE_FILE_AT_LINE (53)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  GGS_uint _variant_2060 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (55)) ;
  GGS_bool _condition_2060 (_variant_2060._isBuilt (), true) ;
  while (_condition_2060.isBuiltAndTrue ()) {
    _condition_2060 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_2060.isBuiltAndTrue ()) {
      if (_variant_2060.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (64)) ;
        _condition_2060 = GGS_bool (true, false) ;
      }else{
        _variant_2060._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (57))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeSeparator (_inLexique COMMA_SOURCE_FILE_AT_LINE (59))).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string (true, "  '"))._operator_concat (var_cas_c.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))))._operator_concat (GGS_string (true, "' (")))._operator_concat (var_cas_unicodeValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (60))))._operator_concat (GGS_string (true, ")\n")) COMMA_SOURCE_FILE_AT_LINE (60)) ;
          }
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (63)) ;
      }
    }
  }
  _inLexique.printMessage (GGS_string (true, "---- Unicode Punctuation\n") COMMA_SOURCE_FILE_AT_LINE (66)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  var_cas_matchedValue = GGS_uint (true, 0U) ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_2842 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (70)) ;
  GGS_bool _condition_2842 (_variant_2842._isBuilt (), true) ;
  while (_condition_2842.isBuiltAndTrue ()) {
    _condition_2842 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_2842.isBuiltAndTrue ()) {
      if (_variant_2842.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (88)) ;
        _condition_2842 = GGS_bool (true, false) ;
      }else{
        _variant_2842._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (72))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodePunctuation (_inLexique COMMA_SOURCE_FILE_AT_LINE (74))).isBuiltAndTrue ()) {
            if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
              var_cas_matchedValue = var_cas_unicodeValue ;
              var_cas_found = GGS_bool (true, true) ;
            }
          }else if ((var_cas_found).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (80))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (80)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (80))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (80)) ;
            var_cas_found = GGS_bool (true, false) ;
          }
        }else if ((var_cas_found).isBuiltAndTrue ()) {
          _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (84))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (84)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (84))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (84)) ;
          var_cas_found = GGS_bool (true, false) ;
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (87)) ;
      }
    }
  }
  if ((var_cas_found).isBuiltAndTrue ()) {
    _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (90))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (90)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (90))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (90)) ;
    var_cas_found = GGS_bool (true, false) ;
  }
  _inLexique.printMessage (GGS_string (true, "---- Unicode Command\n") COMMA_SOURCE_FILE_AT_LINE (94)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  var_cas_matchedValue = GGS_uint (true, 0U) ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_3759 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (98)) ;
  GGS_bool _condition_3759 (_variant_3759._isBuilt (), true) ;
  while (_condition_3759.isBuiltAndTrue ()) {
    _condition_3759 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_3759.isBuiltAndTrue ()) {
      if (_variant_3759.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (116)) ;
        _condition_3759 = GGS_bool (true, false) ;
      }else{
        _variant_3759._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (100))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeCommand (_inLexique COMMA_SOURCE_FILE_AT_LINE (102))).isBuiltAndTrue ()) {
            if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
              var_cas_matchedValue = var_cas_unicodeValue ;
              var_cas_found = GGS_bool (true, true) ;
            }
          }else if ((var_cas_found).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (108))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (108)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (108))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (108)) ;
            var_cas_found = GGS_bool (true, false) ;
          }
        }else if ((var_cas_found).isBuiltAndTrue ()) {
          _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (112))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (112)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (112))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (112)) ;
          var_cas_found = GGS_bool (true, false) ;
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (115)) ;
      }
    }
  }
  if ((var_cas_found).isBuiltAndTrue ()) {
    _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (118))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (118)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (118))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (118)) ;
    var_cas_found = GGS_bool (true, false) ;
  }
  _inLexique.printMessage (GGS_string (true, "---- Unicode Mark\n") COMMA_SOURCE_FILE_AT_LINE (122)) ;
  var_cas_unicodeValue = GGS_uint (true, 0U) ;
  var_cas_matchedValue = GGS_uint (true, 0U) ;
  var_cas_found = GGS_bool (true, false) ;
  GGS_uint _variant_4670 = GGS_uint (true, 65536U)._substract_operation (_inLexique, var_cas_unicodeValue COMMA_SOURCE_FILE_AT_LINE (126)) ;
  GGS_bool _condition_4670 (_variant_4670._isBuilt (), true) ;
  while (_condition_4670.isBuiltAndTrue ()) {
    _condition_4670 = (var_cas_unicodeValue)._operator_strictInf (GGS_uint (true, 65536U)) ;
    if (_condition_4670.isBuiltAndTrue ()) {
      if (_variant_4670.uintValue () == 0) {
        _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (144)) ;
        _condition_4670 = GGS_bool (true, false) ;
      }else{
        _variant_4670._decrement_operation (_inLexique COMMA_HERE) ;
        if ((var_cas_unicodeValue.reader_isUnicodeValueAssigned (_inLexique COMMA_SOURCE_FILE_AT_LINE (128))).isBuiltAndTrue ()) {
          GGS_char var_cas_c ;
          var_cas_c = GGS_char::constructor_unicodeCharacterWithUnsigned (_inLexique, var_cas_unicodeValue COMMA_HERE) ;
          if ((var_cas_c.reader_isUnicodeMark (_inLexique COMMA_SOURCE_FILE_AT_LINE (130))).isBuiltAndTrue ()) {
            if (((var_cas_found)._operator_not ()).isBuiltAndTrue ()) {
              var_cas_matchedValue = var_cas_unicodeValue ;
              var_cas_found = GGS_bool (true, true) ;
            }
          }else if ((var_cas_found).isBuiltAndTrue ()) {
            _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (136))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (136)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (136))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (136)) ;
            var_cas_found = GGS_bool (true, false) ;
          }
        }else if ((var_cas_found).isBuiltAndTrue ()) {
          _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (140))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (140)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (140))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (140)) ;
          var_cas_found = GGS_bool (true, false) ;
        }
        var_cas_unicodeValue._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (143)) ;
      }
    }
  }
  if ((var_cas_found).isBuiltAndTrue ()) {
    _inLexique.printMessage (((((GGS_string (true, "  - ["))._operator_concat (var_cas_matchedValue.reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (146))))._operator_concat (GGS_string (true, ", ")))._operator_concat (var_cas_unicodeValue._substract_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (146)).reader_hexString (_inLexique COMMA_SOURCE_FILE_AT_LINE (146))))._operator_concat (GGS_string (true, "]\n")) COMMA_SOURCE_FILE_AT_LINE (146)) ;
    var_cas_found = GGS_bool (true, false) ;
  }
  _inLexique.printMessage (GGS_string (true, "---- Done.\n") COMMA_SOURCE_FILE_AT_LINE (150)) ;
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_listUnicodeCharacterProperties\n") ;
  #endif
}

//---------------------------------------------------------------------------*

