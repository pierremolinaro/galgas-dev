//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'xml_parsing_syntax.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 4th, 2009, at 22h30'39"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_parsing_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_parsing_syntax.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_start_symbol_xml_parsing_syntax_32_19_ (xml_parsing_lexique & _inLexique,
                                GGS_xmlNodeList  &var_cas_outRootNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool var_cas_inDoNotCondenseWhiteSpaces,
                                const GGS_bool var_cas_inPrintDuringParsing) {
  GGS_lstring  var_cas_s ;
  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (_inLexique COMMA_HERE) ;
  if (((var_cas_s.ggs_string ().reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (39)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    GGS_location (_inLexique).reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "No character is allowed before XML header") COMMA_SOURCE_FILE_AT_LINE (41)) ;
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C_3F) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  _inLexique._assignFromAttribute_tokenString (var_cas_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_xml_parsing_syntax_0 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_attributeName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3D) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeValue ;
          _inLexique._assignFromAttribute_tokenString (var_cas_attributeValue) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_value) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3F_3E) COMMA_HERE) ;
  var_cas_outRootNodes = GGS_xmlNodeList ::constructor_emptyList () ;
  nt_element_list_ (_inLexique, var_cas_outRootNodes, var_cas_inIncludeComments, var_cas_inDoNotCondenseWhiteSpaces, var_cas_inPrintDuringParsing, GGS_string (true, "")) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'element_list'              *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_element_list_xml_parsing_syntax_65_19_ (xml_parsing_lexique & _inLexique,
                                GGS_xmlNodeList  &var_cas_ioNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool var_cas_inDoNotCondenseWhiteSpaces,
                                const GGS_bool var_cas_inPrintDuringParsing,
                                const GGS_string var_cas_inIndendation) {
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_xml_parsing_syntax_1 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_s ;
          var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (_inLexique COMMA_HERE) ;
          GGS_string var_cas_trimmedString ;
          var_cas_trimmedString = var_cas_s.ggs_string ().reader_stringByTrimmingWhiteSpaces (_inLexique COMMA_SOURCE_FILE_AT_LINE (75)) ;
          if (((var_cas_trimmedString.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (76)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
            GGS_lstring  var_cas_ls ;
            if ((var_cas_inDoNotCondenseWhiteSpaces).isBuiltAndTrue ()) {
              var_cas_ls = var_cas_s ;
            }else{
              var_cas_ls = GGS_lstring ::constructor_new (_inLexique, var_cas_trimmedString, var_cas_s.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (81)) COMMA_HERE) ;
            }
            GGS_xmlNode  var_cas_node ;
            var_cas_node = GGS_xmlNode ::constructor_new (_inLexique, GGS_xmlNodeType::constructor_text (_inLexique COMMA_HERE), var_cas_ls, GGS_xmlAttributeMap ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_xmlNodeList ::constructor_emptyList () COMMA_HERE) ;
            var_cas_ioNodes._addAssign_operation (var_cas_node) ;
            if ((var_cas_inPrintDuringParsing).isBuiltAndTrue ()) {
              GGS_string var_cas_s ;
              var_cas_s = ((((var_cas_inIndendation)._operator_concat (GGS_string (true, "TEXT ")))._operator_concat (GGS_string (true, "'")))._operator_concat (var_cas_ls))._operator_concat (GGS_string (true, "' ")) ;
              var_cas_s._dotAssign_operation (var_cas_ls.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_line (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (92))) ;
              var_cas_s.appendCString (":") ;
              var_cas_s._dotAssign_operation (var_cas_ls.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (93)).reader_column (_inLexique COMMA_SOURCE_FILE_AT_LINE (93)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (93))) ;
              var_cas_s.appendCString (":") ;
              var_cas_s._dotAssign_operation (var_cas_ls.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)).reader_locationIndex (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (94))) ;
              var_cas_s.appendCString ("\n") ;
              _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (95)) ;
            }
          }
          nt_element_ (_inLexique, var_cas_ioNodes, var_cas_inIncludeComments, var_cas_inDoNotCondenseWhiteSpaces, var_cas_inPrintDuringParsing, var_cas_inIndendation) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'element'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_element_xml_parsing_syntax_110_14_ (xml_parsing_lexique & _inLexique,
                                GGS_xmlNodeList  &var_cas_ioNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool /* var_cas_inDoNotCondenseWhiteSpaces */,
                                const GGS_bool var_cas_inPrintDuringParsing,
                                const GGS_string var_cas_inIndendation) {
  GGS_lstring  var_cas_commentString ;
  _inLexique._assignFromAttribute_tokenString (var_cas_commentString) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_comment) COMMA_HERE) ;
  if ((var_cas_inIncludeComments).isBuiltAndTrue ()) {
    GGS_xmlNode  var_cas_node ;
    var_cas_node = GGS_xmlNode ::constructor_new (_inLexique, GGS_xmlNodeType::constructor_comment (_inLexique COMMA_HERE), var_cas_commentString, GGS_xmlAttributeMap ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_xmlNodeList ::constructor_emptyList () COMMA_HERE) ;
    var_cas_ioNodes._addAssign_operation (var_cas_node) ;
  }
  if ((var_cas_inPrintDuringParsing).isBuiltAndTrue ()) {
    GGS_string var_cas_discartedMessage ;
    if ((var_cas_inIncludeComments).isBuiltAndTrue ()) {
      var_cas_discartedMessage = GGS_string (true, "") ;
    }else{
      var_cas_discartedMessage = GGS_string (true, "(discarted) ") ;
    }
    GGS_string var_cas_s ;
    var_cas_s = (((((var_cas_inIndendation)._operator_concat (GGS_string (true, "COMMENT ")))._operator_concat (var_cas_discartedMessage))._operator_concat (GGS_string (true, "'")))._operator_concat (var_cas_commentString))._operator_concat (GGS_string (true, "' ")) ;
    var_cas_s._dotAssign_operation (var_cas_commentString.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_line (_inLexique COMMA_SOURCE_FILE_AT_LINE (135)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (135))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_commentString.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_column (_inLexique COMMA_SOURCE_FILE_AT_LINE (136)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (136))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_commentString.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_locationIndex (_inLexique COMMA_SOURCE_FILE_AT_LINE (137)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (137))) ;
    var_cas_s.appendCString ("\n") ;
    _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (138)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'element'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_element_xml_parsing_syntax_144_14_ (xml_parsing_lexique & _inLexique,
                                GGS_xmlNodeList  &var_cas_ioNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool var_cas_inDoNotCondenseWhiteSpaces,
                                const GGS_bool var_cas_inPrintDuringParsing,
                                const GGS_string var_cas_inIndendation) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  _inLexique._assignFromAttribute_tokenString (var_cas_name) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
  GGS_xmlAttributeMap  var_cas_attributeMap ;
  var_cas_attributeMap = GGS_xmlAttributeMap ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_xml_parsing_syntax_2 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_attributeName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3D) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeValue ;
          _inLexique._assignFromAttribute_tokenString (var_cas_attributeValue) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_value) COMMA_HERE) ;
          var_cas_attributeMap.modifier_insertKey (_inLexique, var_cas_attributeName, var_cas_attributeValue COMMA_SOURCE_FILE_AT_LINE (159)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  if ((var_cas_inPrintDuringParsing).isBuiltAndTrue ()) {
    GGS_string var_cas_s ;
    var_cas_s = var_cas_inIndendation ;
    var_cas_s.appendCString ("ELEMENT '") ;
    var_cas_s._dotAssign_operation (var_cas_name) ;
    var_cas_s.appendCString ("' ") ;
    var_cas_s._dotAssign_operation (var_cas_name.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)).reader_line (_inLexique COMMA_SOURCE_FILE_AT_LINE (165)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (165))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_name.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (166)).reader_column (_inLexique COMMA_SOURCE_FILE_AT_LINE (166)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (166))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_name.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_locationIndex (_inLexique COMMA_SOURCE_FILE_AT_LINE (167)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (167))) ;
    var_cas_s.appendCString (" {") ;
    {
      GGS_xmlAttributeMap::cEnumerator enumerator_4652 (var_cas_attributeMap, true) ;
      const GGS_xmlAttributeMap::cElement * operand_4652 = enumerator_4652.nextObject () ;
      if ((operand_4652 != NULL)) {
        bool _foreach_loop_4652 ;
        do{
          macroValidPointer (operand_4652) ;
          var_cas_s.appendCString ("'") ;
          var_cas_s._dotAssign_operation (operand_4652->mKey) ;
          var_cas_s.appendCString ("' ") ;
          var_cas_s._dotAssign_operation (operand_4652->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_line (_inLexique COMMA_SOURCE_FILE_AT_LINE (170)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (170))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4652->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (171)).reader_column (_inLexique COMMA_SOURCE_FILE_AT_LINE (171)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (171))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4652->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)).reader_locationIndex (_inLexique COMMA_SOURCE_FILE_AT_LINE (172)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (172))) ;
          var_cas_s.appendCString (" -> '") ;
          var_cas_s._dotAssign_operation (operand_4652->mInfo.value) ;
          var_cas_s.appendCString ("' ") ;
          var_cas_s._dotAssign_operation (operand_4652->mInfo.value.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (174)).reader_line (_inLexique COMMA_SOURCE_FILE_AT_LINE (174)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (174))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4652->mInfo.value.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)).reader_column (_inLexique COMMA_SOURCE_FILE_AT_LINE (175)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (175))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4652->mInfo.value.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_locationIndex (_inLexique COMMA_SOURCE_FILE_AT_LINE (176)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (176))) ;
          operand_4652 = enumerator_4652.nextObject () ;
          _foreach_loop_4652 = ((operand_4652 != NULL)) ;
          if (_foreach_loop_4652) {
            var_cas_s.appendCString (", ") ;
          }
        }while (_foreach_loop_4652) ;
      }
    }
    var_cas_s.appendCString ("}\n") ;
    _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (180)) ;
  }
  GGS_xmlNodeList  var_cas_nodeList ;
  var_cas_nodeList = GGS_xmlNodeList ::constructor_emptyList () ;
  switch (select_xml_parsing_syntax_3 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__2F_3E) COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3E) COMMA_HERE) ;
      nt_element_list_ (_inLexique, var_cas_nodeList, var_cas_inIncludeComments, var_cas_inDoNotCondenseWhiteSpaces, var_cas_inPrintDuringParsing, (var_cas_inIndendation)._operator_concat (GGS_string (true, " "))) ;
      GGS_lstring  var_cas_s ;
      var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (_inLexique COMMA_HERE) ;
      GGS_string var_cas_trimmedString ;
      var_cas_trimmedString = var_cas_s.ggs_string ().reader_stringByTrimmingWhiteSpaces (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)) ;
      if (((var_cas_trimmedString.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (197)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
        GGS_lstring  var_cas_ls ;
        if ((var_cas_inDoNotCondenseWhiteSpaces).isBuiltAndTrue ()) {
          var_cas_ls = var_cas_s ;
        }else{
          var_cas_ls = GGS_lstring ::constructor_new (_inLexique, var_cas_trimmedString, var_cas_s.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (202)) COMMA_HERE) ;
        }
        GGS_xmlNode  var_cas_node ;
        var_cas_node = GGS_xmlNode ::constructor_new (_inLexique, GGS_xmlNodeType::constructor_text (_inLexique COMMA_HERE), var_cas_ls, GGS_xmlAttributeMap ::constructor_emptyMap (_inLexique COMMA_HERE), GGS_xmlNodeList ::constructor_emptyList () COMMA_HERE) ;
        var_cas_nodeList._addAssign_operation (var_cas_node) ;
        if ((var_cas_inPrintDuringParsing).isBuiltAndTrue ()) {
          GGS_string var_cas_s ;
          var_cas_s = ((((var_cas_inIndendation)._operator_concat (GGS_string (true, "TEXT ")))._operator_concat (GGS_string (true, "'")))._operator_concat (var_cas_ls))._operator_concat (GGS_string (true, "' ")) ;
          var_cas_s._dotAssign_operation (var_cas_ls.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)).reader_line (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (213))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (var_cas_ls.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (214)).reader_column (_inLexique COMMA_SOURCE_FILE_AT_LINE (214)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (214))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (var_cas_ls.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (215)).reader_locationIndex (_inLexique COMMA_SOURCE_FILE_AT_LINE (215)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (215))) ;
          var_cas_s.appendCString ("\n") ;
          _inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (216)) ;
        }
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C_2F) COMMA_HERE) ;
      GGS_lstring  var_cas_closingName ;
      _inLexique._assignFromAttribute_tokenString (var_cas_closingName) ;
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
      if (((var_cas_closingName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (221)))._operator_isNotEqual (var_cas_name.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (221)))).isBuiltAndTrue ()) {
        var_cas_closingName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, ((((GGS_string (true, "incorrect closing tag </"))._operator_concat (var_cas_closingName))._operator_concat (GGS_string (true, "> instead of </")))._operator_concat (var_cas_name))._operator_concat (GGS_string (true, ">")) COMMA_SOURCE_FILE_AT_LINE (223)) ;
      }
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3E) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_xmlNode  var_cas_node ;
  var_cas_node = GGS_xmlNode ::constructor_new (_inLexique, GGS_xmlNodeType::constructor_element (_inLexique COMMA_HERE), var_cas_name, var_cas_attributeMap, var_cas_nodeList COMMA_HERE) ;
  var_cas_ioNodes._addAssign_operation (var_cas_node) ;
}

//---------------------------------------------------------------------------*

