//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'xml_parsing_syntax.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 29th, 2009, at 16h29'6"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "xml_parsing_syntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "xml_parsing_syntax.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'start_symbol'              *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_start_symbol_xml_parsing_syntax_31_19_ (xml_parsing_lexique & inLexique,
                                GGS_xmlNodeList  &var_cas_outRootNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool var_cas_inDoNotCondenseWhiteSpaces,
                                const GGS_bool var_cas_inPrintDuringParsing) {
  GGS_lstring  var_cas_s ;
  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  if (((var_cas_s.ggs_string ().reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (38)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("No character is allowed before XML header") COMMA_SOURCE_FILE_AT_LINE (40)) ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C_3F) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  inLexique._assignFromAttribute_tokenString (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_xml_parsing_syntax_0 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_attributeName ;
          inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3D) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeValue ;
          inLexique._assignFromAttribute_tokenString (var_cas_attributeValue) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_value) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3F_3E) COMMA_HERE) ;
  var_cas_outRootNodes = GGS_xmlNodeList ::constructor_emptyList () ;
  nt_element_list_ (inLexique, var_cas_outRootNodes, var_cas_inIncludeComments, var_cas_inDoNotCondenseWhiteSpaces, var_cas_inPrintDuringParsing, GGS_string ("")) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Implementation of routine "addText"                     *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_addText (C_Compiler & inLexique,
                                GGS_xmlNodeList  & var_cas_ioNodes,
                                const GGS_bool  var_cas_inDoNotCondenseWhiteSpaces,
                                const GGS_bool  var_cas_inPrintDuringParsing,
                                const GGS_string  var_cas_inIndendation COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_addText at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_s ;
  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (inLexique COMMA_HERE) ;
  GGS_string var_cas_trimmedString ;
  var_cas_trimmedString = var_cas_s.ggs_string ().reader_stringByTrimmingWhiteSpaces (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  if (((var_cas_trimmedString.reader_length (inLexique COMMA_SOURCE_FILE_AT_LINE (72)))._operator_strictSup (GGS_uint (0U))).isBuiltAndTrue ()) {
    GGS_lstring  var_cas_ls ;
    if ((var_cas_inDoNotCondenseWhiteSpaces).isBuiltAndTrue ()) {
      var_cas_ls = var_cas_s ;
    }else{
      var_cas_ls = GGS_lstring ::constructor_new (inLexique, var_cas_trimmedString, var_cas_s.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (77)) COMMA_HERE) ;
    }
    GGS_xmlNode  var_cas_node ;
    var_cas_node = GGS_xmlNode ::constructor_new (inLexique, GGS_xmlNodeType::constructor_text (inLexique COMMA_HERE), var_cas_ls, GGS_xmlAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_xmlNodeList ::constructor_emptyList () COMMA_HERE) ;
    var_cas_ioNodes._addAssign_operation (var_cas_node) ;
    if ((var_cas_inPrintDuringParsing).isBuiltAndTrue ()) {
      GGS_string var_cas_s ;
      var_cas_s = ((((var_cas_inIndendation)._operator_concat (GGS_string ("TEXT ")))._operator_concat (GGS_string ("'")))._operator_concat (var_cas_ls))._operator_concat (GGS_string ("' ")) ;
      var_cas_s._dotAssign_operation (var_cas_ls.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (88)).reader_line (inLexique COMMA_SOURCE_FILE_AT_LINE (88)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (88))) ;
      var_cas_s.appendCString (":") ;
      var_cas_s._dotAssign_operation (var_cas_ls.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_column (inLexique COMMA_SOURCE_FILE_AT_LINE (89)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (89))) ;
      var_cas_s.appendCString (":") ;
      var_cas_s._dotAssign_operation (var_cas_ls.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (90)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (90)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (90))) ;
      var_cas_s.appendCString ("\n") ;
      inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (91)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_addText\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'element_list'              *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_element_list_xml_parsing_syntax_98_19_ (xml_parsing_lexique & inLexique,
                                GGS_xmlNodeList  &var_cas_ioNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool var_cas_inDoNotCondenseWhiteSpaces,
                                const GGS_bool var_cas_inPrintDuringParsing,
                                const GGS_string var_cas_inIndendation) {
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_repeat_xml_parsing_syntax_1 (inLexique)) {
        case 2 : {
          ::routine_addText (inLexique,  var_cas_ioNodes,  var_cas_inDoNotCondenseWhiteSpaces,  var_cas_inPrintDuringParsing,  var_cas_inIndendation COMMA_SOURCE_FILE_AT_LINE (107)) ;
          nt_element_ (inLexique, var_cas_ioNodes, var_cas_inIncludeComments, var_cas_inDoNotCondenseWhiteSpaces, var_cas_inPrintDuringParsing, var_cas_inIndendation) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'element'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_element_xml_parsing_syntax_125_14_ (xml_parsing_lexique & inLexique,
                                GGS_xmlNodeList  &var_cas_ioNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool /* var_cas_inDoNotCondenseWhiteSpaces */,
                                const GGS_bool var_cas_inPrintDuringParsing,
                                const GGS_string var_cas_inIndendation) {
  GGS_lstring  var_cas_commentString ;
  inLexique._assignFromAttribute_tokenString (var_cas_commentString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_comment) COMMA_HERE) ;
  if ((var_cas_inIncludeComments).isBuiltAndTrue ()) {
    GGS_xmlNode  var_cas_node ;
    var_cas_node = GGS_xmlNode ::constructor_new (inLexique, GGS_xmlNodeType::constructor_comment (inLexique COMMA_HERE), var_cas_commentString, GGS_xmlAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE), GGS_xmlNodeList ::constructor_emptyList () COMMA_HERE) ;
    var_cas_ioNodes._addAssign_operation (var_cas_node) ;
  }
  if ((var_cas_inPrintDuringParsing).isBuiltAndTrue ()) {
    GGS_string var_cas_discartedMessage ;
    if ((var_cas_inIncludeComments).isBuiltAndTrue ()) {
      var_cas_discartedMessage = GGS_string ("") ;
    }else{
      var_cas_discartedMessage = GGS_string ("(discarted) ") ;
    }
    GGS_string var_cas_s ;
    var_cas_s = (((((var_cas_inIndendation)._operator_concat (GGS_string ("COMMENT ")))._operator_concat (var_cas_discartedMessage))._operator_concat (GGS_string ("'")))._operator_concat (var_cas_commentString))._operator_concat (GGS_string ("' ")) ;
    var_cas_s._dotAssign_operation (var_cas_commentString.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (150)).reader_line (inLexique COMMA_SOURCE_FILE_AT_LINE (150)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_commentString.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_column (inLexique COMMA_SOURCE_FILE_AT_LINE (151)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (151))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_commentString.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (152)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (152)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (152))) ;
    var_cas_s.appendCString ("\n") ;
    inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (153)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//               Implementation of production rule 'element'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void xml_parsing_syntax::
pr_element_xml_parsing_syntax_159_14_ (xml_parsing_lexique & inLexique,
                                GGS_xmlNodeList  &var_cas_ioNodes,
                                const GGS_bool var_cas_inIncludeComments,
                                const GGS_bool var_cas_inDoNotCondenseWhiteSpaces,
                                const GGS_bool var_cas_inPrintDuringParsing,
                                const GGS_string var_cas_inIndendation) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  inLexique._assignFromAttribute_tokenString (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
  GGS_xmlAttributeMap  var_cas_attributeMap ;
  var_cas_attributeMap = GGS_xmlAttributeMap ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_repeat_xml_parsing_syntax_2 (inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_attributeName ;
          inLexique._assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3D) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeValue ;
          inLexique._assignFromAttribute_tokenString (var_cas_attributeValue) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_value) COMMA_HERE) ;
          var_cas_attributeMap.modifier_insertKey (inLexique, var_cas_attributeName, var_cas_attributeValue COMMA_SOURCE_FILE_AT_LINE (174)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
  if ((var_cas_inPrintDuringParsing).isBuiltAndTrue ()) {
    GGS_string var_cas_s ;
    var_cas_s = var_cas_inIndendation ;
    var_cas_s.appendCString ("ELEMENT '") ;
    var_cas_s._dotAssign_operation (var_cas_name) ;
    var_cas_s.appendCString ("' ") ;
    var_cas_s._dotAssign_operation (var_cas_name.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_line (inLexique COMMA_SOURCE_FILE_AT_LINE (180)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (180))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_name.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (181)).reader_column (inLexique COMMA_SOURCE_FILE_AT_LINE (181)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (181))) ;
    var_cas_s.appendCString (":") ;
    var_cas_s._dotAssign_operation (var_cas_name.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (182)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (182))) ;
    var_cas_s.appendCString (" {") ;
    {
      GGS_xmlAttributeMap::cEnumerator enumerator_4852 (var_cas_attributeMap, true) ;
      const GGS_xmlAttributeMap::cElement * operand_4852 = enumerator_4852.nextObject () ;
      if ((operand_4852 != NULL)) {
        bool _foreach_loop_4852 ;
        do{
          macroValidPointer (operand_4852) ;
          var_cas_s.appendCString ("'") ;
          var_cas_s._dotAssign_operation (operand_4852->mKey) ;
          var_cas_s.appendCString ("' ") ;
          var_cas_s._dotAssign_operation (operand_4852->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (185)).reader_line (inLexique COMMA_SOURCE_FILE_AT_LINE (185)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (185))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4852->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (186)).reader_column (inLexique COMMA_SOURCE_FILE_AT_LINE (186)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (186))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4852->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (187)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (187))) ;
          var_cas_s.appendCString (" -> '") ;
          var_cas_s._dotAssign_operation (operand_4852->mInfo.value) ;
          var_cas_s.appendCString ("' ") ;
          var_cas_s._dotAssign_operation (operand_4852->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (189)).reader_line (inLexique COMMA_SOURCE_FILE_AT_LINE (189)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4852->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_column (inLexique COMMA_SOURCE_FILE_AT_LINE (190)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (190))) ;
          var_cas_s.appendCString (":") ;
          var_cas_s._dotAssign_operation (operand_4852->mInfo.value.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_locationIndex (inLexique COMMA_SOURCE_FILE_AT_LINE (191)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (191))) ;
          operand_4852 = enumerator_4852.nextObject () ;
          _foreach_loop_4852 = ((operand_4852 != NULL)) ;
          if (_foreach_loop_4852) {
            var_cas_s.appendCString (", ") ;
          }
        }while (_foreach_loop_4852) ;
      }
    }
    var_cas_s.appendCString ("}\n") ;
    inLexique.printMessage (var_cas_s COMMA_SOURCE_FILE_AT_LINE (195)) ;
  }
  GGS_xmlNodeList  var_cas_nodeList ;
  var_cas_nodeList = GGS_xmlNodeList ::constructor_emptyList () ;
  switch (select_xml_parsing_syntax_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__2F_3E) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3E) COMMA_HERE) ;
      nt_element_list_ (inLexique, var_cas_nodeList, var_cas_inIncludeComments, var_cas_inDoNotCondenseWhiteSpaces, var_cas_inPrintDuringParsing, (var_cas_inIndendation)._operator_concat (GGS_string (" "))) ;
      ::routine_addText (inLexique,  var_cas_nodeList,  var_cas_inDoNotCondenseWhiteSpaces,  var_cas_inPrintDuringParsing,  var_cas_inIndendation COMMA_SOURCE_FILE_AT_LINE (210)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3C_2F) COMMA_HERE) ;
      GGS_lstring  var_cas_closingName ;
      inLexique._assignFromAttribute_tokenString (var_cas_closingName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1_name) COMMA_HERE) ;
      if (((var_cas_closingName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (218)))._operator_isNotEqual (var_cas_name.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (218)))).isBuiltAndTrue ()) {
        var_cas_closingName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("incorrect closing tag </"))._operator_concat (var_cas_closingName))._operator_concat (GGS_string ("> instead of </")))._operator_concat (var_cas_name))._operator_concat (GGS_string (">")) COMMA_SOURCE_FILE_AT_LINE (220)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (xml_parsing_lexique::xml_parsing_lexique_1__3E) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_xmlNode  var_cas_node ;
  var_cas_node = GGS_xmlNode ::constructor_new (inLexique, GGS_xmlNodeType::constructor_element (inLexique COMMA_HERE), var_cas_name, var_cas_attributeMap, var_cas_nodeList COMMA_HERE) ;
  var_cas_ioNodes._addAssign_operation (var_cas_node) ;
}

//---------------------------------------------------------------------------*

