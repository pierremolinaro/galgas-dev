semantics xml_parsing_semantics :

#------------------------------------------------------------*

routine listUnicodeCharacterProperties :
  message "---- Unassigned Unicode Characters\n" ;
  @uint unicodeValue := 0 ;
  @uint matchedValue := 0 ;
  @bool found := false ;
  loop 0x10000 - unicodeValue :
  while unicodeValue < 0x10000 do
    if [unicodeValue isUnicodeValueAssigned] then
      if found then
        message "  - [" . [matchedValue hexString] . ", " . [unicodeValue - 1 hexString] . "]\n" ;
        found := false ;
      end if ;
    elsif not found then
      matchedValue := unicodeValue ;
      found := true ;
    end if ;
    unicodeValue ++ ;
  end loop ;
  if found then
    message "  - [" . [matchedValue hexString] . ", " . [unicodeValue - 1 hexString] . "]\n" ;
    found := false ;
  end if ;

  message "---- Unicode Letters\n" ;
  unicodeValue := 0 ;
  loop 0x10000 - unicodeValue :
  while unicodeValue < 0x10000 do
    if [unicodeValue isUnicodeValueAssigned] then
      @char c [unicodeCharacterWithUnsigned! unicodeValue] ;
      if [c isUnicodeLetter] then
        message "  '" . [c string]
          . "' (" . [unicodeValue hexString]
          . "), name: '" . [c unicodeName]
          . "', to upper: '" . [[c unicodeToUpper] string]
          . "', to lower: '" . [[c unicodeToLower] string]
          . "'\n" ;
      end if ;
    end if ;
    unicodeValue ++ ;
  end loop ;

  message "---- Unicode Numbers\n" ;
  unicodeValue := 0 ;
  loop 0x10000 - unicodeValue :
  while unicodeValue < 0x10000 do
    if [unicodeValue isUnicodeValueAssigned] then
      @char c [unicodeCharacterWithUnsigned! unicodeValue] ;
      if [c isUnicodeNumber] then
        message "  '" . [c string] . "' (" . [unicodeValue hexString] . "), name: '" . [c unicodeName] . "'\n" ;
      end if ;
    end if ;
    unicodeValue ++ ;
  end loop ;

  message "---- Unicode Separators\n" ;
  unicodeValue := 0 ;
  loop 0x10000 - unicodeValue :
  while unicodeValue < 0x10000 do
    if [unicodeValue isUnicodeValueAssigned] then
      @char c [unicodeCharacterWithUnsigned! unicodeValue] ;
      if [c isUnicodeSeparator] then
        message "  '" . [c string] . "' (" . [unicodeValue hexString] . "), name: '" . [c unicodeName] . "'\n" ;
      end if ;
    end if ;
    unicodeValue ++ ;
  end loop ;

  message "---- Unicode Punctuation\n" ;
  unicodeValue := 0 ;
  loop 0x10000 - unicodeValue :
  while unicodeValue < 0x10000 do
    if [unicodeValue isUnicodeValueAssigned] then
      @char c [unicodeCharacterWithUnsigned! unicodeValue] ;
      if [c isUnicodePunctuation] then
        message "  - " . [unicodeValue hexString] . ", name: '" . [c unicodeName] . "'\n" ;
      end if ;
    end if ;
    unicodeValue ++ ;
  end loop ;

  message "---- Unicode Command\n" ;
  unicodeValue := 0 ;
  loop 0x10000 - unicodeValue :
  while unicodeValue < 0x10000 do
    if [unicodeValue isUnicodeValueAssigned] then
      @char c [unicodeCharacterWithUnsigned! unicodeValue] ;
      if [c isUnicodeCommand] then
        message "  - " . [unicodeValue hexString] . ", name: '" . [c unicodeName] . "'\n" ;
      end if ;
    end if ;
    unicodeValue ++ ;
  end loop ;

  message "---- Unicode Mark\n" ;
  unicodeValue := 0 ;
  loop 0x10000 - unicodeValue :
  while unicodeValue < 0x10000 do
    if [unicodeValue isUnicodeValueAssigned] then
      @char c [unicodeCharacterWithUnsigned! unicodeValue] ;
      if [c isUnicodeMark] then
        message "  - " . [unicodeValue hexString] . ", name: '" . [c unicodeName] . "'\n" ;
      end if ;
    end if ;
    unicodeValue ++ ;
  end loop ;

  message "---- Done.\n" ;
end routine ;

#------------------------------------------------------------*

end semantics ;