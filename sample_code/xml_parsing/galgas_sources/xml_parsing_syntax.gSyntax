syntax xml_parsing_syntax :
with "xml_parsing_lexique.gLexique" ;
import lexique xml_parsing_lexique in "xml_parsing_lexique.gLexique" ;
import semantics xml_types in "xml_types.gSemantics" ;

#----------------------------------------------------------------------------*

nonterminal <start_symbol>
  !@xmlNodeList outRootNodes
  ??@bool inIncludeComments
  ??@bool inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
;

nonterminal <element_list>
  ?!@xmlNodeList ioNodes
  ??@bool inIncludeComments
  ??@bool inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
  ??@string inIndendation
;
nonterminal <element>
  ?!@xmlNodeList ioNodes
  ??@bool inIncludeComments
  ??@bool inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
  ??@string inIndendation
;

#----------------------------------------------------------------------------*

rule <start_symbol>
  !@xmlNodeList outRootNodes
  ??@bool inIncludeComments
  ??@bool inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
:
  @lstring s := [@lstring retrieveAndResetTemplateString] ;
  if [s length] > 0 then
    error here: "No character is allowed before XML header" ;
  end if ;
#--- XML header
  $<?$ ;
  $name$ ? @lstring name ;
  repeat
  while 
    $name$ ? @lstring attributeName ;
    $=$ ;
    $value$ ? @lstring attributeValue ;
  end repeat ;
  $?>$ ;
#--- Element list
  outRootNodes := [@xmlNodeList emptyList] ;
  <element_list>
    !?outRootNodes
    !inIncludeComments
    !inDoNotCondenseWhiteSpaces
    !inPrintDuringParsing
    !""
  ;
end rule ;

#----------------------------------------------------------------------------*

routine addText
  ?!@xmlNodeList ioNodes
  ??@bool inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
  ??@string inIndendation
:
  @lstring s := [@lstring retrieveAndResetTemplateString] ;
  @string trimmedString := [s stringByTrimmingWhiteSpaces] ;
  if [trimmedString length] > 0 then
    @lstring ls ;
    if inDoNotCondenseWhiteSpaces then
      ls := s ;
    else
      ls := [@lstring new !trimmedString ![s location]] ;
    end if ;
    @xmlNode node [new
      ![@xmlNodeType text]
      !ls
      ![@xmlAttributeMap emptyMap]
      ![@xmlNodeList emptyList]
    ] ;
    ioNodes += !node ;
    if inPrintDuringParsing then
      @string s := inIndendation . "TEXT " . "'" . ls . "' " ;
      s .= [[[ls location] line] string] ;
      s .= ":" . [[[ls location] column] string] ;
      s .= ":" . [[[ls location] locationIndex] string] . "\n" ;
      message s ;
    end if ;
  end if ;
end routine ;

#----------------------------------------------------------------------------*

rule <element_list>
  ?!@xmlNodeList ioNodes
  ??@bool inIncludeComments
  ??@bool inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
  ??@string inIndendation
:
  repeat
  while
    addText
      !?ioNodes
      !inDoNotCondenseWhiteSpaces
      !inPrintDuringParsing
      !inIndendation
    ;
    <element>
      !? ioNodes
      !inIncludeComments
      !inDoNotCondenseWhiteSpaces
      !inPrintDuringParsing
      !inIndendation
    ;
  end repeat ;
end rule ;

#----------------------------------------------------------------------------*

rule <element>
  ?!@xmlNodeList ioNodes
  ??@bool inIncludeComments
  ??@bool unused inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
  ??@string inIndendation
:
  $comment$ ? @lstring commentString ;
  if inIncludeComments then
    @xmlNode node [new
      ![@xmlNodeType comment]
      ! commentString
      ![@xmlAttributeMap emptyMap]
      ![@xmlNodeList emptyList]
    ] ;
    ioNodes += !node ;
  end if ;
  if inPrintDuringParsing then
    @string discartedMessage ;
    if inIncludeComments then
      discartedMessage := "" ;
    else
      discartedMessage := "(discarted) " ;
    end if ;
    @string s := inIndendation . "COMMENT " . discartedMessage . "'" . commentString . "' " ;
    s .= [[[commentString location] line] string] ;
    s .= ":" . [[[commentString location] column] string] ;
    s .= ":" . [[[commentString location] locationIndex] string] . "\n" ;
    message s ;
  end if ;
end rule ;

#----------------------------------------------------------------------------*

rule <element>
  ?!@xmlNodeList ioNodes
  ??@bool inIncludeComments
  ??@bool inDoNotCondenseWhiteSpaces
  ??@bool inPrintDuringParsing
  ??@string inIndendation
:
  $<$ ;
  $name$ ? @lstring name ;
  @xmlAttributeMap attributeMap [emptyMap] ;
  repeat
  while 
    $name$ ? @lstring attributeName ;
    $=$ ;
    $value$ ? @lstring attributeValue ;
    [!?attributeMap insertKey !attributeName !attributeValue] ;
  end repeat ;

  if inPrintDuringParsing then
    @string s := inIndendation ;
    s .= "ELEMENT '" . name . "' " ;
    s .= [[[name location] line] string] ;
    s .= ":" . [[[name location] column] string] ;
    s .= ":" . [[[name location] locationIndex] string] . " {" ;
    foreach attributeMap do
      s .= "'" . lkey . "' " ;
      s .= [[[lkey location] line] string] ;
      s .= ":" . [[[lkey location] column] string] ;
      s .= ":" . [[[lkey location] locationIndex] string] ;
      s .= " -> '" . value . "' " ;
      s .= [[[value location] line] string] ;
      s .= ":" . [[[value location] column] string] ;
      s .= ":" . [[[value location] locationIndex] string] ;
    between s .= ", " ;
    end foreach ;
    s .= "}\n" ;
    message s ;
  end if ;

  @xmlNodeList nodeList [emptyList] ;
  select
    $/>$ ;
  or
    $>$ ;
    <element_list>
      !?nodeList
      !inIncludeComments
      !inDoNotCondenseWhiteSpaces
      !inPrintDuringParsing
      !inIndendation . " "
    ;
    addText
      !?nodeList
      !inDoNotCondenseWhiteSpaces
      !inPrintDuringParsing
      !inIndendation
    ;
    $</$ ;
    $name$ ? @lstring closingName ;
    if [closingName string] != [name string] then
      error closingName:"incorrect closing tag </" . closingName . "> instead of </" . name . ">" ;
    end if ;
    $>$ ;
  end select ;
  @xmlNode node [new
    ![@xmlNodeType element]
    !name
    !attributeMap
    !nodeList
  ] ;
  ioNodes += !node ;
end rule ;

#----------------------------------------------------------------------------*

end syntax ;
