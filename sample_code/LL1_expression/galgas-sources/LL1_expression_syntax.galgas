syntax LL1_expression_syntax (LL1_expression_lexique) %translate {

rule <StartSymbol> {
  <Expression> ?let @cExpression expressionTree ?let @uint value
  log expressionTree, value
}
  
rule <Constant>
  !@cExpression outExpressionTree
  !@uint outValue {
  $number$ ?let @luint cst
  send " "
  outExpressionTree = @cConst. new { !cst}
  outValue = [cst uint]
}
  
rule <Expression>
  !@cExpression outExpressionTree
  !@uint outValue {
  <Terme> ?outExpressionTree ?outValue
  repeat
  while 
    $+$ :> ?@string sep ?@string token
    send sep
    <Terme> ?let @cExpression rightOperand ?let @uint v
    send token
    outExpressionTree = @cAdd. new { ! outExpressionTree !rightOperand}
    outValue = outValue + v
  end
}
  
rule <Terme>
  !@cExpression outExpressionTree
  !@uint outValue {
  <Facteur> ?outExpressionTree ?outValue
  repeat
  while 
    $*$ :> ?@string sep ?@string token
    send sep
    <Facteur> ?let @cExpression rightOperand ?let @uint v
    send token
    outExpressionTree = @cMult. new { ! outExpressionTree !rightOperand}
    outValue = outValue * v
  end
}

rule <Facteur>
  !@cExpression outExpressionTree
  !@uint outValue {
  select
    $($ :> ?* ?*
    <Expression> ?outExpressionTree ?outValue
    $)$ :> ?* ?*
  or
    <Constant> ?outExpressionTree ?outValue
  end
}

}