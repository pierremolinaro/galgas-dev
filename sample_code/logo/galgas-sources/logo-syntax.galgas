syntax logo_syntax (logo_lexique) {

  //----------------------------------------------------------------------------------------------
  
  rule <pen_direction> ?!@instructionList il {
    select
      $UP$
      let @instruction ins = @penUp () 
      il += !ins
    or
      $DOWN$
      let @instruction ins = @penDown ()
      il += !ins
    end
  }

  //----------------------------------------------------------------------------------------------

  rule <instruction> ?!@routineMap ioTableRoutines ?!@instructionList il {
    select
      $FORWARD$
      $integer$ ?let @luint param
      let @instruction ins = @forward {!param}
      il += !ins
      $;$
    or
      $ROTATE$
      $integer$ ?let @luint param
      $;$
      let @instruction ins = @rotate {!param}
      il += !ins
    or
      $PEN$
      <pen_direction> !? il
      $;$
    or
      $CALL$
      $identifier$ ?let @lstring routineName indexing routineCall
      [ioTableRoutines searchKey !routineName ?let routineContent]
      for i in routineContent do
        il += !i.mInstruction
      end
      $;$
    end
  }

  //----------------------------------------------------------------------------------------------

  rule <instruction_list> ?!@routineMap ioTableRoutines ?!@instructionList il {
    repeat
    while
      <instruction> !? ioTableRoutines !? il
    end
  }

  //----------------------------------------------------------------------------------------------

  rule <routine_definition> ?!@routineMap ioTableRoutines {
    $ROUTINE$
    $identifier$ ?let @lstring routineName indexing routineDefinition
    $BEGIN$
    var @instructionList il = @()
    <instruction_list> !? ioTableRoutines !? il
    $END$
  //--- Insertion dans la table
    [!?ioTableRoutines insertKey !routineName !il]
  }

  //----------------------------------------------------------------------------------------------

  rule <start_symbol> {
  //-- Définition des routines
    $PROGRAM$
    var @routineMap tableRoutines = @()
    var @instructionList instructions = @()
    repeat
    while
      <routine_definition> !? tableRoutines
    end
  //--- Programme principal
    $BEGIN$
    <instruction_list> !? tableRoutines !? instructions
    $END$
    $.$
  //--- Compute SVG instructions
    var @bool pendown = false
    var @double x = 0.0
    var @double y = 0.0
    var @double angle = 0.0 # Angle en degrés
    var @string SVG = ""
    for i in instructions do
      [i.mInstruction codeDisplay !?pendown !?x !?y !?angle !?SVG]
    end
  //--- Output file
    let @string sourceFilePath = @string.stringWithSourceFilePath
    let @string code = [filewrapper generationTemplate.svg
      ![sourceFilePath lastPathComponent]
      !SVG
    ]
    [code writeToFile ![sourceFilePath stringByDeletingPathExtension] + ".svg"]
  }

  //----------------------------------------------------------------------------------------------

}

//————————————————————————————————————————————————————————————————————————————————————————————————

