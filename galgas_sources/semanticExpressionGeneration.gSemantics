#---------------------------------------------------------------------------*
#                                                                           *
#  Generate predefined types                                                *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticExpressionGeneration :
  import "semanticAnalysis.gSemantics" ;

#---------------------------------------------------------------------------*

reader @location sourceFile -> @string outResult
:
  outResult := "SOURCE_FILE (" . [[[selfcopy file] lastPathComponent] utf8Representation] . ", " .  [[selfcopy line] string] . ")" ;
end reader ;

#---------------------------------------------------------------------------*

reader @location commaSourceFile -> @string outResult
:
  outResult := " COMMA_" . [selfcopy sourceFile] ;
end reader ;

#---------------------------------------------------------------------------*

once compilerCppName ->@string outCompilerCppName :
  outCompilerCppName := "inCompiler" ;
end once ;

#---------------------------------------------------------------------------*

once syntaxDirectedTranslationResultVarName ->@string outName :
  outName := "ioSyntaxDirectedTranslationResult" ;
end once ;

#---------------------------------------------------------------------------*
#                                                                           *
#           D E T E C T    ' T R U E '    E X P R E S S I O N               *
#                                                                           *
#---------------------------------------------------------------------------*

reader @semanticExpressionForGeneration isTrueExpression
  ->@bool outResult
:
  outResult := false ;
end reader ;

#---------------------------------------------------------------------------*

override reader @trueExpressionForGeneration isTrueExpression
  ->@bool outResult
:
  outResult := true ;
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
#           E X P R E S S I O N    G E N E R A T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
;

#---------------------------------------------------------------------------*

override method @selfCopyInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "const GALGAS_" . [mType identifierRepresentation] . " " . outCppExpression . " = " . mSelfCppName . " ;\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !mSelfCppName] ;
end method ;

#---------------------------------------------------------------------------*

override method @hereExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  outCppExpression := compilerCppName [] . "->here ()" ;
end method ;

#---------------------------------------------------------------------------*

override method @trueExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_bool (true)" ;
end method ;

#---------------------------------------------------------------------------*

override method @falseExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_bool (false)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalCharExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_char (TO_UNICODE (" . [[mCharacter uint] string] . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  if mString == "" then
    outCppExpression := "GALGAS_string::makeEmptyString ()" ;
  else
    outCppExpression := "GALGAS_string (" . [mString utf8Representation] . ")" ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @literalDoubleExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_double (" . [mValue string]. ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalUIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_uint ((uint32_t) " . [mValue string]. "U)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalUInt64ExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_uint_36__34_ ((uint64_t) " . [mValue string]. "ULL)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalSIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_sint ((int32_t) " . [mValue string]. "L)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalSInt64ExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_sint_36__34_ ((int64_t) " . [mValue string]. "LL)" ;
end method ;

#---------------------------------------------------------------------------*

override method @defaultConstructorExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [mType addHeaderFileName !?ioInclusionSet] ;
  outCppExpression :=
    "GALGAS_"  . [mType identifierRepresentation]
  . "::constructor_"
  . [[mType mDefaultConstructorName] identifierRepresentation]
  . " (" . [mLocation sourceFile] . ")"
  ;
end method ;

#---------------------------------------------------------------------------*

override method @constructorExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [mType addHeaderFileName !?ioInclusionSet] ;
  @stringlist parameterList [emptyList] ;
  foreach mEffectiveParameterList do
    @string parameter ;
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?parameter] ;
    parameterList += !parameter ;  
  end foreach ;
  outCppExpression := "GALGAS_"  . [mConstructorType identifierRepresentation]
                   . "::constructor_" . [mConstructorName identifierRepresentation]
                   . " (" ;
  foreach parameterList
    do outCppExpression .= mValue ;
    between outCppExpression .= ", " ;
  end foreach ;
  @bool needsComma := [parameterList length] > 0 ;
  if mHasCompilerArgument then
    if needsComma then
      outCppExpression .= ", " ;
    end if ;
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    outCppExpression .= compilerCppName [] ;
    needsComma := true ;
  end if ;
  if needsComma then
    outCppExpression .= " " . [mLocation commaSourceFile] . ")" ;
  else
    outCppExpression .= [mLocation sourceFile] . ")" ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

#! option

#---------------------------------------------------------------------------*

override method @optionValueExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" . mOptionComponentName ;
  end if ;
  outCppExpression := "GALGAS_" . [mType identifierRepresentation] . " (gOption_" . [mOptionComponentName identifierRepresentation]
                   . "_" . [mOptionEntryName identifierRepresentation] . ".reader_value ())" ;
end method ;

#---------------------------------------------------------------------------*

override method @optionCharExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" . mOptionComponentName ;
  end if ;
  outCppExpression := "GALGAS_char (gOption_" . [mOptionComponentName identifierRepresentation]
                  . "_" . [mOptionEntryName identifierRepresentation] . ".reader_char ())" ;
end method ;

#---------------------------------------------------------------------------*

override method @optionStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" . mOptionComponentName ;
  end if ;
  outCppExpression := "GALGAS_string (gOption_" . [mOptionComponentName identifierRepresentation]
                  . "_" . [mOptionEntryName identifierRepresentation] . ".reader_string ())" ;
end method ;

#---------------------------------------------------------------------------*

override method @optionCommentExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  if not mOptionComponentIsPredefined then
    ioInclusionSet += !"option-" . mOptionComponentName ;
  end if ;
  outCppExpression := "gOption_" . [mOptionComponentName identifierRepresentation]
                  . "_" . [mOptionEntryName identifierRepresentation] . ".reader_comment ()" ;
end method ;

#---------------------------------------------------------------------------*

override method @concatExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".operator_concat ("
                   . rightTemporaryOperand . " " . [mLocation commaSourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @orExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".operator_or ("
                   . rightTemporaryOperand  . [mLocation commaSourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @xorExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".operator_xor ("
                  .  rightTemporaryOperand . [mLocation commaSourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @andExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".operator_and ("
                  . rightTemporaryOperand . [mLocation commaSourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @equalExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := "GALGAS_bool (kIsEqual, " . leftTemporaryOperand . ".objectCompare (" . rightTemporaryOperand . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @notEqualExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := "GALGAS_bool (kIsNotEqual, " . leftTemporaryOperand . ".objectCompare (" . rightTemporaryOperand . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @lowerOrEqualExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := "GALGAS_bool (kIsInfOrEqual, " . leftTemporaryOperand . ".objectCompare (" . rightTemporaryOperand . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @greaterOrEqualExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := "GALGAS_bool (kIsSupOrEqual, " . leftTemporaryOperand . ".objectCompare (" . rightTemporaryOperand . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @strictGreaterExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := "GALGAS_bool (kIsStrictSup, " . leftTemporaryOperand . ".objectCompare (" . rightTemporaryOperand . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @strictLowerExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := "GALGAS_bool (kIsStrictInf, " . leftTemporaryOperand . ".objectCompare (" . rightTemporaryOperand . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @rightShiftExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".right_shift_operation ("
                   . rightTemporaryOperand . [mLocation commaSourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @leftShiftExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".left_shift_operation ("
                   .  rightTemporaryOperand . [mLocation commaSourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @addExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".add_operation ("
                   . rightTemporaryOperand . ", " . compilerCppName [] . [mLocation commaSourceFile] . ")" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @subExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".substract_operation ("
                  . rightTemporaryOperand . ", " . compilerCppName [] . [mLocation commaSourceFile] . ")" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @multiplicationExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".multiply_operation ("
                  . rightTemporaryOperand . ", " . compilerCppName [] . [mLocation commaSourceFile] . ")" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @divisionExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".divide_operation ("
                  . rightTemporaryOperand . ", " . compilerCppName [] . [mLocation commaSourceFile] . ")" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @moduloExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mLeftExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppExpression := leftTemporaryOperand . ".modulo_operation ("
                  . rightTemporaryOperand . ", " . compilerCppName [] . [mLocation commaSourceFile] . ")" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @unaryMinusExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Left operand
  @string operand ;
  [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?operand] ;
#--- Generate Comparison
  outCppExpression := operand . ".operator_unary_minus ("
                  . compilerCppName [] . [mLocation commaSourceFile] . ")" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @notExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Operand
  @string operand ;
  [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?operand] ;
#--- Generate
  outCppExpression := operand . ".operator_not (" . [mLocation sourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @structFieldAccessExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
 # [[mExpression mType] addHeaderFileName !?ioInclusionSet] ;
  [mType addHeaderFileName !?ioInclusionSet] ;
#--- Operand
  [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ??@string operand] ;
#--- Generate
  outCppExpression := operand . ".mAttribute_" . [mStructFieldName identifierRepresentation] ;
end method ;

#---------------------------------------------------------------------------*

override method @tildeExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [[mExpression mType] addHeaderFileName !?ioInclusionSet] ;
#--- Operand
  @string operand ;
  [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?operand] ;
#--- Generate
  outCppExpression := operand . ".operator_tilde (" . [mLocation sourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @ifExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
#--- 'if' expression
  @string ifExpression ;
  [mIfExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?ifExpression] ;
#--- Result variable
  outCppExpression := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_" . [[mThenExpression mType] identifierRepresentation] . " " . outCppExpression . " ;\n" ;
  const @string testVar := "test_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "const enumGalgasBool " . testVar . " = " . ifExpression . ".boolEnum () ;\n" ;
  ioGeneratedCode .= "if (kBoolTrue == " . testVar . ") {\n" ;
#--- 'then' expression
  @string thenExpression ;
  [!?ioGeneratedCode incIndentation !2] ;
  [mThenExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?thenExpression] ;
  ioGeneratedCode .= outCppExpression . " = " . thenExpression . " ;\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
#--- 'else' expression
  ioGeneratedCode .= "}else if (kBoolFalse == " . testVar . ") {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  @string elseExpression ;
  [mElseExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?elseExpression] ;
  ioGeneratedCode .= outCppExpression . " = " . elseExpression . " ;\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalTypeInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset unused ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "GALGAS_type (& kTypeDescriptor_GALGAS_"
                  . [mTypeName identifierRepresentation] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @extractObjectInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
#--- Receiver expression
  [mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?@string receiverExpression
  ] ;
#--- Generate code
  outCppExpression := "GALGAS_" . [mType identifierRepresentation]
  . "::extractObject (" . receiverExpression
  . ", " . compilerCppName []
  . [mLocation commaSourceFile] . ")" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @testDynamicClassInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  const typeNameRepresentation := [[mCastType key] identifierRepresentation] ;
#--- Receiver expression
  [mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?@string receiverExpression
  ] ;
#--- Generated test
  [mCastType addHeaderFileName !?ioInclusionSet] ;
  switch mTypeComparisonKind
  when equal :
    outCppExpression := "GALGAS_bool (" . receiverExpression
      . ".dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_"
      . typeNameRepresentation . ")" ;
  when inherited :
    outCppExpression := "GALGAS_bool (NULL != dynamic_cast <const cPtr_"
    . typeNameRepresentation
    . " *> (" . receiverExpression . ".ptr ()))" ;
  when strictlyInherited :
    outCppExpression := "GALGAS_bool ((" . receiverExpression
      . ".dynamicTypeDescriptor () != & kTypeDescriptor_GALGAS_"
      . typeNameRepresentation . ") && (NULL != dynamic_cast <const cPtr_"
    . typeNameRepresentation
    . " *> (" . receiverExpression . ".ptr ())))" ;
  end switch ;
end method ;

#---------------------------------------------------------------------------*

override method @castInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  outCppExpression := "temp_" . [ioTemporaryVariableIndex string] ;
  ioTemporaryVariableIndex ++ ;
#--- Receiver expression
  [mReceiverExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ?@string receiverExpression
  ] ;
#---
  ioGeneratedCode .= "GALGAS_" . [mTypeName identifierRepresentation]
  . " " . outCppExpression . " ;\n"
  . "if (" . receiverExpression . ".isValid ()) {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
#--- 
  ioGeneratedCode .=
    "if (NULL != dynamic_cast <const cPtr_"
  . [mTypeName identifierRepresentation]
  . " *> (" . receiverExpression . ".ptr ())) {\n"
  . "  " . outCppExpression . " = (cPtr_" . [mTypeName identifierRepresentation] . " *) "
  . receiverExpression . ".ptr () ;\n"
  . "}else{\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  ioGeneratedCode .=
    compilerCppName [] . "->castError (\""
  . [mTypeName identifierRepresentation] 
  . "\", " . receiverExpression . ".ptr ()->classDescriptor ()"
  . [mLocation commaSourceFile] . ") ;\n"
  ;
  [!?ioGeneratedCode decIndentation !2] ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  ioGeneratedCode .= "}\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @varInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  [mType addHeaderFileName !?ioInclusionSet] ;
  outCppExpression := mCppVarName ;
  [!?ioUnusedVariableCppNameSet removeKey !mNameForCheckingFormalParameterUsing] ;
end method ;

#---------------------------------------------------------------------------*
#! Appels
#---------------------------------------------------------------------------*

override method @readerCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
#--- Receiver expression
  @string receiverCppName ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?receiverCppName] ;
#--- Reader operands
  @stringlist readerArgumentCppNameList [emptyList] ;
  foreach mExpressions do
    @string argumentCppName ;
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?argumentCppName] ;
    readerArgumentCppNameList += !argumentCppName ;
  end foreach ;
#--- Generate Reader call
  switch mKind
  when definedAsCategory :
 #   ioInclusionSet += !"getter-" . [[[mReceiverExpression mType] baseType] key] . "-" . mReaderName ;
    @unifiedTypeMapProxy baseType := [mReceiverExpression mType] ;
    @bool searching := true ;
    loop [@uint max] : while searching do
      if not [[baseType mSuperType] isNull] then
        if [[[baseType mSuperType] mReaderMap] hasKey !mReaderName] then
          baseType := [baseType mSuperType] ;
        else
          searching := false ;
        end if ;
      else
        searching := false ;
      end if ;  
    end loop ;
    ioInclusionSet += !"getter-" . [baseType key] . "-" . mReaderName ;
    [!?ioUnusedVariableCppNameSet removeKey !receiverCppName] ;
    if [[mReceiverExpression mType] mTypeKindEnum] == [@typeKindEnum classType] then
      outCppExpression := "callCategoryReader_" . [mReaderName identifierRepresentation]
         . " ((const cPtr_" . [[mReceiverExpression mType] identifierRepresentation] . " *) " . receiverCppName . ".ptr (), " ;
    else
      [[mReceiverExpression mType] addHeaderFileName !?ioInclusionSet] ;
      outCppExpression := "categoryReader_" . [mReaderName identifierRepresentation] . " (" . receiverCppName . ", " ;
    end if ;
  when definedAsMember :
    outCppExpression := receiverCppName ;
    foreach mFieldList do
      outCppExpression .= ".mAttribute_" . [mValue identifierRepresentation] ;
    end foreach ;
    [mType addHeaderFileName !?ioInclusionSet] ;
    outCppExpression .=  ".reader_" . [mReaderName identifierRepresentation] . " (" ;
  end switch ;
  foreach readerArgumentCppNameList
    do outCppExpression .= mValue ;
    between outCppExpression .= ", " ;
  end foreach ;
  if [readerArgumentCppNameList length] == 0 then
    if mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
      outCppExpression .= compilerCppName [] . " COMMA_" ;
    end if ;
  elsif mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    outCppExpression .= ", " . compilerCppName [] . " COMMA_" ;
  else
    outCppExpression .= " COMMA_" ;
  end if ;
  outCppExpression .= [mLocation sourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @functionCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  ioInclusionSet += !"func-" . mFunctionName ;
#---
  @stringlist parameterList [emptyList] ;
  foreach mExpressions do
    @string parameter ;
    [mExpression generateExpression !?ioGeneratedCode !?ioInclusionSet !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?parameter] ;
    parameterList += !parameter ;  
  end foreach ;
  outCppExpression := "function_" . [mFunctionName identifierRepresentation] . " (" ;
  foreach parameterList
    do outCppExpression .= mValue . ", " ;
  end foreach ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  outCppExpression .= compilerCppName [] ;
  outCppExpression .= [mLocation commaSourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*
#! Filewrapper
#---------------------------------------------------------------------------*

override method @filewrapperInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
  ioInclusionSet += !"filewrapper-" . mFilewrapperName ;
  outCppExpression := "GALGAS_filewrapper (gWrapperDirectory_0_" . [mFilewrapperName identifierRepresentation] . ")" ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperTemplateInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
#---
  ioInclusionSet += !"filewrapper-" . mFilewrapperName ;
  @stringlist parameterList [emptyList] ;
  foreach mActualOutputParameterList do
    @string parameter ;
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ?parameter
    ] ;
    parameterList += !parameter ;  
  end foreach ;
  outCppExpression := "GALGAS_string (filewrapperTemplate_" . [mFilewrapperName identifierRepresentation] . "_" . [mFilewrapperTemplateName identifierRepresentation]
                  . " (" . compilerCppName [] ;
  foreach parameterList do
    outCppExpression .= ", " . mValue ;
  end foreach ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  outCppExpression .= [mLocation commaSourceFile] . "))" ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperStaticPathInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
#---
  ioInclusionSet += !"filewrapper-" . mFilewrapperName ;
  outCppExpression := if mIsTextFile then "GALGAS_string" else "GALGAS_data" end ;
  outCppExpression .= " (gWrapperFileContent_" . [mFilewrapperFileIndex string] . "_" . [mFilewrapperName identifierRepresentation] . ")" ;
end method ;

#---------------------------------------------------------------------------*
#! Lexique introspection
#---------------------------------------------------------------------------*

override method @lexiqueIntrospectionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppExpression
:
#---
  ioInclusionSet += !"lexique-" . mLexiqueComponentName ;
  outCppExpression := "C_Lexique_" . [mLexiqueComponentName identifierRepresentation] . "::"
  . [mLexiqueReaderName identifierRepresentation]
  . "(" . [mLocation sourceFile] . ")" ;
end method ;

#---------------------------------------------------------------------------*
#! Collection value
#---------------------------------------------------------------------------*

abstract method @abstractCollectionValueElementForGeneration generateCollectionElementCode
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ??@string inCppTargetVar
;

#---------------------------------------------------------------------------*

override method @expressionCollectionValueForGeneration generateCollectionElementCode
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ??@string inCppTargetVar
:
  [mExpression generateExpression
    !?ioGeneratedCode
    !?ioInclusionSet
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    ??@string sourceVar
  ] ;
  ioGeneratedCode .= inCppTargetVar ;
  ioGeneratedCode .= ".dotAssign_operation (" . sourceVar . " " . [mExpressionLocation commaSourceFile] . ") ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @expressionListCollectionForGeneration generateCollectionElementCode
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ??@string inCppTargetVar
:
#--- Parameters
  var parameterList := @stringlist {} ;
  foreach mExpressionList do
    [mExpression generateExpression
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      ??@string parameter
    ] ;
    parameterList += !parameter ;  
  end foreach ;
#--- Receiver
  ioGeneratedCode .= inCppTargetVar ;
#--- Call add assign (+=) operator
  ioGeneratedCode .= ".addAssign_operation (" ;
  foreach parameterList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  ioGeneratedCode .= " " . [mExpressionLocation commaSourceFile] . ") ;\n"  ;






#  [mExpression generateExpression
#    !?ioGeneratedCode
#    !?ioInclusionSet
#    !?ioTemporaryVariableIndex
#    !?ioUnusedVariableCppNameSet
#    ??@string sourceVar
#  ] ;
#  ioGeneratedCode .= inCppTargetVar ;
#  ioGeneratedCode .= ".dotAssign_operation (" . sourceVar . " " . [mExpressionLocation commaSourceFile] . ") ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @expressionCollectionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@stringset ioInclusionSet
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppExpression
:
#---
  [mType addHeaderFileName !?ioInclusionSet] ;
#--- Create temporary variable variable
  outCppExpression := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
#--- Declare variable and apply default constructor
  ioGeneratedCode .= "GALGAS_" . [mType identifierRepresentation] . " " . outCppExpression
     . " = GALGAS_" .  [mType identifierRepresentation] . "::constructor_" . [[mType mDefaultConstructorName] identifierRepresentation] . " (" . [mLocation sourceFile] . ") ;\n" ;
#--- Add Elements
  for () in mElementList do
    [mElement generateCollectionElementCode
      !?ioGeneratedCode
      !?ioInclusionSet
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !outCppExpression
    ] ;    
  end for ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;

