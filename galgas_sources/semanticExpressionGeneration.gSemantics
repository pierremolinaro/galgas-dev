#---------------------------------------------------------------------------*
#                                                                           *
#  Generate predefined types                                                *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticExpressionGeneration :
  import "semanticAnalysis.gSemantics" ;

  import semantics semanticAnalysis in "semanticAnalysis.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#           E X P R E S S I O N    G E N E R A T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "?exp name?" ;
end method ;

#---------------------------------------------------------------------------*

override method @selfInExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@selfInExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @hereExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_location * " . outCppName 
                   . " = inCompiler->here (THERE) ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @trueExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@trueExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @falseExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@falseExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalCharExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@literalCharExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalStringExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @literalStringExpressionForGeneration\n" ;
  ioGeneratedCode .= "static const utf32 kString_" . [[mLocation locationIndex] string] . " ["
                   . [[mString length] + 1 string] . "] = " . [mString utf32Representation] . ";\n" ;
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_string * " . outCppName
                   . " = GALGAS_string::constructor_new (kString_"
                   . [[mLocation locationIndex] string]
                   . " COMMA_HERE) ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalDoubleExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@literalDoubleExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalUIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@literalUIntExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalUInt64ExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@literalUInt64ExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalSIntExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@literalSIntExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalSInt64ExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@literalSInt64ExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @constructorExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  @stringlist parameterList [emptyList] ;
  foreach mEffectiveParameterList do
    @string parameter ;
    [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?parameter] ;
    parameterList += !parameter ;  
  end foreach ;
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_" . [mType identifierRepresentation]
                   . " * " . outCppName
                   . " = GALGAS_"  . [mType identifierRepresentation]
                   . "::constructor_" . [mConstructorName identifierRepresentation]
                   . " (" ;
  foreach parameterList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  @bool needsComma := [parameterList length] > 0 ;
  if mHasCompilerArgument then
    if needsComma then
      ioGeneratedCode .= ", " ;
    end if ;
    ioGeneratedCode .= "inCompiler" ;
    needsComma := true ;
  end if ;
  if needsComma then
    ioGeneratedCode .= " COMMA_THERE) ;\n" ;
  else
    ioGeneratedCode .= "THERE) ;\n" ;
  end if ;
#--- Release constructor temporary parameters
  foreach parameterList do
    ioGeneratedCode .= "macroReleaseObject (" . mValue . ") ; // Release constructor temporary parameter\n" ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @readerCallExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @readerCallExpressionForGeneration\n" ;
#--- Receiver expression
  @string receiverCppName ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?receiverCppName] ;
#--- Reader operands
  @stringlist readerArgumentCppNameList [emptyList] ;
  foreach mExpressions do
    @string argumentCppName ;
    [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?argumentCppName] ;
    readerArgumentCppNameList += !argumentCppName ;
  end foreach ;
#--- Generate Reader call
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_" . [mType identifierRepresentation] . " * " . outCppName
                   . " = readerCall_" . [mReaderName identifierRepresentation] . " ("
                   . receiverCppName ;
  foreach readerArgumentCppNameList do
    ioGeneratedCode .= ", " . mValue ;
  end foreach ;
  ioGeneratedCode .= " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . receiverCppName . ") ; // Release temporary reader receiver\n" ;
  foreach readerArgumentCppNameList do
    ioGeneratedCode .= "macroReleaseObject (" . mValue . ") ; // Release temporary reader operand\n" ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @optionValueExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @optionValueExpressionForGeneration\n" ;
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_" . [mType identifierRepresentation] . " * " . outCppName 
                  . " = GALGAS_" . [mType identifierRepresentation] . "::constructor_new (gOption_" . [mOptionComponentName identifierRepresentation]
                  . "_" . [mOptionEntryName identifierRepresentation] . ".mValue COMMA_HERE) ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @optionCharExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@optionCharExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @optionStringExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@optionStringExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @optionCommentExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@optionCommentExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @concatExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @concatExpressionForGeneration\n" ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_" . [mType identifierRepresentation] . " * " . outCppName . " = GALGAS_string::operator_concat ("
                   . leftTemporaryOperand . ", " . rightTemporaryOperand . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . leftTemporaryOperand . ") ; // Release temporary left operand\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . rightTemporaryOperand . ") ; // Release temporary right operand\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @orExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@orExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @xorExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@xorExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @andExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@andExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @equalExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @equalExpressionForGeneration\n" ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_bool * " . outCppName . " = operator_isEqual ("
                   . leftTemporaryOperand . ", " . rightTemporaryOperand . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . leftTemporaryOperand . ") ; // Release temporary left operand\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . rightTemporaryOperand . ") ; // Release temporary right operand\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @notEqualExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @notEqualExpressionForGeneration\n" ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_bool * " . outCppName . " = operator_isNotEqual ("
                   . leftTemporaryOperand . ", " . rightTemporaryOperand . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . leftTemporaryOperand . ") ; // Release temporary left operand\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . rightTemporaryOperand . ") ; // Release temporary right operand\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @lowerOrEqualExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @lowerOrEqualExpressionForGeneration\n" ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_bool * " . outCppName . " = operator_infOrEqual ("
                   . leftTemporaryOperand . ", " . rightTemporaryOperand . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . leftTemporaryOperand . ") ; // Release temporary left operand\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . rightTemporaryOperand . ") ; // Release temporary right operand\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @greaterOrEqualExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @greaterOrEqualExpressionForGeneration\n" ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_bool * " . outCppName . " = operator_supOrEqual ("
                   . leftTemporaryOperand . ", " . rightTemporaryOperand . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . leftTemporaryOperand . ") ; // Release temporary left operand\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . rightTemporaryOperand . ") ; // Release temporary right operand\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @strictGreaterExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @strictGreaterExpressionForGeneration\n" ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_bool * " . outCppName . " = operator_strictSup ("
                   . leftTemporaryOperand . ", " . rightTemporaryOperand . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . leftTemporaryOperand . ") ; // Release temporary left operand\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . rightTemporaryOperand . ") ; // Release temporary right operand\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @strictLowerExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  ioGeneratedCode .= "//--- @strictLowerExpressionForGeneration\n" ;
#--- Left operand
  @string leftTemporaryOperand ;
  [mLeftExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?leftTemporaryOperand] ;
#--- Right operand
  @string rightTemporaryOperand ;
  [mRightExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?rightTemporaryOperand] ;
#--- Generate Comparison
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_bool * " . outCppName . " = operator_strictInf ("
                   . leftTemporaryOperand . ", " . rightTemporaryOperand . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . leftTemporaryOperand . ") ; // Release temporary left operand\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . rightTemporaryOperand . ") ; // Release temporary right operand\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @rightShiftExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@rightShiftExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @leftShiftExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@leftShiftExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @addExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@addExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @subExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@subExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @multiplicationExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@multiplicationExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @divisionExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@divisionExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @moduloExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@moduloExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @unaryMinusExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@unaryMinusExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @notExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@notExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @complementExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@complementExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @ifExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@ifExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @functionCallExpressionForGeneration generateExpression
  ?!@string unused ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  !@string outCppName
:
  outCppName := "(@functionCallExpressionForGeneration generateExpression)" ;
end method ;

#---------------------------------------------------------------------------*

override method @varInExpressionForGeneration generateExpression
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  !@string outCppName
:
  foreach mStructFieldList do
    ioGeneratedCode .= "(handle field in @varInExpressionForGeneration)\n" ;
  end foreach ;
  outCppName := "temp_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "GALGAS_" . [mType identifierRepresentation] . " * " . outCppName . " = " . mCppVarName . " ;\n" ;
  ioGeneratedCode .= "macroRetainObject (" . outCppName . ") ;\n" ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
