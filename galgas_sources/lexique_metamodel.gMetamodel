#---------------------------------------------------------------------------*
#                                                                           *
#  'lexique' component metamodel                                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

metamodel lexique_metamodel root @lexiqueComponentRoot :

entity @lexiqueComponentRoot {
  @lstring mLexiqueComponentName ;
  @lexicalAttribute [] mLexicalAttributeList ;
  @lexicalStyle [] mLexicalStyleList ;
  @terminalDeclaration [] mTerminalDeclarationList ;
  @lexicalErrorMessageDeclaration [] mLexicalErrorMessageDeclarationList ;
  @lexicalListDeclaration [] mLexicalListDeclarationList ;
  @lexicalImplicitRule [] mLexicalImplicitRuleList ;
  @lexicalExplicitRule [] mLexicalExplicitRuleList ;
}

entity @lexicalImplicitRule {
  @lstring mListName ;
}

entity @lexicalErrorMessageDeclaration {
  @lstring mMessageName ;
  @lstring mMessageValue ;
}

entity @lexicalAttribute {
  @lstring mTypeName ;
  @lstring mName ;
}

entity @lexicalStyle {
  @lstring mName ;
  @lstring mComment ;
}

entity @terminalDeclaration {
  @lstring mName ;
  @lstringlist mSentAttributeList ;
  @lstring mErrorMessage ;
  @lstring mStyle ; # Empty string if no style
}

entity @lexicalListDeclaration {
  @lstring mName ;
  @lstring mStyle ; # Empty string if no style
  @lstring mErrorMessage ;
  @lstringlist mSentAttributeList ;
  @lexicalListEntry [] mEntryList ;  
}

entity @lexicalListEntry {
  @lstring mEntrySpelling ;
  @lstring mTerminalSpelling ;
}

entity @lexicalExplicitRule {
  @lexicalExpression mLexicalRuleExpression ;
  @lexicalInstruction [] mInstructionList ;
}

abstract entity @lexicalExpression {
}

entity @lexicalOrExpression extends @lexicalExpression {
  @lexicalExpression mLeftOperand ;
  @lexicalExpression mRightOperand ;
}

entity @lexicalCharacterMatch extends @lexicalExpression {
  @lchar mCharacter ;
}

entity @lexicalCharacterIntervalMatch extends @lexicalExpression {
  @lchar mLowerBound ;
  @lchar mUpperBound ;
}

entity @lexicalStringMatch extends @lexicalExpression {
  @lstring mString ;
}

entity @lexicalStringNotMatch extends @lexicalExpression {
  @lstring mString ;
  @lstring mErrorMessage ;
}

abstract entity @lexicalInstruction {
}

entity @lexicalStructuredSendInstruction extends @lexicalInstruction {
  @lexicalSendSearch [] mLexicalSendSearchList ;
  @lexicalSendDefaultAction mLexicalSendDefaultAction ;
}

entity @lexicalSimpleSendInstruction extends @lexicalInstruction {
  @lstring mSentTerminal ;
}

abstract entity @lexicalSendDefaultAction {
}

entity @lexicalSendTerminalByDefault extends @lexicalSendDefaultAction {
  @lstring mDefaultSentTerminal ;
}

entity @lexicalErrorByDefault extends @lexicalSendDefaultAction {
  @lstring mDefaultErrorMessageName ;
}

entity @lexicalSendSearch {
  @lstring mAttributeName ;
  @lstring mSearchListName ;
}

entity @lexicalRepeatInstruction extends @lexicalInstruction {
  @lexicalInstruction [] mRepeatedInstructionList ;
  @lexicalWhileBranch [1, *] mLexicalWhileBranchList ;
}

entity @lexicalWhileBranch {
  @lexicalExpression mWhileExpression ;
  @lexicalInstruction [] mWhileInstructionList ;
}

entity @lexicalSelectInstruction extends @lexicalInstruction {
  @lexicalSelectBranch [2, *] mLexicalWhileBranchList ;
  @lexicalInstruction [] mDefaultInstructionList ;
}

entity @lexicalSelectBranch {
  @lexicalExpression mSelectExpression ;
  @lexicalInstruction [] mSelectInstructionList ;
}

entity @lexicalActionInstruction extends @lexicalInstruction {
  @lstring mActionName ;
  @lexicalActualArgument [2, *] mActualArgumentList ;
  @lstringlist mErrorMessageList ;
}

abstract entity @lexicalActualArgument {
}

entity @lexicalAttributeArgument extends @lexicalActualArgument {
  @lstring mAttributeName ;
}

entity @lexicalCharacterArgument extends @lexicalActualArgument {
  @lchar mCharacter ;
}

entity @lexicalCurrentCharacterArgument extends @lexicalActualArgument {
}

entity @lexicalFunctionArgument extends @lexicalActualArgument {
  @lstring mFunctionName ;
  @lexicalActualArgument [1, *] mFunctionActualArgumentList ;
}

entity @lexicalDropInstruction extends @lexicalInstruction {
  @lstring mTerminalName ;
}

entity @lexicalErrorInstruction extends @lexicalInstruction {
  @lstring mErrorMessageName ;
}

entity @lexicalTagInstruction extends @lexicalInstruction {
  @lstring mTagName ;
}

entity @lexicalRewindInstruction extends @lexicalInstruction {
  @lstring mTagName ;
  @lstring mTerminalName ;
}

entity @lexicalLogInstruction extends @lexicalInstruction {
}


end metamodel ;