#---------------------------------------------------------------------------*
#                                                                           *
#  Treewalking for building type map of a semantics component               *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

treewalking buildTypeMapForSemantics (semanticsMetamodel) :
import "semanticsMetamodel.gMetamodel" ;
import semantics commonSemantics in "commonSemantics.gSemantics" ;
import semantics semanticsSemantics in "semanticsSemantics.gSemantics" ;

#---------------------------------------------------------------------------*

rule @semanticsComponentRoot
  ?@location inEndOfSourceFile
  !@typeMap outTypeMap
:
  outTypeMap := [@typeMap emptyMap] ;
#--- Enter builtin type
  [!?outTypeMap insertKey ![@lstring new !"string"    !here] ![@stringGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"char"      !here] ![@charGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"bool"      !here] ![@boolGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint"      !here] ![@uintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint"      !here] ![@sintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint64"    !here] ![@uint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint64"    !here] ![@sint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"double"    !here] ![@doubleGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lstring"   !here] ![@lstringGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lchar"     !here] ![@lcharGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lbool"     !here] ![@lboolGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint"     !here] ![@luintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint"     !here] ![@lsintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint64"   !here] ![@luint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint64"   !here] ![@lsint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"ldouble"   !here] ![@ldoubleGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"binaryset" !here] ![@binarysetGalgasType new]] ;
  [!?outTypeMap insertKey ![@lstring new !"stringset" !here] ![@stringsetGalgasType new]] ;
#--- Walk throught definition for building map
  call mSemanticDeclarationList !?outTypeMap ;
#--- Warn for undefined types
  message [[outTypeMap unsolvedIndexCount] string] . " unresolved indexes\n" ;
  if [outTypeMap unsolvedIndexCount] > 0 then
    @string m := [[outTypeMap unsolvedIndexCount] string] . " type" ;
    if [outTypeMap unsolvedIndexCount] == 1 then
      m := "1 type is not defined:" ;
    else
      m := [[outTypeMap unsolvedIndexCount] string] . " types are not defined:" ;
    end if ;
    foreach [outTypeMap unsolvedIndexKeyStringList] (@string kKey) :
      m .= "\n  - @" . kKey ;
    end foreach ;
    warning inEndOfSourceFile : m ;
  end if ;
end rule ;

#---------------------------------------------------------------------------*

rule @semanticDeclaration ?!@typeMap unused ioTypeMap :
end rule ;

#---------------------------------------------------------------------------*

rule @classDeclaration ?!@typeMap ioTypeMap :
#--- Super class index
  @typeMapIndex superClassIndex ;
  if [mSuperClassName length] == 0 then
    superClassIndex := [@typeMapIndex null] ;
  else
    [@typeMapIndex makeRegularIndex !mSuperClassName !?ioTypeMap ?superClassIndex] ;
  end if ;
#--- Attributes
  @attributeList attributeList [emptyList] ;
  call mAttributeList !?attributeList !?ioTypeMap ;
#--- Enter in type map
  @ACGalgasType t := [@classGalgasType new
    !mIsAbstract
    !mClassTypeName
    !superClassIndex
    !attributeList
  ] ;
  [!?ioTypeMap insertKey !mClassTypeName !t] ;
end rule ;

#---------------------------------------------------------------------------*

rule @listDeclaration ?!@typeMap ioTypeMap :
#--- Attributes
  @attributeList attributeList [emptyList] ;
  call mAttributeList !?attributeList !?ioTypeMap ;
#--- Enter in type map
  @ACGalgasType t := [@listGalgasType new
    !mListTypeName
    !attributeList
  ] ;
  [!?ioTypeMap insertKey !mListTypeName !t] ;
end rule ;

#---------------------------------------------------------------------------*

rule @attributeInCollection
  ?!@attributeList ioAttributeList
  ?!@typeMap ioTypeMap
:
  @typeMapIndex index ;
  [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioTypeMap ?index] ;
  ioAttributeList += !index !mAttributeName ;
end rule ;

#---------------------------------------------------------------------------*

end treewalking ;
