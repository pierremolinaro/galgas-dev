#---------------------------------------------------------------------------*
#                                                                           *
#  Type constructors                             *
#                                                                           *
#  Copyright (C) 2009, ..., 2012 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsConstructors :
  import "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterConstructorWithoutArgument
  ?!@constructorMap ioConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inConstructorName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapProxy returnedTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inReturnedTypeName ?returnedTypeIndex] ;
  [!?ioConstructorMap insertKey
    ![@lstring new !inConstructorName !here]
    ![@unifiedTypeMapProxyList emptyList]
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterConstructorWithArgument
  ?!@constructorMap ioConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inConstructorName
  ??@string inArgument1TypeName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapProxy returnedTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inReturnedTypeName ?returnedTypeIndex] ;
  @unifiedTypeMapProxy t ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inArgument1TypeName ?t] ;
  [!?ioConstructorMap insertKey
    ![@lstring new !inConstructorName !here]
    ![@unifiedTypeMapProxyList listWithValue !t]
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterConstructorWith2Arguments
  ?!@constructorMap ioConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inConstructorName
  ??@string inArgument1TypeName
  ??@string inArgument2TypeName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapProxy returnedTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inReturnedTypeName ?returnedTypeIndex] ;
  @unifiedTypeMapProxyList argumentTypeList [emptyList] ;
  @unifiedTypeMapProxy t ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inArgument1TypeName ?t] ;
  argumentTypeList += !t ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inArgument2TypeName ?t] ;
  argumentTypeList += !t ;
  [!?ioConstructorMap insertKey
    ![@lstring new !inConstructorName !here]
    !argumentTypeList
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterConstructorWith3Arguments
  ?!@constructorMap ioConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inConstructorName
  ??@string inArgument1TypeName
  ??@string inArgument2TypeName
  ??@string inArgument3TypeName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapProxy returnedTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inReturnedTypeName ?returnedTypeIndex] ;
  @unifiedTypeMapProxy t ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inArgument1TypeName ?t] ;
  @unifiedTypeMapProxyList argumentTypeList [emptyList] ;
  argumentTypeList += !t ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inArgument2TypeName ?t] ;
  argumentTypeList += !t ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inArgument3TypeName ?t] ;
  argumentTypeList += !t ;
  [!?ioConstructorMap insertKey
    ![@lstring new !inConstructorName !here]
    !argumentTypeList
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
  ] ;
end routine ;

#---------------------------------------------------------------------------*

override method @locationPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"nowhere" !"location" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @stringPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"retrieveAndResetTemplateString" !"string" !true ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"stringWithSymbolicLinkContents" !"string" !"string" !true ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"stringWithVersionString" !"string" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"stringWithSourceFilePath" !"string" !true ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"stringWithCurrentDirectory" !"string" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"stringWithMainFirstArgument" !"string" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"stringWithContentsOfFile" !"string" !"string" !true ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"stringWithCurrentDateTime" !"string" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"stringWithEnvironmentVariable" !"string" !"string" !true ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"stringWithEnvironmentVariableOrEmpty" !"string" !"string" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"CppLineComment" !"string" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"CppTitleComment" !"string" !"string" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"CppString" !"string" !"string" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"CppChar" !"char" !"string" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"componentsJoinedByString" !"stringlist" !"string" !"string" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"stringWithSequenceOfCharacters" !"char" !"uint" !"string" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @applicationPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
#--- Constructors for "bool" options
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"boolOptionNameList" !"2stringlist" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"boolOptionInvocationLetter" !"string" !"string" !"char" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"boolOptionInvocationString" !"string" !"string" !"string" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"boolOptionCommentString" !"string" !"string" !"string" !false ;
#--- Constructors for "uint" options
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"uintOptionNameList" !"2stringlist" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"uintOptionInvocationLetter" !"string" !"string" !"char" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"uintOptionInvocationString" !"string" !"string" !"string" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"uintOptionCommentString" !"string" !"string" !"string" !false ;
#--- Constructors for "string" options
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"stringOptionNameList" !"2stringlist" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"stringOptionInvocationLetter" !"string" !"string" !"char" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"stringOptionInvocationString" !"string" !"string" !"string" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"stringOptionCommentString" !"string" !"string" !"string" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @charPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"replacementCharacter" !"char" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"unicodeCharacterWithUnsigned" !"uint" !"char" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @uintPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"compilationMode" !"uint" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"max" !"uint" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"errorCount" !"uint" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"warningCount" !"uint" !false ;
  enterConstructorWith2Arguments !?outMap !?ioUnifiedTypeMap !"valueWithMask" !"uint" !"uint" !"uint" !true ;
end method ;

#---------------------------------------------------------------------------*

override method @sintPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"max" !"sint" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"min" !"sint" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @uint64PredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"max" !"uint64" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"uint64MaskWithCompressedBitString" !"string" !"uint64" !true ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"uint64BaseValueWithCompressedBitString" !"string"  !"uint64" !true ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"uint64WithBitString" !"string"  !"uint64" !true ;
end method ;

#---------------------------------------------------------------------------*

override method @sint64PredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"max" !"sint64" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"min" !"sint64" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @stringsetPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"emptySet" !"stringset" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"setWithString" !"string" !"stringset" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"setWithStringList" !"stringlist" !"stringset" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"setWithLStringList" !"lstringlist" !"stringset" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @binarysetPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"binarySetWithBit" !"uint" !"binaryset" !true ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"emptyBinarySet" !"binaryset" !false ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"fullBinarySet" !"binaryset" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"binarySetWithPredicateString" !"string" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithNotEqualComparison" !"uint" !"uint" !"uint" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithEqualComparison" !"uint" !"uint" !"uint" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithStrictLowerComparison" !"uint" !"uint" !"uint" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithStrictGreaterComparison" !"uint" !"uint" !"uint" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithLowerOrEqualComparison" !"uint" !"uint" !"uint" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithGreaterOrEqualComparison" !"uint" !"uint" !"uint" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithEqualToConstant" !"uint" !"uint" !"uint64" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithNotEqualToConstant" !"uint" !"uint" !"uint64" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithStrictLowerThanConstant" !"uint" !"uint" !"uint64" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithStrictGreaterThanConstant" !"uint" !"uint" !"uint64" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithLowerOrEqualToConstant" !"uint" !"uint" !"uint64" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithGreaterOrEqualToConstant" !"uint" !"uint" !"uint64" !"binaryset" !true ;
  enterConstructorWith3Arguments !?outMap !?ioUnifiedTypeMap !"binarySetWithITE" !"binaryset" !"binaryset" !"binaryset" !"binaryset" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @typePredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"typeList" !"typelist" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @dataPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"emptyData" !"data" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"dataWithContentsOfFile" !"string" !"data" !true ;
end method ;

#---------------------------------------------------------------------------*

override method @functionPredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"functionList" !"functionlist" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"functionWithName" !"string" !"function" !false ;
  enterConstructorWithArgument !?outMap !?ioUnifiedTypeMap !"isFunctionDefined" !"string" !"bool" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @doublePredefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@constructorMap outMap
:
  outMap := [@constructorMap emptyMap] ;
  enterConstructorWithoutArgument !?outMap !?ioUnifiedTypeMap !"pi" !"double" !false ;
  enterConstructorWithArgument    !?outMap !?ioUnifiedTypeMap !"doubleWithBinaryImage" !"uint64" !"double" !false ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
