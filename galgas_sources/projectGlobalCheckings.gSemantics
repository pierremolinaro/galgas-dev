#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS LL1 routines                                                      *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics projectGlobalCheckings :
  import "semanticsCompilation.gSemantics" ;
  import "predefinedTypes.gSemantics" ;
  import "projectMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#        M U L T I - M E T H O D   L I S T M A P                            *
#                                                                           *
#---------------------------------------------------------------------------*

listmap @genericCategoryMethodListMap (@lstringlist) ;

#---------------------------------------------------------------------------*
#                                                                           *
#  B U I L D    M U L T I - M E T H O D S    L I S M A P S                  *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticDeclarationAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
  ioAbstractCategoryMethodListMapAST +=
    ![mTypeName string]
    !mAbstractCategoryMethodName
  ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryMethodAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
  ioCategoryMethodListMap +=
    ![mTypeName string]
    !mCategoryMethodName
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
  ioOverridingCategoryMethodListMap +=
    ![mTypeName string]
    !mOverridingCategoryMethodName
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
  ioOverridingAbstractCategoryMethodListMap +=
    ![mTypeName string]
    !mOverridingCategoryMethodName
  ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
  ioAbstractCategoryReaderListMap +=
    ![mTypeName string]
    !mAbstractCategoryReaderName
  ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryReaderAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
  ioCategoryReaderListMap +=
    ![mTypeName string]
    !mCategoryReaderName
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryReaderListMap
:
  ioOverridingCategoryReaderListMap +=
    ![mTypeName string]
    !mOverridingCategoryReaderName
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST buildCategoryMethodListMaps
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryMethodListMapAST
  ?!@genericCategoryMethodListMap unused ioCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioOverridingAbstractCategoryMethodListMap
  ?!@genericCategoryMethodListMap unused ioAbstractCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioCategoryReaderListMap
  ?!@genericCategoryMethodListMap unused ioOverridingCategoryReaderListMap
  ?!@genericCategoryMethodListMap ioOverridingAbstractCategoryReaderListMap
:
  ioOverridingAbstractCategoryReaderListMap +=
    ![mTypeName string]
    !mAbstractCategoryReaderName
  ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D E S C E N D A N T    C L A S S    L I S T M A P                      *
#                                                                           *
#---------------------------------------------------------------------------*

listmap @descendantClassListMap (@unifiedTypeMapProxyList) ;

#---------------------------------------------------------------------------*
#                                                                           *
#  M U L T I    M E T H O D    M A P                                        *
#                                                                           *
# Used for checking a category-method is defined once for a type            *
#---------------------------------------------------------------------------*

map @categoryMethodMapForGlobalCheckings {
  insert insertKey error message "the '%K' category method is already declared in %L" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M U L T I    R E A D E R    M A P                                        *
#                                                                           *
# Used for checking a category-method is defined once for a type            *
#---------------------------------------------------------------------------*

map @categoryReaderMapForGlobalCheckings {
  insert insertKey error message "the '%K' category reader is already declared in %L" ;
}

#---------------------------------------------------------------------------*

function outputDirectory
  ??@lstring inSourceFile
->
  @string outOuputDirectory
:
  if [inSourceFile characterAtIndex !0] == '/' then
    outOuputDirectory := [inSourceFile stringByDeletingLastPathComponent] ;
    outOuputDirectory .= "/GALGAS_OUTPUT" ;
  else
    outOuputDirectory := "GALGAS_OUTPUT" ;
  end if ;
end function ;

#---------------------------------------------------------------------------*

routine checkCategoryMethodDefinitionForClass
  ??@string inClassNameForErrorSignaling
  ??@string inClassName
  ??@lstring inAbstractCategoryMethodName
  ??@descendantClassListMap inDescendantClassListMap
  ??@genericCategoryMethodListMap inOverridingCategoryMethodListMap
  ??@unifiedTypeMap inUnifiedTypeMap
:
  const @unifiedTypeMapProxyList descendantClasses := [inDescendantClassListMap listForKey !inClassName] ;
  foreach descendantClasses do
    const @lstring descendantClassName := [mType lkey] ;
    @lstringlist overridingMethods := [inOverridingCategoryMethodListMap listForKey ![descendantClassName string]] ;
    @bool found := false ;
    foreach overridingMethods while not found do
      found := [inAbstractCategoryMethodName string] == [mValue string] ;
    end foreach ;
    if not found then
      @bool isConcrete ;
      [inUnifiedTypeMap searchKey !descendantClassName ?isConcrete ?19*] ;
      if not isConcrete then # Does not work in GALGAS 1, mType is an undefined mapindex type
#      if not [mType mIsConcrete] then # Does not work in GALGAS 1, mType is an undefined mapindex type
        checkCategoryMethodDefinitionForClass
          !inClassNameForErrorSignaling
          ![descendantClassName string]
          !inAbstractCategoryMethodName
          !inDescendantClassListMap
          !inOverridingCategoryMethodListMap
          !inUnifiedTypeMap
        ;
      else
        error inAbstractCategoryMethodName: "an abstract category method '" . inAbstractCategoryMethodName . "' is defined for abstract class '@"
        . inClassNameForErrorSignaling
        . "', but concrete descendant class '@" . descendantClassName . "' does not implement this method" ; 
      end if ;
    end if ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine checkCategoryReaderDefinitionForClass
  ??@string inClassNameForErrorSignaling
  ??@string inClassName
  ??@lstring inAbstractCategoryReaderName
  ??@descendantClassListMap inDescendantClassListMap
  ??@genericCategoryMethodListMap inOverridingCategoryReaderListMap
  ??@unifiedTypeMap inUnifiedTypeMap
:
  const @unifiedTypeMapProxyList descendantClasses := [inDescendantClassListMap listForKey !inClassName] ;
  foreach descendantClasses do
    @lstring descendantClassName := [mType lkey] ;
    @lstringlist overridingReaders := [inOverridingCategoryReaderListMap listForKey ![descendantClassName string]] ;
    @bool found := false ;
    foreach overridingReaders while not found do
      found := [inAbstractCategoryReaderName string] == [mValue string] ;
    end foreach ;
    if not found then
      @bool isConcrete ;
      [inUnifiedTypeMap searchKey !descendantClassName ?isConcrete ?19*] ;
      if not isConcrete then # Does not work in GALGAS 1, mType is an undefined mapindex type
#      if not [mType mIsConcrete] then # Does not work in GALGAS 1, mType is an undefined mapindex type
        checkCategoryReaderDefinitionForClass
          !inClassNameForErrorSignaling
          ![descendantClassName string]
          !inAbstractCategoryReaderName
          !inDescendantClassListMap
          !inOverridingCategoryReaderListMap
          !inUnifiedTypeMap
        ;
      else
        error inAbstractCategoryReaderName: "an abstract category reader '" . inAbstractCategoryReaderName . "' is defined for abstract class '@"
        . inClassNameForErrorSignaling
        . "', but concrete descendant class '@" . descendantClassName . "' does not implement this reader" ; 
      end if ;
    end if ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine performProjectGlobalCheckings
  ??@parsedComponentStruct inParsedComponentStruct
  ??@location inEndOfSourceFile
:
  @semanticDeclarationListAST semanticDeclarationList [emptyList] ;
#------ Add predefined types to semantics declarations
  appendPredefinedTypesASTs !?semanticDeclarationList ;
#--- Build all declaration list
  foreach [inParsedComponentStruct mParsedSemanticsComponentMap] do
    semanticDeclarationList .= [mSemanticComponentRoot mSemanticDeclarationList] ;
  end foreach ;
#------ Generate declarations
  @semanticContext semanticContext ;
  buildSemanticContext
    !""
    !semanticDeclarationList
    !inEndOfSourceFile
    ?semanticContext
  ;
#------ Build descendant type list map
# For every type, a list of its directed descendants is associated
  @descendantClassListMap descendantClassListMap [emptyMap] ;
  foreach semanticContext->mTypeMap do
     if not [mSuperType isNull] then
       descendantClassListMap +=
         ![mSuperType key]
         ![@unifiedTypeMapProxy searchKey !semanticContext->mTypeMap !lkey]
       ;
     end if ;
  end foreach ;
#--- Build Category method listmaps
  @genericCategoryMethodListMap abstractCategoryMethodListMap [emptyMap] ;
  @genericCategoryMethodListMap categoryMethodListMap [emptyMap] ;
  @genericCategoryMethodListMap overridingCategoryMethodListMap [emptyMap];
  @genericCategoryMethodListMap overridingAbstractCategoryMethodListMap [emptyMap];
  @genericCategoryMethodListMap abstractCategoryReaderListMap [emptyMap] ;
  @genericCategoryMethodListMap categoryReaderListMap [emptyMap] ;
  @genericCategoryMethodListMap overridingCategoryReaderListMap [emptyMap];
  @genericCategoryMethodListMap overridingAbstractCategoryReaderListMap [emptyMap] ;
  foreach [inParsedComponentStruct mParsedSemanticsComponentMap] do
    foreach [mSemanticComponentRoot mSemanticDeclarationList] do
      [mSemanticDeclaration buildCategoryMethodListMaps
        !?abstractCategoryMethodListMap
        !?categoryMethodListMap
        !?overridingCategoryMethodListMap
        !?overridingAbstractCategoryMethodListMap
        !?abstractCategoryReaderListMap
        !?categoryReaderListMap
        !?overridingCategoryReaderListMap
        !?overridingAbstractCategoryReaderListMap
      ] ;
    end foreach ;
  end foreach ;
#------ Check Category methods
  if [@uint errorCount] == 0 then
  #--- A given abstract category method id defined only once for a class
    foreach abstractCategoryMethodListMap do
      @categoryMethodMapForGlobalCheckings categoryMethodMap [emptyMap] ;
      foreach mList do
        [!?categoryMethodMap insertKey !mValue] ;
      end foreach ;
    end foreach ;  
  #--- A given base category method id defined only once for a class
    foreach categoryMethodListMap do
      @categoryMethodMapForGlobalCheckings categoryMethodMap [emptyMap] ;
      foreach mList do
        [!?categoryMethodMap insertKey !mValue] ;
      end foreach ;
    end foreach ;  
  #--- A given overriding category method id defined only once for a class
    foreach overridingCategoryMethodListMap do
      @categoryMethodMapForGlobalCheckings categoryMethodMap [emptyMap] ;
      foreach mList do
        [!?categoryMethodMap insertKey !mValue] ;
      end foreach ;
    end foreach ;  
  #--- A given overriding abstract category method id defined only once for a class
    foreach overridingAbstractCategoryMethodListMap do
      @categoryMethodMapForGlobalCheckings categoryMethodMap [emptyMap] ;
      foreach mList do
        [!?categoryMethodMap insertKey !mValue] ;
      end foreach ;
    end foreach ;  
  #------ Check that for every abstract category method, an overridden category method defined in an concrete subclass
    foreach abstractCategoryMethodListMap do
      foreach mList do
        checkCategoryMethodDefinitionForClass
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingCategoryMethodListMap
          !semanticContext->mTypeMap
        ;
      end foreach ;
    end foreach ;
  #------ Check that for every abstract category method, an overridden category method defined in an concrete subclass
    foreach overridingAbstractCategoryMethodListMap do
      foreach mList do
        checkCategoryMethodDefinitionForClass
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingCategoryMethodListMap
          !semanticContext->mTypeMap
        ;
      end foreach ;
    end foreach ;
  #------ Check Category readers
##--- Check that for every abstract category reader, an overridden category reader
##    defined in an concrete subclass
  #--- A given abstract category reader id defined only once for a class
    foreach abstractCategoryReaderListMap do
      @categoryReaderMapForGlobalCheckings CategoryReaderMap [emptyMap] ;
      foreach mList do
        [!?CategoryReaderMap insertKey !mValue] ;
      end foreach ;
    end foreach ;  
  #--- A given base category reader id defined only once for a class
    foreach categoryReaderListMap do
      @categoryReaderMapForGlobalCheckings CategoryReaderMap [emptyMap] ;
      foreach mList do
        [!?CategoryReaderMap insertKey !mValue] ;
      end foreach ;
    end foreach ;  
  #--- A given overriding category reader id defined only once for a class
    foreach overridingCategoryReaderListMap do
      @categoryReaderMapForGlobalCheckings CategoryReaderMap [emptyMap] ;
      foreach mList do
        [!?CategoryReaderMap insertKey !mValue] ;
      end foreach ;
    end foreach ;  
  #--- Check every abstract category reader is implemented by every inherited concrete type
    foreach abstractCategoryReaderListMap do
      foreach mList do
        checkCategoryReaderDefinitionForClass
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingCategoryReaderListMap
          !semanticContext->mTypeMap
        ;
      end foreach ;
    end foreach ;
  #--- Check every abstract category reader is implemented by every inherited concrete type
    foreach overridingAbstractCategoryReaderListMap do
      foreach mList do
        checkCategoryReaderDefinitionForClass
          !key
          !key
          !mValue
          !descendantClassListMap
          !overridingCategoryReaderListMap
          !semanticContext->mTypeMap
        ;
      end foreach ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;

#---------------------------------------------------------------------------*
