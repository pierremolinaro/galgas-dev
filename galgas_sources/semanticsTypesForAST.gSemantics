#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2012 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsTypesForAST :

#---------------------------------------------------------------------------*

abstract class @semanticExpressionAST {
}

#---------------------------------------------------------------------------*

list @semanticExpressionListAST {
  @semanticExpressionAST mExpression feature nogetter ;
  @location mEndOfExpressionLocation feature nogetter ;
}

#---------------------------------------------------------------------------*

class @selfCopyInExpressionAST extends @semanticExpressionAST {
  @location mSelfLocation ;
}

#---------------------------------------------------------------------------*

class @hereExpressionAST extends @semanticExpressionAST {
  @location mLocation ;
}

#---------------------------------------------------------------------------*

class @trueExpressionAST extends @semanticExpressionAST {
  @location mLocation ;
}

#---------------------------------------------------------------------------*

class @falseExpressionAST extends @semanticExpressionAST {
  @location mLocation ;
}

#---------------------------------------------------------------------------*

class @literalCharExpressionAST extends @semanticExpressionAST {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @literalStringExpressionAST extends @semanticExpressionAST {
  @location mLocation ;
  @stringlist mStringSequence ;
}

#---------------------------------------------------------------------------*

class @literalDoubleExpressionAST extends @semanticExpressionAST {
  @ldouble mValue ;
}

#---------------------------------------------------------------------------*

class @literalUIntExpressionAST extends @semanticExpressionAST {
  @luint mValue ;
}

#---------------------------------------------------------------------------*

class @literalUInt64ExpressionAST extends @semanticExpressionAST {
  @luint64 mValue ;
}

#---------------------------------------------------------------------------*

class @literalSIntExpressionAST extends @semanticExpressionAST {
  @lsint mValue ;
}

#---------------------------------------------------------------------------*

class @literalSInt64ExpressionAST extends @semanticExpressionAST {
  @lsint64 mValue ;
}

#---------------------------------------------------------------------------*

class @constructorExpressionAST extends @semanticExpressionAST {
  @lstring mTypeName ;
  @lstring mConstructorName ;
  @semanticExpressionListAST mExpressions ;
}

#---------------------------------------------------------------------------*

class @defaultConstructorExpressionAST extends @semanticExpressionAST {
  @lstring mTypeName ;
}

#---------------------------------------------------------------------------*

class @readerCallExpressionAST extends @semanticExpressionAST {
  @semanticExpressionAST mReceiver ;
  @lstring mReaderName ;
  @semanticExpressionListAST mExpressions ;
}

#---------------------------------------------------------------------------*

class @optionExpressionAST extends @semanticExpressionAST {
  @lstring mOptionComponentName ;
  @lstring mOptionEntryName ;
  @lstring mOptionReaderName ;
}

#---------------------------------------------------------------------------*

class @lexiqueIntrospectionExpressionAST extends @semanticExpressionAST {
  @lstring mLexiqueComponentName ;
  @lstring mLexiqueReaderName ;
}

#---------------------------------------------------------------------------*

class @concatExpressionAST,
      @orExpressionAST,
      @xorExpressionAST,
      @andExpressionAST,
      @equalExpressionAST,
      @notEqualExpressionAST,
      @lowerOrEqualExpressionAST,
      @greaterOrEqualExpressionAST,
      @strictGreaterExpressionAST,
      @strictLowerExpressionAST,
      @rightShiftExpressionAST,
      @leftShiftExpressionAST,
      @addExpressionAST,
      @subExpressionAST,
      @multiplicationExpressionAST,
      @divisionExpressionAST,
      @moduloExpressionAST extends @semanticExpressionAST {
  @location mOperatorLocation ;
  @semanticExpressionAST mLeftExpression ;
  @semanticExpressionAST mRightExpression ;
}

#---------------------------------------------------------------------------*

class @unaryMinusExpressionAST,
      @notExpressionAST,
      @complementExpressionAST extends @semanticExpressionAST {
  @location mOperatorLocation ;
  @semanticExpressionAST mExpression ;
}

#---------------------------------------------------------------------------*

class @structFieldAccessExpressionAST extends @semanticExpressionAST {
  @location mOperatorLocation ;
  @semanticExpressionAST mExpression ;
  @lstring mStructFieldName ;
}

#---------------------------------------------------------------------------*

class @ifExpressionAST extends @semanticExpressionAST {
  @location mOperatorLocation ;
  @semanticExpressionAST mIfExpression ;
  @semanticExpressionAST mThenExpression ;
  @semanticExpressionAST mElseExpression ;
}

#---------------------------------------------------------------------------*

class @functionCallExpressionAST extends @semanticExpressionAST {
  @lstring mFunctionName ;
  @semanticExpressionListAST mExpressions ;
}

#---------------------------------------------------------------------------*

class @varInExpressionAST extends @semanticExpressionAST {
  @lstring mVarName ;
}

#---------------------------------------------------------------------------*

class @literalTypeInExpressionAST extends @semanticExpressionAST {
  @lstring mLiteralTypeName ;
}

#---------------------------------------------------------------------------*

class @castInExpressionAST extends @semanticExpressionAST {
  @semanticExpressionAST mReceiverExpression ;
  @location mEndOfReceiverExpression ;
  @lstring mTypeName ;
}

#---------------------------------------------------------------------------*

enum @dynamicTypeComparisonKind {
  equal, # ==
  inherited, # >=
  strictlyInherited # >
}

#---------------------------------------------------------------------------*

class @testDynamicClassInExpressionAST extends @semanticExpressionAST {
  @semanticExpressionAST mReceiverExpression ;
  @location mEndOfReceiverExpression ;
  @dynamicTypeComparisonKind mTypeComparisonKind ;
  @lstring mTypeName ;
}

#---------------------------------------------------------------------------*

class @filewrapperObjectInstanciationInExpressionAST extends @semanticExpressionAST {
  @lstring mFilewrapperName ;
}

#---------------------------------------------------------------------------*

class @filewrapperInExpressionAST extends @semanticExpressionAST {
  @lstring mFilewrapperName ;
  @lstring mFilewrapperPath ;
}

#---------------------------------------------------------------------------*

class @filewrapperTemplateInExpressionAST extends @semanticExpressionAST {
  @lstring mFilewrapperName ;
  @lstring mFilewrapperTemplateName ;
  @semanticExpressionListAST mExpressions ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   F O R M A L    A R G U M E N T S    P A S S I N G    M O D E S          *
#                                                                           *
#---------------------------------------------------------------------------*

enum @formalArgumentPassingModeAST {
  argumentIn, argumentOut, argumentInOut, argumentConstantIn
}

#---------------------------------------------------------------------------*

reader @formalArgumentPassingModeAST string -> @string outResult :
  switch selfcopy
    when argumentConstantIn : outResult := "??" ;
    when argumentIn : outResult := "?" ;
    when argumentOut : outResult := "!" ;
    when argumentInOut : outResult := "?!" ;
  end switch ;
end reader ;

#---------------------------------------------------------------------------*

reader @formalArgumentPassingModeAST formalArgumentMessage -> @string outResult :
  switch selfcopy
    when argumentConstantIn : outResult := "a constant input (??) formal argument" ;
    when argumentIn : outResult := "an input (?) formal argument" ;
    when argumentOut : outResult := "an output (!) formal argument" ;
    when argumentInOut : outResult := "an input/output (?!) formal argument" ;
  end switch ;
end reader ;

#---------------------------------------------------------------------------*

reader @formalArgumentPassingModeAST formalArgumentString -> @string outResult :
  switch selfcopy
    when argumentConstantIn : outResult := "'??'" ;
    when argumentIn : outResult := "'?'" ;
    when argumentOut : outResult := "'!'" ;
    when argumentInOut : outResult := "'?!'" ;
  end switch ;
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R M A L    P A R A M E T E R    L I S T                              *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalParameterListAST {
  @formalArgumentPassingModeAST mFormalArgumentPassingMode feature nogetter ;
  @lstring mFormalArgumentTypeName feature nogetter ;
  @lstring mFormalArgumentName feature nogetter ;
  @bool mIsUnused feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R M A L    I N P U T    P A R A M E T E R    L I S T                 *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalInputParameterListAST {
  @lstring mFormalArgumentTypeName feature nogetter ;
  @lstring mFormalArgumentName feature nogetter ;
  @bool mIsUnused feature nogetter ;
  @bool mIsConstant feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    P A R A M E T E R                                         *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @actualParameterAST {
  @location mQualifierLocation ;
}

#---------------------------------------------------------------------------*

class @outputActualParameterAST extends @actualParameterAST {
  @semanticExpressionAST mOutputActualParameterExpression ;
  @location mEndOfExpressionLocation ;
}

#---------------------------------------------------------------------------*

class @outputInputActualParameterAST extends @actualParameterAST {
  @lstring mOutputInputActualParameterName ;
  @lstringlist mStructAttributeList ;
}

#---------------------------------------------------------------------------*

class @inputActualParameterAST extends @actualParameterAST {
  @lstring mInputActualParameterName ;
  @bool mIsContant ;
}

#---------------------------------------------------------------------------*

class @inputJokerActualParameterAST extends @actualParameterAST {
  @uint mJokerIndex ;
}

#---------------------------------------------------------------------------*

list @actualParameterListAST {
  @actualParameterAST mActualParameter feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    I N P U T    P A R A M E T E R    L I S T                 *
#                                                                           *
#---------------------------------------------------------------------------*

list @actualInputParameterListAST {
  @lstring mActualParameterTypeName feature nogetter ; # Empty if no type
  @lstring mActualParameterName feature nogetter ;
}

#---------------------------------------------------------------------------*

abstract class @syntaxInstructionAST {
  @location mInstructionLocation ;
}

#---------------------------------------------------------------------------*

abstract class @semanticInstructionAST extends @syntaxInstructionAST {
}

#---------------------------------------------------------------------------*

list @semanticInstructionListAST {
  @semanticInstructionAST mInstruction feature nogetter ;
}

#---------------------------------------------------------------------------*

abstract class @semanticDeclarationAST {
  @bool mIsGlobal ;
}

#---------------------------------------------------------------------------*

list @semanticDeclarationListAST {
  @semanticDeclarationAST mSemanticDeclaration feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E X T E R N    R O U T I N E    D E C L A R A T I O N                  *
#                                                                           *
#---------------------------------------------------------------------------*

class @externRoutineDeclarationAST extends @semanticDeclarationAST {
  @lstring mRoutineName ;
  @formalParameterListAST mFormalArgumentList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @routineDeclarationAST extends @externRoutineDeclarationAST {
  @semanticInstructionListAST mRoutineInstructionList ;
  @location mEndOfRoutineInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E X T E R N    F U N C T I O N    D E C L A R A T I O N                *
#                                                                           *
#---------------------------------------------------------------------------*

class @externFunctionDeclarationAST extends @semanticDeclarationAST {
  @lstring mFunctionName ;
  @formalInputParameterListAST mFormalArgumentList ;
  @lstring mResultTypeName ;
  @lstring mResultVariableName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    F U N C T I O N    D E C L A R A T I O N                               *
#                                                                           *
#---------------------------------------------------------------------------*

class @functionDeclarationAST extends @externFunctionDeclarationAST {
  @semanticInstructionListAST mFunctionInstructionList ;
  @location mEndOfFunctionInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    O N C E    F U N C T I O N    D E C L A R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

class @onceFunctionDeclarationAST extends @semanticDeclarationAST {
  @lstring mFunctionName ;
  @lstring mResultTypeName ;
  @lstring mResultVariableName ;
  @semanticInstructionListAST mFunctionInstructionList ;
  @location mEndOfFunctionInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L O C A L    V A R I A B L E    D E C L A R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

class @localVariableDeclarationAST extends @semanticInstructionAST {
  @lstring mTypeName ;
  @lstring mVariableName ;
  @bool mIsUndefinedConstant ;
}

#---------------------------------------------------------------------------*

list @localVariableDeclarationListAST {
  @lstring mTypeName ;
  @lstring mVariableName ;
  @bool mIsUndefinedConstant ;
}

#---------------------------------------------------------------------------*

class @localVariableOrConstantDeclarationWithConstructorCallAST extends @semanticInstructionAST {
  @bool mIsConstant ;
  @lstring mTypeName ;
  @lstring mVariableName ;
  @lstring mConstructorName ;
  @semanticExpressionListAST mConstructorExpressions ;
}

#---------------------------------------------------------------------------*

class @localVariableOrConstantDeclarationWithDefaultConstructorAST extends @semanticInstructionAST {
  @bool mIsConstant ;
  @lstring mTypeName ;
  @lstring mVariableName ;
}

#---------------------------------------------------------------------------*

class @localVariableOrConstantDeclarationWithAssignmentAST extends @semanticInstructionAST {
  @bool mIsConstant ;
  @lstring mTypeName ;
  @lstring mVariableName ;
  @semanticExpressionAST mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A S S I G N M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @assignmentInstructionAST extends @semanticInstructionAST {
  @lstring mTargetVariableName ;
  @lstringlist mStructAttributeList ;
  @semanticExpressionAST mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S E L F    A S S I G N M E N T    I N S T R U C T I O N                  *
#                                                                           *
#---------------------------------------------------------------------------*

class @selfAssignmentInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C O N C A T    I N S T R U C T I O N                                     *
#                                                                           *
#  VARIABLE .= EXPRESSION ;                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @concatInstructionAST extends @semanticInstructionAST {
  @lstring mTargetVariableName ;
  @lstringlist mStructAttributeList ;
  @semanticExpressionAST mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S E L F    C O N C A T    I N S T R U C T I O N                          *
#                                                                           *
#  SELF .= EXPRESSION ;                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @selfConcatInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  ( O L D )    F O R E A C H    I N S T R U C T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

list @foreachInstructionEnumeratedObjectElementListAST {
  @lstring mTypeName feature nogetter ; # Empty string if joker
  @lstring mConstantName feature nogetter ;  # Empty string if joker
}

#---------------------------------------------------------------------------*

list @foreachInstructionEnumeratedObjectListAST {
  @lstring mEnumerationOrder feature nogetter ;
  @semanticExpressionAST mEnumeratedExpression feature nogetter ;
  @location mEndOfEnumerationExpression feature nogetter ;
  @foreachInstructionEnumeratedObjectElementListAST mElementList feature nogetter ;
  @location mEndOfElementList feature nogetter ;
  @bool mEndsWithEllipsis feature nogetter ;
  @lstring mPrefix feature nogetter ;
}

#---------------------------------------------------------------------------*

class @foreachInstructionAST extends @semanticInstructionAST {
  @foreachInstructionEnumeratedObjectListAST mEnumeratedObjectList ;
  @lstring mIndexVariableName ;
  @semanticExpressionAST mWhileExpression ;
  @location mEndOf_while_expression ;
  @semanticInstructionListAST mBeforeInstructionList ;
  @location mEndOf_before_branch ;
  @semanticInstructionListAST mBetweenInstructionList ;
  @location mEndOf_between_branch ;
  @semanticInstructionListAST mDoInstructionList ;
  @location mEndOf_do_branch ;
  @semanticInstructionListAST mAfterInstructionList ;
  @location mEndOf_after_branch ;
  @location mEndOf_foreach_instruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R E A C H    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

list @forInstructionEnumeratedObjectListAST {
  @bool mAscending feature nogetter ;
  @lstring mEnumerationVariable feature nogetter ;
  @semanticExpressionAST mEnumeratedExpression feature nogetter ;
  @location mEndOfEnumerationExpression feature nogetter ;
}

#---------------------------------------------------------------------------*

class @forInstructionAST extends @semanticInstructionAST {
  @forInstructionEnumeratedObjectListAST mEnumeratedObjectList ;
  @lstring mIndexVariableName ;
  @semanticExpressionAST mWhileExpression ;
  @location mEndOf_while_expression ;
  @semanticInstructionListAST mBeforeInstructionList ;
  @location mEndOf_before_branch ;
  @semanticInstructionListAST mBetweenInstructionList ;
  @location mEndOf_between_branch ;
  @semanticInstructionListAST mDoInstructionList ;
  @location mEndOf_do_branch ;
  @semanticInstructionListAST mAfterInstructionList ;
  @location mEndOf_after_branch ;
  @location mEndOf_foreach_instruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  I F    I N S T R U C T I O N                                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @ifInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST m_if_expression ;
  @semanticInstructionListAST m_then_instructionList ;
  @location mEndOf_then_branch ;
  @semanticInstructionListAST m_else_instructionList ;
  @location mEndOf_if_instruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M E T H O D    C A L L    I N S T R U C T I O N                          *
#                                                                           *
#---------------------------------------------------------------------------*

class @methodCallInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mReceiverExpression ;
  @lstring mMethodName ;
  @actualParameterListAST mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M O D I F I E R    C A L L    I N S T R U C T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

class @modifierCallInstructionAST extends @semanticInstructionAST {
  @lstring mReceiverName ;
  @lstringlist mReceiverStructAttributes ;
  @lstring mModifierName ;
  @actualParameterListAST mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  " S E L F "   M O D I F I E R    C A L L    I N S T R U C T I O N        *
#                                                                           *
#---------------------------------------------------------------------------*

class @selfModifierCallInstructionAST extends @semanticInstructionAST {
  @lstring mModifierName ;
  @actualParameterListAST mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E R R O R    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @errorInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mLocationExpression ;
  @semanticExpressionAST mMessageExpression ;
  @lstringlist mBuiltVariableList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    W A R N I N G    I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @warningInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mLocationExpression ;
  @semanticExpressionAST mMessageExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    C A L L    I N S T R U C T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

class @routineCallInstructionAST extends @semanticInstructionAST {
  @lstring mRoutineName ;
  @actualParameterListAST mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A T C H    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @matchEntryListAST {
  @bool mIsType feature nogetter ; # true if type, false if enum
  @lstring mTypeNameOrEnumerationConstantName feature nogetter ;
  @lstring mLocalConstantName feature nogetter ; # Empty string if no constant
}

#---------------------------------------------------------------------------*

list @matchInstructionBranchListAST {
  @matchEntryListAST mMatchEntryList feature nogetter ;
  @location mEndOfMatchEntryList feature nogetter ;
  @semanticInstructionListAST mMatchBranchInstructionList feature nogetter ;
  @location mEndOf_instructionList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @matchInstructionAST extends @semanticInstructionAST {
  @semanticExpressionListAST mMatchedExpressionList ;
  @matchInstructionBranchListAST mMatchInstructionBranchList ;
  @semanticInstructionListAST mElseInstructionList ;
  @location mEndOf_match_instruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A S T    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

list @castInstructionBranchListAST {
  @lstring mTypeName ;
  @lstring mConstantVarName ; # Empty string if no constant var
  @semanticInstructionListAST mInstructionList ;
  @bool mStrictTypeEquality ;
  @location mEndOfInstructions ;
}

#---------------------------------------------------------------------------*

class @structuredCastInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mCastExpression ;
  @castInstructionBranchListAST mCastInstructionBranchList ;
  @semanticInstructionListAST mElseInstructionList ;
  @location mEndOfCastInstruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    + =    I N S T R U C T I O N                                           *
#                                                                           *
#---------------------------------------------------------------------------*

class @plusEqualInstructionAST extends @semanticInstructionAST {
  @lstring mReceiverName ;
  @lstringlist mStructAttributeList ;
  @semanticExpressionListAST mExpressions ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    SELF +=    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @selfPlusEqualInstructionAST extends @semanticInstructionAST {
  @semanticExpressionListAST mExpressions ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    I N C R E M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @incrementInstructionAST extends @semanticInstructionAST {
  @lstring mReceiverName ;
  @lstringlist mStructAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E L F    I N C R E M E N T    I N S T R U C T I O N                  *
#                                                                           *
#---------------------------------------------------------------------------*

class @selfIncrementInstructionAST extends @semanticInstructionAST {
}

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C R E M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @decrementInstructionAST extends @semanticInstructionAST {
  @lstring mReceiverName ;
  @lstringlist mStructAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E L F    D E C R E M E N T    I N S T R U C T I O N                  *
#                                                                           *
#---------------------------------------------------------------------------*

class @selfDecrementInstructionAST extends @semanticInstructionAST {
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L O O P    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @loopInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mVariantExpression ;
  @location mEndOfVariantExpression ;
  @semanticInstructionListAST mFirstInstructions ;
  @location mEndOfFirstInstructions ;
  @semanticExpressionAST mLoopExpression ;
  @location mEndOfLoopExpression ;
  @semanticInstructionListAST mSecondInstructions ;
  @location mEndOfSecondInstructions ;
  @location mEndOfLoopInstruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M E S S A G E    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @messageInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L O G    I N S T R U C T I O N                                           *
#                                                                           *
#---------------------------------------------------------------------------*

list @logListAST {
  @lstring mLogMessage ;
  @semanticExpressionAST mLogExpression ;
}

#---------------------------------------------------------------------------*

class @logInstructionAST extends @semanticInstructionAST {
  @logListAST mLogList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  D R O P    I N S T R U C T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

class @dropInstructionAST extends @semanticInstructionAST {
  @lstringlist mDropList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  G R A M M A R    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @grammarInstructionAST extends @semanticInstructionAST {
  @lstring mGrammarComponentName ;
  @lstring mLabelName ;
  @semanticExpressionAST mSourceExpression ;
  @location mEndOfSourceExpression ;
  @bool mSourceExpressionIsFile ; # If false, mSourceExpression should be the source string
  @actualParameterListAST mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  W I T H    I N S T R U C T I O N    ( R E A D    A C C E S S )           *
#                                                                           *
#---------------------------------------------------------------------------*

class @readAccessWithInstructionAST extends @semanticInstructionAST {
  @lstring mPrefix ;
  @semanticExpressionAST mReceiverExpression ;
  @lstring mSearchMethodName ;
  @semanticExpressionAST mKeyExpression ;
  @semanticInstructionListAST mDoBranchInstructions ;
  @location mEndOf_do_instructions ;
  @semanticInstructionListAST mElseBranchInstructions ;
  @location mEndOf_else_instructions ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  W I T H    I N S T R U C T I O N   ( R E A D / W R I T E    A C C E S S )*
#                                                                           *
#---------------------------------------------------------------------------*

class @readWriteAccessWithInstructionAST extends @semanticInstructionAST {
  @lstring mPrefix ;
  @lstring mReceiverName ;
  @lstringlist mFieldList ;
  @lstring mAccessName ;
  @semanticExpressionAST mKeyExpression ;
  @semanticInstructionListAST m_do_Instructions ;
  @location mEndOf_do_instructions ;
  @semanticInstructionListAST m_else_Instructions ;
  @location mEndOf_else_instructions ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S W I T C H    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @switchBranchesAST {
  @lstringlist mSwitchConstantList ;
  @semanticInstructionListAST mInstructions ;
  @location mEndOfBranch ;
}

#---------------------------------------------------------------------------*

class @switchInstructionAST extends @semanticInstructionAST {
  @semanticExpressionAST mSwitchExpression ;
  @location mEndOfSwitchExpression ;
  @switchBranchesAST mBranches ;
  @location mEndOf_switch_instruction ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E    M E T H O D    C A L L    I N S T R U C T I O N               *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeMethodCallInstructionAST extends @semanticInstructionAST {
  @lstring mTypeName ;
  @lstring mMethodName ;
  @actualParameterListAST mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
# A B S T R A C T   C A T E G O R Y  M E T H O D    D E C L A R A T I O N   *
#                                                                           *
#---------------------------------------------------------------------------*

class @abstractCategoryMethodAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mAbstractCategoryMethodName ;
  @formalParameterListAST mAbstractCategoryMethodFormalParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#        C A T E G O R Y    M E T H O D    D E C L A R A T I O N            *
#                                                                           *
#---------------------------------------------------------------------------*

class @categoryMethodAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mCategoryMethodName ;
  @formalParameterListAST mCategoryMethodFormalParameterList ;
  @semanticInstructionListAST mCategoryMethodInstructionList ;
  @location mEndOfMethodLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O V E R R I D I N G    C A T E G O R Y    M E T H O D    D E C L .       *
#                                                                           *
#---------------------------------------------------------------------------*

class @overridingCategoryMethodAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mOverridingCategoryMethodName ;
  @formalParameterListAST mOverridingCategoryMethodFormalParameterList ;
  @semanticInstructionListAST mOverridingCategoryMethodInstructionList ;
  @location mEndOfMethodLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O V E R R I D I N G    A B S T R A C T    C A T E G O R Y    M E T H O D *
#                                                                           *
#---------------------------------------------------------------------------*

class @overridingAbstractCategoryMethodAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mOverridingCategoryMethodName ;
  @formalParameterListAST mOverridingCategoryMethodFormalParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
# A B S T R A C T   C A T E G O R Y  M O D I F I E R    D E C L A R A T I O N   *
#                                                                           *
#---------------------------------------------------------------------------*

class @abstractCategoryModifierAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mAbstractCategoryModifierName ;
  @formalParameterListAST mAbstractCategoryModifierFormalParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#        C A T E G O R Y    M O D I F I E R    D E C L A R A T I O N        *
#                                                                           *
#---------------------------------------------------------------------------*

class @categoryModifierAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mCategoryModifierName ;
  @formalParameterListAST mCategoryModifierFormalParameterList ;
  @semanticInstructionListAST mCategoryModifierInstructionList ;
  @location mEndOfModifierLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O V E R R I D I N G    C A T E G O R Y    M O D I F I E R    D E C L .   *
#                                                                           *
#---------------------------------------------------------------------------*

class @overridingCategoryModifierAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mOverridingCategoryModifierName ;
  @formalParameterListAST mOverridingCategoryModifierFormalParameterList ;
  @semanticInstructionListAST mOverridingCategoryModifierInstructionList ;
  @location mEndOfModifierLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O V E R R I D I N G    A B S T R A C T    C A T E G O R Y    M O D I F I E R *
#                                                                           *
#---------------------------------------------------------------------------*

class @overridingAbstractCategoryModifierAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mOverridingCategoryModifierName ;
  @formalParameterListAST mOverridingCategoryModifierFormalParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
# A B S T R A C T   C A T E G O R Y    R E A D E R    D E C L A R A T I O N *
#                                                                           *
#---------------------------------------------------------------------------*

class @abstractCategoryReaderAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mAbstractCategoryReaderName ;
  @formalInputParameterListAST mAbstractCategoryReaderFormalInputParameterList ;
  @lstring mAbstractCategoryReaderReturnedTypeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#        C A T E G O R Y    R E A D E R    D E C L A R A T I O N            *
#                                                                           *
#---------------------------------------------------------------------------*

class @categoryReaderAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mCategoryReaderName ;
  @formalInputParameterListAST mCategoryReaderFormalInputParameterList ;
  @lstring mCategoryReaderReturnedTypeName ;
  @lstring mCategoryReaderReturnedVariableName ;
  @semanticInstructionListAST mCategoryReaderInstructionList ;
  @location mEndOfReaderLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#O V E R R I D I N G   C A T E G O R Y   R E A D E R   D E C L A R A T I O N*
#                                                                           *
#---------------------------------------------------------------------------*

class @overridingCategoryReaderAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mOverridingCategoryReaderName ;
  @formalInputParameterListAST mOverridingCategoryReaderFormalInputParameterList ;
  @lstring mOverridingCategoryReaderReturnedTypeName ;
  @lstring mOverridingCategoryReaderReturnedVariableName ;
  @semanticInstructionListAST mOverridingCategoryReaderInstructionList ;
  @location mEndOfReaderLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
# O V E R R I D I N G    A B S T R A C T   C A T E G O R Y    R E A D E R   *
#                     D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @overridingAbstractCategoryReaderAST extends @semanticDeclarationAST {
  @lstring mTypeName ;
  @lstring mAbstractCategoryReaderName ;
  @formalInputParameterListAST mAbstractCategoryReaderFormalInputParameterList ;
  @lstring mAbstractCategoryReaderReturnedTypeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    Common Rules                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

list @attributeInCollectionListAST {
  @lstring mAttributeTypeName ;
  @lstring mAttributeName ;
  @lstringlist mFeatureList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    A R R A Y    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @arrayDeclarationAST extends @semanticDeclarationAST {
  @lstring mArrayTypeName ;
  @lstring mElementTypeName ;
  @luint mDimension ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T M A P    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @listmapDeclarationAST extends @semanticDeclarationAST {
  @lstring mListmapTypeName ;
  @lstring mAssociatedListTypeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    A U T O M A T O N                                             *
#                                                                           *
#---------------------------------------------------------------------------*

enum @mapAutomatonMessageKind {
  noMessage, warningMessage, errorMessage
}

#---------------------------------------------------------------------------*

list @mapStateTransitionList {
  @lstring mActionName feature nogetter ;
  @lstring mTargetStateName feature nogetter ;
  @mapAutomatonMessageKind mTransitionMessageKind feature nogetter ;
  @lstring mTransitionMessage feature nogetter ;
}

#---------------------------------------------------------------------------*

list @mapStateList {
  @lstring mStateName feature nogetter ;
  @mapAutomatonMessageKind mStateMessageKind feature nogetter ;
  @lstring mStateMessage feature nogetter ;
  @mapStateTransitionList mTransitionList feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    D E C L A R A T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @insertMethodListAST {
  @lstring mInsertMethodName feature nogetter ;
  @lstring mErrorMessage feature nogetter ;
  @lstring mShadowErrorMessage feature nogetter ;
  @lstring mInitialStateName feature nogetter ;
}

#---------------------------------------------------------------------------*

list @mapSearchMethodListAST {
  @lstring mSearchMethodName feature nogetter ;
  @lstring mErrorMessage feature nogetter ;
  @lstring mActionName feature nogetter ;
}

#---------------------------------------------------------------------------*

list @mapRemoveMethodListAST {
  @lstring mMethodName feature nogetter ;
  @lstring mErrorMessage feature nogetter ;
}

#---------------------------------------------------------------------------*

list @insertOrReplaceDeclarationListAST {
  @location mInsertOrReplaceDeclarationLocation feature nogetter ;
}

#---------------------------------------------------------------------------*

class @mapDeclarationAST extends @semanticDeclarationAST {
  @lstring mMapTypeName ;
  @attributeInCollectionListAST mAttributeList ;
  @insertMethodListAST mInsertMethodList ;
  @mapSearchMethodListAST mSearchMethodList ;
  @mapRemoveMethodListAST mRemoveMethodList ;
  @insertOrReplaceDeclarationListAST mInsertOrReplaceDeclarationListAST ;
}

#---------------------------------------------------------------------------*

list @mapOverrideBlockDescriptorAST {
  @lstring mLeftState feature nogetter ;
  @lstring mRightState feature nogetter ;
  @lstring mResultingState feature nogetter ;
  @mapAutomatonMessageKind mMessageKind feature nogetter ;
  @lstring mTransitionMessage feature nogetter ;
}

#---------------------------------------------------------------------------*

list @mapOverrideBlockListAST {
  @lstring mOverrideBlockName feature nogetter ;
  @mapOverrideBlockDescriptorAST mMapOverrideBlockDescriptor1AST feature nogetter ;
  @mapOverrideBlockDescriptorAST mMapOverrideBlockDescriptor2AST feature nogetter ;
}

#---------------------------------------------------------------------------*

class @uniqueMapDeclarationAST extends @semanticDeclarationAST {
  @lstring mMapTypeName ;
  @attributeInCollectionListAST mAttributeList ;
  @insertMethodListAST mInsertMethodList ;
  @mapSearchMethodListAST mSearchMethodList ;
  @mapStateList mMapStateList ;
  @mapOverrideBlockListAST mMapOverrideBlockListAST ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    P R O X Y    D E C L A R A T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @mapProxyDeclarationAST extends @semanticDeclarationAST {
  @lstring mMapProxyTypeName ;
  @lstring mAssociatedMapTypeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C L A S S    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @classDeclarationAST extends @semanticDeclarationAST {
  @bool mIsAbstract feature nogetter ;
  @lstring mClassTypeName feature nogetter ;
  @lstring mSuperClassName feature nogetter ; # Empty if no super class
  @lstringlist mClassFeatureList feature nogetter ;
  @attributeInCollectionListAST mAttributeList feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @listDeclarationAST extends @semanticDeclarationAST {
  @lstring mListTypeName feature nogetter ;
  @attributeInCollectionListAST mAttributeList feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S T R U C T    D E C L A R A T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @structDeclarationAST extends @semanticDeclarationAST {
  @lstring mStructTypeName ;
  @attributeInCollectionListAST mAttributeList ;
  @string mEnumeratedElementTypeName ; # Empty string if not enumerable
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    D E C L A R A T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

list @sortedListSortDescriptorListAST {
  @lstring mSortedAttributeName feature nogetter ;
  @bool mAscending feature nogetter ;
}

#---------------------------------------------------------------------------*

class @sortedListDeclarationAST extends @semanticDeclarationAST {
  @lstring mSortedListTypeName ;
  @attributeInCollectionListAST mAttributeList ;
  @sortedListSortDescriptorListAST mSortDescriptorList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @enumDeclarationAST extends @semanticDeclarationAST {
  @lstring mEnumTypeName ;
  @lstringlist mConstantList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    F I L E W R A P P E R    D E C L A R A T I O N                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalTemplateInputParameterListAST {
  @lstring mFormalArgumentTypeName feature nogetter ;
  @lstring mFormalArgumentName feature nogetter ;
  @bool mIsUnused feature nogetter ;
}

#---------------------------------------------------------------------------*

list @filewrapperTemplateListAST {
  @lstring mFilewrapperTemplateName feature nogetter ;
  @lstring mFilewrapperTemplatePath feature nogetter ;
  @formalTemplateInputParameterListAST mFilewrapperTemplateFormalInputParameters feature nogetter ;
}

#---------------------------------------------------------------------------*

class @filewrapperDeclarationAST extends @semanticDeclarationAST {
  @string mSourceFileAbsolutePath ;
  @lstring mFilewrapperName ;
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperTextFileExtensionList ;
  @lstringlist mFilewrapperBinaryFileExtensionList ;
  @filewrapperTemplateListAST mFilewrapperTemplateList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#     G R A P H                                                             *
#                                                                           *
#---------------------------------------------------------------------------*

list @graphInsertModifierList {
  @lstring mInsertModifierName feature nogetter ;
  @lstring mInsertErrorMessage feature nogetter ;
}

#---------------------------------------------------------------------------*

class @graphDeclarationAST extends @semanticDeclarationAST {
  @lstring mGraphTypeName ;
  @lstring mAssociatedListTypeName ;
  @graphInsertModifierList mInsertModifierList ;
}

#---------------------------------------------------------------------------*

class @semanticsComponentAST {
  @lstring mSemanticsComponentName  ;
  @lstringlist mImportedComponentFileNameList ;
  @semanticDeclarationListAST mSemanticDeclarationList  ;
  @location mEndOfSourceFile  ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#     E X T E R N     T Y P E                                               *
#                                                                           *
#---------------------------------------------------------------------------*

class @externTypeDeclarationAST extends @semanticDeclarationAST {
  @lstring mExternTypeName ;
  @string mCppPreDeclarationCode ;
  @string mCppClassCode ;
  @externTypeConstructorList mExternTypeConstructorList ;
  @externTypeReaderList mExternTypeReaderList ;
  @externTypeModifierList mExternTypeModifierList ;
  @externTypeMethodList mExternTypeMethodList ;
}

#---------------------------------------------------------------------------*

list @externTypeConstructorList {
  @lstring mConstructorName ;
  @lstring mResultTypeName ;
  @lstringlist mArgumentTypeNameList ;
}

#---------------------------------------------------------------------------*

list @externTypeReaderList {
  @lstring mReaderName ;
  @lstring mResultTypeName ;
  @lstringlist mArgumentTypeNameList ;
}

#---------------------------------------------------------------------------*

list @externTypeModifierList {
  @lstring mModifierName ;
  @formalParameterListAST mFormalParameterList ;
}

#---------------------------------------------------------------------------*

list @externTypeMethodList {
  @lstring mMethodName ;
  @formalParameterListAST mFormalParameterList ;
  @location mDeclarationLocation ;
}

#---------------------------------------------------------------------------*

end semantics ;
