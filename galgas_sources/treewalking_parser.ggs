#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS treewalking component parser definition                           *
#                                                                           *
#  Copyright (C) 2007 Pierre Molinaro.                                      *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax treewalking_parser :

import lexique galgas_scanner in "galgas_scanner.ggs" ;

import semantics semantics_semantics in "semantics_semantics.ggs" ;

#-------------------------------------------------------------------*

nonterminal <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

nonterminal <parse_treewalking_document>
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
  ??@bool inGenerateTreewalkingCode
label parse
;

nonterminal <parse_semantics_component_for_importing>
  ??@lstring inFileName
  ?!@M_semanticsComponents ioSemanticsMapForUse
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label parse
;

nonterminal <treewalking_routine>
  ??@M_semanticsEntitiesForUse inSemanticsEntitiesMap
  ??@entityToImplementMap inMetamodelEntityMap
  ??@stringset inMetamodelMultiReferencedEntities
label parse
;

nonterminal <formal_arguments_list>
  ??@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  !@L_EXsignature listeDeTypes
  ?!@typeVariablesMap tableArgumentsMethode
  !@typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments
  ?!@typeTableEnAvant tableEnAvant
  !@L_signature outSignature
label importGrammarForSemantics
  !@L_signature outSignature
label parse
;

nonterminal <semantic_instructions_list>
  ??@typeTableEnAvant inTableEnAvant
  ??@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@entityPropertyMap ioPropertyMap
  ?!@stringset ioConstraintPropertyDefinitionSet
  ?!@callInstructionSharedPropertySignatureMap ioCallInstructionSharedPropertySignatureMap
label parse
;

#-------------------------------------------------------------------*
#                   treewalking component                           *
#-------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
:
  <parse_treewalking_document>
    !?ioMetamodelComponentMap
    !?ioConstraintComponentMap
    !true
  ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  <parse_treewalking_document> parse ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
:
  @M_constraintComponents constraintComponentMap [emptyMap] ;
  <parse_treewalking_document>
    !?ioMetamodelComponentMap
    !?constraintComponentMap
    !false
  ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
:
  <parse_treewalking_document>
    !?ioMetamodelComponentMap
    !?ioConstraintComponentMap
    !false
  ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
:
  <parse_treewalking_document>
    !?ioMetamodelComponentMap
    !?ioConstraintComponentMap
    !false
  ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  <parse_treewalking_document> parse ;
end rule ;


#-------------------------------------------------------------------*

rule <parse_treewalking_document>
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
  ??@bool inGenerateTreewalkingCode
:
#--- Tree walking component header
  $treewalking$ ;
  @lstring treewalkingName ;
  $identifier$ ? treewalkingName ;
#--- Metamodel to walking trought
  $($ ;
  @lstring metamodelName ;
  $identifier$ ? metamodelName ;
  $)$ ;
  $:$ ;
#--- Imported Metamodel
  @M_semanticsComponents semanticsComponentMap [emptyMap] ;
  @M_metamodelsComponents metamodelComponentMap [emptyMap] ;
  $import$ ;
  @lstring fileName ;
  $literal_string$ ? fileName ;
  $;$ ;  
  <parse_semantics_component_for_importing>
    !fileName
    !?semanticsComponentMap
    !?metamodelComponentMap
    !?ioConstraintComponentMap
  ;
  @lstring metamodelRootEntity ;
  @entityToImplementMap metamodelEntityMap ;
  @stringset metamodelMultiReferencedEntities ;
  if [metamodelComponentMap hasKey ![metamodelName string]] then
    [metamodelComponentMap searchKey
       !metamodelName
       ?metamodelRootEntity
       ?metamodelEntityMap
       ?metamodelMultiReferencedEntities
    ] ;
  else
    error fileName: "this does not defines the '" . [metamodelName string] . "' metamodel"
     -> metamodelRootEntity, metamodelEntityMap, metamodelMultiReferencedEntities ;
  end if ;
#--- Import semantics component(s)
  @M_semanticsEntitiesForUse semanticsEntitiesMap [emptyMap] ;
  repeat
  while
    $import$ ;
    $semantics$ ;
    @lstring semanticsComponentName ;
    $identifier$ ? semanticsComponentName ;
    $in$ ;    
    @lstring fileName ;
    $literal_string$ ? fileName ;
    $;$ ;  
    <parse_semantics_component_for_importing>
      !fileName
      !?semanticsComponentMap
      !?metamodelComponentMap
      !?ioConstraintComponentMap
    ;
    @M_semanticsEntitiesForUse importedSemanticsEntitiesMap ;
    [semanticsComponentMap searchKey !semanticsComponentName ?6* ?importedSemanticsEntitiesMap] ;
    foreach importedSemanticsEntitiesMap (@lstring kKey @AC_semanticsEntity kEntity) :
      if not [semanticsEntitiesMap hasKey ![kKey string]] then
        [!?semanticsEntitiesMap insertKey !kKey  !kEntity] ;
      end if ;
    end foreach ;
  end repeat ;
#--- parse routine definitions
  repeat
  while
    <treewalking_routine>
      !semanticsEntitiesMap
      !metamodelEntityMap
      !metamodelMultiReferencedEntities
    ;
  end repeat ;
#--- Generate code ?
  if inGenerateTreewalkingCode then
    log semanticsEntitiesMap ;
  end if ;
#--- End of treewalking component
  $end$ ;
  $treewalking$ ;
  $;$ ;
end rule ;

#-------------------------------------------------------------------*

rule <treewalking_routine>
  ??@M_semanticsEntitiesForUse inSemanticsEntitiesMap
  ??@entityToImplementMap inMetamodelEntityMap
  ??@stringset inMetamodelMultiReferencedEntities
:
  $rule$ ;
  @lstring className ;
  $mda_type_name$ ? className ;
#---- Formal arguments -----------------------------------------
  @typeTableEnAvant tableEnAvant [emptyMap] ;
  @L_EXsignature listeDeTypes ;
  @typeVariablesMap tableArgumentsMethode [emptyMap] ;
  @typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments ;
  @L_signature signatureForGrammarComponent ;
  <formal_arguments_list>
    !inSemanticsEntitiesMap
    ?listeDeTypes
    !?tableArgumentsMethode
    ?listeTypeEtNomsArguments
    !?tableEnAvant
    ?signatureForGrammarComponent
  ;
#---- Instruction list
  @typeInstructionList ioInstructionList [emptyList] ;
  @entityPropertyMap propertyMap [emptyMap] ;
  @stringset constraintPropertyDefinitionSet [emptySet] ;
  @callInstructionSharedPropertySignatureMap callInstructionSharedPropertySignatureMap [emptyMap] ;
@M_optionComponents inOptionsComponentsMapForUse [emptyMap] ;
  <semantic_instructions_list>
    !tableEnAvant
    !inSemanticsEntitiesMap
    !inOptionsComponentsMapForUse
    !?tableArgumentsMethode
    !?ioInstructionList
    !?propertyMap
    !?constraintPropertyDefinitionSet
    !?callInstructionSharedPropertySignatureMap
  ;
#--- End of rule
  $end$ ;
  $rule$ ;
  $;$ ;
end rule ;

#-------------------------------------------------------------------*

end syntax ;
