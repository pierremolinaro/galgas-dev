#---------------------------------------------------------------------------*
#                                                                           *
#  'metamodel' component parser, as model builder                           *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax semanticInstructionsSyntax :
with "galgas_scanner.gLexique" ;

import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import semantics semanticsTypesForAST in "semanticsTypesForAST.gSemantics" ;
import option galgas_cli_options in "galgas_cli_options.gOption" ;

import "semanticsTypesForAST.gSemantics" ;
import "galgas_cli_options.gOption" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Rules prototypes                                                    *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <expression> !@semanticExpressionAST outExpression ;

nonterminal <formal_parameter_list> !@formalParameterListAST outFormalParameterList ;

nonterminal <formal_input_parameter_list> !@formalInputParameterListAST outFormalInputParameterList ;

nonterminal <actual_parameter_list> !@actualParameterListAST outActualParameterList ;

nonterminal <semantic_instruction_list> !@semanticInstructionListAST outInstructionsList ;

nonterminal <semantic_instruction> !@semanticInstructionAST outInstruction ;

nonterminal <output_expression_list>
  !@semanticExpressionListAST outExpressionList
;

nonterminal <semantic_declaration>
 ?!@semanticDeclarationListAST ioSemanticDeclarations
;

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    I N S T R U C T I O N    L I S T                    *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction_list> !@semanticInstructionListAST outInstructionsList :
  outInstructionsList := [@semanticInstructionListAST emptyList] ;
  repeat
  while
    @semanticInstructionAST instruction ;
    <semantic_instruction> ? instruction ;
    outInstructionsList += !instruction ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationListAST ioSemanticDeclarations
:
  $routine$ ;
  $identifier$ ? @lstring mRoutineName ;
  @formalParameterListAST mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $:$ ;
  @semanticInstructionListAST mRoutineInstructionList ;
  <semantic_instruction_list> ? mRoutineInstructionList ;
  $end$ ;
  const @location endOfInstructionList := here ;
  $routine$ ;
  $;$ ;
  ioSemanticDeclarations += ![@routineDeclarationAST new
    !mRoutineName
    !mFormalParameterList
    !mRoutineInstructionList
    !endOfInstructionList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E X T E R N    R O U T I N E    D E C L A R A T I O N                  *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationListAST ioSemanticDeclarations
:
  $extern$ ;
  $routine$ ;
  $identifier$ ? @lstring mActionName ;
  @formalParameterListAST mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $;$ ;
  ioSemanticDeclarations += ![@externRoutineDeclarationAST new
    !mActionName
    !mFormalParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    P R O T O T Y P E    D E C L A R A T I O N            *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationListAST unused ioSemanticDeclarations
:
#--- For compatibility with GALGAS 1
  $routine$ ;
  $identifier$ ? * ;
  <formal_parameter_list> ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    F U N C T I O N    D E C L A R A T I O N                               *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationListAST ioSemanticDeclarations
:
  $function$ ;
  $identifier$ ? @lstring mRoutineName ;
  @formalInputParameterListAST formalInputParameterList ;
  <formal_input_parameter_list> ? formalInputParameterList ;
  $->$ ;
  $type_name$ ?@lstring resultTypeName ;
  $identifier$ ?@lstring resultVariableName ;
  $:$ ;
  @semanticInstructionListAST functionInstructionList ;
  <semantic_instruction_list> ? functionInstructionList ;
  $end$ ;
  const @location endOfFunctionInstructionList := here ;
  $function$ ;
  $;$ ;
  ioSemanticDeclarations += ![@functionDeclarationAST new
    !mRoutineName
    !formalInputParameterList
    !resultTypeName
    !resultVariableName
    !functionInstructionList
    !endOfFunctionInstructionList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    O N C E    F U N C T I O N    D E C L A R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationListAST ioSemanticDeclarations
:
  $once$ ;
  $identifier$ ? @lstring mRoutineName ;
  $->$ ;
  $type_name$ ?@lstring resultTypeName ;
  $identifier$ ?@lstring resultVariableName ;
  select
    $;$ ;
  or
    $:$ ;
    @semanticInstructionListAST mRoutineInstructionList ;
    <semantic_instruction_list> ? mRoutineInstructionList ;
    $end$ ;
    $once$ ;
    const @location endOfFunctionInstructionList := here ;
    $;$ ;
    ioSemanticDeclarations += ![@onceFunctionDeclarationAST new
      !mRoutineName
      !resultTypeName
      !resultVariableName
      !mRoutineInstructionList
      !endOfFunctionInstructionList
    ] ;
  end select ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E X T E R N    F U N C T I O N    D E C L A R A T I O N                *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationListAST ioSemanticDeclarations
:
  $extern$ ;
  $function$ ;
  $identifier$ ? @lstring mActionName ;
  @formalInputParameterListAST formalInputParameterList ;
  <formal_input_parameter_list> ? formalInputParameterList ;
  $->$ ;
  $type_name$ ?@lstring resultTypeName ;
  $identifier$ ?@lstring resultVariableName ;
  $;$ ;
  ioSemanticDeclarations += ![@externFunctionDeclarationAST new
    !mActionName
    !formalInputParameterList
    !resultTypeName
    !resultVariableName
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  L O C A L    V A R I A B L E    D E C L A R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $type_name$ ?@lstring typeName ;
  $identifier$ ?@lstring variableName ;
  select
    outInstruction := [@localVariableDeclarationAST new ![typeName location] !typeName !variableName] ;
  or
    $:=$ ;
    @semanticExpressionAST sourceExpression ;
    <expression> ? sourceExpression ;
    outInstruction := [@localVariableOrConstantDeclarationWithAssignmentAST new
      ![typeName location]
      !false
      !typeName
      !variableName
      !sourceExpression
    ] ;
  or
    $[$ ;
    @lstring constructorName ;
    $identifier$ ? constructorName ;
    @semanticExpressionListAST expressionList ;
    <output_expression_list> ?expressionList ;
    outInstruction := [@localVariableOrConstantDeclarationWithConstructorCallAST new
      ![typeName location]
      !false # Is not Constant
      !typeName
      !variableName
      !constructorName
      !expressionList
    ] ;
    $]$ ;
  end select ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  L O C A L    C O N S T A N T    D E C L A R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $const$ ;
  $type_name$ ?@lstring typeName ;
  $identifier$ ?@lstring variableName ;
  select
    $:=$ ;
    @semanticExpressionAST sourceExpression ;
    <expression> ? sourceExpression ;
    outInstruction := [@localVariableOrConstantDeclarationWithAssignmentAST new
      ![typeName location]
      !true # Is Constant
      !typeName
      !variableName
      !sourceExpression
    ] ;
  or
    $[$ ;
    @lstring constructorName ;
    $identifier$ ? constructorName ;
    @semanticExpressionListAST expressionList ;
    <output_expression_list> ?expressionList ;
    outInstruction := [@localVariableOrConstantDeclarationWithConstructorCallAST new
      ![typeName location]
      !true # is constant
      !typeName
      !variableName
      !constructorName
      !expressionList
    ] ;
    $]$ ;
  end select ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    A S S I G N M E N T    I N S T R U C T I O N                           *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $identifier$ ?@lstring mTargetVariableName ;
  @lstringlist mStructAttributeList [emptyList] ;
  repeat
  while
    $->$ ;
    $identifier$ ? @lstring attributeName ;
    mStructAttributeList += !attributeName ;
  end repeat ;
  $:=$ ;
  @semanticExpressionAST mSourceExpression ;
  <expression> ? mSourceExpression ;
  $;$ ;
  outInstruction := [@assignmentInstructionAST new
    ![mTargetVariableName location]
    !mTargetVariableName
    !mStructAttributeList
    !mSourceExpression
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D R O P    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $drop$ ;
  const @location instructionLocation := here ;
  @lstringlist dropList [emptyList] ;
  repeat
    $identifier$ ?@lstring variableName ;
    dropList += !variableName ;
  while
    $,$ ;
  end repeat ;
  $;$ ;
  outInstruction := [@dropInstructionAST new !instructionLocation !dropList] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    I N C R E M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $identifier$ ? @lstring mReceiverName ;
  @lstringlist mStructAttributeList [emptyList] ;
  repeat
  while
    $->$ ;
    $identifier$ ? @lstring attributeName ;
    mStructAttributeList += !attributeName ;
  end repeat ;
  $++$ ;
  $;$ ;
  outInstruction := [@incrementInstructionAST new ![mReceiverName location] !mReceiverName !mStructAttributeList] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C R E M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $identifier$ ?@lstring mReceiverName ;
  @lstringlist mStructAttributeList [emptyList] ;
  repeat
  while
    $->$ ;
    $identifier$ ? @lstring attributeName ;
    mStructAttributeList += !attributeName ;
  end repeat ;
  $--$ ;
  $;$ ;
  outInstruction := [@decrementInstructionAST new ![mReceiverName location] !mReceiverName !mStructAttributeList] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    F O R E A C H    I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <foreach_enumerated_object>
  ?!@foreachInstructionEnumeratedObjectListAST ioForeachInstructionEnumeratedObjectList
;

#---------------------------------------------------------------------------*

rule <foreach_enumerated_object>
  ?!@foreachInstructionEnumeratedObjectListAST ioForeachInstructionEnumeratedObjectList
:
  @bool ascending ;
  select
    ascending := true ;
  or
    $<$ ;
    ascending := true ;
  or
    $>$ ;
    ascending := false ;
  end select ;
  @semanticExpressionAST mEnumeratedExpression ;
  <expression> ? mEnumeratedExpression ;
  const @location endOfEnumerationExpression := here ;
  @foreachInstructionEnumeratedObjectElementListAST mElementList [emptyList] ;
  @bool mEndsWithEllipsis ;
  @lstring prefix ;
  select
    mEndsWithEllipsis := false ;
    prefix := [@lstring new !"" !here] ;
  or
    $prefixedby$ ;
    $identifier$ ? prefix ;
    mEndsWithEllipsis := false ;
  or
    prefix := [@lstring new !"" !here] ;
    $($ ;
    repeat
    while
      $*$ ;
      mElementList += ![@lstring new !"" !here] ![@lstring new !"" !here] ;
    while
      @luint count ;
      $unsigned_literal_integer$ ?count ;
      $*$ ;
      @uint n := [count uint] ;
      if n == 0 then
        error count: "this value should be > 0" ;
      end if ;
      loop n :
      while n > 0 do
        mElementList += ![@lstring new !"" !here] ![@lstring new !"" !here] ;
        n -- ;
      end loop ;
    while
      @lstring typeName ;
      $type_name$ ?typeName ;
      @lstring constantName ;
      $identifier$ ?constantName ;
      mElementList += !typeName !constantName ;
    end repeat ;
    select
      mEndsWithEllipsis := false ;
    or
      $...$ ;
      mEndsWithEllipsis := true ;
    end select ;
    $)$ ;
  end select ;
  ioForeachInstructionEnumeratedObjectList +=
    !ascending
    !mEnumeratedExpression
    !endOfEnumerationExpression
    !mElementList
    !here
    !mEndsWithEllipsis
    !prefix
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $foreach$ ;
  const @location instructionLocation := here ;
  @foreachInstructionEnumeratedObjectListAST mEnumeratedObjectList [emptyList] ;
  repeat
    <foreach_enumerated_object> !?mEnumeratedObjectList ;
  while
    $,$ ;
  end repeat ;
  @lstring mIndexVariableName ;
  select
    mIndexVariableName := [@lstring new !"" !here] ;
  or
    $index$ ;
    $identifier$ ? mIndexVariableName ;
  end select ;
  @semanticExpressionAST mWhileExpression ;
  select
    mWhileExpression := [@trueExpressionAST new !here] ;
  or
    $while$ ;
    <expression> ? mWhileExpression ;
  end select ;
  @semanticInstructionListAST mBeforeInstructionList ;
  select
    mBeforeInstructionList := [@semanticInstructionListAST emptyList] ;
  or
    $before$ ;
    <semantic_instruction_list> ? mBeforeInstructionList ;
  end select ;
  const @location endof_before_branch := here ;
  $do$ ;
  @semanticInstructionListAST mDoInstructionList ;
  <semantic_instruction_list> ? mDoInstructionList ;
  const @location endof_do_branch := here ;
  @semanticInstructionListAST mBetweenInstructionList ;
  select
    mBetweenInstructionList := [@semanticInstructionListAST emptyList] ;
  or
    $between$ ;
    <semantic_instruction_list> ? mBetweenInstructionList ;
  end select ;
  const @location endof_between_branch := here ;
  @semanticInstructionListAST mAfterInstructionList ;
  select
    mAfterInstructionList := [@semanticInstructionListAST emptyList] ;
  or
    $after$ ;
    <semantic_instruction_list> ? mAfterInstructionList ;
  end select ;
  const @location endof_after_branch := here ;
  $end$ ;
  const @location endof_foreach_instruction := here ;
  $foreach$ ;
  $;$ ;
  outInstruction := [@foreachInstructionAST new
    !instructionLocation
    !mEnumeratedObjectList
    !mIndexVariableName
    !mWhileExpression
    !mBeforeInstructionList
    !endof_before_branch
    !mBetweenInstructionList
    !endof_between_branch
    !mDoInstructionList
    !endof_do_branch
    !mAfterInstructionList
    !endof_after_branch
    !endof_foreach_instruction
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S E N D    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $send$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST expression ;
  <expression> ? expression ;
  $;$ ;
  outInstruction := [@sendInstructionAST new
    !instructionLocation
    !expression
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    I F    I N S T R U C T I O N                                           *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <if_branch> !@semanticInstructionAST outInstruction ;

#---------------------------------------------------------------------------*

rule <if_branch> !@semanticInstructionAST outInstruction :
  const @location instructionLocation := here ;
  @semanticExpressionAST if_expression ;
  <expression> ?if_expression ;
  $then$ ;
  @semanticInstructionListAST then_instructionList ;
  <semantic_instruction_list> ? then_instructionList ;
  const @location endOf_then_branchLocation := here ;
  @semanticInstructionListAST else_instructionList ;
  select
    else_instructionList := [@semanticInstructionListAST emptyList] ;
  or
    $else$ ;
    <semantic_instruction_list> ? else_instructionList ;
  or
    $elsif$ ;
    @semanticInstructionAST instruction ;
    <if_branch> ? instruction ;
    else_instructionList := [@semanticInstructionListAST emptyList] ;
    else_instructionList += !instruction ;
  end select ;
  outInstruction := [@ifInstructionAST new
    !instructionLocation
    !if_expression
    !then_instructionList
    !endOf_then_branchLocation
    !else_instructionList
    !here
  ] ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $if$ ;
  <if_branch> ?outInstruction ;
  $end$ ;
  $if$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M E T H O D    C A L L    I N S T R U C T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $[$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST mReceiverExpression ;
  <expression> ? mReceiverExpression ;
  $identifier$ ?@lstring mMethodName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $]$ ;
  $;$ ;
  outInstruction := [@methodCallInstructionAST new
    !instructionLocation
    !mReceiverExpression
    !mMethodName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  " T H I S "    M E T H O D    C A L L    I N S T R U C T I O N           *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $[$ ;
  $this$ ;
  const @location instructionLocation := here ;
  $identifier$ ?@lstring mMethodName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $]$ ;
  $;$ ;
  outInstruction := [@thisMethodCallInstructionAST new
    !instructionLocation
    !mMethodName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  " S U P E R "    M E T H O D    C A L L    I N S T R U C T I O N         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $[$ ;
  $super$ ;
  const @location instructionLocation := here ;
  $identifier$ ?@lstring mMethodName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $]$ ;
  $;$ ;
  outInstruction := [@superMethodCallInstructionAST new
    !instructionLocation
    !mMethodName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M O D I F I E R    C A L L    I N S T R U C T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $[$ ;
  const @location instructionLocation := here ;
  $!?$ ;
  $identifier$ ?@lstring mReceiverName ;
  @lstringlist mReceiverStructAttributes [emptyList] ;
  repeat
  while
    $->$ ;
    $identifier$ ?@lstring structAttribute ;
    mReceiverStructAttributes += !structAttribute ;
  end repeat ;
  $identifier$ ?@lstring mModifierName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $]$ ;
  $;$ ;
  outInstruction := [@modifierCallInstructionAST new
    !instructionLocation
    !mReceiverName
    !mReceiverStructAttributes
    !mModifierName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    " T H I S "   M O D I F I E R    C A L L    I N S T R U C T I O N      *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $[$ ;
  const @location instructionLocation := here ;
  $!?$ ;
  $this$ ;
  $identifier$ ?@lstring mModifierName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $]$ ;
  $;$ ;
  outInstruction := [@thisModifierCallInstructionAST new
    !instructionLocation
    !mModifierName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    " S U P E R "   M O D I F I E R    C A L L    I N S T R U C T I O N    *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $[$ ;
  const @location instructionLocation := here ;
  $!?$ ;
  $super$ ;
  $identifier$ ?@lstring mModifierName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $]$ ;
  $;$ ;
  outInstruction := [@superModifierCallInstructionAST new
    !instructionLocation
    !mModifierName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E R R O R    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $error$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST mReceiverExpression ;
  <expression> ? mReceiverExpression ;
  $:$ ;
  @semanticExpressionAST mErrorExpression ;
  <expression> ? mErrorExpression ;
  @lstringlist mBuiltVariableList [emptyList] ;
  select
  or
    $:$ ;
    repeat
     @lstring builtVariableName ;
     $identifier$ ? builtVariableName ;
     mBuiltVariableList += !builtVariableName ;
    while
      $,$ ;
    end repeat ;
  end select ;
  $;$ ;
  outInstruction := [@errorInstructionAST new
    !instructionLocation
    !mReceiverExpression
    !mErrorExpression
    !mBuiltVariableList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    W A R N I N G    I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $warning$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST mReceiverExpression ;
  <expression> ? mReceiverExpression ;
  $:$ ;
  @semanticExpressionAST mWarningExpression ;
  <expression> ? mWarningExpression ;
  $;$ ;
  outInstruction := [@warningInstructionAST new
    !instructionLocation
    !mReceiverExpression
    !mWarningExpression
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    C A L L    I N S T R U C T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $identifier$ ?@lstring mRoutineName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $;$ ;
  outInstruction := [@routineCallInstructionAST new
    ![mRoutineName location]
    !mRoutineName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    W I T H    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $with$ ;
  const @location instructionLocation := here ;
  $!?$ ;
  $identifier$ ?@lstring mTargetObjectName ;
  @lstringlist structAttributeList [emptyList] ;
  repeat
  while
    $->$ ;
    $identifier$ ?@lstring mStructFieldName ;
    structAttributeList += !mStructFieldName ;
  end repeat ;
  $identifier$ ?@lstring mSearchMethodName ;
  $!$ ;
  @semanticExpressionAST mKeyExpression ;
  <expression> ? mKeyExpression ;
  @lstring withPrefix ;
  select
    withPrefix := [@lstring new !"" !here] ;
  or
    $prefixedby$ ;
    $identifier$ ? withPrefix ;
  end select ;
  $do$ ;
  @semanticInstructionListAST mDoBranchInstructions ;
  <semantic_instruction_list> ? mDoBranchInstructions ;
  const @location endOf_do_instructions := here ;
  @semanticInstructionListAST mElseBranchInstructions ;
  select
    mElseBranchInstructions := [@semanticInstructionListAST emptyList] ;
  or
    $else$ ;
    <semantic_instruction_list> ? mElseBranchInstructions ;
  end select ;
  const @location endOf_else_instructions := here ;
  outInstruction := [@readWriteAccessWithInstructionAST new
    !instructionLocation
    !withPrefix
    !mTargetObjectName
    !structAttributeList
    !mSearchMethodName
    !mKeyExpression
    !mDoBranchInstructions
    !endOf_do_instructions
    !mElseBranchInstructions
    !endOf_else_instructions
  ] ;
  $end$ ;
  $with$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $with$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST receiverExpression ;
  <expression> ? receiverExpression ;
  $identifier$ ?@lstring mSearchMethodName ;
  $!$ ;
  @semanticExpressionAST mKeyExpression ;
  <expression> ? mKeyExpression ;
  @lstring withPrefix ;
  select
    withPrefix := [@lstring new !"" !here] ;
  or
    $prefixedby$ ;
    $identifier$ ? withPrefix ;
  end select ;
  $do$ ;
  @semanticInstructionListAST mDoBranchInstructions ;
  <semantic_instruction_list> ? mDoBranchInstructions ;
  @semanticInstructionListAST mElseBranchInstructions ;
  select
    mElseBranchInstructions := [@semanticInstructionListAST emptyList] ;
  or
    $else$ ;
    <semantic_instruction_list> ? mElseBranchInstructions ;
  end select ;
  outInstruction := [@readAccessWithInstructionAST new
    !instructionLocation
    !withPrefix
    !receiverExpression
    !mSearchMethodName
    !mKeyExpression
    !mDoBranchInstructions
    !mElseBranchInstructions
  ] ;
  $end$ ;
  $with$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M A T C H    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <match_entry> ?!@matchEntryListAST ioMatchEntryList ;

#---------------------------------------------------------------------------*

rule <match_entry> ?!@matchEntryListAST ioMatchEntryList :
  $identifier$ ? @lstring enumerationConstantName ;
  ioMatchEntryList +=
    !false
    !enumerationConstantName
    ![@lstring new !"" !here]
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <match_entry> ?!@matchEntryListAST ioMatchEntryList :
  $type_name$ ?@lstring className ;
  @lstring localConstant ;
  select
    localConstant := [@lstring new !"" !here] ;
  or
    $identifier$ ?localConstant ;
  end select ;
  select
  or
    $($ ;
    repeat
    while
      $type_name$ ?* ;
      $identifier$ ?* ;
    while
      $*$ ;
    while
      $unsigned_literal_integer$ ?* ;
      $*$ ;
    end repeat ;
    select
    or
      $...$ ;
    end select ;
    if [option galgas_cli_options.newCodeGeneration value] then
      warning here : "old style 'match' instruction" ;
    end if ;
    $)$ ;
  end select ;
  ioMatchEntryList +=
    !true
    !className
    !localConstant
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <match_instruction_branch> ?!@matchInstructionBranchListAST ioMatchInstructionBranchList ;

#---------------------------------------------------------------------------*

rule <match_instruction_branch> ?!@matchInstructionBranchListAST ioMatchInstructionBranchList :
  $when$ ;
  @matchEntryListAST mMatchEntryList [emptyList] ;
  repeat
    <match_entry> !? mMatchEntryList ;
  while
    $::$ ;
  end repeat ;
  const @location endOfMatchEntryList := here ;
  $:$ ;
  @semanticInstructionListAST mMatchBranchInstructionList ;
  <semantic_instruction_list> ? mMatchBranchInstructionList ;
  ioMatchInstructionBranchList +=
    !mMatchEntryList
    !endOfMatchEntryList
    !mMatchBranchInstructionList
    !here
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $match$ ;
  @semanticExpressionListAST matchedExpressionNameList [emptyList] ;
  const @location instructionLocation := here ;
  @semanticExpressionAST receiverExpression ;
  <expression> ? receiverExpression ;
  matchedExpressionNameList += !receiverExpression !here ;
  $::$ ;
  repeat
    @semanticExpressionAST receiverExpression ;
    <expression> ? receiverExpression ;
    matchedExpressionNameList += !receiverExpression !here ;
  while
    $::$ ;
  end repeat ;
  $:$ ;
  @matchInstructionBranchListAST matchInstructionBranchList [emptyList] ;
  repeat
    <match_instruction_branch> !? matchInstructionBranchList ;
  while
  end repeat ;
  @semanticInstructionListAST elseInstructionList ;
  select
    elseInstructionList := [@semanticInstructionListAST emptyList] ;
  or
    $else$ ;
    <semantic_instruction_list> ? elseInstructionList ;
  end select ;
  $end$ ;
  $match$ ;
  const @location endOf_match_instruction := here ;
  $;$ ;
  outInstruction := [@matchInstructionAST new
    !instructionLocation
    !matchedExpressionNameList
    !matchInstructionBranchList
    !elseInstructionList
    !endOf_match_instruction
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C A S T    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <cast_instruction_branch> ?!@castInstructionBranchListAST ioCastInstructionBranchList ;

#---------------------------------------------------------------------------*

rule <cast_instruction_branch> ?!@castInstructionBranchListAST ioCastInstructionBranchList :
  $when$ ;
  @bool mUseKindOfClass ;
  select
    $>=$ ;
    mUseKindOfClass := true ;
  or
    $==$ ;
    mUseKindOfClass := false ;
  end select ;
  $type_name$ ? @lstring mTypeName ;
  @lstring mConstantVarName ; # Empty string if no constant var
  @bool mConstantVarNameIsUnused ; # true if no constant var
  select
    $identifier$ ?mConstantVarName ;
    mConstantVarNameIsUnused := false ;
  or
    $unused$ ;
    $identifier$ ?mConstantVarName ;
    mConstantVarNameIsUnused := true ;
  or
    mConstantVarName := [@lstring new !"" !here] ;
    mConstantVarNameIsUnused := true ;
  end select ;
  $do$ ;
  @semanticInstructionListAST mCastBranchInstructionList ;
  <semantic_instruction_list> ? mCastBranchInstructionList ;
  ioCastInstructionBranchList +=
    !mUseKindOfClass
    !mTypeName
    !mConstantVarName
    !mConstantVarNameIsUnused
    !mCastBranchInstructionList
    !here
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <cast_else_or_default> !@semanticInstructionListAST outElseOrDefault ;

#---------------------------------------------------------------------------*

rule <cast_else_or_default> !@semanticInstructionListAST outElseOrDefault
:
  outElseOrDefault := [@semanticInstructionListAST emptyList] ;
end rule ;

#---------------------------------------------------------------------------*

rule <cast_else_or_default> !@semanticInstructionListAST outElseOrDefault
:
  $else$ ;
  <semantic_instruction_list> ? outElseOrDefault ;
end rule ;

#---------------------------------------------------------------------------*

rule <cast_else_or_default> !@semanticInstructionListAST outElseOrDefault :
  $default$ ;
  const @location instructionLocation := here ;
  $error$ ;
  @semanticExpressionAST errorLocationExpression ;
  <expression> ? errorLocationExpression ;
  outElseOrDefault := [@semanticInstructionListAST emptyList] ;
  outElseOrDefault += ![@errorInstructionAST new
    !instructionLocation
    !errorLocationExpression
    ![@literalStringExpressionAST new
      !instructionLocation
      ![@stringlist listWithValue !"cast instruction run-time error"]
     ]
    ![@lstringlist emptyList]
  ] ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $cast$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST mExpression ;
  <expression> ? mExpression ;
  $:$ ;
  @castInstructionBranchListAST mCastInstructionBranchList [emptyList] ;
  repeat
    <cast_instruction_branch> !? mCastInstructionBranchList ;
  while
  end repeat ;
  @semanticInstructionListAST mElseOrDefault ;
  <cast_else_or_default> ? mElseOrDefault ;
  $end$ ;
  const @location endOfInstructionLocation := here ;
  $cast$ ;
  $;$ ;
  outInstruction := [@structuredCastInstructionAST new
    !instructionLocation
    !mExpression
    !mCastInstructionBranchList
    !mElseOrDefault
    !endOfInstructionLocation
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    A D D    I N S T R U C T I O N    + =                                  *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  @lstring mReceiverName ;
  $identifier$ ? mReceiverName ;
  const @location instructionLocation := here ;
  @lstringlist mStructAttributeList [emptyList] ;
  repeat
  while
    $->$ ;
    $identifier$ ? @lstring attributeName ;
    mStructAttributeList += !attributeName ;
  end repeat ;
  $+=$ ;
  @semanticExpressionListAST mExpressionList ;
  <output_expression_list> ?mExpressionList ;
  $;$ ;
  outInstruction := [@addInstructionAST new
    !instructionLocation
    !mReceiverName
    !mStructAttributeList
    !mExpressionList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    A P P E N D    I N S T R U C T I O N    . =                            *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $identifier$ ? @lstring mTargetVariableName ;
  @lstringlist mStructAttributeList [emptyList] ;
  repeat
  while
    $->$ ;
    $identifier$ ? @lstring attributeName ;
    mStructAttributeList += !attributeName ;
  end repeat ;
  $.=$ ;
  @semanticExpressionAST mSourceExpression ;
  <expression> ? mSourceExpression ;
  $;$ ;
  outInstruction := [@appendInstructionAST new
    ![mTargetVariableName location]
    !mTargetVariableName
    !mStructAttributeList
    !mSourceExpression
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    L O O P    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $loop$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST mVariantExpression ;
  <expression> ? mVariantExpression ;
  const @location mEndOfVariantExpression := here ;
  $:$ ;
  @semanticInstructionListAST mFirstInstructions ;
  <semantic_instruction_list> ? mFirstInstructions ;
  const @location mEndOfFirstInstructions := here ;
  $while$ ;
  @semanticExpressionAST mLoopExpression ;
  <expression> ? mLoopExpression ;
  const @location mEndOfLoopExpression := here ;
  $do$ ;
  @semanticInstructionListAST mSecondInstructions ;
  <semantic_instruction_list> ? mSecondInstructions ;
  const @location mEndOfSecondInstructions := here ;
  $end$ ;
  const @location mEndOfLoopInstruction := here ;
  $loop$ ;
  $;$ ;
  outInstruction := [@loopInstructionAST new
    !instructionLocation
    !mVariantExpression
    !mEndOfVariantExpression
    !mFirstInstructions
    !mEndOfFirstInstructions
    !mLoopExpression
    !mEndOfLoopExpression
    !mSecondInstructions
    !mEndOfSecondInstructions
    !mEndOfLoopInstruction
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M E S S A G E    I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $message$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST mExpression ;
  <expression> ? mExpression ;
  $;$ ;
  outInstruction := [@messageInstructionAST new
    !instructionLocation
    !mExpression
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    L O G    I N S T R U C T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $log$ ;
  const @location instructionLocation := here ;
  @logListAST logList [emptyList] ;
  repeat
    select
      $identifier$ ? @lstring loggedVariableName ;
      logList += !loggedVariableName ![@varInExpressionAST new !loggedVariableName ![@lstringlist emptyList]] ;
    or
      $literal_string$ ? @lstring logMessage ;
      $:$ ;
      @semanticExpressionAST logExpression ;
      <expression> ?logExpression ;
      logList += !logMessage !logExpression ;
    end select ;
  while
    $,$ ;
  end repeat ;
  $;$ ;
  outInstruction := [@logInstructionAST new
    !instructionLocation
    !logList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G R A M M A R    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $grammar$ ;
  const @location instructionLocation := here ;
  @lstring mGrammarComponentName ;
  $identifier$ ?mGrammarComponentName ;
  @lstring mLabelName ;
  select
    mLabelName := [@lstring new !"" !here] ;
  or
    $label$ ;
    $identifier$ ?mLabelName ;
  end select ;
  @bool sourceExpressionIsFile ;
  select
    $in$ ; sourceExpressionIsFile := true ;
  or
    $on$ ; sourceExpressionIsFile := false ;
  end select ;
  @semanticExpressionAST mSourceExpression ;
  <expression> ? mSourceExpression ;
  const @location endOfSourceExpression := here ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
#--- Dependency (obsolete ?)
  select
  or
    $dependency$ ;
    <expression> ? * ;
    $in$ ;
    <expression> ? * ;
  end select ;
  $;$ ;
  outInstruction := [@grammarInstructionAST new
    !instructionLocation
    !mGrammarComponentName
    !mLabelName
    !mSourceExpression
    !endOfSourceExpression
    !sourceExpressionIsFile
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  S W I T C H    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $switch$ ;
  const @location instructionLocation := here ;
  @semanticExpressionAST switchExpression ;
  <expression> ? switchExpression ;
  const @location endOfSwitchExpression := here ;
  @switchBranchesAST switchBranches [emptyList] ;
  repeat
    $when$ ;
    @lstringlist constantNameList [emptyList] ;
    repeat
      $identifier$ ? @lstring constantName ;
      constantNameList += !constantName ;
    while
      $,$ ;
    end repeat ;
    $:$ ;
    @semanticInstructionListAST instructions ;
    <semantic_instruction_list> ? instructions ;
    switchBranches += !constantNameList !instructions !here ;
  while
  end repeat ;
  $end$ ;
  $switch$ ;
  const @location endOfSwitchInstruction := here ;
  $;$ ;
  outInstruction := [@switchInstructionAST new
    !instructionLocation
    !switchExpression
    !endOfSwitchExpression
    !switchBranches
    !endOfSwitchInstruction
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E    M E T H O D    C A L L    I N S T R U C T I O N               *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> !@semanticInstructionAST outInstruction :
  $[$ ;
  const @location instructionLocation := here ;
  $type_name$ ? @lstring mTypeName ;
  $identifier$ ? @lstring mMethodName ;
  @actualParameterListAST mActualParameterList ;
  <actual_parameter_list> ? mActualParameterList ;
  $]$ ;
  $;$ ;
  outInstruction := [@typeMethodCallInstructionAST new
    !instructionLocation
    !mTypeName
    !mMethodName
    !mActualParameterList
  ] ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;
