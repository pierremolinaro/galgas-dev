#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2012 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsInstanceMethods :
  import "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithoutArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ??@lstring inInstanceMethodName
  ??@bool inHasCompilerArgument
:
  [!?ioInstanceMethodMap insertKey
    !inInstanceMethodName
    ![@methodKind definedAsMember]
    ![@formalParameterSignature emptyList]
    ![inInstanceMethodName location]
    !inHasCompilerArgument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithInputArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@string inInputArgumentName
  ??@lstring inInstanceMethodName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapProxy argumentTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgumentTypeName ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !inInputArgumentName ;
  [!?ioInstanceMethodMap insertKey
    !inInstanceMethodName
    ![@methodKind definedAsMember]
    !argList
    ![inInstanceMethodName location]
    !inHasCompilerArgument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithOutputArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inOutputArgumentTypeName
  ??@string inOutputArgumentName
  ??@lstring inInstanceMethodName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapProxy argumentTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !inOutputArgumentTypeName ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentOut] !inOutputArgumentName ;
  [!?ioInstanceMethodMap insertKey
    !inInstanceMethodName
    ![@methodKind definedAsMember]
    !argList
    ![inInstanceMethodName location]
    !inHasCompilerArgument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
end routine ;

#---------------------------------------------------------------------------*

override method @dataPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
:
  outInstanceMethodMap := [@instanceMethodMap emptyMap] ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"inFilePath" !["writeToFile" nowhere] !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"inFilePath" !["writeToExecutableFile" nowhere] !true ;
  @formalParameterSignature argList [emptyList] ;
  @unifiedTypeMapProxy t ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"string" ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentConstantIn] !"inFilePath" ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"bool" ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentOut] !"outFileModified" ;
  [!?outInstanceMethodMap insertKey
    ![@lstring new !"writeToFileWhenDifferentContents" !here]
    ![@methodKind definedAsMember]
    !argList
    !here
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @stringPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
:
  outInstanceMethodMap := [@instanceMethodMap emptyMap] ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"inFilePath" ![@lstring new !"writeToFile" !here] !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"inFilePath" ![@lstring new !"writeToExecutableFile" !here] !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"inFilePath" ![@lstring new !"makeDirectoryAndWriteToFile" !here] !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"inFilePath" ![@lstring new !"makeSymbolicLinkWithPath" !here] !true ;
  enterInstanceMethodWithoutArgument !?outInstanceMethodMap ![@lstring new !"makeDirectory" !here] !true ;
  @formalParameterSignature argList [emptyList] ;
  @unifiedTypeMapProxy t ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"string" ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentConstantIn] !"inFilePath" ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"bool" ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentOut] !"outFileModified" ;
  [!?outInstanceMethodMap insertKey
    ![@lstring new !"writeToFileWhenDifferentContents" !here]
    ![@methodKind definedAsMember]
    !argList
    !here
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  [!?outInstanceMethodMap insertKey
    ![@lstring new !"writeToExecutableFileWhenDifferentContents" !here]
    ![@methodKind definedAsMember]
    !argList
    !here
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
