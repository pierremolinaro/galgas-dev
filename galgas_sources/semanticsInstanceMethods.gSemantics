#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsInstanceMethods :
  import "semanticsTypes.gSemantics" ;
  import semantics semanticsTypes in "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithoutArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ??@lstring inInstanceMethodName
  ??@bool inHasCompilerArgument
:
  [!?ioInstanceMethodMap insertOrReplace
    !inInstanceMethodName
    ![@formalParameterSignature emptyList]
    ![inInstanceMethodName location]
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithInputArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@lstring inInstanceMethodName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapProxy argumentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inInputArgumentTypeName ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?ioInstanceMethodMap insertOrReplace
    !inInstanceMethodName
    !argList
    ![inInstanceMethodName location]
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithOutputArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@lstring inInstanceMethodName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapProxy argumentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !inInputArgumentTypeName ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  [!?ioInstanceMethodMap insertOrReplace
    !inInstanceMethodName
    !argList
    ![inInstanceMethodName location]
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

override method @dataPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
:
  outInstanceMethodMap := [@instanceMethodMap emptyMap] ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" ![@lstring new !"writeToFile" !here] !true ;
end method ;

#---------------------------------------------------------------------------*

override method @stringPredefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
:
  outInstanceMethodMap := [@instanceMethodMap emptyMap] ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" ![@lstring new !"writeToFile" !here] !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" ![@lstring new !"writeToExecutableFile" !here] !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" ![@lstring new !"makeDirectoryAndWriteToFile" !here] !true ;
  enterInstanceMethodWithoutArgument !?outInstanceMethodMap ![@lstring new !"makeDirectory" !here] !true ;
  @formalParameterSignature argList [emptyList] ;
  @unifiedTypeMapProxy t ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !"string" ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !"bool" ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentOut] ;
  [!?outInstanceMethodMap insertOrReplace
    ![@lstring new !"writeToFileWhenDifferentContents" !here]
    !argList
    !here
    !true
  ] ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
