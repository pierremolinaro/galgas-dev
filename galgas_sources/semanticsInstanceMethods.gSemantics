#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsInstanceMethods :
  import "semanticsTypes.gSemantics" ;
  import semantics semanticsTypes in "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithoutArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ??@string inInstanceMethodName
  ??@bool inHasCompilerArgument
:
  [!?ioInstanceMethodMap insertKey
    ![@lstring new !inInstanceMethodName !here]
    ![@formalParameterSignature emptyList]
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterInstanceMethodWithInputArgument
  ?!@instanceMethodMap ioInstanceMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInstanceMethodName
  ??@string inInputArgumentTypeName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapIndex argumentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgumentTypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?ioInstanceMethodMap insertKey
    ![@lstring new !inInstanceMethodName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine instanceMethodMapFor_data
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
:
  outInstanceMethodMap := [@instanceMethodMap emptyMap] ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"writeToFile" !true ;
end routine ;

#---------------------------------------------------------------------------*

routine instanceMethodMapFor_string
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
:
  outInstanceMethodMap := [@instanceMethodMap emptyMap] ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"writeToFile" !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"writeToExecutableFile" !true ;
  enterInstanceMethodWithInputArgument !?outInstanceMethodMap !?ioUnifiedTypeMap !"string" !"makeDirectoryAndWriteToFile" !true ;
  enterInstanceMethodWithoutArgument !?outInstanceMethodMap !"makeDirectory" !true ;
  @formalParameterSignature argList [emptyList] ;
  @unifiedTypeMapIndex t ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"string" !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"bool" !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ![@formalArgumentPassingModeAST argumentOut] ;
  [!?outInstanceMethodMap insertKey
    ![@lstring new !"writeToFileWhenDifferentContents" !here]
    !argList
    !true
  ] ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
