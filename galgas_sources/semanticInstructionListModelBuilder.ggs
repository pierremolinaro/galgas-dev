#---------------------------------------------------------------------------*
#                                                                           *
#  'metamodel' component parser, as model builder                           *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax semanticInstructionListModelBuilder :
import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import metamodel instructionMetamodel in "instructionMetamodel.gMetamodel" ;

nonterminal <semantic_instruction_list> -> @semanticInstructions ;

nonterminal <semantic_instruction> -> @semanticInstruction ;

#---------------------------------------------------------------------------*

rule <semantic_instruction_list> -> @semanticInstructions :
  repeat
  while
    <semantic_instruction> +> mInstruction ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  L O C A L    V A R I A B L E    D E C L A R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> -> @localVariableDeclaration :
  $type_name$ ? mTypeName ;
  $identifier$ ? mVariableName ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    A S S I G N M E N T    I N S T R U C T I O N                           *
#                                                                           *
#---------------------------------------------------------------------------*

#rule <semantic_instruction> -> @assignmentInstruction :
#  $identifier$ ? mTargetVariableName ;
#  $:=$ ;
#  <expression> -> mSourceExpression ;
#  $;$ ;
#end rule ;


#---------------------------------------------------------------------------*

end syntax ;
