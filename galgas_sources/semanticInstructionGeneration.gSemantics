#---------------------------------------------------------------------------*
#                                                                           *
#  Generate predefined types                                                *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticInstructionGeneration :
  import "semanticExpressionGeneration.gSemantics" ;

  import semantics semanticExpressionGeneration in "semanticExpressionGeneration.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#           I N S T R U C T I O N    G E N E R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "?UNHANDLED INSTRUCTION?\n" ;
end method ;

#---------------------------------------------------------------------------*

function generateRoutineBody
  ??@semanticInstructionListForGeneration inInstructionList
  ->@string outGeneratedCode
:
  outGeneratedCode := "" ;
  @uint temporaryVariableIndex := 0 ;
  [!?outGeneratedCode incIndentation !2] ;
  foreach inInstructionList do
    [mInstruction generateInstruction !?temporaryVariableIndex !?outGeneratedCode] ;
  end foreach ;
  [!?outGeneratedCode decIndentation !2] ;
end function ;

#---------------------------------------------------------------------------*

routine generateInstructionList
  ??@semanticInstructionListForGeneration inInstructionList
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  [!?ioGeneratedCode incIndentation !2] ;
  foreach inInstructionList do
    [mInstruction generateInstruction !?ioTemporaryVariableIndex !?ioGeneratedCode] ;
  end foreach ;
  [!?ioGeneratedCode decIndentation !2] ;
end routine ;

#---------------------------------------------------------------------------*

override method @localVariableOrConstantDeclarationWithSourceExpressionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration\n" ;
  @string sourceVar ;
  [mSourceExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?sourceVar] ;
  if mIsConstant then
    ioGeneratedCode .= "const " ;
  end if ;
  ioGeneratedCode .= "GALGAS_" . [mTargetType identifierRepresentation] . " * " . mCppVariableName
                    . " = " . sourceVar . " ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @localVariableDeclarationForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @localVariableDeclarationForGeneration\n" ;
  ioGeneratedCode .= "GALGAS_" . [mVariableType identifierRepresentation] . " * " . mCppVariableName . " = NULL ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @localVariableOrConstantDeclarationWithConstructorCallForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@localVariableOrConstantDeclarationWithConstructorCallForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @assignmentInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@assignmentInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @dropInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @dropInstructionForGeneration\n" ;
  foreach mDropList do
    ioGeneratedCode .= "macroReleaseObject (" . mValue . ") ; // " . mComment . "\n" ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @appendInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@appendInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @sendInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@sendInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @ifInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @ifInstructionForGeneration\n" ;
#--- Generate test expression
  @string cppVarName ;
  [mIFexpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?cppVarName] ;
#--- If test expression is not valuated, skip if instruction
  ioGeneratedCode .= "if (NULL != " . cppVarName . ") {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  ioGeneratedCode .= "macroValidObject (" . cppVarName . ", GALGAS_bool) ;\n" ;
  const @string testVar := "test_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
  ioGeneratedCode .= "const bool " . testVar . " = " . cppVarName . "->boolValue () ;\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . cppVarName . ") ; // Release test temporary variable\n" ;
  ioGeneratedCode .= "if (" . testVar . ") {\n" ;
  generateInstructionList !m_then_instructionList !?ioTemporaryVariableIndex !?ioGeneratedCode ;
  if [m_else_instructionList length] > 0 then
    ioGeneratedCode .= "}else{\n" ;
    generateInstructionList !m_else_instructionList !?ioTemporaryVariableIndex !?ioGeneratedCode ;
  end if ;
  ioGeneratedCode .= "}\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @errorInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@errorInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @warningInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @warningInstructionForGeneration\n" ;
#--- Receiver expression
  @string receiverCppVarName ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?receiverCppVarName] ;
#--- Receiver expression
  @string messageCppVarName ;
  [mWarningExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?messageCppVarName] ;
#--- Generate warning instruction
  ioGeneratedCode .= "inCompiler->emitSemanticWarning (" . receiverCppVarName . ", " . messageCppVarName . " COMMA_HERE) ;\n" ;
#--- Release temporary variables
  ioGeneratedCode .= "macroReleaseObject (" . receiverCppVarName . ") ; // Release receiver temporary variable\n" ;
  ioGeneratedCode .= "macroReleaseObject (" . messageCppVarName . ") ; // Release message temporary variable\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @routineCallInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@routineCallInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @typeMethodInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@typeMethodInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

abstract method @actualParameterForGeneration generateActualParameter
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist ioParametersToReleaseList
  !@string outCppName
;

#---------------------------------------------------------------------------*

override method @outputActualParameterForGeneration generateActualParameter
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist ioParametersToReleaseList
  !@string outCppName
:
  [mOutputActualParameterExpression generateExpression !?ioImplementation !?ioTemporaryVariableIndex ?outCppName] ;
  ioParametersToReleaseList += !outCppName ;
end method ;

#---------------------------------------------------------------------------*

override method @outputInputActualParameterForGeneration generateActualParameter
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist unused ioParametersToReleaseList
  !@string outCppName
:
  foreach mStructAttributeList do
    ioImplementation .= "(handle field in @outputInputActualParameterForGeneration)\n" ;
  end foreach ;
  outCppName := mOutputInputVariableCppName ;
end method ;

#---------------------------------------------------------------------------*

override method @inputActualParameterForGeneration generateActualParameter
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist unused ioParametersToReleaseList
  !@string outCppName
:
  outCppName := mInputActualCppName ;
  ioImplementation .= "macroReleaseObject (" . outCppName . ") ; // Release input parameter\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @methodCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @methodCallInstructionForGeneration\n" ;
#--- Receiver expression
  @string receiverVar ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex ?receiverVar] ;
#---
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist parametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?parametersToReleaseList ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  ioGeneratedCode .= "instanceMethodCall_" . [mMethodName identifierRepresentation] . " ("
                    . receiverVar ;
  foreach parameterCppNameList do
    ioGeneratedCode .= ", " . mValue ;
  end foreach ;
  if mHasCompilerArgument then
    ioGeneratedCode .= ", inCompiler" ;
  end if ;
  ioGeneratedCode .= " COMMA_THERE) ;\n" ;
#--- Release receiver temporary variable
  ioGeneratedCode .= "macroReleaseObject (" . receiverVar . ") ; // Release receiver temporary variable\n" ;
#--- Release temporary variables
  foreach parametersToReleaseList do
    ioGeneratedCode .= "macroReleaseObject (" . mValue . ") ; // Release method call temporary output parameters\n" ;
  end foreach ;
#--- Release temporary input variables (joker in source)
  foreach mTemporaryInputVariableList do
    ioGeneratedCode .= "macroReleaseObject (" . mCppName . ") ; // Release temporary input variables (joker in source)\n" ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @modifierCallInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@modifierCallInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @addAssignInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@addAssignInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @incrementInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@incrementInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @decrementInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@decrementInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @messageInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@messageInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
