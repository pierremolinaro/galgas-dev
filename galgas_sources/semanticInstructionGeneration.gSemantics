#---------------------------------------------------------------------------*
#                                                                           *
#  Generate predefined types                                                *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticInstructionGeneration :
  import "semanticExpressionGeneration.gSemantics" ;

  import semantics semanticExpressionGeneration in "semanticExpressionGeneration.gSemantics" ;

#---------------------------------------------------------------------------*

abstract method @actualParameterForGeneration generateActualParameter
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist ioJokerParametersToReleaseList
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppName
;

#---------------------------------------------------------------------------*

override method @outputActualParameterForGeneration generateActualParameter
  ?!@uint ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName
:
  [mOutputActualParameterExpression generateExpression !?ioImplementation !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?outCppName] ;
end method ;

#---------------------------------------------------------------------------*

override method @outputInputActualParameterForGeneration generateActualParameter
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string unused ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName
:
  outCppName := mOutputInputVariableCppName ;
  foreach mStructAttributeList do
    outCppName .= ".mAttribute_" . [mValue identifierRepresentation] ;
  end foreach ;
  [!?ioUnusedVariableCppNameSet removeKey !mOutputInputVariableCppName] ;
end method ;

#---------------------------------------------------------------------------*

override method @inputActualParameterForGeneration generateActualParameter
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string unused ioImplementation
  ?!@stringlist unused ioJokerParametersToReleaseList
  ?!@stringset ioUnusedVariableCppNameSet
  !@string outCppName
:
  outCppName := mInputActualCppName ;
  [!?ioUnusedVariableCppNameSet removeKey !outCppName] ;
end method ;

#---------------------------------------------------------------------------*

override method @inputJokerParameterForGeneration generateActualParameter
  ?!@uint unused ioTemporaryVariableIndex
  ?!@string ioImplementation
  ?!@stringlist ioJokerParametersToReleaseList
  ?!@stringset unused ioUnusedVariableCppNameSet
  !@string outCppName
:
  outCppName := mInputActualCppName ;
  ioImplementation .= "GALGAS_" . [mFormalArgumentType identifierRepresentation] . " " . outCppName . " ; // Joker input parameter\n" ;
  ioJokerParametersToReleaseList += !mInputActualCppName ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#           I N S T R U C T I O N    G E N E R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "?UNHANDLED INSTRUCTION?\n" ;
end method ;

#---------------------------------------------------------------------------*

function generateRoutineBody
  ??@semanticInstructionListForGeneration inInstructionList
  ->@string outGeneratedCode
:
  @stringset unusedVariableCppNameSet [emptySet] ;
  outGeneratedCode := "" ;
  @uint temporaryVariableIndex := 0 ;
  [!?outGeneratedCode incIndentation !2] ;
  foreach inInstructionList do
    [mInstruction generateInstruction !?temporaryVariableIndex !?unusedVariableCppNameSet !?outGeneratedCode] ;
  end foreach ;
  [!?outGeneratedCode decIndentation !2] ;
end function ;

#---------------------------------------------------------------------------*

routine generateInstructionList
  ??@semanticInstructionListForGeneration inInstructionList
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  [!?ioGeneratedCode incIndentation !2] ;
  foreach inInstructionList do
    [mInstruction generateInstruction !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode] ;
  end foreach ;
  [!?ioGeneratedCode decIndentation !2] ;
end routine ;

#---------------------------------------------------------------------------*

override method @localVariableOrConstantDeclarationWithSourceExpressionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @localVariableOrConstantDeclarationWithSourceExpressionForGeneration\n" ;
  @string sourceVar ;
  [mSourceExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?sourceVar] ;
  ioGeneratedCode .= "GALGAS_" . [mTargetType identifierRepresentation] . " " . mCppVariableName
                    . " (" . sourceVar . ") ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @localVariableDeclarationForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @localVariableDeclarationForGeneration\n" ;
  ioGeneratedCode .= "GALGAS_" . [mVariableType identifierRepresentation] . " " . mCppVariableName . " ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @localVariableOrConstantDeclarationWithConstructorCallForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @localVariableOrConstantDeclarationWithConstructorCallForGeneration\n" ;
  @stringlist parameterList [emptyList] ;
  foreach mConstructorArguments do
    @string parameter ;
    [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?parameter] ;
    parameterList += !parameter ;  
  end foreach ;
  ioGeneratedCode .= "GALGAS_" . [mTargetType identifierRepresentation]
                   . " " . mTargetVariableCppName
                   . " (GALGAS_"  . [mTargetType identifierRepresentation]
                   . "::constructor_" . [mConstructorName identifierRepresentation]
                   . " (" ;
  foreach parameterList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  @bool needsComma := [parameterList length] > 0 ;
  if mHasCompilerArgument then
    if needsComma then
      ioGeneratedCode .= ", " ;
    end if ;
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .= compilerCppName [] ;
    needsComma := true ;
  end if ;
  if needsComma then
    ioGeneratedCode .= " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . "))) ;\n" ;
  else
    ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . "))) ;\n" ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @assignmentInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @assignmentInstructionForGeneration\n" ;
  @string sourceVar ;
  [mSourceExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?sourceVar] ;
  @string receiverCppName := mTargetCppName ;
  foreach mStructAttributeList do
    receiverCppName .= ".mAttribute_" . [[mValue string] identifierRepresentation] ;
  end foreach ;
  ioGeneratedCode .= receiverCppName . " = " . sourceVar . " ;\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !mTargetCppName] ;
end method ;

#---------------------------------------------------------------------------*

override method @dropInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @dropInstructionForGeneration\n" ;
  foreach mDropList do
    ioGeneratedCode .= mValue . ".drop () ; // " . mComment . "\n" ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @appendInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @appendInstructionForGeneration\n" ;
  @string sourceVar ;
  [mSourceExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?sourceVar] ;
  foreach mStructAttributeList do
    ioGeneratedCode .= "(TO DO handle field in @appendInstructionForGeneration)\n" ;
  end foreach ;
  ioGeneratedCode .= mTargetVariableCppName . ".dotAssign_operation (" . sourceVar
                  . " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !mTargetVariableCppName] ;
end method ;

#---------------------------------------------------------------------------*

override method @grammarInstructionWithSourceFileForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "{ //-------- @grammarInstructionWithSourceFileForGeneration\n" ;
#--- Source string
  @string sourceVar ;
  [mSourceFileExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?sourceVar] ;
#--- Parameters
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
  ioGeneratedCode .= "cGrammar_" . [mGrammarName identifierRepresentation]
                  .  "::_performSourceFileParsing_" . [mLabelName identifierRepresentation] 
                  .  " (" . compilerCppName [] . ", " . sourceVar ;
  foreach parameterCppNameList do
    ioGeneratedCode .= ", " . mValue ;
  end foreach ;
  ioGeneratedCode .= " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  ioGeneratedCode .= "} //-------- END @grammarInstructionWithSourceFileForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @grammarInstructionWithSourceExpressionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "{ //---- @grammarInstructionWithSourceExpressionForGeneration\n" ;
#--- Source string
  @string sourceVar ;
  [mSourceStringExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?sourceVar] ;
#--- Parameters
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
  ioGeneratedCode .= "cGrammar_" . [mGrammarName identifierRepresentation]
                  .  "::_performSourceStringParsing_" . [mLabelName identifierRepresentation] 
                  .  " (" . compilerCppName [] . ", " . sourceVar ;
  foreach parameterCppNameList do
    ioGeneratedCode .= ", " . mValue ;
  end foreach ;
  ioGeneratedCode .= " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  ioGeneratedCode .= "} //---- END @grammarInstructionWithSourceExpressionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @ifInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @ifInstructionForGeneration\n" ;
#--- Generate test expression
  @string cppVarName ;
  [mIFexpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?cppVarName] ;
#--- If test expression is not valuated or false, execute 'else' part
  ioGeneratedCode .= "if (" . cppVarName . ".isValidAndTrue ()) {\n" ;
  generateInstructionList !m_then_instructionList !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  if [m_else_instructionList length] > 0 then
    ioGeneratedCode .= "}else{\n" ;
    generateInstructionList !m_else_instructionList !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  end if ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @errorInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @errorInstructionForGeneration\n" ;
#--- Receiver expression
  @string receiverCppVarName ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?receiverCppVarName] ;
#--- Receiver expression
  @string messageCppVarName ;
  [mErrorExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?messageCppVarName] ;
#--- Use location reader ?
  if mUseLocationReader then
    const @string locationVar := "location_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
    ioGeneratedCode .= "GALGAS_location " . locationVar . " (" . receiverCppVarName . ".reader_location (HERE)) ; // Implicit use of 'location' reader\n" ;
    receiverCppVarName := locationVar ;
  end if ;
#--- Generate error instruction
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  ioGeneratedCode .= compilerCppName [] . "->emitSemanticError (" . receiverCppVarName . ", " . messageCppVarName
                   . " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
#--- Release dropped variables
  foreach mBuiltVariableCppNameList do
    [!?ioUnusedVariableCppNameSet removeKey !mValue] ;
    ioGeneratedCode .= mValue . ".drop () ; // Release error dropped variable\n" ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @warningInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @warningInstructionForGeneration\n" ;
#--- Receiver expression
  @string receiverCppVarName ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?receiverCppVarName] ;
#--- Receiver expression
  @string messageCppVarName ;
  [mWarningExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?messageCppVarName] ;
#--- Use location reader ?
  if mUseLocationReader then
    const @string locationVar := "location_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
    ioGeneratedCode .= "GALGAS_location " . locationVar . " (" . receiverCppVarName . ".reader_location (HERE)) ; // Implicit use of 'location' reader\n" ;
    receiverCppVarName := locationVar ;
  end if ;
#--- Generate warning instruction
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  ioGeneratedCode .= compilerCppName [] . "->emitSemanticWarning (" . receiverCppVarName . ", " . messageCppVarName
                  . " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @methodCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @methodCallInstructionForGeneration\n" ;
#--- Receiver expression
  @string receiverVar ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?receiverVar] ;
#---
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  if mIsCategory then
    ioGeneratedCode .= "callCategoryMethod_" . [mMethodName identifierRepresentation] . " ((const cPtr_" . [[mReceiverExpression mType] identifierRepresentation] . " *) " . receiverVar . ".ptr (), " ;
  else
    ioGeneratedCode .= receiverVar . ".method_" . [mMethodName identifierRepresentation] . " (" ;
  end if ;
  foreach parameterCppNameList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  if [parameterCppNameList length] == 0 then
    if mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
      ioGeneratedCode .= compilerCppName [] ;
      ioGeneratedCode .= " COMMA_" ;
    end if ;
  elsif mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .= ", " . compilerCppName [] ;
    ioGeneratedCode .= " COMMA_" ;
  else
    ioGeneratedCode .= " COMMA_" ;
  end if ;
  ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  ioGeneratedCode .= "//-------- END @methodCallInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @thisMethodCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @thisMethodCallInstructionForGeneration\n" ;
#---
  [!?ioUnusedVariableCppNameSet removeKey !selfMarkName []] ;
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  if mIsCategory then
    ioGeneratedCode .= "callCategoryMethod_" . [mMethodName identifierRepresentation] . " (" . mCurrentObjectCppPointer . ", " ;
  else
    ioGeneratedCode .= mCurrentObjectCppPointer . "->method_" . [mMethodName identifierRepresentation] . " (" ;
  end if ;
  foreach parameterCppNameList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  if [parameterCppNameList length] == 0 then
    if mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
      ioGeneratedCode .= compilerCppName [] ;
      ioGeneratedCode .= " COMMA_" ;
    end if ;
  elsif mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .= ", " . compilerCppName [] ;
    ioGeneratedCode .= " COMMA_" ;
  else
    ioGeneratedCode .= " COMMA_" ;
  end if ;
  ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  ioGeneratedCode .= "//-------- END @thisMethodCallInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @superMethodCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @superMethodCallInstructionForGeneration\n" ;
#---
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  ioGeneratedCode .= "cPtr_" . [mSuperClassThatImplementsMethod identifierRepresentation] . "::method_" . [mMethodName identifierRepresentation] . " (" ;
  foreach parameterCppNameList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  if [parameterCppNameList length] == 0 then
    if mHasCompilerArgument then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
      ioGeneratedCode .= compilerCppName [] ;
      ioGeneratedCode .= " COMMA_" ;
    end if ;
  elsif mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .= ", " . compilerCppName [] ;
    ioGeneratedCode .= " COMMA_" ;
  else
    ioGeneratedCode .= " COMMA_" ;
  end if ;
  ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  ioGeneratedCode .= "//-------- END @superMethodCallInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @routineCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "{ //-------- @routineCallInstructionForGeneration\n" ;
#--- Parameters
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  ioGeneratedCode .= "routine_" . [[mRoutineName string] identifierRepresentation] . " (" ;
  foreach parameterCppNameList do
    ioGeneratedCode .= mValue . ", " ;
  end foreach ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  ioGeneratedCode .=  compilerCppName [] . " COMMA_SOURCE_FILE_AT_LINE (" . [[[mRoutineName location] line] string] . ")) ;\n" ;
  ioGeneratedCode .= "} //-------- @routineCallInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @modifierCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "{ //-------- @modifierCallInstructionForGeneration\n" ;
  @string receiverCppName := mReceiverCppName ;
  foreach mReceiverStructAttributes do
    receiverCppName .= ".mAttribute_" . [[mValue string] identifierRepresentation] ;
  end foreach ;
#--- Parameters
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  [!?ioUnusedVariableCppNameSet removeKey !mReceiverCppName] ;
  ioGeneratedCode .= receiverCppName . ".modifier_" . [[mModifierName string] identifierRepresentation] . " (" ;
  foreach parameterCppNameList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  if mHasCompilerArgument then
    if [parameterCppNameList length] != 0 then
      ioGeneratedCode .=  ", " ;
    end if ;
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .=  compilerCppName [] ;
    ioGeneratedCode .= " COMMA_" ;
  elsif [parameterCppNameList length] != 0 then
    ioGeneratedCode .= " COMMA_" ;
  end if ;
  ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[[mModifierName location] line] string] . ")) ;\n" ;
  ioGeneratedCode .= "} //-------- END @typeMethodInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @thisModifierCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "{ //-------- @thisModifierCallInstructionForGeneration\n" ;
#--- Parameters
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  ioGeneratedCode .= "modifier_" . [[mModifierName string] identifierRepresentation] . " (" ;
  foreach parameterCppNameList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  if mHasCompilerArgument then
    if [parameterCppNameList length] != 0 then
      ioGeneratedCode .=  ", " ;
    end if ;
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .=  compilerCppName [] ;
    ioGeneratedCode .= " COMMA_" ;
  elsif [parameterCppNameList length] != 0 then
    ioGeneratedCode .= " COMMA_" ;
  end if ;
  ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[[mModifierName location] line] string] . ")) ;\n" ;
  ioGeneratedCode .= "} //-------- END @thisModifierCallInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @superModifierCallInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "{ //-------- @superModifierCallInstructionForGeneration\n" ;
#--- Parameters
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  ioGeneratedCode .= "cPtr_" . [mSuperClassThatImplementsModifier identifierRepresentation] . "::modifier_" . [[mModifierName string] identifierRepresentation] . " (" ;
  foreach parameterCppNameList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  if mHasCompilerArgument then
    if [parameterCppNameList length] != 0 then
      ioGeneratedCode .=  ", " ;
    end if ;
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .=  compilerCppName [] ;
    ioGeneratedCode .= " COMMA_" ;
  elsif [parameterCppNameList length] != 0 then
    ioGeneratedCode .= " COMMA_" ;
  end if ;
  ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[[mModifierName location] line] string] . ")) ;\n" ;
  ioGeneratedCode .= "} //-------- END @superModifierCallInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @typeMethodInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "{ //-------- @typeMethodInstructionForGeneration\n" ;
#--- Parameters
  @stringlist parameterCppNameList [emptyList] ;
  @stringlist jokerParametersToReleaseList [emptyList] ;
  foreach mActualParameterList do
    @string parameterCppName ;
    [mActualParameter generateActualParameter !?ioTemporaryVariableIndex !?ioGeneratedCode !?jokerParametersToReleaseList !?ioUnusedVariableCppNameSet ?parameterCppName] ;
    parameterCppNameList += !parameterCppName ;
  end foreach ;
#--- Generate method call
  ioGeneratedCode .= "GALGAS_" . [[mTypeName string] identifierRepresentation]
                  . "::class_method_" . [[mMethodName string] identifierRepresentation] . " (" ;
  foreach parameterCppNameList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  if mHasCompilerArgument then
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    if [parameterCppNameList length] > 0 then
      ioGeneratedCode .= ", " ;
    end if ;
    ioGeneratedCode .=  compilerCppName [] ;
  end if ;
  if mHasCompilerArgument | ([parameterCppNameList length] > 0) then
    ioGeneratedCode .= " COMMA_" ;
  end if ;
  ioGeneratedCode .= "SOURCE_FILE_AT_LINE (" . [[[mMethodName location] line] string] . ")) ;\n" ;
  ioGeneratedCode .= "} //-------- @routineCallInstructionForGeneration\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @structuredCastInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @structuredCastInstructionForGeneration\n" ;
#--- Cast expression
  @string castCppVarName ;
  [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?castCppVarName] ;
#---
  ioGeneratedCode .= "if (" . castCppVarName . ".isValid ()) {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  foreach mCastBranchList do
    if mUseKindOfClass then
      ioGeneratedCode .= "if (NULL != dynamic_cast <const cPtr_" . [mType identifierRepresentation] . " *> (" . castCppVarName . ".ptr ())) {\n" ;
    else
      ioGeneratedCode .= "if (" . castCppVarName . ".dynamicTypeDescriptor () == & kTypeDescriptor_GALGAS_" . [mType identifierRepresentation] . ") {\n" ;
    end if ;
    if [mCastedVarCppName length] > 0 then
      ioGeneratedCode .= "  GALGAS_" . [mType identifierRepresentation] . " " . mCastedVarCppName . " ((cPtr_" . [mType identifierRepresentation] . " *) " . castCppVarName . ".ptr ()) ;\n" ;
    end if ;
    generateInstructionList
      !mInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;
  between ioGeneratedCode .= "}else " ;
  end foreach ;
#--- 'else' branch
  if [mElseInstructionList length] > 0 then
    ioGeneratedCode .= "}else{\n" ;
    generateInstructionList
      !mElseInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;  
  end if ;
#---
  ioGeneratedCode .= "}\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @addAssignInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @addAssignInstructionForGeneration\n" ;
#--- Parameters
  @stringlist parameterList [emptyList] ;
  foreach mExpressionList do
    @string parameter ;
    [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?parameter] ;
    parameterList += !parameter ;  
  end foreach ;
#--- Receiver
  [!?ioUnusedVariableCppNameSet removeKey !mReceiverCppName] ;
  @string receiverCppName := mReceiverCppName ;
  foreach mStructAttributeList do
    receiverCppName .= ".mAttribute_" . [[mValue string] identifierRepresentation] ;
  end foreach ;
#--- Call add assign (+=) operator
  ioGeneratedCode .= receiverCppName . ".addAssign_operation (" ;
  foreach parameterList
    do ioGeneratedCode .= mValue ;
    between ioGeneratedCode .= ", " ;
  end foreach ;
  ioGeneratedCode .= " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n"  ;
end method ;

#---------------------------------------------------------------------------*

override method @incrementInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @incrementInstructionForGeneration\n" ;
#--- Receiver
  [!?ioUnusedVariableCppNameSet removeKey !mReceiverCppName] ;
  @string receiverCppName := mReceiverCppName ;
  foreach mStructAttributeList do
    receiverCppName .= ".mAttribute_" . [[mValue string] identifierRepresentation] ;
  end foreach ;
#--- Invoke incrementation
  ioGeneratedCode .= receiverCppName . ".increment_operation (" . compilerCppName []
                  . " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @decrementInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @decrementInstructionForGeneration\n" ;
#--- Receiver
  [!?ioUnusedVariableCppNameSet removeKey !mReceiverCppName] ;
  @string receiverCppName := mReceiverCppName ;
  foreach mStructAttributeList do
    receiverCppName .= ".mAttribute_" . [[mValue string] identifierRepresentation] ;
  end foreach ;
#--- Invoke incrementation
  ioGeneratedCode .= receiverCppName . ".decrement_operation (" . compilerCppName []
                  . " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @messageInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @messageInstructionForGeneration\n" ;
#--- Message expression
  @string messageCppVarName ;
  [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?messageCppVarName] ;
#--- Invoke 'printMessage' method of C_Compiler
  ioGeneratedCode .= compilerCppName [] . "->printMessage (" . messageCppVarName ;
  ioGeneratedCode .= " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n"  ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
end method ;

#---------------------------------------------------------------------------*

override method @loopInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @loopInstructionForGeneration\n" ;
#--- Variant expression
  @string variantCppVarName ;
  [mVariantExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?variantCppVarName] ;
  ioGeneratedCode .= "if (" . variantCppVarName . ".isValid ()) {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  const @string variantVar := "variant_" . [[mInstructionLocation locationIndex] string] ;
  ioGeneratedCode .= "PMUInt32 " . variantVar . " = " . variantCppVarName . ".uintValue () ;\n" ;
  const @string loopVar := "loop_" . [[mInstructionLocation locationIndex] string] ;
  ioGeneratedCode .= "bool " . loopVar . " = true ;\n"
                  . "while (" . loopVar . ") {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  generateInstructionList !mFirstInstructions !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  @string loopExpressionVar ;
  [mLoopExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?loopExpressionVar] ;
  ioGeneratedCode .= loopVar . " = " . loopExpressionVar . ".isValid () ;\n"
                   . "if (" . loopVar . ") {\n"
                   . "  " . loopVar . " = " . loopExpressionVar . ".boolValue () ;\n"
                   . "}\n" ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  ioGeneratedCode .= "if (" . loopVar . " && (0 == " . variantVar . ")) {\n"
                     "  " . loopVar . " = false ;\n"
                     "  " . compilerCppName [] . "->loopRunTimeVariantError (SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n"
                     "}\n"
                   . "if (" . loopVar . ") {\n" ;
  ioGeneratedCode .= "  " . variantVar . " -- ;\n" ;
  generateInstructionList !mSecondInstructions !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  ioGeneratedCode .= "}\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @readOnlyWithInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @readOnlyWithInstructionForGeneration\n" ;
#--- Receiver expression
  @string receiverVarCppName ;
  [mReceiverExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?receiverVarCppName] ;
  const @unifiedTypeMapProxy receiverType := [mReceiverExpression mType] ;
#--- key expression
  @string keyVarCppName ;
  [mKeyExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?keyVarCppName] ;
#---
  ioGeneratedCode .= "const cMapElement_" . [receiverType identifierRepresentation]
                  . " * " . mObjectArrayCppName . " = (const cMapElement_" . [receiverType identifierRepresentation]
                  . " *) " . receiverVarCppName . "." ;
  if mAccessName != "hasKey" then
    ioGeneratedCode .= "readAccessForWithInstruction_hasKey (" . keyVarCppName . ") ;\n" ;
  else
    [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
    ioGeneratedCode .= "performSearch (" . keyVarCppName . ", " . compilerCppName []
                     . ", kSearchErrorMessage_" . [receiverType identifierRepresentation] . "_" . [mAccessName identifierRepresentation]
                     . " COMMA_HERE) ;\n" ;
  end if ;
  ioGeneratedCode .= "if (NULL != " . mObjectArrayCppName . ") {\n"
                  .  "    macroValidSharedObject (" . mObjectArrayCppName . ", const cMapElement_" . [receiverType identifierRepresentation] . ") ;\n" ;
  generateInstructionList !mDoBranchInstructions !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  if [mElseBranchInstructions length] > 0 then
    ioGeneratedCode .= "}else{\n" ;
    generateInstructionList !mElseBranchInstructions !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  end if ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @readWriteWithInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @readWriteWithInstructionForGeneration\n" ;
  @string receiverCppName := mReceiverVariableCppName ;
  foreach mStructAttributeList do
    receiverCppName .= ".mAttribute_" . [[mValue string] identifierRepresentation] ;
  end foreach ;
#--- key expression
  @string keyVarCppName ;
  [mKeyExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?keyVarCppName] ;
#---
  foreach [mReceiverType mCurrentTypedAttributeList] index IDX do
    ioGeneratedCode .= "// index " . [IDX+1 string] . ": attribute '" . mAttributeName . "', type @" . [mAttributeTypeProxy key] . "\n" ;
  end foreach ;
  [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
  [!?ioUnusedVariableCppNameSet removeKey !mReceiverVariableCppName] ;
  ioGeneratedCode .= "cMapElement_" . [mReceiverType identifierRepresentation]
                  . " * " . mObjectArrayCppName . " = (cMapElement_" . [mReceiverType identifierRepresentation]
                  . " *) " . receiverCppName . ".readWriteAccessForWithInstruction_" . [mAccessName identifierRepresentation] . " (" . compilerCppName []
                  .  ", " . keyVarCppName . " COMMA_HERE) ;\n"
                  .  "if (NULL != " . mObjectArrayCppName . ") {\n"
                  .  "    macroValidSharedObject (" . mObjectArrayCppName . ", cMapElement_" . [mReceiverType identifierRepresentation] . ") ;\n" ;
  generateInstructionList !mDoBranchInstructions !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  if [mElseBranchInstructions length] > 0 then
    ioGeneratedCode .= "}else{\n" ;
    generateInstructionList !mElseBranchInstructions !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet !?ioGeneratedCode ;
  end if ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @foreachInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @foreachInstructionForGeneration\n" ;
  @stringlist enumerationVarCppNameList [emptyList] ;
  foreach mEnumeratedObjectList do
    @string enumerationVar ;
    [mEnumeratedExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?enumerationVar] ;
    enumerationVarCppNameList += !enumerationVar ;
  end foreach ;
  foreach mEnumeratedObjectList, enumerationVarCppNameList do
    ioGeneratedCode .= "cEnumerator_" . [[mEnumeratedExpression mType] identifierRepresentation] . " " . mEnumeratorCppName . " (" . mValue . ", "
                    . [mIsAscending cString] . ") ;\n" ;
  end foreach ;
#--- Analyse 'while' expression
  const @bool whileExpressionIsAllwaysTrue := [mWhileExpression isTrueExpression] ;
#--- Has 'before', 'after' or expression ? If yes, generate 'before' instructions
  if (([mBeforeInstructionList length] + [mAfterInstructionList length]) > 0) | not whileExpressionIsAllwaysTrue then
    ioGeneratedCode .= "//--- complex foreach instruction\n" ;
  #--- Index
    if mIndexVariableCppName != "" then
      ioGeneratedCode .= "GALGAS_uint " . mIndexVariableCppName . " ((PMUInt32) 0) ;\n" ;
    end if ;
    const @string boolVarCppName := "bool_" . [ioTemporaryVariableIndex string] ; ioTemporaryVariableIndex ++ ;
    if whileExpressionIsAllwaysTrue then
      ioGeneratedCode .= "bool " . boolVarCppName . " = true ;\n" ;
    else
      @string whileVar ;
      [mWhileExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?whileVar] ;
      ioGeneratedCode .= "bool " . boolVarCppName . " = " . whileVar . ".isValidAndTrue () ;\n" ;
    end if ;
    ioGeneratedCode .= "if (" ;
    foreach mEnumeratedObjectList do
      ioGeneratedCode .= mEnumeratorCppName . ".hasCurrentObject () && " ;
    end foreach ;
    ioGeneratedCode .= boolVarCppName . ") {\n" ;
    generateInstructionList
      !mBeforeInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;
    [!?ioGeneratedCode incIndentation !2] ;
    ioGeneratedCode .= "while (" ;
    foreach mEnumeratedObjectList do
      ioGeneratedCode .= mEnumeratorCppName . ".hasCurrentObject () && " ;
    end foreach ;
    ioGeneratedCode .= boolVarCppName . ") {\n" ;
  #--- Generate 'do' instruction
    generateInstructionList
      !mDoInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;
  #--- Compute 'while' expression
    if not whileExpressionIsAllwaysTrue then
      @string whileVar ;
      [mWhileExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?whileVar] ;
      ioGeneratedCode .= "  " . boolVarCppName . " = " . whileVar . ".isValidAndTrue () ;\n" ;
    end if ;
  #--- Generate 'between' instruction
    if [mBetweenInstructionList length] > 0 then
      [!?ioGeneratedCode incIndentation !2] ;
      ioGeneratedCode .= "if (" ;
      foreach mEnumeratedObjectList do
        ioGeneratedCode .= mEnumeratorCppName . ".hasNextObject () && " ;
      end foreach ;
      ioGeneratedCode .= boolVarCppName . ") {\n" ;
      generateInstructionList
        !mBetweenInstructionList
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        !?ioGeneratedCode
      ;
      ioGeneratedCode .= "}\n" ;
      [!?ioGeneratedCode decIndentation !2] ;
    end if ;
  #--- End of foreach instruction
    foreach mEnumeratedObjectList do
      ioGeneratedCode .= "  " . mEnumeratorCppName . ".gotoNextObject () ;\n" ;
    end foreach ;
    if mIndexVariableCppName != "" then
      ioGeneratedCode .= "  " . mIndexVariableCppName . ".increment () ;\n" ;
    end if ;
    ioGeneratedCode .= "}\n" ;
  #--- Generate 'after' instruction
    generateInstructionList
      !mAfterInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;
    [!?ioGeneratedCode decIndentation !2] ;
    ioGeneratedCode .= "}\n" ;
  else #----- foreach instruction without 'before', 'after', while expression
    ioGeneratedCode .= "//--- simple foreach instruction\n" ;
    if mIndexVariableCppName != "" then
      ioGeneratedCode .= "GALGAS_uint " . mIndexVariableCppName . " ((PMUInt32) 0) ;\n" ;
    end if ;
    ioGeneratedCode .= "while (" ;
    foreach mEnumeratedObjectList
      do ioGeneratedCode .= mEnumeratorCppName . ".hasCurrentObject ()" ;
      between ioGeneratedCode .= " && " ;
    end foreach ;
    ioGeneratedCode .= ") {\n" ;
  #--- Generate 'do' instruction
    generateInstructionList
      !mDoInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;
  #--- Generate 'between' instruction
    if [mBetweenInstructionList length] > 0 then
      [!?ioGeneratedCode incIndentation !2] ;
      ioGeneratedCode .= "if (" ;
      foreach mEnumeratedObjectList
        do ioGeneratedCode .= mEnumeratorCppName . ".hasNextObject ()" ;
        between ioGeneratedCode .= " && " ;
      end foreach ;
      ioGeneratedCode .= ") {\n" ;
      generateInstructionList
        !mBetweenInstructionList
        !?ioTemporaryVariableIndex
        !?ioUnusedVariableCppNameSet
        !?ioGeneratedCode
      ;
      ioGeneratedCode .= "}\n" ;
      [!?ioGeneratedCode decIndentation !2] ;
    end if ;
  #--- End of foreach instruction
    foreach mEnumeratedObjectList do
      ioGeneratedCode .= "  " . mEnumeratorCppName . ".gotoNextObject () ;\n" ;
    end foreach ;
    if mIndexVariableCppName != "" then
      [!?ioUnusedVariableCppNameSet removeKey !compilerCppName []] ;
      ioGeneratedCode .= "  " . mIndexVariableCppName . ".increment_operation (" . compilerCppName [] . " COMMA_SOURCE_FILE_AT_LINE (" . [[mInstructionLocation line] string] . ")) ;\n" ;
    end if ;
    ioGeneratedCode .= "}\n" ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @sendInstructionForGeneration generateInstruction
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "@sendInstructionForGeneration generateInstruction\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @logInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//-------- @logInstructionForGeneration\n" ;
  @string logVar ;
  [mLogExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?logVar] ;
  ioGeneratedCode .= logVar . ".log (" . [mLogMessage utf8Representation] . ") ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @switchInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//------- @switchInstructionForGeneration\n" ;
#--- Switch expression
  @string switchVar ;
  [mSwitchExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?switchVar] ;
  ioGeneratedCode .= "if (" . switchVar . ".isValid ()) {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  ioGeneratedCode .= "switch (" . switchVar . ".enumValue ()) {\n" ;
  ioGeneratedCode .= "case GALGAS_" . [[mSwitchExpression mType] identifierRepresentation] . "::kNotBuilt:\n" ;
  ioGeneratedCode .= "  break ;\n" ;
  foreach mBranches do
    foreach mSwitchConstantList do
      ioGeneratedCode .= "case GALGAS_" . [[mSwitchExpression mType] identifierRepresentation] . "::kEnum_" . [[mValue string] identifierRepresentation] . ": " ;
    end foreach ;
    ioGeneratedCode .= "{\n" ;
    generateInstructionList
      !mInstructions
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;
    ioGeneratedCode .= "  } break ;\n" ;
  end foreach ;
  ioGeneratedCode .= "}\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @matchInstructionForGeneration generateInstruction
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@string ioGeneratedCode
:
  ioGeneratedCode .= "//------- @matchInstructionForGeneration\n" ;
  @stringlist receiverList [emptyList] ;
  foreach mMatchedExpressionList do
    @string var ;
    [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?var] ;
    receiverList += !var ;
  end foreach ;
  ioGeneratedCode .= "if (" ;
  foreach receiverList
    do ioGeneratedCode .= mValue . ".isValid ()" ;
    between ioGeneratedCode .= " && " ;
  end foreach ;
  ioGeneratedCode .= ") {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  foreach mMatchInstructionBranchList do
    ioGeneratedCode .= "if (" ;
    foreach mMatchListForGeneration, receiverList do
      if mIsType then
        ioGeneratedCode .= "(NULL != dynamic_cast <const cPtr_" . [mTypeNameOrEnumerationConstantName identifierRepresentation]
                        . " *> (" . mValue . ".ptr ()))" ;
      else
        ioGeneratedCode .= "(" . mValue . ".enumValue () == GALGAS_"
                        . [mLocalConstantName identifierRepresentation]
                        . "::kEnum_" . [mTypeNameOrEnumerationConstantName identifierRepresentation] . ")" ;
      end if ;
      between ioGeneratedCode .= " && " ;
    end foreach ;
    ioGeneratedCode .= ") {\n" ;
    generateInstructionList
      !mMatchBranchInstructionList
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioGeneratedCode
    ;
  between ioGeneratedCode .= "}else " ;
  end foreach ;
  ioGeneratedCode .= "}else{\n" ;
  generateInstructionList
    !mElseInstructionList
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioGeneratedCode
  ;
  ioGeneratedCode .= "}\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
