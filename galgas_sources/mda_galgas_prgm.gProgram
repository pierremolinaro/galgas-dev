#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS LL1 program definition                                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

program mda_galgas_prgm "version GALGAS_BETA_VERSION" :
  import semantics lexiqueSemantics in "lexiqueSemantics.gSemantics" ;
  import semantics optionSemantics in "optionSemantics.gSemantics" ;
  import semantics semanticsSemantics in "semanticsSemantics.gSemantics" ;
  import semantics semantics_semantics in "semantics_semantics.gSemantics" ;
  import semantics mda_galgas_routines in "mda_galgas_routines.gSemantics" ;
  import semantics projectCreation in "projectCreation.gSemantics" ;
  import semantics lexiqueCompilation in "lexiqueCompilation.gSemantics" ;
  import semantics grammarMetamodel in "grammarMetamodel.gSemantics" ;
  import semantics optionMetamodel in "optionMetamodel.gSemantics" ;
  import semantics optionCompilation in "optionCompilation.gSemantics" ;
  import semantics guiMetamodel in "guiMetamodel.gSemantics" ;
  import semantics guiCompilation in "guiCompilation.gSemantics" ;
  import semantics semanticsMetamodel in "semanticsMetamodel.gSemantics" ;
  import semantics syntaxMetamodel in "syntaxMetamodel.gSemantics" ;
  import semantics XcodeProjectGeneration in "XcodeProjectGeneration.gSemantics" ;
  import semantics predefinedLexicalActions in "predefinedLexicalActions.gSemantics" ;

  import grammar galgas_LL1_grammar in "galgas_LL1_grammar.gGrammar" ;
  import grammar lexiqueLL1grammar in "lexiqueLL1grammar.gGrammar" ;
  import grammar syntaxSLRgrammar in "syntaxSLRgrammar.gGrammar" ;
  import grammar grammarLL1grammar in "grammarLL1grammar.gGrammar" ;
  import grammar guiLL1grammar in "guiLL1grammar.gGrammar" ;
  import grammar programSLRgrammar in "programSLRgrammar.gGrammar" ;
  import grammar projectLL1grammar in "projectLL1grammar.gGrammar" ;

#---------------------------------------------------------------------------*

before {
  @string creationProjectName := [option galgas_cli_options.create_project] ;
  projectCreation !creationProjectName ;
  if [option galgas_cli_options.printPredefinedLexicalActions] then
    printPredefinedLexicalActions ;
  end if ;
}

#---------------------------------------------------------------------------*

when . "ggs"
message "a '.ggs' GALGAS source file"
??@lstring inSourceFile {
  fixFileGenerationStartDirectory !inSourceFile ;
  @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
  @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
  @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
  @M_grammarComponents grammarComponentsMap [emptyMap] ;
  @M_optionComponents optionComponentsMap [emptyMap] ;
  @EXsemanticContext semanticContext [new
    ![@M_filewrappers emptyMap]
    ![@stringset emptySet]
    ![@EXcategoryMethodMap emptyMap]
    ![@EXcategoryReaderMap emptyMap]
    ![@EXcategoryTemplateMap emptyMap]
  ] ;
  grammar galgas_LL1_grammar in inSourceFile dependency "galgas-dep" in "DEPENDENCIES"
    !?lexiqueMapForUse
    !?semanticsComponentsMap
    !?syntaxComponentsMap
    !?grammarComponentsMap
    !?optionComponentsMap
    !?semanticContext
  ;
}

#---------------------------------------------------------------------------*

when . "gOption"
message "a GALGAS option source file"
??@lstring inSourceFile {
  compileOptionComponent !inSourceFile ! outputDirectory (!inSourceFile) ;
}

#---------------------------------------------------------------------------*

when . "gLexique"
message "a GALGAS lexique source file"
??@lstring inSourceFile {
  compileLexiqueComponent !inSourceFile ! outputDirectoryTEMP (!inSourceFile) ;
}

#---------------------------------------------------------------------------*

when . "gSemantics"
message "a GALGAS semantics source file"
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
  ] ;
  compileSemanticsComponent !inSourceFile ! outputDirectoryTEMP (!inSourceFile) !?parsedComponentStruct;
}

#---------------------------------------------------------------------------*

when . "gSyntax"
message "a GALGAS syntax source file"
??@lstring inSourceFile {
  @syntaxComponentRoot syntaxComponentRoot ;
  grammar syntaxSLRgrammar in inSourceFile ? syntaxComponentRoot ;
}

#---------------------------------------------------------------------------*

when . "gGrammar"
message "a GALGAS grammar source file"
??@lstring inSourceFile {
  @grammarComponentRoot grammarComponentRoot ;
  grammar grammarLL1grammar in inSourceFile ?grammarComponentRoot ;
}

#---------------------------------------------------------------------------*

when . "gGui"
message "a GALGAS GUI source file"
??@lstring inSourceFile {
  compileGuiComponent !inSourceFile ! outputDirectoryTEMP (!inSourceFile) ;
}

#---------------------------------------------------------------------------*

when . "gProgram"
message "a GALGAS program source file"
??@lstring inSourceFile {
  @programComponentRoot programComponentRoot ;
  grammar programSLRgrammar in inSourceFile ? programComponentRoot ;
}

#------------------------------------------------------------------------------*
#                                                                              *
#          Project                                                             *
#                                                                              *
#---------------------------------------------------------------------------*

when . "gProject"
message "a GALGAS project source file"
??@lstring inSourceFile {
  @string outputDirectoryTEMP := outputDirectoryTEMP (!inSourceFile) ;
  @string outputDirectory := outputDirectory (!inSourceFile) ;
#--- Parse metamodel component
  @projectSourceList projectSourceList ;
  @lstring projectName ;
  @location endOfSourceFile ;
  grammar projectLL1grammar in inSourceFile ?projectSourceList ?projectName ?endOfSourceFile ;
#--- Check target names, file base name uniqueness, and build target file list
  @sourceFileMap sourceFileMap [emptyMap] ;
  @targetFileListMap targetFileListMap [emptyMap] ;
  foreach projectSourceList do
    @string baseName := [[[mFilePath string] lastPathComponent] stringByDeletingPathExtension] ;
    [!?sourceFileMap insertKey ![@lstring new !baseName ![mFilePath location]] ![mFilePath string] !mSourceKind] ;
    foreach mTargetList do
      if ([mValue string] != "makefile") & ([mValue string] != "xcode_tool") & ([mValue string] != "xcode_app") then
        error mValue: "the target name should be \"makefile\", \"xcode_tool\" or \"xcode_app\"" ;
      else
        targetFileListMap += ![mValue string] !baseName ;
      end if ;
    end foreach ;
  end foreach ;
#--- Parset Component struct
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
  ] ;
#--- Parse galgas sources
  foreach projectSourceList do
    @string extension := [mFilePath pathExtension] ;
    @lstring fullFilePath [new
      ![inSourceFile stringByDeletingLastPathComponent] . "/" . [mFilePath string]
      ![mFilePath location]
    ] ;
    if mSourceKind != [@sourceFileKind externSourceFile] then
      message "----- Compiling '" . mFilePath . "'\n" ;
    end if ;
    switch mSourceKind
    when externSourceFile :
    when guiSourceFile :
      if extension == "gGui" then
        compileGuiComponent !fullFilePath ! outputDirectoryTEMP ;
      else
        error mFilePath:"extension of a gui component should be '.gGui'." ;
      end if ;
    when lexiqueSourceFile :
      if extension == "gLexique" then
        compileLexiqueComponent !fullFilePath ! outputDirectoryTEMP ;
      else
        error mFilePath:"extension of a lexique component should be '.gLexique'." ;
      end if ;
    when optionSourceFile :
      if extension == "gOption" then
        compileOptionComponent !fullFilePath ! outputDirectory ;
      else
        error mFilePath:"extension of an option component should be '.gOption'." ;
      end if ;
    when semanticsSourceFile :
      if extension == "gSemantics" then
        compileSemanticsComponent !fullFilePath ! outputDirectoryTEMP !?parsedComponentStruct ;
      else
        error mFilePath:"extension of a semantics component should be '.gSemantics'." ;
      end if ;
    when syntaxSourceFile :
      if extension == "gSyntax" then
#        compileSyntaxComponent !fullFilePath ! outputDirectoryTEMP ;
      else
        error mFilePath:"extension of a syntax component should be '.gSyntax'." ;
      end if ;
    when grammarSourceFile :
      if extension == "gGrammar" then
#        compileGrammarComponent !fullFilePath ! outputDirectoryTEMP ;
      else
        error mFilePath:"extension of a grammar component should be '.gGrammar'." ;
      end if ;
    when programSourceFile :
      if extension == "gProgram" then
#       compileProgramComponent !fullFilePath ! outputDirectoryTEMP ;
      else
        error mFilePath:"extension of a program component should be '.gProgram'." ;
      end if ;
    end switch ;
  end foreach ;
#--- Perform global checkings
  if [@uint errorCount] == 0 then
    message "----- Perform global checkings\n" ;
    performProjectGlobalCheckings !parsedComponentStruct !endOfSourceFile ;
  end if ;
#--- Update file list for makefile
  if [@uint errorCount] == 0 then
    @stringlist makefileFiles := [targetFileListMap listForKey !"makefile"] ;
    if [makefileFiles length] > 0 then
      @string externSourceFileList := "" ;
      @string galgasSourceList := "" ;
      @stringset pathSet [emptySet] ;
      pathSet += !"SOURCES_DIR += ../hand_coded_sources\n" ;
      foreach makefileFiles do
        @string fullPath ;
        @sourceFileKind sourceKind ;
        [sourceFileMap searchKey ![@lstring new !mValue !here] ?fullPath ?sourceKind] ;
        @string filePath := [fullPath stringByDeletingLastPathComponent] ;
        if sourceKind == [@sourceFileKind externSourceFile] then
          if [filePath firstCharacterOrNul] == '/' then
            pathSet += !"SOURCES_DIR += " . filePath . "\n" ;
          elsif filePath != "" then
            pathSet += !"SOURCES_DIR += ../hand_coded_sources/" . filePath . "\n" ;
          end if ;
          externSourceFileList .= "SOURCES += " . [fullPath lastPathComponent] . "\n" ;
        else
          galgasSourceList .= "SOURCES += " . [[fullPath lastPathComponent] stringByDeletingPathExtension] . ".cpp\n" ;
        end if ;
      end foreach ;
      @string pathesString := "" ;
      foreach pathSet do
        pathesString .= key ;
      end foreach ;
      @string newFileListContents := [filewrapper fileListTemplateFileWrapper.fileListTemplate
        !pathesString
        !galgasSourceList
        !externSourceFileList
      ] ;
      @string fileListPath := outputDirectoryTEMP . "/file_list.mke" ;
      [newFileListContents writeToFileWhenDifferentContents !fileListPath ?*] ;
    end if ;
  end if ;
#--- Update Xcode project
  @stringlist xcode_tool_files := [targetFileListMap listForKey !"xcode_tool"] ;
  @stringlist xcode_app_files := [targetFileListMap listForKey !"xcode_app"] ;
  if [@uint errorCount] == 0 then
    @string XcodeProjectDir := [[[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] . "/project_xcode" ;
    #log XcodeProjectDir ;
    @stringlist iconFiles := [XcodeProjectDir regularFilesWithExtensions !false ![@stringlist listWithValue !"icns"]] ;
    @stringlist xcodeProjects := [XcodeProjectDir directoriesWithExtensions !false ![@stringlist listWithValue !"xcodeproj"]] ;
    #log xcodeProjects ;
    if [xcodeProjects length] == 0 then
      message "****** Cannot update Xcode project, no project found in '" . XcodeProjectDir . "' directory. ********\n" ;
    elsif [xcodeProjects length] > 1 then
      message "****** Cannot update Xcode project, more than one project exist in '" . XcodeProjectDir . "' directory. ********\n" ;
    elsif [xcodeProjects length] == 1 then
      @string name ; [xcodeProjects first ?name] ;
      @string fullXcodePath := XcodeProjectDir . "/" . name . "/project.pbxproj" ;
    #--- Update intermediate file
      @string intermediateFilePath := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/DEPENDENCIES/file_list_for_xcode_project.txt" ;
    #--- Update Xcode project
      @stringset externSourceSet_tool [emptySet] ;
      @stringset guiSourceSet_tool [emptySet] ;
      @stringset scannerSourceSet_tool [emptySet] ;
      @stringset optionSourceSet_tool [emptySet] ;
      @stringset semanticsSourceSet_tool [emptySet] ;
      @stringset syntaxSourceSet_tool [emptySet] ;
      @stringset grammarSourceSet_tool [emptySet] ;
      @stringset programSourceSet_tool [emptySet] ;
      foreach xcode_tool_files do
        @string fullPath ;
        @sourceFileKind sourceKind ;
        [sourceFileMap searchKey ![@lstring new !mValue !here] ?fullPath ?sourceKind] ;
        switch sourceKind 
        when externSourceFile :
          externSourceSet_tool += !fullPath ;
        when lexiqueSourceFile :
          scannerSourceSet_tool += !mValue ;
        when guiSourceFile :
          guiSourceSet_tool += !mValue ;
        when optionSourceFile :
          optionSourceSet_tool += !mValue ;
        when syntaxSourceFile :
          syntaxSourceSet_tool += !mValue ;
        when semanticsSourceFile :
          semanticsSourceSet_tool += !mValue ;
        when grammarSourceFile :
          grammarSourceSet_tool += !mValue ;
        when programSourceFile :
          programSourceSet_tool += !mValue ;
        end switch ;
      end foreach ;
      @stringset externSourceSet_app [emptySet] ;
      @stringset guiSourceSet_app [emptySet] ;
      @stringset scannerSourceSet_app [emptySet] ;
      @stringset optionSourceSet_app [emptySet] ;
      @stringset semanticsSourceSet_app [emptySet] ;
      @stringset syntaxSourceSet_app [emptySet] ;
      @stringset grammarSourceSet_app [emptySet] ;
      @stringset programSourceSet_app [emptySet] ;
      foreach xcode_app_files do
        @string fullPath ;
        @sourceFileKind sourceKind ;
        [sourceFileMap searchKey ![@lstring new !mValue !here] ?fullPath ?sourceKind] ;
        switch sourceKind 
        when externSourceFile :
          externSourceSet_app += !fullPath ;
        when lexiqueSourceFile :
          scannerSourceSet_app += !mValue ;
        when guiSourceFile :
          guiSourceSet_app += !mValue ;
        when optionSourceFile :
          optionSourceSet_app += !mValue ;
        when syntaxSourceFile :
          syntaxSourceSet_app += !mValue ;
        when semanticsSourceFile :
          semanticsSourceSet_app += !mValue ;
        when grammarSourceFile :
          grammarSourceSet_app += !mValue ;
        when programSourceFile :
          programSourceSet_app += !mValue ;
        end switch ;
      end foreach ;
    #--- Build intermediate
      generateXcodeProject
        !externSourceSet_tool
        !guiSourceSet_tool
        !scannerSourceSet_tool
        !optionSourceSet_tool
        !semanticsSourceSet_tool
        !syntaxSourceSet_tool
        !grammarSourceSet_tool
        !programSourceSet_tool
        !externSourceSet_app
        !guiSourceSet_app
        !scannerSourceSet_app
        !optionSourceSet_app
        !semanticsSourceSet_app
        !syntaxSourceSet_app
        !grammarSourceSet_app
        !programSourceSet_app
        ![name stringByDeletingPathExtension] # XCode project base name
        ![fullXcodePath stringByDeletingLastPathComponent] # Full Path of xxx.xcodeproj file
        !iconFiles
        !intermediateFilePath
      ;
    end if ;
  end if ;
}

#---------------------------------------------------------------------------*

after {
}

#---------------------------------------------------------------------------*

end program ;

#---------------------------------------------------------------------------*
