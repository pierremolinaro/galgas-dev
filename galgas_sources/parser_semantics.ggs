#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS parser component semantics definition                             *
#                                                                           *
#  Copyright (C) 1997-2004 Pierre Molinaro.                                 *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics parser_semantics :

import semantics semantics_semantics in "semantics_semantics.ggs" ;

#---------------------------------------------------------------------------*

abstract class @typeParserInstruction extends @typeInstruction {
}

#---------------------------------------------------------------------------*
#                                                                           *
#            Calling a nonterminal                                          *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeInstructionAppelNonTerminal extends @typeParserInstruction {
  @lstring mNonterminalName ;
  @typeExpressionList mParametersExpressionList ;
  @lstring mAltName ;
  @lstring mReturnedEntityVarName ; # Empty if no returned entity
  @lstring mReturnedEntityName ; # Empty if no returned entity
  @bool mReturnedEntityShouldInsertedInList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#            Calling a terminal                                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeInstructionVerifSyntaxique extends @typeParserInstruction {
  @lstring aNomTerminal ;
  @L_assignedVariables aListeTypeEffectifs ;
  @string mLexiqueClassName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#            Instruction de select syntaxique                               *
#                                                                           *
#---------------------------------------------------------------------------*

list @typeListeBranchesInstructions {
  @typeInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E L E C T    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_select_instruction extends @typeParserInstruction {
  @typeListeBranchesInstructions mIFbranchesList ;
  @location aPositionDebut ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    R E P E A T    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_repeat_instruction extends @typeParserInstruction {
  @typeListeBranchesInstructions aListesBranchesRepeter ;
  @location aPositionDebut ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  P A R S E   S T A R T   ...   R E W I N D   ...    I N S T R U C T I O N *
#                                                                           *
#---------------------------------------------------------------------------*

list @L_parse_rewind_signature_list {
  @L_ruleSyntaxSignature mSignature ;
  @location mErrorLocation ;
}

#---------------------------------------------------------------------------*

class @C_parse_rewind_instruction extends @typeParserInstruction {
  @location mInstructionLocation ;
  @typeListeBranchesInstructions mBranchList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    P A R S E    W H E N   ...    E L S E    ...     I N S T R U C T I O N *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_parse_when_else_instruction extends @typeParserInstruction {
  @L_expression_instructionsList_list mIFbranchesList ;
  @typeInstructionList mElseInstructionsList ;
}

#---------------------------------------------------------------------------*

class @typeNonterminalToGenerate extends @typeEntityToGenerate {
  @lstring aNomNonTerminal ;
  @M_nonterminalSymbolAlts mNonterminalSymbolParametersMap ;
}

#---------------------------------------------------------------------------*

map @typeAltProductionsMap {
  @typeListeTypesEtNomsArgMethode aListeDeTypesEffectifs ;
  @typeInstructionList mAllInstructionsList ;
  @L_ruleSyntaxSignature mSyntaxSignature ;
  @location mEndOfInstructionListLocation ;
  @string mReturnedEntityTypeName ; # Empty if no MDA result
  @string mMDAResultVariableName ; # Empty if implicit MDA variable name
  @entityPropertyMap mAllPropertiesMap ;
  insert insertKey error message "the '%K' label has been already declared in %L" ;
  search searchKey error message "the '%K' label is not declared" ;
}


#---------------------------------------------------------------------------*

class @typeProductionAengendrer extends @typeEntityToGenerate {
  @lstring aNomProduction ;
  @typeAltProductionsMap mAltProductionMap ;
  @string mProductionTagName ;
  @string mLexiqueClassName ;
  @bool mHasParseLabel ;
}

#---------------------------------------------------------------------------*

end semantics ;
