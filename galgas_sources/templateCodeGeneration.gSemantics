#---------------------------------------------------------------------------*
#                                                                           *
#  Semantic decorated types for template generation                         *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics templateCodeGeneration :
  import "semanticExpressionGeneration.gSemantics" ;
  import semantics semanticExpressionGeneration in "semanticExpressionGeneration.gSemantics" ;

#---------------------------------------------------------------------------*

abstract method @templateInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker
;

#---------------------------------------------------------------------------*

routine templateCodeGenerationForListInstruction
  ??@templateInstructionListForGeneration inInstructionList
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
:
  foreach inInstructionList do
    [mInstruction templateCodeGeneration
      !?ioGeneratedCode
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

override method @templateInstructionStringForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker
:
  ioGeneratedCode .= "result << " . [mTemplateString utf8Representation] . " ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @templateInstructionExpressionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool unused ioUseColumnMarker
:
#--- Expression
  @string cppName ;
  [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?cppName] ;
  ioGeneratedCode .= "result << " . cppName . ".stringValue () ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @templateBlockInstructionForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
:
#--- Expression
  @string indendationVarCppName ;
  [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?indendationVarCppName] ;
  ioGeneratedCode .= "if (" . indendationVarCppName . ".isValid ()) {\n" ;
  ioGeneratedCode .= "  result.incIndentation ((PMSInt32) " . indendationVarCppName . ".uintValue ()) ;\n" ;
  ioGeneratedCode .= "}\n" ;
  templateCodeGenerationForListInstruction
    !mBlockInstructionList
    !?ioGeneratedCode
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  ;
  ioGeneratedCode .= "if (" . indendationVarCppName . ".isValid ()) {\n" ;
  ioGeneratedCode .= "  result.incIndentation (- ((PMSInt32) " . indendationVarCppName . ".uintValue ())) ;\n" ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @templateInstructionGetColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
:
  ioUseColumnMarker := true ;
  ioGeneratedCode .= "columnMarker = result.currentColumn () ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @templateInstructionGotoColumnLocationForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint unused ioTemporaryVariableIndex
  ?!@stringset unused ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
:
  ioUseColumnMarker := true ;
  ioGeneratedCode .= "result.appendSpacesUntilColumn (columnMarker) ;\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @templateInstructionForeachForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
:
#---
  @string foreachVarCppName ;
  [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?foreachVarCppName] ;
#--- Index
  if [mIndexCppName length] > 0 then
    ioGeneratedCode .= "GALGAS_uint " . mIndexCppName . " (0) ;\n" ;
  end if ;
#---
  ioGeneratedCode .= "if (" . foreachVarCppName . ".isValid ()) {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
  ioGeneratedCode .= "cEnumerator_" . [[mExpression mType] identifierRepresentation] . " " . mEnumeratorCppName . " (" . foreachVarCppName . ", "
                    . [mIsAscending cString] . ") ;\n" ;
#--- Before
  if ([mBeforeInstructionList length] + [mAfterInstructionList length]) > 0 then
    ioGeneratedCode .= "const bool nonEmpty_" . mEnumeratorCppName . " = " . mEnumeratorCppName . ".hasCurrentObject () ;\n" ;
  end if ;
  if [mBeforeInstructionList length] > 0 then
    ioGeneratedCode .= "if (nonEmpty_" . mEnumeratorCppName . ") {\n" ;
    [!?ioGeneratedCode incIndentation !2] ;
    templateCodeGenerationForListInstruction
      !mBeforeInstructionList
      !?ioGeneratedCode
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ;
    [!?ioGeneratedCode decIndentation !2] ;
    ioGeneratedCode .= "}\n" ;
  end if ;
  ioGeneratedCode .= "while (" . mEnumeratorCppName . ".hasCurrentObject ()) {\n" ;
  [!?ioGeneratedCode incIndentation !2] ;
#--- Do
  templateCodeGenerationForListInstruction
    !mDoInstructionList
    !?ioGeneratedCode
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  ;
#--- Between
  if [mBetweenInstructionList length] > 0 then
    ioGeneratedCode .= "if (" . mEnumeratorCppName . ".hasNextObject ()) {\n" ;
    [!?ioGeneratedCode incIndentation !2] ;
    templateCodeGenerationForListInstruction
      !mBetweenInstructionList
      !?ioGeneratedCode
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ;
    [!?ioGeneratedCode decIndentation !2] ;
    ioGeneratedCode .= "}\n" ;
  end if ;
#--- Index
  if [mIndexCppName length] > 0 then
    ioGeneratedCode .= mIndexCppName . ".increment () ;\n" ;
  end if ;
#---
  ioGeneratedCode .= mEnumeratorCppName . ".gotoNextObject () ;\n" ;
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
#--- After
  if [mAfterInstructionList length] > 0 then
    ioGeneratedCode .= "if (nonEmpty_" . mEnumeratorCppName . ") {\n" ;
    [!?ioGeneratedCode incIndentation !2] ;
    templateCodeGenerationForListInstruction
      !mAfterInstructionList
      !?ioGeneratedCode
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ;
    [!?ioGeneratedCode decIndentation !2] ;
    ioGeneratedCode .= "}\n" ;
  end if ;
#---   
  [!?ioGeneratedCode decIndentation !2] ;
  ioGeneratedCode .= "}\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @templateInstructionIfForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
:
  foreach mTemplateInstructionIfBranchList do
  #--- IF expression
    @string ifVarCppName ;
    [mExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?ifVarCppName] ;
    ioGeneratedCode .= "if (" . ifVarCppName . ".isValidAndTrue ()) {\n" ;
    [!?ioGeneratedCode incIndentation !2] ;
    templateCodeGenerationForListInstruction
      !mInstructionList
      !?ioGeneratedCode
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ;
    [!?ioGeneratedCode decIndentation !2] ;
    ioGeneratedCode .= "}else{\n" ;
    [!?ioGeneratedCode incIndentation !2] ;
  end foreach ;
#--- else instructions
  templateCodeGenerationForListInstruction
    !mElseInstructionList
    !?ioGeneratedCode
    !?ioTemporaryVariableIndex
    !?ioUnusedVariableCppNameSet
    !?ioUseColumnMarker
  ;
  foreach mTemplateInstructionIfBranchList do
    [!?ioGeneratedCode decIndentation !2] ;
    ioGeneratedCode .= "}\n" ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @templateInstructionSwitchForGeneration templateCodeGeneration
  ?!@string ioGeneratedCode
  ?!@uint ioTemporaryVariableIndex
  ?!@stringset ioUnusedVariableCppNameSet
  ?!@bool ioUseColumnMarker
:
#--- Expression
  @string switchVarCppName ;
  [mSwitchExpression generateExpression !?ioGeneratedCode !?ioTemporaryVariableIndex !?ioUnusedVariableCppNameSet ?switchVarCppName] ;
#---
  ioGeneratedCode .= "switch (" . switchVarCppName . ".enumValue ()) {\n" ;
  ioGeneratedCode .= "case GALGAS_" . [[mSwitchExpression mType] identifierRepresentation] . "::kNotBuilt :\n" ;
  ioGeneratedCode .= "break ;\n" ;
#---
  foreach mTemplateInstructionSwitchBranchList do
    foreach mConstantList do
      ioGeneratedCode .= "case GALGAS_" . [[mSwitchExpression mType] identifierRepresentation] . "::kEnum_" . [[mValue string] identifierRepresentation] . " : {\n" ;
    end foreach ;
    [!?ioGeneratedCode incIndentation !2] ;
    templateCodeGenerationForListInstruction
      !mInstructionList
      !?ioGeneratedCode
      !?ioTemporaryVariableIndex
      !?ioUnusedVariableCppNameSet
      !?ioUseColumnMarker
    ;
    [!?ioGeneratedCode decIndentation !2] ;
    ioGeneratedCode .= "} break ;\n" ;
  end foreach ;
#---
  ioGeneratedCode .= "}\n" ;

end method ;

#---------------------------------------------------------------------------*

end semantics ;
