#---------------------------------------------------------------------------*
#                                                                           *
#  'semantics' component metamodel                                          *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

metamodel semanticsMetamodel extends instructionMetamodel root @semanticsComponentRoot :

import semantics commonSemantics in "commonSemantics.gSemantics" ;
import metamodel instructionMetamodel in "instructionMetamodel.gMetamodel" ;

#---------------------------------------------------------------------------*

entity @semanticsComponentRoot {
  @lstring mSemanticsComponentName ;
  @lstringlist mImportedComponentFileNameList ;
  @semanticDeclaration [] mSemanticDeclarationList ;
}

#---------------------------------------------------------------------------*

abstract entity @semanticDeclaration {
}

#---------------------------------------------------------------------------*
#                                                                           *
#    Common Rules                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

entity @structuredTypeAttribute {
  @lstring mAttributeTypeName ;
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*

entity @formalParameters {
  @formalParameter [] mFormalParameterList ;
}

#---------------------------------------------------------------------------*

entity @formalParameter {
  @formalArgumentPassingMode mFormalParameterPassingMode ;
  @lstring mFormalParameterTypeName ;
  @lstring mFormalParameterName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    D E C L A R A T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

entity @mapDeclaration extends @semanticDeclaration {
  @lstring mMapTypeName ;
  @structuredTypeAttribute [] mAttributeList ;
  @mapMethod [] mInsertMethodList ;
  @mapMethod [] mSearchMethodList ;
  @mapMethod [] mRemoveMethodList ;
}

#---------------------------------------------------------------------------*

entity @mapMethod {
  @lstring mMethodName ;
  @lstring mErrorMessage ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C L A S S    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

entity @classDeclaration extends @semanticDeclaration {
  @bool mIsAbstract ;
  @lstring mClassTypeName ;
  @lstring mSuperClassName ; # Empty if no super class
  @structuredTypeAttribute [] mAttributeList ;
  @abstractMethodDefinition [] mAbstractMethodList ;
}

#---------------------------------------------------------------------------*

entity @abstractMethodDefinition {
  @lstring mMethodName ;
  @formalParameters mSignature ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

entity @listDeclaration extends @semanticDeclaration {
  @lstring mListTypeName ;
  @structuredTypeAttribute [] mAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

entity @enumDeclaration extends @semanticDeclaration {
  @lstring mEnumTypeName ;
  @lstringlist mConstantList ;
  @enumMessage [] mEnumMessageList ;
}

#---------------------------------------------------------------------------*

entity @enumMessage {
  @lstring mEnumMessageName ;
  @enumMessageAssociation [] mMessageAssociationList ;
}

#---------------------------------------------------------------------------*

entity @enumMessageAssociation {
  @lstring mConstantName ;
  @lstring mMessage ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

entity @routineDeclaration extends @semanticDeclaration {
  @lstring mRoutineName ;
  @formalParameters mFormalParameters ;
  @semanticInstructions mRoutineInstructions ;
}

#---------------------------------------------------------------------------*

end metamodel ;
