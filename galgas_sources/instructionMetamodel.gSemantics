#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines instructions                                      *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics instructionMetamodel :
import "parameterArgumentMetamodel.gSemantics" ;
import semantics expressionMetamodel in "expressionMetamodel.gSemantics" ;
import semantics parameterArgumentMetamodel in "parameterArgumentMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*

abstract class @syntaxInstruction {
}

#---------------------------------------------------------------------------*

abstract class @semanticInstruction extends @syntaxInstruction {
}

#---------------------------------------------------------------------------*

list @semanticInstructionList {
  @semanticInstruction mInstruction ;
}

#---------------------------------------------------------------------------*

abstract class @semanticDeclaration {
}

#---------------------------------------------------------------------------*

list @semanticDeclarationList {
  @semanticDeclaration mSemanticDeclaration ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E X T E R N    R O U T I N E    D E C L A R A T I O N                  *
#                                                                           *
#---------------------------------------------------------------------------*

class @externRoutineDeclaration extends @semanticDeclaration {
  @lstring mRoutineName ;
  @formalParameterList mFormalParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @routineDeclaration extends @externRoutineDeclaration {
  @semanticInstructionList mRoutineInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E X T E R N    F U N C T I O N    D E C L A R A T I O N                *
#                                                                           *
#---------------------------------------------------------------------------*

class @externFunctionDeclaration extends @semanticDeclaration {
  @lstring mFunctionName ;
  @formalParameterList mFormalParameterList ;
  @lstring mResultTypeName ;
  @lstring mResultVariableName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    F U N C T I O N    D E C L A R A T I O N                               *
#                                                                           *
#---------------------------------------------------------------------------*

class @functionDeclaration extends @externFunctionDeclaration {
  @semanticInstructionList mFunctionInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L O C A L    V A R I A B L E    D E C L A R A T I O N                    *
#                                                                           *
#---------------------------------------------------------------------------*

class @localVariableDeclaration extends @semanticInstruction {
  @lstring mTypeName ;
  @lstring mVariableName ;
}

#---------------------------------------------------------------------------*

class @localVariableDeclarationWithInitialization extends @semanticInstruction {
  @lstring mTypeName ;
  @lstring mVariableName ;
  @lstring mConstructorName ;
  @outExpressionList mConstructorArguments ;
}

#---------------------------------------------------------------------------*

class @localVariableDeclarationWithAssignment extends @semanticInstruction {
  @lstring mTypeName ;
  @lstring mVariableName ;
  @semanticExpression mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A S S I G N M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @assignmentInstruction extends @semanticInstruction {
  @lstring mTargetVariableName ;
  @semanticExpression mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  D O T    A S S I G N M E N T    I N S T R U C T I O N                    *
#                                                                           *
#  VARIABLE .= EXPRESSION ;                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @appendInstruction extends @semanticInstruction {
  @lstring mTargetVariableName ;
  @lstringlist mStructAttributeList ;
  @semanticExpression mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R E A C H    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @foreachInstructionEnumeratedObjectElement {
}

#---------------------------------------------------------------------------*

class @foreachInstructionJoker extends @foreachInstructionEnumeratedObjectElement {
}

#---------------------------------------------------------------------------*

class @foreachInstructionEnumeratedConstant extends @foreachInstructionEnumeratedObjectElement {
  @lstring mTypeName ;
  @lstring mConstantName ;
}

#---------------------------------------------------------------------------*

list @foreachInstructionEnumeratedObjectElementList {
  @foreachInstructionEnumeratedObjectElement mElement ;
}

#---------------------------------------------------------------------------*

list @foreachInstructionEnumeratedObjectList {
  @semanticExpression mEnumeratedExpression ;
  @foreachInstructionEnumeratedObjectElementList mElementList ;
  @bool mEndsWithEllipsis ;
}

#---------------------------------------------------------------------------*

class @foreachInstruction extends @semanticInstruction {
  @foreachInstructionEnumeratedObjectList mEnumeratedObjectList ;
  @lstring mIndexVariableName ;
  @semanticExpression mWhileExpression ;
  @semanticInstructionList mBeforeInstructionList ;
  @semanticInstructionList mBetweenInstructionList ;
  @semanticInstructionList mDoInstructionList ;
  @semanticInstructionList mAfterInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  I F    I N S T R U C T I O N                                             *
#                                                                           *
#---------------------------------------------------------------------------*

list @ifBranchList {
  @semanticExpression mIFexpression ;
  @semanticInstructionList mIFinstructionList ;
}

#---------------------------------------------------------------------------*

class @ifInstruction extends @semanticInstruction {
  @ifBranchList mBranchList ; # [1, *]
  @semanticInstructionList mElseInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M E T H O D    C A L L    I N S T R U C T I O N                          *
#                                                                           *
#---------------------------------------------------------------------------*

class @methodCallInstruction extends @semanticInstruction {
  @semanticExpression mReceiverExpression ;
  @lstring mMethodName ;
  @actualParameterList mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M O D I F I E R    C A L L    I N S T R U C T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

class @modifierCallInstruction extends @semanticInstruction {
  @lstring mReceiverName ;
  @lstringlist mReceiverStructAttributes ;
  @lstring mModifierName ;
  @actualParameterList mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E R R O R    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @errorInstruction extends @semanticInstruction {
  @semanticExpression mReceiverExpression ;
  @semanticExpression mErrorExpression ;
  @lstringlist mBuiltVariableList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    W A R N I N G    I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @warningInstruction extends @semanticInstruction {
  @semanticExpression mReceiverExpression ;
  @semanticExpression mWarningExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    R O U T I N E    C A L L    I N S T R U C T I O N                      *
#                                                                           *
#---------------------------------------------------------------------------*

class @routineCallInstruction extends @semanticInstruction {
  @lstring mRoutineName ;
  @actualParameterList mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A T C H    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @matchEntry {
}

#---------------------------------------------------------------------------*

list @matchEntryList {
  @matchEntry mEntry ;
}

#---------------------------------------------------------------------------*

class @constantMatchEntry extends @matchEntry {
  @lstring mConstantName ;
}

#---------------------------------------------------------------------------*

class @classMatchEntry extends @matchEntry {
  @lstring mClassName ;
  @foreachInstructionEnumeratedObjectElementList mElements ;
  @bool mEndsWithEllipsis ;
}

#---------------------------------------------------------------------------*

list @matchInstructionBranchList {
  @matchEntryList mMatchEntryList ;
  @semanticInstructionList mMatchBranchInstructionList ;
}

#---------------------------------------------------------------------------*

class @matchInstruction extends @semanticInstruction {
  @lstringlist mMatchedVariableNameList ;
  @matchInstructionBranchList mMatchInstructionBranchList ;
  @semanticInstructionList mElseInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A S T    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

list @castInstructionBranchList {
  @bool mUseKindOfClass ;
  @lstring mTypeName ;
  @lstring mConstantVarName ; # Empty string if no constant var
  @bool mConstantVarNameIsUnused ; # true if no constant var
  @semanticInstructionList mCastBranchInstructionList ;
}

#---------------------------------------------------------------------------*

abstract class @elseOrDefaultForCastInstruction {
}

#---------------------------------------------------------------------------*

class @elseForCastInstruction extends @elseOrDefaultForCastInstruction {
  @semanticInstructionList mElseInstructionList ;
}

#---------------------------------------------------------------------------*

class @defaultForCastInstruction extends @elseOrDefaultForCastInstruction {
  @semanticExpression mErrorLocationExpression ;
}

#---------------------------------------------------------------------------*

class @castInstruction extends @semanticInstruction {
  @semanticExpression mExpression ;
  @castInstructionBranchList mCastInstructionBranchList ;
  @elseOrDefaultForCastInstruction mElseOrDefault ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    A D D    I N S T R U C T I O N      + =                                *
#                                                                           *
#---------------------------------------------------------------------------*

class @addInstruction extends @semanticInstruction {
  @lstring mReceiverName ;
  @lstringlist mStructAttributeList ;
  @outExpressionList mExpressionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    I N C R E M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @incrementInstruction extends @semanticInstruction {
  @lstring mReceiverName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C R E M E N T    I N S T R U C T I O N                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @decrementInstruction extends @semanticInstruction {
  @lstring mReceiverName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L O O P    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @loopInstruction extends @semanticInstruction {
  @semanticExpression mVariantExpression ;
  @semanticInstructionList mFirstInstructions ;
  @semanticExpression mLoopExpression ;
  @semanticInstructionList mSecondInstructions ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M E S S A G E    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @messageInstruction extends @semanticInstruction {
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L O G    I N S T R U C T I O N                                           *
#                                                                           *
#---------------------------------------------------------------------------*

class @logInstruction extends @semanticInstruction {
  @lstringlist mLoggedVariableList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  G R A M M A R    I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @grammarInstruction extends @semanticInstruction {
  @lstring mGrammarComponentName ;
  @lstring mLabelName ;
  @semanticExpression mSourceExpression ;
  @bool mSourceExpressionIsFile ; # If false, mSourceExpression should be the source string
  @actualParameterList mActualParameterList ;
  @lstring mReturnedModelName ; # Empty string if no returned model
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S W I T C H    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @switchBranches {
  @lstringlist mSwitchConstantList ;
  @semanticInstructionList mInstructions ;
}

#---------------------------------------------------------------------------*

class @switchInstruction extends @semanticInstruction {
  @semanticExpression mSwitchExpression ;
  @switchBranches mBranches ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E    M E T H O D    C A L L    I N S T R U C T I O N               *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeMethodInstruction extends @semanticInstruction {
  @lstring mTypeName ;
  @lstring mMethodName ;
  @actualParameterList mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
# A B S T R A C T   C A T E G O R Y    M E T H O D    D E C L A R A T I O N *
#                                                                           *
#---------------------------------------------------------------------------*

list @abstractCategoryMethodList {
  @lstring mAbstractCategoryMethodName ;
  @formalParameterList mAbstractCategoryFormalParameterList ;
}

#---------------------------------------------------------------------------*

listmap @abstractCategoryMethodListMap (@abstractCategoryMethodList) ;

#---------------------------------------------------------------------------*
#                                                                           *
#        C A T E G O R Y    M E T H O D    D E C L A R A T I O N            *
#                                                                           *
#---------------------------------------------------------------------------*

list @categoryMethodList {
  @lstring mCategoryMethodName ;
  @formalParameterList mCategoryFormalParameterList ;
  @semanticInstructionList mRoutineInstructionList ;
}

#---------------------------------------------------------------------------*

listmap @categoryMethodListMap (@categoryMethodList) ;

#---------------------------------------------------------------------------*
#                                                                           *
#O V E R R I D I N G   C A T E G O R Y   M E T H O D   D E C L A R A T I O N*
#                                                                           *
#---------------------------------------------------------------------------*

list @overridingCategoryMethodList {
  @lstring mOverridingCategoryMethodName ;
  @formalParameterList mOverridingCategoryFormalParameterList ;
  @semanticInstructionList mRoutineInstructionList ;
}

#---------------------------------------------------------------------------*

listmap @overridingCategoryMethodListMap (@overridingCategoryMethodList) ;

#---------------------------------------------------------------------------*
#                                                                           *
#           S E M A N T I C   D E C L A R A T I O N S                       *
#                                                                           *
#---------------------------------------------------------------------------*

struct @semanticDeclarationStruct {
  @semanticDeclarationList mSemanticDeclarationList ;
  @abstractCategoryMethodListMap mAbstractCategoryMethodListMap ;
  @categoryMethodListMap mCategoryMethodListMap ;
  @overridingCategoryMethodListMap mOverridingCategoryMethodListMap ;
}

#---------------------------------------------------------------------------*

end semantics ;
