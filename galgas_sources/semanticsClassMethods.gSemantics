#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2012 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsClassMethods :
  import "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterClassMethodWithStringInputArgument
  ?!@classMethodMap ioClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inClassMethodName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapProxy argumentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !"string" ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?ioClassMethodMap insertOrReplace
    ![@lstring new !inClassMethodName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

override method @stringPredefinedTypeAST getClassMethodMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@classMethodMap outClassMethodMap
:
  outClassMethodMap := [@classMethodMap emptyMap] ;
  enterClassMethodWithStringInputArgument !?outClassMethodMap !?ioUnifiedTypeMap !"deleteFile" !true ;
  enterClassMethodWithStringInputArgument !?outClassMethodMap !?ioUnifiedTypeMap !"deleteFileIfExists" !true ;
  enterClassMethodWithStringInputArgument !?outClassMethodMap !?ioUnifiedTypeMap !"removeEmptyDirectory" !true ;
  enterClassMethodWithStringInputArgument !?outClassMethodMap !?ioUnifiedTypeMap !"removeDirectoryRecursively" !true ;
  @unifiedTypeMapProxy stringType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioUnifiedTypeMap !"string" ?stringType] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !stringType ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !stringType ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !stringType ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?outClassMethodMap insertOrReplace
    ![@lstring new !"generateFile" !here]
    !argList
    !true
  ] ;
  argList += !stringType ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !stringType ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !stringType ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !stringType ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?outClassMethodMap insertOrReplace
    ![@lstring new !"generateFileWithPattern" !here]
    !argList
    !true
  ] ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
