#---------------------------------------------------------------------------*
#                                                                           *
#  Generate predefined types                                                *
#                                                                           *
#  Copyright (C) 2010, ..., 2012 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics predefinedTypes :
  import "semanticGeneration.gSemantics" ;

#---------------------------------------------------------------------------*

routine appendPredefinedListTypeAST
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ??@string inElementTypeName
:
  @attributeInCollectionListAST attributeList [emptyList] ;
  @lstringlist attributeFeatureList [emptyList] ;
  attributeFeatureList += ![@lstring new !"setter" !here] ;
  attributeList +=
    ![@lstring new !inElementTypeName !here]
    ![@lstring new !"mValue" !here]
    !attributeFeatureList
  ;
  ioDeclarationListASTs += ![@listDeclarationAST new
    !true # Is predefined
    ![@lstring new !inElementTypeName . "list" !here]
    !attributeList
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine appendPredefined2StringListTypeAST
  ?!@semanticDeclarationListAST ioDeclarationListASTs
:
  @attributeInCollectionListAST attributeList [emptyList] ;
  @lstringlist attributeFeatureList [emptyList] ;
  attributeFeatureList += ![@lstring new !"setter" !here] ;
  attributeList +=
    ![@lstring new !"string" !here]
    ![@lstring new !"mValue0" !here]
    !attributeFeatureList
  ;
  attributeList +=
    ![@lstring new !"string" !here]
    ![@lstring new !"mValue1" !here]
    !attributeFeatureList
  ;

  ioDeclarationListASTs += ![@listDeclarationAST new
    !true # Is predefined
    ![@lstring new !"2stringlist" !here]
    !attributeList
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine appendStructASTForTypeWithLocation
  ?!@semanticDeclarationListAST ioDeclarationListASTs
  ??@string inElementTypeName
:
  @lstringlist featureList [emptyList] ;
  @attributeInCollectionListAST attributeList [emptyList] ;
  attributeList += ![@lstring new !inElementTypeName !here] ![@lstring new !inElementTypeName !here] !featureList ;
  attributeList += ![@lstring new !"location" !here] ![@lstring new !"location" !here] !featureList ;
  ioDeclarationListASTs += ![@structDeclarationAST new
    !true # Is prefined
    ![@lstring new !"l" . inElementTypeName !here]
    !attributeList
    !"" # Not enumerable
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine appendStructASTForRangeType
  ?!@semanticDeclarationListAST ioDeclarationListASTs
:
  @lstringlist featureList [emptyList] ;
  @attributeInCollectionListAST attributeList [emptyList] ;
  attributeList += ![@lstring new !"uint" !here] ![@lstring new !"start" !here] !featureList ;
  attributeList += ![@lstring new !"uint" !here] ![@lstring new !"length" !here] !featureList ;
  ioDeclarationListASTs += ![@structDeclarationAST new
    !true # Is prefined
    ![@lstring new !"range" !here]
    !attributeList
    !"uint" # Enumerable
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine appendPredefinedTypesASTs
  ?!@semanticDeclarationListAST ioDeclarationListASTs
:
  ioDeclarationListASTs += ![@applicationPredefinedTypeAST new !true !"application" ![@predefinedTypeKindEnum predefined_application]] ;
  ioDeclarationListASTs += ![@filewrapperPredefinedTypeAST new !true !"filewrapper" ![@predefinedTypeKindEnum predefined_filewrapper]] ;
  ioDeclarationListASTs += ![@objectPredefinedTypeAST new !true !"object" ![@predefinedTypeKindEnum predefined_object]] ;
  ioDeclarationListASTs += ![@boolPredefinedTypeAST new !true !"bool" ![@predefinedTypeKindEnum predefined_bool]] ;
  ioDeclarationListASTs += ![@uintPredefinedTypeAST new !true !"uint" ![@predefinedTypeKindEnum predefined_uint]] ;
  ioDeclarationListASTs += ![@uint64PredefinedTypeAST new !true !"uint64" ![@predefinedTypeKindEnum predefined_uint64]] ;
  ioDeclarationListASTs += ![@sintPredefinedTypeAST new !true !"sint" ![@predefinedTypeKindEnum predefined_sint]] ;
  ioDeclarationListASTs += ![@sint64PredefinedTypeAST new !true !"sint64" ![@predefinedTypeKindEnum predefined_sint64]] ;
  ioDeclarationListASTs += ![@charPredefinedTypeAST new !true !"char" ![@predefinedTypeKindEnum predefined_char]] ;
  ioDeclarationListASTs += ![@doublePredefinedTypeAST new !true !"double" ![@predefinedTypeKindEnum predefined_double]] ;
  ioDeclarationListASTs += ![@stringPredefinedTypeAST new !true !"string" ![@predefinedTypeKindEnum predefined_string]] ;
  ioDeclarationListASTs += ![@locationPredefinedTypeAST new !true !"location" ![@predefinedTypeKindEnum predefined_location]] ;
  ioDeclarationListASTs += ![@stringsetPredefinedTypeAST new !true !"stringset" ![@predefinedTypeKindEnum predefined_stringset]] ;
  ioDeclarationListASTs += ![@functionPredefinedTypeAST new !true !"function" ![@predefinedTypeKindEnum predefined_function]] ;
  ioDeclarationListASTs += ![@typePredefinedTypeAST new !true !"type" ![@predefinedTypeKindEnum predefined_type]] ;
  ioDeclarationListASTs += ![@binarysetPredefinedTypeAST new !true !"binaryset" ![@predefinedTypeKindEnum predefined_binaryset]] ;
  ioDeclarationListASTs += ![@dataPredefinedTypeAST new !true !"data" ![@predefinedTypeKindEnum predefined_data]] ;

  appendPredefinedListTypeAST !?ioDeclarationListASTs !"luint" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"uint" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"uint64" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"function" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"string" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"lstring" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"type" ;
  appendPredefinedListTypeAST !?ioDeclarationListASTs !"object" ;

  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"bool" ;
  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"uint" ;
  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"uint64" ;
  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"sint" ;
  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"sint64" ;
  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"char" ;
  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"double" ;
  appendStructASTForTypeWithLocation !?ioDeclarationListASTs !"string" ;

  appendPredefined2StringListTypeAST !?ioDeclarationListASTs ;

  appendStructASTForRangeType !?ioDeclarationListASTs ;
#--- Enumeration predefined type (used only for testing type generation)
#  @lstringlist constantList [emptyList] ;
#  constantList += ![@lstring new !"zero" !here] ;
#  constantList += ![@lstring new !"un" !here] ;
#  constantList += ![@lstring new !"deux" !here] ;
#  @enumMessageAssociationListAST enumMessageAssociationListAST [emptyList] ;
#  enumMessageAssociationListAST += ![@lstring new !"deux" !here] ![@lstring new !"message deux" !here] ;
#  enumMessageAssociationListAST += ![@lstring new !"un" !here] ![@lstring new !"message un" !here] ;
#  enumMessageAssociationListAST += ![@lstring new !"zero" !here] ![@lstring new !"message zero" !here]  ;
#  @enumMessageListAST enumMessageListAST [emptyList] ;
#  enumMessageListAST += ![@lstring new !"test" !here] !enumMessageAssociationListAST ;
#  ioDeclarationListASTs += ![@enumDeclarationAST new
#    ![@lstring new !"0enum" !here]
#    !constantList
#    !enumMessageListAST
#  ] ;

#--- Sorted list predefined type (used only for testing type generation)
#  @attributeInCollectionListAST sortedListAttributeList [emptyList] ;
#  sortedListAttributeList += ![@lstring new !"uint" !here] ![@lstring new !"mFirst" !here] ;
#  sortedListAttributeList += ![@lstring new !"char" !here]  ![@lstring new !"mSecond" !here] ;
#  sortedListAttributeList += ![@lstring new !"string" !here]  ![@lstring new !"mThird" !here] ;
#  @sortedListSortDescriptorListAST sortDescriptorList [emptyList] ;
#  sortDescriptorList += ![@lstring new !"mThird" !here] !true ;
#  sortDescriptorList += ![@lstring new !"mFirst" !here] !false ;
#  ioDeclarationListASTs += ![@sortedListDeclarationAST new
#    ![@lstring new !"0sortedlist" !here]
#    !sortedListAttributeList
#    !sortDescriptorList
#  ] ;

#--- Map predefined type (used only for testing type generation)
#  @attributeInCollectionListAST mapAttributeList [emptyList] ;
#  mapAttributeList += ![@lstring new !"uint" !here] ![@lstring new !"mFirst" !here] ;
#  mapAttributeList += ![@lstring new !"char" !here]  ![@lstring new !"mSecond" !here] ;
#  mapAttributeList += ![@lstring new !"string" !here]  ![@lstring new !"mThird" !here] ;
#  @insertMethodListAST insertMethodList [emptyList] ;
#  insertMethodList +=
#    ![@lstring new !"insert" !here]
#    ![@lstring new !"insert error message" !here]
#    ![@lstring new !"shadow error message" !here]
#    ![@lstring new !"" !here]
#  ;
#  @mapSearchMethodListAST mapSearchMethodListAST [emptyList] ;
#  mapSearchMethodListAST +=
#    ![@lstring new !"search" !here]
#    ![@lstring new !"search error message" !here]
#    ![@lstring new !"" !here]
#  ;
#  @mapRemoveMethodListAST mapRemoveMethodListAST [emptyList] ;
#  mapRemoveMethodListAST +=
#    ![@lstring new !"remove" !here]
#    ![@lstring new !"remove error message" !here]
#  ;
#  @insertOrReplaceDeclarationListAST insertOrReplaceDeclarationListAST [listWithValue !here] ;
#  ioDeclarationListASTs += ![@mapDeclarationAST new
#    ![@lstring new !"0map" !here]
#    !mapAttributeList
#    !insertMethodList
#    !mapSearchMethodListAST
#    !mapRemoveMethodListAST
#    !insertOrReplaceDeclarationListAST
#    ![@mapStateList emptyList]
#  ] ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#           G E N E R A T I O N    F I L E W R A P P E R S                  *
#                                                                           *
#---------------------------------------------------------------------------*

filewrapper predefinedTypeGenerationTemplate in "../generation_templates/type_generation" {
}{
}{
  template predefinedTypesImplementation "predefined_types.cpp.gTemplate" ;


  template primitiveTypesHeaderPrologue "predefined-types-file-header.h.gTemplate"
    ?@stringset TYPE_LIST
  ;

  template predefinedTypeSeparation "predefined-types-separation.h.gTemplate"  ;

  template sint_type "sint-type.h.gTemplate" ;
  
  template sint64_type "sint64-type.h.gTemplate" ;
  
  template object_type "object-type.h.gTemplate" ;
  
  template uint_type "uint-type.h.gTemplate" ;
  
  template uint64_type "uint64-type.h.gTemplate" ;
  
  template bool_type "bool-type.h.gTemplate" ;
  
  template binaryset_type "binaryset-type.h.gTemplate" ;
  
  template function_type "function-type.h.gTemplate" ;
  
  template type_type "type-type.h.gTemplate" ;
  
  template location_type "location-type.h.gTemplate" ;
  
  template data_type "data-type.h.gTemplate" ;
  
  template char_type "char-type.h.gTemplate" ;
  
  template double_type "double-type.h.gTemplate" ;
  
  template string_type "string-type.h.gTemplate" ;
  
  template stringset_type "stringset-type.h.gTemplate" ;

  template filewrapper_type "filewrapper-type.h.gTemplate" ;

  template application_type "application-type.h.gTemplate" ;
}

#---------------------------------------------------------------------------*

reader @semanticDeclarationForGeneration appendPrimitiveTypeDeclaration -> @string outHeader :
  outHeader := "" ;end reader ;

#---------------------------------------------------------------------------*

override reader @primitiveTypeForGeneration appendPrimitiveTypeDeclaration -> @string outHeader :
  switch mKind
  when predefined_object :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.object_type] ;
  when predefined_uint :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.uint_type] ;
  when predefined_uint64 :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.uint64_type] ;
  when predefined_sint :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.sint_type] ;
  when predefined_sint64 :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.sint64_type] ;
  when predefined_char :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.char_type] ;
  when predefined_double :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.double_type] ;
  when predefined_string :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.string_type] ;
  when predefined_stringset :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.stringset_type] ;
  when predefined_bool :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.bool_type] ;
  when predefined_binaryset :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.binaryset_type] ;
  when predefined_function :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.function_type] ;
  when predefined_location :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.location_type] ;
  when predefined_type :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.type_type] ;
  when predefined_data :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.data_type] ;
  when predefined_filewrapper :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.filewrapper_type] ;
  when predefined_application :
    outHeader := [filewrapper predefinedTypeGenerationTemplate.application_type] ;
  end switch ;
  outHeader .= [filewrapper typeGenerationTemplate.unifiedClassBodyForType
    ![mTypeProxy key]
    ![mTypeProxy identifierRepresentation]
    ![mTypeProxy mIsConcrete]
    ![mTypeProxy mConstructorMap]
    ![mTypeProxy mReaderMap]
    ![mTypeProxy mModifierMap]
    ![mTypeProxy mInstanceMethodMap]
    ![mTypeProxy mClassMethodMap]
    ![mTypeProxy mEnumerationDescriptor]
    ![mTypeProxy mHandledOperatorFlags]
    ![mTypeProxy mAddAssignOperatorArguments]
    ![mTypeProxy mWithAccessorMap]
    ![mTypeProxy mTypeForEnumeratedElement]
  ] ;
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
# G E N E R A T E    P R E D E F I N E D    T Y P E    F I L E S            *
#                                                                           *
#---------------------------------------------------------------------------*

routine generatePredefinedTypeFiles ??@string inDirectory :
  if inDirectory != "" then
    if not [inDirectory directoryExists] then
      error here : "the '" . inDirectory . "' directory does not exist" ;
    else
    #------ Add predefined types to semantics declarations
      @semanticDeclarationListAST predefinedTypeASTlist [emptyList] ;
      appendPredefinedTypesASTs !?predefinedTypeASTlist ;
    #------ Build Semantic Context
      @semanticContext semanticContext ;
      buildSemanticContext
        !""
        !predefinedTypeASTlist
        !here
        ?semanticContext
      ;
    #------ Semantic Analysis
      @semanticDeclarationSortedListForGeneration decoratedDeclarationListForGeneration ;
      performSemanticAnalysis
        !predefinedTypeASTlist
        !semanticContext
        ?decoratedDeclarationListForGeneration
      ;
    #------ Generate primitive types declaration file
      @string generatedCode := [filewrapper predefinedTypeGenerationTemplate.primitiveTypesHeaderPrologue
        ![semanticContext->mTypeMap allKeys]
      ] ;
      foreach decoratedDeclarationListForGeneration do
        generatedCode .= [mDeclaration appendPrimitiveTypeDeclaration] ;
      end foreach ;
      foreach decoratedDeclarationListForGeneration do
        var unusedInclusionSet := [@stringset emptySet] ;
        [mDeclaration appendDeclaration1 !?unusedInclusionSet ??@string code] ;
        generatedCode .= code ;
      end foreach ;
      generatedCode .= [filewrapper predefinedTypeGenerationTemplate.predefinedTypeSeparation] ;
      foreach decoratedDeclarationListForGeneration do
        var inclusionSet2 := [@stringset emptySet] ;
        [mDeclaration appendDeclaration2 !false !inDirectory !?inclusionSet2 ??@string headerString2] ;
        generatedCode .= headerString2 ;
#        generatedCode .= [mDeclaration appendDeclaration2 !inDirectory !false] ;
      end foreach ;
      if [@uint errorCount] == 0 then
        [@string generateFileWithPattern
          !inDirectory
          !"predefined-types.h"
          !"//"
          !"\n\n" # Defaut user zone1
          !generatedCode
          !"\n\n" # Defaut user zone2
          !"#endif\n"
        ] ;
      end if ;
    #------ Generate predefined types implementation
      generatedCode := [filewrapper predefinedTypeGenerationTemplate.predefinedTypesImplementation] ;
      foreach decoratedDeclarationListForGeneration do
        generatedCode .= [mDeclaration appendTypeGenericImplementation] ;
        generatedCode .= [mDeclaration appendSpecificImplementation !false] ;
      end foreach ;
      if [@uint errorCount] == 0 then
        [@string generateFileWithPattern
          !inDirectory
          !"predefined-types.cpp"
          !"//"
          !"\n\n" # Defaut user zone1
          !generatedCode
          !"\n\n" # Defaut user zone2
          !""
        ] ;
      end if ;
    end if ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

routine printFeaturesOfType
  ??@string inTypeName
  ??@typeKindEnum inTypeKindEnum
  ??@typedAttributeList inAllTypedAttributeList
  ??@constructorMap inConstructorMap
  ??@readerMap inReaderMap
  ??@modifierMap inModifierMap
  ??@instanceMethodMap inInstanceMethodMap
  ??@classMethodMap inClassMethodMap
  ??@uint inHandledOperatorFlags
  ??@unifiedTypeMapProxyAndParameterList inAddAssignOperatorArguments
  ??@withAccessorMap inWithAccessorMap
:
  @string s := "Features of @" . inTypeName . " type:\n" ;
  s .= " - kind: " . [inTypeKindEnum kind] .";\n" ;
#---
  foreach inAllTypedAttributeList
  before
    s .= " - attribute(s):\n" ;
  do
    s .= "    @" . [mAttributeTypeProxy key] . " " . mAttributeName . "\n" ;
  end foreach ;
#---
  foreach inConstructorMap
  before
    s .= " - constructor(s):\n" ;
  do
    s .= "    " . lkey ;
    foreach mArgumentTypeList do
      s .= " ?@" . [mType key] ;
    end foreach ;
    s .= " -> @" . [mReturnedType key] . "\n" ;
  end foreach ;
#---
  foreach inReaderMap
  before
    s .= " - readers(s):\n" ;
  do
    s .= "    " . lkey ;
    foreach mArgumentTypeList do
      s .= " ?@" . [mType key] ;
    end foreach ;
    s .= " -> @" . [mReturnedType key] . "\n" ;
  end foreach ;
#---
  foreach inModifierMap
  before
    s .= " - modifiers(s):\n" ;
  do
    s .= "    " . lkey ;
    foreach mParameterList do
      s .= " " . [mFormalArgumentPassingMode string] . "@" . [mFormalArgumentType key] ;
    end foreach ;
    s .= "\n" ;
  end foreach ;
#---
  foreach inInstanceMethodMap
  before
    s .= " - instance method(s):\n" ;
  do
    s .= "    " . lkey ;
    foreach mParameterList do
      s .= " " . [mFormalArgumentPassingMode string] . "@" . [mFormalArgumentType key] ;
    end foreach ;
    s .= "\n" ;
  end foreach ;
#---
  foreach inClassMethodMap
  before
    s .= " - class method(s):\n" ;
  do
    s .= "    " . lkey ;
    foreach mParameterList do
      s .= " " . [mFormalArgumentPassingMode string] . "@" . [mFormalArgumentType key] ;
    end foreach ;
    s .= "\n" ;
  end foreach ;
#---
  s .= " - operators(s):\n" ;
  if (inHandledOperatorFlags & binaryAddOperator []) != 0 then
    s .= "    @" . inTypeName . " + @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binarySubOperator []) != 0 then
    s .= "    @" . inTypeName . " - @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryMulOperator []) != 0 then
    s .= "    @" . inTypeName . " * @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryDivOperator []) != 0 then
    s .= "    @" . inTypeName . " / @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryModOperator []) != 0 then
    s .= "    @" . inTypeName . " % @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryAndOperator []) != 0 then
    s .= "    @" . inTypeName . " & @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryOrOperator []) != 0 then
    s .= "    @" . inTypeName . " | @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryXorOperator []) != 0 then
    s .= "    @" . inTypeName . " ^ @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryConcatOperator []) != 0 then
    s .= "    @" . inTypeName . " . @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & binaryShiftOperator []) != 0 then
    s .= "    @" . inTypeName . " >> @uint -> @" . inTypeName . "\n" ;
    s .= "    @" . inTypeName . " << @uint -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & unaryPlusOperator []) != 0 then
    s .= "    + @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & unaryMinusOperator []) != 0 then
    s .= "    - @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & unaryTildeOperator []) != 0 then
    s .= "    ~ @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & unaryNotOperator []) != 0 then
    s .= "    not @" . inTypeName . " -> @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & incDecOperator []) != 0 then
    s .= "    @" . inTypeName . " ++ -> @" . inTypeName . "\n" ;
    s .= "    @" . inTypeName . " -- -> @" . inTypeName . "\n" ;
  end if ;
  foreach inAddAssignOperatorArguments
  before
    s .= "    @" . inTypeName . " +=" ;
  do
    s .= " !@" . [mType key] ;
  after
    s .= "\n" ;
  end foreach ;
  if (inHandledOperatorFlags & dotAssignOperator []) != 0 then
    s .= "    @" . inTypeName . " .= @" . inTypeName . "\n" ;
  end if ;
  if (inHandledOperatorFlags & isComparable []) != 0 then
    s .= "    @" . inTypeName . " <  @" . inTypeName . " -> @bool\n" ;
    s .= "    @" . inTypeName . " <= @" . inTypeName . " -> @bool\n" ;
    s .= "    @" . inTypeName . " >  @" . inTypeName . " -> @bool\n" ;
    s .= "    @" . inTypeName . " >= @" . inTypeName . " -> @bool\n" ;
  end if ;
  s .= "    @" . inTypeName . " =  @" . inTypeName . " -> @bool\n" ;
  s .= "    @" . inTypeName . " != @" . inTypeName . " -> @bool\n" ;
#---
  foreach inWithAccessorMap
  before
    s .= " - 'with' accessor method(s):\n" ;
  do
    s .= "    " . lkey . "?@" . [mArgumentType key] . "\n" ;
  end foreach ;
#---
  message s ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
