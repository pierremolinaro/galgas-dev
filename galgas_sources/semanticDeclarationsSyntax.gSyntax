#---------------------------------------------------------------------------*
#                                                                           *
#  semantic declaracration model builder                                    *
#                                                                           *
#  Copyright (C) 2009, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax semanticDeclarationsSyntax :
with "galgas_scanner.gLexique" ;

import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import semantics semanticsTypesForAST in "semanticsTypesForAST.gSemantics" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Rules prototypes                                                    *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <formal_parameter_list> !@formalParameterListAST outFormalParameterList ;

nonterminal <actual_parameter_list> !@actualParameterListAST outActualParameterList ;

nonterminal <semantic_instruction_list> !@semanticInstructionListAST outInstructionsList ;

nonterminal <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
;

nonterminal <formal_input_parameter_list> !@formalInputParameterListAST outFormalInputParameterList ;

nonterminal <obsolete_declaration> ;

#---------------------------------------------------------------------------*
#                                                                           *
#    A T T R I B U T E    I N    C O L L E C T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <attribute_declaration> ?!@attributeInCollectionListAST ioAttributeInCollectionList ;

#---------------------------------------------------------------------------*

rule <attribute_declaration> ?!@attributeInCollectionListAST ioAttributeInCollectionList :
  $type_name$ ? @lstring mAttributeTypeName ;
  $identifier$ ? @lstring mAttributeName ;
  @lstringlist featureList [emptyList] ;
  select
  or
    $feature$ ;
    repeat
      $identifier$ ? @lstring featureName ;
      featureList += !featureName ;
    while
      $,$ ;
    end repeat ;
  end select ;
  $;$ ;
  ioAttributeInCollectionList += !mAttributeTypeName !mAttributeName !featureList ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T M A P    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $listmap$ ;
#--- Map type name
  $type_name$ ? @lstring mListmapTypeName ;
  $($ ;
  $type_name$ ? @lstring mAssociatedListTypeName ;
  $)$ ;
  $;$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@listmapDeclarationAST new
    !mListmapTypeName
    !mAssociatedListTypeName
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    D E C L A R A T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $map$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <map_method_declaration> ?!@mapMethodListAST ioMapMethodList ;

#---------------------------------------------------------------------------*

rule <map_method_declaration> ?!@mapMethodListAST ioMapMethodList :
  $identifier$ ? @lstring mMethodName ;
  @lstring mAlternateMethodName ;
  select
    mAlternateMethodName := [@lstring new !"" !here] ;
  or
    $,$ ;
    $identifier$ ? mAlternateMethodName ;
  end select ;
  $error$ ;
  $message$ ;
  $literal_string$ ? @lstring mErrorMessage ;
  @lstring mShadowErrorMessage ;
  select
    mShadowErrorMessage := [@lstring new !"" !here] ;
  or
    $,$ ;
    $literal_string$ ? mShadowErrorMessage ;
  end select ;
  $;$ ;
  ioMapMethodList +=
    !mMethodName
    !mAlternateMethodName
    !mErrorMessage
    !mShadowErrorMessage
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $map$ ;
#--- Map type name
  $type_name$ ? @lstring mMapTypeName ;
#--- Enum type name
  @lstring mAssociatedEnumTypeName ; # Empty if no associated enum type
  @lstring mAssociatedTerminaisonMethodName ; # Empty if no associated enum type
  select
    mAssociatedEnumTypeName := [@lstring new !"" !here] ;
    mAssociatedTerminaisonMethodName := [@lstring new !"" !here] ;
  or
    $($ ;
    $type_name$ ? mAssociatedEnumTypeName ;
    $:$ ;
    $identifier$ ? mAssociatedTerminaisonMethodName ;
    $)$ ;
  end select ;
#--- Map properties
  ${$ ;
  @attributeInCollectionListAST mAttributeList [emptyList] ;
  @mapMethodListAST mInsertMethodList [emptyList] ;
  @mapMethodListAST mSearchMethodList [emptyList] ;
  @mapMethodListAST mRemoveMethodList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  while
    $insert$ ;
    <map_method_declaration> !? mInsertMethodList ;
  while
    $search$ ;
    <map_method_declaration> !? mSearchMethodList ;
  while
    $remove$ ;
    <map_method_declaration> !? mRemoveMethodList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@mapDeclarationAST new
    !mMapTypeName
    !mAssociatedEnumTypeName
    !mAssociatedTerminaisonMethodName
    !mAttributeList
    !mInsertMethodList
    !mSearchMethodList
    !mRemoveMethodList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    I N D E X    D E C L A R A T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $mapindex$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $mapindex$ ;
  $type_name$ ?@lstring mMapIndexName ;
  $($ ;
  $type_name$ ? @lstring mMapTypeName ;
  $)$ ;
  ${$ ;
  $search$ ;
  $identifier$ ? @lstring mSearchMethodName ;
  $error$ ;
  $message$ ;
  $literal_string$ ? @lstring mSearchMethodErrorMessage ;
  $;$ ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@mapindexDeclarationAST new
    !mMapIndexName
    !mMapTypeName
    !mSearchMethodName
    !mSearchMethodErrorMessage
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C L A S S    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $map$ ;
  $type_name$ ?* ;
  $class$ ;
  $identifier$ ?* ;
  $;$ ;
  repeat
  while
    $insert$ ;
    $identifier$ ?* ;
    $error$ ;
    $message$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $search$ ;
    $identifier$ ?* ;
    $error$ ;
    $message$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $type_name$ ?* ;
    $identifier$ ?* ;
    $;$ ;
  while
    $block$ ;
    $identifier$ ?* ;
    $:$ ;
    $($ ;
    repeat
    while
      $?$ ;
      $type_name$ ?* ;
      $identifier$ ?* ;
    end repeat ;
    $)$ ;
    $:$ ;
    $($ ;
    repeat
    while
      $?$ ;
      $type_name$ ?* ;
      $identifier$ ?* ;
    end repeat ;
    $)$ ;
    $;$ ;
  end repeat ;
  $}$ ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_message_declaration> ?!@classMessageDefinitionListAST ioClassMessageDefinitionList ;

#---------------------------------------------------------------------------*

rule <class_message_declaration> ?!@classMessageDefinitionListAST ioClassMessageDefinitionList :
  $message$ ;
  $identifier$ ? @lstring mMessageName ;
  $literal_string$ ? @lstring mMessageValue ;
  $;$ ;
  ioClassMessageDefinitionList += !mMessageName !mMessageValue ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_abstract_method_declaration>
  ?!@abstractMethodDefinitionListAST ioAbstractMethodDefinitionList
;

#---------------------------------------------------------------------------*

rule <class_abstract_method_declaration>
  ?!@abstractMethodDefinitionListAST ioAbstractMethodDefinitionList
:
  $abstract$ ;
  $method$ ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterListAST mSignature ;
  <formal_parameter_list> ? mSignature ;
  $;$ ;
  ioAbstractMethodDefinitionList += !mMethodName !mSignature ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_overriden_method_declaration>
  ?!@overridenMethodDefinitionListAST ioOverridenMethodDefinitionList
;

#---------------------------------------------------------------------------*

rule <class_overriden_method_declaration>
  ?!@overridenMethodDefinitionListAST ioOverridenMethodDefinitionList
:
  $override$ ;
  $method$ ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterListAST mSignature ;
  <formal_parameter_list> ? mSignature ;
  $:$ ;
  @semanticInstructionListAST mInstructionList ;
  <semantic_instruction_list> ? mInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioOverridenMethodDefinitionList +=
    !mMethodName
    !mSignature
    !mInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <class_method_declaration> ?!@methodDefinitionListAST ioMethodDefinitionList ;

#---------------------------------------------------------------------------*

rule <class_method_declaration> ?!@methodDefinitionListAST ioMethodDefinitionList :
  $method$ ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterListAST mSignature ;
  <formal_parameter_list> ? mSignature ;
  $:$ ;
  @semanticInstructionListAST mInstructionList ;
  <semantic_instruction_list> ? mInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioMethodDefinitionList +=
    !mMethodName
    !mSignature
    !mInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <lazy_attribute_declaration> ?!@lazyAttributeListAST ioLazyAttributeList ;

#---------------------------------------------------------------------------*

rule <lazy_attribute_declaration> ?!@lazyAttributeListAST ioLazyAttributeList :
  $once$ ;
  @attributeInCollectionListAST attributeTypeAndNameList [emptyList] ;
  repeat
    $type_name$ ?@lstring  attributeTypeName ;
    $identifier$ ? @lstring attributeName ;
    attributeTypeAndNameList += !attributeTypeName !attributeName ![@lstringlist emptyList] ;
  while
  end repeat ;
  $:$ ;
  @semanticInstructionListAST mInstructionList ;
  <semantic_instruction_list> ? mInstructionList ;
  $end$ ;
  $once$ ;
  $;$ ;
  ioLazyAttributeList +=
    !here
    !attributeTypeAndNameList
    !mInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  @bool mIsAbstract ;
  select
    mIsAbstract := false ;
  or
    $abstract$ ;
    mIsAbstract := true ;
  end select ;
  $class$ ;
  $type_name$ ?@lstring mClassTypeName ;
  @lstring mSuperClassName ; # Empty if no super class
  select
    mSuperClassName := [@lstring new !"" !here] ;
  or
    $extends$ ;
    $type_name$ ? mSuperClassName ;
  end select ;
  @lstringlist classFeatureList [emptyList] ;
  select
  or
    $feature$ ;
    repeat
      $identifier$ ? @lstring classFeatureName ;
      classFeatureList += !classFeatureName ;
    while
      $,$ ;
    end repeat ;
  end select ;
  ${$ ;
  @string mClassMessage := "" ;
#--- Class properties
  @attributeInCollectionListAST mAttributeList [emptyList] ;
  @abstractMethodDefinitionListAST mAbstractMethodList [emptyList] ;
  @overridenMethodDefinitionListAST mOverridenMethodList [emptyList] ;
  @methodDefinitionListAST mMethodList [emptyList] ;
  @classMessageDefinitionListAST mMessageList [emptyList] ;
  @lazyAttributeListAST mLazyAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  while
    <class_abstract_method_declaration> !? mAbstractMethodList ;
  while
    <class_overriden_method_declaration> !? mOverridenMethodList ;
  while
    <class_method_declaration> !? mMethodList ;
  while
    <class_message_declaration> !? mMessageList ;
  while
    <lazy_attribute_declaration> !? mLazyAttributeList ;
  while
    $message$ ;
    if [mClassMessage length] > 0 then
      error here: "the class message is already defined" ;
    end if ;
    @lstring classMessage ;
    $literal_string$ ? classMessage ;
    if [classMessage length] == 0 then
      error classMessage: "the class message string should be not empty" ;
    end if ;
    mClassMessage := [classMessage string] ;
    $;$ ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@classDeclarationAST new
    !mIsAbstract
    !mClassTypeName
    !mSuperClassName # Empty if no super class
    !classFeatureList
    !mAttributeList
    !mAbstractMethodList
    !mOverridenMethodList
    !mMethodList
    !mMessageList
    !mLazyAttributeList
    !mClassMessage
  ] ;
end rule ;


#---------------------------------------------------------------------------*
#                                                                           *
#    S T R U C T    D E C L A R A T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $struct$ ;
  $type_name$ ?@lstring mListTypeName ;
  ${$ ;
  @attributeInCollectionListAST mAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@structDeclarationAST new
    !mListTypeName
    !mAttributeList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $list$ ;
  $type_name$ ?@lstring mListTypeName ;
  ${$ ;
  @attributeInCollectionListAST mAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@listDeclarationAST new
    !mListTypeName
    !mAttributeList
  ] ;
end rule ;

#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $list$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    D E C L A R A T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

rule <obsolete_declaration> :
  $sortedlist$ ;
  $type_name$ ? * ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

nonterminal <sortedlist_sort_descriptor> ?!@sortedListSortDescriptorListAST ioSortedListSortDescriptorList ;

#---------------------------------------------------------------------------*

rule <sortedlist_sort_descriptor> ?!@sortedListSortDescriptorListAST ioSortedListSortDescriptorList :
  $identifier$ ? @lstring mSortedAttributeName ;
  @bool mAscending ;
  select
    $<$ ;
    mAscending := true ;
  or
    $>$ ;
    mAscending := false ;
  end select ;
  ioSortedListSortDescriptorList += !mSortedAttributeName !mAscending ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $sortedlist$ ;
  $type_name$ ?@lstring mSortedListTypeName ;
  ${$ ;
  @attributeInCollectionListAST mAttributeList [emptyList] ;
  repeat
  while
    <attribute_declaration> !? mAttributeList ;
  end repeat ;
  $}$ ;
  ${$ ;
  @sortedListSortDescriptorListAST mSortDescriptorList[emptyList] ;
  repeat
    <sortedlist_sort_descriptor> !? mSortDescriptorList ;
  while
    $,$ ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@sortedListDeclarationAST new
    !mSortedListTypeName
    !mAttributeList
    !mSortDescriptorList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <enum_message_declaration> ?!@enumMessageListAST ioEnumMessageList ;

#---------------------------------------------------------------------------*

rule <enum_message_declaration> ?!@enumMessageListAST ioEnumMessageList :
  $reader$ ;
  $identifier$ ?@lstring mEnumMessageName ;
  $:$ ;
  @enumMessageAssociationListAST mMessageAssociationList [emptyList] ;
  repeat
    $identifier$ ? @lstring mConstantName ;
    $->$ ;
    $literal_string$ ? @lstring mMessage ;
    $;$ ;
    mMessageAssociationList += !mConstantName !mMessage ;
  while
  end repeat ;
  $end$ ;
  $reader$ ;
  $;$ ;
  ioEnumMessageList +=
    !mEnumMessageName
    !mMessageAssociationList
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $enum$ ;
  $type_name$ ? @lstring mEnumTypeName ;
  ${$ ;
  @lstringlist mConstantList [emptyList] ;
  select
    repeat
      $identifier$ ?@lstring constantName ;
      mConstantList += !constantName ;
    while
     $,$ ;
    end repeat ;
  or
    repeat
    while
      $constructor$ ;
      repeat
        $identifier$ ?@lstring constantName ;
        mConstantList += !constantName ;
      while
      $,$ ;
      end repeat ;
      $;$ ;
    end repeat ;
#    @string s := "" ;
#    foreach mConstantList
#    do s .= [mValue string] ;
#    between s .= ", " ;
#    end foreach ;
#    warning here : "Old style declaration: now write '... {" . s . "} ..." ;
  end select ;
  $}$ ;
  ${$ ;
  @enumMessageListAST mEnumMessageList [emptyList] ;
  repeat
  while
    <enum_message_declaration> !? mEnumMessageList ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@enumDeclarationAST new
    !mEnumTypeName
    !mConstantList
    !mEnumMessageList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    F I L E W R A P P E R    D E C L A R A T I O N                         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $filewrapper$ ;
  $identifier$ ? @lstring mFilewrapperName ;
  $in$ ;
  $literal_string$ ? @lstring mFilewrapperPath ;
  ${$ ;
  @lstringlist mFilewrapperExtensionList [emptyList] ;
  select
  or
    repeat
      @lstring extension ;
      $literal_string$ ? extension ;
      mFilewrapperExtensionList += !extension ;
    while
      $,$ ;
    end repeat ;
  end select ;
  $}$ ;
  ${$ ;
  @filewrapperTemplateListAST mFilewrapperTemplateList [emptyList] ;
  repeat
  while
    $template$ ;
    $identifier$ ? @lstring mFilewrapperTemplateName ;
    $literal_string$ ? @lstring mFilewrapperTemplatePath ;
    @formalInputParameterListAST mFilewrapperTemplateFormalInputParameters ;
    <formal_input_parameter_list> ? mFilewrapperTemplateFormalInputParameters ;
    $;$ ;
    mFilewrapperTemplateList +=
      !mFilewrapperTemplateName
      !mFilewrapperTemplatePath
      !mFilewrapperTemplateFormalInputParameters
    ;
  end repeat ;
  $}$ ;
  ioSemanticDeclarations.mSemanticDeclarationList += ![@filewrapperDeclarationAST new
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperExtensionList
    !mFilewrapperTemplateList
  ] ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#A B S T R A C T    C A T E G O R Y    M E T H O D    D E C L A R A T I O N *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $abstract$ ;
  $method$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterListAST mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $;$ ;
  ioSemanticDeclarations.mAbstractCategoryMethodListMap += ![mClassName string] !mMethodName !mFormalParameterList ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    M E T H O D    D E C L A R A T I O N                *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $method$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterListAST mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $:$ ;
  @semanticInstructionListAST mRoutineInstructionList ;
  <semantic_instruction_list> ? mRoutineInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioSemanticDeclarations.mCategoryMethodListMap +=
    ![mClassName string]
    !mMethodName
    !mFormalParameterList
    !mRoutineInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#O V E R R I D I N G   C A T E G O R Y   M E T H O D   D E C L A R A T I O N*
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $override$ ;
  $method$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalParameterListAST mFormalParameterList ;
  <formal_parameter_list> ? mFormalParameterList ;
  $:$ ;
  @semanticInstructionListAST mRoutineInstructionList ;
  <semantic_instruction_list> ? mRoutineInstructionList ;
  $end$ ;
  $method$ ;
  $;$ ;
  ioSemanticDeclarations.mOverridingCategoryMethodListMap +=
    ![mClassName string]
    !mMethodName
    !mFormalParameterList
    !mRoutineInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#A B S T R A C T    C A T E G O R Y    R E A D E R    D E C L A R A T I O N *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $abstract$ ;
  $reader$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mReaderName ;
  @formalInputParameterListAST mFormalInputParameterList ;
  <formal_input_parameter_list> ? mFormalInputParameterList ;
  $->$ ;
  $type_name$ ? @lstring mReturnedTypeName ;
  $identifier$ ? * ;
  $;$ ;
  ioSemanticDeclarations.mAbstractCategoryReaderListMap +=
    ![mClassName string]
    !mReaderName
    !mFormalInputParameterList
    !mReturnedTypeName
  ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    R E A D E R    D E C L A R A T I O N                *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $reader$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalInputParameterListAST mFormalInputParameterList ;
  <formal_input_parameter_list> ? mFormalInputParameterList ;
  $->$ ;
  $type_name$ ? @lstring mReturnedTypeName ;
  $identifier$ ? @lstring mReturnedVariableName ;
  $:$ ;
  @semanticInstructionListAST mRoutineInstructionList ;
  <semantic_instruction_list> ? mRoutineInstructionList ;
  $end$ ;
  $reader$ ;
  $;$ ;
  ioSemanticDeclarations.mCategoryReaderListMap +=
    ![mClassName string]
    !mMethodName
    !mFormalInputParameterList
    !mReturnedTypeName
    !mReturnedVariableName
    !mRoutineInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#O V E R R I D I N G   C A T E G O R Y   R E A D E R   D E C L A R A T I O N*
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_declaration>
 ?!@semanticDeclarationStructAST ioSemanticDeclarations
:
  $override$ ;
  $reader$ ;
  $type_name$ ? @lstring mClassName ;
  $identifier$ ? @lstring mMethodName ;
  @formalInputParameterListAST mFormalInputParameterList ;
  <formal_input_parameter_list> ? mFormalInputParameterList ;
  $->$ ;
  $type_name$ ? @lstring mReturnedTypeName ;
  $identifier$ ? @lstring mReturnedVariableName ;
  $:$ ;
  @semanticInstructionListAST mRoutineInstructionList ;
  <semantic_instruction_list> ? mRoutineInstructionList ;
  $end$ ;
  $reader$ ;
  $;$ ;
  ioSemanticDeclarations.mOverridingCategoryReaderListMap +=
    ![mClassName string]
    !mMethodName
    !mFormalInputParameterList
    !mReturnedTypeName
    !mReturnedVariableName
    !mRoutineInstructionList
  ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;