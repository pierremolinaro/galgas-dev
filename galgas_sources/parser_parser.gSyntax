#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS parser component parser definition                                *
#                                                                           *
#  Copyright (C) 1997, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax parser_parser :

import lexique galgas_scanner in "galgas_scanner.gLexique" ;

import semantics parser_semantics in "parser_semantics.gSemantics" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Rules prototypes                                                    *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
  ?!@stringset ioImportedSemanticsComponentNameSet
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

nonterminal <semantics_declaration>
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents ioOptionsComponentsMapForUse
  ?!@typeTableNomRoutinesDeclarees tableNomRoutinesDeclarees
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeTableRoutinesAimplementer tableRoutinesAimplementer
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
label importSemantics
  ?!@ModelMap ioModelMap
  ?!@ActionMap ioExternActionMap
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeTableNomRoutinesDeclarees tableNomRoutinesDeclarees
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeTableRoutinesAimplementer tableRoutinesAimplementer
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
label parse
;

nonterminal <syntax_declaration>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?!@M_semanticsEntitiesForUse ioEntitiesMap
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@M_nonTerminalSymbolsForGrammar ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
  ?@lstring inSyntaxComponentName
  ?@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
label importSyntax
  ?!@M_nonTerminalSymbolsForGrammar ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
label parse
;

nonterminal <parse_lexique_for_importing>
  ??@lstring inFileName
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label parse
;

nonterminal <import_headers_semantics_and_grammars>
  !@stringset outIncludedSemanticsComponents
  !@stringset outIncludedMetamodelComponents
  !@stringset outIncludedOptionComponents
  !@stringset outIncludedGrammarComponents
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  !@stringset outInclusionsForImplementationFile
  !@stringset outInclusionsForHeaderFile
  !@M_optionComponents ioOptionsComponentsMapForUse
  !@ModelMap outModelMap
  !@ActionMap outActionMap
  !@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  !@typeTableEnAvant tableEnAvant
  !@entityToImplementMap outAllMetamodelClassMap
  ?!@semanticContext ioSemanticContext
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  !@stringset outIncludedSemanticsComponents
  !@stringset outIcludedOptionComponents
  !@ModelMap outModelMap
  !@ActionMap outActionMap
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
  ?!@stringset ioImportedSemanticsComponentNameSet
label parse
;

nonterminal <semantic_instruction>
  ??@treewalkingRoutineHeaderMap inTreewalkingRoutineHeaderMap
  ??@typeTableEnAvant inTableEnAvant
  ??@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ??@entityPropertyMap inCurrentTreewalkingRoutinePropertyMap
  ??@entityToImplementMap inMetamodelEntityMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@semanticContext inSemanticContext
label parse
;

nonterminal <syntax_instruction>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
label parse
;

nonterminal <expression>
  ??@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ??@M_optionComponents inOptionsComponentsMapForUse
  ??@semanticContext inSemanticContext
  ?!@typeVariablesMap ioVariablesMap
  !@typeExpression outExpression
  !@AC_galgasType outResultType
label parse
;

nonterminal <input_parameters_list>
  !@L_assignedVariables listeAffectationParametresEffectifs
  !@typeCplusPlusNameList outAllVariablesList
  ?@typeListeAttributsSemantiques listeAttributsSemantiques
  ?!@typeVariablesMap ioVariablesMap
label parse
;

nonterminal <actual_parameters_list>
  ??@L_EXsignature listeTypesParametresFormels
  !@typeExpressionList outExpressionList
  ?!@typeVariablesMap ioVariablesMap
  ??@M_optionComponents inOptionsComponentsMapForUse
  ??@semanticContext inSemanticContext
  ??@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@typeInstructionList ioInstructionList

label parse
;

nonterminal <formal_arguments_list>
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  !@L_EXsignature listeDeTypes
  ?!@typeVariablesMap tableArgumentsMethode
  !@typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments
  ?!@typeTableEnAvant tableEnAvant
  !@L_signature outSignature
label importGrammarForSemantics
  !@L_signature outSignature
label parse
;

nonterminal <syntax_instructions_list>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
label parse
;
 
nonterminal <syntax_instructions_list_no_verif>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
label parse
;

nonterminal <get_lexique_infos>
  !@M_terminalSymbolsMapForUse tableTerminaux
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  !@lstring outLexiqueName
label getLexiqueName
  !@lstring outLexiqueName
label parse
;

extern routine checkLabelSignatures
  ?!@typeAltProductionsMap ioAltProductionMap ;

extern routine checkParseRewindSignatures
  ?!@L_parse_rewind_signature_list ioParseRewindSignature
 ;

#------------------------------------------------------------------------------*
#                                                                              *
#                      SYNTAX COMPONENT                                        *
#                                                                              *
#------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
:
  @typeEntitiesToGenerateList listeEntitesAengendrer ;
  @typeTableRoutinesAimplementer tableRoutinesAimplementer [emptyMap] ;
  @typeTableNomRoutinesDeclarees tableNomRoutinesDeclarees [emptyMap] ;
  $syntax$ ;
#--- Get syntax comopnent name
  @lstring componentName ;
  $identifier$ ? componentName ;
  $:$ ;
#--- Define lexique
  @M_terminalSymbolsMapForUse tableTerminaux ;
  @lstring  lexiqueName ;
  <get_lexique_infos>
    ?tableTerminaux
    !?ioLexiqueMapForUse
    ?lexiqueName
  ;
  @string defLexique := [lexiqueName string] ;
#--- Parse Inclusions
  @stringset inclusionsForHeaderFile ;
  @stringset inclusionsForImplementationFile ;
  @typeTableEnAvant tableEnAvant ;
  @M_semanticsEntitiesForUse entitiesMap ;
  @M_optionComponents ioOptionsComponentsMapForUse ;
  @stringset includedSemanticsComponents ;
  @stringset includedMetamodelComponents ;
  @stringset includedOptionComponents ;
  @stringset includedGrammarComponents ;
  @ModelMap modelMap ;
  @ActionMap actionMap ;
  @entityToImplementMap allMetamodelClassMap ;
  @semanticContext semanticContext [new
    ![@M_filewrappers emptyMap]
    ![@stringset emptySet]
  ] ;
  <import_headers_semantics_and_grammars>
    ?includedSemanticsComponents
    ?includedOptionComponents
    ?includedMetamodelComponents
    ?includedGrammarComponents
    !?ioLexiqueMapForUse
    !?ioSemanticsComponentsMap
    !?ioMetamodelComponentMap
    !?ioTreewalkingComponentMap
    !?ioGrammarComponentsMap
    !?ioOptionsComponentsMap
    ?inclusionsForImplementationFile
    ?inclusionsForHeaderFile
    ?ioOptionsComponentsMapForUse
    ?modelMap
    ?actionMap
    ?entitiesMap
    ?tableEnAvant
    ?allMetamodelClassMap
    !?semanticContext
  ;
  listeEntitesAengendrer := [@typeEntitiesToGenerateList emptyList] ;
  @M_nonTerminalSymbolsForGrammar nonTerminalSymbolsMapForGrammar [emptyMap] ;
  @L_productionRules_ForGrammarComponent productionRulesListForGrammar [emptyList] ;
  @M_nonTerminalSymbolForSyntax nonTerminalSymbolsMapForSyntax [emptyMap] ;
  repeat
  while
    <syntax_declaration>
      !defLexique
      !?nonTerminalSymbolsMapForSyntax
      !?entitiesMap
      !ioOptionsComponentsMapForUse
      !?tableEnAvant
      !?listeEntitesAengendrer
      !?tableTerminaux
      !?nonTerminalSymbolsMapForGrammar
      !?productionRulesListForGrammar
      !componentName
      !allMetamodelClassMap
      !ioTreewalkingComponentMap
      !?ioSemanticContext
    ;
  while
    <semantics_declaration>
      !?entitiesMap
      !?listeEntitesAengendrer
      !ioOptionsComponentsMapForUse
      !?tableNomRoutinesDeclarees
      !?tableEnAvant
      !?tableRoutinesAimplementer
      !ioTreewalkingComponentMap
      !?ioSemanticContext
    ;
  end repeat ;
#--- Check that all routines have been implemented
  foreach tableNomRoutinesDeclarees (@lstring nomRoutine) do
    if not [tableRoutinesAimplementer hasKey ![nomRoutine string]] then
      error nomRoutine : "the routine '" . [nomRoutine string] .
                         "' is not implemented within the component" ;
    end if ;
  end foreach ;
#--- Enter syntax component into syntax components map
  [!?ioSyntaxComponentsMap insertKey
    !componentName
    !nonTerminalSymbolsMapForGrammar
    !productionRulesListForGrammar
    !lexiqueName
  ] ;
#--- Generate component
  generateSemanticsComponent
    !?componentName
    !?inclusionsForHeaderFile
    !?defLexique
    !?listeEntitesAengendrer
    !?inclusionsForImplementationFile
  ;
#--- Fin du fichier
  $end$ ;
  $syntax$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
:
  $syntax$ ;
  @lstring syntaxComponentName ;
  $identifier$ ? syntaxComponentName ;
  $:$ ;
#--- Lexique
  @lstring lexiqueName ;
  @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
  <get_lexique_infos>
    ?*
    !?lexiqueMapForUse
    ?lexiqueName
  ;
#--- Import Semantics, Metamodels
  @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
  @M_grammarComponents grammarComponentsMap [emptyMap] ;
  @M_optionComponents optionsComponentsMap [emptyMap] ;  
  @stringset inclusionsForHeaderFile ;
  @stringset inclusionsForImplementationFile ;
  @typeTableEnAvant tableEnAvant ;
  @M_semanticsEntitiesForUse entitiesMap ;
  @M_optionComponents ioOptionsComponentsMapForUse ;
  @stringset includedSemanticsComponents ;
  @stringset includedMetamodelComponents ;
  @stringset includedOptionComponents ;
  @stringset includedGrammarComponents ;
  @ModelMap modelMap ;
  @ActionMap actionMap ;
  @entityToImplementMap allMetamodelClassMap ;
  <import_headers_semantics_and_grammars>
    ?includedSemanticsComponents
    ?includedOptionComponents
    ?includedMetamodelComponents
    ?includedGrammarComponents
    !?lexiqueMapForUse
    !?semanticsComponentsMap
    !?ioMetamodelComponentMap
    !?ioTreewalkingComponentMap
    !?grammarComponentsMap
    !?optionsComponentsMap
    ?inclusionsForImplementationFile
    ?inclusionsForHeaderFile
    ?ioOptionsComponentsMapForUse
    ?modelMap
    ?actionMap
    ?entitiesMap
    ?tableEnAvant
    ?allMetamodelClassMap
    !?ioSemanticContext
  ;
#--- 
  @L_productionRules_ForGrammarComponent productionRulesListForGrammar [emptyList] ;
  @M_nonTerminalSymbolsForGrammar nonTerminalSymbolsMapForGrammar [emptyMap] ;
  repeat
  while
    <syntax_declaration> importSyntax
      !?nonTerminalSymbolsMapForGrammar
      !?productionRulesListForGrammar
    ;
  while
    <semantics_declaration> parse ;
  end repeat ;
#--- Enter syntax component into syntax components map
  [!?ioSyntaxComponentsMap insertKey
    !syntaxComponentName
    !nonTerminalSymbolsMapForGrammar
    !productionRulesListForGrammar
    !lexiqueName
  ] ;
  $end$ ;
  $syntax$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_treewalkingComponents unused ioTreewalkingComponentMap
  ?!@semanticContext unused ioSemanticContext
  ?!@stringset unused ioImportedSemanticsComponentNameSet
:
  $syntax$ ;
  $identifier$ ? * ;
  $:$ ;
  <get_lexique_infos> parse ;
  <import_headers_semantics_and_grammars> parse ;
  repeat
  while
    <syntax_declaration> parse ;
  while
    <semantics_declaration> parse ;
  end repeat ;
  $end$ ;
  $syntax$ ;
  $;$ ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $syntax$ ;
  $identifier$ ? * ;
  $:$ ;
  <get_lexique_infos> parse ;
  <import_headers_semantics_and_grammars> parse ;
  repeat
  while
    <syntax_declaration> parse ;
  while
    <semantics_declaration> parse ;
  end repeat ;
  $end$ ;
  $syntax$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@M_treewalkingComponents unused ioTreewalkingComponentMap
  ?!@semanticContext unused ioSemanticContext
:
  $syntax$ ;
  $identifier$ ? * ;
  $:$ ;
  <get_lexique_infos> parse ;
  <import_headers_semantics_and_grammars> parse ;
  repeat
  while
    <syntax_declaration> parse ;
  while
    <semantics_declaration> parse ;
  end repeat ;
  $end$ ;
  $syntax$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $syntax$ ;
  $identifier$ ? * ;
  $:$ ;
  <get_lexique_infos> parse ;
  <import_headers_semantics_and_grammars> parse ;
  repeat
  while
    <syntax_declaration> parse ;
  while
    <semantics_declaration> parse ;
  end repeat ;
  $end$ ;
  $syntax$ ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#                   GET LEXIQUE INFOS                                          *
#                                                                              *
#------------------------------------------------------------------------------*

rule <get_lexique_infos>
  !@M_terminalSymbolsMapForUse tableTerminaux
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  !@lstring outLexiqueName
:
#--- Get lexique name
  $import$ ;
  $lexique$ ;
  $identifier$ ?outLexiqueName ;
#--- 'in' clause ?
  @M_lexiqueComponents lexiqueComponentsMap ;
  select
    lexiqueComponentsMap := ioLexiqueMapForUse ;
  or
    $in$ ;
    @lstring fileName ;
    $literal_string$ ? fileName ;
    lexiqueComponentsMap := [@M_lexiqueComponents emptyMap] ;
    <parse_lexique_for_importing>
      !fileName
      !?lexiqueComponentsMap
    ;
  end select ;
#--- Get lexique from lexique components map
  [lexiqueComponentsMap searchKey !outLexiqueName ?tableTerminaux] ;
#----
  if not [ioLexiqueMapForUse hasKey ![outLexiqueName string]] then
    [!?ioLexiqueMapForUse insertKey !outLexiqueName !tableTerminaux] ;
  end if ;
  $;$ ;
label getLexiqueName
  !@lstring outLexiqueName
:
  $import$ ;
  $lexique$ ;
  $identifier$ ? outLexiqueName ;
  select
  or
    $in$ ;
    $literal_string$ ? * ;
    <parse_lexique_for_importing> parse ;
  end select ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#                                Instruction BLOC                              *
#------------------------------------------------------------------------------*

rule <syntax_instruction>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
:
  $block$ ;
#--- Nom de la map
  @lstring nomTable ;
  $identifier$ ? nomTable ;
  @AC_galgasType typeEntite ;
  @typeCplusPlusName nomCppVariableTable ;
  [!?ioVariablesMap searchForReadWriteAccess !nomTable ?typeEntite ?nomCppVariableTable] ; 
  @typeTableBlocsDeTable tableMethodesBloc :=
   [(cast typeEntite if >=@typeGalgasMapType else error nomTable) aTableMethodesSurcharger] ;
#--- Methode block
  $.$ ;
  @lstring nomMethodeBloc ;
  $identifier$ ? nomMethodeBloc ;
  @L_EXsignature signatureDebut ;
  @L_EXsignature signatureFin ;
  [tableMethodesBloc searchKey !nomMethodeBloc ?signatureDebut ?signatureFin] ;
#--- Analyser la list d'arguments du prologue
  @typeExpressionList prologueExpressionList ;
  $($ ;
  <actual_parameters_list>
    !signatureDebut
    ?prologueExpressionList
    !?ioVariablesMap
    !inOptionsComponentsMapForUse
    !inSemanticContext
    !ioEntitiesMap
    !?ioInstructionList
  ;
  $)$ ;
#--- Generate prologue instruction
  @typeInstruction instruction ;
  instruction := [@typeMapBlockPrologueInstruction new !nomCppVariableTable
                                                      !nomMethodeBloc
                                                      !prologueExpressionList] ;
  ioInstructionList += !instruction ;
#--- Liste d'instructions incluses
  $:$ ;
  <syntax_instructions_list_no_verif>
    !inLexiqueClassName
    !?ioNonTerminalSymbolMapForSyntax
    !inCheckNonTerminalsAreDeclaredWithParseLabel
    !ioEntitiesMap
    !?listeEntitesAengendrer
    !inOptionsComponentsMapForUse
    !?ioVariablesMap
    !?ioInstructionList
    !?tableTerminaux
    !?ioSyntaxSignature
    !inAllMetamodelClassMap
    !inTreewalkingComponentMap
    !inIsInvokedWithinParseLoopInstruction
    !inSemanticContext
  ;
  $end$ ;
  $block$ ;
#--- Analyser la list d'arguments de l'epilogue
  @typeExpressionList epilogueExpressionList ;
  $($ ;
  <actual_parameters_list>
    !signatureFin
    ?epilogueExpressionList
    !?ioVariablesMap
    !inOptionsComponentsMapForUse
    !inSemanticContext
    !ioEntitiesMap
    !?ioInstructionList
  ;
  $)$ ;
#--- Verifier que la map est toujours accessible en lecture/ecriture
  [!?ioVariablesMap searchForReadWriteAccess !nomTable ?* ?*] ;
#--- Generate epilogue instruction
  instruction := [@typeMapBlockEpilogueInstruction new !nomCppVariableTable
                                                      !nomMethodeBloc
                                                      !epilogueExpressionList] ;
  ioInstructionList += !instruction ;
  $;$ ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  $block$ ;
  $identifier$ ? * ;
  $.$ ;
  $identifier$ ? * ;
  $($ ;
  <actual_parameters_list> parse ;
  $)$ ;
  $:$ ;
  <syntax_instructions_list_no_verif> importSyntax !?ioInstructionList ;
  $end$ ;
  $block$ ;
  $($ ;
  <actual_parameters_list> parse ;
  $)$ ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#     I M P L I C I T    N O N T E R M I N A L    D E C L A R A T I O N        *
#------------------------------------------------------------------------------*

routine implicitDeclaration
  ??@lstring inNonterminalBaseName
  ??@uint inLevel
  ??@lstring inReturnedEntityName
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?!@M_nonTerminalSymbolsForGrammar ioNonTerminalSymbolsMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
:
#---
  @AC_galgasType entityType := [@typeGalgas_singleReferenceEntity new
    !inReturnedEntityName
    ![@typeListeAttributsSemantiques emptyList]
    ![@stringset emptySet]
  ] ;

  @bool hasSemantics := [inReturnedEntityName string] != "" ;
  @lstring var_e ;
  @lstring var_exp ;
  if hasSemantics then
    var_e := [@lstring new !"e" !here] ;
    var_exp := [@lstring new !"exp" !here] ;
  else
    var_e := [@lstring new !"" !here] ;
    var_exp := [@lstring new !"" !here] ;
  end if ;
#---
  @M_nonterminalSymbolAlts parametersMapNoArgument [emptyMap] ;
  @M_nonterminalSymbolAltsForGrammar parametersMapForGrammarNoArgument [emptyMap] ;
  [!?parametersMapNoArgument insertKey ![@lstring new !"" !here] ![@L_EXsignature emptyList] !inReturnedEntityName] ;
  [!?parametersMapForGrammarNoArgument insertKey
    ![@lstring new !"" !here] # Empty Id
    ![@L_signature emptyList]
    !inReturnedEntityName
  ] ;
#---
  @M_nonterminalSymbolAlts parametersMapOneArgument ;
  @M_nonterminalSymbolAltsForGrammar parametersMapForGrammarOneArgument ;
  if hasSemantics then
    parametersMapOneArgument := [@M_nonterminalSymbolAlts emptyMap] ;
    parametersMapForGrammarOneArgument := [@M_nonterminalSymbolAltsForGrammar emptyMap] ;
    @L_signature signatureForGrammar [emptyList] ;
    signatureForGrammar += ![@formalArgumentPassingMode argumentConstantIn] !inReturnedEntityName ;
    @L_EXsignature listeDeTypesFormels [emptyList] ;
    listeDeTypesFormels += !entityType ![@formalArgumentPassingMode argumentConstantIn] ;
    [!?parametersMapOneArgument insertKey ![@lstring new !"" !here] !listeDeTypesFormels !inReturnedEntityName] ;
    [!?parametersMapForGrammarOneArgument insertKey
      ![@lstring new !"" !here] # Empty Id
      !signatureForGrammar
      !inReturnedEntityName
    ] ;
  else
    parametersMapOneArgument := parametersMapNoArgument ;
   parametersMapForGrammarOneArgument := parametersMapForGrammarNoArgument ;
  end if ;

#--- Nonterminal <Expression__i>
  @lstring actualRuleName [new ![inNonterminalBaseName string] . "__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualRuleName !parametersMapForGrammarNoArgument] ;
  [!?ioNonTerminalSymbolMapForSyntax insertKey !actualRuleName !parametersMapNoArgument] ;
  @typeEntityToGenerate ea := [@typeNonterminalToGenerate new !actualRuleName !parametersMapNoArgument !inLexiqueClassName] ;
  listeEntitesAengendrer += !ea ;
#--- Nonterminal <Expression__prefix__i>
  @lstring actualPrefixName [new ![inNonterminalBaseName string] . "__prefix__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualPrefixName !parametersMapForGrammarNoArgument] ;
  [!?ioNonTerminalSymbolMapForSyntax insertKey !actualPrefixName !parametersMapNoArgument] ;
  ea := [@typeNonterminalToGenerate new !actualPrefixName !parametersMapNoArgument !inLexiqueClassName] ;
  listeEntitesAengendrer += !ea ;
#--- Nonterminal <Expression__infix__i>
  @lstring actualInfixName [new ![inNonterminalBaseName string] . "__infix__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualInfixName !parametersMapForGrammarOneArgument] ;
  [!?ioNonTerminalSymbolMapForSyntax insertKey !actualInfixName !parametersMapOneArgument] ;
  ea := [@typeNonterminalToGenerate new !actualInfixName !parametersMapOneArgument !inLexiqueClassName] ;
  listeEntitesAengendrer += !ea ;
#--- Nonterminal <Expression__postfix__i>
  @lstring actualPostfixName [new ![inNonterminalBaseName string] . "__postfix__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualPostfixName !parametersMapForGrammarOneArgument] ;
   [!?ioNonTerminalSymbolMapForSyntax insertKey !actualPostfixName !parametersMapOneArgument] ;
   ea := [@typeNonterminalToGenerate new !actualPostfixName !parametersMapOneArgument !inLexiqueClassName] ;
   listeEntitesAengendrer += !ea ;
#------------------------------------------ Rule <Expression__i>
  @typeAltProductionsMap altProductionsMap [emptyMap] ;
  @typeInstructionList listeInstructions [emptyList] ;
  @entityPropertyMap allPropertiesMap [emptyMap] ;
  @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
#--- Building instruction list
  if hasSemantics then 
    @typeInstruction instruction := [@typeInstructionDeclarationVarLocale new
      ![@typeAutomaticName new !here !"e"]
      !entityType
    ] ;
    listeInstructions += !instruction ;
  end if ;

  @typeInstruction instruction := [@typeInstructionAppelNonTerminal new
    !actualPrefixName
    ![@typeExpressionList emptyList]
    ![@lstring new !"" !here] #  mAltName
    !var_e
    !inReturnedEntityName
    !false # mReturnedEntityShouldInsertedInList ;
  ] ;
  listeInstructions += !instruction ;

  if hasSemantics then 
    instruction := [@typeInstructionDeclarationVarLocale new
      ![@typeAutomaticName new !here !"exp"]
      !entityType
    ] ;
    listeInstructions += !instruction ;
  end if ;

  @typeExpressionList effectiveArguments [emptyList] ;
  if hasSemantics then 
    effectiveArguments += ![@typeVarInExpression new ![@typeAutomaticName new !here !"e"]] ;
  end if ;
  instruction := [@typeInstructionAppelNonTerminal new
    !actualInfixName
    !effectiveArguments
    ![@lstring new !"" !here] #  mAltName
    !var_exp
    !inReturnedEntityName
    !false # mReturnedEntityShouldInsertedInList ;
  ] ;
  listeInstructions += !instruction ;

  effectiveArguments := [@typeExpressionList emptyList] ;
  if hasSemantics then 
    effectiveArguments += ![@typeVarInExpression new ![@typeAutomaticName new !here !"exp"]] ;
  end if ;
  instruction := [@typeInstructionAppelNonTerminal new
    !actualPostfixName
    !effectiveArguments
    ![@lstring new !"" !here] #  mAltName
    !var_e
    !inReturnedEntityName
    !false # mReturnedEntityShouldInsertedInList ;
  ] ;
  listeInstructions += !instruction ;
  [!?altProductionsMap insertKey
    ![@lstring new !"" !here] # Alt Name
    ![@typeListeTypesEtNomsArgMethode emptyList]
    !listeInstructions
    !syntaxSignature
    !here
    ![inReturnedEntityName string]
    ![var_e string]
    !allPropertiesMap
  ] ;
#--- Generate production
  ea := [@typeProductionAengendrer new
    !actualRuleName
    !altProductionsMap
    !""
    !inLexiqueClassName
    !false
  ] ;
  listeEntitesAengendrer += !ea ;
#--- Generate list for grammar component
  ioProductionRulesListForGrammar +=
   !actualRuleName
   !0 # Rule Index
   !syntaxSignature
  ;
#------------------------------------------ Rule <Expression__prefix__i>
  altProductionsMap := [@typeAltProductionsMap  emptyMap] ;
  listeInstructions := [@typeInstructionList emptyList] ;
  allPropertiesMap := [@entityPropertyMap emptyMap] ;
  syntaxSignature := [@L_ruleSyntaxSignature emptyList] ;
  @lstring nextRuleName [new ![inNonterminalBaseName string] . "__" . [inLevel + 1 string] ![inNonterminalBaseName location]] ;
  if hasSemantics then 
    instruction := [@typeInstructionDeclarationVarLocale new
      ![@typeAutomaticName new !here !"e"]
      !entityType
    ] ;
    listeInstructions += !instruction ;
  end if ;

  instruction := [@typeInstructionAppelNonTerminal new
    !nextRuleName
    ![@typeExpressionList emptyList]
    ![@lstring new !"" !here] #  mAltName
    !var_e
    !inReturnedEntityName
    !false # mReturnedEntityShouldInsertedInList ;
  ] ;
  listeInstructions += !instruction ;
  [!?altProductionsMap insertKey
    ![@lstring new !"" !here] # Alt Name
    ![@typeListeTypesEtNomsArgMethode emptyList]
    !listeInstructions
    !syntaxSignature
    !here
    ![inReturnedEntityName string]
    ![var_e string]
    !allPropertiesMap
  ] ;
#--- Generate production
  ea := [@typeProductionAengendrer new
    !actualPrefixName
    !altProductionsMap
    !""
    !inLexiqueClassName
    !false
  ] ;
  listeEntitesAengendrer += !ea ;
#--- Generate list for grammar component
  ioProductionRulesListForGrammar +=
   !actualPrefixName
   !0 # Rule Index
   !syntaxSignature
  ;
#------------------------------------------ Rule <Expression__infix__i>
  altProductionsMap := [@typeAltProductionsMap  emptyMap] ;
  @typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments [emptyList] ;
  listeInstructions := [@typeInstructionList emptyList] ;
  if hasSemantics then 
    instruction := [@typeInstructionDeclarationVarLocale new
      ![@typeAutomaticName new !here !"e"]
      !entityType
    ] ;
    listeInstructions += !instruction ;
    @typeAutomaticName var_inE [new !here !"inE"] ;
    instruction := [@C_assignmentInstruction new
      ![@typeAutomaticName new !here !"e"]
      ![@typeVarInExpression new !var_inE]
    ] ;
    listeInstructions += !instruction ;
    listeTypeEtNomsArguments +=
      !entityType
      ![@formalArgumentPassingMode argumentConstantIn]
      !var_inE
      !true
    ;
  end if ;
  allPropertiesMap := [@entityPropertyMap emptyMap] ;
  syntaxSignature := [@L_ruleSyntaxSignature emptyList] ;
  [!?altProductionsMap insertKey
    ![@lstring new !"" !here] # Alt Name
    !listeTypeEtNomsArguments
    !listeInstructions
    !syntaxSignature
    !here
    ![inReturnedEntityName string]
    ![var_e string]
    !allPropertiesMap
  ] ;
#--- Generate production
  ea := [@typeProductionAengendrer new
    !actualInfixName
    !altProductionsMap
    !""
    !inLexiqueClassName
    !false
  ] ;
  listeEntitesAengendrer += !ea ;
#--- Generate list for grammar component
  ioProductionRulesListForGrammar +=
   !actualInfixName
   !0 # Rule Index
   !syntaxSignature
  ;
#------------------------------------------ Rule <Expression__postfix__i>
  altProductionsMap := [@typeAltProductionsMap  emptyMap] ;
  allPropertiesMap := [@entityPropertyMap emptyMap] ;
  syntaxSignature := [@L_ruleSyntaxSignature emptyList] ;
  [!?altProductionsMap insertKey
    ![@lstring new !"" !here] # Alt Name
    !listeTypeEtNomsArguments
    !listeInstructions
    !syntaxSignature
    !here
    ![inReturnedEntityName string]
    ![var_e string]
    !allPropertiesMap
  ] ;
#--- Generate production
  ea := [@typeProductionAengendrer new
    !actualPostfixName
    !altProductionsMap
    !""
    !inLexiqueClassName
    !false
  ] ;
  listeEntitesAengendrer += !ea ;
#--- Generate list for grammar component
  ioProductionRulesListForGrammar +=
   !actualPostfixName
   !0 # Rule Index
   !syntaxSignature
  ;
end routine ;

#------------------------------------------------------------------------------*

routine implicitDeclarationImportSyntax
  ??@lstring inNonterminalBaseName
  ??@uint inLevel
  ??@lstring inReturnedEntityName
  ?!@M_nonTerminalSymbolsForGrammar ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
:
  @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMapNoParameter [emptyMap] ;
  [!?nonterminalSymbolParametersMapNoParameter insertKey
    ![@lstring new !"" !here] # Alt Name
    ![@L_signature emptyList]
    !inReturnedEntityName
  ] ;
  @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMapOneParameter ;
  if [inReturnedEntityName string] == "" then
    nonterminalSymbolParametersMapOneParameter := nonterminalSymbolParametersMapNoParameter ;
  else
    nonterminalSymbolParametersMapOneParameter := [@M_nonterminalSymbolAltsForGrammar emptyMap] ;
    @L_signature signature [emptyList] ;
    signature += ![@formalArgumentPassingMode argumentConstantIn] !inReturnedEntityName ;
    [!?nonterminalSymbolParametersMapOneParameter insertKey
      ![@lstring new !"" !here] # Alt Name
      !signature
      !inReturnedEntityName
    ] ;
  end if ;
#--- Nonterminal <Expression__i>
  @lstring actualRuleName [new ![inNonterminalBaseName string] . "__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualRuleName !nonterminalSymbolParametersMapNoParameter] ;
#--- Nonterminal <Expression__prefix__i>
  @lstring actualPrefixName [new ![inNonterminalBaseName string] . "__prefix__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualPrefixName !nonterminalSymbolParametersMapNoParameter] ;
#--- Nonterminal <Expression__infix__i>
  @lstring actualInfixName [new ![inNonterminalBaseName string] . "__infix__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualInfixName !nonterminalSymbolParametersMapOneParameter] ;
#--- Nonterminal <Expression__postfix__i>
  @lstring actualPostfixName [new ![inNonterminalBaseName string] . "__postfix__" . [inLevel string] ![inNonterminalBaseName location]] ;
  [!?ioNonTerminalSymbolsMap insertKey !actualPostfixName !nonterminalSymbolParametersMapOneParameter] ;
#------------------------------------------ Rule <Expression__i>
  @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
  @AC_instruction_ForGrammar instruction := [@T_nonterminalInstruction_forGrammarComponent new
    ![actualPrefixName location]
    !actualPrefixName
    !0 # nonterminalSymbolIndex
  ] ;
  syntaxSignature += ! instruction ;

  instruction := [@T_nonterminalInstruction_forGrammarComponent new
    ![actualInfixName location]
    !actualInfixName
    !0 # nonterminalSymbolIndex
  ] ;
  syntaxSignature += ! instruction ;

  instruction := [@T_nonterminalInstruction_forGrammarComponent new
    ![actualPostfixName location]
    !actualPostfixName
    !0 # nonterminalSymbolIndex
  ] ;
  syntaxSignature += ! instruction ;

  ioProductionRulesListForGrammar +=
    !actualRuleName
    !0 # leftNonterminalSymbolIndex
    !syntaxSignature
  ;
#------------------------------------------ Rule <Expression__prefix__i>
  syntaxSignature := [@L_ruleSyntaxSignature emptyList] ;
  @lstring nextRuleName [new ![inNonterminalBaseName string] . "__" . [inLevel + 1 string] ![inNonterminalBaseName location]] ;
  instruction := [@T_nonterminalInstruction_forGrammarComponent new
    ![nextRuleName location]
    !nextRuleName
    !0 # nonterminalSymbolIndex
  ] ;
  syntaxSignature += ! instruction ;
  ioProductionRulesListForGrammar +=
    !actualPrefixName
    !0 # leftNonterminalSymbolIndex
    !syntaxSignature
  ;
#------------------------------------------ Rule <Expression__infix__i>
  syntaxSignature := [@L_ruleSyntaxSignature emptyList] ;
  ioProductionRulesListForGrammar +=
    !actualInfixName
    !0 # leftNonterminalSymbolIndex
    !syntaxSignature
  ;
#------------------------------------------ Rule <Expression__postfix__i>
  syntaxSignature := [@L_ruleSyntaxSignature emptyList] ;
  ioProductionRulesListForGrammar +=
    !actualPostfixName
    !0 # leftNonterminalSymbolIndex
    !syntaxSignature
  ;
end routine ;

#------------------------------------------------------------------------------*
#     O P E R A T O R    D E C L A R A T I O N                                 *
#------------------------------------------------------------------------------*

rule <syntax_declaration>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax unused ioNonTerminalSymbolMapForSyntax
  ?!@M_semanticsEntitiesForUse unused ioEntitiesMap
  ??@M_optionComponents unused inOptionsComponentsMapForUse
  ?!@typeTableEnAvant unused tableEnAvant
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ?!@M_terminalSymbolsMapForUse unused tableTerminaux
  ?!@M_nonTerminalSymbolsForGrammar unused ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
  ?@lstring unused inSyntaxComponentName
  ?@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents unused inTreewalkingComponentMap
  ?!@semanticContext unused ioSemanticContext
:
  $operator$ ;
  @lstring operatorAttributes ;
  $literal_string$ ? operatorAttributes ;
  @lstring terminalSymbolName ;
  $terminal$ ? terminalSymbolName ;
  @lstring nonterminalBaseName ;
  $non_terminal_symbol$ ? nonterminalBaseName ;
  @luint operatorPriority ;
  $unsigned_literal_integer$ ? operatorPriority ;
  @lstring returnedEntityName ;
  @lstring baseEntityName ;
  select
    returnedEntityName := [@lstring new !"" !here] ;
    baseEntityName := [@lstring new !"" !here] ;
  or
    $->$ ;
    $type_name$ ? returnedEntityName ;
    [inAllMetamodelClassMap searchKey !returnedEntityName ?3* ?baseEntityName ?4*] ;
  end select ;
  $;$ ;
#---
  @typeAutomaticName automaticVar_right [new !here !"right"] ;
  @typeAutomaticName automaticVar_e [new !here !"e"] ;
  @typeAutomaticName automaticVar_inE [new !here !"inE"] ;
  @AC_galgasType baseEntityType := [@typeGalgas_singleReferenceEntity new
    !baseEntityName
    ![@typeListeAttributsSemantiques emptyList]
    ![@stringset emptySet]
  ] ;

  @bool hasSemantics := [returnedEntityName string] != "" ;
  @lstring var_e ;
  @lstring var_right ;
  if hasSemantics then
    var_e := [@lstring new !"e" !here] ;
    var_right := [@lstring new !"right" !here] ;
  else
    var_e := [@lstring new !"" !here] ;
    var_right := [@lstring new !"" !here] ;
  end if ;
#--- Generate operator
  @typeInstructionList listeInstructions [emptyList] ;
  @typeInstruction instruction :=[@typeInstructionVerifSyntaxique new
    !terminalSymbolName
    ![@L_assignedVariables emptyList]
    !inLexiqueClassName
  ] ;
  listeInstructions += !instruction ;
  if hasSemantics then 
    instruction := [@typeInstructionDeclarationVarLocale new
      !automaticVar_e
      !baseEntityType
    ] ;
    listeInstructions += !instruction ;
  end if ;
#---
  @typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments [emptyList] ;
  @lstring leftNonTerminalName ;
  if [operatorAttributes string] == "multiple prefix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__prefix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@typeInstructionAppelNonTerminal new
      !calledRuleName
      ![@typeExpressionList emptyList]
      ![@lstring new !"" !here] #  mAltName
      !var_e
      !returnedEntityName
      !false # mReturnedEntityShouldInsertedInList ;
    ] ;
    listeInstructions += !instruction ;
    if hasSemantics then
      instruction := [@C_assignmentInstruction new
        !automaticVar_e
        ![@typeConstructorExpression new
          ![returnedEntityName string]
          !"new"
          ![@typeExpressionList listWithValue ![@typeVarInExpression new !automaticVar_e]]
        ]
      ] ;
      listeInstructions += !instruction ;
    end if ;
  elsif [operatorAttributes string] == "simple prefix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__prefix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] + 1 string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@typeInstructionAppelNonTerminal new
      !calledRuleName
      ![@typeExpressionList emptyList]
      ![@lstring new !"" !here] #  mAltName
      !var_e
      !returnedEntityName
      !false # mReturnedEntityShouldInsertedInList ;
    ] ;
    listeInstructions += !instruction ;
    if hasSemantics then
      instruction := [@C_assignmentInstruction new
        !automaticVar_e
        ![@typeConstructorExpression new
          ![returnedEntityName string]
          !"new"
          ![@typeExpressionList listWithValue ![@typeVarInExpression new !automaticVar_e]]
        ]
      ] ;
      listeInstructions += !instruction ;
    end if ;
  elsif [operatorAttributes string] == "infix" then #--------------------------------------
    if hasSemantics then 
      listeTypeEtNomsArguments +=
        !baseEntityType
        ![@formalArgumentPassingMode argumentConstantIn]
        !automaticVar_inE
        !true
      ;
    end if ;
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__infix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    if hasSemantics then 
      instruction := [@typeInstructionDeclarationVarLocale new
        !automaticVar_right
        !baseEntityType
      ] ;
      listeInstructions += !instruction ;
    end if ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] + 1 string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@typeInstructionAppelNonTerminal new
      !calledRuleName
      ![@typeExpressionList emptyList]
      ![@lstring new !"" !here] #  mAltName
      !var_right
      !returnedEntityName
      !false # mReturnedEntityShouldInsertedInList ;
    ] ;
    listeInstructions += !instruction ;
    if hasSemantics then
      @typeExpressionList expressionList [listWithValue ![@typeVarInExpression new !automaticVar_inE]] ;
      expressionList += ![@typeVarInExpression new !automaticVar_right] ;
      instruction := [@C_assignmentInstruction new
        !automaticVar_e
        ![@typeConstructorExpression new
          ![returnedEntityName string]
          !"new"
          !expressionList
        ]
      ] ;
      listeInstructions += !instruction ;
    end if ;
  elsif [operatorAttributes string] == "right infix" then  #--------------------------------------
    if hasSemantics then 
      listeTypeEtNomsArguments +=
        !baseEntityType
        ![@formalArgumentPassingMode argumentConstantIn]
        !automaticVar_inE
        !true
      ;
    end if ;
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__infix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    if hasSemantics then 
      instruction := [@typeInstructionDeclarationVarLocale new
        !automaticVar_right
        !baseEntityType
      ] ;
      listeInstructions += !instruction ;
    end if ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@typeInstructionAppelNonTerminal new
      !calledRuleName
      ![@typeExpressionList emptyList]
      ![@lstring new !"" !here] #  mAltName
      !var_right
      !returnedEntityName
      !false # mReturnedEntityShouldInsertedInList ;
    ] ;
    listeInstructions += !instruction ;
    if hasSemantics then
      @typeExpressionList expressionList [listWithValue ![@typeVarInExpression new !automaticVar_inE]] ;
      expressionList += ![@typeVarInExpression new !automaticVar_right] ;
      instruction := [@C_assignmentInstruction new
        !automaticVar_e
        ![@typeConstructorExpression new
          ![returnedEntityName string]
          !"new"
          !expressionList
        ]
      ] ;
      listeInstructions += !instruction ;
    end if ;
  elsif [operatorAttributes string] == "left infix" then  #--------------------------------------
    if hasSemantics then 
      listeTypeEtNomsArguments +=
        !baseEntityType
        ![@formalArgumentPassingMode argumentConstantIn]
        !automaticVar_inE
        !true
      ;
    end if ;
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__infix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    if hasSemantics then 
      instruction := [@typeInstructionDeclarationVarLocale new
        !automaticVar_right
        !baseEntityType
      ] ;
      listeInstructions += !instruction ;
    end if ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] + 1 string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@typeInstructionAppelNonTerminal new
      !calledRuleName
      ![@typeExpressionList emptyList]
      ![@lstring new !"" !here] #  mAltName
      !var_right
      !returnedEntityName
      !false # mReturnedEntityShouldInsertedInList ;
    ] ;
    listeInstructions += !instruction ;
    if hasSemantics then
      @typeExpressionList expressionList [listWithValue ![@typeVarInExpression new !automaticVar_inE]] ;
      expressionList += ![@typeVarInExpression new !automaticVar_right] ;
      instruction := [@C_assignmentInstruction new
        !automaticVar_e
        ![@typeConstructorExpression new
          ![returnedEntityName string]
          !"new"
          !expressionList
        ]
      ] ;
      listeInstructions += !instruction ;
    end if ;
    @typeExpressionList effectiveArguments [emptyList] ;
    if hasSemantics then 
      effectiveArguments += ![@typeVarInExpression new ! automaticVar_e] ;
    end if ;
    instruction := [@typeInstructionAppelNonTerminal new
      !leftNonTerminalName
      !effectiveArguments
      ![@lstring new !"" !here] #  mAltName
      !var_e
      !returnedEntityName
      !false # mReturnedEntityShouldInsertedInList ;
    ] ;
    listeInstructions += !instruction ;
  elsif [operatorAttributes string] == "simple postfix" then  #--------------------------------------
    if hasSemantics then 
      listeTypeEtNomsArguments +=
        !baseEntityType
        ![@formalArgumentPassingMode argumentConstantIn]
        !automaticVar_inE
        !true
      ;
    end if ;
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__postfix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    if hasSemantics then
      instruction := [@C_assignmentInstruction new
        !automaticVar_e
        ![@typeConstructorExpression new
          ![returnedEntityName string]
          !"new"
          ![@typeExpressionList listWithValue ![@typeVarInExpression new !automaticVar_inE]]
        ]
      ] ;
      listeInstructions += !instruction ;
    end if ;
  elsif [operatorAttributes string] == "multiple postfix" then  #--------------------------------------
    if hasSemantics then 
      listeTypeEtNomsArguments +=
        !baseEntityType
        ![@formalArgumentPassingMode argumentConstantIn]
        !automaticVar_inE
        !true
      ;
    end if ;
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__postfix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    if hasSemantics then
      instruction := [@C_assignmentInstruction new
        !automaticVar_e
        ![@typeConstructorExpression new
          ![returnedEntityName string]
          !"new"
          ![@typeExpressionList listWithValue ![@typeVarInExpression new !automaticVar_inE]]
        ]
      ] ;
      listeInstructions += !instruction ;
      instruction := [@typeInstructionAppelNonTerminal new
       !leftNonTerminalName
       ![@typeExpressionList listWithValue ![@typeVarInExpression new !automaticVar_e]]
       ![@lstring new !"" !here] #  mAltName
       !var_e
       !returnedEntityName
       !false # mReturnedEntityShouldInsertedInList ;
      ] ;
      listeInstructions += !instruction ;
    else
      instruction := [@typeInstructionAppelNonTerminal new
        !leftNonTerminalName
        ![@typeExpressionList emptyList]
        ![@lstring new !"" !here] #  mAltName
        !var_e
        !returnedEntityName
        !false # mReturnedEntityShouldInsertedInList ;
      ] ;
      listeInstructions += !instruction ;
    end if ;
  else
    error operatorAttributes: "Valid operator attributes are:\n"
      "  - \"multiple prefix\" ;\n"
      "  - \"simple prefix\" ;\n"
      "  - \"multiple postfix\" ;\n"
      "  - \"simple postfix\" ;\n"
      "  - \"left infix\" ;\n"
      "  - \"right infix\" ;\n"
      "  - \"infix\"."
    -> leftNonTerminalName
    ;
  end if ;
#---
  @typeAltProductionsMap altProductionsMap [emptyMap] ;
  @entityPropertyMap allPropertiesMap [emptyMap] ;
  @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
  [!?altProductionsMap insertKey
    ![@lstring new !"" !here] # Alt Name
    !listeTypeEtNomsArguments
    !listeInstructions
    !syntaxSignature
    !here
    ![baseEntityName string]
    ![var_e string]
    !allPropertiesMap
  ] ;
#--- Generate production
  @typeEntityToGenerate ea := [@typeProductionAengendrer new
    !leftNonTerminalName
    !altProductionsMap
    !""
    !inLexiqueClassName
    !false
  ] ;
  listeEntitesAengendrer += !ea ;
#--- Generate list for grammar component
  ioProductionRulesListForGrammar +=
   !leftNonTerminalName
   !0 # Rule Index
   !syntaxSignature
  ;
label importSyntax
  ?!@M_nonTerminalSymbolsForGrammar unused ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
:
  $operator$ ;
  @lstring operatorAttributes ;
  $literal_string$ ? operatorAttributes ;
  @lstring terminalSymbolName ;
  $terminal$ ? terminalSymbolName ;
  @lstring nonterminalBaseName ;
  $non_terminal_symbol$ ? nonterminalBaseName ;
  @luint operatorPriority ;
  $unsigned_literal_integer$ ? operatorPriority ;
  @lstring returnedEntityName ;
  select
    returnedEntityName := [@lstring new !"" !here] ;
  or
    $->$ ;
    $type_name$ ? returnedEntityName ;
  end select ;
  $;$ ;
#--- Operator call
  @L_ruleSyntaxSignature syntaxSignature [emptyList] ;

  @AC_instruction_ForGrammar instruction := [@T_terminalInstruction_forGrammarComponent new
    ![terminalSymbolName location]
    !terminalSymbolName
    !0 # terminalSymbolIndex
  ] ;
  syntaxSignature += ! instruction ;
#------------------------------------------ Rule <Expression__prefix__i>
  @lstring leftNonTerminalName ;
  if [operatorAttributes string] == "multiple prefix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__prefix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@T_nonterminalInstruction_forGrammarComponent new
      ![calledRuleName location]
      !calledRuleName
      !0 # nonterminalSymbolIndex
    ] ;
    syntaxSignature += ! instruction ;
  elsif [operatorAttributes string] == "simple prefix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__prefix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] + 1 string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@T_nonterminalInstruction_forGrammarComponent new
      ![calledRuleName location]
      !calledRuleName
      !0 # nonterminalSymbolIndex
    ] ;
    syntaxSignature += ! instruction ;
  elsif [operatorAttributes string] == "infix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__infix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] + 1 string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@T_nonterminalInstruction_forGrammarComponent new
      ![calledRuleName location]
      !calledRuleName
      !0 # nonterminalSymbolIndex
    ] ;
    syntaxSignature += ! instruction ;
  elsif [operatorAttributes string] == "right infix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__infix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@T_nonterminalInstruction_forGrammarComponent new
      ![calledRuleName location]
      !calledRuleName
      !0 # nonterminalSymbolIndex
    ] ;
    syntaxSignature += ! instruction ;
  elsif [operatorAttributes string] == "left infix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__infix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    @lstring calledRuleName [new
      ![nonterminalBaseName string] . "__" . [[operatorPriority uint] + 1 string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@T_nonterminalInstruction_forGrammarComponent new
      ![calledRuleName location]
      !calledRuleName
      !0 # nonterminalSymbolIndex
    ] ;
    syntaxSignature += ! instruction ;
    instruction := [@T_nonterminalInstruction_forGrammarComponent new
      ![leftNonTerminalName location]
      !leftNonTerminalName
      !0 # nonterminalSymbolIndex
    ] ;
    syntaxSignature += ! instruction ;
  elsif [operatorAttributes string] == "simple postfix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__postfix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
  elsif [operatorAttributes string] == "multiple postfix" then
    leftNonTerminalName := [@lstring new
      ![nonterminalBaseName string] . "__postfix__" . [[operatorPriority uint] string]
      ![nonterminalBaseName location]
    ] ;
    instruction := [@T_nonterminalInstruction_forGrammarComponent new
      ![leftNonTerminalName location]
      !leftNonTerminalName
      !0 # nonterminalSymbolIndex
    ] ;
    syntaxSignature += ! instruction ;
  else
    error operatorAttributes: "Valid operator attributes are:\n"
      "  - \"multiple prefix\" ;\n"
      "  - \"simple prefix\" ;\n"
      "  - \"multiple postfix\" ;\n"
      "  - \"simple postfix\" ;\n"
      "  - \"left infix\" ;\n"
      "  - \"right infix\" ;\n"
      "  - \"infix\"."
    -> leftNonTerminalName
    ;
  end if ;
  ioProductionRulesListForGrammar +=
    !leftNonTerminalName
    !0 # leftNonterminalSymbolIndex
    !syntaxSignature
  ;
end rule ;

#------------------------------------------------------------------------------*
#     N O N T E R M I N A L    D E C L A R A T I O N                           *
#------------------------------------------------------------------------------*

rule <syntax_declaration>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?!@M_semanticsEntitiesForUse ioEntitiesMap
  ??@M_optionComponents unused inOptionsComponentsMapForUse
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ?!@M_terminalSymbolsMapForUse unused tableTerminaux
  ?!@M_nonTerminalSymbolsForGrammar ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
  ?@lstring unused inSyntaxComponentName
  ?@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents unused inTreewalkingComponentMap
  ?!@semanticContext unused ioSemanticContext
:
  $nonterminal$ ;
  @lstring ruleName ;
  $non_terminal_symbol$ ? ruleName ;
  select
    @typeVariablesMap tableArgumentsMethode [emptyMap] ;
    @typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments [emptyList] ;
    @luint levelCount ;
    $unsigned_literal_integer$ ? levelCount ;
    if [levelCount uint] == 0 then
      error levelCount:"the level count should be > 0" ;
    end if ;
    @lstring returnedEntity ;
    select
      returnedEntity := [@lstring new !"" !here] ;
    or
      $->$ ;
      $type_name$ ? returnedEntity ;
      [inAllMetamodelClassMap searchKey !returnedEntity ?8*] ;
    end select ;
    @uint i := 1 ;
    loop [levelCount uint] :
      implicitDeclaration
        !ruleName
        !i
        !returnedEntity
        !inLexiqueClassName
        !?ioNonTerminalSymbolMapForSyntax
        !?ioNonTerminalSymbolsMap
        !?listeEntitesAengendrer
        !?ioProductionRulesListForGrammar
      ;
      i ++ ;
    while i <= [levelCount uint] do
    end loop ;
    #--- Nonterminal <Expression__n+1>
      @L_signature signatureForGrammar [emptyList] ;
      @L_EXsignature listeDeTypesFormels [emptyList] ;
      @M_nonterminalSymbolAlts parametersMap [emptyMap] ;
      @M_nonterminalSymbolAltsForGrammar parametersMapForGrammar [emptyMap] ;
      @lstring emptyId := [@lstring new !"" !here] ;
      [!?parametersMap insertKey !emptyId !listeDeTypesFormels !returnedEntity] ;
      [!?parametersMapForGrammar insertKey
        !emptyId
        !signatureForGrammar
        !returnedEntity
      ] ;
      @lstring actualRuleName [new
        ![ruleName string] . "__" . [[levelCount uint] + 1 string]
        ![ruleName location]
      ] ;
      [!?ioNonTerminalSymbolsMap insertKey !actualRuleName !parametersMapForGrammar] ;
      [!?ioNonTerminalSymbolMapForSyntax insertKey !actualRuleName !parametersMap] ;
      @typeEntityToGenerate ea := [@typeNonterminalToGenerate new !actualRuleName !parametersMap !inLexiqueClassName] ;
      listeEntitesAengendrer += !ea ;
  or
    @L_EXsignature listeDeTypesFormels ;
    @typeVariablesMap tableArgumentsMethode [emptyMap] ;
    @typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments ;
    @L_signature signatureForGrammar ;
    @M_nonterminalSymbolAltsForGrammar parametersMapForGrammar [emptyMap] ;
    @M_nonterminalSymbolAlts parametersMap [emptyMap] ;
    <formal_arguments_list>
      !ioEntitiesMap
      ?listeDeTypesFormels 
      !?tableArgumentsMethode
      ?listeTypeEtNomsArguments
      !?tableEnAvant
      ?signatureForGrammar
    ;
    @lstring returnedEntity ;
    @lstring mdaResultVariableName ;
    select
      returnedEntity := [@lstring new !"" !here] ;
      mdaResultVariableName := [@lstring new !"" !here] ;
    or
      $->$ ;
      $type_name$ ? returnedEntity ;
      [inAllMetamodelClassMap searchKey !returnedEntity ?8*] ;
      select
        mdaResultVariableName := [@lstring new !"" !here] ; # No variable
      or
        $identifier$ ? mdaResultVariableName ;
      end select ;
    end select ;
    @lstring emptyId := [@lstring new !"" !here] ;
    [!?parametersMap insertKey !emptyId !listeDeTypesFormels !returnedEntity] ;
    [!?parametersMapForGrammar insertKey
      !emptyId
      !signatureForGrammar
      !returnedEntity
    ] ;
    repeat
    while
      $label$ ;
      select
        $parse$ ;
        @L_EXsignature listeDeTypesFormels [emptyList] ;
        @L_signature signatureForGrammarComponent [emptyList] ;
        @lstring altName [new !"parse" !here] ;
        [!?parametersMap insertKey !altName !listeDeTypesFormels ![@lstring new !"" !here]] ;
        [!?parametersMapForGrammar insertKey
          !altName
          !signatureForGrammarComponent
          ![@lstring new !"" !here]
        ] ;
      or
        @lstring altName ;
        $identifier$ ? altName ;
        @L_EXsignature listeDeTypesFormels ;
        @typeVariablesMap tableArgumentsMethode [emptyMap] ;
        @typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments ;
        @L_signature signatureForGrammarComponent ;
        <formal_arguments_list>
          !ioEntitiesMap
          ?listeDeTypesFormels 
          !?tableArgumentsMethode
          ?listeTypeEtNomsArguments
          !?tableEnAvant
          ?signatureForGrammarComponent
        ;
        @lstring returnedEntity ;
        select
          returnedEntity := [@lstring new !"" !here] ;
        or
          $->$ ;
          $type_name$ ? returnedEntity ;
          @AC_semanticsEntity e ;
          [ioEntitiesMap searchKey !returnedEntity ?e] ;
          @AC_galgasType type :=
            [(cast e if >= @typeEntiteType else error returnedEntity) aDefType] ;
          @typeGalgas_singleReferenceEntity sre :=
            (cast type if >= @typeGalgas_singleReferenceEntity else error returnedEntity) ;
        end select ;
        [!?parametersMap insertKey !altName !listeDeTypesFormels !returnedEntity] ;
        [!?parametersMapForGrammar insertKey
          !altName
          !signatureForGrammarComponent
          !returnedEntity
        ] ;
      end select ;
    end repeat ;
    [!?ioNonTerminalSymbolsMap insertKey !ruleName !parametersMapForGrammar] ;
    [!?ioNonTerminalSymbolMapForSyntax insertKey !ruleName !parametersMap] ;
    @typeEntityToGenerate ea := [@typeNonterminalToGenerate new !ruleName !parametersMap !inLexiqueClassName] ;
    listeEntitesAengendrer += !ea ;
  end select ;
  $;$ ;
label importSyntax
  ?!@M_nonTerminalSymbolsForGrammar ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
:
  $nonterminal$ ;
  @lstring nonterminalSymbolName ;
  $non_terminal_symbol$ ? nonterminalSymbolName ;
  select
    @luint levelCount ;
    $unsigned_literal_integer$ ? levelCount ;
    @lstring returnedEntity ;
    select
      returnedEntity := [@lstring new !"" !here] ;
    or
      $->$ ;
      $type_name$ ? returnedEntity ;
    end select ;
    @uint i := 1 ;
    loop [levelCount uint] :
      implicitDeclarationImportSyntax
        !nonterminalSymbolName
        !i
        !returnedEntity
        !?ioNonTerminalSymbolsMap
        !?ioProductionRulesListForGrammar
      ;
      i ++ ;
    while i <= [levelCount uint] do
    end loop ;
   #--- Nonterminal <Expression__i>
    @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMap [emptyMap] ;
    [!?nonterminalSymbolParametersMap insertKey
      ![@lstring new !"" !here] # Alt Name
      ![@L_signature emptyList]
      !returnedEntity
    ] ;
    @lstring actualRuleName [new
      ![nonterminalSymbolName string] . "__" . [[levelCount uint] + 1 string]
      ![nonterminalSymbolName location]
    ] ;
    [!?ioNonTerminalSymbolsMap insertKey !actualRuleName !nonterminalSymbolParametersMap] ;
  or
    @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMap [emptyMap] ;
    @L_signature signature ;
    <formal_arguments_list> importGrammarForSemantics ?signature ;
    @lstring returnedEntity ;
    select
      returnedEntity := [@lstring new !"" !here] ;
    or
      $->$ ;
      $type_name$ ? returnedEntity ;
      select
      or
        $identifier$ ? * ;
      end select ;
    end select ;
    @lstring altName := [@lstring new !"" !here] ;
    [!?nonterminalSymbolParametersMap insertKey
      !altName
      !signature
      !returnedEntity
    ] ;
    repeat
    while
      $label$ ;
      select
        $parse$ ;
        @L_signature signature [emptyList] ;
        @lstring noReturnedEntity := [@lstring new !"" !here] ;
        [!?nonterminalSymbolParametersMap insertKey
          ![@lstring new !"parse" !here] # Label 'parse'
          !signature
          !noReturnedEntity
        ] ;
      or
        $identifier$ ?altName ;
        @L_signature signature ;
        <formal_arguments_list> importGrammarForSemantics ?signature ;
        @lstring returnedEntity ;
        select
          returnedEntity := [@lstring new !"" !here] ;
        or
          $->$ ;
          $type_name$ ? returnedEntity ;
        end select ;
        [!?nonterminalSymbolParametersMap insertKey
          !altName
          !signature
          !returnedEntity
        ] ;
      end select ;
    end repeat ;
    [!?ioNonTerminalSymbolsMap insertKey !nonterminalSymbolName !nonterminalSymbolParametersMap] ;
  end select ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#     P A R S I N G   P R O D U C T I O N   R U L E                            *
#------------------------------------------------------------------------------*

rule <syntax_declaration>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?!@M_semanticsEntitiesForUse ioEntitiesMap
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeTableEnAvant tableEnAvant
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@M_nonTerminalSymbolsForGrammar unused ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
  ?@lstring unused inSyntaxComponentName
  ?@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ?!@semanticContext ioSemanticContext
:
  $rule$ ;
  @lstring ruleName ;
  $non_terminal_symbol$ ? ruleName ;
  @L_EXsignature listeDeTypesFormels ;
  @typeVariablesMap tableArgumentsMethode [emptyMap] ;
  @typeListeTypesEtNomsArgMethode listeTypeEtNomsArguments ;
  @L_signature signatureForGrammar ;
  <formal_arguments_list>
    !ioEntitiesMap
    ?listeDeTypesFormels 
    !?tableArgumentsMethode
    ?listeTypeEtNomsArguments
    !?tableEnAvant
    ?signatureForGrammar
  ;
  @lstring returnedEntity ;
  @lstring mdaResultVariableName ;
  select
    returnedEntity := [@lstring new !"" !here] ;
    mdaResultVariableName := [@lstring new !"" !here] ;
  or
    $->$ ;
    $type_name$ ? returnedEntity ;
    [inAllMetamodelClassMap searchKey !returnedEntity ?8*] ;
    select
      mdaResultVariableName := [@lstring new !"" !here] ; # No variable
    or
      $identifier$ ? mdaResultVariableName ;
    end select ;
  end select ;
#--- Search non terminal symbol definition
  @M_nonterminalSymbolAlts nonterminalSymbolAltMap ;
  [ioNonTerminalSymbolMapForSyntax searchKey !ruleName ?nonterminalSymbolAltMap] ;
#--- Verifier la declaration de la rule et la compatibilite des arguments effectifs avec les arguments formels
  @typeAltProductionsMap altProductionsMap [emptyMap] ;
  @lstring altName := [@lstring new !"" !here] ;
#--- Parse label declared ? If Yes, check that called non terminals are also declared with 'parse' label
  @bool hasParseLabel := [nonterminalSymbolAltMap hasKey !"parse"] ;
  @bool checkNonTerminalsAreDeclaredWithParseLabel := hasParseLabel ;
#--- Parse tag ?
  @string productionTagName ;
  select
    productionTagName := "" ;
  or
    $tag$ ;
    @lstring tagName ;
    $literal_string$ ? tagName ;
    productionTagName := [tagName string] ;
  end select ;
  @location firstBranchErrorLocation := here ;
  $:$ ;
#--- Check rule header
  @L_EXsignature signaturePremiereBrancheFournieParPrototype ;
  @lstring formalReturnedEntity ;
  [nonterminalSymbolAltMap searchKey
    !altName
    ?signaturePremiereBrancheFournieParPrototype
    ?formalReturnedEntity
  ] ;
  verifierCompatibiliteSignatures
    !signaturePremiereBrancheFournieParPrototype
    !listeDeTypesFormels
    !firstBranchErrorLocation
  ;
  if ([formalReturnedEntity string] == "") & ([returnedEntity string] != "") then
    error returnedEntity: "the non terminal declaration does not name any returned entity" ;
  elsif [returnedEntity string] != [formalReturnedEntity string] then
    @typeSuperClassesMap superEntityMap ;
    [inAllMetamodelClassMap searchKey ! returnedEntity ?4* ?superEntityMap ?3*] ;
    if not [superEntityMap hasKey ![formalReturnedEntity string]] then
      # message "superEntityStringSet : " . [superEntityStringSet description] ;
      error returnedEntity: "the '@" . [formalReturnedEntity string] . "' entity or one of its inherited entities is expected here" ;
    end if ;
  end if ;
#--- Insert in variable map attributes for returned entity
  @typeInstructionList listeInstructions [emptyList] ;
  @entityPropertyMap allPropertiesMap [emptyMap] ;
  if [mdaResultVariableName string] != "" then
    @typeListeAttributsSemantiques propertyList ;
    @typeSuperClassesMap superEntityMap ;
    [inAllMetamodelClassMap searchKey
      !returnedEntity
      ?4*
      ?superEntityMap
      ?propertyList
      ?2*
    ] ;
    @AC_galgasType definitionType := [@typeGalgas_singleReferenceEntity new
      !returnedEntity
      !propertyList
      ![superEntityMap allKeys]
    ] ;
    @typeCplusPlusName nomCppVariable := [@typeAutomaticName new ![mdaResultVariableName location] ![mdaResultVariableName string]] ;
    [!?tableArgumentsMethode insertSingleEntityLocalVariable !mdaResultVariableName !definitionType !nomCppVariable] ;
    listeInstructions += ![@typeInstructionDeclarationVarLocale new !nomCppVariable !definitionType] ;
  elsif [returnedEntity string] != "" then
    [inAllMetamodelClassMap searchKey !returnedEntity ?allPropertiesMap ?7*] ;
    foreach allPropertiesMap (@lstring kKey @AC_galgasType kPropertyType) do
      cast kPropertyType :
      when >= @typeGalgas_singleReferenceEntity do
        @lstring nomVariable := [@lstring new ![kKey string] ![returnedEntity location]] ;
        @typeCplusPlusName nomCppVariable := [@typeAutomaticName new ![nomVariable location] ! [nomVariable string]] ;
        [!?tableArgumentsMethode insertSingleEntityLocalVariable !nomVariable !kPropertyType !nomCppVariable] ;
        @typeInstruction instruction := [@typeInstructionDeclarationVarLocale new !nomCppVariable !kPropertyType] ;
        listeInstructions += !instruction ;
      when >= @typeGalgas_multipleReferenceEntity e do
        @lstring nomVariable := [@lstring new ![kKey string] ![returnedEntity location]] ;
        @typeCplusPlusName nomCppVariable := [@typeAutomaticName new ![nomVariable location] ! [nomVariable string]] ;
        [!?tableArgumentsMethode insertListOfEntitiesLocalVariable !nomVariable !kPropertyType !nomCppVariable] ;
        @typeExpression sourceExpression := [@typeConstructorExpression new
          !"_list_" . [[e mEntityTypeName] string]
          !"emptyList"
          ![@typeExpressionList emptyList]
        ] ;
        @typeInstruction instruction := [@C_declarationInstructionWithAssignment new
          !kPropertyType
          !nomCppVariable
          !sourceExpression
        ] ;
        listeInstructions += !instruction ;
      else
        @lstring nomVariable := [@lstring new ![kKey string] ![returnedEntity location]] ;
        @typeCplusPlusName nomCppVariable := [@typeAutomaticName new ![nomVariable location] ! [nomVariable string]] ;
        [!?tableArgumentsMethode insertEntityAttributeLocalVariable !nomVariable !kPropertyType !nomCppVariable] ;
        @typeInstruction instruction := [@typeInstructionDeclarationVarLocale new !nomCppVariable !kPropertyType] ;
        listeInstructions += !instruction ;
      end cast ;
    end foreach ;
  end if ;
#--- Parse instructions list
  @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
  <syntax_instructions_list>
    !inLexiqueClassName
    !?ioNonTerminalSymbolMapForSyntax
    !checkNonTerminalsAreDeclaredWithParseLabel
    !ioEntitiesMap
    !?listeEntitesAengendrer
    !inOptionsComponentsMapForUse
    !?tableArgumentsMethode
    !?listeInstructions
    !?tableTerminaux
    !?syntaxSignature
    !inAllMetamodelClassMap
    !inTreewalkingComponentMap
    !false # inIsInvokedWithinParseLoopInstruction
    !ioSemanticContext
  ;
  [!?altProductionsMap insertKey
    !altName
    !listeTypeEtNomsArguments
    !listeInstructions
    !syntaxSignature
    !here
    ![returnedEntity string]
    ![mdaResultVariableName string]
    !allPropertiesMap
  ] ;
  repeat
  while
    $label$ ;
    $identifier$ ?altName ;
    tableArgumentsMethode := [@typeVariablesMap emptyMap] ;
    @L_signature signatureForGrammarComponent ;
    <formal_arguments_list>
      !ioEntitiesMap
      ?listeDeTypesFormels 
      !? tableArgumentsMethode
      ?listeTypeEtNomsArguments
      !?tableEnAvant
      ?signatureForGrammarComponent # unused
    ;
    @lstring returnedEntity ;
    select
      returnedEntity := [@lstring new !"" !here] ;
    or
      $->$ ;
      $type_name$ ? returnedEntity ;
      [inAllMetamodelClassMap searchKey !returnedEntity ?8*] ;
    end select ;
    @location errorLocation := here ;
    $:$ ;
    @L_EXsignature signatureFournieParPrototype ;
    @lstring returnedEntityFromPrototype ;
    [nonterminalSymbolAltMap searchKey !altName ?signatureFournieParPrototype ?returnedEntityFromPrototype] ;
    verifierCompatibiliteSignatures
      !signatureFournieParPrototype
      !listeDeTypesFormels
      !errorLocation
    ;
    @typeInstructionList branchInstructionList [emptyList] ;
    @L_ruleSyntaxSignature branchSyntaxSignature [emptyList] ;
    <syntax_instructions_list>
      !inLexiqueClassName
      !?ioNonTerminalSymbolMapForSyntax
      !false
      !ioEntitiesMap
      !?listeEntitesAengendrer
      !inOptionsComponentsMapForUse
      !? tableArgumentsMethode
      !?branchInstructionList
      !?tableTerminaux
      !?branchSyntaxSignature
      !inAllMetamodelClassMap
      !inTreewalkingComponentMap
      !false # inIsInvokedWithinParseLoopInstruction
      !ioSemanticContext
    ;
    [!?altProductionsMap insertKey
      !altName
      !listeTypeEtNomsArguments
      !branchInstructionList
      !branchSyntaxSignature
      !here
      ![returnedEntity string]
      ![mdaResultVariableName string]
      ![@entityPropertyMap emptyMap]
    ] ;
  end repeat ;
  $end$ ;
  $rule$ ;
  $;$ ;
#--- Check if all label rules have the same syntax signature
  checkLabelSignatures !?altProductionsMap ;
#--- Check that all label rules are implemented
  foreach nonterminalSymbolAltMap (@lstring nonTerminalAltName @L_EXsignature altSignature @lstring kReturnedEntity) do
    if [nonTerminalAltName string] != "parse" & not [altProductionsMap hasKey ![nonTerminalAltName string]] then
      error here : "the '" . [nonTerminalAltName string] . "' label is not implemented within the rule" ;
    end if ;
  end foreach ;
#--- Generate production
  @typeEntityToGenerate ea := [@typeProductionAengendrer new
    !ruleName
    !altProductionsMap
    !productionTagName
    !inLexiqueClassName
    !hasParseLabel
  ] ;
  listeEntitesAengendrer += !ea ;
#--- Generate list for grammar component
  @uint ruleIndex := 0 ;
  ioProductionRulesListForGrammar +=
   !ruleName
   !ruleIndex
   !syntaxSignature
  ;
label importSyntax
  ?!@M_nonTerminalSymbolsForGrammar unused ioNonTerminalSymbolsMap
  ?!@L_productionRules_ForGrammarComponent ioProductionRulesListForGrammar
:
  $rule$ ;
  @lstring nonterminalSymbolName ;
  $non_terminal_symbol$ ? nonterminalSymbolName ;
  @L_signature signature ;
  <formal_arguments_list> importGrammarForSemantics ?signature ;
  @lstring returnedEntity ;
  select
    returnedEntity := [@lstring new !"" !here] ;
  or
    $->$ ;
    $type_name$ ? returnedEntity ;
    select
    or
      $identifier$ ? * ;
    end select ;
  end select ;
  select
  or
    $tag$ ;
    $literal_string$ ? * ;
  end select ;
  $:$ ;
  @L_ruleSyntaxSignature instructionsList [emptyList] ;
  <syntax_instructions_list> importSyntax !?instructionsList ;
  repeat
  while
    $label$ ;
    $identifier$ ? * ;
    <formal_arguments_list> parse ;
    select
    or
      $->$ ;
      $type_name$ ? * ;
    end select ;
    $:$ ;
    <syntax_instructions_list> parse ;
  end repeat ;
  @uint leftNonterminalSymbolIndex := 0 ;
  ioProductionRulesListForGrammar +=
    !nonterminalSymbolName
    !leftNonterminalSymbolIndex
    !instructionsList
  ;
  $end$ ;
  $rule$ ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#              LISTE DES INSTRUCTIONS SYNTAXIQUES D'UNE PRODUCTION             *
#------------------------------------------------------------------------------*

rule <syntax_instructions_list>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
:
  block ioVariablesMap.verifyVariableUsing () :
    <syntax_instructions_list_no_verif>
      !inLexiqueClassName
      !?ioNonTerminalSymbolMapForSyntax
      !inCheckNonTerminalsAreDeclaredWithParseLabel
      !ioEntitiesMap
      !?listeEntitesAengendrer
      !inOptionsComponentsMapForUse
      !?ioVariablesMap
      !?ioInstructionList
      !?tableTerminaux
      !?ioSyntaxSignature
      !inAllMetamodelClassMap
      !inTreewalkingComponentMap
      !inIsInvokedWithinParseLoopInstruction
      !inSemanticContext
    ;
    @location positionErreur := here ;
  end block (!positionErreur) ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  <syntax_instructions_list_no_verif> importSyntax !?ioInstructionList ;
end rule ;

#------------------------------------------------------------------------------*
#          Instruction de verification syntaxique $terminal$ ? ... ;           *
#------------------------------------------------------------------------------*

rule <syntax_instruction>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax unused ioNonTerminalSymbolMapForSyntax
  ?@bool unused inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse unused ioEntitiesMap
  ?!@typeEntitiesToGenerateList unused listeEntitesAengendrer
  ??@M_optionComponents unused inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap unused inAllMetamodelClassMap
  ??@M_treewalkingComponents unused inTreewalkingComponentMap
  ??@bool unused inIsInvokedWithinParseLoopInstruction
  ??@semanticContext unused inSemanticContext
:
  @lstring terminalSymbolName ;
  $terminal$ ? terminalSymbolName ;
  @typeListeAttributsSemantiques listeDesAttributsFormels ;
  [tableTerminaux searchKey !terminalSymbolName ?listeDesAttributsFormels] ;
  @L_assignedVariables listeTypeEffectifs ;
  @typeCplusPlusNameList allVariablesList ;
  <input_parameters_list>
    ?listeTypeEffectifs
    ?allVariablesList
    !listeDesAttributsFormels
    !?ioVariablesMap
  ;
  @typeInstruction instruction ;
  instruction := [@typeInstructionVerifSyntaxique new
    !terminalSymbolName
    !listeTypeEffectifs
    !inLexiqueClassName
  ] ;
  ioInstructionList += !instruction ;
  @uint terminalSymbolIndex := 0 ;
  @AC_instruction_ForGrammar i := [@T_terminalInstruction_forGrammarComponent new ![terminalSymbolName location] !terminalSymbolName !terminalSymbolIndex] ;
  ioSyntaxSignature += !i ;
  $;$ ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  @lstring terminalSymbolName ;
  $terminal$ ? terminalSymbolName ;
  <input_parameters_list> parse ;
  @AC_instruction_ForGrammar instruction := [@T_terminalInstruction_forGrammarComponent new
    ![terminalSymbolName location]
    !terminalSymbolName
    !0 # terminalSymbolIndex
  ] ;
  ioInstructionList += ! instruction ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#    N O N - T E R M I N A L    C A L L    I N S T R U C T I O N    <p> ...  ; *
#------------------------------------------------------------------------------*

rule <syntax_instruction>
  ??@string unused inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList unused listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse unused tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents unused inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
:
  @lstring nonterminalSymbolName ;
  $non_terminal_symbol$ ? nonterminalSymbolName ;
  @lstring altName ;
  select
    altName := [@lstring new !"" !here] ;
  or
    $parse$ ;
    altName := [@lstring new !"parse" !here] ;
  or
    $identifier$ ?altName ;
  end select ;
  @M_nonterminalSymbolAlts nonterminalSymbolAltMap ;
  [ioNonTerminalSymbolMapForSyntax searchKey !nonterminalSymbolName ?nonterminalSymbolAltMap] ;
  @L_EXsignature signatureMethode ;
  @lstring returnedEntityFromSignature ;
  [nonterminalSymbolAltMap searchKey !altName ?signatureMethode ?returnedEntityFromSignature] ;
#--- Check if parse label is declared ?
  if inCheckNonTerminalsAreDeclaredWithParseLabel & ([altName string] != "parse") then
    if not [nonterminalSymbolAltMap hasKey !"parse"] then
      error here : "As current rule has 'parse' label, every invoked non terminal symbol must be declared with 'parse' label" ;
    end if ;
  end if ;
  if inIsInvokedWithinParseLoopInstruction & ([altName string] != "parse") then
    if not [nonterminalSymbolAltMap hasKey !"parse"] then
      error here : "As this nonterminal is invoked within a 'parse loop ...' instruction, it must be declared with 'parse' label" ;
    end if ;
  end if ;
#--- Parse effective parameter list
  @typeExpressionList parametersExpressionList ;
  <actual_parameters_list>
    !signatureMethode
    ?parametersExpressionList
    !?ioVariablesMap
    !inOptionsComponentsMapForUse
    !inSemanticContext
    !ioEntitiesMap
    !?ioInstructionList
  ;
#--- Parse returned value
  @lstring returnedEntityVariableName ;
  @bool isMultipleEntity := false ;
  select
    returnedEntityVariableName := [@lstring new !"" !here] ;
  or
    $->$ ;
    $identifier$ ? returnedEntityVariableName ;
  or
    $+>$ ;
    $identifier$ ? returnedEntityVariableName ;
    isMultipleEntity := true ;
  end select ;
  @lstring variableEntityName [new !"" !here] ;
#--- Check returned value
  if ([returnedEntityFromSignature string] == "") & ([returnedEntityVariableName string] != "") then
    error returnedEntityVariableName: "the non terminal symbol is declared with no returned entity" ;
  elsif ([returnedEntityFromSignature string] != "") & ([returnedEntityVariableName string] == "") then
    error returnedEntityVariableName: "the non terminal symbol is declared to return an instance of '@" .  [returnedEntityFromSignature  string] . "' entity" ;
  elsif ([returnedEntityFromSignature string] != "") & ([returnedEntityVariableName string] != "") then
  #--- Check type consistency
    if isMultipleEntity then
      @AC_galgasType type ;
      [!?ioVariablesMap searchForReadWriteAccess !returnedEntityVariableName ?type ?*] ;
      variableEntityName := [(cast type if >= @typeGalgas_multipleReferenceEntity else error returnedEntityVariableName) mEntityTypeName] ;
      #extract type->@typeGalgas_multipleReferenceEntity (?variableEntityName ?2*) error returnedEntityVariableName : messageGalgasType ;
    else
      @AC_galgasType type ;
      [!?ioVariablesMap searchForWriteAccess !returnedEntityVariableName ?type ?*] ;
      variableEntityName :=
          [(cast type if >= @typeGalgas_singleReferenceEntity else error returnedEntityVariableName) mEntityTypeName] ;
    end if ;
   #--- The returnedEntityFromSignature entity should be a super class of variableEntityName
    @bool ok := [returnedEntityFromSignature string] == [variableEntityName string] ;
    if not ok then
      @lstring testedClass := returnedEntityFromSignature ;
      loop [inAllMetamodelClassMap count] :
      while (not ok) & ([testedClass length] > 0) do
        @lstring superEntity ;
        [inAllMetamodelClassMap searchKey !testedClass ?3* ?superEntity ?4*] ;
        testedClass := superEntity ;
        ok := [testedClass string] == [variableEntityName string] ;
      end loop ;
    end if ;
    if not ok then
      error returnedEntityVariableName : "the type of this variable is '%" . [variableEntityName string]
       . "' and is not a super class of '%" . [returnedEntityFromSignature string] . "'" ;
    end if ;
  end if ;
#--- Generate instruction
  @typeInstruction instruction ;
  instruction := [@typeInstructionAppelNonTerminal new
    !nonterminalSymbolName
    !parametersExpressionList
    !altName
    !returnedEntityVariableName
    !variableEntityName
    !isMultipleEntity
  ] ;
  ioInstructionList += !instruction ;
  @AC_instruction_ForGrammar i := [@T_nonterminalInstruction_forGrammarComponent new
    ![nonterminalSymbolName location]
    !nonterminalSymbolName
    !0
  ] ;
  ioSyntaxSignature += !i ;
  $;$ ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  @lstring nonterminalSymbolName ;
  $non_terminal_symbol$ ? nonterminalSymbolName ;
  select
  or
    $parse$ ;
  or
    $identifier$ ? * ;
  end select ;
  <actual_parameters_list> parse ;
  @AC_instruction_ForGrammar instruction := [@T_nonterminalInstruction_forGrammarComponent new
    ![nonterminalSymbolName location]
    !nonterminalSymbolName
    !0 # nonterminalSymbolIndex
  ] ;
  ioInstructionList += ! instruction ;
  select
  or
    $->$ ;
    $identifier$ ? * ;
  or
    $+>$ ;
    $identifier$ ? * ;
  end select ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#    S E L E C T    I N S T R U C T I O N                                      *
#------------------------------------------------------------------------------*

rule <syntax_instruction>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
:
  $select$ ;
  @location positionDebut := here ;
  @typeListeBranchesInstructions listeBranchesChoix [emptyList] ;
  @L_branchList_ForGrammarComponent selectList [emptyList] ;
  block ioVariablesMap.testBloc () :
    block ioVariablesMap.testPart () :
      @typeInstructionList firstBranchInstructionList [emptyList] ;
      @L_ruleSyntaxSignature firstBranchSyntaxSignature [emptyList] ;
      <syntax_instructions_list_no_verif>
        !inLexiqueClassName
        !?ioNonTerminalSymbolMapForSyntax
        !inCheckNonTerminalsAreDeclaredWithParseLabel
        !ioEntitiesMap
        !?listeEntitesAengendrer
        !inOptionsComponentsMapForUse
        !?ioVariablesMap
        !?firstBranchInstructionList
        !?tableTerminaux
        !?firstBranchSyntaxSignature
        !inAllMetamodelClassMap
        !inTreewalkingComponentMap
        !inIsInvokedWithinParseLoopInstruction
        !inSemanticContext
      ;
      listeBranchesChoix += !firstBranchInstructionList ;
      selectList += !firstBranchSyntaxSignature ;
    end block (!here) ;
    $or$ ;
    repeat
      block ioVariablesMap.testPart () :
        @typeInstructionList listeInstructionsBrancheChoix [emptyList] ;
        @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
        <syntax_instructions_list_no_verif>
          !inLexiqueClassName
          !?ioNonTerminalSymbolMapForSyntax
          !inCheckNonTerminalsAreDeclaredWithParseLabel
          !ioEntitiesMap
          !?listeEntitesAengendrer
          !inOptionsComponentsMapForUse
          !?ioVariablesMap
          !?listeInstructionsBrancheChoix
          !?tableTerminaux
          !?syntaxSignature
          !inAllMetamodelClassMap
          !inTreewalkingComponentMap
          !inIsInvokedWithinParseLoopInstruction
          !inSemanticContext
        ;
        listeBranchesChoix += !listeInstructionsBrancheChoix ;
        selectList += !syntaxSignature ;
      end block (!here) ;
    while
      $or$ ;
    end repeat ;
    $end$ ;
    $select$ ;
    $;$ ;
  end block () ;
#--- Engendrer l'instruction
  @typeInstruction instruction := [@C_select_instruction new !listeBranchesChoix !positionDebut] ;
  ioInstructionList += !instruction ;
  @AC_instruction_ForGrammar i ;
  @uint v := 0 ;
  i := [@T_selectInstruction_forGrammarComponent new !positionDebut !selectList !v] ;
  ioSyntaxSignature += !i ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  $select$ ;
  @location positionDebut := here ;
  @L_branchList_ForGrammarComponent selectList [emptyList] ;
  @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
  <syntax_instructions_list_no_verif> importSyntax !?syntaxSignature ;
  selectList += !syntaxSignature ;
  $or$ ;
  repeat
    @L_ruleSyntaxSignature syntaxSignature2 [emptyList] ;
    <syntax_instructions_list_no_verif> importSyntax !?syntaxSignature2 ;
    selectList += !syntaxSignature2 ;
  while
    $or$ ;
  end repeat ;
  $end$ ;
  $select$ ;
  $;$ ;
  @AC_instruction_ForGrammar i ;
  @uint v := 0 ;
  i := [@T_selectInstruction_forGrammarComponent new !positionDebut !selectList !v] ;
  ioInstructionList += !i ;
end rule ;

#------------------------------------------------------------------------------*
#    R E P E A T    I N S T R U C T I O N                                      *
#------------------------------------------------------------------------------*

rule <syntax_instruction>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
:
  $repeat$ ;
  @location positionDebut := here ;
  @typeListeBranchesInstructions listeBranchesRepeter [emptyList] ;
  @L_branchList_ForGrammarComponent whileList [emptyList] ;
  block ioVariablesMap.repeatBlock () :
    @typeInstructionList listeInstructionsPremiereBranche [emptyList] ;
    @L_ruleSyntaxSignature repeatBranchInstructionsList [emptyList] ;
    block ioVariablesMap.repeatPart () :
      <syntax_instructions_list_no_verif>
        !inLexiqueClassName
        !?ioNonTerminalSymbolMapForSyntax
        !inCheckNonTerminalsAreDeclaredWithParseLabel
        !ioEntitiesMap
        !?listeEntitesAengendrer
        !inOptionsComponentsMapForUse
        !?ioVariablesMap
        !?listeInstructionsPremiereBranche
        !?tableTerminaux
        !?repeatBranchInstructionsList
        !inAllMetamodelClassMap
        !inTreewalkingComponentMap
        !inIsInvokedWithinParseLoopInstruction
        !inSemanticContext
      ;
      listeBranchesRepeter += !listeInstructionsPremiereBranche ;
      whileList += !repeatBranchInstructionsList ;
      @location positionErreurPremiereBranche := here ;
    end block (!positionErreurPremiereBranche) ;
    $while$ ;
    repeat
      block ioVariablesMap.repeatPart () :
        @typeInstructionList listeInstructionsBrancheRepeter [emptyList];
        @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
        <syntax_instructions_list_no_verif>
          !inLexiqueClassName
          !?ioNonTerminalSymbolMapForSyntax
          !inCheckNonTerminalsAreDeclaredWithParseLabel
          !ioEntitiesMap
          !?listeEntitesAengendrer
          !inOptionsComponentsMapForUse
          !?ioVariablesMap
          !?listeInstructionsBrancheRepeter
          !?tableTerminaux
          !?syntaxSignature
          !inAllMetamodelClassMap
          !inTreewalkingComponentMap
          !inIsInvokedWithinParseLoopInstruction
          !inSemanticContext
        ;
        listeBranchesRepeter += !listeInstructionsBrancheRepeter ;
        whileList += !syntaxSignature ;
      end block (!here) ;
    while
      $while$ ;
    end repeat ;
    $end$ ;
    $repeat$ ;
  end block () ;
  $;$ ;
#--- Engendrer l'instruction
  @typeInstruction instruction := [@C_repeat_instruction new !listeBranchesRepeter !positionDebut] ;
  ioInstructionList += !instruction ;
  @AC_instruction_ForGrammar i ;
  @uint v := 0 ;
  i := [@T_repeatInstruction_forGrammarComponent new !positionDebut !whileList !v] ;
  ioSyntaxSignature += !i ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  $repeat$ ;
  @location positionDebut := here ;
  @L_branchList_ForGrammarComponent repeatList [emptyList] ;
  @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
  <syntax_instructions_list_no_verif> importSyntax !?syntaxSignature ;
  repeatList += !syntaxSignature ;
  $while$ ;
  repeat
    syntaxSignature := [@L_ruleSyntaxSignature emptyList] ;
    <syntax_instructions_list_no_verif> importSyntax !?syntaxSignature ;
    repeatList += !syntaxSignature ;
  while
    $while$ ;
  end repeat ;
  $end$ ;
  $repeat$ ;
  $;$ ;
  @AC_instruction_ForGrammar i ;
  @uint v := 0 ;
  i := [@T_repeatInstruction_forGrammarComponent new !positionDebut !repeatList !v] ;
  ioInstructionList += !i ;
end rule ;

#------------------------------------------------------------------------------*
#    P A R S E    D O ...    R E W I N D ...    I N S T R U C T I O N          *
#    P A R S E    W H E N   ...    E L S E  ...    I N S T R U C T I O N       *
#------------------------------------------------------------------------------*

rule <syntax_instruction>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
:
  $parse$ ;
  @typeInstruction instruction ;
  select
    $loop$ ;
  #--- Variant expression
    @typeExpression variantExpression ;
    @AC_galgasType variantResultType ;
    <expression>
      !ioEntitiesMap
      !inOptionsComponentsMapForUse
      !inSemanticContext
      !?ioVariablesMap
      ?variantExpression
      ?variantResultType
    ;
    @typeGalgas_uint ui := (cast variantResultType if >= @typeGalgas_uint else error here) ;
    $while$ ;
  #--- Conditionnal expression
    @typeExpression conditionalExpression ;
    @AC_galgasType resultType ;
    <expression>
      !ioEntitiesMap
      !inOptionsComponentsMapForUse
      !inSemanticContext
      !?ioVariablesMap
      ?conditionalExpression
      ?resultType
    ;
    @typeGalgas_bool b := (cast resultType if >= @typeGalgas_bool else error here) ;
    $do$ ;
  #--- Repeated instruction list
    @typeInstructionList instructionList [emptyList] ;
    @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
    block ioVariablesMap.repeatBlock () :
      block ioVariablesMap.repeatPart () :
        <syntax_instructions_list_no_verif>
          !inLexiqueClassName
          !?ioNonTerminalSymbolMapForSyntax
          !inCheckNonTerminalsAreDeclaredWithParseLabel
          !ioEntitiesMap
          !?listeEntitesAengendrer
          !inOptionsComponentsMapForUse
          !?ioVariablesMap
          !?instructionList
          !?tableTerminaux
          !?syntaxSignature
          !inAllMetamodelClassMap
          !inTreewalkingComponentMap
          !true # inIsInvokedWithinParseLoopInstruction
          !inSemanticContext
        ;
      end block (!here) ;
    end block () ;
    instruction := [@C_parse_loop_instruction new
      !here
      !variantExpression
      !conditionalExpression
      !instructionList
    ] ;
  or
    $do$ ;
    @L_parse_rewind_signature_list parse_rewind_signature_list [emptyList] ;
    @location instructionStartLocation := here ;
    @typeListeBranchesInstructions branchList [emptyList] ;
  #--- First branch
    @L_branchList_ForGrammarComponent whileList [emptyList] ;
    @typeInstructionList firstBranchInstructionsList [emptyList] ;
    @L_ruleSyntaxSignature firstBranchSyntaxSignature [emptyList] ;
    <syntax_instructions_list_no_verif>
      !inLexiqueClassName
      !?ioNonTerminalSymbolMapForSyntax
      !inCheckNonTerminalsAreDeclaredWithParseLabel
      !ioEntitiesMap
      !?listeEntitesAengendrer
      !inOptionsComponentsMapForUse
      !?ioVariablesMap
      !?firstBranchInstructionsList
      !?tableTerminaux
      !?firstBranchSyntaxSignature
      !inAllMetamodelClassMap
      !inTreewalkingComponentMap
      !inIsInvokedWithinParseLoopInstruction
      !inSemanticContext
    ;
    branchList += !firstBranchInstructionsList ;
    parse_rewind_signature_list += !firstBranchSyntaxSignature !instructionStartLocation ;
    foreach firstBranchSyntaxSignature (@AC_instruction_ForGrammar grammarInstruction) do
      ioSyntaxSignature += !grammarInstruction ;
    end foreach ;
  #--- One or more 'rewind' branches
    repeat
      $rewind$ ;
      @location branchStartLocation := here ;
      @typeInstructionList instructionsList [emptyList] ;
      @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
      <syntax_instructions_list_no_verif>
        !inLexiqueClassName
        !?ioNonTerminalSymbolMapForSyntax
        !inCheckNonTerminalsAreDeclaredWithParseLabel
        !ioEntitiesMap
        !?listeEntitesAengendrer
        !inOptionsComponentsMapForUse
        !?ioVariablesMap
        !?instructionsList
        !?tableTerminaux
        !?syntaxSignature
        !inAllMetamodelClassMap
        !inTreewalkingComponentMap
        !inIsInvokedWithinParseLoopInstruction
        !inSemanticContext
      ;
      branchList += !instructionsList ;
      parse_rewind_signature_list += !syntaxSignature !branchStartLocation ;
    while
    end repeat ;
    instruction := [@C_parse_rewind_instruction new !here !branchList] ;
  #--- Check all branches have the same syntax signature
    checkParseRewindSignatures !?parse_rewind_signature_list ;
  or
    @L_parse_rewind_signature_list parse_rewind_signature_list [emptyList] ;
  #--- Instruction parse when ... when ... else ... end parse ;
    @L_expression_instructionsList_list branchList [emptyList] ;
    block ioVariablesMap.testBloc () :
    #--- 'when' branches
      repeat
        block ioVariablesMap.testPart () :
          $when$ ;
          @typeExpression expression ;
          @AC_galgasType resultType ;
          <expression>
            !ioEntitiesMap
            !inOptionsComponentsMapForUse
            !inSemanticContext
            !?ioVariablesMap
            ?expression
            ?resultType
          ;
          $:$ ;
          @location branchStartLocation := here ;
          @typeInstructionList instructionsList [emptyList] ;
          @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
          <syntax_instructions_list_no_verif>
            !inLexiqueClassName
            !?ioNonTerminalSymbolMapForSyntax
            !inCheckNonTerminalsAreDeclaredWithParseLabel
            !ioEntitiesMap
            !?listeEntitesAengendrer
            !inOptionsComponentsMapForUse
            !?ioVariablesMap
            !?instructionsList
            !?tableTerminaux
            !?syntaxSignature
            !inAllMetamodelClassMap
            !inTreewalkingComponentMap
            !inIsInvokedWithinParseLoopInstruction
            !inSemanticContext
          ;
          branchList += !expression !instructionsList ;
          parse_rewind_signature_list += !syntaxSignature  !branchStartLocation ;
        end block (!here) ;
      while
      end repeat ;
      $else$ ;
      block ioVariablesMap.testPart () :
        @location branchStartLocation := here ;
        @typeInstructionList elseInstructionsList [emptyList] ;
        @L_ruleSyntaxSignature syntaxSignature [emptyList] ;
        <syntax_instructions_list_no_verif>
          !inLexiqueClassName
          !?ioNonTerminalSymbolMapForSyntax
          !inCheckNonTerminalsAreDeclaredWithParseLabel
          !ioEntitiesMap
          !?listeEntitesAengendrer
          !inOptionsComponentsMapForUse
          !?ioVariablesMap
          !?elseInstructionsList
          !?tableTerminaux
          !?syntaxSignature
          !inAllMetamodelClassMap
          !inTreewalkingComponentMap
          !inIsInvokedWithinParseLoopInstruction
          !inSemanticContext
        ;
        parse_rewind_signature_list += !syntaxSignature  !branchStartLocation ;
        foreach syntaxSignature (@AC_instruction_ForGrammar grammarInstruction) do
          ioSyntaxSignature += !grammarInstruction ;
        end foreach ;
      end block (!here) ;
    end block () ;
    instruction := [@C_parse_when_else_instruction new !branchList !elseInstructionsList] ;
  #--- Check all branches have the same syntax signature
    checkParseRewindSignatures !?parse_rewind_signature_list ;
  end select ;
  $end$ ;
  $parse$ ;
  $;$ ;
#--- Generate instruction
  ioInstructionList += !instruction ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  $parse$ ;
  select
    $loop$ ;
    <expression> parse ;
    $while$ ;
    <expression> parse ;
    $do$ ;
    <syntax_instructions_list_no_verif> importSyntax !?ioInstructionList ;
  or
    $do$ ;
    <syntax_instructions_list_no_verif> importSyntax !?ioInstructionList ;
    repeat
      $rewind$ ;
      <syntax_instructions_list_no_verif> parse ;
    while
    end repeat ;
  or
    repeat
      $when$ ;
      <expression> parse ;
      $:$ ;
      <syntax_instructions_list_no_verif> parse ;
    while
    end repeat ;
    $else$ ;
    <syntax_instructions_list_no_verif> importSyntax !?ioInstructionList ;
  end select ;
  $end$ ;
  $parse$ ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*

rule <syntax_instructions_list_no_verif>
  ??@string inLexiqueClassName
  ?!@M_nonTerminalSymbolForSyntax ioNonTerminalSymbolMapForSyntax
  ?@bool inCheckNonTerminalsAreDeclaredWithParseLabel
  ??@M_semanticsEntitiesForUse ioEntitiesMap
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ??@M_optionComponents inOptionsComponentsMapForUse
  ?!@typeVariablesMap ioVariablesMap
  ?!@typeInstructionList ioInstructionList
  ?!@M_terminalSymbolsMapForUse tableTerminaux
  ?!@L_ruleSyntaxSignature ioSyntaxSignature
  ??@entityToImplementMap inAllMetamodelClassMap
  ??@M_treewalkingComponents inTreewalkingComponentMap
  ??@bool inIsInvokedWithinParseLoopInstruction
  ??@semanticContext inSemanticContext
:
  @entityPropertyMap propertyMap [emptyMap] ;
  @typeTableEnAvant tableEnAvant [emptyMap] ;
  @treewalkingRoutineHeaderMap treewalkingRoutineHeaderMap [emptyMap] ;
  repeat
  while
    <syntax_instruction>
      !inLexiqueClassName
      !?ioNonTerminalSymbolMapForSyntax
      !inCheckNonTerminalsAreDeclaredWithParseLabel
      !ioEntitiesMap
      !?listeEntitesAengendrer
      !inOptionsComponentsMapForUse
      !?ioVariablesMap
      !?ioInstructionList
      !?tableTerminaux
      !?ioSyntaxSignature
      !inAllMetamodelClassMap
      !inTreewalkingComponentMap
      !inIsInvokedWithinParseLoopInstruction
      !inSemanticContext
    ;
  while
    <semantic_instruction>
      !treewalkingRoutineHeaderMap
      !tableEnAvant
      !ioEntitiesMap
      !inOptionsComponentsMapForUse
      !?ioVariablesMap
      !?ioInstructionList
      !propertyMap
      !inAllMetamodelClassMap
      !inTreewalkingComponentMap
      !inSemanticContext
    ;
  end repeat ;
label importSyntax
  ?!@L_ruleSyntaxSignature ioInstructionList
:
  repeat
  while
    <syntax_instruction> importSyntax !?ioInstructionList ;
  while
    <semantic_instruction> parse ;
  end repeat ;
end rule ;

#------------------------------------------------------------------------------*

end syntax ;
