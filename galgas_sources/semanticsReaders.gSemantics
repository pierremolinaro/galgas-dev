#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2009, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsReaders :
  import "semanticsTypes.gSemantics" ;
  import semantics semanticsTypes in "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterBaseReaderWithoutArgumentWithConversion
  ?!@readerMap ioReaderMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inReaderName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
  ??@string inConversionString
:
  @unifiedTypeMapIndex returnedTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inReturnedTypeName !here] !?ioUnifiedTypeMap ?returnedTypeIndex] ;
  [!?ioReaderMap insertKey
    ![@lstring new !inReaderName !here]
    ![@unifiedTypeMapIndexList emptyList]
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
    ![@readerQualifier isBasic]
    !inConversionString
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterBaseReaderWithoutArgument
  ?!@readerMap ioReaderMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inReaderName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  enterBaseReaderWithoutArgumentWithConversion
    !?ioReaderMap
    !?ioUnifiedTypeMap
    !inReaderName
    !inReturnedTypeName
    !inHasLexiqueAndLocationArguments
    !""
  ;
end routine ;

#---------------------------------------------------------------------------*

routine enterInheritedReaderWithoutArgument
  ?!@readerMap ioReaderMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inReaderName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapIndex returnedTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inReturnedTypeName !here] !?ioUnifiedTypeMap ?returnedTypeIndex] ;
  [!?ioReaderMap insertKey
    ![@lstring new !inReaderName !here]
    ![@unifiedTypeMapIndexList emptyList]
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
    ![@readerQualifier isInherited]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterBaseReaderWithArgument
  ?!@readerMap ioReaderMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inReaderName
  ??@string inArgument1TypeName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapIndex returnedTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inReturnedTypeName !here] !?ioUnifiedTypeMap ?returnedTypeIndex] ;
  @unifiedTypeMapIndexList argList [emptyList] ;
  @unifiedTypeMapIndex t ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inArgument1TypeName !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ;
  [!?ioReaderMap insertKey
    ![@lstring new !inReaderName !here]
    !argList
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
    ![@readerQualifier isBasic]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterBaseReaderWith2Arguments
  ?!@readerMap ioReaderMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inReaderName
  ??@string inArgument1TypeName
  ??@string inArgument2TypeName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapIndex returnedTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inReturnedTypeName !here] !?ioUnifiedTypeMap ?returnedTypeIndex] ;
  @unifiedTypeMapIndexList argList [emptyList] ;
  @unifiedTypeMapIndex t ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inArgument1TypeName !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inArgument2TypeName !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ;
  [!?ioReaderMap insertKey
    ![@lstring new !inReaderName !here]
    !argList
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
    ![@readerQualifier isBasic]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterBaseReaderWith3Arguments
  ?!@readerMap ioReaderMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inReaderName
  ??@string inArgument1TypeName
  ??@string inArgument2TypeName
  ??@string inArgument3TypeName
  ??@string inReturnedTypeName
  ??@bool inHasLexiqueAndLocationArguments
:
  @unifiedTypeMapIndex returnedTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inReturnedTypeName !here] !?ioUnifiedTypeMap ?returnedTypeIndex] ;
  @unifiedTypeMapIndexList argList [emptyList] ;
  @unifiedTypeMapIndex t ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inArgument1TypeName !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inArgument2TypeName !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inArgument3TypeName !here] !?ioUnifiedTypeMap ?t] ;
  argList += !t ;
  [!?ioReaderMap insertKey
    ![@lstring new !inReaderName !here]
    !argList
    !inHasLexiqueAndLocationArguments
    !returnedTypeIndex
    ![@readerQualifier isBasic]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine commonReaderMapForAllTypes
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  outMap := [@readerMap emptyMap] ;
  enterInheritedReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"description" !"string" !false ;
  enterInheritedReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"object" !"object" !false ;
  enterInheritedReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"dynamicType" !"type" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_location
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"locationIndex" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"line" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"column" !"uint" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine enterReaderFor_string_lstring_types
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ?!@readerMap ioMap
:
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"doesEnvironmentVariableExist" !"bool" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"length" !"uint" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"identifierRepresentation" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"HTMLRepresentation" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"utf8Representation" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"utf32Representation" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"stringByTrimmingWhiteSpaces" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"md5" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"decimalUnsignedNumber" !"uint" !true ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"isDecimalUnsignedNumber" !"bool" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"capacity" !"uint" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"fileExists" !"bool" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"directoryExists" !"bool" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"pathExtension" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"nativePathWithUnixPath" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"unixPathWithNativePath" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"lastPathComponent" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"stringByDeletingPathExtension" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"stringByCapitalizingFirstCharacter" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"firstCharacterOrNul" !"char" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"stringByDeletingLastPathComponent" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"stringByStandardizingPath" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"lowercaseString" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"uppercaseString" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"reversedString" !"string" !false ;
  enterBaseReaderWithoutArgument !?ioMap !?ioUnifiedTypeMap !"system" !"sint" !false ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"characterAtIndex" !"uint" !"char" !true ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"stringByRemovingCharacterAtIndex" !"uint" !"string" !true ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"rightSubString" !"uint" !"string" !false ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"leftSubString" !"uint" !"string" !false ;
  enterBaseReaderWith2Arguments !?ioMap !?ioUnifiedTypeMap !"subString" !"uint" !"uint" !"string" !false ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"absolutePathFromPath" !"string" !"string" !false ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"relativePathFromPath" !"string" !"string" !false ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"componentsSeparatedByString" !"string" !"stringlist" !false ;
  enterBaseReaderWith2Arguments !?ioMap !?ioUnifiedTypeMap !"stringByLeftPadding" !"uint" !"char" !"string" !false ;
  enterBaseReaderWith2Arguments !?ioMap !?ioUnifiedTypeMap !"stringByRightPadding" !"uint" !"char" !"string" !false ;
  enterBaseReaderWith2Arguments !?ioMap !?ioUnifiedTypeMap !"stringByLeftAndRightPadding" !"uint" !"char" !"string" !false ;
  enterBaseReaderWith2Arguments !?ioMap !?ioUnifiedTypeMap !"stringByReplacingStringByString" !"string" !"string" !"string" !true ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"regularFiles" !"bool" !"stringlist" !false ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"hiddenFiles" !"bool" !"stringlist" !false ;
  enterBaseReaderWithArgument !?ioMap !?ioUnifiedTypeMap !"directories"  !"bool" !"stringlist" !false ;
  enterBaseReaderWith2Arguments !?ioMap !?ioUnifiedTypeMap !"directoriesWithExtensions" !"bool" !"stringlist" !"stringlist" !false ;
  enterBaseReaderWith2Arguments !?ioMap !?ioUnifiedTypeMap !"regularFilesWithExtensions" !"bool" !"stringlist" !"stringlist" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_string
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterReaderFor_string_lstring_types !?ioUnifiedTypeMap !?outMap ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_char
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"string" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"utf32CharConstantRepresentation" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isalnum" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isalpha" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"iscntrl" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isdigit" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"islower" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isupper" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isxdigit" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodeLetter" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodeMark" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodeNumber" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodeSeparator" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodeCommand" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodePunctuation" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodeSymbol" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"unicodeName" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"unicodeToLower" !"char" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"unicodeToUpper" !"char" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_bool
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"cString" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"ocString" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint" !"sint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint64" !"uint64" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint64" !"sint64" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_uint
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"double" !"double" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint" !"sint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint64" !"sint64" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint64" !"uint64" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"lsbIndex" !"uint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"significantBitCount" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"string" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"hexString" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"xString" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isUnicodeValueAssigned" !"bool" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_sint
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"double" !"double" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint64" !"uint64" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint64" !"sint64" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint" !"uint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"string" !"string" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_uint64
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"double" !"double" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint" !"sint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint64" !"sint64" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint" !"uint" !true ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"uintSlice" !"uint" !"uint" !"uint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"string" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"hexString" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"xString" !"string" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_sint64
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"double" !"double" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint64" !"uint64" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint" !"sint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint" !"uint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"string" !"string" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_double
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"string" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint" !"uint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint" !"sint" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint64" !"uint64" !true ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint64" !"sint64" !true ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_lstring
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  @readerMap commonReaders [emptyMap] ;
  enterReaderFor_string_lstring_types !?ioUnifiedTypeMap !?commonReaders ;
  foreach commonReaders do
    [!?outMap insertKey
      !key
      !mArgumentTypeList
      !mHasLexiqueArgument
      !mReturnedType
      !mQualifier
      !"string"
    ] ;
  end foreach ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"string" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false !"location" ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_lchar
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"char" !"char" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false !"location" ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_lbool
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"bool" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_luint
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"string" !"string" !false  !"uint";
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false !"location" ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_lsint
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint" !"sint" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"string" !"string" !false  !"sint";
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false !"location" ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_luint64
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"uint64" !"uint64" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"string" !"string" !false  !"uint64";
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false !"location" ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_lsint64
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"sint64" !"sint64" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"string" !"string" !false !"sint64" ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false !"location" ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_ldouble
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"double" !"double" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"string" !"string" !false !"double" ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"location" !"location" !false ;
  enterBaseReaderWithoutArgumentWithConversion !?outMap !?ioUnifiedTypeMap !"locationString" !"string" !false !"location" ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_stringset
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"hasKey" !"string" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"count" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"stringList" !"stringlist" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_binaryset
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isFull" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isEmpty" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"significantVariableCount" !"uint" !false ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"ITE" !"binaryset" !"binaryset" !"binaryset" !true ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"forAllOnBitIndex" !"uint" !"binaryset" !true ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"forAllOnBitIndexAndBeyond" !"uint" !"binaryset" !true ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"existOnBitIndex" !"uint" !"binaryset" !true ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"existOnBitIndexAndBeyond" !"uint" !"binaryset" !true ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"valueCount" !"uint" !"uint64" !true  ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"compressedValueCount" !"uint64" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"uint64ValueList" !"uint" !"uint64list" !true ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"stringValueList" !"uint" !"stringlist" !true ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"stringValueListWithNameList" !"uint" !"stringlist" !"stringlist" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"predicateStringValue" !"string" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"compressedStringValueList" !"uint" !"stringlist" !true ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"swap21" !"uint" !"uint" !"binaryset" !false ;
  enterBaseReaderWith3Arguments !?outMap !?ioUnifiedTypeMap !"swap132" !"uint" !"uint" !"uint" !"binaryset" !false ;
  enterBaseReaderWith3Arguments !?outMap !?ioUnifiedTypeMap !"swap213" !"uint" !"uint" !"uint" !"binaryset" !false ;
  enterBaseReaderWith3Arguments !?outMap !?ioUnifiedTypeMap !"swap231" !"uint" !"uint" !"uint" !"binaryset" !false ;
  enterBaseReaderWith3Arguments !?outMap !?ioUnifiedTypeMap !"swap312" !"uint" !"uint" !"uint" !"binaryset" !false ;
  enterBaseReaderWith3Arguments !?outMap !?ioUnifiedTypeMap !"swap321" !"uint" !"uint" !"uint"!"binaryset" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"transitiveClosure" !"uint" !"binaryset" !false ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"accessibleStates" !"binaryset" !"uint" !"binaryset" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"equalTo" !"binaryset" !"binaryset" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"notEqualTo" !"binaryset" !"binaryset" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"lowerOrEqualTo" !"binaryset" !"binaryset" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"greaterOrEqualTo" !"binaryset" !"binaryset" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"strictGreaterThan" !"binaryset" !"binaryset" !false ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"strictLowerThan" !"binaryset" !"binaryset" !false ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"binarySetByTranslatingFromIndex" !"uint" !"uint" !"binaryset" !false ;
  enterBaseReaderWith3Arguments !?outMap !?ioUnifiedTypeMap !"containsValue" !"uint64" !"uint" !"uint" !"binaryset" !false ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"existsOnBitRange" !"uint" !"uint" !"binaryset" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_type
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"name" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"hasSuperclass" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"superclass" !"type" !true ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_object
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"objectType" !"type" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_data
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"length" !"uint" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine readerMapFor_function
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"name" !"string" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"resultType" !"type" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"formalParameterTypeList" !"typelist" !false ;
  enterBaseReaderWith2Arguments !?outMap !?ioUnifiedTypeMap !"invoke" !"objectlist" !"location" !"object" !false ;
end routine ;

#---------------------------------------------------------------------------*

#override reader @classGalgasType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  if [mSuperClassIndex isNull] then
#    commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
#  else
#    @string superClassType := [mSuperClassIndex mType] ;
#    outMap := [superClassType readerMap] ;
#  end if ;
#  foreach mAttributeList do
#    @string t := [mAttributeTypeIndex mType] ;
#    [!?outMap insertKey
#      !mAttributeName
#      ![@typeList emptyList]
#      !false
#      !t
#      ![@readerQualifier isBasic]
#      !""
#    ] ;
#  end foreach ;
#end reader ;

#---------------------------------------------------------------------------*

routine readerMapFor_list
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"length" !"uint" !false ;
end routine ;

#---------------------------------------------------------------------------*

#override reader @listGalgasType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  outMap := readerMapFor_list [] ;
#  enterBaseReaderWithUintArgument !?outMap !?ioUnifiedTypeMap !"subListFromIndex" !self !false ;
#  enterBaseReaderWith2UintArguments !?outMap !?ioUnifiedTypeMap !"subListWithRange" !self !false ;
#  foreach mAttributeList do
#    @string t := [mAttributeTypeIndex mType] ;
#    [!?outMap insertKey
#      ![@lstring new ![mAttributeName string] . "AtIndex" ![mAttributeName location]]
#      ![@typeList listWithValue !"uint"]
#      !false
#      !t
#      ![@readerQualifier isBasic]
#      !""
#    ] ;
#  end foreach ;
#end reader ;

#---------------------------------------------------------------------------*

routine readerMapFor_listmap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@readerMap outMap
:
  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
  enterBaseReaderWithArgument !?outMap !?ioUnifiedTypeMap !"hasKey" !"string" !"bool" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"allKeys" !"stringset" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"count" !"uint" !false ;
  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"keyList" !"stringlist" !false ;
end routine ;

#---------------------------------------------------------------------------*

#override reader @listmapGalgasType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  outMap := readerMapFor_listmap [] ;
#  @string t := [mAssociatedListTypeIndex mType] ;
#  enterBaseReaderWithStringArgument !?outMap !?ioUnifiedTypeMap !"listForKey" !t !false ;
#end reader ;

#---------------------------------------------------------------------------*

#override reader @structGalgasType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
#  foreach mAttributeList do
#    @string t := [mAttributeTypeIndex mType] ;
#    [!?outMap insertKey
#      !mAttributeName
#      ![@typeList emptyList]
#      !false
#      !t
#      ![@readerQualifier isBasic]
#      !""
#    ] ;
#  end foreach ;
#end reader ;

#---------------------------------------------------------------------------*

#override reader @sortedlistGalgasType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"length" !self !false ;
#end reader ;

#---------------------------------------------------------------------------*

#routine readerMapFor_map
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
#  enterBaseReaderWithStringArgument !?outMap !?ioUnifiedTypeMap !"hasKey" !"bool" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"locationForKey" !"location" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"count" !"uint" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"allKeys" !"stringset" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"keyList" !build_lstringlist_type [] !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"unsolvedIndexCount" !"uint" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"unsolvedIndexKeyStringList" !"stringlist" !false ;
#end routine ;

#---------------------------------------------------------------------------*

#override reader @mapType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  outMap := readerMapFor_map [] ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"overriddenMap" !self !false ;
#end reader ;

#---------------------------------------------------------------------------*

#override reader @mapindexType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isRegular" !"bool" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isNull" !"bool" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"isSolved" !"bool" !false ;
#  enterBaseReaderWithoutArgument !?outMap !?ioUnifiedTypeMap !"key" ![@lstringGalgasType new] !false ;
#end reader ;

#---------------------------------------------------------------------------*

#override reader @enumType readerMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@readerMap outMap
#:
#  commonReaderMapForAllTypes !?ioUnifiedTypeMap ?outMap ;
#  foreach mEnumMessageMap do
#    enterBaseReaderWithoutArgument !?outMap ![key string] ![@lstringGalgasType new] !false ;
#  end foreach ;
#end reader ;

#---------------------------------------------------------------------------*

end semantics ;
