#---------------------------------------------------------------------------*
#                                                                           *
#  Copyright (C) 2014, ..., 2014 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax galgas3GrammarComponentSyntax ("galgas3Scanner.gLexique") :

import "semanticsTypesForAST.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#   G R A M M A R    C O M P O N E N T                                      *
#                                                                           *
#---------------------------------------------------------------------------*

rule <declaration>
 ?!@galgas3DeclarationAST ioDeclarations
:
  @lbool hasIndexing ;
  select
    hasIndexing := [@lbool new !false !here] ;
  or
    hasIndexing := [@lbool new !true !here] ;
    $indexing$ ;
  end select ;
  $grammar$ ;
  $identifier$ ? @lstring mGrammarName indexing grammarComponentDefinition ;
  $literal_string$ ? @lstring mGrammarClass ;
#--- Feature translate
  @bool hasTranslateFeature ;
  select
    hasTranslateFeature := false ;
  or
    $attribute$ ??@lstring featureName ;
    if featureName->string != "translate" then
      error featureName: "only 'feature translate' can be declared here" ;
    end if ;
    hasTranslateFeature := true ;
  end select ;
  ${$ ;
#--- Imports
  @lstringlist syntaxComponents := {} ;
  repeat
    $syntax$ ;
    $identifier$ ? @lstring syntaxComponent ;
    syntaxComponents += !syntaxComponent ;
  while
  end repeat ;
#--- Root symbol
  $non_terminal_symbol$ ?@lstring  mStartSymbol indexing ruleReference ;
  @nonTerminalLabelListAST mLabelList [emptyList] ;
  <grammar_start_symbol_label> ![@lstring new !"" !here] !?mLabelList ;
  repeat
  while
    $label$ ;
    $identifier$ ?@lstring labelName ;
    <grammar_start_symbol_label> !labelName !?mLabelList ;
   end repeat ;
#--- Unused non terminal symbols
  @lstringlist mUnusedNonterminalList [emptyList] ;
  repeat
  while
    $unused$ ;
    $non_terminal_symbol$ ? @lstring nonterminalSymbolName ;
    mUnusedNonterminalList += ! nonterminalSymbolName ;
  end repeat ;
#---
  $}$ ;
#  ioDeclarations->mGrammarComponentList +=
#    !hasIndexing
#    !mGrammarName
#    !mGrammarClass
#    !syntaxComponents
#    !mStartSymbol
#    !mLabelList
#    !mUnusedNonterminalList
#    !hasTranslateFeature
#  ;
  ioDeclarations->mSemanticDeclarationList += ![@galgas3GrammarComponentAST new
    !false # Is not predefined
    !hasIndexing
    !mGrammarName
    !mGrammarClass
    !syntaxComponents
    !mStartSymbol
    !mLabelList
    !mUnusedNonterminalList
    !hasTranslateFeature
  ] ;
end rule ;

#---------------------------------------------------------------------------*

rule <grammar_start_symbol_label>
  ??@lstring inLabelName
  ?!@nonTerminalLabelListAST ioLabelList
:
  @stringset argumentNameSet [emptySet] ;
  @formalParameterListAST mFormalParameterList [emptyList] ;
  repeat
  while
    @lstring argumentName ;
    <label_formal_parameter> ?argumentName !?mFormalParameterList ;
    if [argumentNameSet hasKey ![argumentName string]] then
      error argumentName: "there is already an argument named '" . argumentName . "'" ;
    end if ;
    argumentNameSet += ![argumentName string] ;
  end repeat ;
  ioLabelList += !inLabelName !mFormalParameterList !here ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList
:
  $?$ ?const selector ;
  $type_name$ ?@lstring mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    !selector
    ![@formalArgumentPassingModeAST argumentIn]
    !mTypeName
    !outArgumentName
    !false
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList
:
  $?$ ?const selector ;
  $let$ ;
  $type_name$ ?@lstring mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    !selector
    ![@formalArgumentPassingModeAST argumentConstantIn]
    !mTypeName
    !outArgumentName
    !false
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList
:
  $?!$ ?const selector ;
  $type_name$ ?@lstring mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    !selector
    ![@formalArgumentPassingModeAST argumentInOut]
    !mTypeName
    !outArgumentName
    !false
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@formalParameterListAST ioStartSymbolLabelFormalParameterList
:
  $!$ ?const selector ;
  $type_name$ ?@lstring mTypeName ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    !selector
    ![@formalArgumentPassingModeAST argumentOut]
    !mTypeName
    !outArgumentName
    !false
  ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;