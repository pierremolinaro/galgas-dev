#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS LL1 program definition                                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

program mda_galgas_LL1_prgm "version GALGAS_BETA_VERSION (LL(1) grammar)" :
  import semantics lexiqueSemantics in "lexiqueSemantics.gSemantics" ;
  import semantics optionSemantics in "optionSemantics.gSemantics" ;
  import semantics semanticsSemantics in "semanticsSemantics.gSemantics" ;
  import semantics semantics_semantics in "semantics_semantics.gSemantics" ;
  import semantics mda_galgas_LL1_routines in "mda_galgas_LL1_routines.gSemantics" ;

  import metamodel optionMetamodel in "optionMetamodel.gMetamodel" ;
  import metamodel metamodelMetamodel in "metamodelMetamodel.gMetamodel" ;
  import metamodel lexiqueMetamodel in "lexiqueMetamodel.gMetamodel" ;
  import metamodel semanticsMetamodel in "semanticsMetamodel.gMetamodel" ;
  import metamodel syntaxMetamodel in "syntaxMetamodel.gMetamodel" ;
  import metamodel grammarMetamodel in "grammarMetamodel.gMetamodel" ;
  import metamodel guiMetamodel in "guiMetamodel.gMetamodel" ;
  import metamodel programMetamodel in "programMetamodel.gMetamodel" ;
  import metamodel treewalkingMetamodel in "treewalkingMetamodel.gMetamodel" ;

  import treewalking optionHeaderGeneration in "optionHeaderGeneration.gTreewalking" ;
  import treewalking optionTreewalkingForBuildingOptionMap in "optionTreewalkingForBuildingOptionMap.gTreewalking" ;
  import treewalking optionImplementationGeneration in "optionImplementationGeneration.gTreewalking" ;
  import treewalking optionImplementationGeneration in "optionImplementationGeneration.gTreewalking" ;
  import treewalking lexiqueTreewalkingForBuildingTerminalMap in "lexiqueTreewalkingForBuildingTerminalMap.gTreewalking" ;

  import grammar galgas_LL1_grammar in "galgas_LL1_grammar.gGrammar" ;
  import grammar optionLL1grammar in "optionLL1grammar.gGrammar" ;
  import grammar metamodelLL1grammar in "metamodelLL1grammar.gGrammar" ;
  import grammar lexiqueLL1grammar in "lexiqueLL1grammar.gGrammar" ;
  import grammar semanticsSLRgrammar in "semanticsSLRgrammar.gGrammar" ;
  import grammar syntaxSLRgrammar in "syntaxSLRgrammar.gGrammar" ;
  import grammar grammarLL1grammar in "grammarLL1grammar.gGrammar" ;
  import grammar guiLL1grammar in "guiLL1grammar.gGrammar" ;
  import grammar programSLRgrammar in "programSLRgrammar.gGrammar" ;
  import grammar treewalkingSLRgrammar in "treewalkingSLRgrammar.gGrammar" ;
  import grammar projectLL1grammar in "projectLL1grammar.gGrammar" ;
  
  error 100 ;
  warning 100 ;

#---------------------------------------------------------------------------*

when . "ggs"
message "a '.ggs' GALGAS source file"
??@lstring inSourceFile {
  fixFileGenerationStartDirectory !inSourceFile ;
  @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
  @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
  @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
  @M_grammarComponents grammarComponentsMap [emptyMap] ;
  @M_optionComponents optionComponentsMap [emptyMap] ;
  @M_metamodelsComponents metamodelComponentMap [emptyMap] ;
  @M_treewalkingComponents treewalkingComponentMap [emptyMap] ;
  @semanticContext semanticContext [new
    ![@M_filewrappers emptyMap]
  ] ;
  grammar galgas_LL1_grammar in inSourceFile
    !?lexiqueMapForUse
    !?semanticsComponentsMap
    !?syntaxComponentsMap
    !?grammarComponentsMap
    !?optionComponentsMap
    !?metamodelComponentMap
    !?treewalkingComponentMap
    !?semanticContext
  ;
}

#---------------------------------------------------------------------------*

when . "gOption"
message "a GALGAS option source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileOptionComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gMetamodel"
message "a GALGAS metamodel source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileMetamodelComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gLexique"
message "a GALGAS lexique source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileLexiqueComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gSemantics"
message "a GALGAS semantics source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileSemanticsComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gSyntax"
message "a GALGAS syntax source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileSyntaxComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gGrammar"
message "a GALGAS grammar source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileGrammarComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gGui"
message "a GALGAS GUI source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileGuiComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gProgram"
message "a GALGAS program source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileProgramComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gTreewalking"
message "a GALGAS treewalking source file"
??@lstring inSourceFile {
  @string outputDirectory ;
  getOutputDirectory !inSourceFile ?outputDirectory ;
  compileTreewalkingComponentLL1 !inSourceFile !outputDirectory ;
}

#---------------------------------------------------------------------------*

when . "gProject"
message "a GALGAS project source file"
??@lstring inSourceFile {
#--- Define output directory
  @string outputDirectory ;
  getOutputDirectory
    !inSourceFile
    ?outputDirectory
  ;
#--- Parse metamodel component
  @lstringlist fileList ;
  grammar projectLL1grammar in inSourceFile ?fileList ;
#--- loop for compiling each file
  foreach fileList (@lstring kFile) :
    message "----- Compiling '" . kFile . "'\n" ;
    @string extension := [kFile pathExtension] ;
    @lstring fullFilePath [new
      ![inSourceFile stringByDeletingLastPathComponent] . "/" . [kFile string]
      ![kFile location]
    ] ;
    if extension == "gTreewalking" then
      compileTreewalkingComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gSemantics" then
      compileSemanticsComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gLexique" then
      compileLexiqueComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gSyntax" then
      compileSyntaxComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gMetamodel" then
      compileMetamodelComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gOption" then
      compileOptionComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gGrammar" then
      compileGrammarComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gProgram" then
      compileProgramComponentLL1 !fullFilePath !outputDirectory ;
    elsif extension == "gGui" then
      compileGuiComponentLL1 !fullFilePath !outputDirectory ;
    else
      error kFile:"unhandled extension" ;
    end if ;
  end foreach ;
}

#---------------------------------------------------------------------------*

end program ;

#---------------------------------------------------------------------------*
