#---------------------------------------------------------------------------*
#                                                                           *
#  'lexique' component metamodel                                            *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics predefinedLexicalActions :
import "lexiqueSemantics.gSemantics" ;

import semantics lexiqueSemantics in "lexiqueSemantics.gSemantics" ;

#---------------------------------------------------------------------------*
#                         buildLexicalRoutineMap                            *
#---------------------------------------------------------------------------*

routine buildLexicalRoutineMap !@lexicalRoutineMap outLexicalRoutineMap :
  outLexicalRoutineMap := [@lexicalRoutineMap emptyMap] ;
#--- enterHexDigitIntoASCIIcharacter
  @lexicalRoutineFormalArgumentList mLexicalRoutineFormalArgumentList [emptyList] ;
  @stringlist mErrorMessageList [emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mErrorMessageList += !"inErrorCodeGreaterThan255" ;
  mErrorMessageList += !"inErrorNotHexDigitCharacter" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterHexDigitIntoASCIIcharacter" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterDigitIntoASCIIcharacter
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mErrorMessageList += !"inErrorCodeGreaterThan255" ;
  mErrorMessageList += !"inErrorNotHexDigitCharacter" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterDigitIntoASCIIcharacter" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterCharacterIntoString
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterCharacterIntoString" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertStringToDouble
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_double] ;
  mErrorMessageList += !"inConversionError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertStringToDouble" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterCharacterIntoCharacter
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterCharacterIntoCharacter" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- negateSInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"negateSInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- negateSInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"negateSInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertUIntToSInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_sint] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertUIntToSInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertUInt64ToSInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_sint64] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertUInt64ToSInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterDigitIntoUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotDecimalDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterDigitIntoUInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterDigitIntoUInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotDecimalDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterDigitIntoUInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterHexDigitIntoUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotHexDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterHexDigitIntoUInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterHexDigitIntoUInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotHexDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterHexDigitIntoUInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertDecimalStringIntoUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotDecimalDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertDecimalStringIntoUInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertDecimalStringIntoSInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotDecimalDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertDecimalStringIntoSInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertDecimalStringIntoUInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotDecimalDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertDecimalStringIntoUInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertDecimalStringIntoSInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotDecimalDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertDecimalStringIntoSInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterBinDigitIntoUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotBinDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterBinDigitIntoUInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterBinDigitIntoUInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotBinDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterBinDigitIntoUInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterOctDigitIntoUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotOctDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterOctDigitIntoUInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- enterOctDigitIntoUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotOctDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"enterOctDigitIntoUInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- multiplyUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mErrorMessageList += !"inResultTooLargeError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"multiplyUInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- multiplyUInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint64] ;
  mErrorMessageList += !"inResultTooLargeError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"multiplyUInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertHexStringIntoUInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotHexDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertHexStringIntoUInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertHexStringIntoUInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotHexDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertHexStringIntoUInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertHexStringIntoSInt
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotHexDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertHexStringIntoSInt" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertHexStringIntoSInt64
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_sint64] ;
  mErrorMessageList += !"inNumberTooLargeError" ;
  mErrorMessageList += !"inCharacterIsNotHexDigitError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertHexStringIntoSInt64" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertUnsignedNumberToUnicodeChar
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_uint] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mErrorMessageList += !"inUnassignedUnicodeValueError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertUnsignedNumberToUnicodeChar" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- convertHTMLSequenceToUnicodeCharacter
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_char] ;
  mErrorMessageList += !"inUnassignedHTMLSequenceError" ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"convertHTMLSequenceToUnicodeCharacter" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
#--- codePointToUnicode
  mLexicalRoutineFormalArgumentList := [@lexicalRoutineFormalArgumentList emptyList] ;
  mErrorMessageList := [@stringlist emptyList] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputMode] ![@lexicalTypeEnum lexicalType_string] ;
  mLexicalRoutineFormalArgumentList += ![@lexicalArgumentMode lexicalInputOutputMode] ![@lexicalTypeEnum lexicalType_string] ;
  [!?outLexicalRoutineMap insertKey
    ![@lstring new !"codePointToUnicode" !here]
    !mLexicalRoutineFormalArgumentList
    !mErrorMessageList
  ] ;
end routine ;

#---------------------------------------------------------------------------*
#                         buildLexicalFunctionMap                           *
#---------------------------------------------------------------------------*

routine buildLexicalFunctionMap !@lexicalFunctionMap outLexicalFunctionMap :
  outLexicalFunctionMap := [@lexicalFunctionMap emptyMap] ;
#--- toLower
  @lexicalTypeList lexicalTypeList [emptyList] ;
  lexicalTypeList += ![@lexicalTypeEnum lexicalType_char] ;
  [!?outLexicalFunctionMap insertKey
    ![@lstring new !"toLower" !here]
    !lexicalTypeList
    ![@lexicalTypeEnum lexicalType_char]
  ] ;
#--- toUpper
  lexicalTypeList := [@lexicalTypeList emptyList] ;
  lexicalTypeList += ![@lexicalTypeEnum lexicalType_char] ;
  [!?outLexicalFunctionMap insertKey
    ![@lstring new !"toUpper" !here]
    !lexicalTypeList
    ![@lexicalTypeEnum lexicalType_char]
  ] ;
end routine ;

#---------------------------------------------------------------------------*
#                    printPredefinedLexicalActions                          *
#---------------------------------------------------------------------------*

routine printPredefinedLexicalActions :
#--------------------------------------- Build lexical routine map
  @lexicalRoutineMap lexicalRoutineMap ;
  buildLexicalRoutineMap ?lexicalRoutineMap ;
#--------------------------------------- Display lexical routines
  @string s := "" ;
  s .= "**************** Prefined lexical routines  ****************\n" ;
  foreach lexicalRoutineMap do
    s .= key ;
    foreach mLexicalRoutineFormalArgumentList do
      s .= " " . [mLexicalArgumentMode lexicalFormalModeName] . [mLexicalType lexicalTypeName] ;
    end foreach ;
    foreach mErrorMessageList
    before s .= " error" ;
    do s .= " " . mValue ;
    between s .= "," ;
    end foreach ;
    s .= " ;\n\n" ;
  end foreach ;
#--------------------------------------- Build lexical function map
  @lexicalFunctionMap lexicalFunctionMap ;
  buildLexicalFunctionMap ?lexicalFunctionMap ;
#--------------------------------------- Display lexical functions
  s .= "**************** Prefined lexical functions ****************\n" ;
  foreach lexicalFunctionMap do
    s .= key ;
    foreach mLexicalTypeList do
      s .= " ?" . [mLexicalType lexicalTypeName] ;
    end foreach ;
    s .= " -> " . [mReturnedLexicalType lexicalTypeName] . " ;\n\n" ;
  end foreach ;
#--------------------------------------- Display
  s .= "************************************************************\n" ;
  message s ;
end routine ;

#---------------------------------------------------------------------------*


end semantics ;