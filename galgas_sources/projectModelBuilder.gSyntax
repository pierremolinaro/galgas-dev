#---------------------------------------------------------------------------*
#                                                                           *
#  'project' model builder                                                  *
#                                                                           *
#  Copyright (C) 2007, ..., 2011 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax projectModelBuilder ("galgas_scanner.gLexique")  feature translate :

import "projectMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*

nonterminal <project_component_start_symbol>
  !@projectComponentAST outProjectComponentAST
;

#---------------------------------------------------------------------------*

rule <project_component_start_symbol>
  !@projectComponentAST outProjectComponentAST
:
  $project$ ;
  $identifier$ ??@lstring projectName :> ?* ?* ;
  $($ ;
  $unsigned_literal_integer$ ??@luint majorVersion ;
  $:$ ;
  $unsigned_literal_integer$ ??@luint minorVersion ;
  $:$ ;
  $unsigned_literal_integer$ ??@luint revisionVersion ;
  $)$ ;
  $->$ ;
  $literal_string$ ? @lstring targetName ;
  $:$ :> ?@string sep ?* ;
  send sep . "{" ;
  @projectSourceList projectSourceList [emptyList] ;
  @lstringlist generateFeatureList [emptyList] ;
  @qualifiedFeatureList qualifiedFeatureList [ emptyList] ;
  repeat
  while
    $feature$ :> ?@string sep ?* ;
    send sep ;
    select
      $identifier$ ? @lstring featureName :> ?* ?* ;
      send "%" . [featureName->string stringByReplacingStringByString !"_" !"-"] ;
      $:$ ;
      $literal_string$ ? @lstring featureValue ;
      qualifiedFeatureList += !featureName !featureValue ;
    or
      $literal_string$ ? @lstring featureName :> ?* ?* ;
      var newName := [featureName->string stringByReplacingStringByString !"_" !"-"] ;
      if newName == "makefile-x86-64-linux-on-macosx" then
        newName := "makefile-x86linux64-on-macosx" ;
      elsif newName == "makefile-i386-linux-on-macosx" then # makefile_i386_linux_on_macosx
        newName := "makefile-x86linux32-on-macosx" ;
      elsif newName == "makefile-mingw-on-macosx" then # makefile_mingw_on_macosx
        newName := "makefile-win32-on-macosx" ;
      elsif newName == "makefile-msys-on-win32" then # makefile_msys_on_win32
        newName := "makefile-msys32-on-windows" ;
      end if ;
      send "%" . newName ;
      generateFeatureList += !featureName ;
    end select ;
    $;$ :> ?* ?* ;
  while
    @sourceFileKind sourceFileKind ;
    @lstring filePath ;
    select
      $extern$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
      const extension := [filePath pathExtension] ;
      @string attribute ;
      if extension == "cpp" then
        attribute := "tool-source" ;
      elsif extension == "m" then
        attribute := "app-source" ;
      elsif extension == "mm" then
        attribute := "tool-source" ;
      elsif extension == "framework" then
        attribute := "tool-link" ;
      elsif extension == "xib" then
        attribute := "app-source" ;
      else
        error filePath : "unhandled extension" : attribute ;
      end if ;
      send "%" . attribute . " : \"hand_coded_sources/" . filePath . "\"" ;
      sourceFileKind := [@sourceFileKind externSourceFile] ;
    or
      $gui$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
      send "\"galgas-sources/" . [filePath stringByDeletingPathExtension] . ".galgas\"" ;
      sourceFileKind := [@sourceFileKind guiSourceFile] ;
    or
      $lexique$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
      send "\"galgas-sources/" . [filePath stringByDeletingPathExtension] . ".galgas\"" ;
      sourceFileKind := [@sourceFileKind lexiqueSourceFile] ;
    or
      $option$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
      send "\"galgas-sources/" . [filePath stringByDeletingPathExtension] . ".galgas\"" ;
      sourceFileKind := [@sourceFileKind optionSourceFile] ;
    or
      $semantics$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
      send "\"galgas-sources/" . [filePath stringByDeletingPathExtension] . ".galgas\"" ;
      sourceFileKind := [@sourceFileKind semanticsSourceFile] ;
    or
      $syntax$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
       send "\"galgas-sources/" . [filePath stringByDeletingPathExtension] . ".galgas\"" ;
     sourceFileKind := [@sourceFileKind syntaxSourceFile] ;
    or
      $grammar$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
      send "\"galgas-sources/" . [filePath stringByDeletingPathExtension] . ".galgas\"" ;
      sourceFileKind := [@sourceFileKind grammarSourceFile] ;
    or
      $program$ :> ??@string sep ?* ;
      send sep ;
      $literal_string$ ?filePath :> ?* ?* ;
      send "\"galgas-sources/" . [filePath stringByDeletingPathExtension] . ".galgas\"" ;
      sourceFileKind := [@sourceFileKind programSourceFile] ;
    end select ;
    $;$ :> ?* ?* ;
    projectSourceList +=
      !sourceFileKind
      !filePath
    ;
  end repeat ;
  $end$ :> ?sep ?* ;
  send sep . "}" ;
  outProjectComponentAST := [@projectComponentAST new
    !projectSourceList
    !majorVersion
    !minorVersion
    !revisionVersion
    !generateFeatureList
    !qualifiedFeatureList
    !projectName
    !targetName
    !here
  ] ;
  $project$ :> ?* ?* ;
  $;$ :> ?* ?* ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;