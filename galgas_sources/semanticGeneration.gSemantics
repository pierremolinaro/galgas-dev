#---------------------------------------------------------------------------*
#                                                                           *
#  Generate predefined types                                                *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticGeneration :
  import "semanticAnalysis.gSemantics" ;

  import semantics semanticAnalysis in "semanticAnalysis.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#           G E N E R A T I O N    F I L E W R A P P E R S                  *
#                                                                           *
#---------------------------------------------------------------------------*

filewrapper builtinTypeGenerationTemplate in "../generation_templates/semantic_generation" {
} {
  template genericTypeHeader "generic-type.h.gTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
  ;

  template genericTypeImplementation "generic-type.cpp.gTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@unifiedTypeMapIndex SUPER_TYPE_INDEX
  ;

  template unifiedTypeHeader "unified-type.h.gTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@bool IS_CONCRETE # false if abstract class
    ?@unifiedTypeMapIndex SUPER_TYPE_INDEX
    ?@typeKindEnum TYPE_KIND
    ?@typedAttributeList CURRENT_TYPE_ATTRIBUTE_LIST
    ?@constructorMap CONSTRUCTOR_MAP
    ?@readerMap READER_MAP
    ?@modifierMap MODIFIER_MAP
    ?@instanceMethodMap INSTANCE_METHOD_MAP
    ?@classMethodMap CLASS_METHOD_MAP
    ?@enumerationDescriptorList ENUMERATION_DESCRIPTOR_LIST # Empty List if cannot be enumerated
    ?@uint SUPPORTED_OPERATORS
    ?@unifiedTypeMapIndexList ADD_ASSIGN_ARGUMENT_LIST # Empty list if operator is not supported
    ?@unifiedTypeMapIndexList MINUS_ASSIGN_ARGUMENT_LIST # Empty list if operator is not supported
    ?@nativeAttributeList NATIVE_ATTRIBUTE_LIST
  ;

  template unifiedTypeImplementation "unified-type.cpp.gTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@bool IS_CONCRETE # false if abstract class
    ?@unifiedTypeMapIndex SUPER_TYPE_INDEX
    ?@typeKindEnum TYPE_KIND
    ?@typedAttributeList CURRENT_TYPE_ATTRIBUTE_LIST
    ?@constructorMap CONSTRUCTOR_MAP
    ?@readerMap READER_MAP
    ?@modifierMap MODIFIER_MAP
    ?@instanceMethodMap INSTANCE_METHOD_MAP
    ?@classMethodMap CLASS_METHOD_MAP
    ?@enumerationDescriptorList ENUMERATION_DESCRIPTOR_LIST # Empty List if cannot be enumerated
    ?@uint SUPPORTED_OPERATORS
    ?@unifiedTypeMapIndexList ADD_ASSIGN_ARGUMENT_LIST # Empty list if operator is not supported
    ?@unifiedTypeMapIndexList MINUS_ASSIGN_ARGUMENT_LIST # Empty list if operator is not supported
    ?@nativeAttributeList NATIVE_ATTRIBUTE_LIST
  ;

  template predefinedTypesHeader "types-predeclaration.h.gTemplate"
    ?@stringset TYPE_LIST
  ;

  template predefinedTypeSpecificImplementation "predefined-type-specific.cpp.gTemplate"
    ?@string TYPE_IDENTIFIER
    ?@modifierMap MODIFIER_MAP
    ?@uint SUPPORTED_OPERATORS
    ?@unifiedTypeMapIndexList ADD_ASSIGN_ARGUMENT_LIST # Empty list if operator is not supported
    ?@unifiedTypeMapIndexList MINUS_ASSIGN_ARGUMENT_LIST # Empty list if operator is not supported
    ?@nativeAttributeList NATIVE_ATTRIBUTE_LIST
  ;

  template predefinedTypesImplementation "predefined_types.cpp.gTemplate"
  ;


  template listTypeSpecificImplementation "GALGAS_list.cpp.gTemplate"
    ?@string TYPE_IDENTIFIER
    ?@typedAttributeList ATTRIBUTE_LIST
  ;

  template structTypeSpecificImplementation "GALGAS_struct.cpp.gTemplate"
    ?@string TYPE_NAME
    ?@string TYPE_IDENTIFIER
    ?@typedAttributeList ATTRIBUTE_LIST
  ;
}

#---------------------------------------------------------------------------*
#                                                                           *
# A P P E N D    D E C L A R A T I O N                                      *
#                                                                           *
#---------------------------------------------------------------------------*

reader @semanticDeclarationForGeneration appendDeclaration -> @string outHeader :
  outHeader := "" ;
end reader ;

#---------------------------------------------------------------------------*

override reader @semanticTypeForGeneration appendDeclaration -> @string outHeader :
  outHeader := [filewrapper builtinTypeGenerationTemplate.unifiedTypeHeader
    ![[mTypeIndex key] string]
    ![mTypeIndex identifierRepresentation]
    ![mTypeIndex mIsConcrete]
    ![mTypeIndex mSuperType]
    ![mTypeIndex mTypeKindEnum]
    ![mTypeIndex mCurrentTypedAttributeList]
    ![mTypeIndex mConstructorMap]
    ![mTypeIndex mReaderMap]
    ![mTypeIndex mModifierMap]
    ![mTypeIndex mInstanceMethodMap]
    ![mTypeIndex mClassMethodMap]
    ![mTypeIndex mEnumerationDescriptor]
    ![mTypeIndex mHandledOperatorFlags]
    ![mTypeIndex mAddAssignOperatorArguments]
    ![mTypeIndex mMinusAssignOperatorArguments]
    ![mTypeIndex mNativeAttributeList]
  ] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @genericTypeForGeneration appendDeclaration -> @string outHeader :
  outHeader := [filewrapper builtinTypeGenerationTemplate.genericTypeHeader
    ![[mTypeIndex key] string]
    ![mTypeIndex identifierRepresentation]
  ] ;
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
# A P P E N D    G E N E R I C    T Y P E    I M P L E M E N T A T I O N    *
#                                                                           *
#  This code is common for all types                                        *
#---------------------------------------------------------------------------*

reader @semanticDeclarationForGeneration appendTypeGenericImplementation ->@string outImplementation :
  outImplementation := "" ;
end reader ;

#---------------------------------------------------------------------------*

override reader @semanticTypeForGeneration appendTypeGenericImplementation ->@string outImplementation :
  outImplementation := [filewrapper builtinTypeGenerationTemplate.unifiedTypeImplementation
    ![[mTypeIndex key] string]
    ![mTypeIndex identifierRepresentation]
    ![mTypeIndex mIsConcrete]
    ![mTypeIndex mSuperType]
    ![mTypeIndex mTypeKindEnum]
    ![mTypeIndex mCurrentTypedAttributeList]
    ![mTypeIndex mConstructorMap]
    ![mTypeIndex mReaderMap]
    ![mTypeIndex mModifierMap]
    ![mTypeIndex mInstanceMethodMap]
    ![mTypeIndex mClassMethodMap]
    ![mTypeIndex mEnumerationDescriptor]
    ![mTypeIndex mHandledOperatorFlags]
    ![mTypeIndex mAddAssignOperatorArguments]
    ![mTypeIndex mMinusAssignOperatorArguments]
    ![mTypeIndex mNativeAttributeList]
  ] ;
end reader ;


#---------------------------------------------------------------------------*

override reader @genericTypeForGeneration appendTypeGenericImplementation ->@string outImplementation :
  outImplementation := [filewrapper builtinTypeGenerationTemplate.genericTypeImplementation
    ![[mTypeIndex key] string]
    ![mTypeIndex identifierRepresentation]
    ![mTypeIndex mSuperType]
  ] ;
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
# A P P E N D    S P E C I F I C    I M P L E M E N T A T I O N             *
#                                                                           *
#---------------------------------------------------------------------------*

reader @semanticDeclarationForGeneration appendSpecificImplementation ->@string outImplementation :
  outImplementation := "" ;
end reader ;

#---------------------------------------------------------------------------*

override reader @primitiveTypeForGeneration appendSpecificImplementation -> @string outImplementation :
  outImplementation := [filewrapper builtinTypeGenerationTemplate.predefinedTypeSpecificImplementation
    ![mTypeIndex identifierRepresentation]
    ![mTypeIndex mModifierMap]
    ![mTypeIndex mHandledOperatorFlags]
    ![mTypeIndex mAddAssignOperatorArguments]
    ![mTypeIndex mMinusAssignOperatorArguments]
    ![mTypeIndex mNativeAttributeList]
  ] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @listTypeForGeneration appendSpecificImplementation ->@string outImplementation :
  outImplementation := [filewrapper builtinTypeGenerationTemplate.listTypeSpecificImplementation
    ![mTypeIndex identifierRepresentation]
    !mTypedAttributeList
  ] ;
 end reader ;

#---------------------------------------------------------------------------*

override reader @structTypeForGeneration appendSpecificImplementation ->@string outImplementation :
  outImplementation := [filewrapper builtinTypeGenerationTemplate.structTypeSpecificImplementation
    ![[mTypeIndex key] string]
    ![mTypeIndex identifierRepresentation]
    !mTypedAttributeList
  ] ;
 end reader ;

#---------------------------------------------------------------------------*

#override reader @sortedListDeclarationAST appendSpecificImplementation ->@string outImplementation :
#  outImplementation := "" ;
#  @ACGalgasType t := self ; # Bug in GALGAS 1
#  @sortedlistGalgasType tt := self ; # Bug in GALGAS 1
#  ioImplementation .= [filewrapper typeGenerationTemplate.sortedlistTypeImplementation
#    ![t typeIdentifierRepresentation]
#    ![tt mAttributeList]
#    ![tt mSortDescriptorList]
# ] ;
#end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
# G E N E R A T E    B U I L T I N    T Y P E S                             *
#                                                                           *
#---------------------------------------------------------------------------*

routine generateHeadersOfBuiltinTypes ??@string inDirectory :
  if inDirectory != "" then
    if not [inDirectory directoryExists] then
      error here : "the '" . inDirectory . "' directory does not exist" ;
    else
    #------ Add predefined types to semantics declarations
      @semanticDeclarationListAST predefinedTypeASTlist [emptyList] ;
      appendPredefinedTypesASTs !?predefinedTypeASTlist ;
    #------ Build Semantic Context
      @semanticContext semanticContext ;
      buildSemanticContext
        !predefinedTypeASTlist
        !here
        ?semanticContext
      ;
    #------ Semantic Analysis
      @semanticDeclarationListForGeneration decoratedDeclarationListForGeneration ;
      performSemanticAnalysis
        !predefinedTypeASTlist
        !semanticContext
        ?decoratedDeclarationListForGeneration
      ;
    #------ Generate Code
      @string generatedCode := [filewrapper builtinTypeGenerationTemplate.predefinedTypesHeader
        ![[semanticContext mTypeMap] allKeys]
      ] ;
      foreach decoratedDeclarationListForGeneration do
        generatedCode .= [mDeclaration appendDeclaration] ;
      end foreach ;
      if [@uint errorCount] == 0 then
        [@string generateFile
          !inDirectory
          !"predefined-types.h"
          !"//"
          !"\n\n" # Defaut user zone1
          !generatedCode
          !"\n\n" # Defaut user zone2
          !"#endif\n"
        ] ;
      end if ;
    #------ Generate implementation
      generatedCode := [filewrapper builtinTypeGenerationTemplate.predefinedTypesImplementation] ;
      foreach decoratedDeclarationListForGeneration do
        generatedCode .= [mDeclaration appendTypeGenericImplementation] ;
        generatedCode .= [mDeclaration appendSpecificImplementation] ;
      end foreach ;
      if [@uint errorCount] == 0 then
        [@string generateFile
          !inDirectory
          !"predefined-types.cpp"
          !"//"
          !"\n\n" # Defaut user zone1
          !generatedCode
          !"\n\n" # Defaut user zone2
          !""
        ] ;
      end if ;
    end if ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
