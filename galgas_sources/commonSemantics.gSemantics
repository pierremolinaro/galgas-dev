#---------------------------------------------------------------------------*
#                                                                           *
#  Common semantics definitions                                             *
#                                                                           *
#  Copyright (C) 1997, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics commonSemantics :

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    P A R A M E T E R S    P A S S I N G    M O D E S         *
#                                                                           *
#---------------------------------------------------------------------------*

enum @actualParametersPassingMode {
  parameterOut, parameterOutIn, parameterIn
}{
  reader actualArgumentMessage {
    parameterOutIn -> "an output/input (!?) actual parameter" ;
    parameterIn -> "an input (?) actual parameter" ;
    parameterOut -> "an output (!) actual parameter" ;
  }
}

#---------------------------------------------------------------------------*
#                                                                           *
#   F O R M A L    A R G U M E N T S    P A S S I N G    M O D E S          *
#                                                                           *
#---------------------------------------------------------------------------*

enum @formalArgumentPassingMode {
  argumentIn, argumentOut, argumentInOut, argumentConstantIn
}{
  reader formalArgumentMessage {
    argumentConstantIn -> "a constant input (??) formal argument" ;
    argumentIn -> "an input (?) formal argument" ;
    argumentOut -> "an output (!) formal argument" ;
    argumentInOut -> "an input/output (?!) argument" ;
  }
}

#---------------------------------------------------------------------------*
#                                                                           *
#          V A R I A B L E    S T A T E    A U T O M A T O N                *
#                                                                           *
#---------------------------------------------------------------------------*

enum @variableStateAutomaton {
#--- Local variable
  localVariableDeclared, localVariableUsed, localVariableDropped
}{

#--- Action Write
  modifier writeAccess {
  #--- Local variable
    localVariableDeclared -> localVariableUsed ;
    localVariableUsed -> localVariableUsed ;
    localVariableDropped -> localVariableUsed ;
  }
}

#---------------------------------------------------------------------------*

end semantics ;
