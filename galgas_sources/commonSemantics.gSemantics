#---------------------------------------------------------------------------*
#                                                                           *
#  Common semantics definitions                                             *
#                                                                           *
#  Copyright (C) 1997, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics commonSemantics :

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    P A R A M E T E R S    P A S S I N G    M O D E S         *
#                                                                           *
#---------------------------------------------------------------------------*

enum @actualParametersPassingMode {
  constructor parameterOut, parameterOutIn, parameterIn ;
}{
  reader actualArgumentMessage {
    parameterOutIn -> "an output/input (!?) actual parameter" ;
    parameterIn -> "an input (?) actual parameter" ;
    parameterOut -> "an output (!) actual parameter" ;
  }
}

#---------------------------------------------------------------------------*
#                                                                           *
#   F O R M A L    A R G U M E N T S    P A S S I N G    M O D E S          *
#                                                                           *
#---------------------------------------------------------------------------*

enum @formalArgumentPassingMode {
  constructor argumentIn, argumentOut, argumentInOut, argumentConstantIn ;
}{
  reader formalArgumentMessage {
    argumentConstantIn -> "a constant input (??) formal argument" ;
    argumentIn -> "an input (?) formal argument" ;
    argumentOut -> "an output (!) formal argument" ;
    argumentInOut -> "an input/output (?!) argument" ;
  }
}

#---------------------------------------------------------------------------*
#                                                                           *
#     L O C A L    V A R I A B L E    S T A T E    A U T O M A T O N        *
#                                                                           *
#---------------------------------------------------------------------------*

enum @variableStateAutomaton {
#--- Local variable
  constructor localVariableDeclared, localVariableUsed, localVariableDropped ;
#--- Local constant
  localConstantDeclared, localConstantDefined, localContantUsed ;
#--- Input formal parameter (?@... )
  constructor inputFormalParameterDefined, inputFormalParameterUsed, inputFormalParameterDropped ;
#--- Constant input formal parameter (??@... )
  constructor constantInputFormalParameterDefined, constantInputFormalParameterUsed ;
}{

#--- Modifier Write
  modifier writeAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableUsed ;
    localVariableUsed -> localVariableUsed ;
    localVariableDropped -> localVariableUsed ;
  #--- Local constant
    localConstantDeclared -> localConstantDefined ;
    localConstantDefined -> localConstantDefined error inErrorLocation:"the local constant is already defined" ;
    localContantUsed -> localContantUsed error inErrorLocation:"the local constant is already defined" ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterDefined ;
    inputFormalParameterUsed -> inputFormalParameterUsed ;
    inputFormalParameterDropped -> inputFormalParameterUsed ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "the input parameter cannot be written" ;
    constantInputFormalParameterUsed -> constantInputFormalParameterUsed error inErrorLocation: "the input parameter cannot be written" ;
  }

#--- Modifier Read
  modifier readAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it has no value" ;
    localVariableUsed -> localVariableUsed ;
    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it is dropped" ;
  #--- Local constant
    localConstantDeclared -> localConstantDefined error inErrorLocation: "the local constant cannot be read, it has no value" ;
    localConstantDefined -> localContantUsed ;
    localContantUsed -> localContantUsed ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterUsed ;
    inputFormalParameterUsed -> inputFormalParameterUsed ;
    inputFormalParameterDropped -> inputFormalParameterDefined  error inErrorLocation: "the input parameter cannot be read, it is dropped" ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed ;
    constantInputFormalParameterUsed -> constantInputFormalParameterUsed ;
  }

#--- Modifier Read/write
  modifier readWriteAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, has no value" ;
    localVariableUsed -> localVariableUsed ;
    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, it is dropped" ;
  #--- Local constant
    localConstantDeclared -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
    localConstantDefined -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
    localContantUsed -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterUsed error inErrorLocation: "the input parameter cannot be modified, has no value" ;
    inputFormalParameterUsed -> inputFormalParameterUsed ;
    inputFormalParameterDropped -> inputFormalParameterDefined error inErrorLocation: "the input parameter cannot be modified, it is dropped" ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be modified" ;
    constantInputFormalParameterUsed -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be modified" ;
  }

#--- Modifier Drop
  modifier dropAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableDropped error inErrorLocation: "the local variable cannot be dropped, has no value" ;
    localVariableUsed -> localVariableDropped ;
    localVariableDropped -> localVariableDropped error inErrorLocation: "the local variable is already dropped" ;
  #--- Local constant
    localConstantDeclared -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
    localConstantDefined -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
    localContantUsed -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterUsed error inErrorLocation: "the input parameter cannot be dropped, has no value" ;
    inputFormalParameterUsed -> inputFormalParameterDropped ;
    inputFormalParameterDropped -> inputFormalParameterDropped error inErrorLocation: "the input parameter is already dropped" ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be dropped" ;
    constantInputFormalParameterUsed -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be dropped" ;
  }
}

#---------------------------------------------------------------------------*

enum @localVariableStateAutomaton {
  constructor localVariableDeclared, localVariableUsed, localVariableDropped ;
}{

#--- Modifier Write
  modifier writeAccess ??@location inErrorLocation {
    localVariableDeclared -> localVariableUsed ;
    localVariableUsed -> localVariableUsed ;
    localVariableDropped -> localVariableUsed ;
  }

#--- Modifier Read
  modifier readAccess ??@location inErrorLocation {
    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it has no value" ;
    localVariableUsed -> localVariableUsed ;
    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it is dropped" ;
  }

#--- Modifier Read/write
  modifier readWriteAccess ??@location inErrorLocation {
    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, has no value" ;
    localVariableUsed -> localVariableUsed ;
    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, it is dropped" ;
  }

#--- Modifier Drop
  modifier dropAccess ??@location inErrorLocation {
    localVariableDeclared -> localVariableDropped error inErrorLocation: "the local variable cannot be dropped, has no value" ;
    localVariableUsed -> localVariableDropped ;
    localVariableDropped -> localVariableDropped error inErrorLocation: "the local variable is already dropped" ;
  }

#--- Method checkFinalState
  method checkFinalState ??@location inErrorLocation {
    localVariableDeclared warning inErrorLocation: "the local variable is unused" ;
    localVariableUsed ;
    localVariableDropped ;
  }
}

#---------------------------------------------------------------------------*

wrapper wrapperTest in "../zz" {"ext1", "bat", "ext2"}

#---------------------------------------------------------------------------*

end semantics ;
