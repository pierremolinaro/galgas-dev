#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS compile component definition (call the LL(1) grammar)             *
#                                                                           *
#  Copyright (C) 1997, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax ggs_LL1_compile_component :

import lexique galgas_scanner in "galgas_scanner.gLexique" ;

import semantics semantics_semantics in "semantics_semantics.gSemantics" ;
import semantics XcodeProjectGeneration in "XcodeProjectGeneration.gSemantics" ;

import grammar galgas_LL1_grammar in "galgas_LL1_grammar.gGrammar" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          File List Template                                                  *
#                                                                              *
#------------------------------------------------------------------------------*

filewrapper fileListTemplateFileWrapper in "../creation_templates/file_list_template" {
 "mke"
} {
#--- Project
  template fileListTemplate "/file_list_template.mke"
    ?@string HAND_CODED_SOURCES_SUB_DIRS
    ?@string GALGAS_SOURCE_LIST
    ?@string HAND_CODED_SOURCE_LIST
    ?@string EXTERN_SOURCE_LIST
  ;
}

#------------------------------------------------------------------------------*
#                                                                              *
#          Production rules declaration                                        *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@EXsemanticContext ioSemanticContext
  ?!@stringset ioImportedSemanticsComponentNameSet
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

nonterminal <parse_lexique_for_importing>
  ??@lstring inFileName
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label parse
;

nonterminal <parse_syntax_for_importing>
  ??@lstring inFileName
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label parse
;

nonterminal <parse_grammar_component_for_importing>
  ??@lstring inFileName
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMapForUse
  ?!@EXsemanticContext ioSemanticContext
label parse
;

nonterminal <parse_option_component_for_importing>
  ??@lstring inFileName
  ?!@M_optionComponents ioOptionsComponentsMap
label parse
;

#------------------------------------------------------------------------------*
#                                                                              *
#          Project component                                                   *
#                                                                              *
#------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $project$ ;
  @string galgasSourceList := "" ;
  @stringset galgasSourceSet [emptySet] ;
  @stringset externSourceSet [emptySet] ;
  @string externSourceList := "" ;
  repeat
  while
    $extern$ ;
    $literal_string$ ?@lstring inExternSourceName ;
    if [externSourceSet hasKey ![inExternSourceName string]] then
      error inExternSourceName: "the '" . inExternSourceName . "' is already declared as extern" ;
    end if ;
    externSourceSet += ![inExternSourceName string] ;
    externSourceList .= "SOURCES += " . [inExternSourceName string] . "\n" ;
    $;$ ;
  while
    $compile$ ;
    $literal_string$ ?@lstring fileName ;
    if [galgasSourceSet hasKey ![fileName string]] then
      error fileName: "the '" . fileName . "' is already declared as compiled" ;
    end if ;
    galgasSourceSet += ![fileName string] ;
    if [fileName pathExtension] != "gGui" then
      galgasSourceList .= "SOURCES += " . [[fileName string] stringByDeletingPathExtension] . ".cpp\n" ;
    end if ;
    $;$ ;
    if [option .verbose_output] then
      message "------ Compile file '" . [fileName string] . "'\n" ;
    end if ;
    grammar galgas_LL1_grammar label compileFile in fileName ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
  if [option .verbose_output] then
    message "------ Project\n" ;
  end if ;
#---- Explore 'hand_coded_sources' directory
  @string handCodedFilesDir := [[[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] . "/hand_coded_sources" ;
  @string externSourceFileList := "" ;
  @stringset handCodedSourcesSubPathSet [emptySet] ;
  if [handCodedFilesDir directoryExists] then
    @stringlist extensionList [emptyList] ;
    extensionList += !"c" ;
    extensionList += !"cpp" ;
    extensionList += !"m" ;
    extensionList += !"mm" ;
    @stringlist actualHandCodedFileList := [handCodedFilesDir regularFilesWithExtensions !true !extensionList] ;
    foreach actualHandCodedFileList do
      externSourceFileList .= "SOURCES += " . [mValue lastPathComponent] . "\n" ;
      @string path := [mValue stringByDeletingLastPathComponent] ;
      if [path length] == 0 then
        handCodedSourcesSubPathSet += !"" ;
      else
        handCodedSourcesSubPathSet += !"/" . path ;
      end if ;
    end foreach ;
  end if ;
#--- Build galgas_sources/GALGAS_OUTPUT/file_list.mke
  @string handCodedSubPathesString := "" ;
  foreach handCodedSourcesSubPathSet do
    handCodedSubPathesString .= "SOURCES_DIR += ../hand_coded_sources" . key . "\n" ;
  end foreach ;
  @string newFileListContents := [filewrapper fileListTemplateFileWrapper.fileListTemplate
    !handCodedSubPathesString
    !galgasSourceList
    !externSourceFileList
    !externSourceList
  ] ;
  @string fileListPath := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT/file_list.mke" ;
  [newFileListContents writeToFileWhenDifferentContents !fileListPath] ;
#---- Convert old files
  @string oldCommonFile := [[[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] . "/common_files_for_make/makefile.mke" ;
  if [oldCommonFile fileExists] & ([@uint errorCount] == 0) then
    message "**** Converting old-style makefile ****\n" ;
    @string projectDir := [[[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] ;
    @stringlist projectDirectories := [projectDir directories !false] ;
    @bool ok := true ;
    foreach projectDirectories do
      if (mValue != "common_files_for_make") & (mValue != "makefile_macosx_universal") then
        @string fullDirPath := projectDir . "/" . mValue . "/" ;
      #--- makefile
        @string makefilePath := fullDirPath . "makefile" ;
        if [makefilePath fileExists] then
          @stringlist c := [[@string stringWithContentsOfFile !makefilePath] componentsSeparatedByString !"include ../common_files_for_make/makefile.mke"] ;
          if [c length] == 2 then
            message "  ok: '" . makefilePath . "' can be converted\n" ;
          else
            message "  error: '" . makefilePath . "' cannot be converted\n" ;
            ok := false ;
          end if ;
        end if ;
      #--- makefile64
        @string makefile64Path := fullDirPath . "makefile64" ;
        if [makefile64Path fileExists] then
          @stringlist c := [[@string stringWithContentsOfFile ! makefile64Path] componentsSeparatedByString !"include ../common_files_for_make/makefile.mke"] ;
          if [c length] == 2 then
            message "  ok: '" . makefile64Path . "' can be converted\n" ;
          else
            message "  error: '" . makefile64Path . "' cannot be converted\n" ;
            ok := false ;
          end if ;
        end if ;
      #--- makefile.mke
        @string makefileMkePath := fullDirPath . "makefile.mke" ;
        if [makefileMkePath fileExists] then
          @stringlist c := [[@string stringWithContentsOfFile ! makefileMkePath] componentsSeparatedByString !"include ../common_files_for_make/makefile.mke"] ;
          if [c length] == 2 then
            message "  ok: '" . makefileMkePath . "' can be converted\n" ;
          else
            message "  error: '" . makefileMkePath . "' cannot be converted\n" ;
            ok := false ;
          end if ;
        end if ;
      end if ;
    end foreach ;
    if ok then
      message "Perform conversion...\n" ;
      @string projectDir := [[[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] ;
      @stringlist projectDirectories := [projectDir directories !false] ;
      foreach projectDirectories do
        if (mValue != "common_files_for_make") & (mValue != "makefile_macosx_universal") then
          @string fullDirPath := projectDir . "/" . mValue . "/" ;
        #--- makefile
          @string makefilePath := fullDirPath . "makefile" ;
          if [makefilePath fileExists] then
            message "  converting '" . makefilePath . "'...\n" ;
            @stringlist c := [[@string stringWithContentsOfFile !makefilePath] componentsSeparatedByString !"include ../common_files_for_make/makefile.mke"] ;
            @string newContents := [@string componentsJoinedByString !c !"include ../galgas_sources/GALGAS_OUTPUT/file_list.mke"] ;
            [newContents writeToFile ! makefilePath] ;
          end if ;
        #--- makefile64
          @string makefile64Path := fullDirPath . "makefile64" ;
          if [makefile64Path fileExists] then
            message "  converting '" . makefile64Path . "'...\n" ;
            @stringlist c := [[@string stringWithContentsOfFile ! makefile64Path] componentsSeparatedByString !"include ../common_files_for_make/makefile.mke"] ;
            @string newContents := [@string componentsJoinedByString !c !"include ../galgas_sources/GALGAS_OUTPUT/file_list.mke"] ;
            [newContents writeToFile ! makefile64Path] ;
          end if ;
        #--- makefile.mke
          @string makefileMkePath := fullDirPath . "makefile.mke" ;
          if [makefileMkePath fileExists] then
            message "  converting '" . makefileMkePath . "'...\n" ;
            @stringlist c := [[@string stringWithContentsOfFile ! makefileMkePath] componentsSeparatedByString !"include ../common_files_for_make/makefile.mke"] ;
            @string newContents := [@string componentsJoinedByString !c !"include ../galgas_sources/GALGAS_OUTPUT/file_list.mke"] ;
            [newContents writeToFile ! makefileMkePath] ;
          end if ;
        end if ;
      end foreach ;
    #--- Delete old makefile
      @string oldDir := [oldCommonFile stringByDeletingLastPathComponent] ;
      message "  Removing directory '" . oldDir . "' and its contents...\n" ;
      [@string removeDirectoryRecursively !oldDir] ;
      message "**** Conversion done with success *****\n" ;
    else
      message "****** No conversion performed ********\n" ;
    end if ;
  end if ;
#--- Handle Xcode Project
  if [@uint errorCount] == 0 then
    @string XcodeProjectDir := [[[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] . "/Z" ; # . "/project_xcode" ;
    #log XcodeProjectDir ;
    @stringlist xcodeProjects := [XcodeProjectDir regularFilesWithExtensions !true ![@stringlist listWithValue !"pbxproj"]] ;
    #log xcodeProjects ;
    if [xcodeProjects length] == 1 then
      @string name ; [xcodeProjects first ?name] ;
      @string fullXcodePath := XcodeProjectDir . "/" . name ;
      generateXcodeProject
        !galgasSourceSet
        !externSourceSet
        ![[name stringByDeletingLastPathComponent] stringByDeletingPathExtension] # XCode project base name
        !fullXcodePath ;
    end if ;
  end if ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $project$ ;
  repeat
  while
    $extern$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $compile$ ;
    $literal_string$ ?* ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $project$ ;
  repeat
  while
    $extern$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $compile$ ;
    $literal_string$ ?* ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
  ?!@stringset unused ioImportedSemanticsComponentNameSet
:
  $project$ ;
  repeat
  while
    $extern$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $compile$ ;
    $literal_string$ ?* ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $project$ ;
  repeat
  while
    $extern$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $compile$ ;
    $literal_string$ ?* ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $project$ ;
  repeat
  while
    $extern$ ;
    $literal_string$ ?* ;
    $;$ ;
  while
    $compile$ ;
    $literal_string$ ?* ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Compile file component                                              *
#                                                                              *
#------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $compile$ ;
  @lstring fileName ;
  $literal_string$ ? fileName ;
  $;$ ;
  if [option .verbose_output] then
    message "------ Compile file '" . [fileName string] . "'\n" ;
  end if ;
  grammar galgas_LL1_grammar label compileFile in fileName ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
  ?!@stringset unused ioImportedSemanticsComponentNameSet
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse lexique component for importing                               *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_lexique_for_importing>
  ??@lstring inFileName
  ?!@M_lexiqueComponents ioLexiqueMapForUse
:
  grammar galgas_LL1_grammar label importLexique in inFileName
    !?ioLexiqueMapForUse
  ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse syntax component for importing                                *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_syntax_for_importing>
  ??@lstring inFileName
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@EXsemanticContext ioSemanticContext
:
  grammar galgas_LL1_grammar label importSyntax in inFileName
    !?ioSyntaxComponentsMap
    !?ioSemanticContext
  ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse grammar component for importing                               *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_grammar_component_for_importing>
  ??@lstring inFileName
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMapForUse
  ?!@EXsemanticContext ioSemanticContext
:
  grammar galgas_LL1_grammar label importGrammarForSemantics in inFileName
    !?ioGrammarComponentsMap
    !?ioOptionsComponentsMapForUse
    !?ioSemanticContext
  ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse option component for importing                                *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_option_component_for_importing>
  ??@lstring inFileName
  ?!@M_optionComponents ioOptionsComponentsMap
:
  grammar galgas_LL1_grammar label importOptions in inFileName
    !? ioOptionsComponentsMap
  ;
end rule ;

#------------------------------------------------------------------------------*

end syntax ;
