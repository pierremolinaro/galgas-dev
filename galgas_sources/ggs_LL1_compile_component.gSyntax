#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS compile component definition (call the LL(1) grammar)             *
#                                                                           *
#  Copyright (C) 1997, ..., 2009 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax ggs_LL1_compile_component :
with "galgas_scanner.gLexique" ;

import lexique galgas_scanner in "galgas_scanner.gLexique" ;

import semantics semantics_semantics in "semantics_semantics.gSemantics" ;
import semantics optionCompilation in "optionCompilation.gSemantics" ;
import semantics lexiqueCompilation in "lexiqueCompilation.gSemantics" ;
import semantics guiCompilation in "guiCompilation.gSemantics" ;
import semantics grammarCompilation in "grammarCompilation.gSemantics" ;
import semantics XcodeProjectGeneration in "XcodeProjectGeneration.gSemantics" ;
import semantics mda_galgas_routines in "mda_galgas_routines.gSemantics" ;

import grammar galgas_LL1_grammar in "galgas_LL1_grammar.gGrammar" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          File List Template                                                  *
#                                                                              *
#------------------------------------------------------------------------------*

filewrapper EXfileListTemplateFileWrapper in "../creation_templates/file_list_template" {
 "mke"
} {
#--- Project
  template EXfileListTemplate "/file_list_template.mke"
    ?@string HAND_CODED_SOURCES_SUB_DIRS
    ?@string GALGAS_SOURCE_LIST
    ?@string HAND_CODED_SOURCE_LIST
  ;
}

#------------------------------------------------------------------------------*
#                                                                              *
#          Production rules declaration                                        *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@EXsemanticContext ioSemanticContext
  ?!@stringset ioImportedSemanticsComponentNameSet
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

nonterminal <parse_lexique_for_importing>
  ??@lstring inFileName
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label parse
;

nonterminal <parse_syntax_for_importing>
  ??@lstring inFileName
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label parse
;

nonterminal <parse_grammar_component_for_importing>
  ??@lstring inFileName
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMapForUse
  ?!@EXsemanticContext ioSemanticContext
label parse
;

nonterminal <parse_option_component_for_importing>
  ??@lstring inFileName
  ?!@M_optionComponents ioOptionsComponentsMap
label parse
;

#------------------------------------------------------------------------------*

listmap @EXtargetFileListMap (@stringlist) ;

#------------------------------------------------------------------------------*

enum @EXsourceFileKind {
  constructor externSourceFile ;
  constructor lexiqueSourceFile ;
  constructor guiSourceFile ;
  constructor optionSourceFile ;
  constructor syntaxSourceFile ;
  constructor semanticsSourceFile ;
  constructor grammarSourceFile ;
  constructor programSourceFile ;
}{
}

#------------------------------------------------------------------------------*

map @EXsourceFileMap {
  @string mFullPath ;
  @EXsourceFileKind mSourceKind ;
  insert insertKey error message "the '%K' source base name has been already declared in %L" ;
  search searchKey error message "the '%K' source base name is not declared" ;
}

#------------------------------------------------------------------------------*
#                                                                              *
#          Project component                                                   *
#                                                                              *
#------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $project$ ;
  $identifier$ ? @lstring sourceFileName ;
  @string s := [[[@string stringWithSourceFilePath] lastPathComponent] stringByDeletingPathExtension] ;
  if s != [sourceFileName string] then
    error sourceFileName : "the project name ('" . sourceFileName . "') should be the file base name '" . s . "'" ;
  end if ;
  $:$ ;
  @EXsourceFileMap sourceFileMap [emptyMap] ;
  @EXtargetFileListMap targetFileListMap [emptyMap] ;
  repeat
  while
    @EXsourceFileKind sourceFileKind ;
    select
      $extern$ ;
      sourceFileKind := [@EXsourceFileKind externSourceFile] ;
    or
      $gui$ ;
      sourceFileKind := [@EXsourceFileKind guiSourceFile] ;
    or
      $lexique$ ;
      sourceFileKind := [@EXsourceFileKind lexiqueSourceFile] ;
    or
      $option$ ;
      sourceFileKind := [@EXsourceFileKind optionSourceFile] ;
    or
      $semantics$ ;
      sourceFileKind := [@EXsourceFileKind semanticsSourceFile] ;
    or
      $syntax$ ;
      sourceFileKind := [@EXsourceFileKind syntaxSourceFile] ;
    or
      $grammar$ ;
      sourceFileKind := [@EXsourceFileKind grammarSourceFile] ;
    or
      $program$ ;
      sourceFileKind := [@EXsourceFileKind programSourceFile] ;
    end select ;
  #--- Source name
    $literal_string$ ?@lstring fileName ;
    @string baseName := [[[fileName string] lastPathComponent] stringByDeletingPathExtension] ;
  #--- Enter in source file map
    [!?sourceFileMap insertKey ![@lstring new !baseName ![fileName location]] ![fileName string] !sourceFileKind] ;
  #--- Targets
    select
    or
      $:$ ;
      repeat
        $identifier$ ? @lstring targetName ;
        targetFileListMap += ![targetName string] !baseName ;
        if [targetName string] == "xcode" then
          error targetName: "the target \"xcode\" name is obsolete: use \"xcode_tool\" and/or \"xcode_app\"" ;
        elsif ([targetName string] != "makefile") & ([targetName string] != "xcode_tool") & ([targetName string] != "xcode_app") then
          error targetName: "the target name should be \"makefile\", \"xcode_tool\" or \"xcode_app\"" ;
        end if ;
      while
        $,$ ;
      end repeat ;
    end select ;
    if [option.verbose_output] & (sourceFileKind != [@EXsourceFileKind externSourceFile]) then
      message "------ Compile file '" . [fileName string] . "'\n" ;
    end if ;
  #--- Compile file
    if (sourceFileKind == [@EXsourceFileKind optionSourceFile]) & ([fileName pathExtension] == "gOption") then
      @string s2 := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT" ;
      @parsedComponentStruct parsedComponentStruct [new
        ![@parsedSemanticsComponentMap emptyMap]
        ![@parsedLexiqueComponentMap emptyMap]
        ![@parsedSyntaxComponentMap emptyMap]
        ![@parsedOptionComponentMap emptyMap]
      ] ;
      compileOptionComponent !fileName !s2 !?parsedComponentStruct ;
    elsif (sourceFileKind == [@EXsourceFileKind lexiqueSourceFile]) & ([fileName pathExtension] == "gLexique") then
      @string s2 := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT" ;
      @parsedComponentStruct parsedComponentStruct [new
        ![@parsedSemanticsComponentMap emptyMap]
        ![@parsedLexiqueComponentMap emptyMap]
        ![@parsedSyntaxComponentMap emptyMap]
        ![@parsedOptionComponentMap emptyMap]
      ] ;
      compileLexiqueComponent !fileName !s2 !?parsedComponentStruct ;
    elsif (sourceFileKind == [@EXsourceFileKind guiSourceFile]) & ([fileName pathExtension] == "gGui") then
      @string s2 := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT" ;
      @parsedComponentStruct parsedComponentStruct [new
        ![@parsedSemanticsComponentMap emptyMap]
        ![@parsedLexiqueComponentMap emptyMap]
        ![@parsedSyntaxComponentMap emptyMap]
        ![@parsedOptionComponentMap emptyMap]
      ] ;
      @string absoluteFilePath := [fileName absolutePathFromPath ![[@string stringWithSourceFilePath] stringByDeletingLastPathComponent]] ;
      compileGuiComponent ![@lstring new !absoluteFilePath ![fileName location]] !s2 !?parsedComponentStruct ;
    elsif (sourceFileKind == [@EXsourceFileKind grammarSourceFile]) & ([fileName pathExtension] == "gGrammar") then
      const @string s2 := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT" ;
      @parsedComponentStruct parsedComponentStruct [new
        ![@parsedSemanticsComponentMap emptyMap]
        ![@parsedLexiqueComponentMap emptyMap]
        ![@parsedSyntaxComponentMap emptyMap]
        ![@parsedOptionComponentMap emptyMap]
      ] ;
      const @string absoluteFilePath := [fileName absolutePathFromPath ![[@string stringWithSourceFilePath] stringByDeletingLastPathComponent]] ;
      compileGrammarComponent
        ![@lstring new !absoluteFilePath ![fileName location]]
        !s2
        ![[@string stringWithSourceFilePath] stringByDeletingLastPathComponent]
        !?parsedComponentStruct
      ;
    elsif sourceFileKind != [@EXsourceFileKind externSourceFile] then
      grammar galgas_LL1_grammar label compileFile in fileName dependency "galgas-dep" in "DEPENDENCIES" ;
    end if ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
  if [option .verbose_output] then
    message "------ Project\n" ;
  end if ;
#--- Build galgas_sources/GALGAS_OUTPUT/file_list.mke
  @stringlist makefileFiles := [targetFileListMap listForKey !"makefile"] ;
  if [makefileFiles length] > 0 then
    @string externSourceFileList := "" ;
    @string galgasSourceList := "" ;
    @stringset pathSet [emptySet] ;
    pathSet += !"SOURCES_DIR += ../hand_coded_sources\n" ;
    foreach makefileFiles do
      @string fullPath ;
      @EXsourceFileKind sourceKind ;
      [sourceFileMap searchKey ![@lstring new !mValue !here] ?fullPath ?sourceKind] ;
      @string filePath := [fullPath stringByDeletingLastPathComponent] ;
      if sourceKind == [@EXsourceFileKind externSourceFile] then
        if [filePath firstCharacterOrNul] == '/' then
          pathSet += !"SOURCES_DIR += " . filePath . "\n" ;
        elsif filePath != "" then
          pathSet += !"SOURCES_DIR += ../hand_coded_sources/" . filePath . "\n" ;
        end if ;
        externSourceFileList .= "SOURCES += " . [fullPath lastPathComponent] . "\n" ;
      else
        galgasSourceList .= "SOURCES += " . [[fullPath lastPathComponent] stringByDeletingPathExtension] . ".cpp\n" ;
      end if ;
    end foreach ;
    @string pathesString := "" ;
    foreach pathSet do
      pathesString .= key ;
    end foreach ;
    @string newFileListContents := [filewrapper EXfileListTemplateFileWrapper.EXfileListTemplate
      !pathesString
      !galgasSourceList
      !externSourceFileList
    ] ;
    @string fileListPath := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT/file_list.mke" ;
    [newFileListContents writeToFileWhenDifferentContents !fileListPath ?*] ;
  end if ;
#--- Handle Xcode Project
  if not [option galgas_cli_options.doNotGenerateXcodeProject] then
  @stringlist xcode_tool_files := [targetFileListMap listForKey !"xcode_tool"] ;
  @stringlist xcode_app_files := [targetFileListMap listForKey !"xcode_app"] ;
  if ([@uint errorCount] == 0) & ([xcode_tool_files length] > 0) & ([xcode_app_files length] > 0) then
    @string XcodeProjectDir := [[[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] . "/project_xcode" ;
    #log XcodeProjectDir ;
    @stringlist iconFiles := [XcodeProjectDir regularFilesWithExtensions !false ![@stringlist listWithValue !"icns"]] ;
    @stringlist xcodeProjects := [XcodeProjectDir directoriesWithExtensions !false ![@stringlist listWithValue !"xcodeproj"]] ;
    #log xcodeProjects ;
    if [xcodeProjects length] == 0 then
#      message "****** Cannot update Xcode project, no project found in '" . XcodeProjectDir . "' directory. ********\n" ;
    elsif [xcodeProjects length] > 1 then
      message "****** Cannot update Xcode project, more than one project exist in '" . XcodeProjectDir . "' directory. ********\n" ;
    elsif [xcodeProjects length] == 1 then
      @string name ; [xcodeProjects first ?name] ;
      @string fullXcodePath := XcodeProjectDir . "/" . name . "/project.pbxproj" ;
    #--- Update Xcode project
      @string intermediateFilePath := [[@string stringWithSourceFilePath] stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT/file_list_for_xcode_project.txt" ;
      @stringset externSourceSet_tool [emptySet] ;
      @stringset guiSourceSet_tool [emptySet] ;
      @stringset scannerSourceSet_tool [emptySet] ;
      @stringset optionSourceSet_tool [emptySet] ;
      @stringset semanticsSourceSet_tool [emptySet] ;
      @stringset syntaxSourceSet_tool [emptySet] ;
      @stringset grammarSourceSet_tool [emptySet] ;
      @stringset programSourceSet_tool [emptySet] ;
      foreach xcode_tool_files do
        @string fullPath ;
        @EXsourceFileKind sourceKind ;
        [sourceFileMap searchKey ![@lstring new !mValue !here] ?fullPath ?sourceKind] ;
        switch sourceKind 
        when externSourceFile :
          externSourceSet_tool += !fullPath ;
        when lexiqueSourceFile :
          scannerSourceSet_tool += !mValue ;
        when guiSourceFile :
          guiSourceSet_tool += !mValue ;
        when optionSourceFile :
          optionSourceSet_tool += !mValue ;
        when syntaxSourceFile :
          syntaxSourceSet_tool += !mValue ;
        when semanticsSourceFile :
          semanticsSourceSet_tool += !mValue ;
        when grammarSourceFile :
          grammarSourceSet_tool += !mValue ;
        when programSourceFile :
          programSourceSet_tool += !mValue ;
        end switch ;
      end foreach ;
      @stringset externSourceSet_app [emptySet] ;
      @stringset guiSourceSet_app [emptySet] ;
      @stringset scannerSourceSet_app [emptySet] ;
      @stringset optionSourceSet_app [emptySet] ;
      @stringset semanticsSourceSet_app [emptySet] ;
      @stringset syntaxSourceSet_app [emptySet] ;
      @stringset grammarSourceSet_app [emptySet] ;
      @stringset programSourceSet_app [emptySet] ;
      foreach xcode_app_files do
        @string fullPath ;
        @EXsourceFileKind sourceKind ;
        [sourceFileMap searchKey ![@lstring new !mValue !here] ?fullPath ?sourceKind] ;
        switch sourceKind 
        when externSourceFile :
          externSourceSet_app += !fullPath ;
        when lexiqueSourceFile :
          scannerSourceSet_app += !mValue ;
        when guiSourceFile :
          guiSourceSet_app += !mValue ;
        when optionSourceFile :
          optionSourceSet_app += !mValue ;
        when syntaxSourceFile :
          syntaxSourceSet_app += !mValue ;
        when semanticsSourceFile :
          semanticsSourceSet_app += !mValue ;
        when grammarSourceFile :
          grammarSourceSet_app += !mValue ;
        when programSourceFile :
          programSourceSet_app += !mValue ;
        end switch ;
      end foreach ;
    #--- Build intermediate
      generateXcodeProject
        !externSourceSet_tool
        !guiSourceSet_tool
        !scannerSourceSet_tool
        !optionSourceSet_tool
        !semanticsSourceSet_tool
        !syntaxSourceSet_tool
        !grammarSourceSet_tool
        !programSourceSet_tool
        !externSourceSet_app
        !guiSourceSet_app
        !scannerSourceSet_app
        !optionSourceSet_app
        !semanticsSourceSet_app
        !syntaxSourceSet_app
        !grammarSourceSet_app
        !programSourceSet_app
        ![name stringByDeletingPathExtension] # XCode project base name
        ![fullXcodePath stringByDeletingLastPathComponent] # Full Path of xxx.xcodeproj file
        !iconFiles
        !intermediateFilePath
      ;
    end if ;
  end if ;
  end if ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $project$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while
    select
      $extern$ ;
    or
      $gui$ ;
    or
      $lexique$ ;
    or
      $option$ ;
    or
      $semantics$ ;
    or
      $syntax$ ;
    or
      $grammar$ ;
    or
      $program$ ;
    end select ;
    $literal_string$ ?* ;
    select
    or
      $:$ ;
      repeat
        $identifier$ ?* ;
      while
        $,$ ;
      end repeat ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $project$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while
    select
      $extern$ ;
    or
      $gui$ ;
    or
      $lexique$ ;
    or
      $option$ ;
    or
      $semantics$ ;
    or
      $syntax$ ;
    or
      $grammar$ ;
    or
      $program$ ;
    end select ;
    $literal_string$ ? * ;
    select
    or
      $:$ ;
      repeat
        $identifier$ ?* ;
      while
        $,$ ;
      end repeat ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
  ?!@stringset unused ioImportedSemanticsComponentNameSet
:
  $project$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while
    select
      $extern$ ;
    or
      $gui$ ;
    or
      $lexique$ ;
    or
      $option$ ;
    or
      $semantics$ ;
    or
      $syntax$ ;
    or
      $grammar$ ;
    or
      $program$ ;
    end select ;
    $literal_string$ ? * ;
    select
    or
      $:$ ;
      repeat
        $identifier$ ?* ;
      while
        $,$ ;
      end repeat ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $project$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while
    select
      $extern$ ;
    or
      $gui$ ;
    or
      $lexique$ ;
    or
      $option$ ;
    or
      $semantics$ ;
    or
      $syntax$ ;
    or
      $grammar$ ;
    or
      $program$ ;
    end select ;
    $literal_string$ ? * ;
    select
    or
      $:$ ;
      repeat
        $identifier$ ?* ;
      while
        $,$ ;
      end repeat ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $project$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while
    select
      $extern$ ;
    or
      $gui$ ;
    or
      $lexique$ ;
    or
      $option$ ;
    or
      $semantics$ ;
    or
      $syntax$ ;
    or
      $grammar$ ;
    or
      $program$ ;
    end select ;
    $literal_string$ ? * ;
    select
    or
      $:$ ;
      repeat
        $identifier$ ?* ;
      while
        $,$ ;
      end repeat ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $project$ ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Compile file component                                              *
#                                                                              *
#------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $compile$ ;
  @lstring fileName ;
  $literal_string$ ? fileName ;
  $;$ ;
  if [option.verbose_output] then
    message "------ Compile file '" . [fileName string] . "'\n" ;
  end if ;
  grammar galgas_LL1_grammar label compileFile in fileName dependency "galgas-dep" in "DEPENDENCIES" ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
  ?!@stringset unused ioImportedSemanticsComponentNameSet
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $compile$ ;
  $literal_string$ ? * ;
  $;$ ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse lexique component for importing                               *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_lexique_for_importing>
  ??@lstring inFileName
  ?!@M_lexiqueComponents ioLexiqueMapForUse
:
  grammar galgas_LL1_grammar label importLexique in inFileName
    !?ioLexiqueMapForUse
  ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse syntax component for importing                                *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_syntax_for_importing>
  ??@lstring inFileName
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@EXsemanticContext ioSemanticContext
:
  grammar galgas_LL1_grammar label importSyntax in inFileName
    !?ioSyntaxComponentsMap
    !?ioSemanticContext
  ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse grammar component for importing                               *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_grammar_component_for_importing>
  ??@lstring inFileName
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMapForUse
  ?!@EXsemanticContext ioSemanticContext
:
  grammar galgas_LL1_grammar label importGrammarForSemantics in inFileName
    !?ioGrammarComponentsMap
    !?ioOptionsComponentsMapForUse
    !?ioSemanticContext
  ;
end rule ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Parse option component for importing                                *
#                                                                              *
#------------------------------------------------------------------------------*

rule <parse_option_component_for_importing>
  ??@lstring inFileName
  ?!@M_optionComponents ioOptionsComponentsMap
:
  grammar galgas_LL1_grammar label importOptions in inFileName
    !? ioOptionsComponentsMap
  ;
end rule ;

#------------------------------------------------------------------------------*

end syntax ;
