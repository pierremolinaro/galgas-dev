semantics lexiqueSemantics :
import "lexiqueTypesForAST.gSemantics" ;

#---------------------------------------------------------------------------*

enum @lexicalTypeEnum {
  lexicalType_string, lexicalType_char, lexicalType_uint,
  lexicalType_uint64, lexicalType_sint, lexicalType_sint64,
  lexicalType_double
}{
}

#---------------------------------------------------------------------------*

list @lexicalTypeList {
  @lexicalTypeEnum mLexicalType ; 
}

#---------------------------------------------------------------------------*

map @lexicalTypeMap {
  @lexicalTypeEnum mLexicalType ;
  insert insertKey error message "the '@%K' lexical type is already declared in %L" ;
  search searchKey error message "there is no '@%K' lexical type" ;
}

#---------------------------------------------------------------------------*

map @lexicalAttributeMap {
  @lexicalTypeEnum mLexicalType ;
  insert insertKey error message "the '%K' lexical attribute has been already declared in %L" ;
  search searchKey error message "the '%K' lexical attribute is not declared" ;
}

#---------------------------------------------------------------------------*

list @lexicalSentValueList {
  @string mLexicalAttributeName ;
  @lexicalTypeEnum mLexicalType ;
}

#---------------------------------------------------------------------------*

map @terminalMap {
  @lexicalSentValueList mSentAttributeList ;
  insert insertKey error message "the '%K' terminal has been already declared in %L" ;
  search searchKey error message "the '%K' terminal is not declared" ;
}

#---------------------------------------------------------------------------*

list @terminalList {
  @lstring mTerminalName ;
  @lexicalSentValueList mSentAttributeList ;
  @string mSyntaxErrorMessage ;
  @bool mIsEndOfTemplateMark ;
  @bool mAtomicSelection ; # True if atomic selection in source editor
  @uint mStyleIndex ; # 0 if default style
}

#---------------------------------------------------------------------------*

map @lexicalExplicitTokenListMap {
  @lstring mTerminal ;
  @lstringlist mFeatureList ;
  insert insertKey error message "the '%K' terminal has been already declared in the list" ;
  search searchKey error message "the '%K' terminal is not declared" ;
}

#---------------------------------------------------------------------------*

sortedlist @tokenSortedlist {
  @uint mLength ;
  @string mName ;
  @string mTerminalName ;
}{
  mLength <, mName <
}

#---------------------------------------------------------------------------*

map @lexicalExplicitTokenListMapMap {
  @lexicalExplicitTokenListMap mExplicitTokenListMap ;
  @tokenSortedlist mTokenSortedList ;
  @bool mShouldBeGenerated ;
  insert insertKey error message "the '%K' token list has been already declared in %L" ;
  search searchKey error message "the '%K' token list is not declared" ;
}

#---------------------------------------------------------------------------*

map @lexicalMessageMap {
  @lstring mLexicalMessage ;
  @bool mMessageIsUsed ;
  insert insertKey error message "the '%K' message has been already declared in %L" ;
  search searchKey error message "the '%K' message is not declared" ;
}

#---------------------------------------------------------------------------*

list @lexicalRoutineFormalArgumentList {
  @lexicalArgumentModeAST mLexicalFormalArgumentMode ;
  @lexicalTypeEnum mLexicalFormalArgumentType ;
  @string mArgumentNameForComment ;
 }

#---------------------------------------------------------------------------*

map @lexicalRoutineMap {
  @lexicalRoutineFormalArgumentList mLexicalRoutineFormalArgumentList ;
  @stringlist mErrorMessageList ;
  @bool mIsExtern ;
  insert insertKey error message "the '%K' lexical routine has been already declared" ;
  search searchKey error message "the '%K' lexical routine is not declared" ;
}

#---------------------------------------------------------------------------*

list @lexicalFunctionFormalArgumentList {
  @lexicalTypeEnum mLexicalType ;
  @string mArgumentNameForComment ;
}

#---------------------------------------------------------------------------*

map @lexicalFunctionMap {
  @lexicalFunctionFormalArgumentList mLexicalTypeList ;
  @lexicalTypeEnum mReturnedLexicalType ;
  @string mReplacementFunctionName ; # If obsolete, the name of replacement routine
  @bool mIsExtern ;
  insert insertKey error message "the '%K' lexical function has been already declared" ;
  search searchKey error message "the '%K' lexical function is not declared" ;
}


#---------------------------------------------------------------------------*

list @templateDelimitorList {
  @lstring mStartString ;
  @lstring mEndString ;
  @bool mPreservesStartDelimiter ;
}

#------------------------------------------------------------------*
#                       Styles map                                 *
#------------------------------------------------------------------*

map @styleMap {
  @lstring mComment ;
  @uint mStyleIndex ; # Allways > 0
  insert insertKey error message "the '%K' style is already declared in %L" ;
  search searchKey error message "the '%K' style is not declared" ;
}

#------------------------------------------------------------------*

map @lexicalTagMap {
  insert insertKey error message "the '%K' tag is already declared in %L",
                                 "the '%K' tag declaration shadows the tag declared in %L" ;
  search searchKey error message "the '%K' tag is not declared" ;
}

#---------------------------------------------------------------------------*

struct @lexiqueAnalysisContext {
  @lexicalRoutineMap mLexicalRoutineMessageMap ;
  @lexicalFunctionMap mLexicalFunctionMap ;
  @lexicalMessageMap mLexicalMessageMap ;
  @terminalMap mTerminalMap ;
  @terminalList mTerminalList ;
  @lexicalAttributeMap mLexicalAttributeMap ;
  @lexicalExplicitTokenListMapMap mLexicalTokenListMap ;
  @stringset mUnicodeStringToGenerate ;
  @templateDelimitorList mTemplateDelimitorList ;
  @styleMap mStyleMap ;
  @stringset mExternUnicodeTestFunctions ;
}

#---------------------------------------------------------------------------*

end semantics ;