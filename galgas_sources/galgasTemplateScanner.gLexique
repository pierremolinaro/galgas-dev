#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS template scanner definition                                       *
#                                                                           *
#  Copyright (C) 2008, ..., 2008 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

template lexique galgasTemplateScanner :

template "%" ... "%" ;

replace "!%" -> "%" ;

@string identifierString ;
@uint uint32value ;
@sint sint32value ;
@uint64 uint64value ;
@sint64 sint64value ;
@char charValue ;
@string tokenString ;

style keywordsStyle -> "Keywords:" ;
style delimitersStyle -> "Delimiters:" ;
style terminalStyle -> "Terminal Symbols:" ;
style nonTerminalStyle -> "Non Terminal Symbols:" ;
style integerStyle -> "Integer Constants:" ;
style float_csts -> "Floating Point Constants:" ;
style characterStyle -> "Character Constants:" ;
style stringStyle -> "String Constants:" ;
style typeNameStyle -> "Type Names (@...):" ;
style commentStyle -> "Comments:" ;

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier" ;

list galgasKeyWordList error message "the '%K' keyword" style keywordsStyle :
  "abstract",
  "block",
  "call",
  "cast",
  "class",
  "compile",
  "const",
  "constructor",
  "default",
  "description",
  "do",
  "domain",
  "drop",
  "else",
  "elsif",
  "end",
  "entity",
  "enum",
  "error",
  "extends",
  "extern",
  "extract",
  "false",
  "filewrapper",
  "foreach",
  "grammar",
  "gui",
  "here",
  "if",
  "import",
  "import__",
  "in",
  "insert",
  "label",
  "lexique",
  "list",
  "log",
  "loop",
  "map",
  "mapindex",
  "match",
  "message",
  "metamodel",
  "method",
  "mod",
  "modifier",
  "nonterminal",
  "not",
  "on",
  "once",
  "operator",
  "option",
  "or",
  "override",
  "parse",
  "program",
  "reader",
  "remove",
  "repeat",
  "rewind",
  "root",
  "routine",
  "rule",
  "search",
  "select",
  "self",
  "semantics",
  "send",
  "sortedlist",
  "state",
  "struct",
  "style",
  "switch",
  "syntax", 
  "tag",
  "template",
  "then",
  "treewalking",
  "true",
  "unused",
  "warning",
  "when",              
  "while" ;

rule 'a'->'z' |  'A'->'Z' :
  repeat
    enterCharacterIntoString !?identifierString !toLower (!*) ;
    enterCharacterIntoString !?tokenString !* ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send search identifierString in galgasKeyWordList default $identifier$ ;
end rule ;

#------------------------------- Integer, floating Point Constant ------------------
@double floatValue ;
$literal_double$ !floatValue !tokenString error message "a float number" style float_csts ;
$unsigned_literal_integer$ ! uint32value error message "a 32-bit unsigned decimal number" style integerStyle ;
$signed_literal_integer$ ! sint32value error message "a 32-bit signed decimal number" style integerStyle ;
$unsigned_literal_integer64$ ! uint64value error message "a 64-bit unsigned decimal number" style integerStyle ;
$signed_literal_integer64$ ! sint64value error message "a 64-bit signed decimal number" style integerStyle ;

message decimalNumberTooLarge : "decimal number too large" ;
message floatNumberConversionError : "invalid float number" ;
message internalError : "internal error" ;

rule '0'->'9' :
  enterCharacterIntoString !?tokenString !* ;
  repeat
  while '0'->'9' :
    enterCharacterIntoString !?tokenString !* ;
  while '_' :
  end repeat ;
  select
  when 'S' | 's' :
    convertDecimalStringIntoSInt !tokenString !?sint32value error decimalNumberTooLarge, internalError ;
    send $signed_literal_integer$ ;
  when "LS" :
    convertDecimalStringIntoSInt64 !tokenString !?sint64value error decimalNumberTooLarge, internalError ;
    send $signed_literal_integer64$ ;
  when 'L' :
    convertDecimalStringIntoUInt64 !tokenString !?uint64value error decimalNumberTooLarge, internalError ;
    send $unsigned_literal_integer64$ ;
  when '.' :
    enterCharacterIntoString !?tokenString !'.' ;
    repeat
    while '0'->'9' :
      enterCharacterIntoString !?tokenString !* ;
    while '_' :
    end repeat ;
    convertStringToDouble !tokenString !?floatValue error floatNumberConversionError ;
    send $literal_double$ ;
  default
    convertDecimalStringIntoUInt !tokenString !?uint32value error decimalNumberTooLarge, internalError ;
    send $unsigned_literal_integer$ ;
  end select ;
end rule ;


#------------------------------- Floating point Number ------------------
$.$ error message "the '.' delimitor" style delimitersStyle ;
$.=$ error message "the '.=' delimitor" style delimitersStyle ;
$...$ error message "the '...' delimitor" style delimitersStyle ;

#--- Floating Point constant begining with a dot
rule '.' :
  select
  when '0'->'9' :
    enterCharacterIntoString !?tokenString !'0' ;
    enterCharacterIntoString !?tokenString !'.' ;
    enterCharacterIntoString !?tokenString !* ;
    repeat
    while '0'->'9' :
      enterCharacterIntoString !?tokenString !* ;
    while '_' :
    end repeat ;
    convertStringToDouble !tokenString !?floatValue error floatNumberConversionError ;
    send $literal_double$ ;
  default
    select
    when ".." :
      send $...$ ;
    when "=" :
      send $.=$ ;
    default
      send $.$ ;
    end select ;
  end select ;
end rule ;

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList error message "the '%K' delimitor" style delimitersStyle :
  "*",     "|",    ",",      "+",     "--",
  "::",    ">",    ";",      ":",
  "-",     "(",    ")",     "->",      "?",
  "==",   "??",    "!",     ":=",     "++",
  "[",     "]",   "+=",     "?!",     "!?",
  "/",    "!=",   ">=",      "&",
  "{",     "}",   "+>",     "-=",
  "^",    ">>",    "~",     "<-" ;

rule list galgasDelimitorsList ;


# --------- Special delimitors / non terminal symbol --------------------------
$<$ error message "the '<' delimitor" style delimitersStyle ;
$<=$ error message "the '<=' delimitor" style delimitersStyle ;
$<<$ error message "the '<<' delimitor" style delimitersStyle ;

rule '<' :
  select
  when '=' :
    send $<=$ ;
  when '<' :
    send $<<$ ;
  default
    send $<$ ;
  end select ;
end rule ;

# ------------------------------------ Comment ----------------------------
$comment$ error message "a comment" style commentStyle ;
rule '#' :
  repeat
  while '\u0001' -> '\u0009' | '\u000B' | '\u000C' | '\u000E' -> '\uFFFD' :
  end repeat ;
  drop $comment$ ;
end rule ;

# --------------------- separators -----------------------------------------
rule '\u0001' -> ' ' :
end rule ;

end lexique ;
