#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS option component parser definition                                *
#                                                                           *
#  Copyright (C) 2004, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax cli_options_parser :

import lexique galgas_scanner in "galgas_scanner.gLexique" ;

import semantics common_semantics in "common_semantics.gSemantics" ;

#-------------------------------------------------------------------*

nonterminal <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@EXsemanticContext ioSemanticContext
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@EXsemanticContext ioSemanticContext
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@EXsemanticContext ioSemanticContext
  ?!@stringset ioImportedSemanticsComponentNameSet
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@EXsemanticContext ioSemanticContext
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

extern routine generate_option_component
  ?!@lstring inOptionComponentName
  ?!@M_cli_options inBoolOptionMap
  ?!@M_cli_options inUintOptionMap
  ?!@M_cli_options inStringOptionMap
;

#-------------------------------------------------------------------*
#                   option component                                *
#-------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  @M_cli_options boolOptionsMap [emptyMap] ;
  @M_cli_options uintOptionsMap [emptyMap] ;
  @M_cli_options stringOptionsMap [emptyMap] ;
  @stringset optionNameSet [emptySet] ;
#--- Option component header
  $option$ ;
  @lstring optionComponentName ;
  $identifier$ ? optionComponentName ;
  @string basename := [[[@string stringWithSourceFilePath] lastPathComponent] stringByDeletingPathExtension] ;
  if [optionComponentName string] != basename then
    warning optionComponentName: "GALGAS 1.7.5 and later checks "
      "the component name ('" . [optionComponentName string]
    . "') against the source file base name ('" . basename . "'): they should be identical"
    ;
  end if ; 
  $:$ ;
#--- option declarations
  repeat
  while 
    @lstring typeName ;
    $type_name$ ?typeName  ;
    @lstring optionName ;
    $identifier$ ? optionName ;
    $:$ ;
    @lchar optionChar ;
    $literal_char$ ? optionChar ;
    $,$ ;
    @lstring optionString ;
    $literal_string$ ? optionString ;
    $->$ ;
    @lstring optionComment ;
    $literal_string$ ? optionComment ;
    @string defaultValue ;
    select
      defaultValue := "0" ;
      if [typeName string] == "bool" then
        defaultValue := "false" ;
      elsif [typeName string] == "uint" then
        warning here : "No default value for this option, 0 will be used" ;
      end if ;
    or
      $default$ ;
      if [typeName string] == "bool" then
        error here : "'default' construct is not allowed for a @bool option (allways false by default)" ;
      elsif [typeName string] == "string" then
        error here : "'default' construct is not allowed for a @string option (allways false by default)" ;
      end if ;
      @luint v ;
      $unsigned_literal_integer$ ? v ;
      defaultValue := [[v uint] string] ;
    end select ;
    $;$ ;
    if [optionNameSet hasKey ![optionName string]] then
      error optionName : "the '" . [optionName string] . "' command line option has been already declared" ;
    elsif [typeName string] == "bool" then
      [!?boolOptionsMap insertKey !optionName !optionChar !optionString !optionComment !defaultValue] ;
    elsif [typeName string] == "uint" then
      [!?uintOptionsMap insertKey !optionName !optionChar !optionString !optionComment !defaultValue] ;
    elsif [typeName string] == "string" then
      [!?stringOptionsMap insertKey !optionName !optionChar !optionString !optionComment !defaultValue] ;
    else
      error typeName : "only @bool, @uint or @string types can be used here" ;
    end if ;
    optionNameSet += ![typeName string] ;
  end repeat ;
  $end$ ;
  $option$ ;
  $;$ ;
#--- Enter option component in option component map
  [!?ioOptionsComponentsMap insertKey !optionComponentName !boolOptionsMap !uintOptionsMap !stringOptionsMap] ;
#--- Generate option component
  generate_option_component !?optionComponentName !?boolOptionsMap !?uintOptionsMap !?stringOptionsMap ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $option$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while 
    $type_name$ ?*  ;
    $identifier$ ? * ;
    $:$ ;
    $literal_char$ ? * ;
    $,$ ;
    $literal_string$ ? * ;
    $->$ ;
    $literal_string$ ? * ;
    select
    or
      $default$ ;
      $unsigned_literal_integer$ ? * ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $option$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $option$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while 
    $type_name$ ?*  ;
    $identifier$ ? * ;
    $:$ ;
    $literal_char$ ? * ;
    $,$ ;
    $literal_string$ ? * ;
    $->$ ;
    $literal_string$ ? * ;
    select
    or
      $default$ ;
      $unsigned_literal_integer$ ? * ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $option$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@EXsemanticContext unused ioSemanticContext
  ?!@stringset unused ioImportedSemanticsComponentNameSet
:
  $option$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while 
    $type_name$ ?*  ;
    $identifier$ ? * ;
    $:$ ;
    $literal_char$ ? * ;
    $,$ ;
    $literal_string$ ? * ;
    $->$ ;
    $literal_string$ ? * ;
    select
    or
      $default$ ;
      $unsigned_literal_integer$ ? * ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $option$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@EXsemanticContext unused ioSemanticContext
:
  $option$ ;
  $identifier$ ? * ;
  $:$ ;
  repeat
  while 
    $type_name$ ?*  ;
    $identifier$ ? * ;
    $:$ ;
    $literal_char$ ? * ;
    $,$ ;
    $literal_string$ ? * ;
    $->$ ;
    $literal_string$ ? * ;
    select
    or
      $default$ ;
      $unsigned_literal_integer$ ? * ;
    end select ;
    $;$ ;
  end repeat ;
  $end$ ;
  $option$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
:
  @M_cli_options boolOptionsMap [emptyMap] ;
  @M_cli_options uintOptionsMap [emptyMap] ;
  @M_cli_options stringOptionsMap [emptyMap] ;
  @stringset optionNameSet [emptySet] ;
#--- Option component header
  $option$ ;
  @lstring optionComponentName ;
  $identifier$ ? optionComponentName ;
  $:$ ;
#--- option declarations
  repeat
  while
    @lstring typeName ;
    $type_name$ ?typeName  ;
    @lstring optionName ;
    $identifier$ ? optionName ;
    $:$ ;
    @lchar optionChar ;
    $literal_char$ ? optionChar ;
    $,$ ;
    @lstring optionString ;
    $literal_string$ ? optionString ;
    $->$ ;
    @lstring optionComment ;
    $literal_string$ ? optionComment ;
    @string defaultValue ;
    select
      defaultValue := "0" ;
      if [typeName string] == "bool" then
        defaultValue := "false" ;
      elsif [typeName string] == "uint" then
        warning here : "No default value for this option, 0 will be used" ;
      end if ;
    or
      $default$ ;
      if [typeName string] == "bool" then
        error here : "'default' construct is not allowed for a @bool option (allways false by default)" ;
      end if ;
      @luint v ;
      $unsigned_literal_integer$ ? v ;
      defaultValue := [[v uint] string] ;
    end select ;
    $;$ ;
    if [optionNameSet hasKey ![optionName string]] then
      error optionName : "the '" . [optionName string] . "' command line option has been already declared" ;
    elsif [typeName string] == "bool" then
      [!?boolOptionsMap insertKey !optionName !optionChar !optionString !optionComment !defaultValue] ;
    elsif [typeName string] == "uint" then
      [!?uintOptionsMap insertKey !optionName !optionChar !optionString !optionComment !defaultValue] ;
    elsif [typeName string] == "string" then
      [!?stringOptionsMap insertKey !optionName !optionChar !optionString !optionComment !defaultValue] ;
    else
      error typeName : "only @bool, @uint or @string types can be used here" ;
    end if ;
    optionNameSet += ![typeName string] ;
  end repeat ;
  $end$ ;
  $option$ ;
  $;$ ;
  [!?ioOptionsComponentsMap insertKey !optionComponentName !boolOptionsMap !uintOptionsMap !stringOptionsMap] ;
end rule ;

#-------------------------------------------------------------------*

end syntax ;
