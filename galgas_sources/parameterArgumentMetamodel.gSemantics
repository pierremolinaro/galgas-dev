#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics parameterArgumentMetamodel :
import "expressionMetamodel.gSemantics" ;
import semantics expressionMetamodel in "expressionMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#   F O R M A L    A R G U M E N T S    P A S S I N G    M O D E S          *
#                                                                           *
#---------------------------------------------------------------------------*

enum @formalArgumentPassingMode {
  argumentIn, argumentOut, argumentInOut, argumentConstantIn
}{
  reader formalArgumentMessage :
    argumentConstantIn -> "a constant input (??) formal argument" ;
    argumentIn -> "an input (?) formal argument" ;
    argumentOut -> "an output (!) formal argument" ;
    argumentInOut -> "an input/output (?!) argument" ;
  end reader ;

  reader formalArgumentString :
    argumentConstantIn -> "'??'" ;
    argumentIn -> "'?'" ;
    argumentOut -> "'!'" ;
    argumentInOut -> "'?!'" ;
  end reader ;

  reader string :
    argumentConstantIn -> "??" ;
    argumentIn -> "?" ;
    argumentOut -> "!" ;
    argumentInOut -> "?!" ;
  end reader ;

  reader generation1ForFormalParameter :
    argumentConstantIn -> "const " ;
    argumentIn -> "" ;
    argumentOut -> "" ;
    argumentInOut -> "" ;
  end reader ;

  reader generation2ForFormalParameter :
    argumentConstantIn -> "" ;
    argumentIn -> "" ;
    argumentOut -> " &" ;
    argumentInOut -> " &" ;
  end reader ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R M A L    P A R A M E T E R    L I S T                              *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalParameterList {
  @formalArgumentPassingMode mFormalParameterPassingMode ;
  @lstring mFormalParameterTypeName ;
  @lstring mFormalParameterName ;
  @bool mIsUnused ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R M A L    I N P U T    P A R A M E T E R    L I S T                 *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalInputParameterList {
  @lstring mFormalParameterTypeName ;
  @lstring mFormalParameterName ;
  @bool mIsUnused ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    P A R A M E T E R                                         *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @actualParameter {
}

#---------------------------------------------------------------------------*

class @outputActualParameter extends @actualParameter {
  @semanticExpression mOutputActualParameterExpression ;
}

#---------------------------------------------------------------------------*

class @outputInputActualParameter extends @actualParameter {
  @lstring mOutputInputActualParameterName ;
  @lstringlist mStructAttributeList ;
}

#---------------------------------------------------------------------------*

class @inputActualParameter extends @actualParameter {
  @lstring mDeclarationTypeName ;
  @lstring mInputActualParameterName ;
}

#---------------------------------------------------------------------------*

class @inputJokerActualParameter extends @actualParameter {
}

#---------------------------------------------------------------------------*

list @actualParameterList {
  @actualParameter mActualParameter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    I N P U T    P A R A M E T E R    L I S T                 *
#                                                                           *
#---------------------------------------------------------------------------*

list @actualInputParameterList {
  @lstring mActualParameterTypeName ; # Empty if no type
  @lstring mActualParameterName ;
}

#---------------------------------------------------------------------------*

end semantics ;
