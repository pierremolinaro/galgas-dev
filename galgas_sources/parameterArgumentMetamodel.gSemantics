#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics parameterArgumentMetamodel :
import "commonSemantics.gSemantics" ;
import semantics commonSemantics in "commonSemantics.gSemantics" ;
import semantics expressionMetamodel in "expressionMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R M A L    P A R A M E T E R S                                       *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalParameterList {
  @formalArgumentPassingMode mFormalParameterPassingMode ;
  @lstring mFormalParameterTypeName ;
  @lstring mFormalParameterName ;
  @bool mIsUnused ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R M A L    I N P U T    P A R A M E T E R S                          *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalInputParameterList {
  @lstring mFormalParameterTypeName ;
  @lstring mFormalParameterName ;
  @bool mIsUnused ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    P A R A M E T E R                                         *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @actualParameter {
}

#---------------------------------------------------------------------------*

class @outputActualParameter extends @actualParameter {
  @semanticExpression mOutputActualParameterExpression ;
}

#---------------------------------------------------------------------------*

class @outputInputActualParameter extends @actualParameter {
  @lstring mOutputInputActualParameterName ;
}

#---------------------------------------------------------------------------*

class @inputActualParameter extends @actualParameter {
  @lstring mInputActualParameterName ;
}

#---------------------------------------------------------------------------*

class @inputJokerActualParameter extends @actualParameter {
}

#---------------------------------------------------------------------------*

list @actualParameterList {
  @actualParameter mActualParameter ;
}

#---------------------------------------------------------------------------*

end semantics ;
