#---------------------------------------------------------------------------*
#                                                                           *
#  Component for building type map of a semantics component                 *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsCompilation :
import "semanticsMetamodel.gSemantics" ;
import "semanticsSemantics.gSemantics" ;
import semantics semanticsMetamodel in "semanticsMetamodel.gSemantics" ;
import semantics semanticsSemantics in "semanticsSemantics.gSemantics" ;
import grammar semanticsSLRgrammar in "semanticsSLRgrammar.gGrammar" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C O N S T R U C T    B U I L T I N     T Y P E    M A P                *
#                                                                           *
#---------------------------------------------------------------------------*

routine constructBuiltinTypeMap
  !@typeMap outTypeMap
:
  outTypeMap := [@typeMap emptyMap] ;
#--- Enter builtin type
  [!?outTypeMap insertKey ![@lstring new !"string"    !here] ![@stringGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"char"      !here] ![@charGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"bool"      !here] ![@boolGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint"      !here] ![@uintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint"      !here] ![@sintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint64"    !here] ![@uint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint64"    !here] ![@sint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"double"    !here] ![@doubleGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lstring"   !here] ![@lstringGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lchar"     !here] ![@lcharGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lbool"     !here] ![@lboolGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint"     !here] ![@luintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint"     !here] ![@lsintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint64"   !here] ![@luint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint64"   !here] ![@lsint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"ldouble"   !here] ![@ldoubleGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"binaryset" !here] ![@binarysetGalgasType new]] ;
  [!?outTypeMap insertKey ![@lstring new !"stringset" !here] ![@stringsetGalgasType new]] ;
  [!?outTypeMap insertKey ![@lstring new !"location"  !here] ![@locationGalgasType  new]] ;
#--- @lstringlist type
  @attributeList lstringAttribute [emptyList] ;
  @typeMapIndex lstringIndex ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"lstring" !here] !?outTypeMap ?lstringIndex] ;
  lstringAttribute += !lstringIndex ![@lstring new !"mValue" !here] ;
  @lstring lstringlist [new !"lstringlist" !here] ;
  [!?outTypeMap insertKey !lstringlist ![@listGalgasType new !lstringlist !lstringAttribute]] ;
#--- @stringlist type
  @attributeList stringAttribute [emptyList] ;
  @typeMapIndex stringIndex ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"string" !here] !?outTypeMap ?stringIndex] ;
  stringAttribute += !stringIndex ![@lstring new !"mValue" !here] ;
  @lstring stringlist [new !"stringlist" !here] ;
  [!?outTypeMap insertKey !stringlist ![@listGalgasType new !stringlist !stringAttribute]] ;
#--- @uint64list type
  @attributeList uint64Attribute [emptyList] ;
  @typeMapIndex uint64Index ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"uint64" !here] !?outTypeMap ?uint64Index] ;
  uint64Attribute += !uint64Index ![@lstring new !"mValue" !here] ;
  @lstring uint64list [new !"uint64list" !here] ;
  [!?outTypeMap insertKey !uint64list ![@listGalgasType new !uint64list !uint64Attribute]] ;
#--- @luintlist type
  @attributeList luintAttribute [emptyList] ;
  @typeMapIndex luintIndex ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"luint" !here] !?outTypeMap ?luintIndex] ;
  luintAttribute += !luintIndex ![@lstring new !"mValue" !here] ;
  @lstring luintlist [new !"luintlist" !here] ;
  [!?outTypeMap insertKey !luintlist ![@listGalgasType new !luintlist !luintAttribute]] ;
#--- @uintlist type
  @attributeList uintAttribute [emptyList] ;
  @typeMapIndex uintIndex ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"uint" !here] !?outTypeMap ?uintIndex] ;
  uintAttribute += !uintIndex ![@lstring new !"mValue" !here] ;
  @lstring uintlist [new !"uintlist" !here] ;
  [!?outTypeMap insertKey !uintlist ![@listGalgasType new !uintlist !uintAttribute]] ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C S   C O N T E X T                         *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclaration enterType
  ?!@semanticContext unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override
method @mapDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@mapType new
    !mMapTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mMapTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle map type name
  @typeMapIndex mapTypeIndex ;
  [@typeMapIndex makeRegularIndex !mMapTypeName !?ioSemanticContext.mTypeMap ?mapTypeIndex] ;
#--- Enter type in type map
  @ACGalgasType t := [@mapindexType new
    !mMapIndexTypeName
    !mapTypeIndex
    !mSearchMethodName
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mMapIndexTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @enumConstructorMap enumConstructorMap [emptyMap] ;
  foreach mConstructorConstantList do
    [!?enumConstructorMap insertKey !mValue] ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@enumType new
    !mEnumTypeName
    !enumConstructorMap
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mEnumTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclaration enterType
  ?!@semanticContext unused ioSemanticContext
:
  message "@filewrapperDeclaration.enterType [in semanticCompilation.gSemantics]\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@listGalgasType new
    !mSortedListTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mSortedListTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@structGalgasType new
    !mStructTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mStructTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@listGalgasType new
    !mListTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mListTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle super class
  @typeMapIndex superClassIndex ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@typeMapIndex null] ;
  else
    [@typeMapIndex makeRegularIndex !mSuperClassName !?ioSemanticContext.mTypeMap ?superClassIndex] ;
  #--- Enter in descendant class listmap
    @typeMapIndex classIndex ;
    [@typeMapIndex makeRegularIndex !mClassTypeName !?ioSemanticContext.mTypeMap ?classIndex] ;
    ioSemanticContext.mDescendantClassListMap += ![mSuperClassName string] !classIndex ;
  end if ;
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Handle methods
  @classMethodList methodList [emptyList] ;
#--- Enter type in type map
  @classGalgasType t := [@classGalgasType new
    !mIsAbstract
    !mClassTypeName
    !superClassIndex
    !attributeList
    !methodList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mClassTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclaration enterType # Handles also routine declaration
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @signature routineSignature [emptyList] ;
  foreach mFormalParameterList do
    @typeMapIndex parameterTypeIndex ;
    [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalParameterName !mFormalParameterPassingMode ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext.mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclaration enterType # Handles also function declaration
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @signature functionSignature [emptyList] ;
  foreach mFormalParameterList do
    @typeMapIndex parameterTypeIndex ;
    [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex !mFormalParameterName !mFormalParameterPassingMode ;
  end foreach ;
#--- Result type
  @typeMapIndex resultTypeIndex ;
  [@typeMapIndex makeRegularIndex !mResultTypeName !?ioSemanticContext.mTypeMap ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
  @typeMapIndex associatedListTypeIndex ;
  [@typeMapIndex makeRegularIndex !mAssociatedListTypeName !?ioSemanticContext.mTypeMap ?associatedListTypeIndex] ;
#--- Enter type in type map
  @ACGalgasType t := [@listmapGalgasType new
    !mListmapTypeName
    !associatedListTypeIndex
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mListmapTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@semanticDeclarationList inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContext outSemanticContext
:
#--- Builtin types
  @typeMap typeMap ;
  constructBuiltinTypeMap ?typeMap ;
#--- Build initial semantic context
  outSemanticContext := [@semanticContext new
    !typeMap
    ![@routineMap emptyMap]
    ![@functionMap emptyMap]
    ![@descendantClassListMap emptyMap]
  ] ;
#--- Loop throught all declarations
  foreach inSemanticDeclarationList do
    [mSemanticDeclaration enterType !?outSemanticContext] ;
  end foreach ;
#--- Check there is no undefined type
  if [@uint errorCount] == 0 then
    @stringlist undefinedClasses := [[outSemanticContext mTypeMap] unsolvedIndexKeyStringList] ;
    if [undefinedClasses length] == 1 then
      @string errorMessage := "there is 1 undefined type:" ;
      foreach undefinedClasses do
        errorMessage .= "\n-  @" . mValue ;
      end foreach ;
      error inEndOfSourceFile : errorMessage ;
    elsif [undefinedClasses length] > 1 then
      @string errorMessage := "there are " . [[undefinedClasses length] string] . " undefined types:" ;
      foreach undefinedClasses do
        errorMessage .= "\n-  @" . mValue ;
      end foreach ;
      error inEndOfSourceFile : errorMessage ;
    end if ;
  end if ;
#--- Check type cross references are correct
# * class inheritance graph has no circularity
# * mapindex type refers to an actual map type
# * listmap type refers to an actual list type
  if [@uint errorCount] == 0 then
    foreach [outSemanticContext mTypeMap] do
      [mType checkTypeCrossReferences ![[outSemanticContext mTypeMap] count]] ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C O M P I L E    S E M A N T I C S   C O M P O N E N T                 *
#                                                                           *
#---------------------------------------------------------------------------*

routine parseSemanticComponent
  ??@lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@semanticsComponentRoot outSemanticsComponentRoot
:
  @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  @lstring basenameKey [new !basename !here] ;
  if [[ioParsedComponentStruct mParsedSemanticsComponentMap] hasKey ! basename] then
    [[ioParsedComponentStruct mParsedSemanticsComponentMap] searchKey !basenameKey ?outSemanticsComponentRoot] ;
  else
    grammar semanticsSLRgrammar in inSourceFile ?outSemanticsComponentRoot ;
    [!?ioParsedComponentStruct.mParsedSemanticsComponentMap insertKey !basenameKey !outSemanticsComponentRoot] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

routine recursivelyImportSemanticComponent
  ?!@parsedComponentStruct ioParsedComponentStruct
  ?!@semanticDeclarationList ioSemanticDeclarationList
  ?!@stringset ioParsedFileSet
  ??@lstringlist inListOfFilesToParse
  ??@string inDirectory
:
  foreach inListOfFilesToParse do
    if not [ioParsedFileSet hasKey ![mValue string]] then
      ioParsedFileSet += ![mValue string] ;
      @string extension := [[mValue string] pathExtension] ;
      if extension == "gSemantics" then
        @lstring filePath [new
          ![mValue absolutePathFromPath !inDirectory]
          ![mValue location]
        ] ;
        @semanticsComponentRoot semanticsComponentRoot ;
        parseSemanticComponent
          !filePath
          !?ioParsedComponentStruct
          ?semanticsComponentRoot
        ;
        ioSemanticDeclarationList := ioSemanticDeclarationList . [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
        recursivelyImportSemanticComponent
          !?ioParsedComponentStruct
          !?ioSemanticDeclarationList
          !?ioParsedFileSet
          ![semanticsComponentRoot mImportedComponentFileNameList]
          !inDirectory
        ;
      end if ;
    end if ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine compileSemanticsComponent
  ??@lstring inSourceFile
  ??@string unused inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct
:
#--- Parse source file
  @semanticsComponentRoot semanticsComponentRoot ;
  parseSemanticComponent
    !inSourceFile
    !?ioParsedComponentStruct
    ?semanticsComponentRoot
  ;
#--- Check component name
  @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  @lstring componentName := [semanticsComponentRoot mSemanticsComponentName] ;
  if [componentName string] != basename then
    warning componentName: "GALGAS checks "
      "the component name ('" . [componentName string]
    . "') against the source file base name ('" . basename . "'): they should be identical"
    ;
  end if ; 
#--- Recursively parse all imported files
  @semanticDeclarationList semanticDeclarationList := [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
  @stringset parsedFileSet [setWithString ![inSourceFile string]] ;
  recursivelyImportSemanticComponent
    !?ioParsedComponentStruct
    !?semanticDeclarationList
    !?parsedFileSet
    ![semanticsComponentRoot mImportedComponentFileNameList]
    ![inSourceFile stringByDeletingLastPathComponent]
  ;
#---- Build semantic context
  @semanticContext semanticContext ;
  buildSemanticContext !semanticDeclarationList ![semanticsComponentRoot mEndOfSourceFile] ?semanticContext ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
