#---------------------------------------------------------------------------*
#                                                                           *
#  Component for building type map of a semantics component                 *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsCompilation :
import "semanticsMetamodel.gSemantics" ;
import "semanticsSemantics.gSemantics" ;
import "semanticsReaders.gSemantics" ;
import "semanticsConstructors.gSemantics" ;
import "semanticsModifiers.gSemantics" ;

import semantics semanticsMetamodel in "semanticsMetamodel.gSemantics" ;
import semantics semanticsSemantics in "semanticsSemantics.gSemantics" ;
import semantics semanticsReaders in "semanticsReaders.gSemantics" ;
import semantics semanticsConstructors in "semanticsConstructors.gSemantics" ;
import semantics semanticsModifiers in "semanticsModifiers.gSemantics" ;
import grammar semanticsSLRgrammar in "semanticsSLRgrammar.gGrammar" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C S   C O N T E X T                         *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclaration enterType
  ?!@semanticContext unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override
method @mapDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Handle insert methods
  @mapMethodMap insertMethodMap [emptyMap] ;
  foreach mInsertMethodList do
    if [insertMethodMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' insert method is already declared" ;
    else
      [!?insertMethodMap insertKey !mMethodName !mErrorMessage] ;
    end if ;
  end foreach ;
#--- Handle remove methods
  @mapMethodMap removeMethodMap [emptyMap] ;
  foreach mRemoveMethodList do
    if [removeMethodMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' remove method is already declared" ;
    elsif [insertMethodMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' method is already declared as insert method" ;
    else
      [!?removeMethodMap insertKey !mMethodName !mErrorMessage] ;
    end if ;
  end foreach ;
#--- Check insert and remove methods do not collision with set...Attribute...forKey methods
  foreach mAttributeList do
    const @string accessorName := "set" . [mAttributeName stringByCapitalizingFirstCharacter] . "ForKey" ;
    if [removeMethodMap hasKey !accessorName] then
      error mAttributeName:"the '" . accessorName . "' remove method name is incompatible with accessor of '" .mAttributeName . "' attribute" ;
    elsif [insertMethodMap hasKey !accessorName] then
      error mAttributeName:"the '" . accessorName . "' insert method name is incompatible with accessor of '" .mAttributeName . "' attribute" ;
    end if ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@mapType new
    !mMapTypeName
    !attributeList
    !insertMethodMap
    !removeMethodMap
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mMapTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle map type name
  @typeMapIndex mapTypeIndex ;
  [@typeMapIndex makeRegularIndex !mMapTypeName !?ioSemanticContext.mTypeMap ?mapTypeIndex] ;
#--- Enter type in type map
  @ACGalgasType t := [@mapindexType new
    !mMapIndexTypeName
    !mapTypeIndex
    !mSearchMethodName
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mMapIndexTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @enumConstructorMap enumConstructorMap [emptyMap] ;
  foreach mConstructorConstantList do
    [!?enumConstructorMap insertKey !mValue] ;
  end foreach ;
#--- Build string set all constants
  @stringset allConstantSet [emptySet] ;
  foreach mConstructorConstantList do
    allConstantSet += ![mValue string] ;
  end foreach ;
  foreach mConstantList do
    if [allConstantSet hasKey ![mValue string]] then
      error mValue: "the '" . mValue . "' is already defined for this enumeration" ;
    end if ;
    allConstantSet += ![mValue string] ;
  end foreach ;
#--- Handle messages
  @enumMessageMap enumMessageMap [emptyMap] ;
  foreach mEnumMessageList do
    [!?enumMessageMap insertKey !mEnumMessageName] ;
   #--- Build set of constants named in this message definition
    @stringset messageConstantSet [emptySet] ;
    foreach mMessageAssociationList do
      if [messageConstantSet hasKey ![mConstantName string]] then
        error mConstantName: "the '" . mConstantName . "' is already named for this message definition" ;
      elsif not [allConstantSet hasKey ![mConstantName string]] then
        error mConstantName: "this constant is not declared"  ;
      end if ;
      messageConstantSet += ![mConstantName string] ;
    end foreach ;
  #--- Check all constants are named in message definition
    foreach messageConstantSet do
      if not [allConstantSet hasKey !key] then
        error mEnumMessageName: "this message definition does not name the '" . key . "' constant" ;
      end if ;
    end foreach ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@enumType new
    !mEnumTypeName
    !enumConstructorMap
    !enumMessageMap
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mEnumTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclaration enterType
  ?!@semanticContext unused ioSemanticContext
:
  message "@filewrapperDeclaration.enterType [in semanticCompilation.gSemantics]\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@listGalgasType new
    !mSortedListTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mSortedListTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@structGalgasType new
    !mStructTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mStructTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@listGalgasType new
    !mListTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mListTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Handle super class
  @typeMapIndex superClassIndex ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@typeMapIndex null] ;
  else
    [@typeMapIndex makeRegularIndex !mSuperClassName !?ioSemanticContext.mTypeMap ?superClassIndex] ;
  #--- Enter in descendant class listmap
    @typeMapIndex classIndex ;
    [@typeMapIndex makeRegularIndex !mClassTypeName !?ioSemanticContext.mTypeMap ?classIndex] ;
    ioSemanticContext.mDescendantClassListMap += ![mSuperClassName string] !classIndex ;
  end if ;
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Handle methods
  @classMethodList methodList [emptyList] ;
#--- Enter type in type map
  @classGalgasType t := [@classGalgasType new
    !mIsAbstract
    !mClassTypeName
    !superClassIndex
    !attributeList
    !methodList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mClassTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclaration enterType # Handles also routine declaration
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @signature routineSignature [emptyList] ;
  foreach mFormalParameterList do
    @typeMapIndex parameterTypeIndex ;
    [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalParameterName !mFormalParameterPassingMode ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext.mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclaration enterType # Handles also function declaration
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @signature functionSignature [emptyList] ;
  foreach mFormalParameterList do
    @typeMapIndex parameterTypeIndex ;
    [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex !mFormalParameterName !mFormalParameterPassingMode ;
  end foreach ;
#--- Result type
  @typeMapIndex resultTypeIndex ;
  [@typeMapIndex makeRegularIndex !mResultTypeName !?ioSemanticContext.mTypeMap ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
#--- Result type
  @typeMapIndex resultTypeIndex ;
  [@typeMapIndex makeRegularIndex !mResultTypeName !?ioSemanticContext.mTypeMap ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !mFunctionName ![@signature emptyList] !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclaration enterType
  ?!@semanticContext ioSemanticContext
:
  @typeMapIndex associatedListTypeIndex ;
  [@typeMapIndex makeRegularIndex !mAssociatedListTypeName !?ioSemanticContext.mTypeMap ?associatedListTypeIndex] ;
#--- Enter type in type map
  @ACGalgasType t := [@listmapGalgasType new
    !mListmapTypeName
    !associatedListTypeIndex
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mListmapTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@semanticDeclarationList inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContext outSemanticContext
:
#--- Builtin types
  @typeMap typeMap := constructBuiltinTypeMap [] ;
#--- Build initial semantic context
  outSemanticContext := [@semanticContext new
    !typeMap
    ![@routineMap emptyMap]
    ![@functionMap emptyMap]
    ![@descendantClassListMap emptyMap]
  ] ;
#--- Loop throught all declarations
  foreach inSemanticDeclarationList do
    [mSemanticDeclaration enterType !?outSemanticContext] ;
  end foreach ;
#--- Check there is no undefined type
  if [@uint errorCount] == 0 then
    @stringlist undefinedClasses := [[outSemanticContext mTypeMap] unsolvedIndexKeyStringList] ;
    if [undefinedClasses length] == 1 then
      @string errorMessage := "there is 1 undefined type:" ;
      foreach undefinedClasses do
        errorMessage .= "\n-  @" . mValue ;
      end foreach ;
      error inEndOfSourceFile : errorMessage ;
    elsif [undefinedClasses length] > 1 then
      @string errorMessage := "there are " . [[undefinedClasses length] string] . " undefined types:" ;
      foreach undefinedClasses do
        errorMessage .= "\n-  @" . mValue ;
      end foreach ;
      error inEndOfSourceFile : errorMessage ;
    end if ;
  end if ;
#--- Check type cross references are correct
# * class inheritance graph has no circularity
# * mapindex type refers to an actual map type
# * listmap type refers to an actual list type
  if [@uint errorCount] == 0 then
    foreach [outSemanticContext mTypeMap] do
      [mType checkTypeCrossReferences ![[outSemanticContext mTypeMap] count]] ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    I N S T R U C T I O N    S E M A N T I C S    A N A L Y S I S          *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
;

#---------------------------------------------------------------------------*

override method @localVariableDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @localVariableDeclarationWithInitialization semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @localVariableDeclarationWithAssignment semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;


#---------------------------------------------------------------------------*

override method @localConstantDeclarationWithSourceExpression semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @localConstantDeclarationWithConstructorCall semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @assignmentInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @appendInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @sendInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @foreachInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @ifInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @methodCallInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @modifierCallInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @errorInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @warningInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @routineCallInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @matchInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @castInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @addInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @removeInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @incrementInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @decrementInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @loopInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @messageInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @logInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @grammarInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @withInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @switchInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @typeMethodInstruction semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C L A R A T I O N    S E M A N T I C S    A N A L Y S I S          *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
;

#---------------------------------------------------------------------------*

override method @mapDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
  message "@filewrapperDeclaration.semanticAnalysis [in semanticCompilation.gSemantics]\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @structDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @listDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @classDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @routineDeclaration semanticAnalysis
  ??@semanticContext inSemanticContext
:
  foreach mRoutineInstructionList do
    [mInstruction semanticAnalysis !inSemanticContext] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @functionDeclaration semanticAnalysis
  ??@semanticContext inSemanticContext
:
  foreach mFunctionInstructionList do
    [mInstruction semanticAnalysis !inSemanticContext] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclaration semanticAnalysis
  ??@semanticContext unused inSemanticContext
:
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C O M P I L E    S E M A N T I C S   C O M P O N E N T                 *
#                                                                           *
#---------------------------------------------------------------------------*

routine parseSemanticComponent
  ??@lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@semanticsComponentRoot outSemanticsComponentRoot
:
  @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  @lstring basenameKey [new !basename !here] ;
  if [[ioParsedComponentStruct mParsedSemanticsComponentMap] hasKey ! basename] then
    [[ioParsedComponentStruct mParsedSemanticsComponentMap] searchKey !basenameKey ?outSemanticsComponentRoot] ;
  else
    grammar semanticsSLRgrammar in inSourceFile ?outSemanticsComponentRoot ;
    [!?ioParsedComponentStruct.mParsedSemanticsComponentMap insertKey !basenameKey !outSemanticsComponentRoot] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

routine recursivelyImportSemanticComponent
  ?!@parsedComponentStruct ioParsedComponentStruct
  ?!@semanticDeclarationList ioSemanticDeclarationList
  ?!@stringset ioParsedFileSet
  ??@lstringlist inListOfFilesToParse
  ??@string inDirectory
:
  foreach inListOfFilesToParse do
    if not [ioParsedFileSet hasKey ![mValue string]] then
      ioParsedFileSet += ![mValue string] ;
      @string extension := [[mValue string] pathExtension] ;
      if extension == "gSemantics" then
        @lstring filePath [new
          ![mValue absolutePathFromPath !inDirectory]
          ![mValue location]
        ] ;
        @semanticsComponentRoot semanticsComponentRoot ;
        parseSemanticComponent
          !filePath
          !?ioParsedComponentStruct
          ?semanticsComponentRoot
        ;
        ioSemanticDeclarationList := ioSemanticDeclarationList . [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
        recursivelyImportSemanticComponent
          !?ioParsedComponentStruct
          !?ioSemanticDeclarationList
          !?ioParsedFileSet
          ![semanticsComponentRoot mImportedComponentFileNameList]
          !inDirectory
        ;
      end if ;
    end if ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine compileSemanticsComponent
  ??@lstring inSourceFile
  ??@string unused inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct
:
#--- Parse source file
  @semanticsComponentRoot semanticsComponentRoot ;
  parseSemanticComponent
    !inSourceFile
    !?ioParsedComponentStruct
    ?semanticsComponentRoot
  ;
#--- Check component name
  const @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  const @lstring componentName := [semanticsComponentRoot mSemanticsComponentName] ;
  if [componentName string] != basename then
    warning componentName: "GALGAS checks "
      "the component name ('" . [componentName string]
    . "') against the source file base name ('" . basename . "'): they should be identical"
    ;
  end if ; 
#--- Recursively parse all imported files
  @semanticDeclarationList semanticDeclarationList := [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
  @stringset parsedFileSet [setWithString ![inSourceFile string]] ;
  recursivelyImportSemanticComponent
    !?ioParsedComponentStruct
    !?semanticDeclarationList
    !?parsedFileSet
    ![semanticsComponentRoot mImportedComponentFileNameList]
    ![inSourceFile stringByDeletingLastPathComponent]
  ;
#---- Build semantic context
  @semanticContext semanticContext ;
  buildSemanticContext !semanticDeclarationList ![semanticsComponentRoot mEndOfSourceFile] ?semanticContext ;
#--- Check type declarations
  if [@uint errorCount] == 0 then
    foreach [semanticContext mTypeMap] do
      @constructorMap constructorMap := [mType constructorMap] ;
      @readerMap readerMap := [mType readerMap] ;
      @modifierMap modifierMap := [mType modifierMap] ;
    end foreach ;
  end if ;
#--- Perform semantic analysis
  foreach semanticDeclarationList do
    [mSemanticDeclaration semanticAnalysis !semanticContext] ;
  end foreach ;
#--- Perform Code Generation

end routine ;

#---------------------------------------------------------------------------*

end semantics ;
