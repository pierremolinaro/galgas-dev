#---------------------------------------------------------------------------*
#                                                                           *
#  Treewalking for building type map of a semantics component               *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsCompilation :
import "semanticsMetamodel.gSemantics" ;
import semantics semanticsMetamodel in "semanticsMetamodel.gSemantics" ;
import semantics semanticsSemantics in "semanticsSemantics.gSemantics" ;
import semantics mda_galgas_routines in "mda_galgas_routines.gSemantics" ;
import grammar semanticsSLRgrammar in "semanticsSLRgrammar.gGrammar" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C O N S T R U C T    B U I L T I N     T Y P E    M A P                *
#                                                                           *
#---------------------------------------------------------------------------*

routine constructBuiltinTypeMap
  !@typeMap outTypeMap
:
  outTypeMap := [@typeMap emptyMap] ;
#--- Enter builtin type
  [!?outTypeMap insertKey ![@lstring new !"string"    !here] ![@stringGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"char"      !here] ![@charGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"bool"      !here] ![@boolGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint"      !here] ![@uintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint"      !here] ![@sintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint64"    !here] ![@uint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint64"    !here] ![@sint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"double"    !here] ![@doubleGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lstring"   !here] ![@lstringGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lchar"     !here] ![@lcharGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lbool"     !here] ![@lboolGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint"     !here] ![@luintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint"     !here] ![@lsintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint64"   !here] ![@luint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint64"   !here] ![@lsint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"ldouble"   !here] ![@ldoubleGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"binaryset" !here] ![@binarysetGalgasType new]] ;
  [!?outTypeMap insertKey ![@lstring new !"stringset" !here] ![@stringsetGalgasType new]] ;
  [!?outTypeMap insertKey ![@lstring new !"location"  !here] ![@locationGalgasType  new]] ;
#--- @lstringlist type
  @attributeList lstringAttribute [emptyList] ;
  @typeMapIndex lstringIndex ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"lstring" !here] !?outTypeMap ?lstringIndex] ;
  lstringAttribute += !lstringIndex ![@lstring new !"mValue" !here] ;
  @lstring lstringlist [new !"lstringlist" !here] ;
  [!?outTypeMap insertKey !lstringlist ![@listGalgasType new !lstringlist !lstringAttribute]] ;
#--- @stringlist type
  @attributeList stringAttribute [emptyList] ;
  @typeMapIndex stringIndex ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"string" !here] !?outTypeMap ?stringIndex] ;
  stringAttribute += !stringIndex ![@lstring new !"mValue" !here] ;
  @lstring stringlist [new !"stringlist" !here] ;
  [!?outTypeMap insertKey !stringlist ![@listGalgasType new !stringlist !stringAttribute]] ;
#--- @uint64list type
  @attributeList uint64Attribute [emptyList] ;
  @typeMapIndex uint64Index ;
  [@typeMapIndex makeRegularIndex ![@lstring new !"uint64" !here] !?outTypeMap ?uint64Index] ;
  uint64Attribute += !uint64Index ![@lstring new !"mValue" !here] ;
  @lstring uint64list [new !"uint64list" !here] ;
  [!?outTypeMap insertKey !uint64list ![@listGalgasType new !uint64list !uint64Attribute]] ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C S   C O N T E X T                         *
#                                                                           *
#---------------------------------------------------------------------------*

#method @semanticDeclaration.enterType ?!@semanticContext ioSemanticContext {
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @mapDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @mapIndexDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @enumDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @filewrapperDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @sortedListDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @structDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @listDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @classDeclaration.enterType
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
##---------------------------------------------------------------------------*
#
#override method @externRoutineDeclaration.enterType # Handles also routine declaration
#  ?!@semanticContext ioSemanticContext
#{
#
#}
#
#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@semanticDeclarationList inSemanticDeclarationList
  !@semanticContext outSemanticContext
:
#--- Builtin types
  @typeMap typeMap ;
  constructBuiltinTypeMap ? typeMap ;
#--- Build initial semantic context
  outSemanticContext := [@semanticContext new
    !typeMap
  ] ;
#--- Loop throught all declarations
  foreach inSemanticDeclarationList do
#    call mSemanticDeclaration.enterType !?outSemanticContext ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C O M P I L E    S E M A N T I C S   C O M P O N E N T                 *
#                                                                           *
#---------------------------------------------------------------------------*

routine recursivelyImportSemanticComponent
  ?!@semanticDeclarationList ioSemanticDeclarationList
  ?!@stringset ioParsedFileSet
  ??@lstringlist inListOfFilesToParse
  ??@string inDirectory
:
  foreach inListOfFilesToParse do
    if not [ioParsedFileSet hasKey ![mValue string]] then
      ioParsedFileSet += ![mValue string] ;
      @string extension := [[mValue string] pathExtension] ;
      if extension == "gSemantics" then
        @lstring filePath [new
          ![mValue absolutePathFromPath !inDirectory]
          ![mValue location]
        ] ;
        @semanticsComponentRoot semanticsComponentRoot ;
        grammar semanticsSLRgrammar in filePath ?* ?semanticsComponentRoot ;
        ioSemanticDeclarationList := ioSemanticDeclarationList . [semanticsComponentRoot mSemanticDeclarationList] ;
        recursivelyImportSemanticComponent
          !?ioSemanticDeclarationList
          !?ioParsedFileSet
          ![semanticsComponentRoot mImportedComponentFileNameList]
          !inDirectory
        ;
      end if ;
    end if ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine compileSemanticsComponent
  ??@lstring inSourceFile
  ??@string unused inOutputDirectory
:
#--- Parse source file
  @semanticsComponentRoot semanticsComponentRoot ;
  @location endOfSourceFile ;
  grammar semanticsSLRgrammar in inSourceFile ?endOfSourceFile ?semanticsComponentRoot ;
#--- Recursively parse all imported files
  @semanticDeclarationList semanticDeclarationList := [semanticsComponentRoot mSemanticDeclarationList] ;
  @stringset parsedFileSet [setWithString ![inSourceFile string]] ;
  recursivelyImportSemanticComponent
    !?semanticDeclarationList
    !?parsedFileSet
    ![semanticsComponentRoot mImportedComponentFileNameList]
    ![inSourceFile stringByDeletingLastPathComponent]
  ;
#---- Build semantic context
  @semanticContext semanticContext ;
  buildSemanticContext !semanticDeclarationList ?semanticContext ;

##--- Warn for undefined types
#  if [typeMap unsolvedIndexCount] > 0 then
#    @string m := [[typeMap unsolvedIndexCount] string] . " type" ;
#    if [typeMap unsolvedIndexCount] == 1 then
#      m := "1 type is not defined:" ;
#    else
#      m := [[typeMap unsolvedIndexCount] string] . " types are not defined:" ;
#    end if ;
#    foreach [typeMap unsolvedIndexKeyStringList] (@string kKey) do
#      m .= "\n  - @" . kKey ;
#    end foreach ;
#    error endOfSourceFile : m ;
#  end if ;
##--- Checks inheritance has no circularity
#  foreach typeMap (@lstring kTypeName @ACGalgasType kType) do
#    [kType checkNoCircularity ![typeMap count]] ;
#  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

#rule @semanticsComponentRoot
#  ??@string inSourceFileDirectory
#  ??@location inErrorLocation
#  ?!@stringset ioImportedComponentSet
#  ?!@typeMap ioTypeMap
#  ?!@routineMap ioRoutineMap
#  !@typeList outTypeList
#:
##--- Walk throught imported components
#  foreach mImportedSemanticsComponentSet (@string kComponentName) do
#    if not [ioImportedComponentSet hasKey !kComponentName] then
#      if kComponentName != [mSemanticsComponentName string] then
#        @lstring sourceFilePath [new
#          !inSourceFileDirectory . "/" . kComponentName . ".gSemantics"
#          !inErrorLocation
#        ] ;
#        @semanticsComponentRoot semanticsComponentRoot ;
#        @location endOfSourceFile ;
#        @typeList unusedTypeList ;
#        grammar semanticsSLRgrammar in sourceFilePath ?endOfSourceFile -> semanticsComponentRoot ;
#        treewalking buildMapsForSemantics on semanticsComponentRoot
#          !inSourceFileDirectory
#          !inErrorLocation
#          !?ioImportedComponentSet
#          !?ioTypeMap
#          !?ioRoutineMap
#          ?unusedTypeList
#       ;
#      end if ;
#      ioImportedComponentSet += !kComponentName ;
#    end if ;
#  end foreach ;
##--- Walk throught definitions of current files
#  if [ioImportedComponentSet hasKey ![mSemanticsComponentName string]] then
#    error mSemanticsComponentName:
#    "this component is involved in a circularity in 'extends' definitions" -> outTypeList ;
#  else
#    outTypeList := [@typeList emptyList] ;
#    call mSemanticDeclarationList !?ioTypeMap !?ioRoutineMap !?outTypeList ;
#  end if ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @semanticDeclaration
#  ?!@typeMap unused ioTypeMap
#  ?!@routineMap unused ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##  R O U T I N E    D E C L A R A T I O N                                   *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @routineDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
#  @signature methodSignature ;
#  call mFormalParameters ?methodSignature !?ioTypeMap ;
#  [!?ioRoutineMap insertKey !mRoutineName !methodSignature] ;
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##  E X T E R N    R O U T I N E    D E C L A R A T I O N                    *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @externRoutineDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
#  @signature methodSignature ;
#  call mFormalParameters ?methodSignature !?ioTypeMap ;
#  [!?ioRoutineMap insertKey !mActionName !methodSignature] ;
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##  C L A S S    T Y P E                                                     *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @classDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap unused ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
##--- Super class index
#  @typeMapIndex superClassIndex ;
#  if [mSuperClassName length] == 0 then
#    superClassIndex := [@typeMapIndex null] ;
#  else
#    [@typeMapIndex makeRegularIndex !mSuperClassName !?ioTypeMap ?superClassIndex] ;
#  end if ;
##--- Attributes
#  @attributeList attributeList [emptyList] ;
#  call mAttributeList !?attributeList !?ioTypeMap ;
##--- Methods
#  @classMethodList classMethodList [emptyList] ;
#  call mAbstractMethodList !?classMethodList !?ioTypeMap ;
#  call mMethodList !?classMethodList !?ioTypeMap ;
#  call mOverridenMethodList !?classMethodList !?ioTypeMap ;
##--- Enter in type map
#  @ACGalgasType t := [@classGalgasType new
#    !mIsAbstract
#    !mClassTypeName
#    !superClassIndex
#    !attributeList
#    !classMethodList
#  ] ;
#  [!?ioTypeMap insertKey !mClassTypeName !t] ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @formalParameter 
#  ?!@signature ioMethodSignature
#  ?!@typeMap ioTypeMap
#:
##--- Parameter type index
#  @typeMapIndex parameterTypeIndex ;
#  [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioTypeMap ?parameterTypeIndex] ;
##--- Add formalparameter to signature
#  ioMethodSignature += !parameterTypeIndex !mFormalParameterName !mFormalParameterPassingMode ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @formalParameters 
#  !@signature outMethodSignature
#  ?!@typeMap ioTypeMap
#:
#  outMethodSignature := [@signature emptyList] ;
#  call mFormalParameterList !?outMethodSignature !?ioTypeMap ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @abstractMethodDefinition 
#  ?!@classMethodList ioClassMethodList
#  ?!@typeMap ioTypeMap
#:
#  @signature methodSignature ;
#  call mSignature ?methodSignature !?ioTypeMap ;
#  ioClassMethodList += !mMethodName !methodSignature ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @overridenMethodDefinition 
#  ?!@classMethodList ioClassMethodList
#  ?!@typeMap ioTypeMap
#:
#  @signature methodSignature ;
#  call mSignature ?methodSignature !?ioTypeMap ;
#  ioClassMethodList += !mMethodName !methodSignature ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @methodDefinition 
#  ?!@classMethodList ioClassMethodList
#  ?!@typeMap ioTypeMap
#:
#  @signature methodSignature ;
#  call mSignature ?methodSignature !?ioTypeMap ;
#  ioClassMethodList += !mMethodName !methodSignature ;
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##  E N U M    T Y P E                                                       *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @enumDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap unused ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
##--- Enter in type map
#  @ACGalgasType t := [@enumType new
#    !mEnumTypeName
#    !mConstantList
#  ] ;
#  [!?ioTypeMap insertKey !mEnumTypeName !t] ;
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##  M A P    T Y P E                                                         *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @mapDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap unused ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
##--- Attributes
#  @attributeList attributeList [emptyList] ;
#  call mAttributeList !?attributeList !?ioTypeMap ;
##--- Enter in type map
#  @ACGalgasType t := [@mapType new
#    !mMapTypeName
#    !attributeList
#  ] ;
#  [!?ioTypeMap insertKey !mMapTypeName !t] ;
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##    L I S T    T Y P E                                                     *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @listDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap unused ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
##--- Attributes
#  @attributeList attributeList [emptyList] ;
#  call mAttributeList !?attributeList !?ioTypeMap ;
##--- Enter in type map
#  @ACGalgasType t := [@listGalgasType new
#    !mListTypeName
#    !attributeList
#  ] ;
#  [!?ioTypeMap insertKey !mListTypeName !t] ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @attributeInCollection
#  ?!@attributeList ioAttributeList
#  ?!@typeMap ioTypeMap
#:
#  @typeMapIndex index ;
#  [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioTypeMap ?index] ;
#  ioAttributeList += !index !mAttributeName ;
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##    S O R T E D    L I S T    T Y P E                                      *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @sortedListSortDescriptor
#  ?!@sortDescriptorList ioSortDescriptorList
#:
#  ioSortDescriptorList += !mSortedAttributeName !mAscending ;
#end rule ;
#
##---------------------------------------------------------------------------*
#
#rule @sortedListDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap unused ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
##--- Attributes
#  @attributeList attributeList [emptyList] ;
#  call mAttributeList !?attributeList !?ioTypeMap ;
##--- Sort Descriptors
#  @sortDescriptorList sortDescriptorList [emptyList] ;
#  call mSortDescriptorList !?sortDescriptorList ;
##--- Enter in type map
#  @ACGalgasType t := [@sortedlistGalgasType new
#    !mSortedListTypeName
#    !attributeList
#    !sortDescriptorList
#  ] ;
#  [!?ioTypeMap insertKey !mSortedListTypeName !t] ;
#end rule ;
#
##---------------------------------------------------------------------------*
##                                                                           *
##    M A P    I N D E X    T Y P E                                          *
##                                                                           *
##---------------------------------------------------------------------------*
#
#rule @mapindexDeclaration
#  ?!@typeMap ioTypeMap
#  ?!@routineMap unused ioRoutineMap
#  ?!@typeList unused ioTypeList
#:
#  @typeMapIndex index ;
#  [@typeMapIndex makeRegularIndex !mMapTypeName !?ioTypeMap ?index] ;
##--- Enter in type map
#  @ACGalgasType t := [@mapindexType new
#    !mMapIndexName
#    !index
#    !mSearchMethodName
#    !mSearchMethodErrorMessage
#  ] ;
#  [!?ioTypeMap insertKey !mMapIndexName !t] ;
#end rule ;
#
#---------------------------------------------------------------------------*

end semantics ;
