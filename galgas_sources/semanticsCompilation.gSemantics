#---------------------------------------------------------------------------*
#                                                                           *
#  Component for compiling a semantics component                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsCompilation :
  import "allASTTypes.gSemantics" ;
  import "predefinedTypes.gSemantics" ;

  import semantics allASTTypes in "allASTTypes.gSemantics" ;
  import semantics predefinedTypes in "predefinedTypes.gSemantics" ;
  import grammar semanticsSLRgrammar in "semanticsSLRgrammar.gGrammar" ;

#---------------------------------------------------------------------------*
#                                                                           *
#           G E N E R A T I O N    F I L E W R A P P E R S                  *
#                                                                           *
#---------------------------------------------------------------------------*

filewrapper semanticFileGenerationTemplate in "../generation_templates/semantic_generation" {
} {
  template semanticFileHeader "semantic-file.h.gTemplate"
    ?@string COMPONENT_NAME
    ?@lstringlist IMPORTED_COMPONENT_LIST
    ?@lstringlist TYPE_PREDECLARATION_LIST
  ;
  template semanticFileImplementation "semantic-file.cpp.gTemplate"
    ?@string COMPONENT_NAME
  ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C O M P I L E    S E M A N T I C S   C O M P O N E N T                 *
#                                                                           *
#---------------------------------------------------------------------------*

routine parseSemanticComponent
  ??@lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@semanticsComponentAST outSemanticsComponentRoot
:
  @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  @lstring basenameKey [new !basename !here] ;
  if [[ioParsedComponentStruct mParsedSemanticsComponentMap] hasKey ! basename] then
    [[ioParsedComponentStruct mParsedSemanticsComponentMap] searchKey !basenameKey ?outSemanticsComponentRoot] ;
  else
    grammar semanticsSLRgrammar in inSourceFile ?outSemanticsComponentRoot ;
    [!?ioParsedComponentStruct->mParsedSemanticsComponentMap insertKey !basenameKey !outSemanticsComponentRoot] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

routine recursivelyImportSemanticComponent
  ?!@parsedComponentStruct ioParsedComponentStruct
  ?!@lstringlist ioOptionComponentFileNameList
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
  ?!@stringset ioParsedFileSet
  ??@lstringlist inListOfFilesToParse
  ??@string inDirectory
:
  foreach inListOfFilesToParse do
    const @lstring filePath [new
      ![mValue absolutePathFromPath !inDirectory]
      ![mValue location]
    ] ;
    if not [ioParsedFileSet hasKey ![filePath string]] then
      ioParsedFileSet += ![filePath string] ;
      const @string extension := [[filePath string] pathExtension] ;
      if extension == "gOption" then
        ioOptionComponentFileNameList += !filePath ;
      elsif extension == "gSemantics" then
      #--- Parse semantic component
        @semanticsComponentAST semanticsComponentRoot ;
        parseSemanticComponent
          !filePath
          !?ioParsedComponentStruct
          ?semanticsComponentRoot
        ;
      #--- Add declaration to declaration list
        ioSemanticDeclarationList .= [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
      #--- Import semantic components named in this file
        recursivelyImportSemanticComponent
          !?ioParsedComponentStruct
          !?ioOptionComponentFileNameList
          !?ioSemanticDeclarationList
          !?ioParsedFileSet
          ![semanticsComponentRoot mImportedComponentFileNameList]
          !inDirectory
        ;
      end if ;
    end if ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine compileSemanticsComponent
  ??@lstring inSourceFile
  ??@string inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct
:
#--- Parse source file
  @semanticsComponentAST semanticsComponentRoot ;
  parseSemanticComponent
    !inSourceFile
    !?ioParsedComponentStruct
    ?semanticsComponentRoot
  ;
#--- Check component name
  const @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  const @lstring componentName := [semanticsComponentRoot mSemanticsComponentName] ;
  if [componentName string] != basename then
    warning componentName: "GALGAS checks "
      "the component name ('" . [componentName string]
    . "') against the source file base name ('" . basename . "'): they should be identical"
    ;
  end if ; 
#--- Recursively parse all imported files
  @semanticDeclarationListAST semanticDeclarationList := [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
  @stringset parsedFileSet [setWithString ![inSourceFile string]] ;
  @lstringlist optionComponentFileNameList [emptyList] ;
  recursivelyImportSemanticComponent
    !?ioParsedComponentStruct
    !?optionComponentFileNameList
    !?semanticDeclarationList
    !?parsedFileSet
    ![semanticsComponentRoot mImportedComponentFileNameList]
    ![inSourceFile stringByDeletingLastPathComponent]
  ;
#--- Parse and perform semantic analysis of option components
  @optionComponentMapForSemanticAnalysis optionComponentMapForSemanticAnalysis [emptyMap] ;
  foreach optionComponentFileNameList do
    @lstring optionComponentName ;
    @commandLineOptionMap boolOptionMap ;
    @commandLineOptionMap uintOptionMap ;
    @commandLineOptionMap stringOptionMap ;
    parseOptionComponent
      !mValue
      !?ioParsedComponentStruct
      ?optionComponentName
      ?boolOptionMap
      ?uintOptionMap
      ?stringOptionMap
    ;
    [!?optionComponentMapForSemanticAnalysis insertKey
      !optionComponentName
      !boolOptionMap
      !uintOptionMap
      !stringOptionMap
    ] ;
  end foreach ;
#------ Add predefined types to semantics declarations
  @semanticDeclarationListAST semanticDeclarationListWithPredefinedTypes := semanticDeclarationList ;
  appendPredefinedTypesASTs !?semanticDeclarationListWithPredefinedTypes ;
#------ Generate declarations
  @semanticContext semanticContext ;
  buildSemanticContext
    !semanticDeclarationListWithPredefinedTypes
    !optionComponentMapForSemanticAnalysis
    ![semanticsComponentRoot mEndOfSourceFile]
    ?semanticContext
  ;
#------ Semantic Analysis
  @semanticDeclarationListForGeneration decoratedDeclarationListForGeneration ;
  performSemanticAnalysis
    ![[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList]
    !semanticContext
    ?decoratedDeclarationListForGeneration
  ;
#------ Generate Header File
  if [@uint errorCount] == 0 then
    @string headerString := [filewrapper semanticFileGenerationTemplate.semanticFileHeader
      ![componentName string]
      ![semanticsComponentRoot mImportedComponentFileNameList]
      ![semanticContext->mTypeMap allKeyList]
    ] ;
    foreach decoratedDeclarationListForGeneration do
      headerString .= [mDeclaration appendDeclaration] ;
    end foreach ;
    [@string generateFile
      !inOutputDirectory
      ![componentName string] . ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      !headerString
      !"\n\n" # Defaut user zone2
      !"#endif\n"
    ] ;
  end if ;
#------ Generate Implementation File
  if [@uint errorCount] == 0 then
    @string implementationString := [filewrapper semanticFileGenerationTemplate.semanticFileImplementation
      ![componentName string]
    ] ;
    foreach decoratedDeclarationListForGeneration do
      implementationString .= [mDeclaration appendTypeGenericImplementation] ;
      implementationString .= [mDeclaration appendSpecificImplementation] ;
    end foreach ;
    [@string generateFile
      !inOutputDirectory
      ![componentName string] . ".cpp"
      !"//"
      !"\n\n" # Defaut user zone1
      !implementationString
      !"\n\n" # Defaut user zone2
      !"\n"
    ] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
