#---------------------------------------------------------------------------*
#                                                                           *
#  Component for compiling a semantics component                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsCompilation :
  import "semanticsGeneration.gSemantics" ;
  import "semanticsDecoration.gSemantics" ;
  import "semanticsSemantics.gSemantics" ;
  import "allASTTypes.gSemantics" ;
  import "buildSemanticContext.gSemantics" ;

  import semantics allASTTypes in "allASTTypes.gSemantics" ;
  import semantics semanticsGeneration in "semanticsGeneration.gSemantics" ;
  import semantics semanticsSemanticsEX in "semanticsSemanticsEX.gSemantics" ;
  import semantics semanticsDecoration in "semanticsDecoration.gSemantics" ;
  import semantics buildSemanticContext in "buildSemanticContext.gSemantics" ;
  import grammar semanticsSLRgrammar in "semanticsSLRgrammar.gGrammar" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C S   C O N T E X T                         *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterTypeEX
  ?!@semanticContextEX unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override
method @mapDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Handle insert methods
  @mapMethodMap insertMethodMap [emptyMap] ;
  foreach mInsertMethodList do
    if [insertMethodMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' insert method is already declared" ;
    else
      [!?insertMethodMap insertKey !mMethodName !mErrorMessage] ;
    end if ;
  end foreach ;
#--- Handle remove methods
  @mapMethodMap removeMethodMap [emptyMap] ;
  foreach mRemoveMethodList do
    if [removeMethodMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' remove method is already declared" ;
    elsif [insertMethodMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' method is already declared as insert method" ;
    else
      [!?removeMethodMap insertKey !mMethodName !mErrorMessage] ;
    end if ;
  end foreach ;
#--- Check insert and remove methods do not collision with set...Attribute...forKey methods
  foreach mAttributeList do
    const @string accessorName := "set" . [mAttributeName stringByCapitalizingFirstCharacter] . "ForKey" ;
    if [removeMethodMap hasKey !accessorName] then
      error mAttributeName:"the '" . accessorName . "' remove method name is incompatible with accessor of '" .mAttributeName . "' attribute" ;
    elsif [insertMethodMap hasKey !accessorName] then
      error mAttributeName:"the '" . accessorName . "' insert method name is incompatible with accessor of '" .mAttributeName . "' attribute" ;
    end if ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@mapType new
    !mMapTypeName
    !attributeList
    !insertMethodMap
    !removeMethodMap
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mMapTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Handle map type name
  @typeMapIndex mapTypeIndex ;
  [@typeMapIndex makeRegularIndex !mAssociatedMapTypeName !?ioSemanticContext.mTypeMap ?mapTypeIndex] ;
#--- Enter type in type map
  @ACGalgasType t := [@mapindexType new
    !mMapIndexTypeName
    !mapTypeIndex
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mMapIndexTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Handle attributes
  @enumConstructorMap enumConstructorMap [emptyMap] ;
  foreach mConstantList do
    [!?enumConstructorMap insertKey !mValue] ;
  end foreach ;
#--- Build string set all constants
  @stringset allConstantSet [emptySet] ;
  foreach mConstantList do
    allConstantSet += ![mValue string] ;
  end foreach ;
#--- Handle messages
  @enumMessageMap enumMessageMap [emptyMap] ;
  foreach mEnumMessageList do
    [!?enumMessageMap insertKey !mEnumMessageName] ;
   #--- Build set of constants named in this message definition
    @stringset messageConstantSet [emptySet] ;
    foreach mMessageAssociationList do
      if [messageConstantSet hasKey ![mConstantName string]] then
        error mConstantName: "the '" . mConstantName . "' is already named for this message definition" ;
      elsif not [allConstantSet hasKey ![mConstantName string]] then
        error mConstantName: "this constant is not declared"  ;
      end if ;
      messageConstantSet += ![mConstantName string] ;
    end foreach ;
  #--- Check all constants are named in message definition
    foreach messageConstantSet do
      if not [allConstantSet hasKey !key] then
        error mEnumMessageName: "this message definition does not name the '" . key . "' constant" ;
      end if ;
    end foreach ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@enumType new
    !mEnumTypeName
    !enumConstructorMap
    !enumMessageMap
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mEnumTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
  @filewrapperTemplateMapEXX filewrapperTemplateMap [emptyMap] ;
  foreach mFilewrapperTemplateList do
    @signature templateSignature [emptyList] ;
    foreach mFilewrapperTemplateFormalInputParameters do
      @typeMapIndex parameterTypeIndex ;
      [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
      templateSignature +=
        !parameterTypeIndex
        !mFormalParameterName
        ![@formalArgumentPassingModeAST argumentIn]
      ;
    end foreach ;
    [!?filewrapperTemplateMap insertKey
      !mFilewrapperTemplateName
      !templateSignature
      !mFilewrapperTemplatePath
    ] ;
  end foreach ;
  [!?ioSemanticContext.mFilewrapperMap insertKey
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperExtensionList
    !filewrapperTemplateMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@listGalgasType new
    !mSortedListTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mSortedListTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@structGalgasType new
    !mStructTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mStructTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Enter type in type map
  @ACGalgasType t := [@listGalgasType new
    !mListTypeName
    !attributeList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mListTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Handle super class
  @typeMapIndex superClassIndex ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@typeMapIndex null] ;
  else
    [@typeMapIndex makeRegularIndex !mSuperClassName !?ioSemanticContext.mTypeMap ?superClassIndex] ;
  #--- Enter in descendant class listmap
    @typeMapIndex classIndex ;
    [@typeMapIndex makeRegularIndex !mClassTypeName !?ioSemanticContext.mTypeMap ?classIndex] ;
    ioSemanticContext.mDescendantClassListMap += ![mSuperClassName string] !classIndex ;
  end if ;
#--- Handle attributes
  @attributeList attributeList [emptyList] ;
  foreach mAttributeList do
    @typeMapIndex attributeTypeIndex ;
    [@typeMapIndex makeRegularIndex !mAttributeTypeName !?ioSemanticContext.mTypeMap ?attributeTypeIndex] ;
    attributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- Handle methods
  @classMethodList methodList [emptyList] ;
#--- Enter type in type map
  @classGalgasType t := [@classGalgasType new
    !mIsAbstract
    !mClassTypeName
    !superClassIndex
    !attributeList
    !methodList
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mClassTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterTypeEX # Handles also routine declaration
  ?!@semanticContextEX ioSemanticContext
:
#--- Build signature
  @signature routineSignature [emptyList] ;
  foreach mFormalParameterList do
    @typeMapIndex parameterTypeIndex ;
    [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalParameterName !mFormalParameterPassingMode ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext.mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterTypeEX # Handles also function declaration
  ?!@semanticContextEX ioSemanticContext
:
#--- Build signature
  @signature functionSignature [emptyList] ;
  foreach mFormalParameterList do
    @typeMapIndex parameterTypeIndex ;
    [@typeMapIndex makeRegularIndex !mFormalParameterTypeName !?ioSemanticContext.mTypeMap ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex !mFormalParameterName !mFormalParameterPassingMode ;
  end foreach ;
#--- Result type
  @typeMapIndex resultTypeIndex ;
  [@typeMapIndex makeRegularIndex !mResultTypeName !?ioSemanticContext.mTypeMap ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @lazyFunctionDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
#--- Result type
  @typeMapIndex resultTypeIndex ;
  [@typeMapIndex makeRegularIndex !mResultTypeName !?ioSemanticContext.mTypeMap ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext.mFunctionMap insertKey !mFunctionName ![@signature emptyList] !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterTypeEX
  ?!@semanticContextEX ioSemanticContext
:
  @typeMapIndex associatedListTypeIndex ;
  [@typeMapIndex makeRegularIndex !mAssociatedListTypeName !?ioSemanticContext.mTypeMap ?associatedListTypeIndex] ;
#--- Enter type in type map
  @ACGalgasType t := [@listmapGalgasType new
    !mListmapTypeName
    !associatedListTypeIndex
  ] ;
  [!?ioSemanticContext.mTypeMap insertKey !mListmapTypeName !t] ;
end method ;

#---------------------------------------------------------------------------*

routine buildSemanticContextEX
  ??@semanticDeclarationListAST inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContextEX outSemanticContext
:
#--- Builtin types
  @typeMap typeMap := constructBuiltinTypeMap [] ;
#--- Build initial semantic context
  outSemanticContext := [@semanticContextEX new
    !typeMap
    ![@routineMapEX emptyMap]
    ![@functionMapEX emptyMap]
    ![@descendantClassListMapEX emptyMap]
    ![@filewrapperMapEXX emptyMap]
  ] ;
#--- Loop throught all declarations
  foreach inSemanticDeclarationList do
    [mSemanticDeclaration enterTypeEX !?outSemanticContext] ;
  end foreach ;
#--- Check there is no undefined type
  if [@uint errorCount] == 0 then
    @stringlist undefinedClasses := [[outSemanticContext mTypeMap] unsolvedIndexKeyStringList] ;
    if [undefinedClasses length] == 1 then
      @string errorMessage := "there is 1 undefined type:" ;
      foreach undefinedClasses do
        errorMessage .= "\n-  @" . mValue ;
      end foreach ;
      error inEndOfSourceFile : errorMessage ;
    elsif [undefinedClasses length] > 1 then
      @string errorMessage := "there are " . [[undefinedClasses length] string] . " undefined types:" ;
      foreach undefinedClasses do
        errorMessage .= "\n-  @" . mValue ;
      end foreach ;
      error inEndOfSourceFile : errorMessage ;
    end if ;
  end if ;
#--- Check type cross references are correct
# * class inheritance graph has no circularity
# * mapindex type refers to an actual map type
# * listmap type refers to an actual list type
  if [@uint errorCount] == 0 then
    foreach [outSemanticContext mTypeMap] do
      [mType checkTypeCrossReferences ![[outSemanticContext mTypeMap] count]] ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    I N S T R U C T I O N    S E M A N T I C S    A N A L Y S I S          *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override method @localVariableDeclarationAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@localVariableDeclarationAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @localVariableDeclarationWithInitializationAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@localVariableDeclarationWithInitializationAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @localVariableDeclarationWithAssignmentAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@localVariableDeclarationWithAssignmentAST instructionSemanticAnalysis\n" ;
end method ;


#---------------------------------------------------------------------------*

override method @localConstantDeclarationWithSourceExpressionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@localConstantDeclarationWithSourceExpressionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @localConstantDeclarationWithConstructorCallAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@localConstantDeclarationWithConstructorCallAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @assignmentInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@assignmentInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @appendInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@appendInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @sendInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@sendInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @foreachInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@foreachInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @ifInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@ifInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @methodCallInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@methodCallInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @modifierCallInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@modifierCallInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @errorInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@errorInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @warningInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@warningInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @routineCallInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@routineCallInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @matchInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@matchInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @castInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@castInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @addInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@addInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @removeInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@removeInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @incrementInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@incrementInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @decrementInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@decrementInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @loopInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@loopInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @messageInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@messageInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @logInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@logInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @grammarInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@grammarInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @withInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@withInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @switchInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@switchInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @typeMethodInstructionAST instructionSemanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@typeMethodInstructionAST instructionSemanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C S    A N A L Y S I S                                   *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@mapDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @mapindexDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@mapindexDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
#--- Nothing to do
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@filewrapperDeclarationAST.semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@sortedListDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@structDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@listDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@classDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@externRoutineDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @routineDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@routineDeclarationAST semanticAnalysis\n" ;
#  foreach mRoutineInstructionList do
#    [mInstruction instructionSemanticAnalysis !inSemanticContext] ;
#  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@externFunctionDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @functionDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@functionDeclarationAST semanticAnalysis\n" ;
#  foreach mFunctionInstructionList do
#    [mInstruction instructionSemanticAnalysis !inSemanticContext] ;
#  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @lazyFunctionDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@lazyFunctionDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST semanticAnalysis
  ?!@semanticContextEX unused ioSemanticContext
:
  message "@listmapDeclarationAST semanticAnalysis\n" ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C O M P I L E    S E M A N T I C S   C O M P O N E N T                 *
#                                                                           *
#---------------------------------------------------------------------------*

routine parseSemanticComponent
  ??@lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@semanticsComponentAST outSemanticsComponentRoot
:
  @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  @lstring basenameKey [new !basename !here] ;
  if [[ioParsedComponentStruct mParsedSemanticsComponentMap] hasKey ! basename] then
    [[ioParsedComponentStruct mParsedSemanticsComponentMap] searchKey !basenameKey ?outSemanticsComponentRoot] ;
  else
    grammar semanticsSLRgrammar in inSourceFile ?outSemanticsComponentRoot ;
    [!?ioParsedComponentStruct.mParsedSemanticsComponentMap insertKey !basenameKey !outSemanticsComponentRoot] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

routine recursivelyImportSemanticComponent
  ?!@parsedComponentStruct ioParsedComponentStruct
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
  ?!@stringset ioParsedFileSet
  ??@lstringlist inListOfFilesToParse
  ??@string inDirectory
:
  foreach inListOfFilesToParse do
    if not [ioParsedFileSet hasKey ![mValue string]] then
      ioParsedFileSet += ![mValue string] ;
      @string extension := [[mValue string] pathExtension] ;
      if extension == "gSemantics" then
        @lstring filePath [new
          ![mValue absolutePathFromPath !inDirectory]
          ![mValue location]
        ] ;
        @semanticsComponentAST semanticsComponentRoot ;
        parseSemanticComponent
          !filePath
          !?ioParsedComponentStruct
          ?semanticsComponentRoot
        ;
        ioSemanticDeclarationList := ioSemanticDeclarationList . [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
        recursivelyImportSemanticComponent
          !?ioParsedComponentStruct
          !?ioSemanticDeclarationList
          !?ioParsedFileSet
          ![semanticsComponentRoot mImportedComponentFileNameList]
          !inDirectory
        ;
      end if ;
    end if ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine compileSemanticsComponent
  ??@lstring inSourceFile
  ??@string inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct
:
#--- Parse source file
  @semanticsComponentAST semanticsComponentRoot ;
  parseSemanticComponent
    !inSourceFile
    !?ioParsedComponentStruct
    ?semanticsComponentRoot
  ;
#--- Check component name
  const @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  const @lstring componentName := [semanticsComponentRoot mSemanticsComponentName] ;
  if [componentName string] != basename then
    warning componentName: "GALGAS checks "
      "the component name ('" . [componentName string]
    . "') against the source file base name ('" . basename . "'): they should be identical"
    ;
  end if ; 
#--- Recursively parse all imported files
  @semanticDeclarationListAST semanticDeclarationList := [[semanticsComponentRoot mSemanticDeclarations] mSemanticDeclarationList] ;
  @stringset parsedFileSet [setWithString ![inSourceFile string]] ;
  recursivelyImportSemanticComponent
    !?ioParsedComponentStruct
    !?semanticDeclarationList
    !?parsedFileSet
    ![semanticsComponentRoot mImportedComponentFileNameList]
    ![inSourceFile stringByDeletingLastPathComponent]
  ;
#---- Build semantic context
  @semanticContextEX semanticContextEX ;
  buildSemanticContextEX !semanticDeclarationList ![semanticsComponentRoot mEndOfSourceFile] ?semanticContextEX ;
  @semanticContext semanticContext ;
  buildSemanticContext !semanticDeclarationList ![semanticsComponentRoot mEndOfSourceFile] ?semanticContext ;
#--- Check type declarations
  if [@uint errorCount] == 0 then
    foreach [semanticContextEX mTypeMap] do
      @constructorMapEXX constructorMap := [mType constructorMap] ;
      @readerMapEXX readerMap := [mType readerMap] ;
      @modifierMapEXX modifierMap := [mType modifierMap] ;
    end foreach ;
  end if ;
#--- Perform semantic analysis of all declarations
  foreach semanticDeclarationList do
    [mSemanticDeclaration semanticAnalysis
      !?semanticContextEX
    ] ;
  end foreach ;
#--- Perform semantic analysis of declarations of this component
  @semanticDeclarationSortedListForGeneration declarationSortedListForGeneration [emptySortedList] ;
  foreach semanticDeclarationList do
    [mSemanticDeclaration decorateAbstractSyntaxTree
      !semanticContextEX
      !?declarationSortedListForGeneration
    ] ;
  end foreach ;
#--- Perform Code Generation
  if [@uint errorCount] == 0 then
    @stringlist predeclarationList [emptyList] ;
    foreach declarationSortedListForGeneration do
    
    end foreach ;
    @string headerString := [filewrapper typeGenerationTemplate.semanticFileHeader
      ![componentName string]
      !predeclarationList
    ] ;
    @string implementationString := [filewrapper typeGenerationTemplate.semanticFileImplementation
      ![componentName string]
    ] ;
    foreach semanticDeclarationList do
      [mSemanticDeclaration generateCode
        !?semanticContextEX
        !?headerString
        !?implementationString
      ] ;
    end foreach ;
    [@string generateFile
      !inOutputDirectory
      ![componentName string] . ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      !headerString
      !"\n\n" # Defaut user zone2
      !"#endif\n"
    ] ;
    [@string generateFile
      !inOutputDirectory
      ![componentName string] . ".cpp"
      !"//"
      !"\n\n" # Defaut user zone1
      !implementationString
      !"\n\n" # Defaut user zone2
      !"\n"
    ] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
