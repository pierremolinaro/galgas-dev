#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS scanner definition                                                *
#                                                                           *
#  Copyright (C) 1997-2004 Pierre Molinaro.                                 *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

lexique galgas_scanner :

header "galgas/F_LexicalActions.h" ;

@lstring identifierString ;
@luint ulongValue ;
@lsint longValue ;
@lchar charValue ;
@lstring tokenString ;

style keywordsStyle -> "Keywords :" ;
style delimitersStyle -> "Delimiters :" ;
style terminalStyle -> "Terminal symbols :" ;
style integerStyle -> "Integer constants :" ;
style characterStyle -> "Character constants :" ;
style stringStyle -> "String constants :" ;
style typeNameStyle -> "Type names (@...) :" ;

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier" ;

list galgasKeyWordList error message "the '" . * . "' keyword" style keywordsStyle :
 "compile",   "extract",      "program",        "enum",
 "syntax",  "semantics",      "extends",      "reader",
 "extern",    "routine",      "foreach", "constructor", 
 "match",     "default",         "here",          "if",
 "else",        "elsif",         "then",      "rewind",
 "when",     "abstract",        "class",       "parse",
 "map",       "warning",     "modifier",
 "drop",     "override",       "select",
 "or",          "block",          "key",
 "header",      "false",         "true",
 "rule",          "tag",        "setof",
 "start",         "end",          "not",     "include",
 "import",    "lexique",         "list",     "message",
 "repeat",      "while",        "error",      "search",
 "insert",         "in",         "send",      "action",
 "grammar",    "option",
 "unused",      "label",
 "style",       "cocoa" ;

rule 'a'->'z' | 'A'->'Z' :
  repeat
    enterCharacterIntoString (identifierString, toLower (*)) ;
    enterCharacterIntoString (tokenString, *) ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send search identifierString in galgasKeyWordList default $identifier$ ;
end rule ;

#------------------------------- Decimal number ------------------
$unsigned_literal_integer$ ! ulongValue error message "a decimal number" style integerStyle ;
$signed_literal_integer$ ! longValue error message "a signed decimal number" style integerStyle ;

message decimalNumberTooLarge : "decimal number too large" ;

message internalError : "internal error" ;

rule '0'->'9' :
  enterDigitIntoUlong (ulongValue, *) error decimalNumberTooLarge, internalError ;
  repeat
  while '0'->'9' :
    enterDigitIntoUlong (ulongValue, *) error decimalNumberTooLarge, internalError ;
  while '_' :
  end repeat ;
  select
  when 'S' | 's' :
    convertUlongToLong (longValue, ulongValue) error decimalNumberTooLarge ;
    send $signed_literal_integer$ ;
  default
    send $unsigned_literal_integer$ ;
  end select ;
end rule ;

# -------------------------- Extern C++ name -----------------------------

$type_name$ ! tokenString error message "a type name (@...)" style typeNameStyle ;

message debut_nom_externe_incorrect : "incorrect type name beginning" ;

rule '@' :
  select
  when 'a'->'z' | 'A'->'Z' | '_' :
    repeat
      enterCharacterIntoString (tokenString, *) ;
    while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    end repeat ;
  default
    error debut_nom_externe_incorrect ;
  end select ;
  send $type_name$ ; 
end rule ;

#--------------------------------- Character constant ------------------------------------
$literal_char$ ! charValue error message "a character constant" style characterStyle ;

message incorrectCharConstant : "incorrect literal character" ;

message ASCIIcodeTooLargeError : "ASCII code > 255" ;

rule '\'' :
  select
  when '\\' :
    select
    when 'f' :
      enterCharacterIntoCharacter (charValue, '\f') ;
    when 'n' :
      enterCharacterIntoCharacter (charValue, '\n') ;
    when 'r' :
      enterCharacterIntoCharacter (charValue, '\r') ;
    when 't' :
      enterCharacterIntoCharacter (charValue, '\t') ;
    when 'v' :
      enterCharacterIntoCharacter (charValue, '\v') ;
    when '\\' :
      enterCharacterIntoCharacter (charValue, '\\') ;
    when '0' :
      enterCharacterIntoCharacter (charValue, '\0') ;
    when '\'' :
      enterCharacterIntoCharacter (charValue, '\'') ;
    when '0' -> '9' :
      repeat
        enterHexDigitIntoASCIIcharacter (charValue, *) error ASCIIcodeTooLargeError, internalError ;
      while '0' -> '9' :
      end repeat ;
    default
      error incorrectCharConstant ;
    end select ;
  when ' ' -> '\255' :
     enterCharacterIntoCharacter (charValue, *) ;
  default
    error incorrectCharConstant ;
  end select ;
  select
  when '\'' :
    send $literal_char$ ;
  default
    error incorrectCharConstant ;
  end select ;
end rule ;

#----------------------- Grammar terminal symbol ---------------------------
$terminal$ ! tokenString error message "a terminal symbol ($...$)" style terminalStyle ;

message incorrect_terminal_start : "incorrect terminal start" ;

message incorrect_terminal_end : "terminal does not end with '$'" ;

rule '$' :
  select
  when '!' -> '#' | '%' -> '~'  : # All printable characters, but '$'
    repeat
      enterCharacterIntoString (tokenString, *) ;
    while '!' -> '#' | '%' -> '~' :
    end repeat ;
  default
    error incorrect_terminal_start ;
  end select ;
  select
  when '$' :
  default
    error incorrect_terminal_end ;
  end select ;
  send $terminal$ ; 
end rule ;

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList error message "the '" . * . "' delimitor" style delimitersStyle :
  "*",     "|",    ",",      ".",     "<>",
  "::",    ">",    "<",      ";",      ":",
  "-",     "(",    ")",     "->",      "?",
  "==",   "??",    "!",     ":=",      "...",
  "[",     "]",   "+=",     "?!",      "!?",
  "/",    "!=",   "<=",     ">=",       "&",
  "++" ;

rule list galgasDelimitorsList ;

# -------------------- Characters string --------------------------------------
$literal_string$ ! tokenString error message "a character string constant \"...\"" style stringStyle ;

message incorrectStringEnd : "string does not end with '\"'" ;

rule '"' :
  repeat
  while '\\' :
    select
    when 'f' :
      enterCharacterIntoString (tokenString, '\f') ;
    when 'n' :
      enterCharacterIntoString (tokenString, '\n') ;
    when 'r' :
      enterCharacterIntoString (tokenString, '\r') ;
    when 't' :
      enterCharacterIntoString (tokenString, '\t') ;
    when 'v' :
      enterCharacterIntoString (tokenString, '\v') ;
    when '\\' :
      enterCharacterIntoString (tokenString, '\\') ;
    when '0' :
      enterCharacterIntoString (tokenString, '\0') ;
    when '"' :
      enterCharacterIntoString (tokenString, '"') ;
    when '\'' :
      enterCharacterIntoString (tokenString, '\'') ;
    when '0' -> '9' :
      repeat
        enterHexDigitIntoASCIIcharacter (charValue, *) error ASCIIcodeTooLargeError, internalError ;
      while '0' -> '9' :
      end repeat ;
      enterCharacterIntoString (tokenString, charValue) ;
    default
      error incorrectCharConstant ;
    end select ;
   while ' ' | '!' | '#'-> '\255' :
    enterCharacterIntoString (tokenString, *) ;
  end repeat ;
  select
  when '"' :
    send $literal_string$ ;
  default
    error incorrectStringEnd ;
  end select ;
end rule ;

# ------------------------------------ Comment ----------------------------
message incorrectEndOfComment : "incorrect end of comment" ;

rule '#' :
  repeat
  while '\1' ->'\9' | '\11' | '\12' | '\14'-> '\255' :
  end repeat ;
  select
  when '\n' | '\r' | '\0' :
  default
    error incorrectEndOfComment ;
  end select ;
end rule ;

# --------------------- separators -----------------------------------------
rule '\1' -> ' ' :
end rule ;

end lexique ;
