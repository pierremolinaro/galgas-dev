#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS scanner definition                                                *
#                                                                           *
#  Copyright (C) 1997-2006 Pierre Molinaro.                                 *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

lexique galgas_scanner :

@lstring identifierString ;
@luint uint32value ;
@lsint sint32value ;
@luint64 uint64value ;
@lsint64 sint64value ;
@lchar charValue ;
@lstring tokenString ;

style keywordsStyle -> "Keywords:" ;
style delimitersStyle -> "Delimiters:" ;
style terminalStyle -> "Terminal Symbols:" ;
style integerStyle -> "Integer Constants:" ;
style float_csts -> "Floating Point Constants:" ;
style characterStyle -> "Character Constants:" ;
style stringStyle -> "String Constants:" ;
style typeNameStyle -> "Type Names (@...):" ;

# -------------------------- identifier or key word --------------------
# keywords can be written in lower or upper case
# for identifiers, case is significant

$identifier$ ! tokenString error message "an identifier" ;

list galgasKeyWordList error message "the '%K' keyword" style keywordsStyle :
 "compile",    "extract",      "program",        "enum",
 "syntax",   "semantics",      "extends",      "reader",
 "extern",     "routine",      "foreach", "constructor", 
 "match",      "default",         "here",          "if",
 "else",         "elsif",         "then",      "rewind",
 "when",      "abstract",        "class",       "parse",
 "map",        "warning",     "modifier",       "state",
 "drop",      "override",       "select",       "while",
 "or",           "block",          "not",        "loop",
 "false",         "true",          "end",
 "rule",           "tag",    "metamodel",      "entity",  
 "import",     "lexique",         "list",     "message",
 "repeat",       "error",      "search",
 "insert",          "in",         "send",      "action",
 "grammar",     "option",         "root",          "on",
 "unused",       "label",        "style",         "gui",
 "do",        "relation",           "of",        "self",
 "constraint", "context",         "call",    "mapindex" ;

rule 'a'->'z' | 'A'->'Z' :
  repeat
    enterCharacterIntoString (identifierString, toLower (*)) ;
    enterCharacterIntoString (tokenString, *) ;
  while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
  end repeat ;
  send search identifierString in galgasKeyWordList default $identifier$ ;
end rule ;

#------------------------------- Integer, floating Point Constant ------------------
@ldouble floatValue ;
$literal_double$ !floatValue !tokenString error message "a float number" style float_csts ;
$unsigned_literal_integer$ ! uint32value error message "a 32-bit unsigned decimal number" style integerStyle ;
$signed_literal_integer$ ! sint32value error message "a 32-bit signed decimal number" style integerStyle ;
$unsigned_literal_integer64$ ! uint64value error message "a 64-bit unsigned decimal number" style integerStyle ;
$signed_literal_integer64$ ! sint64value error message "a 64-bit signed decimal number" style integerStyle ;

message decimalNumberTooLarge : "decimal number too large" ;
message floatNumberConversionError : "invalid float number" ;
message internalError : "internal error" ;

rule '0'->'9' :
  enterCharacterIntoString (tokenString, *) ;
  repeat
  while '0'->'9' :
    enterCharacterIntoString (tokenString, *) ;
  while '_' :
  end repeat ;
  select
  when 'S' | 's' :
    convertDecimalStringIntoSInt (tokenString , sint32value) error decimalNumberTooLarge, internalError ;
    send $signed_literal_integer$ ;
  when "LS" :
    convertDecimalStringIntoSInt64 (tokenString , sint64value) error decimalNumberTooLarge, internalError ;
    send $signed_literal_integer64$ ;
  when 'L' :
    convertDecimalStringIntoUInt64 (tokenString , uint64value) error decimalNumberTooLarge, internalError ;
    send $unsigned_literal_integer64$ ;
  when '.' :
    enterCharacterIntoString (tokenString, '.') ;
    repeat
    while '0'->'9' :
      enterCharacterIntoString (tokenString, *) ;
    while '_' :
    end repeat ;
    convertStringToDouble (tokenString, floatValue) error floatNumberConversionError ;
    send $literal_double$ ;
  default
    convertDecimalStringIntoUInt (tokenString , uint32value) error decimalNumberTooLarge, internalError ;
    send $unsigned_literal_integer$ ;
  end select ;
end rule ;


#------------------------------- Floating point Number ------------------
$.$ error message "the '.' delimitor" style delimitersStyle ;
$...$ error message "the '...' delimitor" style delimitersStyle ;

#--- Floating Point constant begining with a dot
rule '.' :
  select
  when '0'->'9' :
    enterCharacterIntoString (tokenString, '0') ;
    enterCharacterIntoString (tokenString, '.') ;
    enterCharacterIntoString (tokenString, *) ;
    repeat
    while '0'->'9' :
      enterCharacterIntoString (tokenString, *) ;
    while '_' :
    end repeat ;
    convertStringToDouble (tokenString, floatValue) error floatNumberConversionError ;
    send $literal_double$ ;
  default
    select
    when ".." :
      send $...$ ;
    default
      send $.$ ;
    end select ;
  end select ;
end rule ;


# -------------------------- Type Name -----------------------------

$type_name$ ! tokenString error message "a type name (@...)" style typeNameStyle ;

message debut_nom_externe_incorrect : "incorrect type name beginning" ;

rule '@' :
  select
  when 'a'->'z' | 'A'->'Z' | '_' :
    repeat
      enterCharacterIntoString (tokenString, *) ;
    while 'a'->'z' | 'A'->'Z' | '_' | '0'->'9' :
    end repeat ;
  default
    error debut_nom_externe_incorrect ;
  end select ;
  send $type_name$ ; 
end rule ;

#--------------------------------- Character constant ------------------------------------
$literal_char$ ! charValue error message "a character constant" style characterStyle ;

message incorrectCharConstant : "incorrect literal character" ;

message ASCIIcodeTooLargeError : "ASCII code > 255" ;

rule '\'' :
  select
  when '\\' :
    select
    when 'f' :
      enterCharacterIntoCharacter (charValue, '\f') ;
    when 'n' :
      enterCharacterIntoCharacter (charValue, '\n') ;
    when 'r' :
      enterCharacterIntoCharacter (charValue, '\r') ;
    when 't' :
      enterCharacterIntoCharacter (charValue, '\t') ;
    when 'v' :
      enterCharacterIntoCharacter (charValue, '\v') ;
    when '\\' :
      enterCharacterIntoCharacter (charValue, '\\') ;
    when '0' :
      enterCharacterIntoCharacter (charValue, '\0') ;
    when '\'' :
      enterCharacterIntoCharacter (charValue, '\'') ;
    when 'x' | 'X' :
      select
      when '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        repeat
          enterHexDigitIntoASCIIcharacter (charValue, *) error ASCIIcodeTooLargeError, internalError ;
        while '0' -> '9' | 'a' -> 'f' | 'A' -> 'F' :
        end repeat ;
      default
        error incorrectCharConstant ;
      end select ;
    default
      error incorrectCharConstant ;
    end select ;
  when ' ' -> '\xFF' :
     enterCharacterIntoCharacter (charValue, *) ;
  default
    error incorrectCharConstant ;
  end select ;
  select
  when '\'' :
    send $literal_char$ ;
  default
    error incorrectCharConstant ;
  end select ;
end rule ;

#----------------------- Grammar terminal symbol ---------------------------
$terminal$ ! tokenString error message "a terminal symbol ($...$)" style terminalStyle ;

message incorrect_terminal_start : "incorrect terminal start" ;

message incorrect_terminal_end : "terminal does not end with '$'" ;

rule '$' :
  select
  when '!' -> '#' | '%' -> '~'  : # All printable characters, but '$'
    repeat
      enterCharacterIntoString (tokenString, *) ;
    while '!' -> '#' | '%' -> '~' :
    end repeat ;
  default
    error incorrect_terminal_start ;
  end select ;
  select
  when '$' :
  default
    error incorrect_terminal_end ;
  end select ;
  send $terminal$ ; 
end rule ;

# ----------------------------- Delimitors ---------------------------------------
list galgasDelimitorsList error message "the '%K' delimitor" style delimitersStyle :
  "*",     "|",    ",",      "+",     "--",
  "::",    ">",    "<",      ";",      ":",
  "-",     "(",    ")",     "->",      "?",
  "==",   "??",    "!",     ":=",     "++",
  "[",     "]",   "+=",     "?!",     "!?",
  "/",    "!=",   "<=",     ">=",      "&",
  "{",     "}",   "+>",      "%",     "-=",
  "^",    "<<",   ">>",      "~"  ;

rule list galgasDelimitorsList ;

# -------------------- Characters string --------------------------------------
$literal_string$ ! tokenString error message "a character string constant \"...\"" style stringStyle ;

message incorrectStringEnd : "string does not end with '\"'" ;

rule '"' :
  repeat
  while '\\' :
    select
    when 'f' :
      enterCharacterIntoString (tokenString, '\f') ;
    when 'n' :
      enterCharacterIntoString (tokenString, '\n') ;
    when 'r' :
      enterCharacterIntoString (tokenString, '\r') ;
    when 't' :
      enterCharacterIntoString (tokenString, '\t') ;
    when 'v' :
      enterCharacterIntoString (tokenString, '\v') ;
    when '\\' :
      enterCharacterIntoString (tokenString, '\\') ;
    when '0' :
      enterCharacterIntoString (tokenString, '\0') ;
    when '"' :
      enterCharacterIntoString (tokenString, '"') ;
    when '\'' :
      enterCharacterIntoString (tokenString, '\'') ;
    when '0' -> '9' :
      repeat
        enterHexDigitIntoASCIIcharacter (charValue, *) error ASCIIcodeTooLargeError, internalError ;
      while '0' -> '9' :
      end repeat ;
      enterCharacterIntoString (tokenString, charValue) ;
    default
      error incorrectCharConstant ;
    end select ;
   while ' ' | '!' | '#'-> '\xFF' :
    enterCharacterIntoString (tokenString, *) ;
  end repeat ;
  select
  when '"' :
    send $literal_string$ ;
  default
    error incorrectStringEnd ;
  end select ;
end rule ;

# ------------------------------------ Comment ----------------------------
rule '#' :
  repeat
  while '\x1' -> '\x9' | '\xB' | '\xC' | '\xE' -> '\xFF' :
  end repeat ;
end rule ;

# --------------------- separators -----------------------------------------
rule '\x1' -> ' ' :
end rule ;

end lexique ;
