#---------------------------------------------------------------------------*
#                                                                           *
#  Semantic Analysis of expression                                          *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticExpressionAnalysis :
  import "semanticsDecoratedTypes.gSemantics" ;
  import semantics semanticsDecoratedTypes in "semanticsDecoratedTypes.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    V A R I A B L E    M A P                                               *
#                                                                           *
#---------------------------------------------------------------------------*

map @variableMap {
  @unifiedTypeMapProxy mTypeProxy ;
  @string mCppName ;

#--- Used local constant
  state usedLocalConstant {
    readAccess      -> usedLocalConstant
    writeAccess     -> usedLocalConstant error "a constant cannot be written"
    readWriteAccess -> usedLocalConstant error "a constant cannot be written"
    dropAccess      -> usedLocalConstant error "a constant cannot be drop"
  }

#--- Local constant
  state localConstant warning "the '%K' constant value is unused" {
    readAccess      -> usedLocalConstant
    writeAccess     -> usedLocalConstant error "a constant cannot be written"
    readWriteAccess -> usedLocalConstant error "a constant cannot be written"
    dropAccess      -> usedLocalConstant error "a constant cannot be drop"
  }

#--- Local variable
  state undefinedLocalVariable warning "the '%K' local variable is unused" {
    readAccess      -> undefinedLocalVariable error "an undefined local variable cannot be read"
    writeAccess     -> definedLocalVariable
    readWriteAccess -> undefinedLocalVariable error "an undefined local variable cannot be read"
    dropAccess      -> undefinedLocalVariable warning "the local variable has no value"
  }
  state definedLocalVariable warning "the '%K' local variable value is unused" {
    readAccess      -> usedLocalVariable
    writeAccess     -> definedLocalVariable warning "the value has been changed without any read"
    readWriteAccess -> usedLocalVariable
    dropAccess      -> droppedLocalVariable warning "the local variable has been dropped without any read"
  }
  state usedLocalVariable {
    readAccess      -> usedLocalVariable
    writeAccess     -> definedLocalVariable
    readWriteAccess -> definedLocalVariable
    dropAccess      -> droppedLocalVariable
  }
  state droppedLocalVariable {
    readAccess      -> droppedLocalVariable error "a dropped local variable cannot be read"
    writeAccess     -> definedLocalVariable
    readWriteAccess -> definedLocalVariable error "a dropped local variable cannot be read"
    dropAccess      -> droppedLocalVariable warning "the local variable is already dropped"
  }

#--- Output formal parameter
  state undefinedOutputFormalParameter error "the '%K' output formal parameter is undefined" {
    readAccess      -> undefinedOutputFormalParameter error "an undefined output formal parameter cannot be read"
    writeAccess     -> definedOutputFormalParameter
    readWriteAccess -> undefinedOutputFormalParameter error "an undefined output formal parameter cannot be read"
    dropAccess      -> undefinedOutputFormalParameter warning "the output formal parameter has no value"
  }
  state definedOutputFormalParameter {
    readAccess      -> definedOutputFormalParameter
    writeAccess     -> definedOutputFormalParameter
    readWriteAccess -> definedOutputFormalParameter
    dropAccess      -> undefinedOutputFormalParameter
  }

#--- Input/Output formal parameter
  state unusedInputOutputFormalParameter warning "the '%K' input/output formal parameter is unused" {
    readAccess      -> usedInputOutputFormalParameter
    writeAccess     -> usedInputOutputFormalParameter
    readWriteAccess -> usedInputOutputFormalParameter
    dropAccess      -> droppedInputOutputFormalParameter
  }
  state usedInputOutputFormalParameter {
    readAccess      -> usedInputOutputFormalParameter
    writeAccess     -> usedInputOutputFormalParameter
    readWriteAccess -> usedInputOutputFormalParameter
    dropAccess      -> droppedInputOutputFormalParameter
  }
  state droppedInputOutputFormalParameter error "the '%K' input/ouput formal argument should be valuated at the end of the routine" {
    readAccess      -> droppedInputOutputFormalParameter error "a dropped input/output formal argument cannot be read"
    writeAccess     -> usedInputOutputFormalParameter
    readWriteAccess -> droppedInputOutputFormalParameter error "a dropped input/output formal argument cannot be read"
    dropAccess      -> droppedInputOutputFormalParameter warning "the input/output formal argument is already dropped"
  }

#--- Input/Output formal parameter declared as unused
  state inputOutputFormalParameterDeclaredAsUnused {
    readAccess      -> usedInputOutputFormalParameter warning "the input/output formal parameter has been declared as unused"
    writeAccess     -> usedInputOutputFormalParameter warning "the input/output formal parameter has been declared as unused"
    readWriteAccess -> usedInputOutputFormalParameter warning "the input/output formal parameter has been declared as unused"
    dropAccess      -> droppedInputOutputFormalParameter warning "the input/output formal parameter has been declared as unused"
  }

#--- Constant input formal parameter
  state constantInputFormalParameter warning "the constant '%K' input formal parameter is not used and is not declared as unused" {
    readAccess      -> usedConstantInputFormalParameter
    writeAccess     -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be written"
    readWriteAccess -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be written"
    dropAccess      -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be dropped"
  }
  state usedConstantInputFormalParameter {
    readAccess      -> usedConstantInputFormalParameter
    writeAccess     -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be written"
    readWriteAccess -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be written"
    dropAccess      -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be dropped"
  }

#--- Constant input formal parameter declared as unused
  state constantInputFormalParameterDeclaredAsUnused {
    readAccess      -> usedConstantInputFormalParameter warning "the constant input formal parameter is declared as unused"
    writeAccess     -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be written"
    readWriteAccess -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be written"
    dropAccess      -> usedConstantInputFormalParameter error "a constant input formal parameter cannot be dropped"
  }

#--- Input formal parameter
  state inputFormalParameter warning "the '%K' input formal parameter is not used and is not declared as unused" {
    readAccess      -> usedInputFormalParameter
    writeAccess     -> usedInputFormalParameter
    readWriteAccess -> usedInputFormalParameter
    dropAccess      -> droppedInputFormalParameter
  }
  state usedInputFormalParameter {
    readAccess      -> usedInputFormalParameter
    writeAccess     -> usedInputFormalParameter
    readWriteAccess -> usedInputFormalParameter
    dropAccess      -> droppedInputFormalParameter
  }
  state droppedInputFormalParameter {
    readAccess      -> droppedInputFormalParameter error "a dropped input formal parameter cannot be read"
    writeAccess     -> usedInputFormalParameter
    readWriteAccess -> droppedInputFormalParameter error "a dropped input formal parameter cannot be read"
    dropAccess      -> droppedInputFormalParameter warning "the input formal parameter is already dropped"
  }

#--- Input formal parameter declared as unused
  state inputFormalParameterDeclaredAsUnused {
    readAccess      -> usedInputFormalParameter warning "the input formal parameter is declared as unused"
    writeAccess     -> usedInputFormalParameter warning "the input formal parameter is declared as unused"
    readWriteAccess -> usedInputFormalParameter warning "the input formal parameter is declared as unused"
    dropAccess      -> droppedInputFormalParameter warning "the input formal parameter is declared as unused"
  }

#--- Insert methods 
  insert insertLocalVariable state undefinedLocalVariable error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertLocalConstant state localConstant error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertUsedLocalConstant state usedLocalConstant error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertInputFormalArgument state inputFormalParameter error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertInputFormalArgumentDeclaredAsUnused state inputFormalParameterDeclaredAsUnused error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertConstantInputFormalArgument state constantInputFormalParameter error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertConstantInputFormalArgumentDeclaredAsUnused state constantInputFormalParameterDeclaredAsUnused error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertOutputFormalArgument state undefinedOutputFormalParameter error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertInputOutputFormalArgument state unusedInputOutputFormalParameter error message "redefinition of '%K' variable (previous declaration was in %L)" ;
  insert insertInputOutputFormalArgumentDeclaredAsUnused state inputOutputFormalParameterDeclaredAsUnused error message "redefinition of '%K' variable (previous declaration was in %L)" ;


#--- Search methods
  search searchForReadAccess action readAccess error message "the '%K' variable is not declared" ;
  search searchForWriteAccess action writeAccess error message "the '%K' variable is not declared" ;
  search searchForReadWriteAccess action readWriteAccess error message "the '%K' variable is not declared" ;
  search searchForDropAccess action dropAccess error message "the '%K' variable is not declared" ;
}

#---------------------------------------------------------------------------*

routine checkAssignmentTypes
  ??@unifiedTypeMapProxy inTargetType
  ??@unifiedTypeMapProxy inSourceType
  ??@location inErrorLocation
:
  @unifiedTypeMapProxy sourceType := inSourceType ;
  @bool ok := inTargetType == inSourceType ;
  loop [@uint max] : while (not ok) & (not [[sourceType mSuperType] isNull]) do
    sourceType := [sourceType mSuperType] ;
    ok := inTargetType == inSourceType ;
  end loop ;
  if not ok then
    error inErrorLocation : "target object type is '@" . [inTargetType key] . "' and cannot be assigned by an '@" . [inSourceType key] . "' object" ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    C O N T E X T    F O R    A N A L Y S I S           *
#                                                                           *
#---------------------------------------------------------------------------*

struct @predefinedTypes {
  @unifiedTypeMapProxy mLocationType ;
  @unifiedTypeMapProxy mBoolType ;
  @unifiedTypeMapProxy mCharType ;
  @unifiedTypeMapProxy mStringType ;
  @unifiedTypeMapProxy mUIntType ;
  @unifiedTypeMapProxy mSIntType ;
  @unifiedTypeMapProxy mUInt64Type ;
  @unifiedTypeMapProxy mSInt64Type ;
  @unifiedTypeMapProxy mDoubleType ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E X P R E S S I O N    A N A L Y S I S                                 *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticExpressionAST analyzeSemanticExpression
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap ioVariableMap
  !@semanticExpressionForGeneration outExpression
;

#---------------------------------------------------------------------------*

override method @selfInExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@variableMap ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  if [ioVariableMap hasKey !"self"] then
    @string selfCppName ;
    @unifiedTypeMapProxy selfType ;
    [!?ioVariableMap searchForReadAccess ![@lstring new !"self" !here] ?selfType ?selfCppName] ;
    outExpression := [@selfInExpressionForGeneration new !selfType !selfCppName] ;
  else
    error mSelfLocation: "'self' cannot be used in this context" : outExpression ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @hereExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mLocationType] ;
end method ;

#---------------------------------------------------------------------------*

override method @trueExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
end method ;

#---------------------------------------------------------------------------*

override method @falseExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@falseExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
end method ;

#---------------------------------------------------------------------------*

override method @literalCharExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@literalCharExpressionForGeneration new !inPredefinedTypes->mCharType !mCharacter] ;
end method ;

#---------------------------------------------------------------------------*

override method @literalStringExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@literalStringExpressionForGeneration new !inPredefinedTypes->mStringType !mStringSequence] ;
end method ;

#---------------------------------------------------------------------------*

override method @literalDoubleExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@literalDoubleExpressionForGeneration new !inPredefinedTypes->mDoubleType !mValue] ;
end method ;

#---------------------------------------------------------------------------*

override method @literalUIntExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@literalUIntExpressionForGeneration new !inPredefinedTypes->mDoubleType !mValue] ;
end method ;

#---------------------------------------------------------------------------*

override method @literalUInt64ExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@literalUInt64ExpressionForGeneration new !inPredefinedTypes->mUInt64Type !mValue] ;
end method ;

#---------------------------------------------------------------------------*

override method @literalSIntExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@literalSIntExpressionForGeneration new !inPredefinedTypes->mSIntType !mValue] ;
end method ;

#---------------------------------------------------------------------------*

override method @literalSInt64ExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@literalSInt64ExpressionForGeneration new !inPredefinedTypes->mSInt64Type !mValue] ;
end method ;

#---------------------------------------------------------------------------*

override method @constructorExpressionAST analyzeSemanticExpression
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
#--- Get constructor map from type map
  @constructorMap constructorMap ;
  [inSemanticContext->mTypeMap searchKey !mTypeName ?6* ?constructorMap ?13*] ;
#--- Search contructor
  @unifiedTypeMapProxyList constructorFormalArgumentTypeList ;
  @bool hasCompilerArgument ;
  @unifiedTypeMapProxy returnedType ;
  with constructorMap hasKey ![mConstructorName string] do
    constructorFormalArgumentTypeList := mArgumentTypeList ;
    hasCompilerArgument := mHasCompilerArgument ;
    returnedType := mReturnedType ;
  else
    @string s := "" ;
    foreach constructorMap do
      s .= "\n  - " . key ;
      foreach mArgumentTypeList do
        s .= " ?@" . [mType key] ;
      end foreach ;
    end foreach ;
    error mConstructorName
    : "the '@". mTypeName . "' type does not define the '" . mConstructorName . "' constructor; available constructors are:" . s
    : constructorFormalArgumentTypeList, hasCompilerArgument, returnedType
    ;
  end with ;
#--- Analysis arguments
  if [mExpressions length] != [constructorFormalArgumentTypeList length] then
    error mConstructorName: "calling the '" . mConstructorName . "' constructor of '@" . mTypeName . "' requires "
    . [[constructorFormalArgumentTypeList length] string] . " parameter(s), while this call has "
    . [[mExpressions length] string] . " parameter(s)" : outExpression ;
  else
    @semanticExpressionListForGeneration constructorEffectiveParameterList [emptyList] ;
    foreach mExpressions, constructorFormalArgumentTypeList do
      @semanticExpressionForGeneration exp ;
      [mExpression analyzeSemanticExpression !inSemanticContext !inPredefinedTypes !?ioVariableMap ?exp] ;
      checkAssignmentTypes !mType ![exp mType] !mEndOfExpressionLocation ;
      constructorEffectiveParameterList += !exp ;
    end foreach ;
    outExpression := [@constructorExpressionForGeneration new !returnedType !mConstructorName !constructorEffectiveParameterList] ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @readerCallExpressionAST analyzeSemanticExpression
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
#--- Expression analysis
  @semanticExpressionForGeneration receiverExpression ;
  [mReceiver analyzeSemanticExpression !inSemanticContext !inPredefinedTypes !?ioVariableMap ?receiverExpression] ;
  const @unifiedTypeMapProxy receiverType := [receiverExpression mType] ;
#--- Get reader map
  const @readerMap readerMap := [receiverType mReaderMap] ;
#--- Search contructor
  @unifiedTypeMapProxyList readerFormalArgumentTypeList ;
  @bool hasCompilerArgument ;
  @unifiedTypeMapProxy returnedType ;
  @string implicitConversionReader ;
  with readerMap hasKey ![mReaderName string] do
    readerFormalArgumentTypeList := mArgumentTypeList ;
    hasCompilerArgument := mHasCompilerArgument ;
    returnedType := mReturnedType ;
    implicitConversionReader := mImplicitConversionReader ;
  else
    @string s := "" ;
    foreach readerMap do
      s .= "\n  - " . key ;
      foreach mArgumentTypeList do
        s .= " ?@" . [mType key] ;
      end foreach ;
    end foreach ;
    error mReaderName
    : "the '@". [receiverType key] . "' type does not define the '" . mReaderName . "' reader; available readers are:" . s
    : readerFormalArgumentTypeList, hasCompilerArgument, returnedType, implicitConversionReader
    ;
  end with ;
#--- Analysis arguments
  if [mExpressions length] != [readerFormalArgumentTypeList length] then
    error mReaderName: "calling the '" . mReaderName . "' reader of '@" . [receiverType key] . "' requires "
    . [[readerFormalArgumentTypeList length] string] . " parameter(s), while this call has "
    . [[mExpressions length] string] . " parameter(s)" : outExpression ;
  else
    @semanticExpressionListForGeneration constructorEffectiveParameterList [emptyList] ;
    foreach mExpressions, readerFormalArgumentTypeList do
      @semanticExpressionForGeneration exp ;
      [mExpression analyzeSemanticExpression !inSemanticContext !inPredefinedTypes !?ioVariableMap ?exp] ;
      checkAssignmentTypes !mType ![exp mType] !mEndOfExpressionLocation ;
      constructorEffectiveParameterList += !exp ;
    end foreach ;
    outExpression := [@readerCallExpressionForGeneration new
      ![receiverExpression mType]
      !receiverExpression
      !mReaderName
      !constructorEffectiveParameterList
      !returnedType
      !implicitConversionReader
    ] ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @optionExpressionAST analyzeSemanticExpression
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  @commandLineOptionMap boolOptionMap ;
  @commandLineOptionMap uintOptionMap ;
  @commandLineOptionMap stringOptionMap ;
  [inSemanticContext->mOptionComponentMapForSemanticAnalysis searchKey
    !mOptionComponentName
    ?boolOptionMap
    ?uintOptionMap
    ?stringOptionMap
  ] ;
  with boolOptionMap hasKey ![mOptionEntryName string] do
    outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  else
    with uintOptionMap hasKey ![mOptionEntryName string] do
       outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
    else
      with stringOptionMap hasKey ![mOptionEntryName string] do
        outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
      else
        outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
      end with ;
    end with ;
  end with ;
  message "@optionExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @concatExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@concatExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @orExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@orExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @xorExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@xorExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @andExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@andExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @equalExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@equalExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @notEqualExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@notEqualExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @lowerOrEqualExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@lowerOrEqualExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @greaterOrEqualExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@greaterOrEqualExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @strictGreaterExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@strictGreaterExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @strictLowerExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@strictLowerExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @rightShiftExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@rightShiftExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @leftShiftExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@leftShiftExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @addExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@addExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @subExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@subExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @multiplicationExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@multiplicationExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @divisionExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@divisionExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @moduloExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@moduloExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @unaryMinusExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@unaryMinusExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @notExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@notExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @negateExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@negateExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @ifExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@ifExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @functionCallExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@functionCallExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @varInExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@varInExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @literalTypeInExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@literalTypeInExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @castInExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@castInExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperObjectInstanciationInExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@filewrapperObjectInstanciationInExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperInExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@filewrapperInExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperTemplateInExpressionAST analyzeSemanticExpression
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@variableMap unused ioVariableMap
  !@semanticExpressionForGeneration outExpression
:
  outExpression := [@trueExpressionForGeneration new !inPredefinedTypes->mBoolType] ;
  message "@filewrapperTemplateInExpressionAST analyzeSemanticExpression\n" ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
