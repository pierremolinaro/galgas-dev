#---------------------------------------------------------------------------*
#                                                                           *
#  'treewalking' component parser, as model builder                         *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax treewalkingModelBuilder :
import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import metamodel expressionMetamodel in "expressionMetamodel.gMetamodel" ;
import metamodel parameterArgumentMetamodel in "parameterArgumentMetamodel.gMetamodel" ;
import metamodel instructionMetamodel in "instructionMetamodel.gMetamodel" ;
import metamodel treewalkingMetamodel in "treewalkingMetamodel.gMetamodel" ;
import semantics commonSemantics in "commonSemantics.gSemantics" ;

#---------------------------------------------------------------------------*

nonterminal <treewalking_component_start_symbol> -> @treewalkingComponentRoot ;

nonterminal <semantic_declaration> -> @semanticDeclaration ;

nonterminal <formal_parameter_list> -> @formalParameters ;

nonterminal <treewalking_rule> -> @treewalkingRule ;

nonterminal <semantic_instruction_list> -> @semanticInstructions ;

nonterminal <semantic_instruction> -> @semanticInstruction ;

nonterminal <actual_parameter_list> -> @actualParameters ;

#---------------------------------------------------------------------------*
#                                                                           *
#    T R E E W A L K I N G    C O M P O N E N T                             *
#                                                                           *
#---------------------------------------------------------------------------*

rule <treewalking_component_start_symbol> -> @treewalkingComponentRoot :
  $treewalking$ ;
  $identifier$ ? mTreewalkingComponentName ;
  $($ ;
  $identifier$ ? mMetamodelReferenceName ;
  $)$ ;
  $:$ ;
#--- Loop on import and semantics declarations
  mImportedComponentFileNameList := [@lstringlist emptyList] ;
  repeat
  while
    $import__$ ;
    $literal_string$ ? * ;
    $;$ ;
  while
    $import$ ;
    select
      @lstring importedComponentFileName ;
      $literal_string$ ? importedComponentFileName ;
      mImportedComponentFileNameList += !importedComponentFileName ;
    or
      $treewalking$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $grammar$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $metamodel$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    or
      $semantics$ ;
      $identifier$ ?* ;
      $in$ ;
      $literal_string$ ?* ;
    end select ;
    $;$ ;
  while
    <treewalking_rule> +> mTreewalkingRules ;
  while
    <semantic_declaration> +> mSemanticDeclarationList ;
  end repeat ;
#--- end
  $end$ ;
  $treewalking$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#    T R E E W A L K I N G    C O M P O N E N T                             *
#                                                                           *
#---------------------------------------------------------------------------*

rule <treewalking_rule> -> @treewalkingRule :
  $rule$ ;
  $type_name$ ? mEntityName ;
  <formal_parameter_list> -> mFormalParameterList ;
  $:$ ;
  <semantic_instruction_list> -> mInstructionList ;
  $end$ ;
  $rule$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  C A L L    I N S T R U C T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

rule <semantic_instruction> -> @referenceCallInstruction :
  $call$ ;
  $identifier$ ? mReferenceName ;
  <actual_parameter_list> -> mActualParameterList ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;