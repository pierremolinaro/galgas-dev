#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS main program definition                                           *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

program galgas_prgm "version GALGAS_BETA_VERSION" :
  import "lexiqueSemantics.gSemantics" ;
  import "projectGlobalCheckings.gSemantics" ;
  import "projectCreation.gSemantics" ;
  import "lexiqueCompilation.gSemantics" ;
  import "guiCompilation.gSemantics" ;
  import "syntaxCompilation.gSemantics" ;
  import "predefinedTypes.gSemantics" ;
  import "programComponentCompilation.gSemantics" ;
  import "projectLL1grammar.gGrammar" ;
  import "targetGeneration.gSemantics" ;

#---------------------------------------------------------------------------*

before {
#--- Generate project
  const @string creationProjectName := [option galgas_cli_options.create_project value] ;
  projectCreation !creationProjectName ;
#--- Print predefined lexical action
  if [option galgas_cli_options.printPredefinedLexicalActions value] then
    printPredefinedLexicalActions ;
  end if ;
#--- Print predefined types
  if [option galgas_cli_options.printPredefinedTypes value] then
    printPredefinedTypes ;
  end if ;
#--- Print predefined type feature
  const @string printFeature := [option galgas_cli_options.printPredefinedTypeFeature value] ;
  if printFeature != "" then
    printPredefinedTypeFeature !printFeature ;
  end if ;
#--- Generate predefined files
  generatePredefinedTypeFiles ![option galgas_cli_options.generatePredefinedTypes value] ;
}

#---------------------------------------------------------------------------*

when . "gOption"
message "a GALGAS option source file"
indexing with optionLL1grammar
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
  compileOptionComponentFromSourceFile !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct ;
}

#---------------------------------------------------------------------------*

when . "gLexique"
message "a GALGAS lexique source file"
indexing with lexiqueLL1grammar
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
  compileLexiqueComponentFromSource !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct ;
}

#---------------------------------------------------------------------------*

when . "gSemantics"
message "a GALGAS semantics source file"
indexing with semanticsSLRgrammar
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
  compileSemanticsComponentFromSourceFile !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct;
}

#---------------------------------------------------------------------------*

when . "gSyntax"
message "a GALGAS syntax source file"
indexing with syntaxSLRgrammar
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
  compileSyntaxComponentFromSourceFile !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct;
}

#---------------------------------------------------------------------------*

when . "gGrammar"
message "a GALGAS grammar source file"
indexing with grammarLL1grammar
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
  compileGrammarComponentFromSourceFile
    !inSourceFile
    !outputDirectory [!inSourceFile]
    !?parsedComponentStruct;
}

#---------------------------------------------------------------------------*

when . "gGui"
message "a GALGAS GUI source file"
indexing with guiGrammar
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
  compileGuiComponentFromSourceFile !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct ;
}

#---------------------------------------------------------------------------*

when . "gProgram"
message "a GALGAS program source file"
indexing with programSLRgrammar
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
  compileProgramComponentFromSourceFile !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct;
}

#----------------------------------------------------------------------------*
#                                                                            *
#          Project                                                           *
#                                                                            *
#----------------------------------------------------------------------------*

when . "gProject"
message "a GALGAS project source file"
indexing with projectLL1grammar
??@lstring inSourceFile {
  const @string outputDirectory := outputDirectory [!inSourceFile] ;
#--- Parse metamodel component
  @projectComponentAST projectComponent ;
  grammar projectLL1grammar in inSourceFile ?projectComponent ;
#--- Check project name
  if [[projectComponent mProjectName] string] != [[inSourceFile lastPathComponent] stringByDeletingPathExtension] then
    error [projectComponent mProjectName] 
    :"the project name ('" . [projectComponent mProjectName] . "') should be the same as the source file base name ('"
    . [[inSourceFile lastPathComponent] stringByDeletingPathExtension] . "')" ;
  end if ;
#--- Check target name
  const @string targetName := [[projectComponent mTargetName] string] ;
  if targetName == "" then
    error [projectComponent mTargetName]: "the target name should not be empty" ;
  end if ;
#--- Check qualified features
  @string libpmPath := "" ; # By default, LIBPM is handled by GALGAS
  foreach projectComponent->mQualifiedFeatureList do
    if mFeatureName->string == "libpmAtPath" then
      if libpmPath != "" then
        error mFeatureName:"the libpm path is already defined" ;    
      elsif mFeatureValue->string == "" then
        error mFeatureValue:"the libpm path should not be empty" ;    
      else
        libpmPath := mFeatureValue->string ; # [mFeatureValue absolutePathFromPath ![inSourceFile stringByDeletingLastPathComponent]] ;
      end if ;    
    else
      error mFeatureName:"only 'libpmAtPath' is allowed here" ;    
    end if ;  
  end foreach ;
#--- Update targets
  if 0 == [@uint errorCount] then
    updateTargets
      !inSourceFile
      ![projectComponent mProjectName]
      !targetName
      !libpmPath
      ![projectComponent mGenerationFeatureList]
      ![projectComponent mProjectSourceList]
    ;
  end if ;
#--- Parse Component struct
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
    ![@parsedGuiComponentMap emptyMap]
  ] ;
#---------------------------------- Parse sources
  message "*** Parsing\n" ;
  foreach [projectComponent mProjectSourceList] do
    const @string extension := [mFilePath pathExtension] ;
    const @lstring componentName [new
      ![[mFilePath lastPathComponent] stringByDeletingPathExtension]
      ![mFilePath location]
    ] ;
    const @lstring fullFilePath [new
      ![inSourceFile stringByDeletingLastPathComponent] . "/" . [mFilePath string]
      ![mFilePath location]
    ] ;
#    if mSourceKind != [@sourceFileKind externSourceFile] then
#      message "  - '" . mFilePath . "'\n" ;
#    end if ;
    switch mSourceKind
    when externSourceFile :
    when guiSourceFile :
      if extension == "gGui" then
        @guiComponentAST guiComponentRoot ;
        grammar guiGrammar in fullFilePath ?guiComponentRoot ;
        [!?parsedComponentStruct->mParsedGuiComponentMap insertKey !componentName !fullFilePath !guiComponentRoot] ;
      else
        error mFilePath:"extension of a gui component should be '.gGui'." ;
      end if ;
    when lexiqueSourceFile :
      if extension == "gLexique" then
        @lexiqueComponentAST lexiqueComponentRoot ;
        grammar lexiqueLL1grammar in fullFilePath ?lexiqueComponentRoot ;
        [!?parsedComponentStruct->mParsedLexiqueComponentMap insertKey !componentName !lexiqueComponentRoot] ;
      else
        error mFilePath:"extension of a lexique component should be '.gLexique'." ;
      end if ;
    when optionSourceFile :
      if extension == "gOption" then
        @optionComponentAST optionComponentAST ;
        grammar optionLL1grammar in fullFilePath ?optionComponentAST ;
      #--- Semantic Analysis of option component
        @commandLineOptionMap boolOptionMap ;
        @commandLineOptionMap UIntOptionMap ;
        @commandLineOptionMap stringOptionMap ;
        semanticAnalysisOfOptionComponent
          !optionComponentAST
          ?boolOptionMap
          ?UIntOptionMap
          ?stringOptionMap
        ;
        [!?parsedComponentStruct->mParsedOptionComponentMap insertKey
          !componentName
          !boolOptionMap
          !UIntOptionMap
          !stringOptionMap
        ] ;
      else
        error mFilePath:"extension of an option component should be '.gOption'." ;
      end if ;
    when semanticsSourceFile :
      if extension == "gSemantics" then
        @semanticsComponentAST semanticsComponentRoot ;
        grammar semanticsSLRgrammar in fullFilePath ?semanticsComponentRoot ;
        [!?parsedComponentStruct->mParsedSemanticsComponentMap insertKey !componentName !fullFilePath !semanticsComponentRoot] ;
      else
        error mFilePath:"extension of a semantics component should be '.gSemantics'." ;
      end if ;
    when syntaxSourceFile :
      if extension == "gSyntax" then
        @syntaxComponentAST syntaxComponentRoot ;
        grammar syntaxSLRgrammar in fullFilePath ?syntaxComponentRoot ;
        [!?parsedComponentStruct->mParsedSyntaxComponentMap insertKey !componentName !fullFilePath !syntaxComponentRoot] ;
      else
        error mFilePath:"extension of a syntax component should be '.gSyntax'." ;
      end if ;
    when grammarSourceFile :
      if extension == "gGrammar" then
        @grammarComponentAST grammarComponentRoot ;
        grammar grammarLL1grammar in fullFilePath ?grammarComponentRoot ;
        [!?parsedComponentStruct->mParsedGrammarComponentMap insertKey !componentName !fullFilePath !grammarComponentRoot] ;
      else
        error mFilePath:"extension of a grammar component should be '.gGrammar'." ;
      end if ;
    when programSourceFile :
      if extension == "gProgram" then
        @programComponentAST programComponentAST ;
        grammar programSLRgrammar in fullFilePath ?programComponentAST ;
        [!?parsedComponentStruct->mParsedProgramComponentMap insertKey !componentName !fullFilePath !programComponentAST] ;
      else
        error mFilePath:"extension of a program component should be '.gProgram'." ;
      end if ;
    end switch ;
  end foreach ;
#---------------------------------- Compile galgas sources
  if [@uint errorCount] == 0 then
  #--- Lexique components
    foreach parsedComponentStruct->mParsedLexiqueComponentMap do
#      message "*** Compiling '" . lkey . ".gLexique'\n" ;
      compileLexiqueComponentFromAST
        !lkey->string
        !outputDirectory
        !mLexiqueComponentAST
      ;
    end foreach ;
  #--- GUI components
    foreach parsedComponentStruct->mParsedGuiComponentMap do
#      message "*** Compiling '" . lkey . ".gGui'\n" ;
      compileGuiComponentFromAST
        !mSourceFullFilePath
        !outputDirectory
        !mGuiComponentAST
        !?parsedComponentStruct
      ;
    end foreach ;
  #--- Option components
    foreach parsedComponentStruct->mParsedOptionComponentMap do
#      message "*** Compiling '" . lkey . ".gOption'\n" ;
      compileOptionComponentAST
        !outputDirectory
        !lkey
        !mBoolOptionMap
        !mUIntOptionMap
        !mStringOptionMap
      ;
    end foreach ;
  #--- Semantic components
    foreach parsedComponentStruct->mParsedSemanticsComponentMap do
#      message "*** Compiling '" . lkey . ".gSemantics'\n" ;
      compileSemanticsComponentAST
        !mSourceFullFilePath
        !outputDirectory
        !mSemanticComponentRoot
        !?parsedComponentStruct
      ;
    end foreach ;
  #--- Syntax components
    foreach parsedComponentStruct->mParsedSyntaxComponentMap do
#      message "*** Compiling '" . lkey . ".gSyntax'\n" ;
      compileSyntaxComponentFromAST
        !mSourceFullFilePath
        !outputDirectory
        !mSyntaxComponentRoot
        !?parsedComponentStruct
      ;
    end foreach ;
  #--- Grammar components
    foreach parsedComponentStruct->mParsedGrammarComponentMap do
#      message "*** Compiling '" . lkey . ".gGrammar'\n" ;
      compileGrammarComponentFromAST
        !mSourceFullFilePath
        !outputDirectory
        !mGrammarComponentRoot
        !?parsedComponentStruct
      ;
    end foreach ;
  #--- Program components
    foreach parsedComponentStruct->mParsedProgramComponentMap do
#      message "*** Compiling '" . lkey . ".gProgram'\n" ;
      compileProgramComponentFromAST
        !mSourceFullFilePath
        !outputDirectory
        !mProgramComponentAST
        !?parsedComponentStruct
      ;
    end foreach ;
  end if ;
#---------------------------------- Perform global checkings
  if [@uint errorCount] == 0 then
    message "*** Perform global checkings\n" ;
    performProjectGlobalCheckings !parsedComponentStruct ![projectComponent mEndOfSourceFile] ;
  end if ;
#--- Build project files
  buildProject !inSourceFile->string ;
}

#---------------------------------------------------------------------------*

local routine buildProject ??@string inSourceFilePath :
  const @string buildOption := [option galgas_cli_options.buildOption value] ;
  if ([@uint errorCount] == 0) & (buildOption != "") then
    @stringlist buildList := [buildOption componentsSeparatedByString !","] ;
    foreach buildList do
      message "*** Compiling C++ '" . mValue . "' project'\n" ;
      const @string commandFileFullPath :=
        [[inSourceFilePath stringByDeletingLastPathComponent] stringByDeletingLastPathComponent]
         . "/" . mValue . "/build.command" ;
      if [commandFileFullPath fileExists] then
        @sint result := [commandFileFullPath system] ;
      else
        error [@location nowhere] : "cannot compile '" 
        . mValue . "' project : the '" . commandFileFullPath . "' file does not exist" ;
      end if ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

after {
}

#---------------------------------------------------------------------------*

end program ;

#---------------------------------------------------------------------------*
