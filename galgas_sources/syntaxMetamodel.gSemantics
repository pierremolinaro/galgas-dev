#---------------------------------------------------------------------------*
#                                                                           *
#  'syntax' component metamodel                                             *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics syntaxMetamodel :

import "expressionMetamodel.gSemantics" ;
import "parameterArgumentMetamodel.gSemantics" ;
import "instructionMetamodel.gSemantics" ;

import semantics expressionMetamodel in "expressionMetamodel.gSemantics" ;
import semantics parameterArgumentMetamodel in "parameterArgumentMetamodel.gSemantics" ;
import semantics instructionMetamodel in "instructionMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*

list @syntaxInstructionList {
  @syntaxInstruction mInstruction ;
}

#---------------------------------------------------------------------------*

list @nonTerminalLabelList {
  @lstring mLabelName ;
  @formalParameterList mFormalParameters ;
}

#---------------------------------------------------------------------------*

list @nonterminalDeclarationList {
  @lstring mNonterminalName ;
  @nonTerminalLabelList mLabels ;
  @bool mHasParseLabel ;
}

#---------------------------------------------------------------------------*

list @syntaxRuleLabelList {
  @lstring mLabelName ;
  @formalParameterList mFormalParameters ;
  @syntaxInstructionList mSyntaxInstructionList ;
}

#---------------------------------------------------------------------------*

list @syntaxRuleList {
  @lstring mNonterminalName ;
  @syntaxRuleLabelList mLabelList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   N O N T E R M I N A L    C A L L    I N S T R U C T I O N               *
#                                                                           *
#---------------------------------------------------------------------------*

class @nonterminalCallInstruction extends @syntaxInstruction {
  @lstring mNonterminalName ;
  @lstring mLabelName ; # No label : empty string
  @actualParameterList mActualParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   T E R M I N A L    C H E C K    I N S T R U C T I O N                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @terminalCheckInstruction extends @syntaxInstruction {
  @lstring mTerminalName ;
  @actualInputParameterList mActualInputParameterList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   R E P E A T    I N S T R U C T I O N                                    *
#                                                                           *
#---------------------------------------------------------------------------*

list @listOfSyntaxInstructionList {
  @syntaxInstructionList mSyntaxInstructionList ;
}

#---------------------------------------------------------------------------*

class @repeatInstruction extends @syntaxInstruction {
  @syntaxInstructionList mRepeatedInstructionList ;
  @listOfSyntaxInstructionList mRepeatBranchList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   S E L E C T    I N S T R U C T I O N                                    *
#                                                                           *
#---------------------------------------------------------------------------*

class @selectInstruction extends @syntaxInstruction {
  @listOfSyntaxInstructionList mSelectBranchList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   P A R S E   D O    I N S T R U C T I O N                                *
#                                                                           *
#---------------------------------------------------------------------------*

class @parseDoInstruction extends @syntaxInstruction {
  @listOfSyntaxInstructionList mParseDoBranchList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   B L O C K   I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @blockInstruction extends @syntaxInstruction {
  @lstring mReceiverVariable ;
  @lstring mBlockMethodName ;
  @actualParameterList mPrologActualParameterList ;
  @syntaxInstructionList mInstructionList ;
  @actualParameterList mEpilogActualParameterList ;
}

#---------------------------------------------------------------------------*

class @syntaxComponentRoot {
  @lstring mSyntaxComponentName ;
  @lstring mImportedLexiqueReference ;
  @nonterminalDeclarationList mNonterminalDeclarationList ;
  @syntaxRuleList mRuleList ;
  @semanticDeclarationStruct mSemanticDeclarations ;
}

#---------------------------------------------------------------------------*

end semantics ;