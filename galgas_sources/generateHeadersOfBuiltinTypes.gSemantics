#---------------------------------------------------------------------------*
#                                                                           *
#  Generate headers of Builtin types                                        *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics generateHeadersOfBuiltinTypes :
  import semantics semanticsTypes in "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

filewrapper builtinTypeGenerationTemplate in "../generation_templates/semantic_generation" {
} {
  template header "GALGAS_builtin_type.h.gTemplate"
    ?@string TYPE
  ;
}

#---------------------------------------------------------------------------*

routine generateHeadersOfBuiltinTypes ??@string inDirectory :
  if inDirectory != "" then
    if not [inDirectory directoryExists] then
      error here : "the '" . inDirectory . "' directory does not exist" ;
    else
      const @typeMap builtinTypeMap := constructBuiltinTypeMap [] ;
      log builtinTypeMap ;
      foreach builtinTypeMap do
        const @string typeName := generatedTypeName [![key string]] ;
        [@string generateFile
          !inDirectory
          !typeName . ".h"
          !"//"
          !"\n\n" # Defaut user zone1
          ![filewrapper builtinTypeGenerationTemplate.header
            !typeName
          ]
          !"\n\n" # Defaut user zone2
          !""
        ] ;
      end foreach ;
    end if ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;