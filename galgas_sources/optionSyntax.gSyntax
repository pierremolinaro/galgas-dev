#---------------------------------------------------------------------------*
#                                                                           *
#  'option' component parser, as model builder                              *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax optionSyntax ("galgas_scanner.gLexique") feature translate :
import "optionTypesForAST.gSemantics" ;

#---------------------------------------------------------------------------*

rule <option_component_start_symbol>
 !@optionComponentAST outOptionComponentRoot
:
  $option$ :> ?* ?* ;
  send "HELLO" ;
#--- Option Component Name
  $identifier$ ?@lstring mOptionComponentName indexing optionComponentDefinition ;
  $:$ ;
#--- Parse the option list
  @commandLineOptionListAST mOptions [emptyList] ;
  repeat
  while 
    <option> !?mOptions ;
  end repeat ;
  $end$ ;
  $option$ ;
  $;$ ;
  outOptionComponentRoot := [@optionComponentAST new
    !mOptionComponentName
    !mOptions
  ] ;
end rule ;

#---------------------------------------------------------------------------*

rule <option> ?!@commandLineOptionListAST ioCommandLineOptionList :
  $type_name$ ?@lstring mOptionTypeName  ;
  $identifier$ ?@lstring mOptionInternalName ;
  $:$ ;
  $literal_char$ ?@lchar mOptionInvocationLetter ;
  $,$ ;
  $literal_string$ ?@lstring mOptionInvocationString ;
  $->$ ;
  $literal_string$ ?@lstring mOptionComment ;
  @lstring defaultValue [new !"" !here] ;
  @optionDefaultValueEnumAST optionDefaultValueKind ;
  select
    optionDefaultValueKind := [@optionDefaultValueEnumAST noDefaultValue] ;
  or
    $default$ ;
    select
      $literal_string$ ? defaultValue ;
      optionDefaultValueKind := [@optionDefaultValueEnumAST stringDefaultValue] ;
    or
      $unsigned_literal_integer$ ? @luint v ;
      defaultValue := [@lstring new ![[v uint] string] ![v location]] ;
      optionDefaultValueKind := [@optionDefaultValueEnumAST unsignedDefaultValue] ;
    end select ;
  end select ;
  $;$ ;
  ioCommandLineOptionList +=
    !mOptionTypeName
    !mOptionInternalName
    !mOptionInvocationLetter
    !mOptionInvocationString
    !mOptionComment
    !defaultValue
    !optionDefaultValueKind
  ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;
