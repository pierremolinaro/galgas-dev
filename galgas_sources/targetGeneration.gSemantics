#---------------------------------------------------------------------------*

semantics targetGeneration :
  import "projectMetamodel.gSemantics" ;
  import "XcodeProjectGeneration.gSemantics" ;

  import semantics projectMetamodel in "projectMetamodel.gSemantics" ;
  import semantics XcodeProjectGeneration in "XcodeProjectGeneration.gSemantics" ;

#---------------------------------------------------------------------------*


filewrapper targetGenerationFileWrapper in "../generation_templates/target_generation" {
 "bat", "command", "rtf"
} {
  template makefile_macosx_intel_makefile "makefile-macosx-intel/makefile" ?@string PROJECT_NAME ;
  template makefile_macosx_intel_makefile64 "makefile-macosx-intel/makefile64" ?@string PROJECT_NAME ;

  template makefile_macosx_ppc_makefile "makefile-macosx-ppc/makefile" ?@string PROJECT_NAME ;
  template makefile_macosx_ppc_makefile64 "makefile-macosx-ppc/makefile64" ?@string PROJECT_NAME ;

  template makefile_macosx_universal_makefile "makefile-macosx-universal/makefile" ?@string PROJECT_NAME ;
  template makefile_macosx_universal_makefile64 "makefile-macosx-universal/makefile64" ?@string PROJECT_NAME ;

  template makefile_macosx_makefile "makefile-macosx/makefile" ?@string PROJECT_NAME ;
  template makefile_macosx_makefile64 "makefile-macosx/makefile64" ?@string PROJECT_NAME ;

  template makefile_unix_makefile "makefile-unix/makefile" ?@string PROJECT_NAME ;
  template makefile_unix_makefile64 "makefile-unix/makefile64" ?@string PROJECT_NAME ;

  template makefile_i386_linux_on_macosx_makefile "makefile-i386-linux-on-macosx/makefile" ?@string PROJECT_NAME ;

  template makefile_mingw_on_macosx_makefile "makefile-mingw-on-macosx/makefile" ?@string PROJECT_NAME ;

  template makefile_msys_on_win32_makefile "makefile-msys-on-win32/makefile" ?@string PROJECT_NAME ;

  template makefile_info_plist "xcode-project/Info.plist" ?@string PROJECT_NAME ;

  template makefile_info_plist_strings "xcode-project/English.lproj/InfoPlist.strings" ?@string PROJECT_NAME ;

  template makefile_file_list "makefile-file-list.gTemplate"
    ?@stringset HAND_CODED_SOURCE_DIR_SET
    ?@stringlist HAND_CODED_SOURCE_FILE_LIST
    ?@stringlist MAKEFILE_FILE_LIST
    ?@bool COMPILE_FOR_GALGAS_1
  ;
}

#---------------------------------------------------------------------------*

routine generateMsysOnWin32Target
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-msys-on-win32" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-msys-on-win32/build.bat"] writeToFileWhenDifferentContents !dir ."/build.bat" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-msys-on-win32/clean.bat"] writeToFileWhenDifferentContents !dir ."/clean.bat" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-msys-on-win32/install.bat"] writeToFileWhenDifferentContents !dir ."/install.bat" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_msys_on_win32_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine generateMinGWOnMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-mingw-on-macosx" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-mingw-on-macosx/build.command"] writeToExecutableFileWhenDifferentContents !dir ."/build.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-mingw-on-macosx/clean.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_mingw_on_macosx_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine generateMakefileMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-macosx" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx/build.command"] writeToExecutableFileWhenDifferentContents !dir ."/build.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx/clean.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx/build64.command"] writeToExecutableFileWhenDifferentContents !dir ."/build64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx/clean64.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_makefile64 !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile64" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine generateMakefileIntelMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-macosx-intel" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-intel/build.command"] writeToExecutableFileWhenDifferentContents !dir ."/build.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-intel/clean.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-intel/build64.command"] writeToExecutableFileWhenDifferentContents !dir ."/build64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-intel/clean64.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_intel_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_intel_makefile64 !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile64" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine generateMakefilePPCMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-macosx-ppc" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-ppc/build.command"] writeToExecutableFileWhenDifferentContents !dir ."/build.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-ppc/clean.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-ppc/build64.command"] writeToExecutableFileWhenDifferentContents !dir ."/build64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-ppc/clean64.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_ppc_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_ppc_makefile64 !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile64" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine generateMakefileUniversalMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-macosx-universal" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-universal/build.command"] writeToExecutableFileWhenDifferentContents !dir ."/build.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-universal/clean.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-universal/build64.command"] writeToExecutableFileWhenDifferentContents !dir ."/build64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-macosx-universal/clean64.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_universal_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_macosx_universal_makefile64 !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile64" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine generateMakefileUnixTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-unix" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-unix/build.command"] writeToExecutableFileWhenDifferentContents !dir ."/build.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-unix/clean.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-unix/build64.command"] writeToExecutableFileWhenDifferentContents !dir ."/build64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-unix/clean64.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean64.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_unix_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_unix_makefile64 !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile64" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine generateI386LinuxOnMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-i386-linux-on-macosx" ;
  [dir makeDirectory] ;
  [[filewrapper targetGenerationFileWrapper."makefile-i386-linux-on-macosx/build.command"] writeToExecutableFileWhenDifferentContents !dir ."/build.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper."makefile-i386-linux-on-macosx/clean.command"] writeToExecutableFileWhenDifferentContents !dir ."/clean.command" ?*] ;
  [[filewrapper targetGenerationFileWrapper.makefile_i386_linux_on_macosx_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine updateTargets
  ??@lstring inProjectSourceFilePath
  ??@lstring inProjectName
  ??@string inTargetName
  ??@lstringlist inTargetFeatureList
  ??@projectSourceList inProjectSourceList
  ??@bool inGenerateForGalgas1
:
  const @string projectDirectory := [[inProjectSourceFilePath stringByDeletingLastPathComponent] stringByDeletingLastPathComponent] ;
#--- Check target names, file base name uniqueness, and build target file list
  @stringset externSourceSet_tool [emptySet] ;
  @stringset guiSourceSet_tool [emptySet] ;
  @stringset scannerSourceSet_tool [emptySet] ;
  @stringset optionSourceSet_tool [emptySet] ;
  @stringset semanticsSourceSet_tool [emptySet] ;
  @stringset syntaxSourceSet_tool [emptySet] ;
  @stringset grammarSourceSet_tool [emptySet] ;
  @stringset programSourceSet_tool [emptySet] ;
#---
  @stringset externSourceSet_app [emptySet] ;
  @stringset guiSourceSet_app [emptySet] ;
  @stringset scannerSourceSet_app [emptySet] ;
  @stringset optionSourceSet_app [emptySet] ;
  @stringset semanticsSourceSet_app [emptySet] ;
  @stringset syntaxSourceSet_app [emptySet] ;
  @stringset grammarSourceSet_app [emptySet] ;
  @stringset programSourceSet_app [emptySet] ;
#---
  @stringset sourceFileSet [emptySet] ;
  @stringlist generatedFileListForMakefile [emptyList] ;
  @stringlist handCodedSourceList [emptyList] ;
  @stringset handCodedSourceDirectorySet [emptySet] ;
  foreach inProjectSourceList do
    const @string baseName := [[[mFilePath string] lastPathComponent] stringByDeletingPathExtension] ;
    const @string cppFile := baseName . ".cpp" ;
  #--- Check base name is unique
    if [sourceFileSet hasKey !baseName] then
      error mFilePath: "there is already a file with '" . baseName . "' as base name in the project" ;
    end if ;
    sourceFileSet += !baseName ;
  #---
    switch mSourceKind
    when externSourceFile :
      const @string extension := [mFilePath pathExtension] ;
      if (extension == "cpp") | (extension == "mm") | (extension == "framework") then
        externSourceSet_tool += ![mFilePath string] ;
        handCodedSourceList += ![mFilePath lastPathComponent] ;
        handCodedSourceDirectorySet += !"../hand_coded_sources/" . [mFilePath stringByDeletingLastPathComponent] ;
      elsif extension == "m" then
        externSourceSet_app += ![mFilePath string] ;
        handCodedSourceDirectorySet += !"../hand_coded_sources/" . [mFilePath stringByDeletingLastPathComponent] ;
      else
        error mFilePath:"unhandled extension" ;
      end if ;
    when lexiqueSourceFile :
      generatedFileListForMakefile += !cppFile ;
      scannerSourceSet_tool += !baseName ;
#      scannerSourceSet_app += !baseName ;
    when syntaxSourceFile :
      generatedFileListForMakefile += !cppFile ;
      syntaxSourceSet_tool += !baseName ;
#      syntaxSourceSet_app += !baseName ;
    when semanticsSourceFile :
      generatedFileListForMakefile += !cppFile ;
      semanticsSourceSet_tool += !baseName ;
#      semanticsSourceSet_app += !baseName ;
    when grammarSourceFile :
      generatedFileListForMakefile += !cppFile ;
      grammarSourceSet_tool += !baseName ;
#      grammarSourceSet_app += !baseName ;
    when programSourceFile :
      generatedFileListForMakefile += !cppFile ;
      programSourceSet_tool += !baseName ;
#      programSourceSet_app += !baseName ;
    when optionSourceFile :
      generatedFileListForMakefile += !cppFile ;
      optionSourceSet_tool += !baseName ;
#      optionSourceSet_app += !baseName ;
    when guiSourceFile :
#      guiSourceSet_tool += !baseName ;
      guiSourceSet_app += !baseName ;
    end switch ;
  end foreach ;
#--- Parse features
  message "*** Updating targets\n" ;
  @stringset availableGenerationFeatures [emptySet] ;
  availableGenerationFeatures += !"makefile-macosx-intel" ;
  availableGenerationFeatures += !"makefile-macosx-ppc" ;
  availableGenerationFeatures += !"makefile-macosx-universal" ;
  availableGenerationFeatures += !"makefile-macosx" ;
  availableGenerationFeatures += !"makefile-unix" ;
  availableGenerationFeatures += !"makefile-i386-linux-on-macosx" ;
  availableGenerationFeatures += !"makefile-mingw-on-macosx" ;
  availableGenerationFeatures += !"makefile-msys-on-win32" ;
  availableGenerationFeatures += !"xcode-project" ;
  availableGenerationFeatures += !"xcode-arch:i386" ;
  availableGenerationFeatures += !"xcode-arch:x86_64" ;
  availableGenerationFeatures += !"xcode-arch:ppc64" ;
  availableGenerationFeatures += !"xcode-arch:ppc" ;
  @stringset generationFeatures [emptySet] ;
  foreach inTargetFeatureList do
    if [availableGenerationFeatures hasKey ![mValue string]] then
      if [generationFeatures hasKey ![mValue string]] then
        error mValue: "duplicate '" . mValue . "' feature" ;
      end if ;
      generationFeatures += ![mValue string] ;
    else
      @string s := "" ;
      foreach availableGenerationFeatures do
        s .= "\n  - '" . key . "'" ;
      end foreach ;
      error mValue: "unknown '" . mValue . "' feature; avalaible features are:" . s ;
    end if ;
  end foreach ;
#--- Special case for 'makefile-macosx-universal'
  if [generationFeatures hasKey !"makefile-macosx-universal"] & not [generationFeatures hasKey !"makefile-macosx-ppc"] then
    warning inProjectName : "'feature \"makefile-macosx-ppc\" ;' implicitly added, due to 'feature makefile-macosx-universal'" ;
    generationFeatures += !"makefile-macosx-ppc" ;
  end if ;
  if [generationFeatures hasKey !"makefile-macosx-universal"] & not [generationFeatures hasKey !"makefile-macosx-intel"] then
    warning inProjectName : "'feature \"makefile-macosx-intel\" ;' implicitly added, due to 'feature makefile-macosx-universal'" ;
    generationFeatures += !"makefile-macosx-intel" ;
  end if ;
#--- Check xcode target architectures
  @stringlist architectureList [emptyList] ;
  if [generationFeatures hasKey !"xcode-arch:i386"] then
     architectureList += !"i386" ;
  end if ;
  if [generationFeatures hasKey !"xcode-arch:x86_64"] then
     architectureList += !"x86_64" ;
  end if ;
  if [generationFeatures hasKey !"xcode-arch:ppc64"] then
     architectureList += !"ppc64" ;
  end if ;
  if [generationFeatures hasKey !"xcode-arch:ppc"] then
     architectureList += !"ppc7400" ; # G4
  end if ;
  if [generationFeatures hasKey !"xcode-project"] & ([architectureList length] == 0) then
    warning inProjectName : "'feature \"xcode-arch:i386\" ;' implicitly added, due to 'xcode-project'" ;
    architectureList += !"i386" ;
  end if ;
  if ([architectureList length] > 0) & not [generationFeatures hasKey !"xcode-project"] then
    error inProjectName : "'a 'xcode-arch:...' feature requires the 'xcode-project' feature" ;
  end if ;
#--- Generate projects
  if [generationFeatures hasKey !"makefile-macosx-ppc"] then
    generateMakefilePPCMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-macosx-intel"] then
    generateMakefileIntelMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-macosx-universal"] then
    generateMakefileUniversalMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-macosx"] then
    generateMakefileMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-unix"] then
    generateMakefileUnixTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-i386-linux-on-macosx"] then
    generateI386LinuxOnMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-mingw-on-macosx"] then
    generateMinGWOnMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-msys-on-win32"] then
    generateMsysOnWin32Target !projectDirectory !inTargetName ;
  end if ;
#--- Update makefile file list
  const @string newFileListContents := [filewrapper targetGenerationFileWrapper.makefile_file_list
    !handCodedSourceDirectorySet
    !handCodedSourceList
    !generatedFileListForMakefile
    !inGenerateForGalgas1
  ] ;
  @string fileListPath := [inProjectSourceFilePath stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT/file_list.mke" ;
  [newFileListContents writeToFileWhenDifferentContents !fileListPath ?*] ;
#---------------------- update Xcode project
  if [generationFeatures hasKey !"xcode-project"] then
    const @string dir := projectDirectory . "/xcode-project";
    [dir makeDirectory] ;

    const @string icon_help_file_path := dir ."/adding-icons-to-your-application.rtf" ;
    [[filewrapper targetGenerationFileWrapper."xcode-project/adding-icons-to-your-application.rtf"] writeToFileWhenDifferentContents !icon_help_file_path ?*] ;

    if not [dir ."/Info.plist" fileExists] then
    [[filewrapper targetGenerationFileWrapper.makefile_info_plist !inTargetName] writeToFile !dir ."/Info.plist"] ;
    end if ;

    [dir . "/English.lproj" makeDirectory] ;
    const @string InfoPlist_strings_path := dir ."/English.lproj/InfoPlist.strings" ;
    [[filewrapper targetGenerationFileWrapper.makefile_info_plist_strings !inTargetName] writeToFileWhenDifferentContents !InfoPlist_strings_path ?*] ;
    const @string Credits_rtf_path := dir ."/English.lproj/Credits.rtf" ;
    if not [Credits_rtf_path fileExists] then
      [[filewrapper targetGenerationFileWrapper."xcode-project/English.lproj/Credits.rtf"] writeToFile !Credits_rtf_path] ;
    end if ;
  #--- Make symbolic link
    const @string libpmPosixPath := [[@string stringWithEnvironmentVariable !"LIBPM_PATH"] unixPathWithNativePath] ;
    const @string symbLinkPath := dir . "/libpm" ;
    if not [symbLinkPath isSymbolicLink] then
      [symbLinkPath makeSymbolicLinkWithPath !libpmPosixPath] ;
    elsif [@string stringWithSymbolicLinkContents !symbLinkPath] != libpmPosixPath then
      [@string deleteFile !symbLinkPath] ;
      [symbLinkPath makeSymbolicLinkWithPath !libpmPosixPath] ;
    end if ;
  #--- Enumerate icons
    const @stringlist iconFiles := [dir regularFilesWithExtensions !false ![@stringlist listWithValue !"icns"]] ;
  #--- Build pathes
    const @string xcodeProjectPath := dir . "/" . inTargetName . ".xcodeproj" ; # Actually a directory
    const @string intermediateFilePath := [inProjectSourceFilePath stringByDeletingLastPathComponent] . "/GALGAS_OUTPUT/file_list_for_xcode_project.txt" ;
  #---
    [xcodeProjectPath makeDirectory] ;
  #--- Build intermediate
    generateXcodeProject
      !externSourceSet_tool
      !guiSourceSet_tool
      !scannerSourceSet_tool
      !optionSourceSet_tool
      !semanticsSourceSet_tool
      !syntaxSourceSet_tool
      !grammarSourceSet_tool
      !programSourceSet_tool
      !externSourceSet_app
      !guiSourceSet_app
      !scannerSourceSet_app
      !optionSourceSet_app
      !semanticsSourceSet_app
      !syntaxSourceSet_app
      !grammarSourceSet_app
      !programSourceSet_app
      !inTargetName # XCode project base name
      !xcodeProjectPath # Full Path of xxx.xcodeproj file
      !iconFiles
      !intermediateFilePath
      !architectureList
      !inGenerateForGalgas1
    ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;

