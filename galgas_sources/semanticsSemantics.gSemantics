#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 1997, ..., 2010 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsSemantics :
import "semanticsTypes.gSemantics" ;
import semantics semanticsTypes in "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#     V A R I A B L E    S T A T E    A U T O M A T O N                     *
#                                                                           *
#---------------------------------------------------------------------------*

#enum @variableStateAutomaton {
##--- Local variable
#  constructor localVariableDeclared ; localVariableUsed ; localVariableDropped ;
##--- Local constant
#  constructor localConstantDeclared ; localConstantDefined ; localContantUsed ;
##--- Input formal parameter (?@... )
#  constructor inputFormalParameterDefined ; inputFormalParameterUsed ; inputFormalParameterDropped ;
##--- Constant input formal parameter (??@... )
#  constructor constantInputFormalParameterDefined ; constantInputFormalParameterUsed ;
##--- Input/output formal parameter (?!@... )
#
##--- Output formal parameter (!@... )
#}{
#
##--- Modifier Write
#  modifier writeAccess ??@location inErrorLocation {
#  #--- Local variable
#    localVariableDeclared -> localVariableUsed ;
#    localVariableUsed     -> localVariableUsed ;
#    localVariableDropped  -> localVariableUsed ;
#  #--- Local constant
#    localConstantDeclared -> localConstantDefined ;
#    localConstantDefined  -> localConstantDefined error inErrorLocation:"the local constant cannot be written, it is is already defined" ;
#    localContantUsed      -> localContantUsed error inErrorLocation:"the local constant cannot be written, it is is already defined" ;
#  #--- Input formal parameter (?@... )
#    inputFormalParameterDefined -> inputFormalParameterDefined ;
#    inputFormalParameterUsed    -> inputFormalParameterUsed ;
#    inputFormalParameterDropped -> inputFormalParameterUsed ;
#  #--- Constant input formal parameter (??@... )
#    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "the input parameter cannot be written, it is a constant" ;
#    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed error inErrorLocation: "the input parameter cannot be written, it is a constant" ;
#  }
#
##--- Modifier Read
#  modifier readAccess ??@location inErrorLocation {
#  #--- Local variable
#    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it has no value" ;
#    localVariableUsed     -> localVariableUsed ;
#    localVariableDropped  -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it is dropped" ;
#  #--- Local constant
#    localConstantDeclared -> localConstantDefined error inErrorLocation: "the local constant cannot be read, it has no value" ;
#    localConstantDefined  -> localContantUsed ;
#    localContantUsed      -> localContantUsed ;
#  #--- Input formal parameter (?@... )
#    inputFormalParameterDefined -> inputFormalParameterUsed ;
#    inputFormalParameterUsed    -> inputFormalParameterUsed ;
#    inputFormalParameterDropped -> inputFormalParameterDefined  error inErrorLocation: "the input parameter cannot be read, it is dropped" ;
#  #--- Constant input formal parameter (??@... )
#    constantInputFormalParameterDefined -> constantInputFormalParameterUsed ;
#    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed ;
#  }
#
##--- Modifier Read/write
#  modifier readWriteAccess ??@location inErrorLocation {
#  #--- Local variable
#    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, has no value" ;
#    localVariableUsed     -> localVariableUsed ;
#    localVariableDropped  -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, it is dropped" ;
#  #--- Local constant
#    localConstantDeclared -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
#    localConstantDefined  -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
#    localContantUsed      -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
#  #--- Input formal parameter (?@... )
#    inputFormalParameterDefined -> inputFormalParameterUsed error inErrorLocation: "the input parameter cannot be modified, has no value" ;
#    inputFormalParameterUsed    -> inputFormalParameterUsed ;
#    inputFormalParameterDropped -> inputFormalParameterDefined error inErrorLocation: "the input parameter cannot be modified, it is dropped" ;
#  #--- Constant input formal parameter (??@... )
#    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be modified" ;
#    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be modified" ;
#  }
#
##--- Modifier Drop
#  modifier dropAccess ??@location inErrorLocation {
#  #--- Local variable
#    localVariableDeclared -> localVariableDropped error inErrorLocation: "the local variable cannot be dropped, has no value" ;
#    localVariableUsed     -> localVariableDropped ;
#    localVariableDropped  -> localVariableDropped error inErrorLocation: "the local variable is already dropped" ;
#  #--- Local constant
#    localConstantDeclared -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
#    localConstantDefined  -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
#    localContantUsed      -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
#  #--- Input formal parameter (?@... )
#    inputFormalParameterDefined -> inputFormalParameterUsed error inErrorLocation: "the input parameter cannot be dropped, has no value" ;
#    inputFormalParameterUsed    -> inputFormalParameterDropped ;
#    inputFormalParameterDropped -> inputFormalParameterDropped error inErrorLocation: "the input parameter is already dropped" ;
#  #--- Constant input formal parameter (??@... )
#    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "a constant input parameter cannot be dropped" ;
#    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed error inErrorLocation: "a constant input parameter cannot be dropped" ;
#  }
#
##--- Operator "end of repeated branch"
#  operator endOfRepeatedBranch ??@location inErrorLocation {
#    localVariableDeclared, localVariableDeclared -> localVariableDeclared error inErrorLocation:"error 1";
#    localVariableUsed, localVariableUsed -> localVariableUsed warning inErrorLocation:"warning 1";
#  }
#}

#---------------------------------------------------------------------------*
#                                                                           *
#  V A R I A B L E    M A P                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

#map @variableMap (@variableStateAutomaton:checkFinalState) {
##--- Inserting
#  insert insertListOfEntitiesLocalVariable error message "the variable '%K' is already declared" ;
#  insert insertSingleEntityLocalVariable error message "the variable '%K' is already declared" ;
#  insert insertEntityAttributeLocalVariable error message "the variable '%K' is already declared" ;
#  insert insertInArgument error message "the variable '%K' is already declared" ;
#  insert insertUnusedInArgument error message "the variable '%K' is already declared" ;
#  insert insertConstInArgument error message "the variable '%K' is already declared" ;
#  insert insertUsedConstInArgument error message "the variable '%K' is already declared" ;
#  insert insertUsedConstInArgumentNoShadow error message "the variable '%K' is already declared" ;
#  insert insertUnusedConstInArgument error message "the variable '%K' is already declared" ;
#  insert insertLocalVariable error message "the variable '%K' is already declared" ;
#  insert insertOutArgument error message "the variable '%K' is already declared" ;
#  insert insertOutProperty error message "the variable '%K' is already declared" ;
#  insert insertInOutArgument error message "the variable '%K' is already declared" ;
#  insert insertUsedInOutArgument error message "the variable '%K' is already declared" ;
#  insert insertUnusedInOutArgument error message "the variable '%K' is already declared" ;
##--- Searching
#  search searchForReadOnlyAccess error message "the variable '%K' cannot be accessed in read only mode" ;
#  search searchForDestructiveReadAccess error message "the variable '%K' cannot be accessed in destructive read mode" ;
#  search searchForReadWriteAccess error message "the variable '%K' cannot be accessed in read/write mode" ;
#  search searchForWriteAccess error message "the variable '%K' cannot be accessed in write mode" ;
#--- Blocks
#  block  verifyVariableUsing : () : (?@location positionErreur) ;
#  block  testBloc : () : () ;
#  block  testPart : () : (?@location positionErreur) ;
#  block  repeatBlock : () : () ;
#  block  repeatPart : () : (?@location positionErreur) ;
#--- Attributes
#  @AC_galgasType mArgumentType ;
#  @typeCplusPlusName mCplusPlusName ;
#}

#---------------------------------------------------------------------------*

#enum @localVariableStateAutomaton {
#  constructor localVariableDeclared ;
#  localVariableUsed, localVariableDropped ;
#}{
#
##--- Modifier Write
#  modifier writeAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableUsed ;
#    localVariableUsed -> localVariableUsed ;
#    localVariableDropped -> localVariableUsed ;
#  }
#
##--- Modifier Read
#  modifier readAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it has no value" ;
#    localVariableUsed -> localVariableUsed ;
#    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it is dropped" ;
#  }
#
##--- Modifier Read/write
#  modifier readWriteAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, has no value" ;
#    localVariableUsed -> localVariableUsed ;
#    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, it is dropped" ;
#  }
#
##--- Modifier Drop
#  modifier dropAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableDropped error inErrorLocation: "the local variable cannot be dropped, has no value" ;
#    localVariableUsed -> localVariableDropped ;
#    localVariableDropped -> localVariableDropped error inErrorLocation: "the local variable is already dropped" ;
#  }
#
##--- Method checkFinalState
#  method checkFinalState ??@location inErrorLocation {
#    localVariableDeclared warning inErrorLocation: "the local variable is unused" ;
#    localVariableUsed ;
#    localVariableDropped ;
#  }
#}

#---------------------------------------------------------------------------*
#                                                                           *
#  R O U T I N E   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @routineMap {
  @signature mRoutineSignature ;
  insert insertKey error message "the '%K' routine has been already declared in %L" ;
  search searchKey error message "the '%K' routine is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F U N C T I O N   M A P                                                  *
#                                                                           *
#---------------------------------------------------------------------------*

map @functionMap {
  @signature mFunctionSignature ;
  @typeMapIndex mResultTypeIndex ;
  insert insertKey error message "the '%K' function has been already declared in %L" ;
  search searchKey error message "the '%K' function is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F I L E W R A P P E R   M A P                                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @filewrapperTemplateMap {
  @signature mTemplateSignature ;
  @lstring mFilewrapperTemplatePath ;
  insert insertKey error message "the '%K' filewrapper template has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper template is not declared" ;
}

#---------------------------------------------------------------------------*

map @filewrapperMap {
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @filewrapperTemplateMap mFilewrapperTemplateMap ;
  insert insertKey error message "the '%K' filewrapper has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    D E S C E N D A N T    C L A S S    L I S T M A P                      *
#                                                                           *
#---------------------------------------------------------------------------*

list @classIndexList {
  @typeMapIndex mClassMapindex ;
}

#---------------------------------------------------------------------------*

listmap @descendantClassListMap (@classIndexList) ;

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    C O N T E X T                                       *
#                                                                           *
#---------------------------------------------------------------------------*

struct @semanticContext {
  @typeMap mTypeMap ;
  @routineMap mRoutineMap ;
  @functionMap mFunctionMap ;
  @descendantClassListMap mDescendantClassListMap ;
  @filewrapperMap mFilewrapperMap ;
}

#---------------------------------------------------------------------------*

end semantics ;
