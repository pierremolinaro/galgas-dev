#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 1997, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsSemantics :
import semantics semanticsMetamodel in "semanticsMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#     V A R I A B L E    S T A T E    A U T O M A T O N                     *
#                                                                           *
#---------------------------------------------------------------------------*

enum @variableStateAutomaton {
#--- Local variable
  constructor localVariableDeclared ; localVariableUsed ; localVariableDropped ;
#--- Local constant
  constructor localConstantDeclared ; localConstantDefined ; localContantUsed ;
#--- Input formal parameter (?@... )
  constructor inputFormalParameterDefined ; inputFormalParameterUsed ; inputFormalParameterDropped ;
#--- Constant input formal parameter (??@... )
  constructor constantInputFormalParameterDefined ; constantInputFormalParameterUsed ;
#--- Input/output formal parameter (?!@... )

#--- Output formal parameter (!@... )
}{

#--- Modifier Write
  modifier writeAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableUsed ;
    localVariableUsed     -> localVariableUsed ;
    localVariableDropped  -> localVariableUsed ;
  #--- Local constant
    localConstantDeclared -> localConstantDefined ;
    localConstantDefined  -> localConstantDefined error inErrorLocation:"the local constant cannot be written, it is is already defined" ;
    localContantUsed      -> localContantUsed error inErrorLocation:"the local constant cannot be written, it is is already defined" ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterDefined ;
    inputFormalParameterUsed    -> inputFormalParameterUsed ;
    inputFormalParameterDropped -> inputFormalParameterUsed ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "the input parameter cannot be written, it is a constant" ;
    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed error inErrorLocation: "the input parameter cannot be written, it is a constant" ;
  }

#--- Modifier Read
  modifier readAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it has no value" ;
    localVariableUsed     -> localVariableUsed ;
    localVariableDropped  -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it is dropped" ;
  #--- Local constant
    localConstantDeclared -> localConstantDefined error inErrorLocation: "the local constant cannot be read, it has no value" ;
    localConstantDefined  -> localContantUsed ;
    localContantUsed      -> localContantUsed ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterUsed ;
    inputFormalParameterUsed    -> inputFormalParameterUsed ;
    inputFormalParameterDropped -> inputFormalParameterDefined  error inErrorLocation: "the input parameter cannot be read, it is dropped" ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed ;
    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed ;
  }

#--- Modifier Read/write
  modifier readWriteAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, has no value" ;
    localVariableUsed     -> localVariableUsed ;
    localVariableDropped  -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, it is dropped" ;
  #--- Local constant
    localConstantDeclared -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
    localConstantDefined  -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
    localContantUsed      -> localContantUsed error inErrorLocation: "a local constant cannot be modified" ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterUsed error inErrorLocation: "the input parameter cannot be modified, has no value" ;
    inputFormalParameterUsed    -> inputFormalParameterUsed ;
    inputFormalParameterDropped -> inputFormalParameterDefined error inErrorLocation: "the input parameter cannot be modified, it is dropped" ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be modified" ;
    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed error inErrorLocation: "an input parameter cannot be modified" ;
  }

#--- Modifier Drop
  modifier dropAccess ??@location inErrorLocation {
  #--- Local variable
    localVariableDeclared -> localVariableDropped error inErrorLocation: "the local variable cannot be dropped, has no value" ;
    localVariableUsed     -> localVariableDropped ;
    localVariableDropped  -> localVariableDropped error inErrorLocation: "the local variable is already dropped" ;
  #--- Local constant
    localConstantDeclared -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
    localConstantDefined  -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
    localContantUsed      -> localContantUsed error inErrorLocation: "a local constant cannot be dropped" ;
  #--- Input formal parameter (?@... )
    inputFormalParameterDefined -> inputFormalParameterUsed error inErrorLocation: "the input parameter cannot be dropped, has no value" ;
    inputFormalParameterUsed    -> inputFormalParameterDropped ;
    inputFormalParameterDropped -> inputFormalParameterDropped error inErrorLocation: "the input parameter is already dropped" ;
  #--- Constant input formal parameter (??@... )
    constantInputFormalParameterDefined -> constantInputFormalParameterUsed error inErrorLocation: "a constant input parameter cannot be dropped" ;
    constantInputFormalParameterUsed    -> constantInputFormalParameterUsed error inErrorLocation: "a constant input parameter cannot be dropped" ;
  }

#--- Operator "end of repeated branch"
  operator endOfRepeatedBranch ??@location inErrorLocation {
    localVariableDeclared, localVariableDeclared -> localVariableDeclared error inErrorLocation:"error 1";
    localVariableUsed, localVariableUsed -> localVariableUsed warning inErrorLocation:"warning 1";
  }
}

#---------------------------------------------------------------------------*
#                                                                           *
#  V A R I A B L E    M A P                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

map @variableMap (@variableStateAutomaton:checkFinalState) {
#--- Inserting
  insert insertListOfEntitiesLocalVariable error message "the variable '%K' is already declared" ;
  insert insertSingleEntityLocalVariable error message "the variable '%K' is already declared" ;
  insert insertEntityAttributeLocalVariable error message "the variable '%K' is already declared" ;
  insert insertInArgument error message "the variable '%K' is already declared" ;
  insert insertUnusedInArgument error message "the variable '%K' is already declared" ;
  insert insertConstInArgument error message "the variable '%K' is already declared" ;
  insert insertUsedConstInArgument error message "the variable '%K' is already declared" ;
  insert insertUsedConstInArgumentNoShadow error message "the variable '%K' is already declared" ;
  insert insertUnusedConstInArgument error message "the variable '%K' is already declared" ;
  insert insertLocalVariable error message "the variable '%K' is already declared" ;
  insert insertOutArgument error message "the variable '%K' is already declared" ;
  insert insertOutProperty error message "the variable '%K' is already declared" ;
  insert insertInOutArgument error message "the variable '%K' is already declared" ;
  insert insertUsedInOutArgument error message "the variable '%K' is already declared" ;
  insert insertUnusedInOutArgument error message "the variable '%K' is already declared" ;
#--- Searching
  search searchForReadOnlyAccess error message "the variable '%K' cannot be accessed in read only mode" ;
  search searchForDestructiveReadAccess error message "the variable '%K' cannot be accessed in destructive read mode" ;
  search searchForReadWriteAccess error message "the variable '%K' cannot be accessed in read/write mode" ;
  search searchForWriteAccess error message "the variable '%K' cannot be accessed in write mode" ;
#--- Blocks
#  block  verifyVariableUsing : () : (?@location positionErreur) ;
#  block  testBloc : () : () ;
#  block  testPart : () : (?@location positionErreur) ;
#  block  repeatBlock : () : () ;
#  block  repeatPart : () : (?@location positionErreur) ;
#--- Attributes
#  @AC_galgasType mArgumentType ;
#  @typeCplusPlusName mCplusPlusName ;
}

#---------------------------------------------------------------------------*

#enum @localVariableStateAutomaton {
#  constructor localVariableDeclared ;
#  localVariableUsed, localVariableDropped ;
#}{
#
##--- Modifier Write
#  modifier writeAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableUsed ;
#    localVariableUsed -> localVariableUsed ;
#    localVariableDropped -> localVariableUsed ;
#  }
#
##--- Modifier Read
#  modifier readAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it has no value" ;
#    localVariableUsed -> localVariableUsed ;
#    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be read, it is dropped" ;
#  }
#
##--- Modifier Read/write
#  modifier readWriteAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, has no value" ;
#    localVariableUsed -> localVariableUsed ;
#    localVariableDropped -> localVariableUsed error inErrorLocation: "the local variable cannot be modified, it is dropped" ;
#  }
#
##--- Modifier Drop
#  modifier dropAccess ??@location inErrorLocation {
#    localVariableDeclared -> localVariableDropped error inErrorLocation: "the local variable cannot be dropped, has no value" ;
#    localVariableUsed -> localVariableDropped ;
#    localVariableDropped -> localVariableDropped error inErrorLocation: "the local variable is already dropped" ;
#  }
#
##--- Method checkFinalState
#  method checkFinalState ??@location inErrorLocation {
#    localVariableDeclared warning inErrorLocation: "the local variable is unused" ;
#    localVariableUsed ;
#    localVariableDropped ;
#  }
#}

#---------------------------------------------------------------------------*
#                                                                           *
#  G A L G A S    A B S T R A C T  T Y P E                                  *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @sortedTypeList ;
map @typeMap ;
mapindex @typeMapIndex ;

#---------------------------------------------------------------------------*

abstract class @ACGalgasType {
  method checkNoCircularity ??@uint unused inTypeCount :
  end method ;

  method enterInSortedList
    ?!@sortedTypeList unused ioSortedTypeList
    ??@typeMap unused inTypeMap
  :
  end method ;

  method generatePredeclarationInHeader
    ?!@string unused ioGeneratedUserZone3
  :
  end method ;

  method generateDeclaration_1_inHeader
    ?!@string unused ioGeneratedUserZone3
  :
  end method ;

  method generateDeclaration_2_inHeader
    ?!@string unused ioGeneratedUserZone3
  :
  end method ;

  method generateImplementation
    ?!@string unused ioGeneratedCode
  :
  end method ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E   M A P                                                          *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeMap {
  @ACGalgasType mType ;
  insert insertKey error message "the '@%K' type has been already declared in %L" ;
  search searchKey error message "the '@%K' type is not declared" ;
}

#---------------------------------------------------------------------------*

mapindex @typeMapIndex (@typeMap) {
  search searchKey error message "the '@%K' type is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D     T Y P E    L I S T                                     *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @sortedTypeList {
  @ACGalgasType mType ;
  @string mSortString ;
}{
  mSortString <
}

#---------------------------------------------------------------------------*
#                                                                           *
#    T Y P E    L I S T                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @typeList {
  @ACGalgasType mType ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S I G N A T U R E                                                        *
#                                                                           *
#---------------------------------------------------------------------------*

list @signature {
  @typeMapIndex mAttributeTypeIndex ;
  @lstring mFormalArgumentName ;
  @formalArgumentPassingMode mFormalArgumentPassingMode ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  R O U T I N E   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @routineMap {
  @signature mRoutineSignature ;
  insert insertKey error message "the '@%K' routine has been already declared in %L" ;
  search searchKey error message "the '@%K' routine is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A T T R I B U T E    L I S T                                             *
#                                                                           *
#---------------------------------------------------------------------------*

list @attributeList {
  @typeMapIndex mAttributeTypeIndex ;
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L O C A T I O N    T Y P E                                               *
#                                                                           *
#---------------------------------------------------------------------------*

class @locationGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S T R I N G    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @stringGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C H A R    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @charGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  B O O L    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @boolGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  U I N T    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @uintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S I N T    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @sintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  U I N T 6 4    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @uint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S I N T 6 4    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @sint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  D O U B L E    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @doubleGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L S T R I N G    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @lstringGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L C H A R    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @lcharGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L B O O L    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @lboolGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L U I N T    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @luintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L S I N T    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @lsintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L U I N T 6 4    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @luint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L S I N T 6 4    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @lsint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L D O U B L E    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @ldoubleGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S T R I N G S E T    T Y P E                                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @stringsetGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  B I N A R Y S E T    T Y P E                                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @binarysetGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C L A S S    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @classMethodList {
  @lstring mMethodName ;
  @signature mMethodSignature ;
}

#---------------------------------------------------------------------------*

class @classGalgasType extends @ACGalgasType {
  @bool mIsAbstract ;
  @lstring mClassName ;
  @typeMapIndex mSuperClassIndex ;
  @attributeList mAttributeList ;
  @classMethodList mMethodList ;

  override
  method checkNoCircularity ??@uint inTypeCount :
    @string classPath := [mClassName string] ;
    @stringset superClassSet [setWithString ![mClassName string]] ;
    @typeMapIndex superClassIndex := mSuperClassIndex ;
    @bool circularityError := false ;
    @bool ok := true ;
    loop inTypeCount :
    while [superClassIndex isRegular] & ok & not circularityError do
      if [superClassIndex isSolved] then
      #--- Retrieve super class features
        @lstring superClassName ;
        @ACGalgasType t ;
        [superClassIndex searchKey ?superClassName ?t] ;
      #--- Check there is no circularity
        circularityError := [superClassSet hasKey ![superClassName string]] ;
        superClassSet += ![superClassName string] ;
        classPath .= "." .  [superClassName string] ;
      #--- Check super class is actually a class, and get super super class info.
        @typeMapIndex superSuperClassIndex ;
        cast t :
        when >= @classGalgasType kClassType do
          superSuperClassIndex := [kClassType mSuperClassIndex] ;
        else
          error mClassName: "this class inherits from @"
            . superClassName . ", but @" . superClassName . " is not a class"
            -> superSuperClassIndex
          ;
        end cast ;
        superClassIndex := superSuperClassIndex ;
      else
        ok := false ;
        @string superClassName := [[superClassIndex key] string] ;
        error mClassName: "this class inherits from @"
          . superClassName . ", but @" . superClassName . " does not exist"
        ;
      end if ;
    end loop ;
  #--- Circularity error
    if circularityError then
      error mClassName:
        "inheritance circularity for class '"
      . [mClassName string] . "': "
      . [classPath stringByReplacingStringByString !"." !" extends "] ;
    end if ;
  end method ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @listGalgasType extends @ACGalgasType {
  @lstring mListTypeName ;
  @attributeList mAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    T Y P E                                      *
#                                                                           *
#---------------------------------------------------------------------------*

list @sortDescriptorList {
  @lstring mAttributeName ;
  @bool mAscending ;
}
#---------------------------------------------------------------------------*

class @sortedlistGalgasType extends @ACGalgasType {
  @lstring mListTypeName ;
  @attributeList mAttributeList ;
  @sortDescriptorList mSortDescriptorList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    I N D E X    T Y P E                                          *
#                                                                           *
#---------------------------------------------------------------------------*

class @mapindexType extends @ACGalgasType {
  @lstring mMapIndexName ;
  @typeMapIndex mMapTypeIndex ;
  @lstring mSearchMethodName ;
  @lstring mSearchMethodErrorMessage ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P   T Y P E                                                        *
#                                                                           *
#---------------------------------------------------------------------------*

class @mapType extends @ACGalgasType {
  @lstring mMapTypeName ;
  @attributeList mAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @enumType extends @ACGalgasType {
  @lstring mEnumTypeName ;
  @lstringlist mConstantList ;
}

#---------------------------------------------------------------------------*

struct @semanticContext {
  @typeMap mTypeMap ;
}

#---------------------------------------------------------------------------*

end semantics ;
