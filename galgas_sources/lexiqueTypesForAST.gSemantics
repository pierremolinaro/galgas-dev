#---------------------------------------------------------------------------*
#                                                                           *
#  'lexique' component metamodel                                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics lexiqueTypesForAST :

#---------------------------------------------------------------------------*

abstract class @lexicalExpressionAST {
}

#---------------------------------------------------------------------------*

abstract class @lexicalInstructionAST {
}

#---------------------------------------------------------------------------*

list @lexicalInstructionListAST {
  @lexicalInstructionAST mInstruction ;
}

#---------------------------------------------------------------------------*

list @metamodelTemplateDelimitorListAST {
  @lstring mStartString ;
  @lstringlist mOptionList ;
  @lstring mEndString ;
}

#---------------------------------------------------------------------------*

list @templateReplacementListAST {
  @lstring mMatchString ;
  @lstring mReplacementString ;
  @lstring mReplacementFunction ;
}

#---------------------------------------------------------------------------*

abstract class @abstractLexicalRuleAST {
}

#---------------------------------------------------------------------------*

list @lexicalRuleListAST {
  @abstractLexicalRuleAST mLexicalRule ;
}

#---------------------------------------------------------------------------*

class @lexicalImplicitRuleAST extends @abstractLexicalRuleAST {
  @lstring mListName ;
}

#---------------------------------------------------------------------------*

class @lexicalExplicitRuleAST extends @abstractLexicalRuleAST {
  @lexicalExpressionAST mLexicalRuleExpression ;
  @lexicalInstructionListAST mInstructionList ;
}

#---------------------------------------------------------------------------*

list @lexicalMessageDeclarationListAST {
  @lstring mMessageName ;
  @lstring mMessageValue ;
}

#---------------------------------------------------------------------------*

list @lexicalAttributeListAST {
  @lstring mTypeName ;
  @lstring mName ;
}

#---------------------------------------------------------------------------*

list @lexicalStyleListAST {
  @lstring mName ;
  @lstring mComment ;
}

#---------------------------------------------------------------------------*

list @terminalDeclarationListAST {
  @lstring mName ;
  @lstringlist mSentAttributeList ;
  @lstring mSyntaxErrorMessage ;
  @lstring mStyle ; # Empty string if no style
  @lstringlist mOptionList ;
}

#---------------------------------------------------------------------------*

list @lexicalListEntryListAST {
  @lstring mEntrySpelling ;
  @lstring mTerminalSpelling ;
  @lstringlist mFeatureList ;
}

#---------------------------------------------------------------------------*

list @lexicalListDeclarationListAST {
  @lstring mName ;
  @lstring mStyle ; # Empty string if no style
  @lstring mSyntaxErrorMessage ;
  @lstringlist mSentAttributeList ;
  @lexicalListEntryListAST mEntryList ;  
}

#---------------------------------------------------------------------------*

class @lexicalOrExpressionAST extends @lexicalExpressionAST {
  @lexicalExpressionAST mLeftOperand ;
  @lexicalExpressionAST mRightOperand ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterSetMatchAST extends @lexicalExpressionAST {
  @lstring mCharacterSetName ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterMatchAST extends @lexicalExpressionAST {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterIntervalMatchAST extends @lexicalExpressionAST {
  @lchar mLowerBound ;
  @lchar mUpperBound ;
}

#---------------------------------------------------------------------------*

class @lexicalStringMatchAST extends @lexicalExpressionAST {
  @lstring mString ;
}

#---------------------------------------------------------------------------*

class @lexicalStringNotMatchAST extends @lexicalExpressionAST {
  @lstring mString ;
  @lstring mErrorMessage ;
}

#---------------------------------------------------------------------------*

list @lexicalSendSearchListAST {
  @lstring mAttributeName ;
  @lstring mSearchListName ;
}

#---------------------------------------------------------------------------*

abstract class @lexicalSendDefaultActionAST {
}

#---------------------------------------------------------------------------*

class @lexicalStructuredSendInstructionAST extends @lexicalInstructionAST {
  @lexicalSendSearchListAST mLexicalSendSearchList ;
  @lexicalSendDefaultActionAST mLexicalSendDefaultAction ;
}

#---------------------------------------------------------------------------*

class @lexicalSimpleSendInstructionAST extends @lexicalInstructionAST {
  @lstring mSentTerminal ;
}

#---------------------------------------------------------------------------*

class @lexicalSendTerminalByDefaultAST extends @lexicalSendDefaultActionAST {
  @lstring mDefaultSentTerminal ;
}

#---------------------------------------------------------------------------*

class @lexicalErrorByDefaultAST extends @lexicalSendDefaultActionAST {
  @lstring mDefaultErrorMessageName ;
}

#---------------------------------------------------------------------------*

list @lexicalWhileBranchListAST {
  @lexicalExpressionAST mWhileExpression ;
  @lexicalInstructionListAST mWhileInstructionList ;
}

#---------------------------------------------------------------------------*

class @lexicalRepeatInstructionAST extends @lexicalInstructionAST {
  @lexicalInstructionListAST mRepeatedInstructionList ;
  @lexicalWhileBranchListAST mLexicalWhileBranchList ;
}

#---------------------------------------------------------------------------*

list @lexicalSelectBranchListAST {
  @lexicalExpressionAST mSelectExpression ;
  @lexicalInstructionListAST mSelectInstructionList ;
}

#---------------------------------------------------------------------------*

class @lexicalSelectInstructionAST extends @lexicalInstructionAST {
  @lexicalSelectBranchListAST mLexicalSelectBranchList ;
  @lexicalInstructionListAST mDefaultInstructionList ;
}

#---------------------------------------------------------------------------*

abstract class @abstractLexicalRoutineActualArgumentAST {
  @location mActualPassingModeLocation ;
}

#---------------------------------------------------------------------------*

list @lexicalRoutineCallActualArgumentListAST {
  @abstractLexicalRoutineActualArgumentAST mLexicalRoutineActualArgument ;
}

#---------------------------------------------------------------------------*

class @lexicalRoutineInstructionAST extends @lexicalInstructionAST {
  @lstring mRoutineName ;
  @lexicalRoutineCallActualArgumentListAST mActualArgumentList ;
  @lstringlist mErrorMessageList ;
}

#---------------------------------------------------------------------------*

class @lexicalAttributeInputOutputArgumentAST extends @abstractLexicalRoutineActualArgumentAST {
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*

abstract class @lexicalRoutineOrFunctionFormalInputArgumentAST {
}

#---------------------------------------------------------------------------*

class @lexicalFormalInputArgumentAST extends @abstractLexicalRoutineActualArgumentAST {
  @lexicalRoutineOrFunctionFormalInputArgumentAST mRoutineOrFunctionFormalInputArgument ;
}

#---------------------------------------------------------------------------*

list @lexicalFunctionCallActualArgumentListAST {
  @lexicalRoutineOrFunctionFormalInputArgumentAST mLexicalActualInputArgument ;
}

#---------------------------------------------------------------------------*

class @lexicalAttributeInputArgumentAST extends @lexicalRoutineOrFunctionFormalInputArgumentAST {
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterInputArgumentAST extends @lexicalRoutineOrFunctionFormalInputArgumentAST {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @lexicalUnsignedInputArgumentAST extends @lexicalRoutineOrFunctionFormalInputArgumentAST {
  @luint mUnsigned ;
}

#---------------------------------------------------------------------------*

class @lexicalCurrentCharacterInputArgumentAST extends @lexicalRoutineOrFunctionFormalInputArgumentAST {
  @location mLocation ;
}

#---------------------------------------------------------------------------*

class @lexicalFunctionInputArgumentAST extends @lexicalRoutineOrFunctionFormalInputArgumentAST {
  @lstring mFunctionName ;
  @lexicalFunctionCallActualArgumentListAST mFunctionActualArgumentList ;
}

#---------------------------------------------------------------------------*

class @lexicalDropInstructionAST extends @lexicalInstructionAST {
  @lstring mTerminalName ;
}

#---------------------------------------------------------------------------*

class @lexicalErrorInstructionAST extends @lexicalInstructionAST {
  @lstring mErrorMessageName ;
}

#---------------------------------------------------------------------------*

class @lexicalWarningInstructionAST extends @lexicalInstructionAST {
  @lstring mWarningMessageName ;
}

#---------------------------------------------------------------------------*

class @lexicalTagInstructionAST extends @lexicalInstructionAST {
  @lstring mLexicalTagName ;
}

#---------------------------------------------------------------------------*

class @lexicalRewindInstructionAST extends @lexicalInstructionAST {
  @lstring mLexicalTagName ;
  @lstring mTerminalName ;
}

#---------------------------------------------------------------------------*

class @lexicalLogInstructionAST extends @lexicalInstructionAST {
}

#---------------------------------------------------------------------------*

enum @lexicalArgumentModeAST {
  lexicalInputMode, lexicalInputOutputMode
}{
  reader lexicalFormalModeName :
    lexicalInputMode       -> "!" ;
    lexicalInputOutputMode -> "?!" ;
  end reader ;

  reader cppConstInFormalArgument :
    lexicalInputMode       -> "const " ;
    lexicalInputOutputMode -> "" ;
  end reader ;

  reader cppReferenceInFormalArgument :
    lexicalInputMode       -> "" ;
    lexicalInputOutputMode -> " &" ;
  end reader ;

  reader cocoaPointerInFormalArgument :
    lexicalInputMode       -> "" ;
    lexicalInputOutputMode -> " *" ;
  end reader ;
}

#---------------------------------------------------------------------------*

list @lexicalExternRoutineFormalArgumentListAST {
  @lexicalArgumentModeAST mPassingMode ;
  @lstring mLexicalTypeName ;
  @lstring mFormalArgumentName ;
}

#---------------------------------------------------------------------------*

list @externRoutineListAST {
  @lstring mRoutineName ;
  @lexicalExternRoutineFormalArgumentListAST mLexicalRoutineFormalArgumentList ;
  @stringlist mErrorMessageList ;
}

#---------------------------------------------------------------------------*

list @lexicalExternFunctionFormalArgumentListAST {
  @lstring mLexicalTypeName ;
  @lstring mFormalArgumentName ;
}

#---------------------------------------------------------------------------*

list @externFunctionListAST {
  @lstring mFunctionName ;
  @lexicalExternFunctionFormalArgumentListAST mLexicalFunctionFormalArgumentList ;
  @lstring mReturnedTypeName ;
}

#---------------------------------------------------------------------------*

list @indexingListAST {
  @lstring mIndexName ;
  @lstring mIndexComment ;
}

#---------------------------------------------------------------------------*

class @lexiqueComponentAST {
  @lstring mLexiqueComponentName  ;
  @bool mIsTemplate ;
  @metamodelTemplateDelimitorListAST mTemplateDelimitorList ;
  @templateReplacementListAST mTemplateReplacementList ;
  @lexicalAttributeListAST mLexicalAttributeList ;
  @lexicalStyleListAST mLexicalStyleList ;
  @terminalDeclarationListAST mTerminalDeclarationList  ;
  @lexicalMessageDeclarationListAST mLexicalMessageDeclarationList ;
  @lexicalListDeclarationListAST mLexicalListDeclarationList  ;
  @lexicalRuleListAST mLexicalRuleList ;
  @externRoutineListAST mExternRoutineList ;
  @externFunctionListAST mExternFunctionList  ;
  @indexingListAST mIndexingListAST ;
}

#---------------------------------------------------------------------------*

end semantics ;