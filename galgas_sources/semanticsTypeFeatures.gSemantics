#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 1997, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsTypeFeatures :
  import "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G E T    E N U M E R A T I O N    L I S T                                *
#                                                                           *
#---------------------------------------------------------------------------*

override method @stringsetPredefinedTypeAST getEnumerationList
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@enumerationDescriptorList outEnumerationList
  !@stringlist outEnumerationVariant
  !@string outEnumeratedType
:
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"string" ?stringTypeIndex] ;
  outEnumerationList := [@enumerationDescriptorList emptyList] ;
  outEnumerationList += !stringTypeIndex !"key" ;
  outEnumerationVariant := [@stringlist emptyList] ;
  outEnumerationVariant += !"up" ;
  outEnumerationVariant += !"down" ;
  outEnumeratedType := "string" ;
end method ;

#---------------------------------------------------------------------------*

override method @dataPredefinedTypeAST getEnumerationList
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@enumerationDescriptorList outEnumerationList
  !@stringlist outEnumerationVariant
  !@string outEnumeratedType
:
  @unifiedTypeMapProxy uintTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"uint" ?uintTypeIndex] ;
  outEnumerationList := [@enumerationDescriptorList emptyList] ;
  outEnumerationList += !uintTypeIndex !"data" ;
  outEnumerationVariant := [@stringlist emptyList] ;
  outEnumerationVariant += !"up" ;
  outEnumerationVariant += !"down" ;
  outEnumeratedType := "uint" ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G E T    M O D I F I E R    M A P                                        *
#                                                                           *
#---------------------------------------------------------------------------*

override method @stringsetPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  @unifiedTypeMapProxy stringType ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"string" ?stringType] ;
  outModifierMap := [@modifierMap emptyMap] ;
  [!?outModifierMap insertKey
    ![@lstring new !"removeKey" !here]
    ![@methodKind definedAsMember]
    ![@formalParameterSignature listWithValue !stringType ![@formalArgumentPassingModeAST argumentIn]]
    !false # No Compiler argument
    ![@methodQualifier isBasic]
    !""
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G E T    S U P P O R T E D    O P E R A T O R    F L A G S               *
#                                                                           *
#---------------------------------------------------------------------------*

override reader @applicationPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @objectPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @stringPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryConcatOperator [] | dotAssignOperator []
    | generateDescriptionReaderUtilityMethod [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @charPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @boolPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryAndOperator [] | binaryOrOperator [] | binaryXorOperator [] | unaryNotOperator []
    | generateDescriptionReaderUtilityMethod [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @uintPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryAddOperator [] | binarySubOperator [] | binaryMulOperator [] | binaryDivOperator []
    | binaryModOperator [] | binaryShiftOperator [] | unaryPlusOperator []
    | binaryAndOperator [] | binaryOrOperator [] | binaryXorOperator [] | unaryTildeOperator []
    | generateDescriptionReaderUtilityMethod [] | incDecOperator [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @sintPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryAddOperator [] | binarySubOperator [] | binaryMulOperator [] | binaryDivOperator []
    | binaryModOperator [] | binaryShiftOperator [] | unaryPlusOperator [] | unaryMinusOperator []
    | binaryAndOperator [] | binaryOrOperator [] | binaryXorOperator [] | unaryTildeOperator []
    | generateDescriptionReaderUtilityMethod []  | incDecOperator [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @uint64PredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryAddOperator [] | binarySubOperator [] | binaryMulOperator [] | binaryDivOperator []
    | binaryModOperator [] | binaryShiftOperator [] | unaryPlusOperator []
    | binaryAndOperator [] | binaryOrOperator [] | binaryXorOperator [] | unaryTildeOperator []
    | generateDescriptionReaderUtilityMethod [] | incDecOperator [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @sint64PredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryAddOperator [] | binarySubOperator [] | binaryMulOperator [] | binaryDivOperator []
    | binaryModOperator [] | binaryShiftOperator [] | unaryPlusOperator [] | unaryMinusOperator []
    | binaryAndOperator [] | binaryOrOperator [] | binaryXorOperator [] | unaryTildeOperator []
    | incDecOperator []  | generateDescriptionReaderUtilityMethod [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @doublePredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryAddOperator [] | binarySubOperator [] | binaryMulOperator [] | binaryDivOperator []
    | unaryPlusOperator [] | unaryMinusOperator [] | binaryModOperator []
    | generateDescriptionReaderUtilityMethod [] | isComparable [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @stringsetPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binarySubOperator []
    | binaryAndOperator [] | binaryOrOperator []
    | generateDescriptionReaderUtilityMethod []
    | generateEnumerationHelperMethods [] | isComparable []
    | generateCopyConstructorAndAssignmentOperator [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @binarysetPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := binaryAndOperator [] | binaryOrOperator [] | binaryXorOperator []
    | unaryTildeOperator [] | binaryShiftOperator []
    | generateDescriptionReaderUtilityMethod [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @typePredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @dataPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod []
    | generateEnumerationHelperMethods [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @functionPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @locationPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod [] ;
end reader ;

#---------------------------------------------------------------------------*

override reader @filewrapperPredefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := generateDescriptionReaderUtilityMethod [] ;
end reader ;

#---------------------------------------------------------------------------*

override method @stringsetPredefinedTypeAST getAddAssignArgumentList
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@unifiedTypeMapProxyList outAddAssignArgumentList
:
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioUnifiedTypeMap !"string" ?stringTypeIndex] ;
  outAddAssignArgumentList := [@unifiedTypeMapProxyList listWithValue !stringTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
