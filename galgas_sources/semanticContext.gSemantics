#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticContext :
  import "semanticsClassMethods.gSemantics" ;
  import "semanticsInstanceMethods.gSemantics" ;
  import "semanticsModifiers.gSemantics" ;
  import "semanticsReaders.gSemantics" ;
  import "semanticsConstructors.gSemantics" ;
  import "optionCompilation.gSemantics" ;

  import semantics semanticsClassMethods in "semanticsClassMethods.gSemantics" ;
  import semantics semanticsInstanceMethods in "semanticsInstanceMethods.gSemantics" ;
  import semantics semanticsModifiers in "semanticsModifiers.gSemantics" ;
  import semantics semanticsReaders in "semanticsReaders.gSemantics" ;
  import semantics semanticsConstructors in "semanticsConstructors.gSemantics" ;
  import semantics optionCompilation in "optionCompilation.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G R A M M A R   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @grammarLabelMap {
  @formalParameterSignature mLabelSignature ;
  insert insertKey error message "the '%K' grammar label has been already declared in %L" ;
  search searchKey error message "the '%K' grammar label is not declared" ;
}

#---------------------------------------------------------------------------*

map @grammarMap {
  @grammarLabelMap mLabelMap ;
  insert insertKey error message "the '%K' grammar has been already declared in %L" ;
  search searchKey error message "the '%K' grammar is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  R O U T I N E   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @routineMap {
  @formalParameterSignature mRoutineSignature ;
  insert insertKey error message "the '%K' routine has been already declared in %L" ;
  search searchKey error message "the '%K' routine is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F U N C T I O N   M A P                                                  *
#                                                                           *
#---------------------------------------------------------------------------*

map @functionMap {
  @unifiedTypeMapProxyList mFunctionSignature ;
  @unifiedTypeMapProxy mResultType ;
  insert insertKey error message "the '%K' function has been already declared in %L" ;
  search searchKey error message "the '%K' function is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F I L E W R A P P E R   M A P                                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @wrapperFileMap { # Key is file name
  @string mAbsoluteFilePath ;
  @uint mWrapperDirectoryIndex ;
  @uint mWrapperFileIndex ;
  insert insertKey error message "INTERNAL ERROR" ;
  search searchKey error message "INTERNAL ERROR" ;
}

#---------------------------------------------------------------------------*

map @wrapperDirectoryMap ;

map @wrapperDirectoryMap { # Key is directory name
  @wrapperFileMap mRegularFileMap ;
  @wrapperDirectoryMap mDirectoryMap ;
  @uint mWrapperDirectoryIndex ;
  insert insertKey error message "INTERNAL ERROR" ;
  search searchKey error message "INTERNAL ERROR" ;
}

#---------------------------------------------------------------------------*

map @filewrapperTemplateMap {
  @unifiedTypeMapProxyList mTemplateSignature ;
  @lstring mFilewrapperTemplatePath ;
  insert insertKey error message "the '%K' filewrapper template has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper template is not declared" ;
}

#---------------------------------------------------------------------------*

map @filewrapperMap {
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @wrapperFileMap mFilewrapperFileMap ;
  @wrapperDirectoryMap mFilewrapperDirectoryMap ;
  @filewrapperTemplateMap mFilewrapperTemplateMap ;
  insert insertKey error message "the '%K' filewrapper has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O P T I O N   M A P                                                      *
#                                                                           *
#---------------------------------------------------------------------------*

map @optionComponentMapForSemanticAnalysis {
  @commandLineOptionMap mBoolOptionMap ;
  @commandLineOptionMap mUIntOptionMap ;
  @commandLineOptionMap mStringOptionMap ;
  insert insertKey error message "redefintion of the '%K' option component: it has been already declared in %L" ;
  search searchKey error message "the '%K' option component is not imported" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    C O N T E X T                                       *
#                                                                           *
#---------------------------------------------------------------------------*

struct @semanticContext {
  @string mSourceFileAbsolutePath ;
  @unifiedTypeMap mTypeMap ;
  @routineMap mRoutineMap ;
  @functionMap mFunctionMap ;
  @filewrapperMap mFilewrapperMap ;
  @grammarMap mGrammarMap ;
  @optionComponentMapForSemanticAnalysis mOptionComponentMapForSemanticAnalysis ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C O L L E C T    T Y P E S                                             *
#                                                                           *
#---------------------------------------------------------------------------*

map @collectedTypeMap {
  insert insertKey error message "the '%K' type has been already defined in %L" ;
  search searchKey error message "the '%K' type is not declared" ;
}

#---------------------------------------------------------------------------*

mapproxy @collectedTypeMapIndex (@collectedTypeMap) ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    M E T H O D    M A P                                *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryMethodMapForType {
  @formalParameterListAST mFormalParameterList ;
  insert or replace ;
}

#---------------------------------------------------------------------------*

map @categoryMethodMapForBuildingContext {
  @categoryMethodMapForType mCategoryMethodMapForType ;
  insert insertKey error message "internal error" ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    R E A D E R    M A P                                *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryReaderMapForType {
  @lstring mResultTypeName ;
  @formalInputParameterListAST mInputFormalParameterList ;
  insert or replace ;
}

#---------------------------------------------------------------------------*

map @categoryReaderMapForBuildingContext {
  @categoryReaderMapForType mCategoryReaderMapForType ;
  insert insertKey error message "internal error" ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*

routine collectAttributeTypes
  ??@attributeInCollectionListAST inAttributeList
  ?!@collectedTypeMap ioCollectedTypeMap
:
  foreach inAttributeList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mAttributeTypeName string] ?*] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D I S P L A Y                                                          *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticDeclarationAST display
  ?!@string unused ioString
:
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST display
  ?!@string ioString
:
  ioString .= "  - abstract category method @" . mTypeName . " " . mAbstractCategoryMethodName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryMethodAST display
  ?!@string ioString
:
  ioString .= "  - category method @" . mTypeName . " " . mCategoryMethodName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST display
  ?!@string ioString
:
  ioString .= "  - overriding category method @" . mTypeName . " " . mOverridingCategoryMethodName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST display
  ?!@string ioString
:
  ioString .= "  - abstract category reader @" . mTypeName . " " . mAbstractCategoryReaderName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryReaderAST display
  ?!@string ioString
:
  ioString .= "  - category reader @" . mTypeName . " " . mCategoryReaderName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST display
  ?!@string ioString
:
  ioString .= "  - overriding category reader @" . mTypeName . " " . mOverridingCategoryReaderName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST display
  ?!@string ioString
:
  ioString .= "  - predefined type @" . mPredefinedTypeName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - map @" . mMapTypeName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - map proxy @" . mMapProxyTypeName . "(for map @" . mAssociatedMapTypeName . ")\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - enum @" . mEnumTypeName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - sorted list @" . mSortedListTypeName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - struct @" . mStructTypeName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - list @" . mListTypeName . "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - class @" . mClassTypeName ;
  if [mSuperClassName string] != "" then
    ioString .= " : @" . mSuperClassName ;
  end if ;
  ioString .= "\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST display
  ?!@string ioString
:
  ioString .= "  - listmap @" . mListmapTypeName . "\n" ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C O L L E C T     T Y P E S                                            *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticDeclarationAST collectTypes
  ?!@collectedTypeMap unused ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mAbstractCategoryMethodFormalParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
#---
  if not [ioCategoryMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryMethodMapForBuildingContext insertKey
      !mTypeName
      ![@categoryMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryMethodMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryMethodMapForType insertOrReplace
      !mAbstractCategoryMethodName
      !mAbstractCategoryMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryMethodAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mCategoryMethodFormalParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
#---
  if not [ioCategoryMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryMethodMapForBuildingContext insertKey
      !mTypeName
      ![@categoryMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryMethodMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryMethodMapForType insertOrReplace
      !mCategoryMethodName
      !mCategoryMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mOverridingCategoryMethodFormalParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mOverridingCategoryMethodFormalParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mAbstractCategoryReaderReturnedTypeName string] ?*] ;
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mAbstractCategoryReaderFormalInputParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
#---
  if not [ioCategoryReaderMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryReaderMapForBuildingContext insertKey
      !mTypeName
      ![@categoryReaderMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryReaderMapForBuildingContext searchKey !mTypeName do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mAbstractCategoryReaderReturnedTypeName string] ?*] ;
    [!?mCategoryReaderMapForType insertOrReplace
      !mAbstractCategoryReaderName
      !mAbstractCategoryReaderReturnedTypeName
      !mAbstractCategoryReaderFormalInputParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryReaderAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mCategoryReaderReturnedTypeName string] ?*] ;
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mCategoryReaderFormalInputParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
#---
  if not [ioCategoryReaderMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryReaderMapForBuildingContext insertKey
      !mTypeName
      ![@categoryReaderMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryReaderMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryReaderMapForType insertOrReplace
      !mCategoryReaderName
      !mCategoryReaderReturnedTypeName
      !mCategoryReaderFormalInputParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mOverridingCategoryReaderReturnedTypeName string] ?*] ;
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mOverridingCategoryReaderFormalInputParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mAbstractCategoryReaderReturnedTypeName string] ?*] ;
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mTypeName string] ?*] ;
#--- Enter parameter types
  foreach mAbstractCategoryReaderFormalInputParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey ![@lstring new !mPredefinedTypeName !here]] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mMapTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mMapProxyTypeName] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mEnumTypeName] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mSortedListTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mStructTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mListTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mClassTypeName] ;
  if [mSuperClassName string] != "" then
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mSuperClassName string] ?*] ;
  end if ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
  foreach mAbstractMethodList do
    foreach mSignature do
      [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
    end foreach ;
  end foreach ;
  foreach mMethodList do
    foreach mSignature do
      [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
    end foreach ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mListmapTypeName] ;
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mAssociatedListTypeName string] ?*] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N T E R    T Y P E S                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;


#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@predefinedTypeAST enterInSemanticContext\n" ;
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  const @predefinedTypeAST t := selfcopy ; # Bug in GALGAS 1
  [t getConstructorMap !?ioSemanticContext->mTypeMap ?constructorMap] ;
  [t getReaderMap !?ioSemanticContext->mTypeMap ?readerMap] ;
  [t getModifierMap !?ioSemanticContext->mTypeMap ?modifierMap] ;
  [t getInstanceMethodMap !?ioSemanticContext->mTypeMap ?instanceMethodMap] ;
  [t getClassMethodMap !?ioSemanticContext->mTypeMap ?classMethodMap] ;
  @unifiedTypeMapProxyList addAssignArgumentList ;
  [t getAddAssignArgumentList !?ioSemanticContext->mTypeMap ?addAssignArgumentList] ;
  @enumerationDescriptorList enumerationList ;
  [t getEnumerationList !?ioSemanticContext->mTypeMap ?enumerationList] ;
  @unifiedTypeMapProxy selfTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !mPredefinedTypeName ?selfTypeProxy] ;
  [!?ioSemanticContext->mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum predefinedType]
    ![@typedAttributeList listWithValue !selfTypeProxy ![@lstring new !mPredefinedTypeName !here] !true !true]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    !enumerationList
    ![t getSupportedOperatorFlags]
    !addAssignArgumentList
    ![t getNativeAttributeList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- location type index
  @unifiedTypeMapProxy locationTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"location" ?locationTypeProxy] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- current map type index
  @unifiedTypeMapProxy currentMapTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mMapTypeName string] ?currentMapTypeIndex] ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @enumerationDescriptorList enumerationDescriptor [listWithValue !lstringTypeIndex !"lkey"] ;
#--- modifier 'insertFakeKey'
  @unifiedTypeMapProxy locationTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"location" ?locationTypeIndex] ;
  @formalParameterSignature insertFakeKeyFormalArgumentList [emptyList] ;
  insertFakeKeyFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ; # Key
  insertFakeKeyFormalArgumentList += !locationTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ; # Error location
  insertFakeKeyFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ; # Error Message
  [!?modifierMap insertKey
    ![@lstring new !"insertFakeKey" !here]
    !insertFakeKeyFormalArgumentList
    !true
    ![@methodQualifier isInherited]
  ] ;
#--- modifier 'insertSilentFakeKey'
  insertFakeKeyFormalArgumentList := [@formalParameterSignature emptyList] ;
  insertFakeKeyFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ; # Key
  [!?modifierMap insertKey
    ![@lstring new !"insertSilentFakeKey" !here]
    !insertFakeKeyFormalArgumentList
    !true
    ![@methodQualifier isInherited]
  ] ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mMapTypeName string] !false ;
  enterConstructorWithArgument !?constructorMap !?ioSemanticContext->mTypeMap !"mapWithMapToOverride" ![mMapTypeName string] ![mMapTypeName string] !false ;
#--- Readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeyList" !"lstringlist" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"hasKey" !"string" !"bool" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"locationForKey" !"string" !"location" !true ;
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"overriddenMap" ![mMapTypeName string] !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyCount" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyKeyList" !"stringlist" !false ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @formalParameterSignature insertMethodFormalArgumentList [emptyList] ;
  insertMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  @formalParameterSignature removeMethodFormalArgumentList [emptyList] ;
  removeMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    insertMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    removeMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Handle insert modifiers
  foreach mInsertMethodList do
    if [modifierMap hasKey ![mInsertMethodName string]] then
      error mInsertMethodName:"the '" . mInsertMethodName . "' insert method is already declared" ;
    else
      [!?modifierMap insertOrReplace
        !mInsertMethodName
        !insertMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
      ] ;
    end if ;
  end foreach ;
#--- Handle remove modifiers
  foreach mRemoveMethodList do
    if [modifierMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' method is already declared as an insert modifier or a remove modifier" ;
    else
      [!?modifierMap insertOrReplace
        !mMethodName
        !removeMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
      ] ;
    end if ;
  end foreach ;
#--- Handle search methods (methods if no state, modifiers if states)
  if [mMapStateList length] == 0 then
    foreach mSearchMethodList do
      [!?instanceMethodMap insertKey
        !mSearchMethodName
        !false # is not a category
        !removeMethodFormalArgumentList
        ![mSearchMethodName location]
        !true
        ![@methodQualifier isBasic]
      ] ;
    end foreach ;
  else
    foreach mSearchMethodList do
      [!?modifierMap insertKey
        !mSearchMethodName
        !removeMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
      ] ;
    end foreach ;
  end if ;
#--- Enter "enterBranch" and "exitBranch" modifiers (only if there are states)
  if [mMapStateList length] > 0 then
    @unifiedTypeMapProxy locationTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"location" ?locationTypeIndex] ;
    [!?modifierMap insertKey
      ![@lstring new !"openBranch" !here]
      ![@formalParameterSignature emptyList]
      !true
      ![@methodQualifier isInherited]
    ] ;
    [!?modifierMap insertKey
      ![@lstring new !"closeBranch" !here]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn]]
      !true
      ![@methodQualifier isBasic]
    ] ;
    [!?modifierMap insertKey
      ![@lstring new !"closeOverride" !here]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn]]
      !true
      ![@methodQualifier isInherited]
    ] ;
    [!?instanceMethodMap insertKey
      ![@lstring new !"checkAutomatonStates" !here]
      !false # is not a category
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn]]
      !here
      !true
      ![@methodQualifier isBasic]
    ] ;
    foreach mMapOverrideBlockListAST do
      [!?modifierMap insertKey
        ![@lstring new !"openOverrideFor" . [mOverrideBlockName stringByCapitalizingFirstCharacter] !here]
        ![@formalParameterSignature emptyList]
        !true
        ![@methodQualifier isBasic]
      ] ;
    end foreach ;
  end if ;
#--- Enter "attributeForKey" readers
  foreach mAttributeList do
    const @lstring accessorName [new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !accessorName
      !false # Is not a category
      ![@unifiedTypeMapProxyList listWithValue !stringTypeIndex]
      !here
      !true
      !attributeTypeIndex
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#---------- Handle "insertOrReplace" modifier
  if [mInsertOrReplaceDeclarationListAST length] >= 1 then
    @location insertOrReplaceLocation ;
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceLocation] ;
    [!?modifierMap insertOrReplace
      ![@lstring new !"insertOrReplace" !insertOrReplaceLocation]
      !insertMethodFormalArgumentList
      !false
      ![@methodQualifier isBasic]
    ] ;
  end if ;
#---------- Enter "set...Attribute...forKey" modifiers
  foreach mAttributeList do
    const @lstring accessorName [new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @formalParameterSignature accessorFormalArgumentList [emptyList] ;
    accessorFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    accessorFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      !accessorName
      !accessorFormalArgumentList
      !true
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#--- Enter 'with' accessors
  @withAccessorMap withAccessorMap [emptyMap] ;
  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !stringTypeIndex] ;
  foreach mSearchMethodList do
    [!?withAccessorMap insertKey
      !mSearchMethodName
      !lstringTypeIndex
    ] ;
  end foreach ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    !mSearchMethodList
    ![@mapSearchMethodListAST emptyList]
    !withAccessorMap
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@mapProxyDeclarationAST enterInSemanticContext\n" ;
#--- Check associated map is really a map
  @typedAttributeList mapTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  @mapSearchMethodListAST searchMethodList ;
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedMapTypeName
    ?2*
    ?typeKindEnum
    ?2*
    ?mapTypedAttributeList
    ?12*
    ?searchMethodList
    ?3*
  ] ;
  if typeKindEnum != [@typeKindEnum mapType] then
    error mAssociatedMapTypeName : "the @" . mAssociatedMapTypeName . " should be a map type" ;
    mapTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapProxy associatedMapTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAssociatedMapTypeName string] ?associatedMapTypeIndex] ;
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- Handle map type name
  @unifiedTypeMapProxy mapProxyTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mMapProxyTypeName string] ?mapProxyTypeProxy] ;
#--- class method
  @formalParameterSignature argList [emptyList] ;
  argList += !associatedMapTypeIndex ![@formalArgumentPassingModeAST argumentInOut] ;
  argList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !mapProxyTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
  [!?classMethodMap insertKey
    ![@lstring new !"makeRegularProxy" !here]
    !argList
    !false
  ] ;
#--- null constructor
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"null" ![mMapProxyTypeName string] !false ;
#--- Search methods of associated map as constructors
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  constructorAttributeTypeList += !associatedMapTypeIndex ;
  constructorAttributeTypeList += !lstringTypeIndex ;
  foreach searchMethodList do
    [!?constructorMap insertKey
      !mSearchMethodName
      !constructorAttributeTypeList
      !true
      !mapProxyTypeProxy
    ] ;
  end foreach ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isSolved" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isNull" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isRegular" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"lkey" !"lstring" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"key" !"string" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"identifierRepresentation" !"string" !true ;
#--- Enter associated map attribute names as readers
  const @readerMap inheritedReaderMap := readerMap ;
  foreach mapTypedAttributeList do
    if [inheritedReaderMap hasKey ![mAttributeName string]] then
      @string s := "" ;
      foreach [inheritedReaderMap allKeys]
        do s .= "'" . key . "'" ;
        between s .= ", " ;
      end foreach ;
      error mAttributeName : "the map has a associated map proxy, which has predefined readers: " . s
       . "; you cannot use theses names for naming an attribute of this map" ;
    else
      [!?readerMap insertKey
        !mAttributeName
        !false # Is not a category
        ![@unifiedTypeMapProxyList emptyList]
        !here
        !true
        !mAttributeTypeProxy
        ![@methodQualifier isBasic]
      ] ;
    end if ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapProxyTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapProxyType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !mapTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    ![@enumerationDescriptorList emptyList]
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    !searchMethodList
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@enumDeclarationAST enterInSemanticContext\n" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- currentType type index
  @unifiedTypeMapProxy currentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mEnumTypeName string] ?currentTypeIndex] ;
#--- Constructors
  @stringset constantSet [emptySet] ;
  foreach mConstantList do
    constantSet += ![mValue string] ;
    enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap ![mValue string] ![mEnumTypeName string] !false ;
  end foreach ;
#--- readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap  ;
  foreach mEnumMessageList do
    enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap ![mEnumMessageName string] !"string" !false ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mEnumTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum enumType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    !generateDescriptionReaderUtilityMethod [] | isComparable []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    !constantSet
    !mConstantList
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

map @wrapperExtensionMap {
  insert insertKey error message "the '%K' extension has been already declared" ;
}

#---------------------------------------------------------------------------*

routine recursivelyEnumerateDirectories
  ??@string inAbsoluteSourcePath
  ??@string inPathInWrapper
  ??@wrapperExtensionMap inExtensionMap
  !@wrapperFileMap outWrapperFileMap
  !@wrapperDirectoryMap outWrapperDirectoryMap
  ?!@uint ioWrapperFileIndex
  ?!@uint ioWrapperDirectoryIndex
:
  @uint currentDirectoryIndex := ioWrapperDirectoryIndex ;
  ioWrapperDirectoryIndex ++ ;
#--- Enumerates regular files
  @stringlist files := [inAbsoluteSourcePath regularFiles !false] ;
  outWrapperFileMap := [@wrapperFileMap emptyMap] ;
  foreach files do
    if [inExtensionMap hasKey ![mValue pathExtension]] then
      @string absoluteFilePath := inAbsoluteSourcePath . "/" . mValue ;
      [!?outWrapperFileMap insertKey
        ![@lstring new !mValue !here]
        !absoluteFilePath
        !currentDirectoryIndex
        !ioWrapperFileIndex
      ] ;
      ioWrapperFileIndex ++ ;
    end if ;
  end foreach ;
#--- Enumerates regular directories
  @stringlist directories := [inAbsoluteSourcePath directories !false] ;
  outWrapperDirectoryMap := [@wrapperDirectoryMap emptyMap] ;
  foreach directories do
    @wrapperFileMap internalWrapperFileMap ;
    @wrapperDirectoryMap internalWrapperDirectoryMap ;
    @uint theDirectoryIndex := ioWrapperDirectoryIndex ;
    recursivelyEnumerateDirectories
      !inAbsoluteSourcePath . "/" . mValue
      !inPathInWrapper . mValue . "/"
      !inExtensionMap
      ?internalWrapperFileMap
      ?internalWrapperDirectoryMap
      !?ioWrapperFileIndex
      !?ioWrapperDirectoryIndex
    ;
    [!?outWrapperDirectoryMap insertKey
      ![@lstring new !mValue !here]
      !internalWrapperFileMap
      !internalWrapperDirectoryMap
      !theDirectoryIndex
    ] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Templates
  @filewrapperTemplateMap filewrapperTemplateMap [emptyMap] ;
  foreach mFilewrapperTemplateList do
    @unifiedTypeMapProxyList templateSignature [emptyList] ;
    foreach mFilewrapperTemplateFormalInputParameters do
      @unifiedTypeMapProxy parameterTypeIndex ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
      templateSignature += !parameterTypeIndex ;
    end foreach ;
    [!?filewrapperTemplateMap insertKey
      !mFilewrapperTemplateName
      !templateSignature
      !mFilewrapperTemplatePath
    ] ;
  end foreach ;
#--- Build extension map
  @wrapperExtensionMap extensionMap [emptyMap] ;
  foreach mFilewrapperExtensionList do
    [!?extensionMap insertKey !mValue] ;
  end foreach ;
#--- Enumerate filewrapper files
  @wrapperFileMap regularRootFileMap ;
  @wrapperDirectoryMap wrapperDirectoryMap ;
  @string absoluteSourcePath ;
  if [[mFilewrapperPath string] firstCharacterOrNul] == '/' then
    absoluteSourcePath := [mFilewrapperPath string] ;
  else
    absoluteSourcePath := [mSourceFileAbsolutePath stringByDeletingLastPathComponent] . "/" . [mFilewrapperPath string] ;
  end if ;
  if not [absoluteSourcePath directoryExists] then
    error mFilewrapperPath: "The '" . absoluteSourcePath . "' directory does not exist" 
    : regularRootFileMap, wrapperDirectoryMap ;
  else
  #--- Enumerate pathes
    @uint wrapperFileIndex := 0 ;
    @uint wrapperDirectoryIndex := 0 ;
    recursivelyEnumerateDirectories
     !absoluteSourcePath
     !"/"
     !extensionMap
     ?regularRootFileMap
     ?wrapperDirectoryMap
     !?wrapperFileIndex
     !?wrapperDirectoryIndex
   ;
  end if ;
#--- Insert filewrapper
  [!?ioSemanticContext->mFilewrapperMap insertKey
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperExtensionList
    !regularRootFileMap
    !wrapperDirectoryMap
    !filewrapperTemplateMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@listDeclarationAST enterInSemanticContext\n" ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
  end foreach ;
#--- uint type index
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#--- Element type index
  @unifiedTypeMapProxy listTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mListTypeName string] ?listTypeIndex] ;
#--- Attribute description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierOutputFormalArgumentList [emptyList] ;
  @formalParameterSignature modifierInputFormalArgumentList [emptyList] ;
  foreach typedAttributeList do
    enumerationDescriptor += !mAttributeTypeProxy ![mAttributeName string] ;
    constructorAttributeTypeList += !mAttributeTypeProxy ;
    modifierOutputFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
    modifierInputFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentConstantIn] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyList" ![mListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"listWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"subListFromIndex" !"uint" ![mListTypeName string] !true ;
  enterBaseReaderWith2Arguments !?readerMap !?ioSemanticContext->mTypeMap !"subListWithRange" !"uint" !"uint" ![mListTypeName string] !true ;
  foreach typedAttributeList do
    [!?readerMap insertOrReplace
      ![@lstring new ![mAttributeName string] . "AtIndex" ![mAttributeName location]]
      !false # Is not a category
      ![@unifiedTypeMapProxyList listWithValue !uintType]
      !here
      !true
      !mAttributeTypeProxy
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popFirst" !here]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popLast" !here]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"prependValue" !here]
    !modifierInputFormalArgumentList
    !false
    ![@methodQualifier isBasic]
  ] ;
  foreach typedAttributeList do
    @formalParameterSignature setterFormalArgumentList [emptyList] ;
    setterFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentConstantIn] ;
    setterFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      ![@lstring new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "AtIndex" ![mAttributeName location]]
      !setterFormalArgumentList
      !true
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"first" !here]
    !false # is not a category
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"last" !here]
    !false # is not a category
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator []
    !constructorAttributeTypeList
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@sortedListDeclarationAST enterInSemanticContext\n" ;
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#--- Element type index
  @unifiedTypeMapProxy listTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy!?ioSemanticContext->mTypeMap ![mSortedListTypeName string] ?listTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierFormalArgumentList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    modifierFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptySortedList" ![mSortedListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"sortedListWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popGreatest" !here]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popSmallest" !here]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"greatest" !here]
    !false # is not a category
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"smallest" !here]
    !false # is not a category
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mSortedListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum sortedListType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator []
    !constructorAttributeTypeList
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@structDeclarationAST enterInSemanticContext\n" ;
#--- Struct type index
  @unifiedTypeMapProxy structTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mStructTypeName string] ?structTypeIndex] ;
#--- Constructors and attribute map
  @attributeMap attributeMap [emptyMap] ;
  @constructorMap constructorMap [emptyMap] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    @bool hasSetter := false ;
    @bool hasGetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
  end foreach ;
  [!?constructorMap insertKey
    ![@lstring new !"new" !here]
    !constructorAttributeTypeList
    !false
    !structTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap ;
  foreach typedAttributeList do
    log "ATTRIBUTE" : [mAttributeName string] ;
    log "TYPE" :  [mAttributeTypeProxy key] ;
    enterBaseFinalReaderWithoutArgument
      !?readerMap
      !?ioSemanticContext->mTypeMap 
      ![mAttributeName string]
      ![mAttributeTypeProxy key]
      !false
    ;
  end foreach ;
  log mStructTypeName, readerMap ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mStructTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum structType]
    ![@typedAttributeList emptyList]
    !attributeMap
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    !generateDescriptionReaderUtilityMethod []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !typedAttributeList
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#---
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap inheritedInstanceMethodMap ;
  @typedAttributeList inheritedTypedAttributeList ;
  @attributeMap attributeMap [emptyMap] ;
#--- Handle super class
  @unifiedTypeMapProxy superClassIndex ;
  @bool generateHeaderInSeparateFile ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@unifiedTypeMapProxy null] ;
    readerMap := [@readerMap emptyMap] ;
    modifierMap := [@modifierMap emptyMap] ;
    inheritedInstanceMethodMap := [@instanceMethodMap emptyMap] ;
    inheritedTypedAttributeList := [@typedAttributeList emptyList] ;
    attributeMap := [@attributeMap emptyMap] ;
    generateHeaderInSeparateFile := false ;
    foreach mClassFeatureList do
      if [mValue string] == "generatedInSeparateFile" then
        generateHeaderInSeparateFile := true ;
      end if ;
    end foreach ;
  else
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mSuperClassName string] ?superClassIndex] ;
    @typeKindEnum typeKindEnum ;
    @readerMap inheritedReaderMap ;
    @modifierMap inheritedModifierMap ;
    [ioSemanticContext->mTypeMap searchKey
      !mSuperClassName
      ?2*
      ?typeKindEnum
      ?inheritedTypedAttributeList
      ?attributeMap
      ?2*
      ?inheritedReaderMap
      ?inheritedModifierMap
      ?inheritedInstanceMethodMap
      ?11*
      ?generateHeaderInSeparateFile
    ] ;
  #---
    if typeKindEnum != [@typeKindEnum classType] then
      error mSuperClassName : "the @" . mSuperClassName . " should be a class type" ;
    end if ;
  #--- Mark all modifiers as inherited
    modifierMap := [@modifierMap emptyMap] ;
    foreach inheritedModifierMap do
      [!?modifierMap insertKey
        !lkey
        !mParameterList
        !mHasCompilerArgument
        ![@methodQualifier isInherited]
      ] ; 
    end foreach ;
  #--- Mark all readers as inherited
    readerMap := [@readerMap emptyMap] ;
    foreach inheritedReaderMap do
      [!?readerMap insertKey
        !lkey
        !mIsCategory
        !mArgumentTypeList
        !mDeclarationLocation
        !mHasCompilerArgument
        !mReturnedType
        ![@methodQualifier isInherited]
      ] ; 
    end foreach ;
  end if ;
#--- Build attribute Map and constructor argument list
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  foreach inheritedTypedAttributeList do
    constructorAttributeTypeList += !mAttributeTypeProxy ;
  end foreach ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
  end foreach ;
#--- Current class Index
  @unifiedTypeMapProxy classIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mClassTypeName string] ?classIndex] ;
#--- Constructor
  @constructorMap constructorMap [emptyMap] ;
  if not mIsAbstract then
    [!?constructorMap insertKey
      ![@lstring new !"new" !here]
      !constructorAttributeTypeList
      !false
      !classIndex
    ] ;
  end if ;
#------------------------ Method map
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  foreach inheritedInstanceMethodMap do
    [!?instanceMethodMap insertKey
      !lkey
      !mIsCategory
      !mParameterList
      !mDeclarationLocation
      !mHasCompilerArgument
      ![@methodQualifier isInherited]
    ] ;
  end foreach ;
#------------------------ Abstract methods
  foreach mAbstractMethodList do
    @formalParameterSignature formalArgumentList [emptyList] ;
    foreach mSignature do
      @unifiedTypeMapProxy typeIndex ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
      formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
    end foreach ;
    with !?instanceMethodMap hasKey ![mMethodName string] do
      mQualifier := [@methodQualifier isOverridingAbstract] ;
    else
      [!?instanceMethodMap insertKey
        !mMethodName
        !false # is not a category
        !formalArgumentList
        ![mMethodName location]
        !true
        ![@methodQualifier isAbstract]
      ] ;
      end with ;
  end foreach ;
#------------------------ Concrete methods
  foreach mMethodList do
    @formalParameterSignature formalArgumentList [emptyList] ;
    foreach mSignature do
      @unifiedTypeMapProxy typeIndex ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
      formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
    end foreach ;
    with !?instanceMethodMap hasKey ![mMethodName string] do
      mQualifier := [@methodQualifier isOverriding] ;
    else
      [!?instanceMethodMap insertKey
        !mMethodName
        !false # is not a category
        !formalArgumentList
        ![mMethodName location]
        !true
        ![@methodQualifier isBasic]
      ] ;
    end with ;
  end foreach ;
#------------------------  Category methods
  if [inCategoryMethodMapForBuildingContext hasKey ![mClassTypeName string]] then
    @categoryMethodMapForType categoryMethodMapForType ;
    [inCategoryMethodMapForBuildingContext searchKey !mClassTypeName ?categoryMethodMapForType] ;
    foreach categoryMethodMapForType do
      @formalParameterSignature formalArgumentList [emptyList] ;
      foreach mFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
        formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
      end foreach ;
      [!?instanceMethodMap insertKey
        !lkey
        !true # is a category
        !formalArgumentList
        ![lkey location]
        !true
        ![@methodQualifier isBasic]
      ] ;
    end foreach ;
  end if ;
#------------------------  Category readers
  if [inCategoryReaderMapForBuildingContext hasKey ![mClassTypeName string]] then
    @categoryReaderMapForType categoryReaderMapForType ;
    [inCategoryReaderMapForBuildingContext searchKey !mClassTypeName ?categoryReaderMapForType] ;
    foreach categoryReaderMapForType do
      @unifiedTypeMapProxyList formalArgumentList [emptyList] ;
      foreach mInputFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
        formalArgumentList += !typeIndex ;
      end foreach ;
      @unifiedTypeMapProxy returnedType ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?returnedType] ;
      [!?readerMap insertKey
        !lkey
        !true # is a category
        !formalArgumentList
        ![lkey location]
        !true
        !returnedType
        ![@methodQualifier isBasic]
      ] ;
    end foreach ;
  end if ;
#--- Typed attribute list
  @typedAttributeList currentClassTypedAttributeList [emptyList] ;
  @typedAttributeList allTypedAttributeList := inheritedTypedAttributeList ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasSetter := false ;
    @bool hasGetter := true ;
    foreach mFeatureList do
      if [mValue string] == "setter" then
        hasSetter := true ;
      elsif [mValue string] == "nogetter" then
        hasGetter := false ;
      end if ;
    end foreach ;
    currentClassTypedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    allTypedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    if hasGetter then
      [!?readerMap insertKey
        !mAttributeName
        !false # Is not a category
        ![@unifiedTypeMapProxyList emptyList] # No argument
        !here
        !false # No Compiler argument
        !attributeTypeIndex # Returned type
        ![@methodQualifier isBasic]
      ] ;
#    else
#      [!?readerMap insertFakeKey
#        ![mAttributeName string]
#        ![mAttributeName location]
#        !"the '" . mAttributeName . "' attribute was declared here (use 'feature getter' for making it readable)"
#      ] ;
    end if ;
  end foreach ;
#--- set...attribute modifier
  foreach currentClassTypedAttributeList do
    if mHasSetter then
      [!?modifierMap insertKey
        ![@lstring new !"set". [[mAttributeName string] stringByCapitalizingFirstCharacter] !here]
        ![@formalParameterSignature listWithValue !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentIn]]
        !false # No compiler argument
        ![@methodQualifier isBasicFinal]
      ] ;
    end if ;
  end foreach ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mClassTypeName
    !not mIsAbstract # Concrete Type
    !superClassIndex
    ![@typeKindEnum classType]
    !allTypedAttributeList
    !attributeMap
    !currentClassTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    !0
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !currentClassTypedAttributeList
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !generateHeaderInSeparateFile
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterInSemanticContext # Handles also routine declaration
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @formalParameterSignature routineSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalArgumentPassingMode ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext->mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterInSemanticContext # Handles also function declaration
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @unifiedTypeMapProxyList functionSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex ;
  end foreach ;
#--- Result type
  @unifiedTypeMapProxy resultTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Result type
  @unifiedTypeMapProxy resultTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName ![@unifiedTypeMapProxyList emptyList] !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@listmapDeclarationAST enterInSemanticContext: @" . [mListmapTypeName string] . "\n" ;
#--- Check associated map is really a list
  @typedAttributeList listTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedListTypeName
    ?2*
    ?typeKindEnum
    ?listTypedAttributeList
    ?18*
  ] ;
  if typeKindEnum != [@typeKindEnum listType] then
    error mAssociatedListTypeName : "the '@" . mAssociatedListTypeName . "' type should be a list type" ;
    listTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapProxy associatedListTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAssociatedListTypeName string] ?associatedListTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapProxy currentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mListmapTypeName string] ?currentTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"keyList" !"stringlist" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"listForKey" !"string" ![mAssociatedListTypeName string] !false ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mListmapTypeName string] !false ;
#--- Enumerator description
  @enumerationDescriptorList enumeratorDescriptor [emptyList] ;
  enumeratorDescriptor += !stringTypeIndex !"key" ;
  enumeratorDescriptor += !associatedListTypeIndex !"mList" ;
#--- Add assign operator description
  @unifiedTypeMapProxyList addAssignOperatorDescription [emptyList] ;
  addAssignOperatorDescription += !stringTypeIndex ;
  foreach listTypedAttributeList do
    addAssignOperatorDescription += !mAttributeTypeProxy ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListmapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listMapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !listTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumeratorDescriptor
    !doNotGenererateObjectCompare []
    !addAssignOperatorDescription
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    O R D E R E D     S E M A N T I C    L I S T              *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @partiallyOrderedSemanticDeclarationListAST {
  @string mDependanceString ;
  @string mTypeString ;
  @semanticDeclarationAST mSemanticDeclaration ;
}{
  mDependanceString <
}

#---------------------------------------------------------------------------*

method @semanticDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST unused ioPartiallyOrderedDeclarationList
:
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  @predefinedTypeAST t := selfcopy ; # Bug in GALGAS 1
  ioPartiallyOrderedDeclarationList += !"" !mPredefinedTypeName !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mSuperClassName string] ![mClassTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mListTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mStructTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mEnumTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mSortedListTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mAssociatedListTypeName string] ![mListmapTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mMapTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mAssociatedMapTypeName string] ![mMapProxyTypeName string] !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !"" !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !"" !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !"" !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !"" !selfcopy ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C    C O N T E X T                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@string inSourceFile
  ??@semanticDeclarationListAST inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContext outSemanticContext
:
#--- Collect all types, for checking there is no undefined type
  @collectedTypeMap collectedTypeMap [emptyMap] ;
  @categoryMethodMapForBuildingContext categoryMethodMapForBuildingContext [emptyMap] ;
  @categoryReaderMapForBuildingContext categoryReaderMapForBuildingContext [emptyMap] ;
  foreach inSemanticDeclarationList do
    [mSemanticDeclaration collectTypes
      !?collectedTypeMap
      !?categoryMethodMapForBuildingContext
      !?categoryReaderMapForBuildingContext
    ] ;
  end foreach ;
#--- Check there is no undefined type
  @stringlist undefinedClasses := [collectedTypeMap unsolvedProxyKeyList] ;
  if [undefinedClasses length] == 1 then
    @string errorMessage := "there is 1 undefined type:" ;
    foreach undefinedClasses do
      errorMessage .= "\n-  @" . mValue ;
    end foreach ;
    error inEndOfSourceFile : errorMessage : outSemanticContext ;
  elsif [undefinedClasses length] > 1 then
    @string errorMessage := "there are " . [[undefinedClasses length] string] . " undefined types:" ;
    foreach undefinedClasses do
      errorMessage .= "\n-  @" . mValue ;
    end foreach ;
    error inEndOfSourceFile : errorMessage : outSemanticContext ;
  else # No undefined types
  #------ Build ordered types list, so that
  #  - a class appears after its super class
  #  - a map index appears after its associated map
  #  - a list map appears after its associated list
    @partiallyOrderedSemanticDeclarationListAST partiallyOrderedSemanticDeclarationListAST [emptySortedList] ;
    foreach inSemanticDeclarationList do
      [mSemanticDeclaration enterOrderedDeclaration !?partiallyOrderedSemanticDeclarationListAST] ;  
    end foreach ;
  #---
    @semanticDeclarationListAST orderedSemanticDeclarationListAST [emptyList] ;
    @stringset alreadyDefinedTypes [emptySet] ;
    alreadyDefinedTypes += !"" ;
    @bool progress := true ;
    loop [partiallyOrderedSemanticDeclarationListAST length] :
    while ([partiallyOrderedSemanticDeclarationListAST length] > 0) & progress do
      progress := false ;
      const @partiallyOrderedSemanticDeclarationListAST r := partiallyOrderedSemanticDeclarationListAST ;
      partiallyOrderedSemanticDeclarationListAST := [@partiallyOrderedSemanticDeclarationListAST emptySortedList] ;
      foreach r do
        if [alreadyDefinedTypes hasKey !mDependanceString] then
          orderedSemanticDeclarationListAST += !mSemanticDeclaration ;
          alreadyDefinedTypes += !mTypeString ;
          progress := true ;
        else
          partiallyOrderedSemanticDeclarationListAST += !mDependanceString !mTypeString !mSemanticDeclaration ;
        end if ;
      end foreach ;
    end loop ;
  #--- Display ordered declarations
#    @string s := "" ;
#    foreach orderedSemanticDeclarationListAST do
#      [mSemanticDeclaration display !?s] ;
#    end foreach ;
#    message "Ordered declarations:\n" . s ;
  #--- Remain in partiallyOrderedSemanticDeclarationListAST only circular definitions
    if [partiallyOrderedSemanticDeclarationListAST length] > 0 then
      @string s := "inheritance circularities involving the " ;
      foreach partiallyOrderedSemanticDeclarationListAST
        do s.= "@" . mTypeString ;
        between s .= ", " ;
      end foreach ;
      s .= " classes; detail:" ;
      foreach partiallyOrderedSemanticDeclarationListAST
        do s.= "\n  - @" . mTypeString . " inherits from @" . mDependanceString ;
      end foreach ;
      error inEndOfSourceFile : s : outSemanticContext ;
    else
    #--- Build initial semantic context
      outSemanticContext := [@semanticContext new
        !inSourceFile
        ![@unifiedTypeMap emptyMap]
        ![@routineMap emptyMap]
        ![@functionMap emptyMap]
        ![@filewrapperMap emptyMap]
        ![@grammarMap emptyMap]
        ![@optionComponentMapForSemanticAnalysis emptyMap]
      ] ;
    #--- Loop throught all declarations
      foreach orderedSemanticDeclarationListAST do
        [mSemanticDeclaration enterInSemanticContext
          !categoryMethodMapForBuildingContext
          !categoryReaderMapForBuildingContext
          !?outSemanticContext
        ] ;
      end foreach ;
    end if ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
