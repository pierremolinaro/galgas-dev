#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2014 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticContext :
  import "semanticsClassMethods.gSemantics" ;
  import "semanticsInstanceMethods.gSemantics" ;
  import "semanticsModifiers.gSemantics" ;
  import "semanticsReaders.gSemantics" ;
  import "semanticsConstructors.gSemantics" ;
  import "optionCompilation.gSemantics" ;
  import "lexiqueSemantics.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G R A M M A R   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @grammarLabelMap {
  @formalParameterSignature mLabelSignature ;
  insert insertKey error message "the '%K' grammar label has been already declared in %L" ;
  search searchKey error message "the '%K' grammar label is not declared" ;
}

#---------------------------------------------------------------------------*

map @grammarMap {
  @grammarLabelMap mLabelMap ;
  @bool mHasIndexing ;
  @bool mHasTranslateFeature ;
  insert insertGrammar error message "the '%K' grammar has been already declared in %L" ;
  search searchKey error message "the '%K' grammar is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  R O U T I N E   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @routineMap {
  @formalParameterSignature mRoutineSignature ;
  insert insertKey error message "the '%K' routine has been already declared in %L" ;
  search searchKey error message "the '%K' routine is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F U N C T I O N   M A P                                                  *
#                                                                           *
#---------------------------------------------------------------------------*

map @functionMap {
  @unifiedTypeMapProxyList mFunctionSignature ;
  @unifiedTypeMapProxy mResultType ;
  insert insertKey error message "the '%K' function has been already declared in %L" ;
  search searchKey error message "the '%K' function is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F I L E W R A P P E R   M A P                                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @wrapperFileMap { # Key is file name
  @string mAbsoluteFilePath ;
  @bool mIsTextFile ; # true: text file, false: binary file
  @uint mWrapperDirectoryIndex ;
  @uint mWrapperFileIndex ;
  insert insertKey error message "INTERNAL ERROR" ;
  search searchKey error message "INTERNAL ERROR" ;
}

#---------------------------------------------------------------------------*

map @wrapperDirectoryMap { # Key is directory name
  @wrapperFileMap mRegularFileMap ;
  @wrapperDirectoryMap mDirectoryMap ;
  @uint mWrapperDirectoryIndex ;
  insert insertKey error message "INTERNAL ERROR" ;
  search searchKey error message "INTERNAL ERROR" ;
}

#---------------------------------------------------------------------------*

map @filewrapperTemplateMap {
  @unifiedTypeMapProxyList mTemplateSignature ;
  @lstring mFilewrapperTemplatePath ;
  insert insertKey error message "the '%K' filewrapper template has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper template is not declared" ;
}

#---------------------------------------------------------------------------*

map @filewrapperMap {
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @wrapperFileMap mFilewrapperFileMap ;
  @wrapperDirectoryMap mFilewrapperDirectoryMap ;
  @filewrapperTemplateMap mFilewrapperTemplateMap ;
  insert insertKey error message "the '%K' filewrapper has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O P T I O N   M A P                                                      *
#                                                                           *
#---------------------------------------------------------------------------*

map @optionComponentMapForSemanticAnalysis {
  @bool mIsPredefined ;
  @commandLineOptionMap mBoolOptionMap ;
  @commandLineOptionMap mUIntOptionMap ;
  @commandLineOptionMap mStringOptionMap ;
  insert insertKey error message "redefinition of the '%K' option component: it has been already declared in %L" ;
  search searchKey error message "the '%K' option component is not imported" ;
}

#---------------------------------------------------------------------------*

map @optionMapForSemanticAnalysis {
  @unifiedTypeMapProxy mOptionType ;
  @char mOptionChar ;
  @string mOptionString ;
  @string mComment ;
  @string mDefaultValue ;
  insert insertKey error message "the '%K' command line option has been already declared in %L" ;
  search searchKey error message "the '%K' command line option is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O P T I O N   M A P                                                      *
#                                                                           *
#---------------------------------------------------------------------------*

map @lexiqueComponentMapForSemanticAnalysis {
  @terminalMap mTerminalMap ;
  @indexingListAST mIndexingListAST ;
  @lstring mIndexingDirectory ;
  insert insertKey error message "redefinition of the '%K' lexique component: it has been already declared in %L" ;
  search searchKey error message "the '%K' lexique component is not imported" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    C O N T E X T                                       *
#                                                                           *
#---------------------------------------------------------------------------*

struct @semanticContext {
  @string mSourceFileAbsolutePath ;
  @unifiedTypeMap mTypeMap ;
  @routineMap mRoutineMap ;
  @functionMap mFunctionMap ;
  @filewrapperMap mFilewrapperMap ;
  @grammarMap mGrammarMap ;
  @optionComponentMapForSemanticAnalysis mOptionComponentMapForSemanticAnalysis ;
  @lexiqueComponentMapForSemanticAnalysis mLexiqueComponentMapForSemanticAnalysis ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    M E T H O D    M A P                                *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryMethodMapForType {
  @formalParameterListAST mFormalParameterList ;
  insert insertKey error message "the '%K' method has been already declared in %L" ;
}

#---------------------------------------------------------------------------*

map @categoryMethodMapForBuildingContext {
  @categoryMethodMapForType mCategoryMethodMapForType ;
  insert insertKey error message "internal error" ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    M O D I F I E R    M A P                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryModifierMapForType {
  @formalParameterListAST mFormalParameterList ;
  insert insertKey error message "the '%K' modifier has been already declared in %L" ;
}

#---------------------------------------------------------------------------*

map @categoryModifierMapForBuildingContext {
  @categoryModifierMapForType mCategoryModifierMapForType ;
  insert insertKey error message "internal error" ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    R E A D E R    M A P                                *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryReaderMapForType {
  @lstring mResultTypeName ;
  @formalInputParameterListAST mInputFormalParameterList ;
  insert insertKey error message "the '%K' reader has been already declared in %L" ;
}

#---------------------------------------------------------------------------*

map @categoryReaderMapForBuildingContext {
  @categoryReaderMapForType mCategoryReaderMapForType ;
  insert insertKey error message "internal error"  ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    D I S P L A Y                                                          *
#                                                                           *
#---------------------------------------------------------------------------*

abstract reader @semanticDeclarationAST keyRepresentation -> @string outString
;

#---------------------------------------------------------------------------*

override reader @abstractCategoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "abstract category modifier @" . mTypeName . " " . mAbstractCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @categoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "category modifier @" . mTypeName . " " . mCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingCategoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "overriding category modifier @" . mTypeName . " " . mOverridingCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingAbstractCategoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "overriding category modifier @" . mTypeName . " " . mOverridingCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @abstractCategoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "abstract category method @" . mTypeName . " " . mAbstractCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @categoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "category method @" . mTypeName . " " . mCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingCategoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "overriding category method @" . mTypeName . " " . mOverridingCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingAbstractCategoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "overriding category method @" . mTypeName . " " . mOverridingCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @abstractCategoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "abstract category reader @" . mTypeName . " " . mAbstractCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @categoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "category reader @" . mTypeName . " " . mCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingCategoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "overriding category reader @" . mTypeName . " " . mOverridingCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingAbstractCategoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "overriding category reader @" . mTypeName . " " . mAbstractCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @predefinedTypeAST keyRepresentation
  ->@string outString
:
  outString := "predefined type @" . mPredefinedTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @uniqueMapDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "unique map @" . mMapTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @mapDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "map @" . mMapTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @mapProxyDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "map proxy @" . mMapProxyTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @enumDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "enum @" . mEnumTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @sortedListDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "sorted list @" . mSortedListTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @structDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "struct @" . mStructTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @listDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "list @" . mListTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @classDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "class @" . mClassTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @arrayDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "array @" . mArrayTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @listmapDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "listmap @" . mListmapTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @filewrapperDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "filewrapper @" . mFilewrapperName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @graphDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "graph @" . mGraphTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @externTypeDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "extern @" . mExternTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @onceFunctionDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "once function " . mFunctionName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @externFunctionDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "extern function " . mFunctionName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @externRoutineDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "extern routine " . mRoutineName ;
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N T E R    T Y P E S                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

routine addCategories
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
  ??@lstring inTypeName
  ?!@readerMap ioReaderMap
  ?!@modifierMap ioModifierMap
  ?!@instanceMethodMap ioInstanceMethodMap
:
#------------------------  Category methods
  if [inCategoryMethodMapForBuildingContext hasKey ![inTypeName string]] then
    @categoryMethodMapForType categoryMethodMapForType ;
    [inCategoryMethodMapForBuildingContext searchKey !inTypeName ?categoryMethodMapForType] ;
    foreach categoryMethodMapForType do
      @formalParameterSignature formalArgumentList [emptyList] ;
      foreach mFormalParameterList do
        [@unifiedTypeMapProxy makeProxy
          !?ioSemanticContext->mTypeMap
          !mFormalArgumentTypeName
          ??@unifiedTypeMapProxy typeIndex
        ] ;
        formalArgumentList += !typeIndex !mFormalArgumentPassingMode !mFormalArgumentName->string ;
      end foreach ;
      [!?ioInstanceMethodMap insertKey
        !lkey
        ![@methodKind definedAsCategory]
        !formalArgumentList
        ![lkey location]
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  end if ;
#------------------------  Category readers
  if [inCategoryReaderMapForBuildingContext hasKey ![inTypeName string]] then
    @categoryReaderMapForType categoryReaderMapForType ;
    [inCategoryReaderMapForBuildingContext searchKey !inTypeName ?categoryReaderMapForType] ;
    foreach categoryReaderMapForType do
      @unifiedTypeMapProxyAndParameterList formalArgumentList [emptyList] ;
      foreach mInputFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mFormalArgumentTypeName ?typeIndex] ;
        formalArgumentList += !typeIndex !mFormalArgumentName->string ;
      end foreach ;
      @unifiedTypeMapProxy returnedType ;
      [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mResultTypeName ?returnedType] ;
      [!?ioReaderMap insertKey
        !lkey
        ![@methodKind definedAsCategory]
        !formalArgumentList
        ![lkey location]
        !true
        !returnedType
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end foreach ;
  end if ;
#------------------------  Category modifiers
  if [inCategoryModifierMapForBuildingContext hasKey ![inTypeName string]] then
    @categoryModifierMapForType categoryModifierMapForType ;
    [inCategoryModifierMapForBuildingContext searchKey !inTypeName ?categoryModifierMapForType] ;
    foreach categoryModifierMapForType do
      @formalParameterSignature formalArgumentList [emptyList] ;
      foreach mFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mFormalArgumentTypeName ?typeIndex] ;
        formalArgumentList += !typeIndex !mFormalArgumentPassingMode !mFormalArgumentName->string ;
      end foreach ;
      [!?ioModifierMap insertKey
        !lkey
        ![@methodKind definedAsCategory]
        !formalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

#! enterInSemanticContext

#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @abstractCategoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

reader @predefinedTypeKindEnum defaultConstructorName
  -> @string outName
:
  switch selfcopy
  when predefined_bool, predefined_char,
       predefined_double, predefined_sint, predefined_sint64,
       predefined_string, predefined_uint, predefined_uint64
    : outName := "default" ;
  when predefined_binaryset : outName := "emptyBinarySet" ;
  when predefined_stringset : outName := "emptySet" ;
  when predefined_type : outName := "" ;
  when predefined_application : outName := "" ;
  when predefined_data : outName := "emptyData" ;
  when predefined_location : outName := "nowhere" ;
  when predefined_function : outName := "" ;
  when predefined_object : outName := "" ;
  when predefined_filewrapper : outName := "" ;
  end switch ;
end reader ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
  [selfcopy getConstructorMap !?ioSemanticContext->mTypeMap ?@constructorMap constructorMap] ;
  [selfcopy getReaderMap !?ioSemanticContext->mTypeMap ?@readerMap readerMap] ;
  [selfcopy getModifierMap !?ioSemanticContext->mTypeMap ?@modifierMap modifierMap] ;
  [selfcopy getInstanceMethodMap !?ioSemanticContext->mTypeMap ?@instanceMethodMap instanceMethodMap] ;
  [selfcopy getClassMethodMap !?ioSemanticContext->mTypeMap ?@classMethodMap classMethodMap] ;
  [selfcopy getAddAssignArgumentList !?ioSemanticContext->mTypeMap ?@unifiedTypeMapProxyAndParameterList addAssignArgumentList] ;
  [selfcopy getEnumerationList
    !?ioSemanticContext->mTypeMap
    ?@enumerationDescriptorList enumerationList
    ?@stringlist enumerationVariants
    ?@string enumeratedTypeName
  ] ;
  [@unifiedTypeMapProxy makeProxyFromString
    !?ioSemanticContext->mTypeMap
    !mPredefinedTypeName
    ?@unifiedTypeMapProxy selfTypeProxy
  ] ;
#--- Enumeration
  @unifiedTypeMapProxy enumeratedTypeProxy ;
  if enumeratedTypeName == "" then
    enumeratedTypeProxy := [@unifiedTypeMapProxy null] ;
  else
    [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !enumeratedTypeName ?enumeratedTypeProxy] ;
  end if ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    ![@lstring new !mPredefinedTypeName !here]
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#---
  [!?ioSemanticContext->mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum predefinedType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    !enumerationList
    !enumerationVariants
    ![selfcopy getSupportedOperatorFlags]
    !addAssignArgumentList
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    !enumeratedTypeProxy
    ![mKind defaultConstructorName]
    !"galgas2/predefined-types"
    ![@headerKind twoHeaders]
  ] ;
end method ;

#---------------------------------------------------------------------------*

once elementTypeNameSuffix ->@string outResult :
  outResult := ".element" ;
end once ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- bool type index
  @unifiedTypeMapProxy boolTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"bool" ? boolTypeIndex] ;
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- location type index
  @unifiedTypeMapProxy locationTypeProxy ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"location" ?locationTypeProxy] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- current map type index
  @unifiedTypeMapProxy currentMapTypeIndex ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mMapTypeName ?currentMapTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [listWithValue !lstringTypeIndex !"lkey"] ;
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mMapTypeName string] !false ;
  enterConstructorWithArgument !?constructorMap !?ioSemanticContext->mTypeMap !"mapWithMapToOverride" ![mMapTypeName string] !"inMap" ![mMapTypeName string] !false ;
#--- Readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"levels" !"uint" !false ;
  enterInheritedReaderWith2Arguments !?readerMap !?ioSemanticContext->mTypeMap !"hasKeyAtLevel" !"string" !"inKey" !"uint" !"inLevel" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"keySet" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"keyList" !"lstringlist" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"hasKey" !"string" !"inKey" !"bool" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"locationForKey" !"string" !"inKey" !"location" !true ;
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"overriddenMap" ![mMapTypeName string] !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
#--- Handle attributes
  @formalParameterSignature insertMethodFormalArgumentList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  insertMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inLKey" ;
  @formalParameterSignature removeMethodFormalArgumentList [emptyList] ;
  removeMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inLKey" ;
  var typesToIncludeInHeaderCompilation := [@unifiedTypeMapProxyList emptyList] ;
  foreach mAttributeList do
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ??@unifiedTypeMapProxy attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    typesToIncludeInHeaderCompilation += !attributeTypeIndex ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    insertMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
    removeMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] !mAttributeName->string ;
  end foreach ;
#--- Handle insert modifiers
  foreach mInsertMethodList do
    if [modifierMap hasKey ![mInsertMethodName string]] then
      error mInsertMethodName:"the '" . mInsertMethodName . "' insert method is already declared" ;
    else
      [!?modifierMap insertOrReplace
        !mInsertMethodName
        ![@methodKind definedAsMember]
        !insertMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !""
      ] ;
    end if ;
  end foreach ;
#--- Handle remove modifiers
  foreach mRemoveMethodList do
    if [modifierMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' method is already declared as an insert modifier or a remove modifier" ;
    else
      [!?modifierMap insertOrReplace
        !mMethodName
        ![@methodKind definedAsMember]
        !removeMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !""
      ] ;
    end if ;
  end foreach ;
#--- Handle search methods (methods if no state, modifiers if states)
  foreach mSearchMethodList do
    [!?instanceMethodMap insertKey
      !mSearchMethodName
      ![@methodKind definedAsMember]
      !removeMethodFormalArgumentList
      ![mSearchMethodName location]
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
#--- Enter "attributeForKey" readers
  foreach mAttributeList do
    const accessorName := [@lstring new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      ![@unifiedTypeMapProxyAndParameterList listWithValue !stringTypeIndex !"inKey"]
      !here
      !true
      !attributeTypeIndex
      ![@methodQualifier isBasic]
      !"" # No Error message
    ] ;
  end foreach ;
#---------- Handle "insertOrReplace" modifier
  if [mInsertOrReplaceDeclarationListAST length] >= 1 then
    @location insertOrReplaceLocation ;
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceLocation] ;
    [!?modifierMap insertOrReplace
      ![@lstring new !"insertOrReplace" !insertOrReplaceLocation]
      ![@methodKind definedAsMember]
      !insertMethodFormalArgumentList
      !false
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end if ;
#---------- Enter "set...Attribute...forKey" modifiers
  foreach mAttributeList do
    const accessorName := [@lstring new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ?attributeTypeIndex] ;
    @formalParameterSignature accessorFormalArgumentList [emptyList] ;
    accessorFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
    accessorFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
    [!?modifierMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      !accessorFormalArgumentList
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
#--- Enter 'with' accessors
  @withAccessorMap withAccessorMap [emptyMap] ;
  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !stringTypeIndex] ;
  foreach mSearchMethodList do
    [!?withAccessorMap insertKey
      !mSearchMethodName
      !lstringTypeIndex
    ] ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mMapTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Element type index
  [@unifiedTypeMapProxy makeProxy
    !?ioSemanticContext->mTypeMap
    ![@lstring new !mMapTypeName->string . elementTypeNameSuffix [] !mMapTypeName->location]
    ??@unifiedTypeMapProxy elementTypeProxy
  ] ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !mSearchMethodList
    ![@mapSearchMethodListAST emptyList]
    !withAccessorMap
    !false # Do not generate header in separate file
    !elementTypeProxy # Type for enumerated element for "for" instruction
    !"emptyMap"
    !"map-" . mMapTypeName
    ![@headerKind twoHeaders]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @uniqueMapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- location type index
  @unifiedTypeMapProxy locationTypeProxy ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"location" ?locationTypeProxy] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- lstringlist type index
  @unifiedTypeMapProxy lstringlistTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"lstringlist" ?lstringlistTypeIndex] ;
#--- current map type index
  @unifiedTypeMapProxy currentMapTypeIndex ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mMapTypeName ?currentMapTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [listWithValue !lstringTypeIndex !"lkey"] ;
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mMapTypeName string] !false ;
#--- Readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeyList" !"lstringlist" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"hasKey" !"string" !"inKey" !"bool" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"locationForKey" !"string" !"inKey" !"location" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyCount" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyList" !"lstringlist" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"edgeGraphvizRepresentation" !"string" !false ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @formalParameterSignature insertMethodFormalArgumentList [emptyList] ;
  insertMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inLKey" ;
  @formalParameterSignature removeMethodFormalArgumentList [emptyList] ;
  removeMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inLKey" ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    insertMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
    removeMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] !mAttributeName->string ;
  end foreach ;
#-------------------------- Insert Modifiers
  foreach mInsertMethodList do
    if [modifierMap hasKey ![mInsertMethodName string]] then
      error mInsertMethodName:"the '" . mInsertMethodName . "' insert method is already declared" ;
    else
      [!?modifierMap insertOrReplace
        !mInsertMethodName
        ![@methodKind definedAsMember]
        !insertMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end if ;
  end foreach ;
#--------------------------- EnterEdge Modifier
  @formalParameterSignature enterEdgeFormalArgumentList [emptyList] ;
  enterEdgeFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inSource" ;
  enterEdgeFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inTarget" ;
  [!?modifierMap insertOrReplace
    !["enterEdge" nowhere]
    ![@methodKind definedAsMember]
    !enterEdgeFormalArgumentList
    !false
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
#--------------------------- topologicalSort Method
  @formalParameterSignature topologicalSortFormalArgumentList [emptyList] ;
  topologicalSortFormalArgumentList += !lstringlistTypeIndex ![@formalArgumentPassingModeAST argumentOut] !"outSortedLKeys" ;
  topologicalSortFormalArgumentList += !lstringlistTypeIndex ![@formalArgumentPassingModeAST argumentOut] !"outUnsortedLKeys" ;
  [!?instanceMethodMap insertKey
    !["topologicalSort" nowhere]
    ![@methodKind definedAsMember]
    !topologicalSortFormalArgumentList
    !here
    !true
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
#--- Handle search methods (methods if no state, modifiers if states)
  if [mMapStateList length] == 0 then
    foreach mSearchMethodList do
      [!?instanceMethodMap insertKey
        !mSearchMethodName
        ![@methodKind definedAsMember]
        !removeMethodFormalArgumentList
        ![mSearchMethodName location]
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  else
    foreach mSearchMethodList do
      [!?modifierMap insertKey
        !mSearchMethodName
        ![@methodKind definedAsMember]
        !removeMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  end if ;
#--- Enter "enterBranch" and "exitBranch" modifiers (only if there are states)
  if [mMapStateList length] > 0 then
    @unifiedTypeMapProxy locationTypeIndex ;
    [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"location" ?locationTypeIndex] ;
    [!?modifierMap insertKey
      ![@lstring new !"openBranch" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature emptyList]
      !true
      ![@methodQualifier isInherited]
      !"" # No error message
    ] ;
    [!?modifierMap insertKey
      ![@lstring new !"closeBranch" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn] !"inErrorLocation"]
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
    [!?modifierMap insertKey
      ![@lstring new !"closeOverride" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn] !"inErrorLocation"]
      !true
      ![@methodQualifier isInherited]
      !"" # No error message
    ] ;
    [!?instanceMethodMap insertKey
      ![@lstring new !"checkAutomatonStates" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn] !"inErrorLocation"]
      !here
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
    foreach mMapOverrideBlockListAST do
      [!?modifierMap insertKey
        ![@lstring new !"openOverrideFor" . [mOverrideBlockName stringByCapitalizingFirstCharacter] !here]
        ![@methodKind definedAsMember]
        ![@formalParameterSignature emptyList]
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  end if ;
#--- Enter "attributeForKey" readers
  foreach mAttributeList do
    const accessorName := [@lstring new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      ![@unifiedTypeMapProxyAndParameterList listWithValue !stringTypeIndex !"inKey"]
      !here
      !true
      !attributeTypeIndex
      ![@methodQualifier isBasic]
      !"" # No Error message
    ] ;
  end foreach ;
#---------- Enter "set...Attribute...forKey" modifiers
  foreach mAttributeList do
    const accessorName := [@lstring new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ?attributeTypeIndex] ;
    @formalParameterSignature accessorFormalArgumentList [emptyList] ;
    accessorFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
    accessorFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
    [!?modifierMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      !accessorFormalArgumentList
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
#--- Enter 'with' accessors
  @withAccessorMap withAccessorMap [emptyMap] ;
  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !stringTypeIndex] ;
  foreach mSearchMethodList do
    [!?withAccessorMap insertKey
      !mSearchMethodName
      !lstringTypeIndex
    ] ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mMapTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum uniqueMapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !mSearchMethodList
    ![@mapSearchMethodListAST emptyList]
    !withAccessorMap
    !false # Do not generate header in separate file
    ![@unifiedTypeMapProxy null] # Type for enumerated element for "for" instruction
    !"emptyMap"
    !"uniquemap-" . mMapTypeName
    ![@headerKind twoHeaders]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Check associated map is really a map
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedMapTypeName
    ?3*
    ?@typeKindEnum typeKindEnum
    ?2*
    ?@typedAttributeList mapTypedAttributeList
    ?11*
    ?@mapSearchMethodListAST searchMethodList
    ?7*
  ] ;
  if typeKindEnum != [@typeKindEnum uniqueMapType] then
    error mAssociatedMapTypeName : "the @" . mAssociatedMapTypeName . " should be an unique map type" ;
    mapTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Associated map type index
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAssociatedMapTypeName ??@unifiedTypeMapProxy associatedMapTypeIndex] ;
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- Handle map type name
  @unifiedTypeMapProxy mapProxyTypeProxy ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mMapProxyTypeName ?mapProxyTypeProxy] ;
#--- class method : makeProxy
  @formalParameterSignature argList [emptyList] ;
  argList += !associatedMapTypeIndex ![@formalArgumentPassingModeAST argumentInOut] !"ioMap" ;
  argList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inLKey" ;
  argList += !mapProxyTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outProxy" ;
  [!?classMethodMap insertKey
    ![@lstring new !"makeProxy" !here]
    !argList
    !false
  ] ;
#--- class method : makeProxyFromString
  argList := [@formalParameterSignature emptyList] ;
  argList += !associatedMapTypeIndex ![@formalArgumentPassingModeAST argumentInOut] !"ioMap" ;
  argList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"inLKey" ;
  argList += !mapProxyTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outProxy" ;
  [!?classMethodMap insertKey
    ![@lstring new !"makeProxyFromString" !here]
    !argList
    !false
  ] ;
#--- null constructor
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"null" ![mMapProxyTypeName string] !false ;
#--- Search methods of associated map as constructors
  @unifiedTypeMapProxyAndParameterList constructorAttributeTypeList [emptyList] ;
  constructorAttributeTypeList += !associatedMapTypeIndex !"inMap" ;
  constructorAttributeTypeList += !lstringTypeIndex !"inLKey" ;
  foreach searchMethodList do
    [!?constructorMap insertKey
      !mSearchMethodName
      !constructorAttributeTypeList
      !true
      !mapProxyTypeProxy
    ] ;
  end foreach ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isSolved" !"bool" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isNull" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isRegular" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"lkey" !"lstring" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"key" !"string" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"identifierRepresentation" !"string" !true ;
#--- Enter associated map attribute names as readers
  const @readerMap inheritedReaderMap := readerMap ;
  foreach mapTypedAttributeList do
    if [inheritedReaderMap hasKey ![mAttributeName string]] then
      @string s := "" ;
      foreach [inheritedReaderMap keySet]
        do s .= "'" . key . "'" ;
        between s .= ", " ;
      end foreach ;
      error mAttributeName : "the map has a associated map proxy, which has predefined readers: " . s
       . "; you cannot use theses names for naming an attribute of this map" ;
    else
      [!?readerMap insertKey
        !mAttributeName
        ![@methodKind definedAsMember]
        ![@unifiedTypeMapProxyAndParameterList emptyList]
        !here
        !true
        !mAttributeTypeProxy
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end if ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mMapProxyTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapProxyTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapProxyType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !mapTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    !searchMethodList
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    ![@unifiedTypeMapProxy null] # Type for enumerated element for "for" instruction
    !"null" # Default constructor
    !"mapproxy-" . mMapProxyTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @externTypeDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#---
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  @constructorMap constructorMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Constructors
  foreach mExternTypeConstructorList do
    @unifiedTypeMapProxy returnedTypeProxy ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mResultTypeName ?returnedTypeProxy] ;
  #---
    @unifiedTypeMapProxyAndParameterList arguments [emptyList] ;
    foreach mParameterList do
      @unifiedTypeMapProxy argumentTypeProxy ;
      [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mFormalParameterTypeName ?argumentTypeProxy] ;
      arguments += !argumentTypeProxy !mFormalParameterName ;
    end foreach ;
  #---
    [!?constructorMap insertKey
      !mConstructorName
      !arguments
      !true #inHasLexiqueAndLocationArguments
      !returnedTypeProxy
    ] ;
  end foreach ;
#--- Readers
  foreach mExternTypeReaderList do
    @unifiedTypeMapProxy returnedTypeProxy ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mResultTypeName ?returnedTypeProxy] ;
  #---
    @unifiedTypeMapProxyAndParameterList arguments [emptyList] ;
    foreach mParameterList do
      @unifiedTypeMapProxy argumentTypeProxy ;
      [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mFormalParameterTypeName ?argumentTypeProxy] ;
      arguments += !argumentTypeProxy !mFormalParameterName ;
    end foreach ;
  #---
    [!?readerMap insertKey
      !mReaderName
      ![@methodKind definedAsMember]
      !arguments
      !here
      !true #inHasLexiqueAndLocationArguments
      !returnedTypeProxy
      ![@methodQualifier isBasicFinal]
      !"" # No Error message
    ] ;
  end foreach ;
#--- Modifiers
  foreach mExternTypeModifierList do
    @formalParameterSignature routineSignature [emptyList] ;
    foreach mFormalParameterList do
      [@unifiedTypeMapProxy makeProxy
        !?ioSemanticContext->mTypeMap
        !mFormalArgumentTypeName
        ??@unifiedTypeMapProxy parameterTypeIndex
      ] ;
      routineSignature += !parameterTypeIndex !mFormalArgumentPassingMode !mFormalArgumentName->string ;
    end foreach ;
  #---
    [!?modifierMap insertKey
      !mModifierName
      ![@methodKind definedAsMember]
      !routineSignature
      !true #inHasLexiqueAndLocationArguments
      ![@methodQualifier isBasicFinal]
      !"" # No Error message
    ] ;
  end foreach ;
#--- Methods
  foreach mExternTypeMethodList do
    @formalParameterSignature routineSignature [emptyList] ;
    foreach mFormalParameterList do
      @unifiedTypeMapProxy parameterTypeIndex ;
      [@unifiedTypeMapProxy makeProxy
        !?ioSemanticContext->mTypeMap
        !mFormalArgumentTypeName
        ?parameterTypeIndex
      ] ;
      routineSignature += !parameterTypeIndex !mFormalArgumentPassingMode !mFormalArgumentName->string ;
    end foreach ;
  #---
    [!?instanceMethodMap insertKey
      !mMethodName
      ![@methodKind definedAsMember]
      !routineSignature
      !mDeclarationLocation
      !true #inHasLexiqueAndLocationArguments
      ![@methodQualifier isBasicFinal]
      !"" # No Error message
    ] ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mExternTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum graphType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !0
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    ![@unifiedTypeMapProxy null] # Type for enumerated element for "for" instruction
    !"default" # Default constructor
    !"externtype-" . mExternTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @graphDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- string type proxy
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"string" ??@unifiedTypeMapProxy stringTypeProxy] ;
#--- lstring type proxy
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"lstring" ??@unifiedTypeMapProxy lstringTypeProxy] ;
#--- Graph type proxy
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mGraphTypeName ??@unifiedTypeMapProxy graphTypeProxy] ;
#--- Associated list type proxy
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAssociatedListTypeName ??@unifiedTypeMapProxy associatedListTypeProxy] ;
#--- @lstringlist type proxy
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"lstringlist" ??@unifiedTypeMapProxy lstringListTypeProxy] ;
#---
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  @constructorMap constructorMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Methods 'topologicalSort', 'depthFirstTopologicalSort'
  @formalParameterSignature formalParameterList [emptyList] ;
  formalParameterList += !associatedListTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outSortedInformationList" ;
  formalParameterList += !lstringListTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outSortedLKeyList" ;
  formalParameterList += !associatedListTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outUnsortedInformationList" ;
  formalParameterList += !lstringListTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outUnsortedLKeyList" ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"topologicalSort" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !here
    !true # Has Compiler Argument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"depthFirstTopologicalSort" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !here
    !true # Has Compiler Argument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  drop formalParameterList ;
#--- Methods 'nodesWithNoSuccessor', 'nodesWithNoPredecessor'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !associatedListTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outInformationList" ;
  formalParameterList += !lstringListTypeProxy ![@formalArgumentPassingModeAST argumentOut] !"outLKeyList" ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"nodesWithNoSuccessor" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !here
    !false # No Compiler Argument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"nodesWithNoPredecessor" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !here
    !false # No Compiler Argument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  drop formalParameterList ;
#--- Reader 'reversedGraph'
  enterBaseFinalReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"reversedGraph"
    !mGraphTypeName->string
    !false # No compiler argument
  ;
#--- Reader 'undefinedNodeCount'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"undefinedNodeCount"
    !"uint"
    !false # No compiler argument
  ;
#--- Reader 'undefinedNodeKeyList'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"undefinedNodeKeyList"
    !"stringlist"
    !false # No compiler argument
  ;
#--- Reader 'undefinedNodeReferenceList'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"undefinedNodeReferenceList"
    !"lstringlist"
    !false # No compiler argument
  ;
#--- Reader 'graphviz'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"graphviz"
    !"string"
    !false # No compiler argument
  ;
#--- Reader 'keyList'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"keyList"
    !"stringlist"
    !false # No compiler argument
  ;
#--- Reader 'egdes'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"edges"
    !"2stringlist"
    !false # No compiler argument
  ;
#--- Reader 'subgraphFromNodes'
  enterBaseReaderWith2Arguments
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"subgraphFromNodes"
    !"lstringlist"
    !"inStartNodeLStringList"
    !"stringset"
    !"inNodesToExclude"
    !mGraphTypeName->string
    !true # has compiler argument
  ;
#--- Constructor 'emptyGraph'
  [!?constructorMap insertKey
    ![@lstring new !"emptyGraph" !here]
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    !false # No compiler argument
    !graphTypeProxy
  ] ;
#--- Modifier 'enterNode'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] !"inLKey" ;
  foreach [associatedListTypeProxy mAddAssignOperatorArguments] do
    formalParameterList += !mType ![@formalArgumentPassingModeAST argumentIn] !mFormalParameterName ;
  end foreach ;
  foreach mInsertModifierList do
    [!?modifierMap insertOrReplace
      !mInsertModifierName
      ![@methodKind definedAsMember]
      !formalParameterList
      !true # has compiler argument
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
  drop formalParameterList ;
#--- Modifier 'removeEdgeToDominators'
  [!?modifierMap insertKey
    ![@lstring new !"removeEdgesToDominators" !here]
    ![@methodKind definedAsMember]
    ![@formalParameterSignature emptyList]
    !false # No compiler argument
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
#--- Modifier 'removeEdgesToNode'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !stringTypeProxy ![@formalArgumentPassingModeAST argumentIn] !"inNodeName" ;
  [!?modifierMap insertKey
    ![@lstring new !"removeEdgesToNode" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !true # Compiler argument
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
  drop formalParameterList ;
#--- Modifier 'addEdge'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] !"inSourceNodeLKey" ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] !"inTargetNodeLKey" ;
  [!?modifierMap insertKey
    ![@lstring new !"addEdge" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !false # No compiler argument
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
  drop formalParameterList ;
#--- Modifier 'noteNode'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] !"inNodeLKey" ;
  [!?modifierMap insertKey
    ![@lstring new !"noteNode" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !false # No compiler argument
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
  drop formalParameterList ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mGraphTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mGraphTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum graphType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    ![@unifiedTypeMapProxy null] # Type for enumerated element for "for" instruction
    !"emptyGraph" # Default constructor
    !"graph-" . mGraphTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@enumDeclarationAST enterInSemanticContext\n" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- currentType type index
  @unifiedTypeMapProxy currentTypeIndex ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mEnumTypeName ?currentTypeIndex] ;
#--- Constructors
  @stringset constantSet [emptySet] ;
  foreach mConstantList do
    constantSet += ![mValue string] ;
    enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap ![mValue string] ![mEnumTypeName string] !false ;
  end foreach ;
#--- readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap  ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mEnumTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mEnumTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum enumType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !generateDescriptionReaderUtilityMethod [] | isComparable []
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    !constantSet
    !mConstantList
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    ![@unifiedTypeMapProxy null] # Type for enumerated element for "for" instruction
    ![mConstantList mValueAtIndex !0]->string # Default constructor
    !"enum-" . mEnumTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*

map @wrapperExtensionMap {
  insert insertKey error message "the '%K' extension has been already declared" ;
}

#---------------------------------------------------------------------------*

routine recursivelyEnumerateDirectories
  ??@string inAbsoluteSourcePath
  ??@string inPathInWrapper
  ??@wrapperExtensionMap inTextFileExtensionMap
  ??@wrapperExtensionMap inBinaryFileExtensionMap
  !@wrapperFileMap outWrapperFileMap
  !@wrapperDirectoryMap outWrapperDirectoryMap
  ?!@uint ioWrapperFileIndex
  ?!@uint ioWrapperDirectoryIndex
:
  @uint currentDirectoryIndex := ioWrapperDirectoryIndex ;
  ioWrapperDirectoryIndex ++ ;
#--- Enumerates regular files
  @stringlist files := [inAbsoluteSourcePath regularFiles !false] ;
  outWrapperFileMap := [@wrapperFileMap emptyMap] ;
  foreach files do
    if [inTextFileExtensionMap hasKey ![mValue pathExtension]] then
      @string absoluteFilePath := inAbsoluteSourcePath . "/" . mValue ;
      [!?outWrapperFileMap insertKey
        ![@lstring new !mValue !here]
        !absoluteFilePath
        !true # Text File
        !currentDirectoryIndex
        !ioWrapperFileIndex
      ] ;
      ioWrapperFileIndex ++ ;
    elsif [inBinaryFileExtensionMap hasKey ![mValue pathExtension]] then
      @string absoluteFilePath := inAbsoluteSourcePath . "/" . mValue ;
      [!?outWrapperFileMap insertKey
        ![@lstring new !mValue !here]
        !absoluteFilePath
        !false # Binary file
        !currentDirectoryIndex
        !ioWrapperFileIndex
      ] ;
      ioWrapperFileIndex ++ ;
    end if ;
  end foreach ;
#--- Enumerates regular directories
  @stringlist directories := [inAbsoluteSourcePath directories !false] ;
  outWrapperDirectoryMap := [@wrapperDirectoryMap emptyMap] ;
  foreach directories do
    @wrapperFileMap internalWrapperFileMap ;
    @wrapperDirectoryMap internalWrapperDirectoryMap ;
    @uint theDirectoryIndex := ioWrapperDirectoryIndex ;
    recursivelyEnumerateDirectories
      !inAbsoluteSourcePath . "/" . mValue
      !inPathInWrapper . mValue . "/"
      !inTextFileExtensionMap
      !inBinaryFileExtensionMap
      ?internalWrapperFileMap
      ?internalWrapperDirectoryMap
      !?ioWrapperFileIndex
      !?ioWrapperDirectoryIndex
    ;
    [!?outWrapperDirectoryMap insertKey
      ![@lstring new !mValue !here]
      !internalWrapperFileMap
      !internalWrapperDirectoryMap
      !theDirectoryIndex
    ] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Templates
  @filewrapperTemplateMap filewrapperTemplateMap [emptyMap] ;
  foreach mFilewrapperTemplateList do
    @unifiedTypeMapProxyList templateSignature [emptyList] ;
    foreach mFilewrapperTemplateFormalInputParameters do
      @unifiedTypeMapProxy parameterTypeIndex ;
      [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mFormalArgumentTypeName ?parameterTypeIndex] ;
      templateSignature += !parameterTypeIndex ;
    end foreach ;
    [!?filewrapperTemplateMap insertKey
      !mFilewrapperTemplateName
      !templateSignature
      !mFilewrapperTemplatePath
    ] ;
  end foreach ;
#--- Build text file extension map
  @wrapperExtensionMap textExtensionMap [emptyMap] ;
  foreach mFilewrapperTextFileExtensionList do
    [!?textExtensionMap insertKey !mValue] ;
  end foreach ;
#--- Build binary file extension map
  @wrapperExtensionMap binaryFileExtensionMap [emptyMap] ;
  foreach mFilewrapperBinaryFileExtensionList do
    if [textExtensionMap hasKey !mValue->string] then
      error mValue:"the '" . mValue . "' extension is already used for text files" ;
    else
    [!?binaryFileExtensionMap insertKey !mValue] ;
    end if ;
  end foreach ;
#--- Enumerate filewrapper files
  @wrapperFileMap regularRootFileMap ;
  @wrapperDirectoryMap wrapperDirectoryMap ;
  @string absoluteSourcePath ;
  if [[mFilewrapperPath string] firstCharacterOrNul] == '/' then
    absoluteSourcePath := [mFilewrapperPath string] ;
  else
    absoluteSourcePath := [mSourceFileAbsolutePath stringByDeletingLastPathComponent] . "/" . [mFilewrapperPath string] ;
  end if ;
  if not [absoluteSourcePath directoryExists] then
    error mFilewrapperPath: "The '" . absoluteSourcePath . "' directory does not exist" 
    : regularRootFileMap, wrapperDirectoryMap ;
  else
  #--- Enumerate pathes
    @uint wrapperFileIndex := 0 ;
    @uint wrapperDirectoryIndex := 0 ;
    recursivelyEnumerateDirectories
     !absoluteSourcePath
     !"/"
     !textExtensionMap
     !binaryFileExtensionMap
     ?regularRootFileMap
     ?wrapperDirectoryMap
     !?wrapperFileIndex
     !?wrapperDirectoryIndex
   ;
  end if ;
#--- Insert filewrapper
  [!?ioSemanticContext->mFilewrapperMap insertKey
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperTextFileExtensionList
    !regularRootFileMap
    !wrapperDirectoryMap
    !filewrapperTemplateMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ??@unifiedTypeMapProxy attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := false ;
    foreach mFeatureList do
      if mValue->string == "nogetter" then
        hasGetter := false ;
      elsif mValue->string == "setter" then
        hasSetter := true ;
      end if ;
    end foreach ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
  end foreach ;
#--- uint type index
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"uint" ??@unifiedTypeMapProxy uintType] ;
#--- List type index
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mListTypeName ??@unifiedTypeMapProxy listTypeIndex] ;
#--- Element type index
  [@unifiedTypeMapProxy makeProxy
    !?ioSemanticContext->mTypeMap
    ![@lstring new !mListTypeName->string . elementTypeNameSuffix [] !mListTypeName->location]
    ??@unifiedTypeMapProxy listElementTypeIndex
  ] ;
#--- Attribute description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyAndParameterList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierOutputFormalArgumentList [emptyList] ;
  @formalParameterSignature modifierInputFormalArgumentList [emptyList] ;
  foreach typedAttributeList do
    enumerationDescriptor += !mAttributeTypeProxy ![mAttributeName string] ;
    constructorAttributeTypeList += !mAttributeTypeProxy !mAttributeName->string ;
    modifierOutputFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentOut] !mAttributeName->string ;
    modifierInputFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyList" ![mListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"listWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"range" !"range" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"subListFromIndex" !"uint" !"inIndex" ![mListTypeName string] !true ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"subListWithRange" !"range" !"inRange" ![mListTypeName string] !true ;
  foreach typedAttributeList do
    if mHasGetter then
      [!?readerMap insertOrReplace
        ![@lstring new ![mAttributeName string] . "AtIndex" ![mAttributeName location]]
        ![@methodKind definedAsMember]
        ![@unifiedTypeMapProxyAndParameterList listWithValue !uintType !"inIndex"]
        !here
        !true
        !mAttributeTypeProxy
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end if ;
  end foreach ;
#------------------------- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"first" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"last" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
#----------------------------------------- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popFirst" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popLast" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  modifierOutputFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] !"inIndex" ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"removeAtIndex" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  drop modifierOutputFormalArgumentList ;
  foreach typedAttributeList do
    if mHasSetter then
      @formalParameterSignature setterFormalArgumentList [emptyList] ;
      setterFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
      setterFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] !mAttributeName->string ;
      [!?modifierMap insertOrReplace
        ![@lstring new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "AtIndex" ![mAttributeName location]]
        ![@methodKind definedAsMember]
        !setterFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end if ;
  end foreach ;
#--- Modifier 'insertAtIndex'
  modifierInputFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] !"inInsertionIndex" ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"insertAtIndex" !here]
    ![@methodKind definedAsMember]
    !modifierInputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  drop modifierInputFormalArgumentList ;
#--- Enumeration variants
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mListTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator [] | addAssignOperator [] | binaryAddOperator []
    !constructorAttributeTypeList
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !"emptyList" # Default constructor
    !"list-" . mListTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Type index
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mSortedListTypeName ??@unifiedTypeMapProxy listTypeIndex] ;
#--- Element type index
  [@unifiedTypeMapProxy makeProxy
    !?ioSemanticContext->mTypeMap
    ![@lstring new !mSortedListTypeName->string . elementTypeNameSuffix [] !mSortedListTypeName->location]
    ??@unifiedTypeMapProxy listElementTypeIndex
  ] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyAndParameterList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierFormalArgumentList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ??@unifiedTypeMapProxy attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    enumerationDescriptor += !attributeTypeIndex !mAttributeName->string ;
    constructorAttributeTypeList += !attributeTypeIndex !mAttributeName->string ;
    modifierFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] !mAttributeName->string ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptySortedList" ![mSortedListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"sortedListWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popGreatest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popSmallest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"greatest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"smallest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
#--- Enumeration variants
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mSortedListTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mSortedListTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum sortedListType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator []
    !constructorAttributeTypeList
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !"emptySortedList" # Default constructor
    !"sortedlist-" . mSortedListTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Struct type index
  @unifiedTypeMapProxy structTypeIndex ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mStructTypeName ?structTypeIndex] ;
#--- Constructors and attribute map
  @attributeMap attributeMap [emptyMap] ;
  @constructorMap constructorMap [emptyMap] ;
  @unifiedTypeMapProxyAndParameterList constructorAttributeTypeList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  var typesToIncludeInHeaderCompilation := [@unifiedTypeMapProxyList emptyList] ;
  foreach mAttributeList do
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ??@unifiedTypeMapProxy attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex !mAttributeName->string ;
    typesToIncludeInHeaderCompilation += !attributeTypeIndex ;
    @bool hasSetter := false ;
    @bool hasGetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
  end foreach ;
  [!?constructorMap insertKey
    ![@lstring new !"new" !here]
    !constructorAttributeTypeList
    !false
    !structTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap ;
  foreach typedAttributeList do
    enterBaseFinalReaderWithoutArgument
      !?readerMap
      !?ioSemanticContext->mTypeMap 
      ![mAttributeName string]
      ![mAttributeTypeProxy key]
      !false
    ;
  end foreach ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mStructTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enumeration by "for" instruction
  @unifiedTypeMapProxy enumeratedType ;
  if mEnumeratedElementTypeName == "" then
    enumeratedType := [@unifiedTypeMapProxy null] ;
  else
   [@unifiedTypeMapProxy makeProxyFromString
     !?ioSemanticContext->mTypeMap
     !mEnumeratedElementTypeName
     ?enumeratedType
    ] ;
  end if ;
#--- Generate a "default" constructor ?
  @string defaultConstructorName := "default" ;
  foreach typedAttributeList while defaultConstructorName != "" do
    if ([mAttributeTypeProxy mDefaultConstructorName] == "") | not [mAttributeTypeProxy mIsConcrete] then
      defaultConstructorName := "" ;
    end if ;
  end foreach ;  
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mStructTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum structType]
    !typedAttributeList
    !attributeMap
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !generateDescriptionReaderUtilityMethod []
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    !enumeratedType # Type for enumerated element for "for" instruction
    !defaultConstructorName # Default constructor
    !"struct-" . mStructTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#---
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @typedAttributeList inheritedTypedAttributeList ;
  @attributeMap attributeMap [emptyMap] ;
#--- Handle super class
  @unifiedTypeMapProxy superClassIndex ;
  @bool generateHeaderInSeparateFile ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@unifiedTypeMapProxy null] ;
    commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap ;
    modifierMap := [@modifierMap emptyMap] ;
    instanceMethodMap := [@instanceMethodMap emptyMap] ;
    inheritedTypedAttributeList := [@typedAttributeList emptyList] ;
    attributeMap := [@attributeMap emptyMap] ;
    generateHeaderInSeparateFile := false ;
    foreach mClassFeatureList do
      if [mValue string] == "generatedInSeparateFile" then
        generateHeaderInSeparateFile := true ;
      end if ;
    end foreach ;
  else
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mSuperClassName ?superClassIndex] ;
    @typeKindEnum typeKindEnum ;
    @readerMap inheritedReaderMap ;
    @modifierMap inheritedModifierMap ;
    @instanceMethodMap inheritedMethodMap ;
    [ioSemanticContext->mTypeMap searchKey
      !mSuperClassName
      ?3*
      ?typeKindEnum
      ?inheritedTypedAttributeList
      ?attributeMap
      ?2*
      ?inheritedReaderMap
      ?inheritedModifierMap
      ?inheritedMethodMap
      ?10*
      ?generateHeaderInSeparateFile
      ?4*
    ] ;
  #---
    if typeKindEnum != [@typeKindEnum classType] then
      error mSuperClassName : "the @" . mSuperClassName . " should be a class type" ;
    end if ;
  #--- Mark all modifiers as inherited
    modifierMap := [@modifierMap emptyMap] ;
    foreach inheritedModifierMap do
      [!?modifierMap insertKey
        !lkey
        !mKind
        !mParameterList
        !mHasCompilerArgument
        ![@methodQualifier isInherited]
        !"" # No error message
      ] ; 
    end foreach ;
  #--- Mark all readers as inherited
    readerMap := [@readerMap emptyMap] ;
    foreach inheritedReaderMap do
      [!?readerMap insertKey
        !lkey
        !mKind
        !mArgumentTypeList
        !mDeclarationLocation
        !mHasCompilerArgument
        !mReturnedType
        ![@methodQualifier isInherited]
        !mErrorMessage
      ] ; 
    end foreach ;
  #--- Mark all methods as inherited
    instanceMethodMap := [@instanceMethodMap emptyMap] ;
    foreach inheritedMethodMap do
      [!?instanceMethodMap insertKey
        !lkey
        !mKind
        !mParameterList
        !mDeclarationLocation
        !mHasCompilerArgument
        ![@methodQualifier isInherited]
        !mErrorMessage
      ] ; 
    end foreach ;
  end if ;
#--- Build attribute Map and constructor argument list
  @unifiedTypeMapProxyAndParameterList constructorAttributeTypeList [emptyList] ;
  foreach inheritedTypedAttributeList do
    constructorAttributeTypeList += !mAttributeTypeProxy !mAttributeName->string ;
  end foreach ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex !mAttributeName->string ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
    if [readerMap hasKey ![mAttributeName string]] then
      error mAttributeName: "'" . mAttributeName . "' is the name of a prefefined or a user defined reader" ;
    end if ;
  end foreach ;
#--- Current class Index
  [@unifiedTypeMapProxy makeProxy
     !?ioSemanticContext->mTypeMap
     !mClassTypeName
     ?@unifiedTypeMapProxy classIndex
  ] ;
#--- Constructor
  @constructorMap constructorMap [emptyMap] ;
  if not mIsAbstract then
    [!?constructorMap insertKey
      ![@lstring new !"new" !here]
      !constructorAttributeTypeList
      !false
      !classIndex
    ] ;
  end if ;
#--- Typed attribute list
  @typedAttributeList currentClassTypedAttributeList [emptyList] ;
  @typedAttributeList allTypedAttributeList := inheritedTypedAttributeList ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAttributeTypeName ?attributeTypeIndex] ;
    @bool hasSetter := false ;
    @bool hasGetter := true ;
    foreach mFeatureList do
      if [mValue string] == "setter" then
        hasSetter := true ;
      elsif [mValue string] == "nogetter" then
        hasGetter := false ;
      end if ;
    end foreach ;
    currentClassTypedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    allTypedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    if hasGetter then
      [!?readerMap insertKey
        !mAttributeName
        ![@methodKind definedAsMember]
        ![@unifiedTypeMapProxyAndParameterList emptyList] # No argument
        !here
        !false # No Compiler argument
        !attributeTypeIndex # Returned type
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
#    else
#      [!?readerMap insertFakeKey
#        ![mAttributeName string]
#        ![mAttributeName location]
#        !"the '" . mAttributeName . "' attribute was declared here (use 'feature getter' for making it readable)"
#      ] ;
    end if ;
  end foreach ;
#--- set...attribute modifier
  foreach currentClassTypedAttributeList do
    if mHasSetter then
      [!?modifierMap insertKey
        ![@lstring new !"set". [[mAttributeName string] stringByCapitalizingFirstCharacter] !here]
        ![@methodKind definedAsMember]
        ![@formalParameterSignature listWithValue !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentIn] !mAttributeName->string]
        !false # No compiler argument
        ![@methodQualifier isBasicFinal]
        !"" # No error message
      ] ;
    end if ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mClassTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Generate a "default" constructor ?
  @string defaultConstructorName ;
  if [superClassIndex isNull] then
    defaultConstructorName := "default" ;
  else
    defaultConstructorName := [superClassIndex mDefaultConstructorName] ;
  end if ;
  foreach currentClassTypedAttributeList while defaultConstructorName != "" do
    if ([mAttributeTypeProxy mDefaultConstructorName] == "") | not [mAttributeTypeProxy mIsConcrete] then
      defaultConstructorName := "" ;
    end if ;
  end foreach ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mClassTypeName
    !mIsPredefined
    !not mIsAbstract # Concrete Type
    !superClassIndex
    ![@typeKindEnum classType]
    !allTypedAttributeList
    !attributeMap
    !currentClassTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !0
    ![@unifiedTypeMapProxyAndParameterList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !generateHeaderInSeparateFile
    ![@unifiedTypeMapProxy null] # Type for enumerated element for "for" instruction
    !defaultConstructorName # Default constructor
    !"class-" . mClassTypeName
    ![@headerKind twoHeaders]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterInSemanticContext # Handles also routine declaration
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @formalParameterSignature routineSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mFormalArgumentTypeName ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalArgumentPassingMode !mFormalArgumentName->string ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext->mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterInSemanticContext # Handles also function declaration
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @unifiedTypeMapProxyList functionSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mFormalArgumentTypeName ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex ;
  end foreach ;
#--- Result type
  @unifiedTypeMapProxy resultTypeIndex ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mResultTypeName ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Result type
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mResultTypeName ??@unifiedTypeMapProxy resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName ![@unifiedTypeMapProxyList emptyList] !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @arrayDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#---
  if [mDimension uint] == 0 then
    error mDimension: "the dimension of an array should be > 0" ;
  end if ;
#--- array type
  @unifiedTypeMapProxy arrayTypeIndex ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mArrayTypeName ?arrayTypeIndex] ;
#--- element type
  @unifiedTypeMapProxy elementTypeIndex ;
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mElementTypeName ?elementTypeIndex] ;
#---
  @constructorMap constructorMap [emptyMap] ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- 
  @unifiedTypeMapProxy boolType ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"bool" ?boolType] ;
#--- 
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#---
  @unifiedTypeMapProxyAndParameterList uintArgs [emptyList] ;
  @uint idx := 0 ;
  loop [mDimension uint] : while idx < [mDimension uint] do
    uintArgs += !uintType !"inSize" . idx ;
    idx ++ ;
  end loop ;
#--- Constructor
  [!?constructorMap insertKey
    ![@lstring new !"new" !here]
    !uintArgs
    !false
    !arrayTypeIndex
  ] ;
#--- Readers
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"axisCount" !"uint" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"sizeForAxis" !"uint" !"inAxisIndex" !"uint" !true ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"rangeForAxis" !"uint" !"inAxisIndex" !"range" !true ;
  [!?readerMap insertOrReplace
    ![@lstring new !"isValueValidAtIndex" !here]
    ![@methodKind definedAsMember]
    !uintArgs
    !here
    !true
    !boolType
    ![@methodQualifier isBasicFinal]
    !"" # No Error message
  ] ;
  [!?readerMap insertOrReplace
    ![@lstring new !"valueAtIndex" !here]
    ![@methodKind definedAsMember]
    !uintArgs
    !here
    !true
    !elementTypeIndex
    ![@methodQualifier isBasicFinal]
    !"" # No Error message
  ] ;
#--- Modifiers
  @formalParameterSignature modifierFormalArgumentList [emptyList] ;
  modifierFormalArgumentList += !elementTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !"InValue" ;
  idx := 0 ;
  loop [mDimension uint] : while idx < [mDimension uint] do
    modifierFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] !"inIndex" . idx ;
    idx ++ ;
  end loop ;
  [!?modifierMap insertKey
    !["setValueAtIndex" nowhere]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasicFinal]
    !""
  ] ;
  [!?modifierMap insertKey
    !["forceValueAtIndex" nowhere]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasicFinal]
    !""
  ] ;
  [!?modifierFormalArgumentList popFirst ?3*] ;
  [!?modifierMap insertKey
    !["invalidateValueAtIndex" nowhere]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasicFinal]
    !""
  ] ;
  [!?modifierMap insertKey
    !["setSize" nowhere]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasicFinal]
    !""
  ] ;
  modifierFormalArgumentList := [@formalParameterSignature emptyList] ;
  modifierFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] !"inSize" ;
  modifierFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] !"inAxisIndex" ;
  [!?modifierMap insertKey
    !["setSizeForAxis" nowhere]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasicFinal]
    !""
  ] ;
#--- Enter in semantic context
  [!?ioSemanticContext->mTypeMap insertKey
    !mArrayTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listMapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !0
    ![@unifiedTypeMapProxyAndParameterList emptyList] # addAssignOperatorDescription
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    ![@unifiedTypeMapProxy null] # Type for enumerated element for "for" instruction
    !"" # No default constructor
    !"array-" . mArrayTypeName
    ![@headerKind twoHeaders]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Check associated map is really a list
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedListTypeName
    ?3*
    ?@typeKindEnum typeKindEnum
    ?@typedAttributeList listTypedAttributeList
    ?21*
  ] ;
  if typeKindEnum != [@typeKindEnum listType] then
    error mAssociatedListTypeName : "the '@" . mAssociatedListTypeName . "' type should be a list type" ;
    listTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?@readerMap readerMap ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Associated map type index
  [@unifiedTypeMapProxy makeProxy !?ioSemanticContext->mTypeMap !mAssociatedListTypeName ??@unifiedTypeMapProxy associatedListTypeIndex] ;
#--- currentType type index
  [@unifiedTypeMapProxy makeProxyFromString !?ioSemanticContext->mTypeMap !"string" ??@unifiedTypeMapProxy stringTypeIndex] ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"keyList" !"stringlist" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"listForKey" !"string" !"inKey" ![mAssociatedListTypeName string] !false ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mListmapTypeName string] !false ;
#--- Enumerator description
  @enumerationDescriptorList enumeratorDescriptor [emptyList] ;
  enumeratorDescriptor += !stringTypeIndex !"key" ;
  enumeratorDescriptor += !associatedListTypeIndex !"mList" ;
#--- Add assign operator description
  @unifiedTypeMapProxyAndParameterList addAssignOperatorDescription [emptyList] ;
  addAssignOperatorDescription += !stringTypeIndex !"inKey" ;
  foreach listTypedAttributeList do
    addAssignOperatorDescription += !mAttributeTypeProxy !mAttributeName->string ;
  end foreach ;
#--- Enumeration variants
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mListmapTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Element type index
  [@unifiedTypeMapProxy makeProxy
    !?ioSemanticContext->mTypeMap
    ![@lstring new !mListmapTypeName->string . elementTypeNameSuffix [] !mListmapTypeName->location]
    ??@unifiedTypeMapProxy listElementTypeIndex
  ] ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListmapTypeName
    !mIsPredefined
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listMapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !listTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumeratorDescriptor
    !enumerationVariants
    !doNotGenererateObjectCompare []
    !addAssignOperatorDescription
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
    !listElementTypeIndex # Type for enumerated element for "for" instruction
    !"emptyMap" # Default constructor
    !"listmap-" . mListmapTypeName
    ![@headerKind oneHeader]
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    O R D E R E D     S E M A N T I C    L I S T              *
#                                                                           *
#---------------------------------------------------------------------------*

#! enterDeclarationInGraph

#---------------------------------------------------------------------------*

graph @semanticTypePrecedenceGraph (@semanticDeclarationListAST) {
  insert addNode error message "the '%K' type is already declared at %L" ;
}

#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mPredefinedTypeName !here] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mClassTypeName ![mClassTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  if mSuperClassName->string != "" then
    [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mSuperClassName !mSuperClassName->location]] ;
  end if ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mAttributeTypeName !mSuperClassName->location]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mListTypeName ![mListTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mStructTypeName ![mStructTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mEnumTypeName ![mEnumTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mSortedListTypeName ![mSortedListTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @arrayDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mArrayTypeName ![mArrayTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mElementTypeName ![mElementTypeName location]]] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mListmapTypeName ![mListmapTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mAssociatedListTypeName ![mAssociatedListTypeName location]]] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mMapTypeName ![mMapTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @uniqueMapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mMapTypeName ![mMapTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mMapProxyTypeName ![mMapProxyTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mAssociatedMapTypeName ![mAssociatedMapTypeName location]]] ;
end method ;

#---------------------------------------------------------------------------*

override method @graphDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mGraphTypeName ![mGraphTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mAssociatedListTypeName ![mAssociatedListTypeName location]]] ;
end method ;

#---------------------------------------------------------------------------*

override method @externTypeDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"@" . mExternTypeName ![mExternTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"category reader @" . mTypeName . " " . mCategoryReaderName ![mCategoryReaderName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryReaderMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryReaderMapForBuildingContext insertKey
      !mTypeName
      ![@categoryReaderMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryReaderMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryReaderMapForType insertKey
      !mCategoryReaderName
      !mCategoryReaderReturnedTypeName
      !mCategoryReaderFormalInputParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"category method @" . mTypeName . " " . mCategoryMethodName ![mCategoryMethodName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryMethodMapForBuildingContext insertKey
      !mTypeName
      ![@categoryMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryMethodMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryMethodMapForType insertKey
      !mCategoryMethodName
      !mCategoryMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"category modifier @" . mTypeName . " " . mCategoryModifierName ![mCategoryModifierName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryModifierMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryModifierMapForBuildingContext insertKey
      !mTypeName
      ![@categoryModifierMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryModifierMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryModifierMapForType insertKey
      !mCategoryModifierName
      !mCategoryModifierFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"category reader @" . mTypeName . " " . mAbstractCategoryReaderName ![mAbstractCategoryReaderName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryReaderMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryReaderMapForBuildingContext insertKey
      !mTypeName
      ![@categoryReaderMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryReaderMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryReaderMapForType insertKey
      !mAbstractCategoryReaderName
      !mAbstractCategoryReaderReturnedTypeName
      !mAbstractCategoryReaderFormalInputParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"category method @" . mTypeName . " " . mAbstractCategoryMethodName ![mAbstractCategoryMethodName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryMethodMapForBuildingContext insertKey
      !mTypeName
      ![@categoryMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryMethodMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryMethodMapForType insertKey
      !mAbstractCategoryMethodName
      !mAbstractCategoryMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const key := [@lstring new !"category modifier @" . mTypeName . " " . mAbstractCategoryModifierName ![mAbstractCategoryModifierName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addEdge !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryModifierMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryModifierMapForBuildingContext insertKey
      !mTypeName
      ![@categoryModifierMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryModifierMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryModifierMapForType insertKey
      !mAbstractCategoryModifierName
      !mAbstractCategoryModifierFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

method @semanticDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST unused ioSemanticDeclarationList
:
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
:
  @attributeInCollectionListAST structAttributeList [emptyList] ;
  structAttributeList +=
    !["lstring" nowhere]
    !["lkey" nowhere]
    ![@lstringlist emptyList]
  ;
  foreach mAttributeList do
    structAttributeList +=
      !mAttributeTypeName
      !mAttributeName
      ![@lstringlist emptyList]
    ;
  end foreach ;
  ioSemanticDeclarationList += ![@structDeclarationAST new
    !mIsPredefined
    ![@lstring new !mMapTypeName->string . elementTypeNameSuffix [] !mMapTypeName->location]
    !structAttributeList
    !""
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
:
  @attributeInCollectionListAST structAttributeList [emptyList] ;
  foreach mAttributeList do
    structAttributeList +=
      !mAttributeTypeName
      !mAttributeName
      ![@lstringlist emptyList]
    ;
  end foreach ;
  ioSemanticDeclarationList += ![@structDeclarationAST new
    !mIsPredefined
    ![@lstring new !mListTypeName->string . elementTypeNameSuffix [] !mListTypeName->location]
    !structAttributeList
    !""
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
:
  @attributeInCollectionListAST structAttributeList [emptyList] ;
  foreach mAttributeList do
    structAttributeList +=
      !mAttributeTypeName
      !mAttributeName
      ![@lstringlist emptyList]
    ;
  end foreach ;
  ioSemanticDeclarationList += ![@structDeclarationAST new
    !mIsPredefined
    ![@lstring new !mSortedListTypeName->string . elementTypeNameSuffix [] !mSortedListTypeName->location]
    !structAttributeList
    !""
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST addAssociatedElement
  ?!@semanticDeclarationListAST ioSemanticDeclarationList
:
  @attributeInCollectionListAST structAttributeList [emptyList] ;
  structAttributeList +=
    !["string" nowhere]
    !["key" nowhere]
    ![@lstringlist emptyList]
  ;
  structAttributeList +=
    !mAssociatedListTypeName
    !["mList" nowhere]
    ![@lstringlist emptyList]
  ;
#---
  ioSemanticDeclarationList += ![@structDeclarationAST new
    !mIsPredefined
    ![@lstring new !mListmapTypeName->string . elementTypeNameSuffix [] !mListmapTypeName->location]
    !structAttributeList
    !""
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C    C O N T E X T                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@string inSourceFile
  ??@semanticDeclarationListAST inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContext outSemanticContext
:
#------ Create associated type (@TYPE.element) for lists, maps, ...
  @semanticDeclarationListAST semanticDeclarationList := inSemanticDeclarationList ;
  foreach inSemanticDeclarationList do
    [mSemanticDeclaration addAssociatedElement !?semanticDeclarationList] ;
  end foreach ;
#------ Build ordered types list, so that
#  - a class appears after its super class
#  - a map index appears after its associated map
#  - a list map appears after its associated list
  @semanticTypePrecedenceGraph semanticTypePrecedenceGraph [emptyGraph] ;
  @categoryMethodMapForBuildingContext categoryMethodMapForBuildingContext [emptyMap] ;
  @categoryReaderMapForBuildingContext categoryReaderMapForBuildingContext  [emptyMap] ;
  @categoryModifierMapForBuildingContext categoryModifierMapForBuildingContext  [emptyMap] ;
  @semanticDeclarationListAST categoryOverrideDefinitionList [emptyList] ;
  foreach semanticDeclarationList do
    [mSemanticDeclaration enterDeclarationInGraph
      !?semanticTypePrecedenceGraph
      !?categoryMethodMapForBuildingContext
      !?categoryReaderMapForBuildingContext
      !?categoryModifierMapForBuildingContext
      !?categoryOverrideDefinitionList
    ] ;  
  end foreach ;
  if [semanticTypePrecedenceGraph undefinedNodeCount] > 0 then
    foreach [semanticTypePrecedenceGraph undefinedNodeReferenceList] do
      error mValue : "the '" . mValue . "' type is not defined" ;
    end foreach ;
    error inEndOfSourceFile : "semantic analysis not performed, due to undefined type error(s)" : outSemanticContext ;
  else
    [semanticTypePrecedenceGraph topologicalSort
      ?@semanticDeclarationListAST sortedSemanticDeclarationListAST
      ?*
      ?@semanticDeclarationListAST unsortedSemanticDeclarationListAST
      ?@lstringlist unsortedNodeKeyList
    ] ;
    if [unsortedSemanticDeclarationListAST length] > 0 then
      @string s := "semantic analysis not performed, " . [[unsortedSemanticDeclarationListAST length] string] . " declarations are involved in circular definition:" ;
      foreach unsortedSemanticDeclarationListAST do
        s .= "\n-  " . [mSemanticDeclaration keyRepresentation] ;
      end foreach ;
      error inEndOfSourceFile : s : outSemanticContext ;
    else
    #--- Add category override
      sortedSemanticDeclarationListAST .= categoryOverrideDefinitionList ;
    #--- Build initial semantic context
      outSemanticContext := [@semanticContext new
        !inSourceFile
        ![@unifiedTypeMap emptyMap]
        ![@routineMap emptyMap]
        ![@functionMap emptyMap]
        ![@filewrapperMap emptyMap]
        ![@grammarMap emptyMap]
        ![@optionComponentMapForSemanticAnalysis emptyMap]
        ![@lexiqueComponentMapForSemanticAnalysis emptyMap]
      ] ;
    #--- Loop throught all declarations
      foreach sortedSemanticDeclarationListAST do
        [mSemanticDeclaration enterInSemanticContext
          !categoryMethodMapForBuildingContext
          !categoryReaderMapForBuildingContext
          !categoryModifierMapForBuildingContext
          !?outSemanticContext
        ] ;
      end foreach ;
    end if ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
