#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticContext :
  import "semanticsClassMethods.gSemantics" ;
  import "semanticsInstanceMethods.gSemantics" ;
  import "semanticsModifiers.gSemantics" ;
  import "semanticsReaders.gSemantics" ;
  import "semanticsConstructors.gSemantics" ;
  import "optionCompilation.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G R A M M A R   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @grammarLabelMap {
  @formalParameterSignature mLabelSignature ;
  insert insertKey error message "the '%K' grammar label has been already declared in %L" ;
  search searchKey error message "the '%K' grammar label is not declared" ;
}

#---------------------------------------------------------------------------*

map @grammarMap {
  @grammarLabelMap mLabelMap ;
  @bool mHasIndexing ;
  insert insertKey error message "the '%K' grammar has been already declared in %L" ;
  search searchKey error message "the '%K' grammar is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  R O U T I N E   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @routineMap {
  @formalParameterSignature mRoutineSignature ;
  insert insertKey error message "the '%K' routine has been already declared in %L" ;
  search searchKey error message "the '%K' routine is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F U N C T I O N   M A P                                                  *
#                                                                           *
#---------------------------------------------------------------------------*

map @functionMap {
  @unifiedTypeMapProxyList mFunctionSignature ;
  @unifiedTypeMapProxy mResultType ;
  insert insertKey error message "the '%K' function has been already declared in %L" ;
  search searchKey error message "the '%K' function is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F I L E W R A P P E R   M A P                                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @wrapperFileMap { # Key is file name
  @string mAbsoluteFilePath ;
  @bool mIsTextFile ; # true: text file, false: binary file
  @uint mWrapperDirectoryIndex ;
  @uint mWrapperFileIndex ;
  insert insertKey error message "INTERNAL ERROR" ;
  search searchKey error message "INTERNAL ERROR" ;
}

#---------------------------------------------------------------------------*

map @wrapperDirectoryMap { # Key is directory name
  @wrapperFileMap mRegularFileMap ;
  @wrapperDirectoryMap mDirectoryMap ;
  @uint mWrapperDirectoryIndex ;
  insert insertKey error message "INTERNAL ERROR" ;
  search searchKey error message "INTERNAL ERROR" ;
}

#---------------------------------------------------------------------------*

map @filewrapperTemplateMap {
  @unifiedTypeMapProxyList mTemplateSignature ;
  @lstring mFilewrapperTemplatePath ;
  insert insertKey error message "the '%K' filewrapper template has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper template is not declared" ;
}

#---------------------------------------------------------------------------*

map @filewrapperMap {
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @wrapperFileMap mFilewrapperFileMap ;
  @wrapperDirectoryMap mFilewrapperDirectoryMap ;
  @filewrapperTemplateMap mFilewrapperTemplateMap ;
  insert insertKey error message "the '%K' filewrapper has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O P T I O N   M A P                                                      *
#                                                                           *
#---------------------------------------------------------------------------*

map @optionComponentMapForSemanticAnalysis {
  @commandLineOptionMap mBoolOptionMap ;
  @commandLineOptionMap mUIntOptionMap ;
  @commandLineOptionMap mStringOptionMap ;
  insert insertKey error message "redefintion of the '%K' option component: it has been already declared in %L" ;
  search searchKey error message "the '%K' option component is not imported" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    C O N T E X T                                       *
#                                                                           *
#---------------------------------------------------------------------------*

struct @semanticContext {
  @string mSourceFileAbsolutePath ;
  @unifiedTypeMap mTypeMap ;
  @routineMap mRoutineMap ;
  @functionMap mFunctionMap ;
  @filewrapperMap mFilewrapperMap ;
  @grammarMap mGrammarMap ;
  @optionComponentMapForSemanticAnalysis mOptionComponentMapForSemanticAnalysis ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    M E T H O D    M A P                                *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryMethodMapForType {
  @formalParameterListAST mFormalParameterList ;
  insert insertKey error message "the '%K' method has been already declared in %L" ;
}

#---------------------------------------------------------------------------*

map @categoryMethodMapForBuildingContext {
  @categoryMethodMapForType mCategoryMethodMapForType ;
  insert insertKey error message "internal error" ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    M O D I F I E R    M A P                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryModifierMapForType {
  @formalParameterListAST mFormalParameterList ;
  insert insertKey error message "the '%K' modifier has been already declared in %L" ;
}

#---------------------------------------------------------------------------*

map @categoryModifierMapForBuildingContext {
  @categoryModifierMapForType mCategoryModifierMapForType ;
  insert insertKey error message "internal error" ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C A T E G O R Y    R E A D E R    M A P                                *
#                                                                           *
#---------------------------------------------------------------------------*

map @categoryReaderMapForType {
  @lstring mResultTypeName ;
  @formalInputParameterListAST mInputFormalParameterList ;
  insert insertKey error message "the '%K' reader has been already declared in %L" ;
}

#---------------------------------------------------------------------------*

map @categoryReaderMapForBuildingContext {
  @categoryReaderMapForType mCategoryReaderMapForType ;
  insert insertKey error message "internal error"  ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    D I S P L A Y                                                          *
#                                                                           *
#---------------------------------------------------------------------------*

abstract reader @semanticDeclarationAST keyRepresentation -> @string outString
;

#---------------------------------------------------------------------------*

override reader @abstractCategoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "abstract category modifier @" . mTypeName . " " . mAbstractCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @categoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "category modifier @" . mTypeName . " " . mCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingCategoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "overriding category modifier @" . mTypeName . " " . mOverridingCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingAbstractCategoryModifierAST keyRepresentation
  ->@string outString
:
  outString := "overriding category modifier @" . mTypeName . " " . mOverridingCategoryModifierName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @abstractCategoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "abstract category method @" . mTypeName . " " . mAbstractCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @categoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "category method @" . mTypeName . " " . mCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingCategoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "overriding category method @" . mTypeName . " " . mOverridingCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingAbstractCategoryMethodAST keyRepresentation
  ->@string outString
:
  outString := "overriding category method @" . mTypeName . " " . mOverridingCategoryMethodName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @abstractCategoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "abstract category reader @" . mTypeName . " " . mAbstractCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @categoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "category reader @" . mTypeName . " " . mCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingCategoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "overriding category reader @" . mTypeName . " " . mOverridingCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @overridingAbstractCategoryReaderAST keyRepresentation
  ->@string outString
:
  outString := "overriding category reader @" . mTypeName . " " . mAbstractCategoryReaderName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @predefinedTypeAST keyRepresentation
  ->@string outString
:
  outString := "predefined type @" . mPredefinedTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @uniqueMapDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "unique map @" . mMapTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @mapDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "map @" . mMapTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @mapProxyDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "map proxy @" . mMapProxyTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @enumDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "enum @" . mEnumTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @sortedListDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "sorted list @" . mSortedListTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @structDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "struct @" . mStructTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @listDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "list @" . mListTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @classDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "class @" . mClassTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @listmapDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "listmap @" . mListmapTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @filewrapperDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "filewrapper @" . mFilewrapperName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @graphDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "graph @" . mGraphTypeName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @onceFunctionDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "once function " . mFunctionName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @externFunctionDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "extern function " . mFunctionName ;
end reader ;

#---------------------------------------------------------------------------*

override reader @externRoutineDeclarationAST keyRepresentation
  ->@string outString
:
  outString := "extern routine " . mRoutineName ;
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N T E R    T Y P E S                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

local routine addCategories
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
  ??@lstring inTypeName
  ?!@readerMap ioReaderMap
  ?!@modifierMap ioModifierMap
  ?!@instanceMethodMap ioInstanceMethodMap
:
#------------------------  Category methods
  if [inCategoryMethodMapForBuildingContext hasKey ![inTypeName string]] then
    @categoryMethodMapForType categoryMethodMapForType ;
    [inCategoryMethodMapForBuildingContext searchKey !inTypeName ?categoryMethodMapForType] ;
    foreach categoryMethodMapForType do
      @formalParameterSignature formalArgumentList [emptyList] ;
      foreach mFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
        formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
      end foreach ;
      [!?ioInstanceMethodMap insertKey
        !lkey
        ![@methodKind definedAsCategory]
        !formalArgumentList
        ![lkey location]
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  end if ;
#------------------------  Category readers
  if [inCategoryReaderMapForBuildingContext hasKey ![inTypeName string]] then
    @categoryReaderMapForType categoryReaderMapForType ;
    [inCategoryReaderMapForBuildingContext searchKey !inTypeName ?categoryReaderMapForType] ;
    foreach categoryReaderMapForType do
      @unifiedTypeMapProxyList formalArgumentList [emptyList] ;
      foreach mInputFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
        formalArgumentList += !typeIndex ;
      end foreach ;
      @unifiedTypeMapProxy returnedType ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?returnedType] ;
      [!?ioReaderMap insertKey
        !lkey
        ![@methodKind definedAsCategory]
        !formalArgumentList
        ![lkey location]
        !true
        !returnedType
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end foreach ;
  end if ;
#------------------------  Category modifiers
  if [inCategoryModifierMapForBuildingContext hasKey ![inTypeName string]] then
    @categoryModifierMapForType categoryModifierMapForType ;
    [inCategoryModifierMapForBuildingContext searchKey !inTypeName ?categoryModifierMapForType] ;
    foreach categoryModifierMapForType do
      @formalParameterSignature formalArgumentList [emptyList] ;
      foreach mFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
        formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
      end foreach ;
      [!?ioModifierMap insertKey
        !lkey
        ![@methodKind definedAsCategory]
        !formalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @abstractCategoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryModifierAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @categoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
:
end method;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@predefinedTypeAST enterInSemanticContext\n" ;
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  const @predefinedTypeAST t := selfcopy ; # Bug in GALGAS 1
  [t getConstructorMap !?ioSemanticContext->mTypeMap ?constructorMap] ;
  [t getReaderMap !?ioSemanticContext->mTypeMap ?readerMap] ;
  [t getModifierMap !?ioSemanticContext->mTypeMap ?modifierMap] ;
  [t getInstanceMethodMap !?ioSemanticContext->mTypeMap ?instanceMethodMap] ;
  [t getClassMethodMap !?ioSemanticContext->mTypeMap ?classMethodMap] ;
  @unifiedTypeMapProxyList addAssignArgumentList ;
  [t getAddAssignArgumentList !?ioSemanticContext->mTypeMap ?addAssignArgumentList] ;
  @enumerationDescriptorList enumerationList ;
  @stringlist enumerationVariants ;
  [t getEnumerationList !?ioSemanticContext->mTypeMap ?enumerationList ?enumerationVariants] ;
  @unifiedTypeMapProxy selfTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !mPredefinedTypeName ?selfTypeProxy] ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    ![@lstring new !mPredefinedTypeName !here]
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#---
  [!?ioSemanticContext->mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum predefinedType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    !enumerationList
    !enumerationVariants
    ![t getSupportedOperatorFlags]
    !addAssignArgumentList
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- location type index
  @unifiedTypeMapProxy locationTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"location" ?locationTypeProxy] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- current map type index
  @unifiedTypeMapProxy currentMapTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mMapTypeName string] ?currentMapTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [listWithValue !lstringTypeIndex !"lkey"] ;
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mMapTypeName string] !false ;
  enterConstructorWithArgument !?constructorMap !?ioSemanticContext->mTypeMap !"mapWithMapToOverride" ![mMapTypeName string] ![mMapTypeName string] !false ;
#--- Readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeyList" !"lstringlist" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"hasKey" !"string" !"bool" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"locationForKey" !"string" !"location" !true ;
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"overriddenMap" ![mMapTypeName string] !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @formalParameterSignature insertMethodFormalArgumentList [emptyList] ;
  insertMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  @formalParameterSignature removeMethodFormalArgumentList [emptyList] ;
  removeMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    insertMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    removeMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Handle insert modifiers
  foreach mInsertMethodList do
    if [modifierMap hasKey ![mInsertMethodName string]] then
      error mInsertMethodName:"the '" . mInsertMethodName . "' insert method is already declared" ;
    else
      [!?modifierMap insertOrReplace
        !mInsertMethodName
        ![@methodKind definedAsMember]
        !insertMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !""
      ] ;
    end if ;
  end foreach ;
#--- Handle remove modifiers
  foreach mRemoveMethodList do
    if [modifierMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' method is already declared as an insert modifier or a remove modifier" ;
    else
      [!?modifierMap insertOrReplace
        !mMethodName
        ![@methodKind definedAsMember]
        !removeMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !""
      ] ;
    end if ;
  end foreach ;
#--- Handle search methods (methods if no state, modifiers if states)
  foreach mSearchMethodList do
    [!?instanceMethodMap insertKey
      !mSearchMethodName
      ![@methodKind definedAsMember]
      !removeMethodFormalArgumentList
      ![mSearchMethodName location]
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
#--- Enter "attributeForKey" readers
  foreach mAttributeList do
    const @lstring accessorName [new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      ![@unifiedTypeMapProxyList listWithValue !stringTypeIndex]
      !here
      !true
      !attributeTypeIndex
      ![@methodQualifier isBasic]
      !"" # No Error message
    ] ;
  end foreach ;
#---------- Handle "insertOrReplace" modifier
  if [mInsertOrReplaceDeclarationListAST length] >= 1 then
    @location insertOrReplaceLocation ;
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceLocation] ;
    [!?modifierMap insertOrReplace
      ![@lstring new !"insertOrReplace" !insertOrReplaceLocation]
      ![@methodKind definedAsMember]
      !insertMethodFormalArgumentList
      !false
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end if ;
#---------- Enter "set...Attribute...forKey" modifiers
  foreach mAttributeList do
    const @lstring accessorName [new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @formalParameterSignature accessorFormalArgumentList [emptyList] ;
    accessorFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    accessorFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      !accessorFormalArgumentList
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
#--- Enter 'with' accessors
  @withAccessorMap withAccessorMap [emptyMap] ;
  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !stringTypeIndex] ;
  foreach mSearchMethodList do
    [!?withAccessorMap insertKey
      !mSearchMethodName
      !lstringTypeIndex
    ] ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mMapTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !mSearchMethodList
    ![@mapSearchMethodListAST emptyList]
    !withAccessorMap
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @uniqueMapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- location type index
  @unifiedTypeMapProxy locationTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"location" ?locationTypeProxy] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- current map type index
  @unifiedTypeMapProxy currentMapTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mMapTypeName string] ?currentMapTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [listWithValue !lstringTypeIndex !"lkey"] ;
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mMapTypeName string] !false ;
#--- Readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeyList" !"lstringlist" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeyListInEntryOrder" !"lstringlist" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"hasKey" !"string" !"bool" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"locationForKey" !"string" !"location" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyCount" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyKeyList" !"stringlist" !false ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @formalParameterSignature insertMethodFormalArgumentList [emptyList] ;
  insertMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  @formalParameterSignature removeMethodFormalArgumentList [emptyList] ;
  removeMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    insertMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    removeMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Handle insert modifiers
  foreach mInsertMethodList do
    if [modifierMap hasKey ![mInsertMethodName string]] then
      error mInsertMethodName:"the '" . mInsertMethodName . "' insert method is already declared" ;
    else
      [!?modifierMap insertOrReplace
        !mInsertMethodName
        ![@methodKind definedAsMember]
        !insertMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end if ;
  end foreach ;
#--- Handle search methods (methods if no state, modifiers if states)
  if [mMapStateList length] == 0 then
    foreach mSearchMethodList do
      [!?instanceMethodMap insertKey
        !mSearchMethodName
        ![@methodKind definedAsMember]
        !removeMethodFormalArgumentList
        ![mSearchMethodName location]
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  else
    foreach mSearchMethodList do
      [!?modifierMap insertKey
        !mSearchMethodName
        ![@methodKind definedAsMember]
        !removeMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  end if ;
#--- Enter "enterBranch" and "exitBranch" modifiers (only if there are states)
  if [mMapStateList length] > 0 then
    @unifiedTypeMapProxy locationTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"location" ?locationTypeIndex] ;
    [!?modifierMap insertKey
      ![@lstring new !"openBranch" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature emptyList]
      !true
      ![@methodQualifier isInherited]
      !"" # No error message
    ] ;
    [!?modifierMap insertKey
      ![@lstring new !"closeBranch" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn]]
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
    [!?modifierMap insertKey
      ![@lstring new !"closeOverride" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn]]
      !true
      ![@methodQualifier isInherited]
      !"" # No error message
    ] ;
    [!?instanceMethodMap insertKey
      ![@lstring new !"checkAutomatonStates" !here]
      ![@methodKind definedAsMember]
      ![@formalParameterSignature listWithValue !locationTypeIndex ![@formalArgumentPassingModeAST argumentIn]]
      !here
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
    foreach mMapOverrideBlockListAST do
      [!?modifierMap insertKey
        ![@lstring new !"openOverrideFor" . [mOverrideBlockName stringByCapitalizingFirstCharacter] !here]
        ![@methodKind definedAsMember]
        ![@formalParameterSignature emptyList]
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end foreach ;
  end if ;
#--- Enter "attributeForKey" readers
  foreach mAttributeList do
    const @lstring accessorName [new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      ![@unifiedTypeMapProxyList listWithValue !stringTypeIndex]
      !here
      !true
      !attributeTypeIndex
      ![@methodQualifier isBasic]
      !"" # No Error message
    ] ;
  end foreach ;
#---------- Enter "set...Attribute...forKey" modifiers
  foreach mAttributeList do
    const @lstring accessorName [new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @formalParameterSignature accessorFormalArgumentList [emptyList] ;
    accessorFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    accessorFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      !accessorName
      ![@methodKind definedAsMember]
      !accessorFormalArgumentList
      !true
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
#--- Enter 'with' accessors
  @withAccessorMap withAccessorMap [emptyMap] ;
  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !stringTypeIndex] ;
  foreach mSearchMethodList do
    [!?withAccessorMap insertKey
      !mSearchMethodName
      !lstringTypeIndex
    ] ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mMapTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum uniqueMapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !mSearchMethodList
    ![@mapSearchMethodListAST emptyList]
    !withAccessorMap
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@mapProxyDeclarationAST enterInSemanticContext\n" ;
#--- Check associated map is really a map
  @typedAttributeList mapTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  @mapSearchMethodListAST searchMethodList ;
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedMapTypeName
    ?2*
    ?typeKindEnum
    ?2*
    ?mapTypedAttributeList
    ?11*
    ?searchMethodList
    ?3*
  ] ;
  if typeKindEnum != [@typeKindEnum uniqueMapType] then
    error mAssociatedMapTypeName : "the @" . mAssociatedMapTypeName . " should be an unique map type" ;
    mapTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapProxy associatedMapTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAssociatedMapTypeName string] ?associatedMapTypeIndex] ;
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- Handle map type name
  @unifiedTypeMapProxy mapProxyTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mMapProxyTypeName string] ?mapProxyTypeProxy] ;
#--- class method
  @formalParameterSignature argList [emptyList] ;
  argList += !associatedMapTypeIndex ![@formalArgumentPassingModeAST argumentInOut] ;
  argList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !mapProxyTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
  [!?classMethodMap insertKey
    ![@lstring new !"makeRegularProxy" !here]
    !argList
    !false
  ] ;
#--- null constructor
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"null" ![mMapProxyTypeName string] !false ;
#--- Search methods of associated map as constructors
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  constructorAttributeTypeList += !associatedMapTypeIndex ;
  constructorAttributeTypeList += !lstringTypeIndex ;
  foreach searchMethodList do
    [!?constructorMap insertKey
      !mSearchMethodName
      !constructorAttributeTypeList
      !true
      !mapProxyTypeProxy
    ] ;
  end foreach ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isSolved" !"bool" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isNull" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isRegular" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"lkey" !"lstring" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"key" !"string" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"identifierRepresentation" !"string" !true ;
#--- Enter associated map attribute names as readers
  const @readerMap inheritedReaderMap := readerMap ;
  foreach mapTypedAttributeList do
    if [inheritedReaderMap hasKey ![mAttributeName string]] then
      @string s := "" ;
      foreach [inheritedReaderMap allKeys]
        do s .= "'" . key . "'" ;
        between s .= ", " ;
      end foreach ;
      error mAttributeName : "the map has a associated map proxy, which has predefined readers: " . s
       . "; you cannot use theses names for naming an attribute of this map" ;
    else
      [!?readerMap insertKey
        !mAttributeName
        ![@methodKind definedAsMember]
        ![@unifiedTypeMapProxyList emptyList]
        !here
        !true
        !mAttributeTypeProxy
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end if ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mMapProxyTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapProxyTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapProxyType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !mapTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    !searchMethodList
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @graphDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- string type proxy
  @unifiedTypeMapProxy stringTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeProxy] ;
#--- lstring type proxy
  @unifiedTypeMapProxy lstringTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeProxy] ;
#--- Graph type proxy
  @unifiedTypeMapProxy graphTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !mGraphTypeName->string ?graphTypeProxy] ;
#--- Associated list type proxy
  @unifiedTypeMapProxy associatedListTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAssociatedListTypeName string] ?associatedListTypeProxy] ;
#--- @lstringlist type proxy
  @unifiedTypeMapProxy lstringListTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstringlist" ?lstringListTypeProxy] ;
#---
  @readerMap readerMap [emptyMap] ;
  @constructorMap constructorMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Method 'topologicalSort'
  @formalParameterSignature formalParameterList [emptyList] ;
  formalParameterList += !associatedListTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
  formalParameterList += !lstringListTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
  formalParameterList += !associatedListTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
  formalParameterList += !lstringListTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"topologicalSort" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !here
    !true # Has Compiler Argument
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
#--- Reader 'undefinedNodeCount'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"undefinedNodeCount"
    !"uint"
    !false # No compiler argument
  ;
#--- Reader 'undefinedNodeKeyList'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"undefinedNodeKeyList"
    !"stringlist"
    !false # No compiler argument
  ;
#--- Reader 'undefinedNodeReferenceList'
  enterInheritedReaderWithoutArgument
    !?readerMap
    !?ioSemanticContext->mTypeMap
    !"undefinedNodeReferenceList"
    !"lstringlist"
    !false # No compiler argument
  ;
#--- Constructor 'emptyGraph'
  [!?constructorMap insertKey
    ![@lstring new !"emptyGraph" !here]
    ![@unifiedTypeMapProxyList emptyList]
    !false # No compiler argument
    !graphTypeProxy
  ] ;
#--- Modifier 'enterNode'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] ;
  foreach [associatedListTypeProxy mAddAssignOperatorArguments] do
    formalParameterList += !mType ![@formalArgumentPassingModeAST argumentIn] ;
  end foreach ;
  foreach mInsertModifierList do
    [!?modifierMap insertOrReplace
      !mInsertModifierName
      ![@methodKind definedAsMember]
      !formalParameterList
      !true # has compiler argument
      ![@methodQualifier isBasic]
      !"" # No error message
    ] ;
  end foreach ;
#--- Modifier 'enterArc'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] ;
  [!?modifierMap insertKey
    ![@lstring new !"addArc" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !false # No compiler argument
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
#--- Modifier 'noteNode'
  formalParameterList := [@formalParameterSignature emptyList] ;
  formalParameterList += !lstringTypeProxy ![@formalArgumentPassingModeAST argumentIn] ;
  [!?modifierMap insertKey
    ![@lstring new !"noteNode" !here]
    ![@methodKind definedAsMember]
    !formalParameterList
    !false # No compiler argument
    ![@methodQualifier isInherited]
    !"" # No error message
  ] ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mGraphTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mGraphTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum graphType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !doNotGenererateObjectCompare []
    ![@unifiedTypeMapProxyList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@enumDeclarationAST enterInSemanticContext\n" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- currentType type index
  @unifiedTypeMapProxy currentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mEnumTypeName string] ?currentTypeIndex] ;
#--- Constructors
  @stringset constantSet [emptySet] ;
  foreach mConstantList do
    constantSet += ![mValue string] ;
    enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap ![mValue string] ![mEnumTypeName string] !false ;
  end foreach ;
#--- readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap  ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mEnumTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mEnumTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum enumType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !generateDescriptionReaderUtilityMethod [] | isComparable []
    ![@unifiedTypeMapProxyList emptyList]
    !constantSet
    !mConstantList
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

map @wrapperExtensionMap {
  insert insertKey error message "the '%K' extension has been already declared" ;
}

#---------------------------------------------------------------------------*

routine recursivelyEnumerateDirectories
  ??@string inAbsoluteSourcePath
  ??@string inPathInWrapper
  ??@wrapperExtensionMap inTextFileExtensionMap
  ??@wrapperExtensionMap inBinaryFileExtensionMap
  !@wrapperFileMap outWrapperFileMap
  !@wrapperDirectoryMap outWrapperDirectoryMap
  ?!@uint ioWrapperFileIndex
  ?!@uint ioWrapperDirectoryIndex
:
  @uint currentDirectoryIndex := ioWrapperDirectoryIndex ;
  ioWrapperDirectoryIndex ++ ;
#--- Enumerates regular files
  @stringlist files := [inAbsoluteSourcePath regularFiles !false] ;
  outWrapperFileMap := [@wrapperFileMap emptyMap] ;
  foreach files do
    if [inTextFileExtensionMap hasKey ![mValue pathExtension]] then
      @string absoluteFilePath := inAbsoluteSourcePath . "/" . mValue ;
      [!?outWrapperFileMap insertKey
        ![@lstring new !mValue !here]
        !absoluteFilePath
        !true # Text File
        !currentDirectoryIndex
        !ioWrapperFileIndex
      ] ;
      ioWrapperFileIndex ++ ;
    elsif [inBinaryFileExtensionMap hasKey ![mValue pathExtension]] then
      @string absoluteFilePath := inAbsoluteSourcePath . "/" . mValue ;
      [!?outWrapperFileMap insertKey
        ![@lstring new !mValue !here]
        !absoluteFilePath
        !false # Binary file
        !currentDirectoryIndex
        !ioWrapperFileIndex
      ] ;
      ioWrapperFileIndex ++ ;
    end if ;
  end foreach ;
#--- Enumerates regular directories
  @stringlist directories := [inAbsoluteSourcePath directories !false] ;
  outWrapperDirectoryMap := [@wrapperDirectoryMap emptyMap] ;
  foreach directories do
    @wrapperFileMap internalWrapperFileMap ;
    @wrapperDirectoryMap internalWrapperDirectoryMap ;
    @uint theDirectoryIndex := ioWrapperDirectoryIndex ;
    recursivelyEnumerateDirectories
      !inAbsoluteSourcePath . "/" . mValue
      !inPathInWrapper . mValue . "/"
      !inTextFileExtensionMap
      !inBinaryFileExtensionMap
      ?internalWrapperFileMap
      ?internalWrapperDirectoryMap
      !?ioWrapperFileIndex
      !?ioWrapperDirectoryIndex
    ;
    [!?outWrapperDirectoryMap insertKey
      ![@lstring new !mValue !here]
      !internalWrapperFileMap
      !internalWrapperDirectoryMap
      !theDirectoryIndex
    ] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Templates
  @filewrapperTemplateMap filewrapperTemplateMap [emptyMap] ;
  foreach mFilewrapperTemplateList do
    @unifiedTypeMapProxyList templateSignature [emptyList] ;
    foreach mFilewrapperTemplateFormalInputParameters do
      @unifiedTypeMapProxy parameterTypeIndex ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
      templateSignature += !parameterTypeIndex ;
    end foreach ;
    [!?filewrapperTemplateMap insertKey
      !mFilewrapperTemplateName
      !templateSignature
      !mFilewrapperTemplatePath
    ] ;
  end foreach ;
#--- Build text file extension map
  @wrapperExtensionMap textExtensionMap [emptyMap] ;
  foreach mFilewrapperTextFileExtensionList do
    [!?textExtensionMap insertKey !mValue] ;
  end foreach ;
#--- Build binary file extension map
  @wrapperExtensionMap binaryFileExtensionMap [emptyMap] ;
  foreach mFilewrapperBinaryFileExtensionList do
    if [textExtensionMap hasKey !mValue->string] then
      error mValue:"the '" . mValue . "' extension is already used for text files" ;
    else
    [!?binaryFileExtensionMap insertKey !mValue] ;
    end if ;
  end foreach ;
#--- Enumerate filewrapper files
  @wrapperFileMap regularRootFileMap ;
  @wrapperDirectoryMap wrapperDirectoryMap ;
  @string absoluteSourcePath ;
  if [[mFilewrapperPath string] firstCharacterOrNul] == '/' then
    absoluteSourcePath := [mFilewrapperPath string] ;
  else
    absoluteSourcePath := [mSourceFileAbsolutePath stringByDeletingLastPathComponent] . "/" . [mFilewrapperPath string] ;
  end if ;
  if not [absoluteSourcePath directoryExists] then
    error mFilewrapperPath: "The '" . absoluteSourcePath . "' directory does not exist" 
    : regularRootFileMap, wrapperDirectoryMap ;
  else
  #--- Enumerate pathes
    @uint wrapperFileIndex := 0 ;
    @uint wrapperDirectoryIndex := 0 ;
    recursivelyEnumerateDirectories
     !absoluteSourcePath
     !"/"
     !textExtensionMap
     !binaryFileExtensionMap
     ?regularRootFileMap
     ?wrapperDirectoryMap
     !?wrapperFileIndex
     !?wrapperDirectoryIndex
   ;
  end if ;
#--- Insert filewrapper
  [!?ioSemanticContext->mFilewrapperMap insertKey
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperTextFileExtensionList
    !regularRootFileMap
    !wrapperDirectoryMap
    !filewrapperTemplateMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := false ;
    foreach mFeatureList do
      if mValue->string == "nogetter" then
        hasGetter := false ;
      elsif mValue->string == "setter" then
        hasSetter := true ;
      end if ;
    end foreach ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
  end foreach ;
#--- uint type index
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#--- Element type index
  @unifiedTypeMapProxy listTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mListTypeName string] ?listTypeIndex] ;
#--- Attribute description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierOutputFormalArgumentList [emptyList] ;
  @formalParameterSignature modifierInputFormalArgumentList [emptyList] ;
  foreach typedAttributeList do
    enumerationDescriptor += !mAttributeTypeProxy ![mAttributeName string] ;
    constructorAttributeTypeList += !mAttributeTypeProxy ;
    modifierOutputFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
    modifierInputFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentConstantIn] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyList" ![mListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"listWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"subListFromIndex" !"uint" ![mListTypeName string] !true ;
  enterBaseReaderWith2Arguments !?readerMap !?ioSemanticContext->mTypeMap !"subListWithRange" !"uint" !"uint" ![mListTypeName string] !true ;
  foreach typedAttributeList do
    if mHasGetter then
      [!?readerMap insertOrReplace
        ![@lstring new ![mAttributeName string] . "AtIndex" ![mAttributeName location]]
        ![@methodKind definedAsMember]
        ![@unifiedTypeMapProxyList listWithValue !uintType]
        !here
        !true
        !mAttributeTypeProxy
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
    end if ;
  end foreach ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popFirst" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popLast" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"prependValue" !here]
    ![@methodKind definedAsMember]
    !modifierInputFormalArgumentList
    !false
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  foreach typedAttributeList do
    if mHasSetter then
      @formalParameterSignature setterFormalArgumentList [emptyList] ;
      setterFormalArgumentList += !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentConstantIn] ;
      setterFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] ;
      [!?modifierMap insertOrReplace
        ![@lstring new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "AtIndex" ![mAttributeName location]]
        ![@methodKind definedAsMember]
        !setterFormalArgumentList
        !true
        ![@methodQualifier isBasic]
        !"" # No error message
      ] ;
    end if ;
  end foreach ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"first" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"last" !here]
    ![@methodKind definedAsMember]
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !""
  ] ;
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mListTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator []
    !constructorAttributeTypeList
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@sortedListDeclarationAST enterInSemanticContext\n" ;
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#--- Element type index
  @unifiedTypeMapProxy listTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy!?ioSemanticContext->mTypeMap ![mSortedListTypeName string] ?listTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierFormalArgumentList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasGetter := true ;
    @bool hasSetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    modifierFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptySortedList" ![mSortedListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"sortedListWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popGreatest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popSmallest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"greatest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"smallest" !here]
    ![@methodKind definedAsMember]
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
    !"" # No error message
  ] ;
#--- Enumeration variants
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mSortedListTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mSortedListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum sortedListType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !enumerationVariants
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator []
    !constructorAttributeTypeList
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@structDeclarationAST enterInSemanticContext\n" ;
#--- Struct type index
  @unifiedTypeMapProxy structTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mStructTypeName string] ?structTypeIndex] ;
#--- Constructors and attribute map
  @attributeMap attributeMap [emptyMap] ;
  @constructorMap constructorMap [emptyMap] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    @bool hasSetter := false ;
    @bool hasGetter := true ;
    typedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
  end foreach ;
  [!?constructorMap insertKey
    ![@lstring new !"new" !here]
    !constructorAttributeTypeList
    !false
    !structTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap ;
  foreach typedAttributeList do
#    log "ATTRIBUTE" : [mAttributeName string] ;
#    log "TYPE" :  [mAttributeTypeProxy key] ;
    enterBaseFinalReaderWithoutArgument
      !?readerMap
      !?ioSemanticContext->mTypeMap 
      ![mAttributeName string]
      ![mAttributeTypeProxy key]
      !false
    ;
  end foreach ;
#  log mStructTypeName, readerMap ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mStructTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mStructTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum structType]
    !typedAttributeList
    !attributeMap
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !generateDescriptionReaderUtilityMethod []
    ![@unifiedTypeMapProxyList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#---
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @typedAttributeList inheritedTypedAttributeList ;
  @attributeMap attributeMap [emptyMap] ;
#--- Handle super class
  @unifiedTypeMapProxy superClassIndex ;
  @bool generateHeaderInSeparateFile ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@unifiedTypeMapProxy null] ;
#    readerMap := [@readerMap emptyMap] ;
    commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap ;
    modifierMap := [@modifierMap emptyMap] ;
    instanceMethodMap := [@instanceMethodMap emptyMap] ;
    inheritedTypedAttributeList := [@typedAttributeList emptyList] ;
    attributeMap := [@attributeMap emptyMap] ;
    generateHeaderInSeparateFile := false ;
    foreach mClassFeatureList do
      if [mValue string] == "generatedInSeparateFile" then
        generateHeaderInSeparateFile := true ;
      end if ;
    end foreach ;
  else
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mSuperClassName string] ?superClassIndex] ;
    @typeKindEnum typeKindEnum ;
    @readerMap inheritedReaderMap ;
    @modifierMap inheritedModifierMap ;
    @instanceMethodMap inheritedMethodMap ;
    [ioSemanticContext->mTypeMap searchKey
      !mSuperClassName
      ?2*
      ?typeKindEnum
      ?inheritedTypedAttributeList
      ?attributeMap
      ?2*
      ?inheritedReaderMap
      ?inheritedModifierMap
      ?inheritedMethodMap
      ?10*
      ?generateHeaderInSeparateFile
    ] ;
  #---
    if typeKindEnum != [@typeKindEnum classType] then
      error mSuperClassName : "the @" . mSuperClassName . " should be a class type" ;
    end if ;
  #--- Mark all modifiers as inherited
    modifierMap := [@modifierMap emptyMap] ;
    foreach inheritedModifierMap do
      [!?modifierMap insertKey
        !lkey
        !mKind
        !mParameterList
        !mHasCompilerArgument
        ![@methodQualifier isInherited]
        !"" # No error message
      ] ; 
    end foreach ;
  #--- Mark all readers as inherited
    readerMap := [@readerMap emptyMap] ;
    foreach inheritedReaderMap do
      [!?readerMap insertKey
        !lkey
        !mKind
        !mArgumentTypeList
        !mDeclarationLocation
        !mHasCompilerArgument
        !mReturnedType
        ![@methodQualifier isInherited]
        !mErrorMessage
      ] ; 
    end foreach ;
  #--- Mark all methods as inherited
    instanceMethodMap := [@instanceMethodMap emptyMap] ;
    foreach inheritedMethodMap do
      [!?instanceMethodMap insertKey
        !lkey
        !mKind
        !mParameterList
        !mDeclarationLocation
        !mHasCompilerArgument
        ![@methodQualifier isInherited]
        !mErrorMessage
      ] ; 
    end foreach ;
  end if ;
#--- Build attribute Map and constructor argument list
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  foreach inheritedTypedAttributeList do
    constructorAttributeTypeList += !mAttributeTypeProxy ;
  end foreach ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
    if [readerMap hasKey ![mAttributeName string]] then
      error mAttributeName: "'" . mAttributeName . "' is the name of a prefefined or a user defined reader" ;
    end if ;
  end foreach ;
#--- Current class Index
  @unifiedTypeMapProxy classIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mClassTypeName string] ?classIndex] ;
#--- Constructor
  @constructorMap constructorMap [emptyMap] ;
  if not mIsAbstract then
    [!?constructorMap insertKey
      ![@lstring new !"new" !here]
      !constructorAttributeTypeList
      !false
      !classIndex
    ] ;
  end if ;
#--- Typed attribute list
  @typedAttributeList currentClassTypedAttributeList [emptyList] ;
  @typedAttributeList allTypedAttributeList := inheritedTypedAttributeList ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @bool hasSetter := false ;
    @bool hasGetter := true ;
    foreach mFeatureList do
      if [mValue string] == "setter" then
        hasSetter := true ;
      elsif [mValue string] == "nogetter" then
        hasGetter := false ;
      end if ;
    end foreach ;
    currentClassTypedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    allTypedAttributeList += !attributeTypeIndex !mAttributeName !hasSetter !hasGetter ;
    if hasGetter then
      [!?readerMap insertKey
        !mAttributeName
        ![@methodKind definedAsMember]
        ![@unifiedTypeMapProxyList emptyList] # No argument
        !here
        !false # No Compiler argument
        !attributeTypeIndex # Returned type
        ![@methodQualifier isBasic]
        !"" # No Error message
      ] ;
#    else
#      [!?readerMap insertFakeKey
#        ![mAttributeName string]
#        ![mAttributeName location]
#        !"the '" . mAttributeName . "' attribute was declared here (use 'feature getter' for making it readable)"
#      ] ;
    end if ;
  end foreach ;
#--- set...attribute modifier
  foreach currentClassTypedAttributeList do
    if mHasSetter then
      [!?modifierMap insertKey
        ![@lstring new !"set". [[mAttributeName string] stringByCapitalizingFirstCharacter] !here]
        ![@methodKind definedAsMember]
        ![@formalParameterSignature listWithValue !mAttributeTypeProxy ![@formalArgumentPassingModeAST argumentIn]]
        !false # No compiler argument
        ![@methodQualifier isBasicFinal]
        !"" # No error message
      ] ;
    end if ;
  end foreach ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mClassTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mClassTypeName
    !not mIsAbstract # Concrete Type
    !superClassIndex
    ![@typeKindEnum classType]
    !allTypedAttributeList
    !attributeMap
    !currentClassTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    ![@stringlist emptyList]
    !0
    ![@unifiedTypeMapProxyList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !generateHeaderInSeparateFile
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterInSemanticContext # Handles also routine declaration
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @formalParameterSignature routineSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalArgumentPassingMode ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext->mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterInSemanticContext # Handles also function declaration
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @unifiedTypeMapProxyList functionSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex ;
  end foreach ;
#--- Result type
  @unifiedTypeMapProxy resultTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext unused inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext unused inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext unused inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Result type
  @unifiedTypeMapProxy resultTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName ![@unifiedTypeMapProxyList emptyList] !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterInSemanticContext
  ??@categoryMethodMapForBuildingContext inCategoryMethodMapForBuildingContext
  ??@categoryReaderMapForBuildingContext inCategoryReaderMapForBuildingContext
  ??@categoryModifierMapForBuildingContext inCategoryModifierMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@listmapDeclarationAST enterInSemanticContext: @" . [mListmapTypeName string] . "\n" ;
#--- Check associated map is really a list
  @typedAttributeList listTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedListTypeName
    ?2*
    ?typeKindEnum
    ?listTypedAttributeList
    ?17*
  ] ;
  if typeKindEnum != [@typeKindEnum listType] then
    error mAssociatedListTypeName : "the '@" . mAssociatedListTypeName . "' type should be a list type" ;
    listTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapProxy associatedListTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAssociatedListTypeName string] ?associatedListTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapProxy currentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mListmapTypeName string] ?currentTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"keyList" !"stringlist" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"listForKey" !"string" ![mAssociatedListTypeName string] !false ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mListmapTypeName string] !false ;
#--- Enumerator description
  @enumerationDescriptorList enumeratorDescriptor [emptyList] ;
  enumeratorDescriptor += !stringTypeIndex !"key" ;
  enumeratorDescriptor += !associatedListTypeIndex !"mList" ;
#--- Add assign operator description
  @unifiedTypeMapProxyList addAssignOperatorDescription [emptyList] ;
  addAssignOperatorDescription += !stringTypeIndex ;
  foreach listTypedAttributeList do
    addAssignOperatorDescription += !mAttributeTypeProxy ;
  end foreach ;
#--- Enumeration variants
  @stringlist enumerationVariants [emptyList] ;
  enumerationVariants += !"up" ;
  enumerationVariants += !"down" ;
#--- Add Categories
  addCategories
    !inCategoryMethodMapForBuildingContext
    !inCategoryReaderMapForBuildingContext
    !inCategoryModifierMapForBuildingContext
    !?ioSemanticContext
    !mListmapTypeName
    !?readerMap
    !?modifierMap
    !?instanceMethodMap
  ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListmapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listMapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !listTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumeratorDescriptor
    !enumerationVariants
    !doNotGenererateObjectCompare []
    !addAssignOperatorDescription
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
    !false # Do not generate header in separate file
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    O R D E R E D     S E M A N T I C    L I S T              *
#                                                                           *
#---------------------------------------------------------------------------*

graph @semanticTypePrecedenceGraph (@semanticDeclarationListAST) {
  insert addNode error message "the '%K' type is already declared at %L" ;
}

#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mPredefinedTypeName !here] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mClassTypeName ![mClassTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  if mSuperClassName->string != "" then
    [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mSuperClassName ![mSuperClassName location]]] ;
  end if ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mListTypeName ![mListTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mStructTypeName ![mStructTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mEnumTypeName ![mEnumTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mSortedListTypeName ![mSortedListTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mListmapTypeName ![mListmapTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mAssociatedListTypeName ![mAssociatedListTypeName location]]] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mMapTypeName ![mMapTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @uniqueMapDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mMapTypeName ![mMapTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  foreach mAttributeList do
    [!?ioSemanticTypePrecedenceGraph noteNode ![@lstring new !"@" . mAttributeTypeName ![mAttributeTypeName location]]] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mMapProxyTypeName ![mMapProxyTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mAssociatedMapTypeName ![mAssociatedMapTypeName location]]] ;
end method ;

#---------------------------------------------------------------------------*

override method @graphDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"@" . mGraphTypeName ![mGraphTypeName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mAssociatedListTypeName ![mAssociatedListTypeName location]]] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"category reader @" . mTypeName . " " . mCategoryReaderName ![mCategoryReaderName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryReaderMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryReaderMapForBuildingContext insertKey
      !mTypeName
      ![@categoryReaderMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryReaderMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryReaderMapForType insertKey
      !mCategoryReaderName
      !mCategoryReaderReturnedTypeName
      !mCategoryReaderFormalInputParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"category method @" . mTypeName . " " . mCategoryMethodName ![mCategoryMethodName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryMethodMapForBuildingContext insertKey
      !mTypeName
      ![@categoryMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryMethodMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryMethodMapForType insertKey
      !mCategoryMethodName
      !mCategoryMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"category modifier @" . mTypeName . " " . mCategoryModifierName ![mCategoryModifierName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryModifierMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryModifierMapForBuildingContext insertKey
      !mTypeName
      ![@categoryModifierMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryModifierMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryModifierMapForType insertKey
      !mCategoryModifierName
      !mCategoryModifierFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph unused ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST ioCategoryOverrideDefinitionList
:
  ioCategoryOverrideDefinitionList += !selfcopy ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"category reader @" . mTypeName . " " . mAbstractCategoryReaderName ![mAbstractCategoryReaderName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryReaderMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryReaderMapForBuildingContext insertKey
      !mTypeName
      ![@categoryReaderMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryReaderMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryReaderMapForType insertKey
      !mAbstractCategoryReaderName
      !mAbstractCategoryReaderReturnedTypeName
      !mAbstractCategoryReaderFormalInputParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext unused ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"category method @" . mTypeName . " " . mAbstractCategoryMethodName ![mAbstractCategoryMethodName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryMethodMapForBuildingContext insertKey
      !mTypeName
      ![@categoryMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryMethodMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryMethodMapForType insertKey
      !mAbstractCategoryMethodName
      !mAbstractCategoryMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryModifierAST enterDeclarationInGraph
  ?!@semanticTypePrecedenceGraph ioSemanticTypePrecedenceGraph
  ?!@categoryMethodMapForBuildingContext unused ioCategoryMethodMapForBuildingContext
  ?!@categoryReaderMapForBuildingContext unused ioCategoryReaderMapForBuildingContext
  ?!@categoryModifierMapForBuildingContext ioCategoryModifierMapForBuildingContext
  ?!@semanticDeclarationListAST unused ioCategoryOverrideDefinitionList
:
  const @lstring key [new !"category modifier @" . mTypeName . " " . mAbstractCategoryModifierName ![mAbstractCategoryModifierName location]] ;
  [!?ioSemanticTypePrecedenceGraph addNode !key !selfcopy] ;
  [!?ioSemanticTypePrecedenceGraph addArc !key ![@lstring new !"@" . mTypeName ![mTypeName location]]] ;
#---
  if not [ioCategoryModifierMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioCategoryModifierMapForBuildingContext insertKey
      !mTypeName
      ![@categoryModifierMapForType emptyMap]
    ] ;
  end if ;
  with !?ioCategoryModifierMapForBuildingContext searchKey !mTypeName do
    [!?mCategoryModifierMapForType insertKey
      !mAbstractCategoryModifierName
      !mAbstractCategoryModifierFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C    C O N T E X T                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@string inSourceFile
  ??@semanticDeclarationListAST inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContext outSemanticContext
:
#------ Build ordered types list, so that
#  - a class appears after its super class
#  - a map index appears after its associated map
#  - a list map appears after its associated list
  @semanticTypePrecedenceGraph semanticTypePrecedenceGraph [emptyGraph] ;
  @categoryMethodMapForBuildingContext categoryMethodMapForBuildingContext [emptyMap] ;
  @categoryReaderMapForBuildingContext categoryReaderMapForBuildingContext  [emptyMap] ;
  @categoryModifierMapForBuildingContext categoryModifierMapForBuildingContext  [emptyMap] ;
  @semanticDeclarationListAST categoryOverrideDefinitionList [emptyList] ;
  foreach inSemanticDeclarationList do
    [mSemanticDeclaration enterDeclarationInGraph
      !?semanticTypePrecedenceGraph
      !?categoryMethodMapForBuildingContext
      !?categoryReaderMapForBuildingContext
      !?categoryModifierMapForBuildingContext
      !?categoryOverrideDefinitionList
    ] ;  
  end foreach ;
  if [semanticTypePrecedenceGraph undefinedNodeCount] > 0 then
    foreach [semanticTypePrecedenceGraph undefinedNodeReferenceList] do
      error mValue : "the '" . mValue . "' type is not defined" ;
    end foreach ;
    error inEndOfSourceFile : "semantic analysis not performed, due to undefined type error(s)" : outSemanticContext ;
  else
    @semanticDeclarationListAST sortedSemanticDeclarationListAST ;
    @semanticDeclarationListAST unsortedSemanticDeclarationListAST ;
    @lstringlist unsortedNodeKeyList ;
    [semanticTypePrecedenceGraph topologicalSort
      ?sortedSemanticDeclarationListAST
      ?*
      ?unsortedSemanticDeclarationListAST
      ?unsortedNodeKeyList
    ] ;
  #    @string s := "--- Sorted declarations:\n" ;
  #    foreach sortedSemanticDeclarationListAST do
  #      [mSemanticDeclaration display !?s] ;
  #    end foreach ;
  #    message s ;
    if [unsortedSemanticDeclarationListAST length] > 0 then
      @string s := "semantic analysis not performed, " . [[unsortedSemanticDeclarationListAST length] string] . " declarations are involved in circular definition:" ;
      foreach unsortedSemanticDeclarationListAST do
        s .= "\n-  " . [mSemanticDeclaration keyRepresentation] ;
      end foreach ;
      error inEndOfSourceFile : s : outSemanticContext ;
    else
    #--- Add category override
      sortedSemanticDeclarationListAST .= categoryOverrideDefinitionList ;
    #--- Build initial semantic context
      outSemanticContext := [@semanticContext new
        !inSourceFile
        ![@unifiedTypeMap emptyMap]
        ![@routineMap emptyMap]
        ![@functionMap emptyMap]
        ![@filewrapperMap emptyMap]
        ![@grammarMap emptyMap]
        ![@optionComponentMapForSemanticAnalysis emptyMap]
      ] ;
    #--- Loop throught all declarations
      foreach sortedSemanticDeclarationListAST do
        [mSemanticDeclaration enterInSemanticContext
          !categoryMethodMapForBuildingContext
          !categoryReaderMapForBuildingContext
          !categoryModifierMapForBuildingContext
          !?outSemanticContext
        ] ;
      end foreach ;
    end if ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
