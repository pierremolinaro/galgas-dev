#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2010, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticContext :
  import "semanticsClassMethods.gSemantics" ;
  import "semanticsInstanceMethods.gSemantics" ;
  import "semanticsModifiers.gSemantics" ;
  import "semanticsReaders.gSemantics" ;
  import "semanticsConstructors.gSemantics" ;
  import "optionCompilation.gSemantics" ;

  import semantics semanticsClassMethods in "semanticsClassMethods.gSemantics" ;
  import semantics semanticsInstanceMethods in "semanticsInstanceMethods.gSemantics" ;
  import semantics semanticsModifiers in "semanticsModifiers.gSemantics" ;
  import semantics semanticsReaders in "semanticsReaders.gSemantics" ;
  import semantics semanticsConstructors in "semanticsConstructors.gSemantics" ;
  import semantics optionCompilation in "optionCompilation.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G R A M M A R   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @grammarLabelMap {
  @formalParameterSignature mLabelSignature ;
  insert insertKey error message "the '%K' grammar label has been already declared in %L" ;
  search searchKey error message "the '%K' grammar label is not declared" ;
}

#---------------------------------------------------------------------------*

map @grammarMap {
  @grammarLabelMap mLabelMap ;
  insert insertKey error message "the '%K' grammar has been already declared in %L" ;
  search searchKey error message "the '%K' grammar is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  R O U T I N E   M A P                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @routineMap {
  @formalParameterSignature mRoutineSignature ;
  insert insertKey error message "the '%K' routine has been already declared in %L" ;
  search searchKey error message "the '%K' routine is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F U N C T I O N   M A P                                                  *
#                                                                           *
#---------------------------------------------------------------------------*

map @functionMap {
  @unifiedTypeMapProxyList mFunctionSignature ;
  @unifiedTypeMapProxy mResultType ;
  insert insertKey error message "the '%K' function has been already declared in %L" ;
  search searchKey error message "the '%K' function is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F I L E W R A P P E R   M A P                                            *
#                                                                           *
#---------------------------------------------------------------------------*

map @filewrapperTemplateMap {
  @unifiedTypeMapProxyList mTemplateSignature ;
  @lstring mFilewrapperTemplatePath ;
  insert insertKey error message "the '%K' filewrapper template has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper template is not declared" ;
}

#---------------------------------------------------------------------------*

map @filewrapperMap {
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @filewrapperTemplateMap mFilewrapperTemplateMap ;
  insert insertKey error message "the '%K' filewrapper has been already declared in %L" ;
  search searchKey error message "the '%K' filewrapper is not declared" ;
}

#---------------------------------------------------------------------------*

map @optionComponentMapForSemanticAnalysis {
  @commandLineOptionMap mBoolOptionMap ;
  @commandLineOptionMap mUIntOptionMap ;
  @commandLineOptionMap mStringOptionMap ;
  insert insertKey error message "redefintion of the '%K' option component: it has been already declared in %L" ;
  search searchKey error message "the '%K' option component is not imported" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E M A N T I C    C O N T E X T                                       *
#                                                                           *
#---------------------------------------------------------------------------*

struct @semanticContext {
  @unifiedTypeMap mTypeMap ;
  @routineMap mRoutineMap ;
  @functionMap mFunctionMap ;
  @filewrapperMap mFilewrapperMap ;
  @grammarMap mGrammarMap ;
  @optionComponentMapForSemanticAnalysis mOptionComponentMapForSemanticAnalysis ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C O L L E C T    T Y P E S                                             *
#                                                                           *
#---------------------------------------------------------------------------*

map @collectedTypeMap {
  insert insertKey error message "the '%K' type has been already defined in %L" ;
  search searchKey error message "the '%K' type is not declared" ;
}

#---------------------------------------------------------------------------*

mapproxy @collectedTypeMapIndex (@collectedTypeMap) ;

#---------------------------------------------------------------------------*
#                                                                           *
#    M U L T I - M E T H O D    M A P                                       *
#                                                                           *
#---------------------------------------------------------------------------*

map @multiMethodMapForType {
  @formalParameterListAST mFormalParameterList ;
  insert or replace ;
}

#---------------------------------------------------------------------------*

map @multiMethodMapForBuildingContext {
  @multiMethodMapForType mMultiMethodMapForType ;
  insert insertKey error message "internal error" ;
  search searchKey error message "internal error" ;
}

#---------------------------------------------------------------------------*

routine collectAttributeTypes
  ??@attributeInCollectionListAST inAttributeList
  ?!@collectedTypeMap ioCollectedTypeMap
:
  foreach inAttributeList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mAttributeTypeName string] ?*] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

method @semanticDeclarationAST collectTypes
  ?!@collectedTypeMap unused ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
end method ;

#---------------------------------------------------------------------------*

override method @abstracMultiMethodAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext ioMultiMethodMapForBuildingContext
:
#--- Enter parameter types
  foreach mAbstractMultiMethodFormalParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
#---
  if not [ioMultiMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioMultiMethodMapForBuildingContext insertKey
      !mTypeName
      ![@multiMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioMultiMethodMapForBuildingContext searchKey !mTypeName do
    [!?mMultiMethodMapForType insertOrReplace
      !mAbstractMultiMethodName
      !mAbstractMultiMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @multiMethodAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext ioMultiMethodMapForBuildingContext
:
#--- Enter parameter types
  foreach mMultiMethodFormalParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
#---
  if not [ioMultiMethodMapForBuildingContext hasKey ![mTypeName string]] then
    [!?ioMultiMethodMapForBuildingContext insertKey
      !mTypeName
      ![@multiMethodMapForType emptyMap]
    ] ;
  end if ;
  with !?ioMultiMethodMapForBuildingContext searchKey !mTypeName do
    [!?mMultiMethodMapForType insertOrReplace
      !mMultiMethodName
      !mMultiMethodFormalParameterList
    ] ;
  end with ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingMultiMethodAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
#--- Enter parameter types
  foreach mOverridingMultiMethodFormalParameterList do
    [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractMultiReaderAST collectTypes
  ?!@collectedTypeMap unused ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  error mAbstractMultiReaderName : "@abstractMultiReaderAST collectTypes\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @multiReaderAST collectTypes
  ?!@collectedTypeMap unused ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  error mMultiReaderName : "@multiReaderAST collectTypes\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingMultiReaderAST collectTypes
  ?!@collectedTypeMap unused ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  error mOverridingMultiReaderName : "@overridingMultiReaderAST collectTypes\n" ;
end method ;

#---------------------------------------------------------------------------*

override method @objectPredefinedTypeAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey ![@lstring new !"object" !here]] ;
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey ![@lstring new !mPredefinedTypeName !here]] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mMapTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mMapProxyTypeName] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mEnumTypeName] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mSortedListTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mStructTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mListTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mClassTypeName] ;
  collectAttributeTypes !mAttributeList !?ioCollectedTypeMap ;
  foreach mAbstractMethodList do
    foreach mSignature do
      [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
    end foreach ;
  end foreach ;
  foreach mMethodList do
    foreach mSignature do
      [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mFormalArgumentTypeName string] ?*] ;
    end foreach ;
  end foreach ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST collectTypes
  ?!@collectedTypeMap ioCollectedTypeMap
  ?!@multiMethodMapForBuildingContext unused ioMultiMethodMapForBuildingContext
:
  [!?ioCollectedTypeMap insertKey !mListmapTypeName] ;
  [@collectedTypeMapIndex makeRegularProxy !?ioCollectedTypeMap ![mAssociatedListTypeName string] ?*] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    E N T E R    T Y P E S                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext unused ioSemanticContext
;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@predefinedTypeAST enterType\n" ;
  @constructorMap constructorMap ;
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap instanceMethodMap ;
  @classMethodMap classMethodMap ;
  @predefinedTypeAST t := self ; # Bug in GALGAS 1
  [t getConstructorMap !?ioSemanticContext->mTypeMap ?constructorMap] ;
  [t getReaderMap !?ioSemanticContext->mTypeMap ?readerMap] ;
  [t getModifierMap !?ioSemanticContext->mTypeMap ?modifierMap] ;
  [t getInstanceMethodMap !?ioSemanticContext->mTypeMap ?instanceMethodMap] ;
  [t getClassMethodMap !?ioSemanticContext->mTypeMap ?classMethodMap] ;
  @unifiedTypeMapProxyList addAssignArgumentList ;
  [t getAddAssignArgumentList !?ioSemanticContext->mTypeMap ?addAssignArgumentList] ;
  @enumerationDescriptorList enumerationList ;
  [t getEnumerationList !?ioSemanticContext->mTypeMap ?enumerationList] ;
  @unifiedTypeMapProxy selfTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !mPredefinedTypeName ?selfTypeProxy] ;
  [!?ioSemanticContext->mTypeMap insertKey
    ![@lstring new !mPredefinedTypeName !here]
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum predefinedType]
    ![@typedAttributeList listWithValue !selfTypeProxy ![@lstring new !mPredefinedTypeName !here]]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    !enumerationList
    ![t getSupportedOperatorFlags]
    !addAssignArgumentList
    ![t getNativeAttributeList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- current map type index
  @unifiedTypeMapProxy currentMapTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mMapTypeName string] ?currentMapTypeIndex] ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @enumerationDescriptorList enumerationDescriptor [listWithValue !lstringTypeIndex !"lkey"] ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mMapTypeName string] !false ;
  enterConstructorWithArgument !?constructorMap !?ioSemanticContext->mTypeMap !"mapWithMapToOverride" ![mMapTypeName string] ![mMapTypeName string] !false ;
#--- Readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeyList" !"lstringlist" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"hasKey" !"string" !"bool" !false ;
  enterInheritedReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"locationForKey" !"string" !"location" !true ;
  enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"overriddenMap" ![mMapTypeName string] !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyCount" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"unsolvedProxyKeyList" !"stringlist" !false ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @formalParameterSignature insertMethodFormalArgumentList [emptyList] ;
  insertMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  @formalParameterSignature removeMethodFormalArgumentList [emptyList] ;
  removeMethodFormalArgumentList += !lstringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    typedAttributeList += !attributeTypeIndex !mAttributeName ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    insertMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    removeMethodFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Handle insert modifiers
  foreach mInsertMethodList do
    if [modifierMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' insert method is already declared" ;
    else
      [!?modifierMap insertOrReplace
        !mMethodName
        !insertMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
      ] ;
    end if ;
  end foreach ;
#--- Handle remove modifiers
  foreach mRemoveMethodList do
    if [modifierMap hasKey ![mMethodName string]] then
      error mMethodName:"the '" . mMethodName . "' method is already declared as an insert modifier or a remove modifier" ;
    else
      [!?modifierMap insertOrReplace
        !mMethodName
        !removeMethodFormalArgumentList
        !true
        ![@methodQualifier isBasic]
      ] ;
    end if ;
  end foreach ;
#--- Handle search methods
  foreach mSearchMethodList do
    [!?instanceMethodMap insertKey
      !mMethodName
      !false # is not a category
      !removeMethodFormalArgumentList
      ![mMethodName location]
      !true
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#--- Enter "attributeForKey" readers
  foreach mAttributeList do
    const @lstring accessorName [new ![mAttributeName string] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    [!?readerMap insertOrReplace
      !accessorName
      !false # Is not a category
      ![@unifiedTypeMapProxyList listWithValue !stringTypeIndex]
      !true
      !attributeTypeIndex
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#---------- Handle "insertOrReplace" modifier
  if [mInsertOrReplaceDeclarationListAST length] >= 1 then
    @location insertOrReplaceLocation ;
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceLocation] ;
    [!?modifierMap insertOrReplace
      ![@lstring new !"insertOrReplace" !insertOrReplaceLocation]
      !insertMethodFormalArgumentList
      !false
      ![@methodQualifier isBasic]
    ] ;
  end if ;
#---------- Enter "set...Attribute...forKey" modifiers
  foreach mAttributeList do
    const @lstring accessorName [new !"set" . [mAttributeName stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]] ;
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    @formalParameterSignature accessorFormalArgumentList [emptyList] ;
    accessorFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    accessorFormalArgumentList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      !accessorName
      !accessorFormalArgumentList
      !true
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#--- Enter 'with' accessors
  @withAccessorMap withAccessorMap [emptyMap] ;
  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !stringTypeIndex] ;
  foreach mSearchMethodList do
    [!?withAccessorMap insertKey
      !mMethodName
      !lstringTypeIndex
    ] ;
  end foreach ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !doNotGenererateObjectCompare [] | generateCppConstructorWithNativeAttributeList []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    !mSearchMethodList
    ![@mapSearchMethodListAST emptyList]
    !withAccessorMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@mapProxyDeclarationAST enterType\n" ;
#--- Check associated map is really a map
  @typedAttributeList mapTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  @mapSearchMethodListAST searchMethodList ;
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedMapTypeName
    ?2*
    ?typeKindEnum
    ?2*
    ?mapTypedAttributeList
    ?12*
    ?searchMethodList
    ?2*
  ] ;
  if typeKindEnum != [@typeKindEnum mapType] then
    error mAssociatedMapTypeName : "the @" . mAssociatedMapTypeName . " should be a map type" ;
    mapTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapProxy associatedMapTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAssociatedMapTypeName string] ?associatedMapTypeIndex] ;
#--- string type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- lstring type index
  @unifiedTypeMapProxy lstringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"lstring" ?lstringTypeIndex] ;
#--- Handle map type name
  @unifiedTypeMapProxy mapProxyTypeProxy ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mMapProxyTypeName string] ?mapProxyTypeProxy] ;
#--- class method
  @formalParameterSignature argList [emptyList] ;
  argList += !associatedMapTypeIndex ![@formalArgumentPassingModeAST argumentInOut] ;
  argList += !stringTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  argList += !mapProxyTypeProxy ![@formalArgumentPassingModeAST argumentOut] ;
  [!?classMethodMap insertKey
    ![@lstring new !"makeRegularProxy" !here]
    !argList
    !false
  ] ;
#--- null constructor
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"null" ![mMapProxyTypeName string] !false ;
#--- Search methods of associated map as constructors
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  constructorAttributeTypeList += !associatedMapTypeIndex ;
  constructorAttributeTypeList += !lstringTypeIndex ;
  foreach searchMethodList do
    [!?constructorMap insertKey
      !mMethodName
      !constructorAttributeTypeList
      !true
      !mapProxyTypeProxy
    ] ;
  end foreach ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isSolved" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isNull" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"isRegular" !"bool" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"lkey" !"lstring" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"key" !"string" !true ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"identifierRepresentation" !"string" !true ;
#--- Enter associated map attribute names as readers
  const @readerMap inheritedReaderMap := readerMap ;
  foreach mapTypedAttributeList do
    if [inheritedReaderMap hasKey ![mAttributeName string]] then
      @string s := "" ;
      foreach [inheritedReaderMap allKeys]
        do s .= "'" . key . "'" ;
        between s .= ", " ;
      end foreach ;
      error mAttributeName : "the map has a associated map proxy, which has predefined readers: " . s
       . "; you cannot use theses names for naming an attribute of this map" ;
    else
      [!?readerMap insertKey
        !mAttributeName
        !false # Is not a category
        ![@unifiedTypeMapProxyList emptyList]
        !true
        !mAttributeTypeIndex
        ![@methodQualifier isBasic]
      ] ;
    end if ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mMapProxyTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum mapProxyType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !mapTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    !classMethodMap
    ![@enumerationDescriptorList emptyList]
    !doNotGenererateObjectCompare [] | generateCppConstructorWithNativeAttributeList []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    !searchMethodList
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@enumDeclarationAST enterType\n" ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  @classMethodMap classMethodMap [emptyMap] ;
#--- currentType type index
  @unifiedTypeMapProxy currentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mEnumTypeName string] ?currentTypeIndex] ;
#--- Constructors
  @stringset constantSet [emptySet] ;
  foreach mConstantList do
    constantSet += ![mValue string] ;
    enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap ![mValue string] ![mEnumTypeName string] !false ;
  end foreach ;
#--- readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap  ;
  foreach mEnumMessageList do
    enterBaseReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap ![mEnumMessageName string] !"string" !false ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mEnumTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum enumType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    !generateDescriptionReaderUtilityMethod [] | isComparable []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    !constantSet
    !mConstantList
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@filewrapperDeclarationAST enterType\n" ;
  @filewrapperTemplateMap filewrapperTemplateMap [emptyMap] ;
  foreach mFilewrapperTemplateList do
    @unifiedTypeMapProxyList templateSignature [emptyList] ;
    foreach mFilewrapperTemplateFormalInputParameters do
      @unifiedTypeMapProxy parameterTypeIndex ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
      templateSignature += !parameterTypeIndex ;
    end foreach ;
    [!?filewrapperTemplateMap insertKey
      !mFilewrapperTemplateName
      !templateSignature
      !mFilewrapperTemplatePath
    ] ;
  end foreach ;
  [!?ioSemanticContext->mFilewrapperMap insertKey
    !mFilewrapperName
    !mFilewrapperPath
    !mFilewrapperExtensionList
    !filewrapperTemplateMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@listDeclarationAST enterType\n" ;
#--- Handle attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    typedAttributeList += !attributeTypeIndex !mAttributeName ;
  end foreach ;
#--- uint type index
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#--- Element type index
  @unifiedTypeMapProxy listTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mListTypeName string] ?listTypeIndex] ;
#--- Attribute description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierOutputFormalArgumentList [emptyList] ;
  @formalParameterSignature modifierInputFormalArgumentList [emptyList] ;
  foreach typedAttributeList do
    enumerationDescriptor += !mAttributeTypeIndex ![mAttributeName string] ;
    constructorAttributeTypeList += !mAttributeTypeIndex ;
    modifierOutputFormalArgumentList += !mAttributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
    modifierInputFormalArgumentList += !mAttributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyList" ![mListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"listWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"subListFromIndex" !"uint" ![mListTypeName string] !true ;
  enterBaseReaderWith2Arguments !?readerMap !?ioSemanticContext->mTypeMap !"subListWithRange" !"uint" !"uint" ![mListTypeName string] !true ;
  foreach typedAttributeList do
    [!?readerMap insertOrReplace
      ![@lstring new ![mAttributeName string] . "AtIndex" ![mAttributeName location]]
      !false # Is not a category
      ![@unifiedTypeMapProxyList listWithValue !uintType]
      !true
      !mAttributeTypeIndex
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popFirst" !here]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popLast" !here]
    !modifierOutputFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"prependValue" !here]
    !modifierInputFormalArgumentList
    !false
    ![@methodQualifier isBasic]
  ] ;
  foreach typedAttributeList do
    @formalParameterSignature setterFormalArgumentList [emptyList] ;
    setterFormalArgumentList += !mAttributeTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
    setterFormalArgumentList += !uintType ![@formalArgumentPassingModeAST argumentConstantIn] ;
    [!?modifierMap insertOrReplace
      ![@lstring new !"set" . [mAttributeName stringByCapitalizingFirstCharacter] . "AtIndex" ![mAttributeName location]]
      !setterFormalArgumentList
      !true
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"first" !here]
    !false # is not a category
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"last" !here]
    !false # is not a category
    !modifierOutputFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator [] | generateCppConstructorWithNativeAttributeList []
    !constructorAttributeTypeList
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@sortedListDeclarationAST enterType\n" ;
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#--- Element type index
  @unifiedTypeMapProxy listTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy!?ioSemanticContext->mTypeMap ![mSortedListTypeName string] ?listTypeIndex] ;
#--- Enumeration description
  @enumerationDescriptorList enumerationDescriptor [emptyList] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @formalParameterSignature modifierFormalArgumentList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    typedAttributeList += !attributeTypeIndex !mAttributeName ;
    enumerationDescriptor += !attributeTypeIndex ![mAttributeName string] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    modifierFormalArgumentList += !attributeTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  end foreach ;
#--- Constructors
  @constructorMap constructorMap [emptyMap] ;
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptySortedList" ![mSortedListTypeName string] !false ;
  [!?constructorMap insertKey
    ![@lstring new !"sortedListWithValue" !here]
    !constructorAttributeTypeList
    !false
    !listTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap [emptyMap] ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"length" !"uint" !false ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popGreatest" !here]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?modifierMap insertOrReplace
    ![@lstring new !"popSmallest" !here]
    !modifierFormalArgumentList
    !true
    ![@methodQualifier isBasic]
  ] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"greatest" !here]
    !false # is not a category
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
  [!?instanceMethodMap insertKey
    ![@lstring new !"smallest" !here]
    !false # is not a category
    !modifierFormalArgumentList
    !here
    !true
    ![@methodQualifier isBasic]
  ] ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mSortedListTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum sortedListType]
    !typedAttributeList
    ![@attributeMap emptyMap]
    ![@typedAttributeList emptyList]
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumerationDescriptor
    !binaryConcatOperator [] | doNotGenererateObjectCompare [] | dotAssignOperator []
      | generateCppConstructorWithNativeAttributeList []
    !constructorAttributeTypeList
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@structDeclarationAST enterType\n" ;
#--- Struct type index
  @unifiedTypeMapProxy structTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mStructTypeName string] ?structTypeIndex] ;
#--- Constructors and attribute map
  @attributeMap attributeMap [emptyMap] ;
  @constructorMap constructorMap [emptyMap] ;
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    typedAttributeList += !attributeTypeIndex !mAttributeName ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
  end foreach ;
  [!?constructorMap insertKey
    ![@lstring new !"new" !here]
    !constructorAttributeTypeList
    !false
    !structTypeIndex
  ] ;
#--- Readers
  @readerMap readerMap ;
  commonReaderMapForAllTypes !?ioSemanticContext->mTypeMap ?readerMap ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    enterBaseFinalReaderWithoutArgument
      !?readerMap
      !?ioSemanticContext->mTypeMap 
      ![mAttributeName string]
      ![mAttributeTypeName string]
      !false
    ;
  end foreach ;
#--- Modifiers
  @modifierMap modifierMap [emptyMap] ;
#--- Instance methods
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mStructTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum structType]
    ![@typedAttributeList emptyList]
    !attributeMap
    !typedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    !generateCppConstructorWithCurrentAttributeList []
      | generateDescriptionReaderUtilityMethod []
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !typedAttributeList
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterType
  ??@multiMethodMapForBuildingContext inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@classDeclarationAST enterType\n" ;
  @unifiedTypeMapProxy uintType ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"uint" ?uintType] ;
#---
  @readerMap readerMap ;
  @modifierMap modifierMap ;
  @instanceMethodMap inheritedInstanceMethodMap ;
  @typedAttributeList inheritedTypedAttributeList ;
  @attributeMap attributeMap [emptyMap] ;
#--- Handle super class
  @unifiedTypeMapProxy superClassIndex ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@unifiedTypeMapProxy null] ;
    readerMap := [@readerMap emptyMap] ;
    modifierMap := [@modifierMap emptyMap] ;
    inheritedInstanceMethodMap := [@instanceMethodMap emptyMap] ;
    inheritedTypedAttributeList := [@typedAttributeList emptyList] ;
    attributeMap := [@attributeMap emptyMap] ;
  else
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mSuperClassName string] ?superClassIndex] ;
    @typeKindEnum typeKindEnum ;
    @readerMap inheritedReaderMap ;
    @modifierMap inheritedModifierMap ;
    [ioSemanticContext->mTypeMap searchKey
      !mSuperClassName
      ?2*
      ?typeKindEnum
      ?inheritedTypedAttributeList
      ?attributeMap
      ?2*
      ?inheritedReaderMap
      ?inheritedModifierMap
      ?inheritedInstanceMethodMap
      ?11*
    ] ;
  #---
    if typeKindEnum != [@typeKindEnum classType] then
      error mSuperClassName : "the @" . mSuperClassName . " should be a class type" ;
    end if ;
  #--- Mark all modifiers as inherited
    modifierMap := [@modifierMap emptyMap] ;
#    foreach inheritedModifierMap do
#      [!?modifierMap insertKey
#        !lkey
#        !mParameterList
#        !mHasCompilerArgument
#        ![@methodQualifier isInherited]
#      ] ; 
#    end foreach ;
  #--- Mark all readers as inherited
    readerMap := [@readerMap emptyMap] ;
    foreach inheritedReaderMap do
      [!?readerMap insertKey
        !lkey
        !mIsCategory
        !mArgumentTypeList
        !mHasCompilerArgument
        !mReturnedType
        ![@methodQualifier isInherited]
      ] ; 
    end foreach ;
  end if ;
#--- Build attribute Map and constructor argument list
  @unifiedTypeMapProxyList constructorAttributeTypeList [emptyList] ;
  foreach inheritedTypedAttributeList do
    constructorAttributeTypeList += !mAttributeTypeIndex ;
  end foreach ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    constructorAttributeTypeList += !attributeTypeIndex ;
    [!?attributeMap insertKey !mAttributeName !attributeTypeIndex] ;
  end foreach ;
#--- Current class Index
  @unifiedTypeMapProxy classIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mClassTypeName string] ?classIndex] ;
#--- Constructor
  @constructorMap constructorMap [emptyMap] ;
  if not mIsAbstract then
    [!?constructorMap insertKey
      ![@lstring new !"new" !here]
      !constructorAttributeTypeList
      !false
      !classIndex
    ] ;
  end if ;
#------------------------ Method map
  @instanceMethodMap instanceMethodMap [emptyMap] ;
  foreach inheritedInstanceMethodMap do
    [!?instanceMethodMap insertKey
      !lkey
      !false # is not a category
      !mParameterList
      !mDeclarationLocation
      !mHasCompilerArgument
      ![@methodQualifier isInherited]
    ] ;
  end foreach ;
#------------------------ Abstract methods
  foreach mAbstractMethodList do
    @formalParameterSignature formalArgumentList [emptyList] ;
    foreach mSignature do
      @unifiedTypeMapProxy typeIndex ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
      formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
    end foreach ;
    with !?instanceMethodMap hasKey ![mMethodName string] do
      mQualifier := [@methodQualifier isOverridingAbstract] ;
    else
      [!?instanceMethodMap insertKey
        !mMethodName
        !false # is not a category
        !formalArgumentList
        ![mMethodName location]
        !true
        ![@methodQualifier isAbstract]
      ] ;
      end with ;
  end foreach ;
#------------------------ Concrete methods
  foreach mMethodList do
    @formalParameterSignature formalArgumentList [emptyList] ;
    foreach mSignature do
      @unifiedTypeMapProxy typeIndex ;
      [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
      formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
    end foreach ;
    with !?instanceMethodMap hasKey ![mMethodName string] do
      mQualifier := [@methodQualifier isOverriding] ;
    else
      [!?instanceMethodMap insertKey
        !mMethodName
        !false # is not a category
        !formalArgumentList
        ![mMethodName location]
        !true
        ![@methodQualifier isBasic]
      ] ;
    end with ;
  end foreach ;
#------------------------ Multi-methods
  if [inMultiMethodMapForBuildingContext hasKey ![mClassTypeName string]] then
    @multiMethodMapForType multiMethodMapForType ;
    [inMultiMethodMapForBuildingContext searchKey !mClassTypeName ?multiMethodMapForType] ;
    foreach multiMethodMapForType do
      @formalParameterSignature formalArgumentList [emptyList] ;
      foreach mFormalParameterList do
        @unifiedTypeMapProxy typeIndex ;
        [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?typeIndex] ;
        formalArgumentList += !typeIndex !mFormalArgumentPassingMode ;
      end foreach ;
      [!?instanceMethodMap insertKey
        !lkey
        !true # is a category
        !formalArgumentList
        ![lkey location]
        !true
        ![@methodQualifier isBasic]
      ] ;
    end foreach ;
  end if ;
#--- Typed attribute list
  @typedAttributeList currentClassTypedAttributeList [emptyList] ;
  @typedAttributeList allTypedAttributeList := inheritedTypedAttributeList ;
  foreach mAttributeList do
    @unifiedTypeMapProxy attributeTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAttributeTypeName string] ?attributeTypeIndex] ;
    currentClassTypedAttributeList += !attributeTypeIndex !mAttributeName ;
    allTypedAttributeList += !attributeTypeIndex !mAttributeName ;
    [!?readerMap insertKey
      !mAttributeName
      !false # Is not a category
      ![@unifiedTypeMapProxyList emptyList] # No argument
      !false # No Compiler argument
      !attributeTypeIndex # Returned type
      ![@methodQualifier isBasic]
    ] ;
  end foreach ;
  #--- set...attribute modifier
  if not mIsAbstract then
    foreach allTypedAttributeList do
      [!?modifierMap insertKey
        ![@lstring new !"set". [mAttributeName stringByCapitalizingFirstCharacter] !here]
        ![@formalParameterSignature listWithValue !mAttributeTypeIndex ![@formalArgumentPassingModeAST argumentIn]]
        !false # No compiler argument
        ![@methodQualifier isBasic]
      ] ; 
    end foreach ;
  end if ;
#--- Enter in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mClassTypeName
    !not mIsAbstract # Concrete Type
    !superClassIndex
    ![@typeKindEnum classType]
    !allTypedAttributeList
    !attributeMap
    !currentClassTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    ![@enumerationDescriptorList emptyList]
    !generateCppConstructorWithAllAttributeList [] | if mIsAbstract then 0 else generateDescriptionReaderUtilityMethod [] end
    ![@unifiedTypeMapProxyList emptyList]
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    !currentClassTypedAttributeList
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterType # Handles also routine declaration
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @formalParameterSignature routineSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
    routineSignature += !parameterTypeIndex !mFormalArgumentPassingMode ;
  end foreach ;
#--- Enter routine in routine map
  [!?ioSemanticContext->mRoutineMap insertKey !mRoutineName !routineSignature] ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterType # Handles also function declaration
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Build signature
  @unifiedTypeMapProxyList functionSignature [emptyList] ;
  foreach mFormalArgumentList do
    @unifiedTypeMapProxy parameterTypeIndex ;
    [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mFormalArgumentTypeName string] ?parameterTypeIndex] ;
    functionSignature += !parameterTypeIndex ;
  end foreach ;
#--- Result type
  @unifiedTypeMapProxy resultTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName !functionSignature !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#--- Result type
  @unifiedTypeMapProxy resultTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mResultTypeName string] ?resultTypeIndex] ;
#--- Enter function in routine map
  [!?ioSemanticContext->mFunctionMap insertKey !mFunctionName ![@unifiedTypeMapProxyList emptyList] !resultTypeIndex] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterType
  ??@multiMethodMapForBuildingContext unused inMultiMethodMapForBuildingContext
  ?!@semanticContext ioSemanticContext
:
#  message "@listmapDeclarationAST enterType: @" . [mListmapTypeName string] . "\n" ;
#--- Check associated map is really a list
  @typedAttributeList listTypedAttributeList ;
  @typeKindEnum typeKindEnum ;
  [ioSemanticContext->mTypeMap searchKey
    !mAssociatedListTypeName
    ?2*
    ?typeKindEnum
    ?listTypedAttributeList
    ?17*
  ] ;
  if typeKindEnum != [@typeKindEnum listType] then
    error mAssociatedListTypeName : "the '@" . mAssociatedListTypeName . "' type should be a list type" ;
    listTypedAttributeList := [@typedAttributeList emptyList] ;
  end if ;
#---
  @constructorMap constructorMap [emptyMap] ;
  @readerMap readerMap [emptyMap] ;
  @modifierMap modifierMap [emptyMap] ;
  @instanceMethodMap instanceMethodMap [emptyMap] ;
#--- Associated map type index
  @unifiedTypeMapProxy associatedListTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mAssociatedListTypeName string] ?associatedListTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapProxy currentTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap ![mListmapTypeName string] ?currentTypeIndex] ;
#--- currentType type index
  @unifiedTypeMapProxy stringTypeIndex ;
  [@unifiedTypeMapProxy makeRegularProxy !?ioSemanticContext->mTypeMap !"string" ?stringTypeIndex] ;
#--- readers
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"count" !"uint" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"allKeys" !"stringset" !false ;
  enterInheritedReaderWithoutArgument !?readerMap !?ioSemanticContext->mTypeMap !"keyList" !"stringlist" !false ;
  enterBaseReaderWithArgument !?readerMap !?ioSemanticContext->mTypeMap !"listForKey" !"string" ![mAssociatedListTypeName string] !false ;
#--- Constructors
  enterConstructorWithoutArgument !?constructorMap !?ioSemanticContext->mTypeMap !"emptyMap" ![mListmapTypeName string] !false ;
#--- Enumerator description
  @enumerationDescriptorList enumeratorDescriptor [emptyList] ;
  enumeratorDescriptor += !stringTypeIndex !"key" ;
  enumeratorDescriptor += !associatedListTypeIndex !"mList" ;
#--- Add assign operator description
  @unifiedTypeMapProxyList addAssignOperatorDescription [emptyList] ;
  addAssignOperatorDescription += !stringTypeIndex ;
  foreach listTypedAttributeList do
    addAssignOperatorDescription += !mAttributeTypeIndex ;
  end foreach ;
#--- Enter type in type map
  [!?ioSemanticContext->mTypeMap insertKey
    !mListmapTypeName
    !true # Concrete Type
    ![@unifiedTypeMapProxy null]
    ![@typeKindEnum listMapType]
    ![@typedAttributeList emptyList]
    ![@attributeMap emptyMap]
    !listTypedAttributeList
    !constructorMap
    !readerMap
    !modifierMap
    !instanceMethodMap
    ![@classMethodMap emptyMap]
    !enumeratorDescriptor
    !doNotGenererateObjectCompare [] | generateCppConstructorWithNativeAttributeList [] | binaryConcatOperator [] | dotAssignOperator []
    !addAssignOperatorDescription
    ![@nativeAttributeList emptyList]
    ![@stringset emptySet]
    ![@lstringlist emptyList]
    ![@typedAttributeList emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@mapSearchMethodListAST emptyList]
    ![@withAccessorMap emptyMap]
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    O R D E R E D     S E M A N T I C    L I S T              *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @partiallyOrderedSemanticDeclarationListAST {
  @string mDependanceString ;
  @string mTypeString ;
  @semanticDeclarationAST mSemanticDeclaration ;
}{
  mDependanceString <
}

#---------------------------------------------------------------------------*

method @semanticDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST unused ioPartiallyOrderedDeclarationList
:
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  @predefinedTypeAST t := self ; # Bug in GALGAS 1
  ioPartiallyOrderedDeclarationList += !"" !mPredefinedTypeName !self ;
end method ;

#---------------------------------------------------------------------------*

override method @objectPredefinedTypeAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  @objectPredefinedTypeAST t := self ; # Bug in GALGAS 1
  ioPartiallyOrderedDeclarationList += !"" !"object" !self ;
end method ;

#---------------------------------------------------------------------------*

override method @stringsetPredefinedTypeAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !mPredefinedTypeName !self ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  const @string actualSuperTypeName := [mSuperClassName string] ;
  ioPartiallyOrderedDeclarationList += !actualSuperTypeName ![mClassTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mListTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mStructTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @enumDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mEnumTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mSortedListTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mAssociatedListTypeName string] ![mListmapTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" ![mMapTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += ![mAssociatedMapTypeName string] ![mMapProxyTypeName string] !self ;
end method ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !"" !self ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST enterOrderedDeclaration
  ?!@partiallyOrderedSemanticDeclarationListAST ioPartiallyOrderedDeclarationList
:
  ioPartiallyOrderedDeclarationList += !"" !"" !self ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    B U I L D    S E M A N T I C    C O N T E X T                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine buildSemanticContext
  ??@semanticDeclarationListAST inSemanticDeclarationList
  ??@location inEndOfSourceFile
  !@semanticContext outSemanticContext
:
#--- Collect all types, for checking there is no undefined type
  @collectedTypeMap collectedTypeMap [emptyMap] ;
  @multiMethodMapForBuildingContext multiMethodMapForBuildingContext [emptyMap] ;
  foreach inSemanticDeclarationList do
    [mSemanticDeclaration collectTypes
      !?collectedTypeMap
      !?multiMethodMapForBuildingContext
    ] ;
  end foreach ;
#--- Check there is no undefined type
  @stringlist undefinedClasses := [collectedTypeMap unsolvedProxyKeyList] ;
  if [undefinedClasses length] == 1 then
    @string errorMessage := "there is 1 undefined type:" ;
    foreach undefinedClasses do
      errorMessage .= "\n-  @" . mValue ;
    end foreach ;
    error inEndOfSourceFile : errorMessage : outSemanticContext ;
  elsif [undefinedClasses length] > 1 then
    @string errorMessage := "there are " . [[undefinedClasses length] string] . " undefined types:" ;
    foreach undefinedClasses do
      errorMessage .= "\n-  @" . mValue ;
    end foreach ;
    error inEndOfSourceFile : errorMessage : outSemanticContext ;
  else # No undefined types
  #------ Build ordered types list, so that
  #  - a class appears after its super class
  #  - a map index appears after its associated map
  #  - a list map appears after its associated list
    @partiallyOrderedSemanticDeclarationListAST partiallyOrderedSemanticDeclarationListAST [emptySortedList] ;
    foreach inSemanticDeclarationList do
      [mSemanticDeclaration enterOrderedDeclaration !?partiallyOrderedSemanticDeclarationListAST] ;  
    end foreach ;
  #---
    @semanticDeclarationListAST orderedSemanticDeclarationListAST [emptyList] ;
    @stringset alreadyDefinedTypes [emptySet] ;
    alreadyDefinedTypes += !"" ;
    @bool progress := true ;
    loop [partiallyOrderedSemanticDeclarationListAST length] :
    while ([partiallyOrderedSemanticDeclarationListAST length] > 0) & progress do
      progress := false ;
      const @partiallyOrderedSemanticDeclarationListAST r := partiallyOrderedSemanticDeclarationListAST ;
      partiallyOrderedSemanticDeclarationListAST := [@partiallyOrderedSemanticDeclarationListAST emptySortedList] ;
      foreach r do
        if [alreadyDefinedTypes hasKey !mDependanceString] then
          orderedSemanticDeclarationListAST += !mSemanticDeclaration ;
          alreadyDefinedTypes += !mTypeString ;
          progress := true ;
        else
          partiallyOrderedSemanticDeclarationListAST += !mDependanceString !mTypeString !mSemanticDeclaration ;
        end if ;
      end foreach ;
    end loop ;
  #--- Remain in partiallyOrderedSemanticDeclarationListAST only circular definitions
    if [partiallyOrderedSemanticDeclarationListAST length] > 0 then
      @string s := "inheritance circularities involving the " ;
      foreach partiallyOrderedSemanticDeclarationListAST
        do s.= "@" . mTypeString ;
        between s .= ", " ;
      end foreach ;
      s .= " classes; detail:" ;
      foreach partiallyOrderedSemanticDeclarationListAST
        do s.= "\n  - @" . mTypeString . " inherits from @" . mDependanceString ;
      end foreach ;
      error inEndOfSourceFile : s : outSemanticContext ;
    else
    #--- Build initial semantic context
      outSemanticContext := [@semanticContext new
        ![@unifiedTypeMap emptyMap]
        ![@routineMap emptyMap]
        ![@functionMap emptyMap]
        ![@filewrapperMap emptyMap]
        ![@grammarMap emptyMap]
        ![@optionComponentMapForSemanticAnalysis emptyMap]
      ] ;
    #--- Loop throught all declarations
      foreach orderedSemanticDeclarationListAST do
        [mSemanticDeclaration enterType !multiMethodMapForBuildingContext !?outSemanticContext] ;
      end foreach ;
    end if ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
