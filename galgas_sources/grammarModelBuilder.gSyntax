#---------------------------------------------------------------------------*
#                                                                           *
#  'grammar' component parser, as model builder                             *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax grammarModelBuilder :

import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import semantics commonSemantics in "commonSemantics.gSemantics" ;
import metamodel grammarMetamodel in "grammarMetamodel.gMetamodel" ;

#---------------------------------------------------------------------------*

nonterminal <grammar_component_start_symbol> -> @grammarComponentRoot ;

nonterminal <grammar_start_symbol_label> ??@lstring inLabelName -> @grammarLabel ;

nonterminal <label_formal_parameter> !@lstring outArgumentName -> @startSymbolLabelFormalParameter ;

#---------------------------------------------------------------------------*
#                                                                           *
#   G R A M M A R    C O M P O N E N T                                      *
#                                                                           *
#---------------------------------------------------------------------------*

rule <grammar_component_start_symbol> -> @grammarComponentRoot :
  $grammar$ ;
  $identifier$ ? mGrammarName ;
  $literal_string$ ? mGrammarClass ;
  $:$ ;
#--- Old style imports
#--- Loop on import declarations
  repeat
  while
    $import$ ;
    select
      $semantics$ ;
    or
      $lexique$ ;
    or
      $metamodel$ ;
    or
      $grammar$ ;
    or
      $syntax$ ;
    or
      $option$ ;
    end select ;
    $identifier$ ?* ;
    $in$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
#--- Root symbol
  $root$ ;
  $non_terminal_symbol$ ? mStartSymbol ;
  @lstring labelName [new !"" !here] ;
  repeat
    <grammar_start_symbol_label> !labelName +> mLabels ;
  while
    $label$ ;
    $identifier$ ? labelName ;
  end repeat ;
  $;$ ;
#---
  $end$ ;
  $grammar$ ;
  $;$ ;
end rule ;

#---------------------------------------------------------------------------*

rule <grammar_start_symbol_label> ??@lstring inLabelName -> @grammarLabel :
  mLabelName := inLabelName ;
  @stringset argumentNameSet [emptySet] ;
  repeat
  while
    @lstring argumentName ;
    <label_formal_parameter> ?argumentName +> mFormalParameters ;
    if [argumentNameSet hasKey ![argumentName string]] then
      error argumentName: "there is already an argument named '" . argumentName . "'" ;
    end if ;
    argumentNameSet += ![argumentName string] ;
  end repeat ;
  select
    mMetamodelName := [@lstring new !"" !here] ;
  or
    $->$ ;
    $identifier$ ? mMetamodelName ;
  end select ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter> !@lstring outArgumentName -> @startSymbolLabelFormalParameter :
  $?$ ;
  mFormalAgumentPassingMode := [@formalArgumentPassingMode argumentIn] ;
  $type_name$ ? mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter> !@lstring outArgumentName -> @startSymbolLabelFormalParameter :
  $??$ ;
  mFormalAgumentPassingMode := [@formalArgumentPassingMode argumentConstantIn] ;
  $type_name$ ? mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter> !@lstring outArgumentName -> @startSymbolLabelFormalParameter :
  $?!$ ;
  mFormalAgumentPassingMode := [@formalArgumentPassingMode argumentInOut] ;
  $type_name$ ? mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter> !@lstring outArgumentName -> @startSymbolLabelFormalParameter :
  $!$ ;
  mFormalAgumentPassingMode := [@formalArgumentPassingMode argumentOut] ;
  $type_name$ ? mTypeName ;
  $identifier$ ?outArgumentName ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;