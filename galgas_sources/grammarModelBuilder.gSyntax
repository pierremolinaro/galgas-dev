#---------------------------------------------------------------------------*
#                                                                           *
#  'grammar' component parser, as model builder                             *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax grammarModelBuilder :

import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import semantics commonSemantics in "commonSemantics.gSemantics" ;
import semantics grammarMetamodel in "grammarMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*

nonterminal <grammar_component_start_symbol>
  !@grammarComponentRoot outGrammarComponentRoot
;

nonterminal <grammar_start_symbol_label>
  ??@lstring inLabelName
  ?!@grammarLabelList ioLabelList
;

nonterminal <label_formal_parameter>
  !@lstring outArgumentName
  ?!@startSymbolLabelFormalParameterList ioStartSymbolLabelFormalParameterList
;

#---------------------------------------------------------------------------*
#                                                                           *
#   G R A M M A R    C O M P O N E N T                                      *
#                                                                           *
#---------------------------------------------------------------------------*

rule <grammar_component_start_symbol>
  !@grammarComponentRoot outGrammarComponentRoot
:
  $grammar$ ;
  $identifier$ ? @lstring mGrammarName ;
  $literal_string$ ? @lstring mGrammarClass ;
  $:$ ;
#--- Old style imports
#--- Loop on import declarations
  repeat
  while
    $import$ ;
    select
      $semantics$ ;
    or
      $lexique$ ;
    or
      $metamodel$ ;
    or
      $grammar$ ;
    or
      $syntax$ ;
    or
      $option$ ;
    end select ;
    $identifier$ ?* ;
    $in$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
#--- Root symbol
  $root$ ;
  $non_terminal_symbol$ ?@lstring  mStartSymbol ;
  @lstring labelName [new !"" !here] ;
  @grammarLabelList mLabelList [emptyList] ;
  repeat
    <grammar_start_symbol_label> !labelName !? mLabelList ;
  while
    $label$ ;
    $identifier$ ? labelName ;
  end repeat ;
  $;$ ;
#---
  $end$ ;
  $grammar$ ;
  $;$ ;
  outGrammarComponentRoot := [@grammarComponentRoot new
    !mGrammarName
    !mGrammarClass
    !mStartSymbol
    !mLabelList
  ] ;
end rule ;

#---------------------------------------------------------------------------*

rule <grammar_start_symbol_label>
  ??@lstring inLabelName
  ?!@grammarLabelList ioLabelList
:
  @stringset argumentNameSet [emptySet] ;
  @startSymbolLabelFormalParameterList mFormalParameterList [emptyList] ;
  repeat
  while
    @lstring argumentName ;
    <label_formal_parameter> ?argumentName !?mFormalParameterList ;
    if [argumentNameSet hasKey ![argumentName string]] then
      error argumentName: "there is already an argument named '" . argumentName . "'" ;
    end if ;
    argumentNameSet += ![argumentName string] ;
  end repeat ;
  ioLabelList += !inLabelName !mFormalParameterList ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@startSymbolLabelFormalParameterList ioStartSymbolLabelFormalParameterList
:
  $?$ ;
  $type_name$ ?@lstring mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    ![@formalArgumentPassingMode argumentIn]
    !mTypeName
    !outArgumentName
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@startSymbolLabelFormalParameterList ioStartSymbolLabelFormalParameterList
:
  $??$ ;
  $type_name$ ?@lstring mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    ![@formalArgumentPassingMode argumentConstantIn]
    !mTypeName
    !outArgumentName
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@startSymbolLabelFormalParameterList ioStartSymbolLabelFormalParameterList
:
  $?!$ ;
  $type_name$ ?@lstring mTypeName ;
  select
  or
   $unused$ ;
  end select ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    ![@formalArgumentPassingMode argumentInOut]
    !mTypeName
    !outArgumentName
  ;
end rule ;

#---------------------------------------------------------------------------*

rule <label_formal_parameter>
  !@lstring outArgumentName
  ?!@startSymbolLabelFormalParameterList ioStartSymbolLabelFormalParameterList
:
  $!$ ;
  $type_name$ ?@lstring mTypeName ;
  $identifier$ ?outArgumentName ;
  ioStartSymbolLabelFormalParameterList +=
    ![@formalArgumentPassingMode argumentOut]
    !mTypeName
    !outArgumentName
  ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;