#---------------------------------------------------------------------------*
#                                                                           *
#  Template parser                                                          *
#                                                                           *
#  Copyright (C) 2008, ..., 2008 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax galgasTemplateParser :
import lexique galgasTemplateScanner in "galgasTemplateScanner.gLexique" ;
import semantics semantics_semantics in "semantics_semantics.gSemantics" ;

nonterminal <lexique_component_start_symbol>
  ?!@typeVariablesMap ioTemplateVariableMap
  ??@M_semanticsEntitiesForUse inComponentSemanticsEntitiesMap
  !@templateInstructionList outResultingInstructionList
;

nonterminal <template_instruction>
  ?!@typeVariablesMap ioTemplateVariableMap
  ??@M_semanticsEntitiesForUse unused inComponentSemanticsEntitiesMap
  ?!@templateInstructionList ioResultingInstructionList
;

#---------------------------------------------------------------------------*

routine enterTemplateString
  ?!@templateInstructionList outResultingInstructionList
:
  @string s := [@string retrieveAndResetTemplateString]  ;
  if [s length] > 0 then
    outResultingInstructionList += ![@templateInstructionString new !s] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

rule <template_instruction>
  ?!@typeVariablesMap ioTemplateVariableMap
  ??@M_semanticsEntitiesForUse unused inComponentSemanticsEntitiesMap
  ?!@templateInstructionList ioResultingInstructionList
:
  @lstring parameterName ;
  $identifier$ ? parameterName ;
  @AC_galgasType type ;
  @typeCplusPlusName cppName ;
  [!?ioTemplateVariableMap searchForReadOnlyAccess !parameterName ?type ?cppName] ;
  @typeGalgas_string x := (cast type if >= @typeGalgas_string else error parameterName) ;
  ioResultingInstructionList += ![@templateInstructionConstant new !cppName] ;
end rule ;

#---------------------------------------------------------------------------*

rule <lexique_component_start_symbol>
  ?!@typeVariablesMap ioTemplateVariableMap
  ??@M_semanticsEntitiesForUse inComponentSemanticsEntitiesMap
  !@templateInstructionList outResultingInstructionList
:
  outResultingInstructionList := [@templateInstructionList emptyList] ;
  block ioTemplateVariableMap.verifyVariableUsing () :
    enterTemplateString !?outResultingInstructionList ;
    repeat
    while
      <template_instruction>
        !?ioTemplateVariableMap
        !inComponentSemanticsEntitiesMap
        !?outResultingInstructionList
      ;
      enterTemplateString !?outResultingInstructionList ;
    end repeat ;
  end block (!here) ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;
