#---------------------------------------------------------------------------*

semantics galgas3TargetGeneration :
  import "projectMetamodel.gSemantics" ;
  import "XcodeProjectGeneration.gSemantics" ;
  import "libpmHandling.gSemantics" ;
  import "XcodeProjectNewGeneration.gSemantics" ;

#---------------------------------------------------------------------------*

local filewrapper updaterGalgas3ApplicationFileWrapper in "../generation_templates/cocoa_application_update/updater-application" {
}{
}{
 template credits "UpdaterAppCredits.rtf" ;
 template info_plist_strings "UpdaterAppInfoPlist.strings" ;
 template main_menu_xib "UpdaterAppMainMenu.xib"
   ?@string TARGET_NAME
  ;
 template application_delegate_header "PMUpdaterAppDelegate.h.gTemplate" ;
 template application_delegate_implementation "PMUpdaterAppDelegate.m.gTemplate"
   ?@string BUNDLE_BASE_NAME
   ?@string TARGET_NAME
  ;
 template info_plist "updater-app-Info.plist.txt"
   ?@string BUNDLE_BASE_NAME
   ?@string TARGET_NAME
   ?@string CODE_SIGNING_IDENTITY
 ;
 template main "updater-app-main.m.gTemplate" ;
 template prefix "updater-app-Prefix.pch.gTemplate" ;
}

#---------------------------------------------------------------------------*

local filewrapper updaterGalgas3ToolFileWrapper in "../generation_templates/cocoa_application_update/updater-tool" {
}{
}{
 template updater_object_protocol "PMUpdaterServerProtocol.h.gTemplate" ;
 template updater_object_header "PMUpdaterServerObject.h.gTemplate" ;
 template updater_object_implementation "PMUpdaterServerObject.m.gTemplate";
 template updater_object_main "updater-tool-main.m.gTemplate"
   ?@string BUNDLE_BASE_NAME
   ?@string TARGET_NAME
 ;
 template updater_tool_info_plist "updater-tool-Info.plist.txt"
   ?@string BUNDLE_BASE_NAME
   ?@string TARGET_NAME
   ?@string CODE_SIGNING_IDENTITY
 ;
 template updater_tool_launchd_plist "updater-tool-Launchd.plist.txt"
   ?@string BUNDLE_BASE_NAME
   ?@string TARGET_NAME
 ;
}

#---------------------------------------------------------------------------*

local filewrapper applicationGalgas3UpdateFileWrapper in "../generation_templates/cocoa_application_update/application" {
}{
}{
 template application_update_header "PMApplicationUpdate.h.gTemplate" ;
 template application_update_implementation "PMApplicationUpdate.m.gTemplate"
   ?@string PROJECT_NAME
   ?@string REPOSITORY_URL
   ?@string BUNDLE_BASE_NAME
  ;
 template application_update_nib "PMApplicationUpdate.xib.gTemplate"
   ?@string PROJECT_NAME
 ;
 template download_data_header "PMDownloadData.h.gTemplate" ;
 template download_data_implementation "PMDownloadData.m.gTemplate" ;
 template download_file_header "PMDownloadFile.h.gTemplate" ;
 template download_file_implementation "PMDownloadFile.m.gTemplate" ;
 template compatibility_header "PMSnowLeopardLionCompatibility.h.gTemplate" ;
}

#---------------------------------------------------------------------------*

local filewrapper targetGalgas3GenerationFileWrapper in "../generation_templates/target_generation" {
 "bat", "rtf", "py"
}{
}{
  template makefile_macosx_makefile "makefile-macosx/makefile.gTemplate" ?@string PROJECT_NAME ;
  template clean_macosx_makefile "makefile-macosx/clean.py.gTemplate" ?@string PROJECT_NAME ;

  template makefile_unix_makefile "makefile-unix/makefile.gTemplate" ?@string PROJECT_NAME ;
  template clean_unix_makefile "makefile-unix/clean.py.gTemplate" ?@string PROJECT_NAME ;

  template makefile_x86_linux32_on_macosx_makefile "makefile-x86linux32-on-macosx/makefile.gTemplate" ?@string PROJECT_NAME ;
  template clean_x86_linux32_on_macosx_makefile "makefile-x86linux32-on-macosx/clean.py.gTemplate" ?@string PROJECT_NAME ;

  template makefile_x86_linux64_on_macosx_makefile "makefile-x86linux64-on-macosx/makefile.gTemplate" ?@string PROJECT_NAME ;
  template clean_x86_linux64_on_macosx_makefile "makefile-x86linux64-on-macosx/clean.py.gTemplate" ?@string PROJECT_NAME ;

  template makefile_win32_on_macosx_makefile "makefile-win32-on-macosx/makefile.gTemplate" ?@string PROJECT_NAME ;
  template clean_win32_on_macosx_makefile "makefile-win32-on-macosx/clean.py.gTemplate" ?@string PROJECT_NAME ;

  template makefile_msys32_on_windows_makefile "makefile-msys32-on-windows/makefile.gTemplate" ?@string PROJECT_NAME ;

  template makefile_info_plist "project_xcode/Info.plist.txt"
    ?@string PROJECT_NAME
    ?@string APPLICATION_BUNDLE_BASE
    ?@string VERSION_STRING
    ?@stringset HANDLED_EXTENSION_SET
  ;

  template makefile_build_xcode "project_xcode/build.command" ;

  template makefile_info_plist_strings "project_xcode/English.lproj/InfoPlist.strings" ?@string PROJECT_NAME ;

  template makefile_file_list "makefile-file-list-galgas3.gTemplate"
    ?@stringset HAND_CODED_SOURCE_DIR_SET
    ?@stringlist HAND_CODED_SOURCE_FILE_LIST
    ?@stringlist MAKEFILE_FILE_LIST
    ?@stringlist TOOL_LINK_LIST
    ?@string LIBPM_DIRECTORY_PATH
    ?@string MULTI_THREADING_ENABLED
  ;

  template project_header "project.h.gTemplate"
    ?@string VERSION_STRING
  ;
}

#---------------------------------------------------------------------------*

local routine generateGalgas3MsysOnWin32Target
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-msys32-on-windows" ;
  [dir makeDirectory] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile_msys_on_win32/build.bat"] writeToFileWhenDifferentContents !dir ."/build.bat" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile_msys_on_win32/clean.bat"] writeToFileWhenDifferentContents !dir ."/clean.bat" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile_msys_on_win32/install.bat"] writeToFileWhenDifferentContents !dir ."/install.bat" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.makefile_msys32_on_windows_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

local routine generateGalgas3MinGWOnMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-win32-on-macosx" ;
  [dir makeDirectory] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-win32-on-macosx/build.py"] writeToExecutableFileWhenDifferentContents !dir ."/build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-win32-on-macosx/verbose-build.py"] writeToExecutableFileWhenDifferentContents !dir ."/verbose-build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.clean_win32_on_macosx_makefile !inProjectName] writeToExecutableFileWhenDifferentContents
    !dir ."/clean.py"
    ?*
  ] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.makefile_win32_on_macosx_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

local routine generateGalgas3MakefileMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-macosx" ;
  [dir makeDirectory] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-macosx/build.py"] writeToExecutableFileWhenDifferentContents !dir ."/build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-macosx/verbose-build.py"] writeToExecutableFileWhenDifferentContents !dir ."/verbose-build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.clean_macosx_makefile !inProjectName] writeToExecutableFileWhenDifferentContents !dir ."/clean.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-macosx/install.py"] writeToExecutableFileWhenDifferentContents !dir ."/install.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.makefile_macosx_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

local routine generateGalgas3MakefileUnixTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-unix" ;
  [dir makeDirectory] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-unix/build.py"] writeToExecutableFileWhenDifferentContents !dir ."/build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-unix/verbose-build.py"] writeToExecutableFileWhenDifferentContents !dir ."/verbose-build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-unix/install.py"] writeToExecutableFileWhenDifferentContents !dir ."/install.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.clean_unix_makefile !inProjectName] writeToExecutableFileWhenDifferentContents !dir ."/clean.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.makefile_unix_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

local routine generateGalgas3Linux32OnMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-x86linux32-on-macosx" ;
  [dir makeDirectory] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-x86linux32-on-macosx/build.py"] writeToExecutableFileWhenDifferentContents !dir ."/build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.clean_x86_linux32_on_macosx_makefile !inProjectName] writeToExecutableFileWhenDifferentContents !dir ."/clean.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-x86linux32-on-macosx/verbose-build.py"] writeToExecutableFileWhenDifferentContents !dir ."/verbose-build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.makefile_x86_linux32_on_macosx_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

local routine generateGalgas3Linux64OnMacOSXTarget
  ??@string inProjectDirectory
  ??@string inProjectName
:
  const @string dir := inProjectDirectory . "/makefile-x86linux64-on-macosx" ;
  [dir makeDirectory] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-x86linux64-on-macosx/build.py"] writeToExecutableFileWhenDifferentContents !dir ."/build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.clean_x86_linux64_on_macosx_makefile !inProjectName] writeToExecutableFileWhenDifferentContents !dir ."/clean.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper."makefile-x86linux64-on-macosx/verbose-build.py"] writeToExecutableFileWhenDifferentContents !dir ."/verbose-build.py" ?*] ;
  [[filewrapper targetGalgas3GenerationFileWrapper.makefile_x86_linux64_on_macosx_makefile !inProjectName] writeToFileWhenDifferentContents !dir ."/makefile" ?*] ;
end routine ;

#---------------------------------------------------------------------------*

routine updateGalgas3Targets
  ??@string inProjectSourceFilePath
  ??@string inTargetName
  ??@location unused inEndOfProjectSourceFile
  ??@string inProjectVersionString
  ??@projectQualifiedFeatureMap inProjectQualifiedFeatureMap
  ??@lstringlist inTargetFeatureList
  ??@stringlist inToolProductFileList
  ??@stringlist inAppProductFileList
  ??@stringlist inHandCodedSourceToolFileList
  ??@stringset inHandCodedSourceDirectorySet
  ??@stringset inHandledExtensionSet
  ??@stringlist inHandCodedLinkToolFileList
  ?!@stringset ioAllProductFileSet
  ??@stringlist inHandCodedSourceAppFileList
  ??@stringlist inHandCodedLinkAppFileList
:
  const projectDirectory := [inProjectSourceFilePath stringByDeletingLastPathComponent] ;
#--- Update project header
  [[filewrapper targetGalgas3GenerationFileWrapper.project_header !inProjectVersionString] writeToFileWhenDifferentContents
    ![inProjectSourceFilePath stringByDeletingLastPathComponent] . "/build/output/project_header.h"
    ?*
  ] ;
  ioAllProductFileSet += !"project_header.h" ;
#----------------------------------------------------------- Update LIBPM
  @string libpmPath ;
  with inProjectQualifiedFeatureMap hasKey !"libpmAtPath" do
    if mFeatureValue->string == "" then
      error mFeatureValue:"the libpm path should not be empty" : libpmPath ;
    else
      libpmPath := mFeatureValue->string ;
    end if ;
  else
    updateLIBPMatPath ![inProjectSourceFilePath stringByDeletingLastPathComponent] . "/build/libpm" ;
    libpmPath := "../build/libpm" ;
  end with ;
#--- 
#--- Check target names, file base name uniqueness, and build target file list
#---
  @stringset guiSourceSet_app [setWithStringList !inAppProductFileList] ;
#---
  @stringset sourceFileSet [emptySet] ;
#--- Parse features
  @stringset availableGenerationFeatures [emptySet] ;
  availableGenerationFeatures += !"makefile-macosx" ;
  availableGenerationFeatures += !"makefile-unix" ;
  availableGenerationFeatures += !"makefile-x86linux32-on-macosx" ;
  availableGenerationFeatures += !"makefile-x86linux64-on-macosx" ;
  availableGenerationFeatures += !"makefile-win32-on-macosx" ;
  availableGenerationFeatures += !"makefile-msys32-on-windows" ;
  availableGenerationFeatures += !"SnowLeopard" ;
  availableGenerationFeatures += !"Lion" ;
  availableGenerationFeatures += !"MountainLion" ;
  availableGenerationFeatures += !"Mavericks" ;
  availableGenerationFeatures += !"Yosemite" ;
  availableGenerationFeatures += !"LatestMacOS" ;
  availableGenerationFeatures += !"multi-threading" ;
  @stringset generationFeatures [emptySet] ;
  @bool multiThreadingEnabled := false ;
#--- Check xcode target architectures
  @string SDK := "" ;
  @bool usesARC := false ;
  foreach inTargetFeatureList do
    if [availableGenerationFeatures hasKey !mValue->string] then
      if [generationFeatures hasKey !mValue->string] then
        error mValue: "duplicate '" . mValue . "' feature" ;
      end if ;
    #--- Multi-threading
      if mValue->string == "multi-threading" then
        if multiThreadingEnabled then
          error mValue: "duplicate '" . mValue . "' feature" ;
        end if ;
        multiThreadingEnabled := true ;
    #--- SnowLeopard
      elsif mValue->string == "SnowLeopard" then
        if (SDK != "") then
          error mValue: "the \"SnowLeopard\", \"Lion\", \"MountainLion\", \"Mavericks\" and \"Yosemite\", \"LatestMacOS\" are exclusive" ;
        end if ;
        SDK := "macosx10.6" ;
    #--- Lion
      elsif mValue->string == "Lion" then
        if (SDK != "") then
          error mValue: "the \"SnowLeopard\", \"Lion\", \"MountainLion\", \"Mavericks\" and \"Yosemite\", \"LatestMacOS\" are exclusive" ;
        end if ;
        SDK := "macosx10.7" ;
        usesARC := true ;
    #--- Mountain Lion
      elsif mValue->string == "MountainLion" then
        if (SDK != "") then
          error mValue: "the \"SnowLeopard\", \"Lion\", \"MountainLion\", \"Mavericks\" and \"Yosemite\", \"LatestMacOS\" are exclusive" ;
        end if ;
        SDK := "macosx10.8" ;
        usesARC := true ;
    #--- Mavericks
      elsif mValue->string == "Mavericks" then
        if (SDK != "") then
          error mValue: "the \"SnowLeopard\", \"Lion\", \"MountainLion\", \"Mavericks\" and \"Yosemite\", \"LatestMacOS\" are exclusive" ;
        end if ;
        SDK := "macosx10.9" ;
        usesARC := true ;
    #--- Yosemite
      elsif mValue->string == "Yosemite" then
        if (SDK != "") then
          error mValue: "the \"SnowLeopard\", \"Lion\", \"MountainLion\", \"Mavericks\" and \"Yosemite\", \"LatestMacOS\" are exclusive" ;
        end if ;
        SDK := "macosx10.10" ;
        usesARC := true ;
    #--- Lastest MacOS
      elsif mValue->string == "LatestMacOS" then
        if (SDK != "") then
          error mValue: "the \"SnowLeopard\", \"Lion\", \"MountainLion\", \"Mavericks\" and \"Yosemite\", \"LatestMacOS\" are exclusive" ;
        end if ;
        SDK := "macosx" ;
        usesARC := true ;
      else
        generationFeatures += !mValue->string ;
      end if ;
    else
      @string s := "" ;
      foreach availableGenerationFeatures do
        s .= "\n  - '" . key . "'" ;
      end foreach ;
      error mValue: "unknown '" . mValue . "' feature; available features are:" . s ;
    end if ;
  end foreach ;
#--- Check Cocoa features
  if (SDK != "") & not [inProjectQualifiedFeatureMap hasKey !"applicationBundleBase"] then
    warning here: "For a Cocoa project, the \"applicationBundleBase\" feature should be set; for example: 'feature applicationBundleBase : \"fr.what\" ;'" ;
  end if ;
#--- Generation
  if [generationFeatures hasKey !"makefile-macosx"] then
    generateGalgas3MakefileMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-unix"] then
    generateGalgas3MakefileUnixTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-x86linux32-on-macosx"] then
    generateGalgas3Linux32OnMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-x86linux64-on-macosx"] then
    generateGalgas3Linux64OnMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-win32-on-macosx"] then
    generateGalgas3MinGWOnMacOSXTarget !projectDirectory !inTargetName ;
  end if ;
  if [generationFeatures hasKey !"makefile-msys32-on-windows"] then
    generateGalgas3MsysOnWin32Target !projectDirectory !inTargetName ;
  end if ;
#--- Update makefile file list
  const @string newFileListContents := [filewrapper targetGalgas3GenerationFileWrapper.makefile_file_list
    !inHandCodedSourceDirectorySet
    !inHandCodedSourceToolFileList
    !inToolProductFileList
    !inHandCodedLinkToolFileList
    !libpmPath
    !if multiThreadingEnabled then "1" else "0" end
  ] ;
  const fileListPath := [inProjectSourceFilePath stringByDeletingLastPathComponent] . "/build/output/file-list.mak" ;
  [newFileListContents writeToFileWhenDifferentContents !fileListPath ?*] ;
  ioAllProductFileSet += !"file-list.mak" ;
#---------------------- update Xcode project
  if SDK != "" then
    const dir := projectDirectory . "/xcode-project";
    [dir makeDirectory] ;
  #--- Info.plist
    @string applicationBundleBase ;
    with inProjectQualifiedFeatureMap hasKey !"applicationBundleBase" do
      applicationBundleBase := mFeatureValue->string ;
    else
      applicationBundleBase := "fr.irccyn" ;
    end with ;
    @string InfoPlistContents := [filewrapper targetGalgas3GenerationFileWrapper.makefile_info_plist
      !inTargetName
      !applicationBundleBase
      !inProjectVersionString
      !inHandledExtensionSet
    ] ;
    [InfoPlistContents writeToFileWhenDifferentContents !dir ."/Info.plist" ?*] ;
  #--- Build.command
    if not [dir ."/build.command" fileExists] then
      [[filewrapper targetGalgas3GenerationFileWrapper.makefile_build_xcode] writeToExecutableFile !dir ."/build.command"] ;
    end if ;

    [dir . "/English.lproj" makeDirectory] ;
    const @string InfoPlist_strings_path := dir ."/English.lproj/InfoPlist.strings" ;
    [[filewrapper targetGalgas3GenerationFileWrapper.makefile_info_plist_strings !inTargetName] writeToFileWhenDifferentContents !InfoPlist_strings_path ?*] ;
    const @string Credits_rtf_path := dir ."/English.lproj/Credits.rtf" ;
    if not [Credits_rtf_path fileExists] then
      [[filewrapper targetGalgas3GenerationFileWrapper."project_xcode/English.lproj/Credits.rtf"] writeToFile !Credits_rtf_path] ;
    end if ;
  #--- Application update files
    with inProjectQualifiedFeatureMap hasKey !"repositoryURL" do
      const @string applicationUpdateDir := projectDirectory . "/xcode-project/cocoa-application-update/application";
      [applicationUpdateDir makeDirectory] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.application_update_header ] writeToFileWhenDifferentContents !applicationUpdateDir . "/PMApplicationUpdate.h" ?*] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.application_update_implementation
         !inTargetName
         !mFeatureValue->string # Repository URL
         !applicationBundleBase
       ] writeToFileWhenDifferentContents
        !applicationUpdateDir . "/PMApplicationUpdate.m"
        ?*
      ] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.application_update_nib !inTargetName] writeToFileWhenDifferentContents !applicationUpdateDir . "/English.lproj/PMApplicationUpdate.xib" ?*] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.download_data_header] writeToFileWhenDifferentContents !applicationUpdateDir . "/PMDownloadData.h" ?*] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.download_data_implementation] writeToFileWhenDifferentContents !applicationUpdateDir . "/PMDownloadData.m" ?*] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.download_file_header] writeToFileWhenDifferentContents !applicationUpdateDir . "/PMDownloadFile.h" ?*] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.download_file_implementation] writeToFileWhenDifferentContents !applicationUpdateDir . "/PMDownloadFile.m" ?*] ;
      [[filewrapper applicationGalgas3UpdateFileWrapper.compatibility_header] writeToFileWhenDifferentContents !applicationUpdateDir . "/PMSnowLeopardLionCompatibility.h" ?*] ;
    #--- Updater tool
      @string codeSignIdentity ;
      with inProjectQualifiedFeatureMap hasKey !"codeSigning" do
        codeSignIdentity := mFeatureValue->string ;
      else
        codeSignIdentity := "" ;
      end with ;
      const @string updaterToolDir := projectDirectory . "/xcode-project/cocoa-application-update/updater-tool";
      [updaterToolDir makeDirectory] ;
      [[filewrapper updaterGalgas3ToolFileWrapper.updater_object_protocol] writeToFileWhenDifferentContents !updaterToolDir . "/PMUpdaterServerProtocol.h" ?*] ;
      [[filewrapper updaterGalgas3ToolFileWrapper.updater_object_header] writeToFileWhenDifferentContents !updaterToolDir . "/PMUpdaterServerObject.h" ?*] ;
      [[filewrapper updaterGalgas3ToolFileWrapper.updater_object_implementation] writeToFileWhenDifferentContents !updaterToolDir . "/PMUpdaterServerObject.m" ?*] ;
      [[filewrapper updaterGalgas3ToolFileWrapper.updater_tool_info_plist
         !applicationBundleBase
         !inTargetName
         !codeSignIdentity
       ] writeToFileWhenDifferentContents
        !updaterToolDir . "/updater-tool-Info.plist"
        ?*
      ] ;
      [[filewrapper updaterGalgas3ToolFileWrapper.updater_tool_launchd_plist
         !applicationBundleBase
         !inTargetName
       ] writeToFileWhenDifferentContents
        !updaterToolDir . "/updater-tool-Launchd.plist"
        ?*
      ] ;
      [[filewrapper updaterGalgas3ToolFileWrapper.updater_object_main
         !applicationBundleBase
         !inTargetName
       ] writeToFileWhenDifferentContents
        !updaterToolDir . "/updater-tool-main.m"
        ?*
      ] ;
    #--- Updater application
      const @string updaterApplicationDir := projectDirectory . "/xcode-project/cocoa-application-update/updater-application";
      [updaterApplicationDir makeDirectory] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.credits] writeToFileWhenDifferentContents !updaterApplicationDir . "/English.lproj/UpdaterAppCredits.rtf" ?*] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.info_plist_strings] writeToFileWhenDifferentContents !updaterApplicationDir . "/English.lproj/UpdaterAppInfoPlist.strings" ?*] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.main_menu_xib !inTargetName] writeToFileWhenDifferentContents !updaterApplicationDir . "/English.lproj/UpdaterAppMainMenu.xib" ?*] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.application_delegate_header] writeToFileWhenDifferentContents !updaterApplicationDir . "/PMUpdaterAppDelegate.h" ?*] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.application_delegate_implementation
         !applicationBundleBase
         !inTargetName
       ]
       writeToFileWhenDifferentContents !updaterApplicationDir . "/PMUpdaterAppDelegate.m" ?*
      ] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.info_plist
         !applicationBundleBase
         !inTargetName
         !codeSignIdentity
       ]
       writeToFileWhenDifferentContents !updaterApplicationDir . "/updater-app-Info.plist" ?*
      ] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.main] writeToFileWhenDifferentContents !updaterApplicationDir . "/updater-app-main.m" ?*] ;
      [[filewrapper updaterGalgas3ApplicationFileWrapper.prefix] writeToFileWhenDifferentContents !updaterApplicationDir . "/updater-app-Prefix.pch" ?*] ;
    end with ;
  #--- Enumerate icons files in "userResources" directory
    const @string userResourceDir := projectDirectory . "/xcode-project/userResources";
    [userResourceDir makeDirectory] ;
    @stringlist extensionList [emptyList] ;
    extensionList += !"icns" ;
    const @stringlist resourceFiles := [userResourceDir regularFilesWithExtensions !false !extensionList] ;
  #--- Build pathes
    const @string xcodeProjectPath := dir . "/" . inTargetName . ".xcodeproj" ; # Actually a directory
    const @string intermediateFilePath := [inProjectSourceFilePath stringByDeletingLastPathComponent] . "/build/output/file-list-for-xcode-project.txt" ;
    ioAllProductFileSet += !"file-list-for-xcode-project.txt" ;
  #--- Add sources for application
    const externSourceSet_app := [@stringset setWithStringList !inHandCodedSourceAppFileList] ;
  #---
    [xcodeProjectPath makeDirectory] ;
  #--- Build intermediate
    generateXcodeProject
      ![@stringset setWithStringList !inHandCodedSourceToolFileList]
      ![@stringset setWithStringList !inToolProductFileList]
      !"../build/output"
      !externSourceSet_app
      !guiSourceSet_app
      !inTargetName # XCode project base name
      !inHandCodedLinkAppFileList
      !xcodeProjectPath # Full Path of xxx.xcodeproj file
      !resourceFiles
      !intermediateFilePath
      !SDK
      !libpmPath
      !"../build/user-headers"
      !multiThreadingEnabled
      !usesARC
      !inProjectQualifiedFeatureMap
    ;
  #--- New Xcode project generation
    @XcodeProjectDescriptor xcodeProject [default] ;
    @stringlist buildFileRefListForTool := {} ;
    @stringlist generatedByGalgasFileRefList := {} ;
    for (s) in inToolProductFileList do
      if [s pathExtension] == "cpp" then
        [!?xcodeProject addCppFile !fileName:s ??fileRef:@string cppFileRef] ;
        generatedByGalgasFileRefList += !cppFileRef ;
        [!?xcodeProject addBuildFile !fileRef:cppFileRef !fileName:s ??buildRef:@string buildRef] ;
        buildFileRefListForTool += !buildRef ;
      elsif [s pathExtension] == "h" then
        [!?xcodeProject addHeaderFile !fileName:s ??fileRef:@string headerFileRef] ;
        generatedByGalgasFileRefList += !headerFileRef ;
      end if ;
    end for ;
  #--- Add "Generated by GALGAS group"
    [!?xcodeProject addGroup !groupName:"Generated by GALGAS" !groupPath:"../build/output" !childrenRefs:generatedByGalgasFileRefList ??groupRef:@string groupeRef] ;
    [!?xcodeProject addMachOTarget !fileName:inTargetName !sources:buildFileRefListForTool ??fileRef:@string machOTargetRef] ;
    [xcodeProject generateAtPath !dir . "/" . inTargetName . "_NEW.xcodeproj"] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;

