#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS cocoa component parser                                            *
#                                                                           *
#  Copyright (C) 2004 - 2006 Pierre Molinaro.                               *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax cocoa_parser :

import lexique galgas_scanner in "galgas_scanner.ggs" ;

import semantics common_semantics in "common_semantics.ggs" ;

#--------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

rule <parse_grammar_component_for_importing>
  ??@lstring inFileName
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
label parse
;

action generateCocoaComponent
  ?@lstring nomPRGMprincipal
  ?@lstring inGUIkindName
  ?@lstring inCLIToolName
  ?@L_nibAndClassList inNIBandClassList
  ?@string inBlockComment
  ?@lstring inLexiqueClassName
  ?@M_optionComponents inOptionsComponents
;

#--------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_constraintComponents ioConstraintComponentMap
:
  $gui$ ;
#--- Definition du programme
  @lstring guiComponentName ;
  $identifier$ ? guiComponentName ;
  @lstring guiKindName ;
  $literal_string$ ? guiKindName ;
  $:$ ;
#--- Command line tool
  $program$ ;
  @lstring cliToolName ;
  $literal_string$ ? cliToolName ;
  $;$ ;
#--- Grammar
  $import$ ;
  $grammar$ ;
  @lstring grammarName ;
  $identifier$ ? grammarName ;
  @M_grammarComponents grammarComponentsMap ;
  select
    grammarComponentsMap := ioGrammarComponentsMap ;
  or
    $in$ ;
    @lstring sourceFileName ;
    $literal_string$ ? sourceFileName ;
    grammarComponentsMap := [@M_grammarComponents emptyMap] ;
    <parse_grammar_component_for_importing>
     !sourceFileName
     !?grammarComponentsMap
     !?ioMetamodelComponentMap
     !?ioConstraintComponentMap
  ;
  end select ;
  @lstring lexiqueClassName ;
  @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMap ;
  @M_optionComponents optionsComponentsMap ;
  [grammarComponentsMap searchKey !grammarName ?nonterminalSymbolParametersMap
                                                 ?lexiqueClassName
                                                 ?optionsComponentsMap] ;
  @lstring altName := [@lstring new !"" !here] ;
  [nonterminalSymbolParametersMap searchKey !altName ?* ?*] ;
  $;$ ;
#--- Assignment list
  @L_nibAndClassList nibAndClassList [emptyList] ;
  @string blockComment := "" ; # Means undefined
  repeat
  while
    @lstring targetName ;
    $identifier$ ? targetName ;
    $:$ ;
    @lstring sourceExpression ;
    $literal_string$ ? sourceExpression ;
    if [sourceExpression string] == "" then
      error sourceExpression: "this string should not be empty" ;
    end if ;
    if [targetName string] == "nibAndMainClass" then
      nibAndClassList += !sourceExpression ;
    elsif [targetName string] == "blockComment" then
      if blockComment != "" then
        error targetName: "this key is already defined" ;
      else
        blockComment := [sourceExpression string] ;
      end if ;
    else
      error targetName: "unkown key" ;
    end if ;
    $;$ ;
  end repeat ;
#--- Generate Cocoa c++ file
  action generateCocoaComponent
    !guiComponentName
    !guiKindName
    !cliToolName
    !nibAndClassList
    !blockComment
    !lexiqueClassName
    !optionsComponentsMap
  ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
#--- Assignment list
  repeat
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
#--- Assignment list
  repeat
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_constraintComponents unused ioConstraintComponentMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
#--- Assignment list
  repeat
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_constraintComponents unused ioConstraintComponentMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  repeat
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
#--- Assignment list
  repeat
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
end rule ;

#--------------------------------------------------------------------------------*

end syntax ;
