#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS cocoa component parser                                            *
#                                                                           *
#  Copyright (C) 2004, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax cocoa_parser :

import lexique galgas_scanner in "galgas_scanner.ggs" ;

import semantics common_semantics in "common_semantics.ggs" ;

#--------------------------------------------------------------------------------*

nonterminal <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

nonterminal <import_headers_semantics_and_grammars>
  !@stringset outIncludedSemanticsComponents
  !@stringset outIncludedMetamodelComponents
  !@stringset outIncludedOptionComponents
  !@stringset outIncludedGrammarComponents
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  !@stringset outInclusionsForImplementationFile
  !@stringset outInclusionsForHeaderFile
  !@M_optionComponents ioOptionsComponentsMapForUse
  !@ModelMap outModelMap
  !@ActionMap outActionMap
  !@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  !@typeTableEnAvant tableEnAvant
  !@entityToImplementMap outAllMetamodelClassMap
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  !@stringset outIncludedSemanticsComponents
  !@stringset outIcludedOptionComponents
  !@ModelMap outModelMap
  !@ActionMap outActionMap
  ?!@M_semanticsEntitiesForUse ioComponentSemanticsEntitiesMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
label parse
;

nonterminal <parse_lexique_for_importing>
  ??@lstring inFileName
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label parse
;

action generateCocoaComponent
  ??@lstring nomPRGMprincipal
  ??@lstring inGUIkindName
  ??@L_nibAndClassList inNIBandClassList
  ??@string inBlockComment
  ??@lstring inLexiqueClassName
  ??@M_optionComponents inOptionsComponents
  ??@labelForPopUpList inLabelForPopUpList
  ??@uint inTerminalSymbolCount
;

#--------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents ioOptionsComponentsMap
  ?!@M_metamodelsComponents ioMetamodelComponentMap
  ?!@M_treewalkingComponents ioTreewalkingComponentMap
:
  $gui$ ;
#--- Definition du programme
  @lstring guiComponentName ;
  $identifier$ ? guiComponentName ;
  @lstring guiKindName ;
  $literal_string$ ? guiKindName ;
#--- Grammar reference
  @lstring grammarName ;
  select
    grammarName := [@lstring new !"" !here] ;
  or
    $grammar$ ;
    $identifier$ ? grammarName ;
  end select ;
  $:$ ;
#--- Import semantics
  @ModelMap modelMap [emptyMap] ;
  @ActionMap actionMap [emptyMap] ;
  @stringset inclusionsForHeaderFile ;
  @stringset inclusionsForImplementationFile ;
  @M_optionComponents optionsComponentsMapForUse [emptyMap] ;
  @M_semanticsEntitiesForUse componentEntitiesMap ;
  @stringset classNamesSet [emptySet] ;
  @typeTableEnAvant tableEnAvant [emptyMap] ;
  @stringset includedSemanticsComponents ;
  @stringset includedOptionComponents ;
  @stringset includedMetamodelComponents ;
  @stringset includedGrammarComponents ;
  @entityToImplementMap allMetamodelClassMap ;
  <import_headers_semantics_and_grammars>
    ?includedSemanticsComponents
    ?includedMetamodelComponents
    ?includedOptionComponents
    ?includedGrammarComponents
    !?ioLexiqueMapForUse
    !?ioSemanticsComponentsMap
    !?ioMetamodelComponentMap
    !?ioTreewalkingComponentMap
    !?ioGrammarComponentsMap
    !?ioOptionsComponentsMap
    ?inclusionsForImplementationFile
    ?inclusionsForHeaderFile
    ?optionsComponentsMapForUse
    ?modelMap
    ?actionMap
    ?componentEntitiesMap
    ?tableEnAvant
    ?allMetamodelClassMap
  ;
  @lstring lexiqueClassName ;
  @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMap ;
  @M_optionComponents optionsComponentsMap ;
  if [ioGrammarComponentsMap count] == 1 then
    @lstring grammarKey [new !"" !here] ;
    foreach ioGrammarComponentsMap (@lstring kKey 3*) :
      grammarKey := kKey ;
    end foreach ;
    [ioGrammarComponentsMap searchKey
      !grammarKey
      ?nonterminalSymbolParametersMap
      ?lexiqueClassName
      ?optionsComponentsMap
    ] ;
  elsif [grammarName string] == "" then
    error here: "the grammar should be named in the header, as follows (replace xxx by actual grammar name):\n"
    . "gui " . guiComponentName . "\"" . guiKindName . "\" grammar xxx :"
    -> nonterminalSymbolParametersMap, lexiqueClassName, optionsComponentsMap ;
  else
    [ioGrammarComponentsMap searchKey
      !grammarName
      ?nonterminalSymbolParametersMap
      ?lexiqueClassName
      ?optionsComponentsMap
    ] ;
  end if ;
  @lstring altName := [@lstring new !"" !here] ;
  [nonterminalSymbolParametersMap searchKey !altName ?* ?*] ;
#--- Retrieve lexique infos
  <parse_lexique_for_importing>
    ![@lstring new ![lexiqueClassName string] . ".ggs" ![lexiqueClassName location]]
    !?ioLexiqueMapForUse
  ;
  @M_terminalSymbolsMapForUse terminalSymbolMap ;
  [ioLexiqueMapForUse searchKey !lexiqueClassName ?terminalSymbolMap] ;
#--- Assignment list
  @L_nibAndClassList nibAndClassList [emptyList] ;
  @labelForPopUpList labelForPopUpList [emptyList] ;
  @string blockComment := "" ; # Means undefined
  repeat
  while
    $label$ ;
    @lstring terminal1 ;
    $terminal$ ? terminal1 ;
    @luint terminal1ID ;
    [terminalSymbolMap searchKeyGetID !terminal1 ?terminal1ID ?*] ; 
    $,$ ;
    @lstring terminal2 ;
    $terminal$ ? terminal2 ;
    @luint terminal2ID ;
    [terminalSymbolMap searchKeyGetID !terminal2 ?terminal2ID ?*] ;
    labelForPopUpList +=
      !terminal1
      ![terminal1ID uint]
      !terminal2
      ![terminal2ID uint]
    ;
    $;$ ;
  while
    @lstring targetName ;
    $identifier$ ? targetName ;
    $:$ ;
    @lstring sourceExpression ;
    $literal_string$ ? sourceExpression ;
    if [sourceExpression string] == "" then
      error sourceExpression: "this string should not be empty" ;
    end if ;
    if [targetName string] == "nibAndMainClass" then
      nibAndClassList += !sourceExpression ;
    elsif [targetName string] == "blockComment" then
      if blockComment != "" then
        error targetName: "this key is already defined" ;
      else
        blockComment := [sourceExpression string] ;
      end if ;
    else
      error targetName: "unkown key" ;
    end if ;
    $;$ ;
  end repeat ;
#--- Generate Cocoa c++ file
  action generateCocoaComponent
    !guiComponentName
    !guiKindName
    !nibAndClassList
    !blockComment
    !lexiqueClassName
    !optionsComponentsMap
    !labelForPopUpList
    ![terminalSymbolMap count]
  ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  select
  or
    $grammar$ ;
    $identifier$ ? * ;
  end select ;
  $:$ ;
  <import_headers_semantics_and_grammars> parse ;
  <parse_lexique_for_importing> parse ;
#--- Assignment list
  repeat
  while
    $label$ ;
    $terminal$ ? * ;
    $,$ ;
    $terminal$ ? * ;
    $;$ ;
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_treewalkingComponents unused ioTreewalkingComponentMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  select
  or
    $grammar$ ;
    $identifier$ ? * ;
  end select ;
  $:$ ;
  <import_headers_semantics_and_grammars> parse ;
  <parse_lexique_for_importing> parse ;
#--- Assignment list
  repeat
  while
    $label$ ;
    $terminal$ ? * ;
    $,$ ;
    $terminal$ ? * ;
    $;$ ;
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_treewalkingComponents unused ioTreewalkingComponentMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  select
  or
    $grammar$ ;
    $identifier$ ? * ;
  end select ;
  $:$ ;
  <import_headers_semantics_and_grammars> parse ;
  <parse_lexique_for_importing> parse ;
#--- Assignment list
  repeat
  while
    $label$ ;
    $terminal$ ? * ;
    $,$ ;
    $terminal$ ? * ;
    $;$ ;
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
  ?!@M_metamodelsComponents unused ioMetamodelComponentMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
  ?!@M_treewalkingComponents unused ioTreewalkingComponentMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  select
  or
    $grammar$ ;
    $identifier$ ? * ;
  end select ;
  $:$ ;
  <import_headers_semantics_and_grammars> parse ;
  <parse_lexique_for_importing> parse ;
  repeat
  while
    $label$ ;
    $terminal$ ? * ;
    $,$ ;
    $terminal$ ? * ;
    $;$ ;
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $gui$ ;
  $identifier$ ? * ;
  $literal_string$ ? * ;
  select
  or
    $grammar$ ;
    $identifier$ ? * ;
  end select ;
  $:$ ;
  <import_headers_semantics_and_grammars> parse ;
  <parse_lexique_for_importing> parse ;
#--- Assignment list
  repeat
  while
    $label$ ;
    $terminal$ ? * ;
    $,$ ;
    $terminal$ ? * ;
    $;$ ;
  while
    $identifier$ ? * ;
    $:$ ;
    $literal_string$ ? * ;
    $;$ ;
  end repeat ;
  $end$ ;
  $gui$ ;
  $;$ ;
end rule ;

#--------------------------------------------------------------------------------*

end syntax ;
