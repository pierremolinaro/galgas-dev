#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS cocoa component parser                                            *
#                                                                           *
#  Copyright (C) 2004 Pierre Molinaro.                                      *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax cocoa_parser :

import lexique galgas_scanner in "galgas_scanner.ggs" ;

import semantics grammar_semantics in "grammar_semantics.ggs" ;
import semantics common_semantics in "common_semantics.ggs" ;

#--------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents ioLexiqueMapForUse
  ?!@M_semanticsComponents ioSemanticsComponentsMap
  ?!@M_syntaxComponents ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
label importLexique
  ?!@M_lexiqueComponents ioLexiqueMapForUse
label importSyntax
  ?!@M_syntaxComponents ioSyntaxComponentsMap
label importSemantics
  ?!@M_semanticsComponents ioSemanticsComponentsMap
label importGrammarForSemantics
  ?!@M_grammarComponents ioGrammarComponentsMap
label importOptions
  ?!@M_optionComponents ioOptionsComponentsMap
;

rule <parse_grammar_component_for_importing>
  ??@lstring inFileName
  ?!@M_grammarComponents ioGrammarComponentsMap
label parse
;

action generateCocoaComponent
  ?!@lstring nomPRGMprincipal
  ?!@lstring inCLIToolName
  ?!@lstring inLexiqueClassName
  ?!@M_optionComponents inOptionsComponents
;

#--------------------------------------------------------------------------------*

rule <galgas_component>
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
  ?!@M_grammarComponents ioGrammarComponentsMap
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $cocoa$ ;
  @lstring cocoaComponentName ;
#--- Definition du programme
  $identifier$ ? cocoaComponentName ;
  $:$ ;
#--- Command line tool
  $program$ ;
  @lstring cliToolName ;
  $literal_string$ ? cliToolName ;
  $;$ ;
#--- Grammar
  $import$ ;
  $grammar$ ;
  @lstring grammarName ;
  $identifier$ ? grammarName ;
  @M_grammarComponents grammarComponentsMap ;
  select
    grammarComponentsMap := ioGrammarComponentsMap ;
  or
    $in$ ;
    @lstring sourceFileName ;
    $literal_string$ ? sourceFileName ;
    grammarComponentsMap := [@M_grammarComponents empty] ;
    <parse_grammar_component_for_importing>
     !sourceFileName
     !?grammarComponentsMap
  ;
  end select ;
  @lstring lexiqueClassName ;
  @M_nonterminalSymbolAltsForGrammar nonterminalSymbolParametersMap ;
  @M_optionComponents optionsComponentsMap ;
  [!?grammarComponentsMap searchKey !grammarName ?nonterminalSymbolParametersMap
                                                 ?lexiqueClassName
                                                 ?optionsComponentsMap] ;
  @lstring altName := [@lstring new !"" !here] ;
  @L_signature_ForGrammarComponent startSymbolSignature ;
  [!?nonterminalSymbolParametersMap searchKey !altName ?startSymbolSignature] ;
  $;$ ;
#--- Generate Cocoa c++ file
  action generateCocoaComponent
    !?cocoaComponentName
    !?cliToolName
    !?lexiqueClassName
    !?optionsComponentsMap
  ;
  $end$ ;
  $cocoa$ ;
  $;$ ;
label importLexique
  ?!@M_lexiqueComponents unused ioLexiqueMapForUse
:
  $cocoa$ ;
  $identifier$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  $end$ ;
  $cocoa$ ;
  $;$ ;
label importSyntax
  ?!@M_syntaxComponents unused ioSyntaxComponentsMap
:
  $cocoa$ ;
  $identifier$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  $end$ ;
  $cocoa$ ;
  $;$ ;
label importSemantics
  ?!@M_semanticsComponents unused ioSemanticsComponentsMap
:
  $cocoa$ ;
  $identifier$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  $end$ ;
  $cocoa$ ;
  $;$ ;
label importGrammarForSemantics
  ?!@M_grammarComponents unused ioGrammarComponentsMap
:
  $cocoa$ ;
  $identifier$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  $end$ ;
  $cocoa$ ;
  $;$ ;
label importOptions
  ?!@M_optionComponents unused ioOptionsComponentsMap
:
  $cocoa$ ;
  $identifier$ ? * ;
  $:$ ;
#--- Command line tool
  $program$ ;
  $literal_string$ ? * ;
  $;$ ;
  $import$ ;
  $grammar$ ;
  $identifier$ ? * ;
  select
  or
   $in$ ;
   $literal_string$ ? * ;
   <parse_grammar_component_for_importing> parse ;
  end select ;
  $;$ ;
  $end$ ;
  $cocoa$ ;
  $;$ ;
end rule ;

#--------------------------------------------------------------------------------*

end syntax ;
