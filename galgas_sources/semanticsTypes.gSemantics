#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 1997, ..., 2008 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsTypes :
import "parameterArgumentMetamodel.gSemantics" ;
import semantics parameterArgumentMetamodel in "parameterArgumentMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G A L G A S    A B S T R A C T  T Y P E                                  *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @sortedTypeList ;
map @typeMap ;
mapindex @typeMapIndex ;

#---------------------------------------------------------------------------*

abstract class @ACGalgasType {  
  method checkTypeCrossReferences ??@uint unused inTypeCount :
  end method ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E   M A P                                                          *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeMap {
  @ACGalgasType mType ;
  insert insertKey error message "the '@%K' type has been already declared in %L" ;
  search searchKey error message "the '@%K' type is not declared" ;
}

#---------------------------------------------------------------------------*

mapindex @typeMapIndex (@typeMap) {
  search searchKey error message "the '@%K' type is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D     T Y P E    L I S T                                     *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @sortedTypeList {
  @ACGalgasType mType ;
  @string mSortString ;
}{
  mSortString <
}

#---------------------------------------------------------------------------*
#                                                                           *
#    T Y P E    L I S T                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @typeList {
  @ACGalgasType mType ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S I G N A T U R E                                                        *
#                                                                           *
#---------------------------------------------------------------------------*

list @signature {
  @typeMapIndex mAttributeTypeIndex ;
  @lstring mFormalArgumentName ;
  @formalArgumentPassingMode mFormalArgumentPassingMode ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  A T T R I B U T E    L I S T                                             *
#                                                                           *
#---------------------------------------------------------------------------*

list @attributeList {
  @typeMapIndex mAttributeTypeIndex ;
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  D A T A    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @dataGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O B J E C T    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @objectGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  F U N C T I O N    T Y P E                                               *
#                                                                           *
#---------------------------------------------------------------------------*

class @functionGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L O C A T I O N    T Y P E                                               *
#                                                                           *
#---------------------------------------------------------------------------*

class @locationGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S T R I N G    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @stringGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C H A R    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @charGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  B O O L    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @boolGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  U I N T    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @uintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S I N T    T Y P E                                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @sintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  U I N T 6 4    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @uint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S I N T 6 4    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @sint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  D O U B L E    T Y P E                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @doubleGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L S T R I N G    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @lstringGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L C H A R    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @lcharGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L B O O L    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @lboolGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L U I N T    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @luintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L S I N T    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @lsintGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L U I N T 6 4    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @luint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L S I N T 6 4    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @lsint64GalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  L D O U B L E    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @ldoubleGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S T R I N G S E T    T Y P E                                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @stringsetGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  B I N A R Y S E T    T Y P E                                             *
#                                                                           *
#---------------------------------------------------------------------------*

class @binarysetGalgasType extends @ACGalgasType {
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C L A S S    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @classMethodList {
  @lstring mMethodName ;
  @signature mMethodSignature ;
}

#---------------------------------------------------------------------------*

class @classGalgasType extends @ACGalgasType {
  @bool mIsAbstract ;
  @lstring mClassName feature nogetter ;
  @typeMapIndex mSuperClassIndex ;
  @attributeList mAttributeList feature nogetter ;
  @classMethodList mMethodList feature nogetter ;

  override
  method checkTypeCrossReferences ??@uint inTypeCount :
    @string classPath := [mClassName string] ;
    @stringset superClassSet [setWithString ![mClassName string]] ;
    @typeMapIndex superClassIndex := mSuperClassIndex ;
    @bool circularityError := false ;
    @bool ok := true ;
    loop inTypeCount :
    while [superClassIndex isRegular] & ok & not circularityError do
    #--- Retrieve super class features
      @lstring superClassName ;
      @ACGalgasType t ;
      [superClassIndex searchKey ?superClassName ?t] ;
    #--- Check there is no circularity
      circularityError := [superClassSet hasKey ![superClassName string]] ;
      superClassSet += ![superClassName string] ;
      classPath .= "." .  [superClassName string] ;
    #--- Check super class is actually a class, and get super super class info.
      @typeMapIndex superSuperClassIndex ;
      cast t :
      when >= @classGalgasType kClassType do
        superSuperClassIndex := [kClassType mSuperClassIndex] ;
      else
        error mClassName: "this class inherits from @"
          . superClassName . ", but @" . superClassName . " is not a class"
          -> superSuperClassIndex
        ;
      end cast ;
      superClassIndex := superSuperClassIndex ;
    end loop ;
  #--- Circularity error
    if circularityError then
      error mClassName:
        "inheritance circularity for class '"
      . [mClassName string] . "': "
      . [classPath stringByReplacingStringByString !"." !" extends "] ;
    end if ;
  end method ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @listGalgasType extends @ACGalgasType {
  @lstring mListTypeName ;
  @attributeList mAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T M A P    T Y P E                                               *
#                                                                           *
#---------------------------------------------------------------------------*

class @listmapGalgasType extends @ACGalgasType {
  @lstring mListmapTypeName feature nogetter ;
  @typeMapIndex mAssociatedListTypeIndex feature nogetter ;

  override
  method checkTypeCrossReferences ??@uint unused inTypeCount :
    @lstring listTypeName ;
    @ACGalgasType t ;
    [mAssociatedListTypeIndex searchKey ?listTypeName ?t] ;
  #--- Check list type is actually a list
    cast t :
    when >= @listGalgasType do
    else
      error listTypeName: "this mapindex type refers to @"
        . listTypeName . " as a list, but @" . listTypeName . " is not a list"
      ;
    end cast ;
  end method ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S T R U C T    T Y P E                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @structGalgasType extends @ACGalgasType {
  @lstring mStructTypeName feature nogetter ;
  @attributeList mAttributeList feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    T Y P E                                      *
#                                                                           *
#---------------------------------------------------------------------------*

list @sortDescriptorList {
  @lstring mAttributeName ;
  @bool mAscending ;
}
#---------------------------------------------------------------------------*

class @sortedlistGalgasType extends @ACGalgasType {
  @lstring mListTypeName feature nogetter ;
  @attributeList mAttributeList feature nogetter ;
  @sortDescriptorList mSortDescriptorList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P   T Y P E                                                        *
#                                                                           *
#---------------------------------------------------------------------------*

map @mapMethodMap {
  @lstring mMessage ;
  insert insertKey error message "the '@%K' method has been already declared" ;
}

#---------------------------------------------------------------------------*

class @mapType extends @ACGalgasType {
  @lstring mMapTypeName feature nogetter ;
  @attributeList mAttributeList feature nogetter ;
  @mapMethodMap mInsertMethodMap feature nogetter ;
  @mapMethodMap mRemoveMethodMap feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    I N D E X    T Y P E                                          *
#                                                                           *
#---------------------------------------------------------------------------*

class @mapindexType extends @ACGalgasType {
  @lstring mMapIndexTypeName feature nogetter ;
  @typeMapIndex mIndexOfMapType feature nogetter ;
  @lstring mSearchMethodName feature nogetter ;

  override
  method checkTypeCrossReferences ??@uint unused inTypeCount :
    @lstring mapTypeName ;
    @ACGalgasType t ;
    [mIndexOfMapType searchKey ?mapTypeName ?t] ;
  #--- Check map type is actually a map
    cast t :
    when >= @mapType do
    else
      error mapTypeName: "this mapindex type refers to @"
        . mapTypeName . " as a map, but @" . mapTypeName . " is not a map"
      ;
    end cast ;
  end method ;

}

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    T Y P E                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

map @enumConstructorMap {
  insert insertKey error message "the '%K' constant has been already declared in %L" ;
  search searchKey error message "the '%K' constant is not declared, or is not declared as constructor" ;
}

#---------------------------------------------------------------------------*

map @enumMessageMap {
  insert insertKey error message "the '%K' message has been already declared" ;
  search searchKey error message "the '%K' message is not declared" ;
}

#---------------------------------------------------------------------------*

class @enumType extends @ACGalgasType {
  @lstring mEnumTypeName feature nogetter ;
  @enumConstructorMap mEnumConstructorMap feature nogetter ;
  @enumMessageMap mEnumMessageMap feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C O N S T R U C T    B U I L T I N     T Y P E    M A P                *
#                                                                           *
#---------------------------------------------------------------------------*

routine addTypeList
  ??@string inElementTypeName
  ?!@typeMap ioTypeMap
:
  @attributeList lstringAttribute [emptyList] ;
  @typeMapIndex lstringIndex ;
  [@typeMapIndex makeRegularIndex ![@lstring new !inElementTypeName !here] !?ioTypeMap ?lstringIndex] ;
  lstringAttribute += !lstringIndex ![@lstring new !"mValue" !here] ;
  @lstring lstringlist [new !inElementTypeName . "list" !here] ;
  [!?ioTypeMap insertKey !lstringlist ![@listGalgasType new !lstringlist !lstringAttribute]] ;
end routine ;

#---------------------------------------------------------------------------*

once constructPrimitiveTypeMap ->@typeMap outTypeMap :
  outTypeMap := [@typeMap emptyMap] ;
#--- Enter builtin type
  [!?outTypeMap insertKey ![@lstring new !"string"    !here] ![@stringGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"char"      !here] ![@charGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"bool"      !here] ![@boolGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint"      !here] ![@uintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint"      !here] ![@sintGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"uint64"    !here] ![@uint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"sint64"    !here] ![@sint64GalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"double"    !here] ![@doubleGalgasType    new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lstring"   !here] ![@lstringGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lchar"     !here] ![@lcharGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lbool"     !here] ![@lboolGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint"     !here] ![@luintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint"     !here] ![@lsintGalgasType     new]] ;
  [!?outTypeMap insertKey ![@lstring new !"luint64"   !here] ![@luint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"lsint64"   !here] ![@lsint64GalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"ldouble"   !here] ![@ldoubleGalgasType   new]] ;
  [!?outTypeMap insertKey ![@lstring new !"binaryset" !here] ![@binarysetGalgasType new]] ;
  [!?outTypeMap insertKey ![@lstring new !"stringset" !here] ![@stringsetGalgasType new]] ;
  [!?outTypeMap insertKey ![@lstring new !"location"  !here] ![@locationGalgasType  new]] ;
  [!?outTypeMap insertKey ![@lstring new !"data"      !here] ![@dataGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"type"      !here] ![@typeGalgasType      new]] ;
  [!?outTypeMap insertKey ![@lstring new !"function"  !here] ![@functionGalgasType  new]] ;
  [!?outTypeMap insertKey ![@lstring new !"object"    !here] ![@objectGalgasType    new]] ;
end once ;

#---------------------------------------------------------------------------*

once constructBuiltinTypeMap ->@typeMap outTypeMap :
  outTypeMap := constructPrimitiveTypeMap [] ;
#--- @lstringlist type
  addTypeList !"lstring" !?outTypeMap ;
#--- @stringlist type
  addTypeList !"string" !?outTypeMap ;
#--- @typelist type
  addTypeList !"type" !?outTypeMap ;
#--- @uint64list type
  addTypeList !"uint64" !?outTypeMap ;
#--- @luintlist type
  addTypeList !"luint" !?outTypeMap ;
#--- @uintlist type
  addTypeList !"uint" !?outTypeMap ;
#--- @functionlist type
  addTypeList !"function" !?outTypeMap ;
end once ;

#---------------------------------------------------------------------------*

once build_lstringlist_type ->@ACGalgasType outType :
  const @typeMap typeMap := constructBuiltinTypeMap [] ;
  [typeMap searchKey ![@lstring new !"lstringlist" !here] ?outType] ;
end once ;

#---------------------------------------------------------------------------*

once build_stringlist_type ->@ACGalgasType outType :
  const @typeMap typeMap := constructBuiltinTypeMap [] ;
  [typeMap searchKey ![@lstring new !"stringlist" !here] ?outType] ;
end once ;

#---------------------------------------------------------------------------*

once build_uint64list_type ->@ACGalgasType outType :
  const @typeMap typeMap := constructBuiltinTypeMap [] ;
  [typeMap searchKey ![@lstring new !"uint64list" !here] ?outType] ;
end once ;

#---------------------------------------------------------------------------*

once build_typelist_type ->@ACGalgasType outType :
  const @typeMap typeMap := constructBuiltinTypeMap [] ;
  [typeMap searchKey ![@lstring new !"typelist" !here] ?outType] ;
end once ;

#---------------------------------------------------------------------------*

once build_functionlist_type ->@ACGalgasType outType :
  const @typeMap typeMap := constructBuiltinTypeMap [] ;
  [typeMap searchKey ![@lstring new !"functionlist" !here] ?outType] ;
end once ;

#---------------------------------------------------------------------------*

end semantics ;
