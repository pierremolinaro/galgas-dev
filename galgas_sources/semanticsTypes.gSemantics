#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 1997, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsTypes :
import "semanticsTypesForAST.gSemantics" ;
import semantics semanticsTypesForAST in "semanticsTypesForAST.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  U N I F I E D    T Y P E    M A P                                        *
#                                                                           *
#---------------------------------------------------------------------------*

mapproxy @unifiedTypeMapProxy ;

#---------------------------------------------------------------------------*

list @unifiedTypeMapProxyList {
  @unifiedTypeMapProxy mType ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C O N S T R U C T O R    M A P                                           *
#                                                                           *
#---------------------------------------------------------------------------*

map @constructorMap {
  @unifiedTypeMapProxyList mArgumentTypeList ;
  @bool mHasCompilerArgument ;
  @unifiedTypeMapProxy mReturnedType ;
  insert insertKey error message "the '%K' constructor has been already defined" ;
  search searchKey error message "the '%K' constuctor is not declared" ;
}

#---------------------------------------------------------------------------*

enum @methodQualifier {
  isAbstract, isBasic, isBasicFinal, isInherited, isOverriding, isOverridingAbstract
}{
}

#---------------------------------------------------------------------------*
#                                                                           *
#  R E A D E R    M A P                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

map @readerMap {
  @bool mIsCategory ;
  @unifiedTypeMapProxyList mArgumentTypeList ;
  @bool mHasCompilerArgument ;
  @unifiedTypeMapProxy mReturnedType ;
  @methodQualifier mQualifier ;
  insert insertKey error message "the '%K' reader is already declared" ;
  search searchKey error message "the '%K' reader is not declared" ;
  insert or replace ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M O D I F I E R    M A P                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalParameterSignature {
  @unifiedTypeMapProxy mFormalArgumentType ;
  @formalArgumentPassingModeAST mFormalArgumentPassingMode ;
}

#---------------------------------------------------------------------------*

map @modifierMap {
  @formalParameterSignature mParameterList ;
  @bool mHasCompilerArgument ;
  @methodQualifier mQualifier ;
  insert or replace ;
  insert insertKey error message "the '%K' modifier is already declared" ;
  search searchKey error message "the '%K' modifier is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M E T H O D    M A P                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

map @instanceMethodMap {
  @bool mIsCategory ;
  @formalParameterSignature mParameterList ;
  @location mDeclarationLocation ;
  @bool mHasCompilerArgument ;
  @methodQualifier mQualifier ;
  insert insertKey error message "the '%K' instance method is already declared" ;
  search searchKey error message "the '%K' instance method is not declared" ;
  search searchInheritedKey error message "as the '%K' method is tagged as 'override', it should be declared in the super class" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C L A S S    M E T H O D    M A P                                        *
#                                                                           *
#---------------------------------------------------------------------------*

map @classMethodMap {
  @formalParameterSignature mParameterList ;
  @bool mHasCompilerArgument ;
  insert or replace ;
  insert insertKey error message "the '%K' class method is already declared" ;
  search searchKey error message "the '%K' class method is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  W I T H    A C C E S S O R    M A P                                      *
#                                                                           *
#---------------------------------------------------------------------------*

map @withAccessorMap {
  @unifiedTypeMapProxy mArgumentType ;
  insert insertKey error message "the '%K' 'with' accessor is already declared" ;
  search searchKey error message "the '%K' 'with' accessor is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  E N U M E R A T I O N    D E S C R I P T O R    L I S T                  *
#                                                                           *
#---------------------------------------------------------------------------*

list @enumerationDescriptorList {
  @unifiedTypeMapProxy mEnumeratedType ;
  @string mEnumerationName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E D    A T T R I B U T E    L I S T                                *
#                                                                           *
#---------------------------------------------------------------------------*

list @typedAttributeList {
  @unifiedTypeMapProxy mAttributeTypeIndex ;
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E    K I N D    E N U M E R A T I O N                              *
#                                                                           *
#---------------------------------------------------------------------------*

enum @typeKindEnum {
  classType,
  enumType,
  listType,
  sortedListType,
  mapType,
  mapProxyType,
  listMapType,
  structType
}{
  reader kind :
  classType -> "class" ;
  enumType -> "enumeration" ;
  listType -> "list" ;
  sortedListType -> "sorted list" ;
  mapType -> "map" ;
  mapProxyType -> "map proxy" ;
  listMapType -> "list map" ;
  structType -> "struct" ;
  end reader ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  N A T I V E    A T T R I B U T E    L I S T                              *
#                                                                           *
#---------------------------------------------------------------------------*

list @nativeAttributeList {
  @string mCppClassName ;
  @bool mIsPointer ;
  @string mAttributeName ;
  @bool mUseReferenceForConstructor ;
  @string mGetterName ;
  @string mDefaultValue ;
  @bool mIsConst ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  O P E R A T O R    F L A G S                                             *
#                                                                           *
# Theses masks are used for the mHandledOperatorFlags attribut of the       *
# @unifiedTypeMap map, for indicating the handled operators.                *
#---------------------------------------------------------------------------*

function binaryAddOperator -> @uint outMask : outMask := 1 ; end function ;
function binarySubOperator -> @uint outMask : outMask := 1 << 1 ; end function ;
function binaryMulOperator -> @uint outMask : outMask := 1 << 2 ; end function ;
function binaryDivOperator -> @uint outMask : outMask := 1 << 3 ; end function ;
function binaryModOperator -> @uint outMask : outMask := 1 << 4 ; end function ;
function binaryShiftOperator -> @uint outMask : outMask := 1 << 5 ; end function ;
function unaryPlusOperator -> @uint outMask : outMask := 1 << 6 ; end function ;
function unaryMinusOperator -> @uint outMask : outMask := 1 << 7 ; end function ;
function unaryTildeOperator -> @uint outMask : outMask := 1 << 8 ; end function ;
function incDecOperator -> @uint outMask : outMask := 1 << 9 ; end function ;

function binaryAndOperator -> @uint outMask : outMask := 1 << 10 ; end function ;
function binaryOrOperator -> @uint outMask : outMask := 1 << 11 ; end function ;
function binaryXorOperator -> @uint outMask : outMask := 1 << 12 ; end function ;
function unaryNotOperator -> @uint outMask : outMask := 1 << 13 ; end function ;

function binaryConcatOperator -> @uint outMask : outMask := 1 << 14 ; end function ; # exp1 . exp2
function dotAssignOperator -> @uint outMask : outMask := 1 << 15 ; end function ; # var .= exp ;
function isComparable -> @uint outMask : outMask := 1 << 16 ; end function ; # Supports <, <=, >, >= operators

function autoBoxing -> @uint outMask : outMask := 1 << 20 ; end function ;
function generateCppConstructorWithNativeAttributeListInAutoPointerClass -> @uint outMask : outMask := 1 << 21 ; end function ;
function generateConstructorWithSelfObject -> @uint outMask : outMask := 1 << 22 ; end function ;
function generateSortedListComparisonMethod -> @uint outMask : outMask := 1 << 23 ; end function ;
function generateEnumerationHelperMethods -> @uint outMask : outMask := 1 << 24 ; end function ;
function generateCppConstructorWithAllAttributeList -> @uint outMask : outMask := 1 << 25 ; end function ;
function generateCppConstructorWithCurrentAttributeList -> @uint outMask : outMask := 1 << 26 ; end function ;
function generateCppConstructorWithNativeAttributeList -> @uint outMask : outMask := 1 << 27 ; end function ;
function doNotGenererateObjectCompare -> @uint outMask : outMask := 1 << 28 ; end function ;
function generateDescriptionReaderUtilityMethod -> @uint outMask : outMask := 1 << 29 ; end function ;
function generateNativeNewConstructor -> @uint outMask : outMask := 1 << 30 ; end function ;
function generateVirtualDestructor -> @uint outMask : outMask := 1 << 31 ; end function ;

#---------------------------------------------------------------------------*

map @attributeMap {
  @unifiedTypeMapProxy mAttributeType ;
  insert insertKey error message "the '%K' attribute has been already declared in %L" ;
  search searchKey error message "the '%K' attribute is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  U N I F I E D    T Y P E    M A P                                        *
#                                                                           *
#---------------------------------------------------------------------------*

map @unifiedTypeMap {
  @bool mIsConcrete ; # false if abstract class
  @unifiedTypeMapProxy mSuperType ;
  @typeKindEnum mTypeKindEnum ;
  @typedAttributeList mInheritedTypedAttributeList ;
  @attributeMap mAttributeMap ; # struct, class
  @typedAttributeList mCurrentTypedAttributeList ;
  @constructorMap mConstructorMap ;
  @readerMap mReaderMap ;
  @modifierMap mModifierMap ;
  @instanceMethodMap mInstanceMethodMap ;
  @classMethodMap mClassMethodMap ;
  @enumerationDescriptorList mEnumerationDescriptor ; # Empty List if cannot be enumerated
  @uint mHandledOperatorFlags ;
  @unifiedTypeMapProxyList mAddAssignOperatorArguments ; # Empty list if += operator is not supported
  @nativeAttributeList mNativeAttributeList ; # Generating type declaration
  @stringset mEnumConstantSet ;
  @lstringlist mEnumConstantList ;
  @typedAttributeList mPrivateDataMemberList ;
  @mapSearchMethodListAST mMapSearchMethodList ; # For a map, the list of search methods
  @mapSearchMethodListAST mMapProxySearchConstructorList ; # For a map proxy, the list of search methods of the associated map
  @withAccessorMap mWithAccessorMap ; # Method for with accessor

  insert insertKey error message "the '@%K' type has been already declared in %L" ;
  search searchKey error message "the '@%K' type is not declared" ;
}

#---------------------------------------------------------------------------*

mapproxy @unifiedTypeMapProxy (@unifiedTypeMap) ;

#---------------------------------------------------------------------------*
#                                                                           *
#  A S T   C L A S S E S    F O R    P R E D E F I N E D   T Y P E S        *
#                                                                           *
#---------------------------------------------------------------------------*

class @genericTypeTypeAST extends @semanticDeclarationAST {
  @string mTypeName ;
  @string mSuperTypeName ;
}

#---------------------------------------------------------------------------*

abstract class @predefinedTypeAST extends @semanticDeclarationAST {
  @string mPredefinedTypeName ;
}

#---------------------------------------------------------------------------*

class @objectPredefinedTypeAST extends @semanticDeclarationAST {}

class @binarysetPredefinedTypeAST extends @predefinedTypeAST {}

class @boolPredefinedTypeAST extends @predefinedTypeAST {}

class @uintPredefinedTypeAST extends @predefinedTypeAST {}

class @uint64PredefinedTypeAST extends @predefinedTypeAST {}

class @sintPredefinedTypeAST extends @predefinedTypeAST {}

class @sint64PredefinedTypeAST extends @predefinedTypeAST {}

class @charPredefinedTypeAST extends @predefinedTypeAST {}

class @doublePredefinedTypeAST extends @predefinedTypeAST {}

class @stringPredefinedTypeAST extends @predefinedTypeAST {}

class @locationPredefinedTypeAST extends @predefinedTypeAST {}

class @stringsetPredefinedTypeAST extends @predefinedTypeAST {}

class @functionPredefinedTypeAST extends @predefinedTypeAST {}

class @typePredefinedTypeAST extends @predefinedTypeAST {}

class @dataPredefinedTypeAST extends @predefinedTypeAST {}

#---------------------------------------------------------------------------*

reader @predefinedTypeAST getSuperTypeName
  ->@string outSuperTypeName
:
#--- By default, super type is the @object type
  outSuperTypeName := "object" ;
end reader ;

#---------------------------------------------------------------------------*

method @predefinedTypeAST getConstructorMap
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@constructorMap outConstructorMap
:
  outConstructorMap := [@constructorMap emptyMap] ;
end method ;

#---------------------------------------------------------------------------*

method @predefinedTypeAST getReaderMap
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@readerMap outReaderMap
:
  outReaderMap := [@readerMap emptyMap] ;
end method ;

#---------------------------------------------------------------------------*

method @predefinedTypeAST getModifierMap
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
end method ;

#---------------------------------------------------------------------------*

method @predefinedTypeAST getInstanceMethodMap
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@instanceMethodMap outInstanceMethodMap
:
  outInstanceMethodMap := [@instanceMethodMap emptyMap] ;
end method ;

#---------------------------------------------------------------------------*

method @predefinedTypeAST getClassMethodMap
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@classMethodMap outClassMethodMap
:
  outClassMethodMap := [@classMethodMap emptyMap] ;
end method ;

#---------------------------------------------------------------------------*

reader @predefinedTypeAST getSupportedOperatorFlags
  ->@uint outFlags
:
  outFlags := 0 ; # No supported operator
end reader ;

#---------------------------------------------------------------------------*

method @predefinedTypeAST getAddAssignArgumentList
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@unifiedTypeMapProxyList outAddAssignArgumentList
:
  outAddAssignArgumentList := [@unifiedTypeMapProxyList emptyList] ; # += is not supported
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G E T    N A T I V E    A T T R I B U T E    L I S T                     *
#                                                                           *
#---------------------------------------------------------------------------*

reader @predefinedTypeAST getNativeAttributeList
  -> @nativeAttributeList outNativeAttributeList
:
  outNativeAttributeList := [@nativeAttributeList emptyList] ; # -= is not supported
end reader ;

#---------------------------------------------------------------------------*
#                                                                           *
#  G E T    E N U M E R A T I O N    L I S T                                *
#                                                                           *
#---------------------------------------------------------------------------*

method @predefinedTypeAST getEnumerationList
  ?!@unifiedTypeMap unused ioUnifiedTypeMap
  !@enumerationDescriptorList outEnumerationList
:
  outEnumerationList := [@enumerationDescriptorList emptyList] ; # Enumeration is not supported
end method ;

#---------------------------------------------------------------------------*

end semantics ;
