#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 1997, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsTypes :
import "semanticsTypesForAST.gSemantics" ;
import semantics semanticsTypesForAST in "semanticsTypesForAST.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#  U N I F I E D    T Y P E    M A P                                        *
#                                                                           *
#---------------------------------------------------------------------------*

mapindex @unifiedTypeMapIndex ;

#---------------------------------------------------------------------------*

list @unifiedTypeMapIndexList {
  @unifiedTypeMapIndex mType ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C O N S T R U C T O R    M A P                                           *
#                                                                           *
#---------------------------------------------------------------------------*

map @constructorMap {
  @unifiedTypeMapIndexList mArgumentTypeList ;
  @bool mHasLexique ;
  @unifiedTypeMapIndex mReturnedType ;
  insert insertKey error message "the '%K' constructor has been already defined" ;
  search searchKey error message "the '%K' constuctor is not declared" ;
}

#---------------------------------------------------------------------------*

enum @readerQualifier {
  isAbstract, isBasic, isInherited, isOverriding
}{
}

#---------------------------------------------------------------------------*
#                                                                           *
#  R E A D E R    M A P                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

map @readerMap {
  @unifiedTypeMapIndexList mArgumentTypeList ;
  @bool mHasLexiqueArgument ;
  @unifiedTypeMapIndex mReturnedType ;
  @readerQualifier mQualifier ;
  @string mImplicitConversionReader ;
  insert insertKey error message "the '%K' reader has been already defined" ;
  search searchKey error message "the '%K' reader is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M O D I F I E R    M A P                                                 *
#                                                                           *
#---------------------------------------------------------------------------*

list @formalParameterSignature {
  @unifiedTypeMapIndex mParameterType ;
  @formalArgumentPassingModeAST mFormalParameterPassingMode ;
}

#---------------------------------------------------------------------------*

map @modifierMap {
  @formalParameterSignature mParameterList ;
  @bool mHasCompilerArgument ;
  insert insertKey error message "the '%K' modifier has been already defined" ;
  search searchKey error message "the '%K' modifier is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  M E T H O D    M A P                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

map @instanceMethodMap {
  @formalParameterSignature mParameterList ;
  @bool mHasCompilerArgument ;
  insert insertKey error message "the '%K' method has been already defined" ;
  search searchKey error message "the '%K' method is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  C L A S S    M E T H O D    M A P                                        *
#                                                                           *
#---------------------------------------------------------------------------*

map @classMethodMap {
  @formalParameterSignature mParameterList ;
  @bool mHasCompilerArgument ;
  insert insertKey error message "the '%K' class method has been already defined" ;
  search searchKey error message "the '%K' class method is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  E N U M E R A T I O N    L I S T                                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @enumeratedItemsWithForeachInstruction {
  @unifiedTypeMapIndex mEnumeratedType ;
  @string mEnumerationName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T Y P E    K I N D    E N U M E R A T I O N                              *
#                                                                           *
#---------------------------------------------------------------------------*

enum @typeKindEnum {
  primitiveType,
  classType,
  enumType,
  listType,
  sortedListType,
  mapType,
  mapIndexType,
  listMapType,
  structType
}{
}

#---------------------------------------------------------------------------*
#                                                                           *
#  U N I F I E D    T Y P E    M A P                                        *
#                                                                           *
#---------------------------------------------------------------------------*

map @unifiedTypeMap {
  @bool mIsAbstract ;
  @unifiedTypeMapIndex mSuperType ;
  @typeKindEnum mTypeKindEnum ;
  @constructorMap mConstructorMap ;
  @readerMap mReaderMap ;
  @modifierMap mModifierMap ;
  @instanceMethodMap mInstanceMethodMap ;
  @classMethodMap mClassMethodMap ;
  @enumeratedItemsWithForeachInstruction mEnumeratedItemsWithForeachInstruction ; # Empty List if cannot be enumerated

  insert insertKey error message "the '@%K' type has been already declared in %L" ;
  search searchKey error message "the '@%K' type is not declared" ;
}

#---------------------------------------------------------------------------*

mapindex @unifiedTypeMapIndex (@unifiedTypeMap) ;

#---------------------------------------------------------------------------*

end semantics ;
