#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsModifiers :
  import "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterModifierWithInputArgument
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@string inInputArgumentName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMap-proxy argumentTypeIndex ;
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgumentTypeName ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !["" nowhere] !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !inInputArgumentName ;
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    ![@methodKind definedAsMember]
    !argList
    !inHasCompilerArgument
    ![@methodQualifier isBasic]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWithOutputArgument
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inOutputArgumentTypeName
  ??@string inOutputArgumentName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMap-proxy argumentTypeIndex ;
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inOutputArgumentTypeName ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !["" nowhere] !argumentTypeIndex ![@formalArgumentPassingModeAST argumentOut] !inOutputArgumentName ;
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    ![@methodKind definedAsMember]
    !argList
    !inHasCompilerArgument
    ![@methodQualifier isBasic]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWith2InputArguments
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgument1TypeName
  ??@string inInputArgument1Name
  ??@string inInputArgument2TypeName
  ??@string inInputArgument2Name
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @formalParameterSignature argList [emptyList] ;
  @unifiedTypeMap-proxy argumentTypeIndex ;
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgument1TypeName ?argumentTypeIndex] ;
  argList += !["" nowhere] !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !inInputArgument1Name ;
  [@unifiedTypeMap-proxy makeProxyFromString !?ioUnifiedTypeMap !inInputArgument2TypeName ?argumentTypeIndex] ;
  argList += !["" nowhere] !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] !inInputArgument2Name ;
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    ![@methodKind definedAsMember]
    !argList
    !inHasCompilerArgument
    ![@methodQualifier isBasic]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWithoutArgument
  ?!@modifierMap ioModifierMap
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    ![@methodKind definedAsMember]
    ![@formalParameterSignature emptyList]
    !inHasCompilerArgument
    ![@methodQualifier isBasic]
    !""
  ] ;
end routine ;

#---------------------------------------------------------------------------*

override method @stringPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inCapacity" !"setCapacity" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inAmount" !"incIndentation" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inAmount" !"decIndentation" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inColumnIndex" !"appendSpacesUntilColumn" !true ;
  enterModifierWith2InputArguments !?outModifierMap !?ioUnifiedTypeMap !"char" !"inChar" !"uint" !"inIndex" !"setCharacterAtIndex" !true ;
end method ;

#---------------------------------------------------------------------------*

override method @dataPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inValue" !"appendByte" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inValue" !"appendShortBE" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inValue" !"appendShortLE" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inValue" !"appendUIntBE" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"inValue" !"appendUIntLE" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"string" !"inValue" !"appendUTF8String" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"data" !"inValue" !"appendData" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @filewrapperPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"string" !"inDirectoryPath" !"setCurrentDirectory" !true ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
