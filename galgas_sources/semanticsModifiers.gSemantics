#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsModifiers :
  import "semanticsTypes.gSemantics" ;
  import semantics semanticsTypes in "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterModifierWithInputArgument
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapIndex argumentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgumentTypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWithOutputArgument
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapIndex argumentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgumentTypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWith2InputArguments
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgument1TypeName
  ??@string inInputArgument2TypeName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @formalParameterSignature argList [emptyList] ;
  @unifiedTypeMapIndex argumentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgument1TypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgument2TypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWithoutArgument
  ?!@modifierMap ioModifierMap
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  [!?ioModifierMap insertOrReplace
    ![@lstring new !inModifierName !here]
    ![@formalParameterSignature emptyList]
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

override method @stringPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"setCapacity" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"incIndentation" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"decIndentation" !true ;
  enterModifierWith2InputArguments !?outModifierMap !?ioUnifiedTypeMap !"char" !"uint" !"setCharacterAtIndex" !true ;
end method ;

#---------------------------------------------------------------------------*

override method @lstringPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"string" !"setString" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @lcharPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"char" !"setChar" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @lboolPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"bool" !"setBool" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @luintPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"setUint" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @lsintPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"sint" !"setSint" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @luint64PredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint64" !"setUint64" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @lsint64PredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"sint64" !"setSint64" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @ldoublePredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"double" !"setDouble" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end method ;

#---------------------------------------------------------------------------*

override method @dataPredefinedTypeAST getModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendByte" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendShortBE" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendShortLE" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendUIntBE" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendUIntLE" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"string" !"appendUTF8String" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"data" !"appendData" !false ;
end method ;

#---------------------------------------------------------------------------*

end semantics ;
