#---------------------------------------------------------------------------*
#                                                                           *
#  semantics definitions for semantics component                            *
#                                                                           *
#  Copyright (C) 2009, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsModifiers :
  import "semanticsTypes.gSemantics" ;
  import semantics semanticsTypes in "semanticsTypes.gSemantics" ;

#---------------------------------------------------------------------------*

routine enterModifierWithInputArgument
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapIndex argumentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgumentTypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?ioModifierMap insertKey
    ![@lstring new !inModifierName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWithOutputArgument
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgumentTypeName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @unifiedTypeMapIndex argumentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgumentTypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  @formalParameterSignature argList [emptyList] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentOut] ;
  [!?ioModifierMap insertKey
    ![@lstring new !inModifierName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWith2InputArguments
  ?!@modifierMap ioModifierMap
  ?!@unifiedTypeMap ioUnifiedTypeMap
  ??@string inInputArgument1TypeName
  ??@string inInputArgument2TypeName
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  @formalParameterSignature argList [emptyList] ;
  @unifiedTypeMapIndex argumentTypeIndex ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgument1TypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !inInputArgument2TypeName !here] !?ioUnifiedTypeMap ?argumentTypeIndex] ;
  argList += !argumentTypeIndex ![@formalArgumentPassingModeAST argumentConstantIn] ;
  [!?ioModifierMap insertKey
    ![@lstring new !inModifierName !here]
    !argList
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine enterModifierWithoutArgument
  ?!@modifierMap ioModifierMap
  ??@string inModifierName
  ??@bool inHasCompilerArgument
:
  [!?ioModifierMap insertKey
    ![@lstring new !inModifierName !here]
    ![@formalParameterSignature emptyList]
    !inHasCompilerArgument
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_string
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"setCapacity" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"incIndentation" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"decIndentation" !true ;
  enterModifierWith2InputArguments !?outModifierMap !?ioUnifiedTypeMap !"char" !"uint" !"setCharacterAtIndex" !true ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_lstring
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"string" !"setString" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_lchar
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"char" !"setChar" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_lbool
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"bool" !"setBool" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_luint
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"setUint" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_lsint
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"sint" !"setSint" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_luint64
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint64" !"setUint64" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_lsint64
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"sint64" !"setSint64" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_ldouble
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"double" !"setDouble" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"location" !"setLocation" !false ;
end routine ;

#---------------------------------------------------------------------------*

routine modifierMapFor_data
  ?!@unifiedTypeMap ioUnifiedTypeMap
  !@modifierMap outModifierMap
:
  outModifierMap := [@modifierMap emptyMap] ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendByte" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendShortBE" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendShortLE" !true ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendUIntBE" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"uint" !"appendUIntLE" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"string" !"appendUTF8String" !false ;
  enterModifierWithInputArgument !?outModifierMap !?ioUnifiedTypeMap !"data" !"appendData" !false ;
end routine ;

#---------------------------------------------------------------------------*

#override reader @classGalgasType modifierMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@modifierMap outModifierMap
#:
#  if [mSuperClassIndex isNull] then
#    outModifierMap := [@modifierMap emptyMap] ;
#  else
#    @ACGalgasType superClassType := [mSuperClassIndex mType] ;
#    outModifierMap := [superClassType modifierMap] ;
#  end if ;
#  foreach mAttributeList do
#    @ACGalgasType t := [mAttributeTypeIndex mType] ;
#  #--- set...Attribute... method
#    @formalParameterSignature accessorSignature [emptyList] ;
#    accessorSignature += ![@lstringGalgasType new] ![@formalArgumentPassingModeAST argumentConstantIn] ;
#    accessorSignature += !t ![@formalArgumentPassingModeAST argumentConstantIn] ;
#    [!?outModifierMap insertKey
#      ![@lstring new !"set" . [mAttributeName stringByCapitalizingFirstCharacter] ![mAttributeName location]]
#      !accessorSignature
#      !true
#    ] ;
#  end foreach ;
#end reader ;

#---------------------------------------------------------------------------*

#override reader @listGalgasType modifierMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@modifierMap outModifierMap
#:
#  outModifierMap := [@modifierMap emptyMap] ;
#  @formalParameterSignature extractSignature [emptyList] ;
#  @formalParameterSignature inputSignature [emptyList] ;
#  foreach mAttributeList do
#    @ACGalgasType t  := [mAttributeTypeIndex mType] ;
#    extractSignature += !t ![@formalArgumentPassingModeAST argumentOut] ;
#    inputSignature += !t ![@formalArgumentPassingModeAST argumentConstantIn] ;
#  end foreach ;
#  [!?outModifierMap insertKey
#    ![@lstring new !"popFirst" !here]
#    !extractSignature
#    !true
#  ] ;
#  [!?outModifierMap insertKey
#    ![@lstring new !"popLast" !here]
#    !extractSignature
#    !true
#  ] ;
#  [!?outModifierMap insertKey
#    ![@lstring new !"prependValue" !here]
#    !inputSignature
#    !true
#  ] ;
#  foreach mAttributeList do
#    @ACGalgasType t := [mAttributeTypeIndex mType] ;
#    @formalParameterSignature signature [emptyList] ;
#    signature += ![@uintGalgasType new] ![@formalArgumentPassingModeAST argumentConstantIn] ;
#    signature += !t ![@formalArgumentPassingModeAST argumentOut] ;
#    [!?outModifierMap insertKey
#      ![@lstring new !"set" . [[mAttributeName string] stringByCapitalizingFirstCharacter] . "AtIndex" ![mAttributeName location]]
#      !signature
#      !true
#    ] ;
#  end foreach ;
#end reader ;

#---------------------------------------------------------------------------*

#override reader @sortedlistGalgasType modifierMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@modifierMap outModifierMap
#:
#  outModifierMap := [@modifierMap emptyMap] ;
#  @formalParameterSignature extractSignature [emptyList] ;
#  foreach mAttributeList do
#    @ACGalgasType t := [mAttributeTypeIndex mType] ;
#    extractSignature += !t ![@formalArgumentPassingModeAST argumentOut] ;
#  end foreach ;
#  [!?outModifierMap insertKey
#    ![@lstring new !"popSmallest" !here]
#    !extractSignature
#    !true
#  ] ;
#  [!?outModifierMap insertKey
#    ![@lstring new !"popGreatest" !here]
#    !extractSignature
#    !true
#  ] ;
#end reader ;

#---------------------------------------------------------------------------*

#override reader @mapType modifierMap
#  ?!@unifiedTypeMap ioUnifiedTypeMap
#  !@modifierMap outModifierMap
#:
#  outModifierMap := [@modifierMap emptyMap] ;
#  @formalParameterSignature insertSignature [emptyList] ;
#  @formalParameterSignature removeSignature [emptyList] ;
#  insertSignature += ![@lstringGalgasType new] ![@formalArgumentPassingModeAST argumentConstantIn] ;
#  removeSignature += ![@lstringGalgasType new] ![@formalArgumentPassingModeAST argumentConstantIn] ;
#  foreach mAttributeList do
#    @ACGalgasType t := [mAttributeTypeIndex mType] ;
#    insertSignature += !t ![@formalArgumentPassingModeAST argumentConstantIn] ;
#    removeSignature += !t ![@formalArgumentPassingModeAST argumentOut] ;
#  #--- set...Attribute...forKey methods
#    @formalParameterSignature accessorSignature [emptyList] ;
#    accessorSignature += ![@lstringGalgasType new] ![@formalArgumentPassingModeAST argumentConstantIn] ;
#    accessorSignature += !t ![@formalArgumentPassingModeAST argumentConstantIn] ;
#    [!?outModifierMap insertKey
#      ![@lstring new !"set" . [mAttributeName stringByCapitalizingFirstCharacter] . "ForKey" ![mAttributeName location]]
#      !accessorSignature
#      !true
#    ] ;
#  end foreach ;
##--- Insert Methods
#  foreach mInsertMethodMap do
#    [!?outModifierMap insertKey
#      !key
#      !insertSignature
#      !true
#    ] ;
#  end foreach ;
##--- Remove methods
#  foreach mRemoveMethodMap do
#    [!?outModifierMap insertKey
#      !key
#      !removeSignature
#      !true
#    ] ;
#  end foreach ;
#end reader ;

#---------------------------------------------------------------------------*

end semantics ;
