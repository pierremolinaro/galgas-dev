#---------------------------------------------------------------------------*
#                                                                           *
#  'expression' component parser, as model builder                          *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

syntax parameterArgumentBuilder :
import lexique galgas_scanner in "galgas_scanner.gLexique" ;
import semantics commonSemantics in "commonSemantics.gSemantics" ;
import metamodel expressionMetamodel in "expressionMetamodel.gMetamodel" ;
import metamodel parameterArgumentMetamodel in "parameterArgumentMetamodel.gMetamodel" ;

#------------------------------------------------------------------------------*
#                                                                              *
#          Rules prototypes                                                    *
#                                                                              *
#------------------------------------------------------------------------------*

nonterminal <expression> -> @semanticExpression ;

nonterminal <formal_parameter_list> -> @formalParameters ;

nonterminal <formal_input_parameter_list> -> @formalInputParameterList ;

nonterminal <formal_parameter> -> @formalParameter ;

nonterminal <actual_parameter_list> -> @actualParameters ;

#---------------------------------------------------------------------------*

rule <formal_parameter_list> -> @formalParameters :
  repeat
  while
    <formal_parameter> +> mFormalParameterList ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*

rule <formal_parameter> -> @formalParameter :
  select
    $?$ ;
    mFormalParameterPassingMode := [@formalArgumentPassingMode argumentIn] ;
  or
    $??$ ;
    mFormalParameterPassingMode := [@formalArgumentPassingMode argumentConstantIn] ;
  or
    $?!$ ;
    mFormalParameterPassingMode := [@formalArgumentPassingMode argumentInOut] ;
  or
    $!$ ;
    mFormalParameterPassingMode := [@formalArgumentPassingMode argumentOut] ;
  end select ;
  $type_name$ ? mFormalParameterTypeName ;
  select
    mIsUnused := false ;
  or
    $unused$ ;
    mIsUnused := true ;
  end select ;
  $identifier$ ? mFormalParameterName ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  A C T U A L    P A R A M E T E R    L I S T                              *
#                                                                           *
#---------------------------------------------------------------------------*

rule <actual_parameter_list> -> @actualParameters :
  repeat
  while
    $?$ ;
    select
      $*$ ;
      mActualParameter += ![@inputJokerActualParameter new] ;
    or
      @luint count ;
      $unsigned_literal_integer$ ? count ;
      $*$ ;
      @uint n := [count uint] ;
      if n == 0 then
        error count: "the count value should be > 0" ;
      else
        loop n :
        while n > 0 do
          mActualParameter += ![@inputJokerActualParameter new] ;
          n -- ;
        end loop ;
      end if ;
    end select ;
  while
    $!$ ;
    @semanticExpression e ;
    <expression> -> e ;
    mActualParameter += ![@outputActualParameter new !e] ;
  while
    $!?$ ;
    @lstring outputInputActualParameterName ;
    $identifier$ ?outputInputActualParameterName ;
    mActualParameter += ![@outputInputActualParameter new !outputInputActualParameterName] ;
  while
    $?$ ;
    @lstring inputActualParameterName ;
    $identifier$ ?inputActualParameterName ;
    mActualParameter += ![@inputActualParameter new !inputActualParameterName] ;
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*
#                                                                           *
#  F O R M A L    I N P U T    P A R A M E T E R S                          *
#                                                                           *
#---------------------------------------------------------------------------*

nonterminal <formal_input_parameter> -> @formalInputParameter ;

#---------------------------------------------------------------------------*

rule <formal_input_parameter_list> -> @formalInputParameterList :
  repeat
    <formal_input_parameter> +> mFormalInputParameterList ;
  while
  end repeat ;
end rule ;

#---------------------------------------------------------------------------*

rule <formal_input_parameter> -> @formalInputParameter : 
  $?$ ;
  $type_name$ ? mFormalParameterTypeName ;
  select
    mIsUnused := false ;
  or
    $unused$ ;
    mIsUnused := true ;
  end select ;
  $identifier$ ? mFormalParameterName ;
end rule ;

#---------------------------------------------------------------------------*

end syntax ;
