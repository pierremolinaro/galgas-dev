#---------------------------------------------------------------------------*
#                                                                           *
#  'semantics' component metamodel                                          *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsMetamodel :

import semantics commonSemantics in "commonSemantics.gSemantics" ;
import semantics expressionMetamodel in "expressionMetamodel.gSemantics" ;
import semantics parameterArgumentMetamodel in "parameterArgumentMetamodel.gSemantics" ;
import semantics instructionMetamodel in "instructionMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*

class @semanticsComponentRoot {
  @lstring mSemanticsComponentName ;
  @lstringlist mImportedComponentFileNameList ;
  @semanticDeclarationList mSemanticDeclarationList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    Common Rules                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

class @attributeInCollection {
  @lstring mAttributeTypeName ;
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    D E C L A R A T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @mapMethod {
  @lstring mMethodName ;
  @lstring mGetIDMethodName ;
  @lstring mErrorMessage ;
  @lstring mShadowErrorMessage ;
}

#---------------------------------------------------------------------------*

class @mapDeclaration extends @semanticDeclaration {
  @lstring mMapTypeName ;
  @attributeInCollectionList mAttributeList ;
  @mapMethodList mInsertMethodList ;
  @mapMethodList mSearchMethodList ;
  @mapMethodList mRemoveMethodList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    I N D E X    D E C L A R A T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @mapindexDeclaration extends @semanticDeclaration {
  @lstring mMapIndexName ;
  @lstring mMapTypeName ;
  @lstring mSearchMethodName ;
  @lstring mSearchMethodErrorMessage ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C L A S S    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @abstractMethodDefinition {
  @lstring mMethodName ;
  @formalParameters mSignature ;
}

#---------------------------------------------------------------------------*

list @overridenMethodDefinition {
  @lstring mMethodName ;
  @formalParameters mSignature ;
  @semanticInstructions mInstructionList ;
}

#---------------------------------------------------------------------------*

list @methodDefinition {
  @lstring mMethodName ;
  @formalParameters mSignature ;
  @semanticInstructions mInstructionList ;
}

#---------------------------------------------------------------------------*

list @classMessageDefinition {
  @lstring mMessageName ;
  @lstring mMessageValue ;
}

#---------------------------------------------------------------------------*

class @classDeclaration extends @semanticDeclaration {
  @bool mIsAbstract ;
  @lstring mClassTypeName ;
  @lstring mSuperClassName ; # Empty if no super class
  @attributeInCollectionList mAttributeList ;
  @abstractMethodDefinitionList mAbstractMethodList ;
  @overridenMethodDefinitionList mOverridenMethodList ;
  @methodDefinitionList mMethodList ;
  @classMessageDefinitionList mMessageList ;
  @string mClassMessage ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @listDeclaration extends @semanticDeclaration {
  @lstring mListTypeName ;
  @attributeInCollectionList mAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    D E C L A R A T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

list @sortedListSortDescriptor {
  @lstring mSortedAttributeName ;
  @bool mAscending ;
}

#---------------------------------------------------------------------------*

class @sortedListDeclaration extends @semanticDeclaration {
  @lstring mSortedListTypeName ;
  @attributeInCollectionList mAttributeList ;
  @sortedListSortDescriptorList mSortDescriptorList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

list @enumMessageAssociation {
  @lstring mConstantName ;
  @lstring mMessage ;
}

#---------------------------------------------------------------------------*

list @enumMessageList {
  @lstring mEnumMessageName ;
  @enumMessageAssociationList mMessageAssociationList ;
}

#---------------------------------------------------------------------------*

class @enumModifierCase {
  @lstring mSourceConstantName ;
  @lstring mTargetConstantName ;
  @enumCaseMessage mEnumModifierCaseMessage ;
}

#---------------------------------------------------------------------------*

list @enumModifier {
  @lstring mModifierName ;
  @lstring mLocationFormalArgumentName ;
  @enumModifierCaseList mEnumModifierCaseList ;
}

#---------------------------------------------------------------------------*

class @enumCaseMessage {
}

#---------------------------------------------------------------------------*

list @enumCaseMessageList {
  @enumCaseMessage mEnumCaseMessage ;
}

#---------------------------------------------------------------------------*

class @enumCaseErrorMessage extends @enumCaseMessage {
  @lstring mLocationParameterName ;
  @lstring mMessage ;
}

#---------------------------------------------------------------------------*

class @enumCaseWarningMessage extends @enumCaseMessage {
  @lstring mLocationParameterName ;
  @lstring mMessage ;
}

#---------------------------------------------------------------------------*

class @enumMethod {
  @lstring mMethodName ;
  @lstring mLocationFormalArgumentName ;
  @enumMethodCaseList mEnumMethodCaseList ;
}

#---------------------------------------------------------------------------*

class @enumMethodCase {
  @lstring mConstantName ;
  @enumCaseMessage mEnumMethodCaseMessage ;
}

#---------------------------------------------------------------------------*

class @enumDeclaration extends @semanticDeclaration {
  @lstring mEnumTypeName ;
  @lstringlist mConstructorConstantList ;
  @lstringlist mConstantList ;
  @enumMessageList mEnumMessageList ;
  @enumModifierList mEnumModifierList ;
  @enumMethodList mEnumMethodList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    F I L E W R A P P E R    D E C L A R A T I O N                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @filewrapperTemplate {
  @lstring mFilewrapperTemplateName ;
  @lstring mFilewrapperTemplatePath ;
  @formalInputParameterList mFilewrapperTemplateFormalInputParameters ;
}

#---------------------------------------------------------------------------*

class @filewrapperDeclaration extends @semanticDeclaration {
  @lstring mFilewrapperName ;
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @filewrapperTemplateList mFilewrapperTemplateList ;
}

#---------------------------------------------------------------------------*

end semantics ;
