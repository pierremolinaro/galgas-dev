#---------------------------------------------------------------------------*
#                                                                           *
#  'semantics' component metamodel                                          *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticsMetamodel :
import "instructionMetamodel.gSemantics" ;
import "lexiqueMetamodel.gSemantics" ;
import "optionMetamodel.gSemantics" ;
import "syntaxMetamodel.gSemantics" ;

import semantics lexiqueMetamodel in "lexiqueMetamodel.gSemantics" ;
import semantics parameterArgumentMetamodel in "parameterArgumentMetamodel.gSemantics" ;
import semantics instructionMetamodel in "instructionMetamodel.gSemantics" ;
import semantics optionMetamodel in "optionMetamodel.gSemantics" ;
import semantics syntaxMetamodel in "syntaxMetamodel.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    Common Rules                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

list @attributeInCollectionList {
  @lstring mAttributeTypeName ;
  @lstring mAttributeName ;
  @lstringlist mFeatureList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T M A P    D E C L A R A T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @listmapDeclaration extends @semanticDeclaration {
  @lstring mListmapTypeName ;
  @lstring mAssociatedListTypeName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    D E C L A R A T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @mapMethodList {
  @lstring mMethodName ;
  @lstring mAlternateMethodName ;
  @lstring mErrorMessage ;
  @lstring mShadowErrorMessage ;
}

#---------------------------------------------------------------------------*

class @mapDeclaration extends @semanticDeclaration {
  @lstring mMapTypeName ;
  @lstring mAssociatedEnumTypeName ; # Empty if no associated enum type
  @lstring mAssociatedTerminaisonMethodName ; # Empty if no associated enum type
  @attributeInCollectionList mAttributeList ;
  @mapMethodList mInsertMethodList ;
  @mapMethodList mSearchMethodList ;
  @mapMethodList mRemoveMethodList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M A P    I N D E X    D E C L A R A T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @mapindexDeclaration extends @semanticDeclaration {
  @lstring mMapIndexTypeName ;
  @lstring mMapTypeName ;
  @lstring mSearchMethodName ;
  @lstring mSearchMethodErrorMessage ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    C L A S S    D E C L A R A T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @abstractMethodDefinitionList {
  @lstring mMethodName ;
  @formalParameterList mSignature ;
}

#---------------------------------------------------------------------------*

list @overridenMethodDefinitionList {
  @lstring mMethodName ;
  @formalParameterList mSignature ;
  @semanticInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*

list @methodDefinitionList {
  @lstring mMethodName ;
  @formalParameterList mSignature ;
  @semanticInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*

list @classMessageDefinitionList {
  @lstring mMessageName ;
  @lstring mMessageValue ;
}

#---------------------------------------------------------------------------*

list @lazyAttributeList {
  @location mLocationMagicNumber ;
  @attributeInCollectionList mAttributeList ;
  @semanticInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*

class @classDeclaration extends @semanticDeclaration {
  @bool mIsAbstract ;
  @lstring mClassTypeName ;
  @lstring mSuperClassName ; # Empty if no super class
  @lstringlist mClassFeatureList ;
  @attributeInCollectionList mAttributeList ;
  @abstractMethodDefinitionList mAbstractMethodList ;
  @overridenMethodDefinitionList mOverridenMethodList ;
  @methodDefinitionList mMethodList ;
  @classMessageDefinitionList mMessageList ;
  @lazyAttributeList mLazyAttributeList ;
  @string mClassMessage ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    L I S T    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @listDeclaration extends @semanticDeclaration {
  @lstring mListTypeName ;
  @attributeInCollectionList mAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S T R U C T    D E C L A R A T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @structDeclaration extends @semanticDeclaration {
  @lstring mStructTypeName ;
  @attributeInCollectionList mAttributeList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S O R T E D    L I S T    D E C L A R A T I O N                        *
#                                                                           *
#---------------------------------------------------------------------------*

list @sortedListSortDescriptorList {
  @lstring mSortedAttributeName ;
  @bool mAscending ;
}

#---------------------------------------------------------------------------*

class @sortedListDeclaration extends @semanticDeclaration {
  @lstring mSortedListTypeName ;
  @attributeInCollectionList mAttributeList ;
  @sortedListSortDescriptorList mSortDescriptorList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M    D E C L A R A T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

list @enumMessageAssociationList {
  @lstring mConstantName ;
  @lstring mMessage ;
}

#---------------------------------------------------------------------------*

list @enumMessageList {
  @lstring mEnumMessageName ;
  @enumMessageAssociationList mMessageAssociationList ;
}

#---------------------------------------------------------------------------*

class @enumCaseMessage {
}

#---------------------------------------------------------------------------*

list @enumModifierCaseList {
  @lstring mSourceConstantName ;
  @lstring mTargetConstantName ;
  @enumCaseMessage mEnumModifierCaseMessage ;
}

#---------------------------------------------------------------------------*

list @enumModifierList {
  @lstring mModifierName ;
  @lstring mLocationFormalArgumentName ;
  @enumModifierCaseList mEnumModifierCaseList ;
}

#---------------------------------------------------------------------------*

class @enumCaseErrorMessage extends @enumCaseMessage {
  @lstring mLocationParameterName ;
  @lstring mMessage ;
}

#---------------------------------------------------------------------------*

class @enumCaseWarningMessage extends @enumCaseMessage {
  @lstring mLocationParameterName ;
  @lstring mMessage ;
}

#---------------------------------------------------------------------------*

list @enumMethodCaseList {
  @lstring mConstantName ;
  @enumCaseMessage mEnumMethodCaseMessage ;
}

#---------------------------------------------------------------------------*

list @enumMethodList {
  @lstring mMethodName ;
  @lstring mLocationFormalArgumentName ;
  @enumMethodCaseList mEnumMethodCaseList ;
}

#---------------------------------------------------------------------------*

list @enumOperatorCaseList {
  @lstring mLeftConstantName ;
  @lstring mRightConstantName ;
  @lstring mResultConstantName ;
  @enumCaseMessage mEnumOperatorCaseMessage ;
}

#---------------------------------------------------------------------------*

list @enumOperatorList {
  @lstring mOperatorName ;
  @lstring mLocationFormalArgumentName ;
  @enumOperatorCaseList mEnumOperatorCaseList ;
}

#---------------------------------------------------------------------------*

class @enumDeclaration extends @semanticDeclaration {
  @lstring mEnumTypeName ;
  @lstringlist mConstructorConstantList ;
  @lstringlist mConstantList ;
  @enumMessageList mEnumMessageList ;
  @enumModifierList mEnumModifierList ;
  @enumMethodList mEnumMethodList ;
  @enumOperatorList mEnumOperatorList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    F I L E W R A P P E R    D E C L A R A T I O N                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @filewrapperTemplateList {
  @lstring mFilewrapperTemplateName ;
  @lstring mFilewrapperTemplatePath ;
  @formalInputParameterList mFilewrapperTemplateFormalInputParameters ;
}

#---------------------------------------------------------------------------*

class @filewrapperDeclaration extends @semanticDeclaration {
  @lstring mFilewrapperName ;
  @lstring mFilewrapperPath ;
  @lstringlist mFilewrapperExtensionList ;
  @filewrapperTemplateList mFilewrapperTemplateList ;
}

#---------------------------------------------------------------------------*

class @semanticsComponentRoot {
  @lstring mSemanticsComponentName  ;
  @lstringlist mImportedComponentFileNameList  ;
  @semanticDeclarationStruct mSemanticDeclarations  ;
  @location mEndOfSourceFile  ;
}

#---------------------------------------------------------------------------*

map @parsedLexiqueComponentMap {
  @lexiqueComponentRoot mRoot ;
  insert insertKey error message "the '%K' lexique component has already been parsed" ;
  search searchKey error message "the '%K' lexique component symbol is not parsed" ;
}

#---------------------------------------------------------------------------*

map @parsedSemanticsComponentMap {
  @semanticsComponentRoot mRoot ;
  insert insertKey error message "the '%K' semantics component has already been parsed" ;
  search searchKey error message "the '%K' semantics component symbol is not parsed" ;
}

#---------------------------------------------------------------------------*

map @parsedOptionComponentMap {
  @optionComponentRoot mOptionComponentRoot ;
  insert insertKey error message "the '%K' option component has already been parsed" ;
  search searchKey error message "the '%K' option component symbol is not parsed" ;
}

#---------------------------------------------------------------------------*

map @parsedSyntaxComponentMap {
  @syntaxComponentRoot mSyntaxComponentRoot ;
  insert insertKey error message "the '%K' syntax component has already been parsed" ;
  search searchKey error message "the '%K' syntax component symbol is not parsed" ;
}

#---------------------------------------------------------------------------*

struct @parsedComponentStruct {
  @parsedSemanticsComponentMap mParsedSemanticsComponentMap ;
  @parsedLexiqueComponentMap mParsedLexiqueComponentMap ;
  @parsedSyntaxComponentMap mParsedSyntaxComponentMap ;
  @parsedOptionComponentMap mParsedOptionComponentMap ;
}

#---------------------------------------------------------------------------*

end semantics ;
