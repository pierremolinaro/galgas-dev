#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS scanner component semantics definition                            *
#                                                                           *
#  Copyright (C) 1997-2004 Pierre Molinaro.                                 *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics scanner_semantics :
import semantics common_semantics in "common_semantics.ggs" ;

#------------------------------------------------------------------*

map @typeLexicalAttributesMap {
  @AC_galgasType attributType ;
  insert insertKey error message "the lexical attribute '%K' is already declared in %L" ;
  search searchKey error message "the lexical attribute '%K' is not declared" ;
}

#------------------------------------------------------------------*

map @tagMap {
  insert insertKey error message "the '%K' tag is already declared in %L",
                                 "the '%K' tag declaration shadows the tag declared in %L" ;
  search searchKey error message "the '%K' tag is not declared" ;
}

#------------------------------------------------------------------*

map @lexicalTypeMap {
  @AC_galgasType mAttributType ;
  insert insertKey error message "--- internal error ---" ;
  search searchKey error message "there is no type named '@%K'" ;
}

#------------------------------------------------------------------*
#                       Table des messages d'erreurs               *
#------------------------------------------------------------------*

map @typeTableMessagesErreurs {
  @lstring mErrorMessage ;
  insert insertKey error message "the error message '%K' is already declared in %L" ;
  search searchKey, searchKeyGetIndex error message "the error message '%K' is not declared" ;
}

#------------------------------------------------------------------*
#                       Styles map                                 *
#------------------------------------------------------------------*

map @M_styles {
  @lstring mTitle ;
  insert insertKey error message "the '%K' style is already declared in %L" ;
  search searchKey, searchKeyGetIndex error message "the '%K' style is not declared" ;
}

#------------------------------------------------------------------*
#                       Table des terminaux                        *
#------------------------------------------------------------------*

map @typeTableDefinitionTerminaux {
  @string mErrorMessage ;
  @typeListeAttributsSemantiques attributListeDesAttributs ;
  @luint mStyleIndex ;
  insert insertKey error message "the terminal symbol '$%K$' is already declared in %L" ;
  search searchKey error message "the terminal symbol '$%K$' is not declared" ;
}

#------------------------------------------------------------------*
#                        Tables de noms reserves                   *
#------------------------------------------------------------------*

map @typeTableMotsReserves {
  @lstring attributNomTerminal ;
  insert insertKey error message "the word '%K' is already declared in %L" ;
  search searchKey error message "the word '%K' is not declared" ;
}

#------------------------------------------------------------------*

map @typeTableTablesDeMotsReserves {
  @typeTableMotsReserves attributSimpleTable ;
  insert insertKey error message "the word map '%K' is already declared in %L" ;
  search searchKey error message "the mord map '%K' is not declared" ;
}

#------------------------------------------------------------------*
#                        Liste de conditions lexicales             *
#------------------------------------------------------------------*

abstract class @typeConditionLexicale {
}

class @typeConditionChaine extends @typeConditionLexicale {
  @lstring attributChaine ;
}

class @typeConditionCaractere extends @typeConditionLexicale {
  @lchar attributCaractere ;
}

class @typeConditionIntervalle extends @typeConditionLexicale {
  @lchar attributBorneInf ;
  @lchar attributBorneSup ;
}

list @typeListeConditionsLexicales {
  @typeConditionLexicale attributCondition ;
}

#------------------------------------------------------------------*
#                           Liste des instructions                 *
#------------------------------------------------------------------*

abstract class @typeInstructionLexicale {
}

list @tListeInstructionsLexicales {
  @typeInstructionLexicale attributInstruction ;
}

list @typeListeTestsEtInstructions {
  @typeListeConditionsLexicales attributListeConditions ;
  @tListeInstructionsLexicales attributListeInstructions ;
}

#------------------------------------------------------------------*
#            Arguments d'un appel de routines externes             *
#------------------------------------------------------------------*

abstract class @typeArgumentRoutineExterne {
}

list @typeListeArgumentsRoutExterne {
  @typeArgumentRoutineExterne attributArgument ;
}

class @typeArgumentAttribut extends @typeArgumentRoutineExterne {
  @lstring attributNom ;
  @AC_galgasType attributTypeAttribut ;
}

class @typeArgumentCaractere extends @typeArgumentRoutineExterne {
  @lchar attributCaractere ;
}

class @typeArgumentCaractereCourant extends @typeArgumentRoutineExterne {
}

class @typeArgumentEntier extends @typeArgumentRoutineExterne {
  @luint attributValeur ;
}

class @typeArgumentRoutine extends @typeArgumentRoutineExterne {
  @lstring attributNomRoutine ;
  @typeListeArgumentsRoutExterne attributListeArguments ;
}

#------------------------------------------------------------------*
#                   Error message indexes list                     *
#------------------------------------------------------------------*

list @typeListeMessagesErreur {
  @luint mErrorMessageIndex ;
}

#------------------------------------------------------------------*
#                   definition de l'emission                       *
#------------------------------------------------------------------*

abstract class @typeEmissionParDefaut {
}

class @typeEmissionTerminalParDefaut extends @typeEmissionParDefaut {
  @lstring attributNomTerminal ;
}

class @typeEmissionErreurParDefaut extends @typeEmissionParDefaut {
  @luint mErrorMessageIndex ;
}

list @typeListeRecherche {
  @lstring attributNomAttribut ;
  @lstring attributNomTable ;
}

#------------------------------------------------------------------*
#                           Instructions                           *
#------------------------------------------------------------------*

class @typeInstructionActionExterne extends @typeInstructionLexicale {
  @lstring attributNomRoutineExterne ;
  @typeListeArgumentsRoutExterne attributListeArguments ;
  @typeListeMessagesErreur attributListeMessageErreur ;
}

class @typeInstructionRepetitionLexicale extends @typeInstructionLexicale {
  @tListeInstructionsLexicales attributListeInstructionsDebut ;
  @typeListeTestsEtInstructions attributListeBranches ;
}

class @typeInstructionSiLexical extends @typeInstructionLexicale {
  @typeListeTestsEtInstructions attributListeBranches ;
  @tListeInstructionsLexicales attributBrancheSinon ;
}

class @typeInstructionEmettreSimple extends @typeInstructionLexicale {
  @lstring mTerminal ;
}

class @typeLexicalDropInstruction extends @typeInstructionLexicale {
  @lstring mTerminal ;
}

class @typeLexicalTagInstruction extends @typeInstructionLexicale {
  @lstring mLexicalTagName ;
}

class @typeLexicalRewindAndSendInstruction extends @typeInstructionLexicale {
  @lstring mLexicalTagName ;
  @lstring mTerminal ;
}

class @typeInstructionEmettre extends @typeInstructionLexicale {
  @typeListeRecherche attributListeRecherches ;
  @typeEmissionParDefaut attributEmissionParDefaut ;
}

class @typeInstructionErreurLexicale extends @typeInstructionLexicale {
  @luint mErrorMessageIndex ;
}

#------------------------------------------------------------------*

routine appendToLexicalInstructionList
  ?!@typeListeTestsEtInstructions ioLexicalRulesList
  ??@lstring ioDefinitionString
  ?!@lstring ioTerminalSymbolName
:
#--- Build "Compare lstring" lexical condition
  @typeListeConditionsLexicales lexicalConditionsList [emptyList] ;
  @typeConditionLexicale c := [@typeConditionChaine new !ioDefinitionString] ;
  lexicalConditionsList += !c ;
#--- Build "simple send instruction"
  @typeInstructionLexicale lexicalInstruction
                          := [@typeInstructionEmettreSimple new !ioTerminalSymbolName] ;
  @tListeInstructionsLexicales instructionList [emptyList] ;
  instructionList += !lexicalInstruction ;
#--- Append to list of rules
  ioLexicalRulesList += !lexicalConditionsList !instructionList ;
end routine ;

#------------------------------------------------------------------*
#                   SCANNER DECODING TABLES                        *
#------------------------------------------------------------------*

map @tokensInListMap {
  @lstring mTerminalSymbol ;
  insert insertKey error message "the '%K' character is already declared in %L" ;
  search searchKey error message "the '%K' character is not declared" ;
}

#------------------------------------------------------------------*

end semantics ;
