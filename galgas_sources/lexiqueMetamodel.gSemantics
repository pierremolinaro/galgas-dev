#---------------------------------------------------------------------------*
#                                                                           *
#  'lexique' component metamodel                                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2009 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics lexiqueMetamodel :

#---------------------------------------------------------------------------*

abstract class @lexicalExpression {
}

#---------------------------------------------------------------------------*

abstract class @lexicalInstruction {
}

#---------------------------------------------------------------------------*

list @lexicalInstructionList {
  @lexicalInstruction mInstruction ;
}

#---------------------------------------------------------------------------*

list @templateDelimitorList {
  @lstring mStartString ;
  @lstringlist mOptionList ;
  @lstring mEndString ;
}

#---------------------------------------------------------------------------*

list @templateReplacementList {
  @lstring mMatchString ;
  @lstring mReplacementString ;
  @lstring mReplacementFunction ;
}

#---------------------------------------------------------------------------*

abstract class @abstractLexicalRule {
}

#---------------------------------------------------------------------------*

list @lexicalRuleList {
  @abstractLexicalRule mLexicalRule ;
}

#---------------------------------------------------------------------------*

class @lexicalImplicitRule extends @abstractLexicalRule {
  @lstring mListName ;
}

#---------------------------------------------------------------------------*

class @lexicalExplicitRule extends @abstractLexicalRule {
  @lexicalExpression mLexicalRuleExpression ;
  @lexicalInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*

list @lexicalMessageDeclarationList {
  @lstring mMessageName ;
  @lstring mMessageValue ;
}

#---------------------------------------------------------------------------*

list @lexicalAttributeList {
  @lstring mTypeName ;
  @lstring mName ;
}

#---------------------------------------------------------------------------*

list @lexicalStyleList {
  @lstring mName ;
  @lstring mComment ;
}

#---------------------------------------------------------------------------*

list @terminalDeclarationList {
  @lstring mName ;
  @lstringlist mSentAttributeList ;
  @lstring mErrorMessage ;
  @lstring mStyle ; # Empty string if no style
  @lstringlist mOptionList ;
}

#---------------------------------------------------------------------------*

list @lexicalListEntryList {
  @lstring mEntrySpelling ;
  @lstring mTerminalSpelling ;
  @lstringlist mFeatureList ;
}

#---------------------------------------------------------------------------*

list @lexicalListDeclarationList {
  @lstring mName ;
  @lstring mStyle ; # Empty string if no style
  @lstring mSyntaxErrorMessage ;
  @lstringlist mSentAttributeList ;
  @lexicalListEntryList mEntryList ;  
}

#---------------------------------------------------------------------------*

class @lexicalOrExpression extends @lexicalExpression {
  @lexicalExpression mLeftOperand ;
  @lexicalExpression mRightOperand ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterSetMatch extends @lexicalExpression {
  @lstring mCharacterSetName ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterMatch extends @lexicalExpression {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterIntervalMatch extends @lexicalExpression {
  @lchar mLowerBound ;
  @lchar mUpperBound ;
}

#---------------------------------------------------------------------------*

class @lexicalStringMatch extends @lexicalExpression {
  @lstring mString ;
}

#---------------------------------------------------------------------------*

class @lexicalStringNotMatch extends @lexicalExpression {
  @lstring mString ;
  @lstring mErrorMessage ;
}

#---------------------------------------------------------------------------*

list @lexicalSendSearchList {
  @lstring mAttributeName ;
  @lstring mSearchListName ;
}

#---------------------------------------------------------------------------*

abstract class @lexicalSendDefaultAction {
}

#---------------------------------------------------------------------------*

class @lexicalStructuredSendInstruction extends @lexicalInstruction {
  @lexicalSendSearchList mLexicalSendSearchList ;
  @lexicalSendDefaultAction mLexicalSendDefaultAction ;
}

#---------------------------------------------------------------------------*

class @lexicalSimpleSendInstruction extends @lexicalInstruction {
  @lstring mSentTerminal ;
}

#---------------------------------------------------------------------------*

class @lexicalSendTerminalByDefault extends @lexicalSendDefaultAction {
  @lstring mDefaultSentTerminal ;
}

#---------------------------------------------------------------------------*

class @lexicalErrorByDefault extends @lexicalSendDefaultAction {
  @lstring mDefaultErrorMessageName ;
}

#---------------------------------------------------------------------------*

list @lexicalWhileBranchList {
  @lexicalExpression mWhileExpression ;
  @lexicalInstructionList mWhileInstructionList ;
}

#---------------------------------------------------------------------------*

class @lexicalRepeatInstruction extends @lexicalInstruction {
  @lexicalInstructionList mRepeatedInstructionList ;
  @lexicalWhileBranchList mLexicalWhileBranchList ;
}

#---------------------------------------------------------------------------*

list @lexicalSelectBranchList {
  @lexicalExpression mSelectExpression ;
  @lexicalInstructionList mSelectInstructionList ;
}

#---------------------------------------------------------------------------*

class @lexicalSelectInstruction extends @lexicalInstruction {
  @lexicalSelectBranchList mLexicalSelectBranchList ;
  @lexicalInstructionList mDefaultInstructionList ;
}

#---------------------------------------------------------------------------*

abstract class @abstractLexicalRoutineActualArgument {
  @location mActualPassingModeLocation ;
}

#---------------------------------------------------------------------------*

list @lexicalRoutineCallActualArgumentList {
  @abstractLexicalRoutineActualArgument mLexicalRoutineActualArgument ;
}

#---------------------------------------------------------------------------*

class @lexicalRoutineInstruction extends @lexicalInstruction {
  @lstring mRoutineName ;
  @lexicalRoutineCallActualArgumentList mActualArgumentList ;
  @lstringlist mErrorMessageList ;
}

#---------------------------------------------------------------------------*

class @lexicalAttributeInputOutputArgument extends @abstractLexicalRoutineActualArgument {
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*

abstract class @lexicalRoutineOrFunctionFormalInputArgument {
}

#---------------------------------------------------------------------------*

class @lexicalFormalInputArgument extends @abstractLexicalRoutineActualArgument {
  @lexicalRoutineOrFunctionFormalInputArgument mRoutineOrFunctionFormalInputArgument ;
}

#---------------------------------------------------------------------------*

list @lexicalFunctionCallActualArgumentList {
  @lexicalRoutineOrFunctionFormalInputArgument mLexicalActualInputArgument ;
}

#---------------------------------------------------------------------------*

class @lexicalAttributeInputArgument extends @lexicalRoutineOrFunctionFormalInputArgument {
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterInputArgument extends @lexicalRoutineOrFunctionFormalInputArgument {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @lexicalUnsignedInputArgument extends @lexicalRoutineOrFunctionFormalInputArgument {
  @luint mUnsigned ;
}

#---------------------------------------------------------------------------*

class @lexicalCurrentCharacterInputArgument extends @lexicalRoutineOrFunctionFormalInputArgument {
  @location mLocation ;
}

#---------------------------------------------------------------------------*

class @lexicalFunctionInputArgument extends @lexicalRoutineOrFunctionFormalInputArgument {
  @lstring mFunctionName ;
  @lexicalFunctionCallActualArgumentList mFunctionActualArgumentList ;
}

#---------------------------------------------------------------------------*

class @lexicalDropInstruction extends @lexicalInstruction {
  @lstring mTerminalName ;
}

#---------------------------------------------------------------------------*

class @lexicalErrorInstruction extends @lexicalInstruction {
  @lstring mErrorMessageName ;
}

#---------------------------------------------------------------------------*

class @lexicalWarningInstruction extends @lexicalInstruction {
  @lstring mWarningMessageName ;
}

#---------------------------------------------------------------------------*

class @lexicalTagInstruction extends @lexicalInstruction {
  @lstring mTagName ;
}

#---------------------------------------------------------------------------*

class @lexicalRewindInstruction extends @lexicalInstruction {
  @lstring mTagName ;
  @lstring mTerminalName ;
}

#---------------------------------------------------------------------------*

class @lexicalLogInstruction extends @lexicalInstruction {
}

#---------------------------------------------------------------------------*

class @lexiqueComponentRoot {
  @lstring mLexiqueComponentName  ;
  @bool mIsTemplate feature nogetter ;
  @templateDelimitorList mTemplateDelimitorList feature nogetter ;
  @templateReplacementList mTemplateReplacementList feature nogetter ;
  @lexicalAttributeList mLexicalAttributeList  ;
  @lexicalStyleList mLexicalStyleList feature nogetter ;
  @terminalDeclarationList mTerminalDeclarationList  ;
  @lexicalMessageDeclarationList mLexicalMessageDeclarationList ;
  @lexicalListDeclarationList mLexicalListDeclarationList  ;
  @lexicalRuleList mLexicalRuleList ;
}

#---------------------------------------------------------------------------*

end semantics ;