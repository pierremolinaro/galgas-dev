#---------------------------------------------------------------------------*
#                                                                           *
#  'lexique' component metamodel                                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2008 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics lexiqueMetamodel :

#---------------------------------------------------------------------------*

list @templateDelimitorList {
  @lstring mStartString ;
  @lstring mEndString ;
}

#---------------------------------------------------------------------------*

list @templateReplacementList {
  @lstring mMatchString ;
  @lstring mReplacementString ;
}

#---------------------------------------------------------------------------*

list @lexicalImplicitRuleList {
  @lstring mListName ;
}

#---------------------------------------------------------------------------*

list @lexicalErrorMessageDeclarationList {
  @lstring mMessageName ;
  @lstring mMessageValue ;
}

#---------------------------------------------------------------------------*

list @lexicalAttributeList {
  @lstring mTypeName ;
  @lstring mName ;
}

#---------------------------------------------------------------------------*

list @lexicalStyleList {
  @lstring mName ;
  @lstring mComment ;
}

#---------------------------------------------------------------------------*

list @terminalDeclarationList {
  @lstring mName ;
  @lstringlist mSentAttributeList ;
  @lstring mErrorMessage ;
  @lstring mStyle ; # Empty string if no style
}

#---------------------------------------------------------------------------*

list @lexicalListEntryList {
  @lstring mEntrySpelling ;
  @lstring mTerminalSpelling ;
}

#---------------------------------------------------------------------------*

list @lexicalListDeclarationList {
  @lstring mName ;
  @lstring mStyle ; # Empty string if no style
  @lstring mErrorMessage ;
  @lstringlist mSentAttributeList ;
  @lexicalListEntryList mEntryList ;  
}

#---------------------------------------------------------------------------*

abstract class @lexicalExpression {
}

#---------------------------------------------------------------------------*

list @lexicalInstructionList ;

#---------------------------------------------------------------------------*

list @lexicalExplicitRuleList {
  @lexicalExpression mLexicalRuleExpression ;
  @lexicalInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*

class @lexicalOrExpression extends @lexicalExpression {
  @lexicalExpression mLeftOperand ;
  @lexicalExpression mRightOperand ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterMatch extends @lexicalExpression {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterIntervalMatch extends @lexicalExpression {
  @lchar mLowerBound ;
  @lchar mUpperBound ;
}

#---------------------------------------------------------------------------*

class @lexicalStringMatch extends @lexicalExpression {
  @lstring mString ;
}

#---------------------------------------------------------------------------*

class @lexicalStringNotMatch extends @lexicalExpression {
  @lstring mString ;
  @lstring mErrorMessage ;
}

#---------------------------------------------------------------------------*

abstract class @lexicalInstruction {
}

#---------------------------------------------------------------------------*

list @lexicalSendSearchList ;

#---------------------------------------------------------------------------*

abstract class @lexicalSendDefaultAction {
}

#---------------------------------------------------------------------------*

class @lexicalStructuredSendInstruction extends @lexicalInstruction {
  @lexicalSendSearchList mLexicalSendSearchList ;
  @lexicalSendDefaultAction mLexicalSendDefaultAction ;
}

#---------------------------------------------------------------------------*

class @lexicalSimpleSendInstruction extends @lexicalInstruction {
  @lstring mSentTerminal ;
}

#---------------------------------------------------------------------------*

class @lexicalSendTerminalByDefault extends @lexicalSendDefaultAction {
  @lstring mDefaultSentTerminal ;
}

#---------------------------------------------------------------------------*

class @lexicalErrorByDefault extends @lexicalSendDefaultAction {
  @lstring mDefaultErrorMessageName ;
}

#---------------------------------------------------------------------------*

list @lexicalSendSearchList {
  @lstring mAttributeName ;
  @lstring mSearchListName ;
}

#---------------------------------------------------------------------------*

list @lexicalWhileBranchList ;
list @lexicalSelectBranchList ;

#---------------------------------------------------------------------------*

class @lexicalRepeatInstruction extends @lexicalInstruction {
  @lexicalInstructionList mRepeatedInstructionList ;
  @lexicalWhileBranchList mLexicalWhileBranchList ;
}

#---------------------------------------------------------------------------*

list @lexicalWhileBranchList {
  @lexicalExpression mWhileExpression ;
  @lexicalInstructionList mWhileInstructionList ;
}

#---------------------------------------------------------------------------*

class @lexicalSelectInstruction extends @lexicalInstruction {
  @lexicalSelectBranchList mLexicalWhileBranchList ;
  @lexicalInstructionList mDefaultInstructionList ;
}

#---------------------------------------------------------------------------*

list @lexicalInstructionList {
  @lexicalInstruction mInstructionList ;
}

#---------------------------------------------------------------------------*

list @lexicalSelectBranchList {
  @lexicalExpression mSelectExpression ;
  @lexicalInstructionList mSelectInstructionList ;
}

#---------------------------------------------------------------------------*

list @lexicalActualArgumentList ;

#---------------------------------------------------------------------------*

class @lexicalActionInstruction extends @lexicalInstruction {
  @lstring mActionName ;
  @lexicalActualArgumentList mActualArgumentList ;
  @lstringlist mErrorMessageList ;
}

#---------------------------------------------------------------------------*

abstract class @lexicalActualArgument {
}

#---------------------------------------------------------------------------*

list @lexicalActualArgumentList {
  @lexicalActualArgument mLexicalActualArgument ;
}

#---------------------------------------------------------------------------*

class @lexicalAttributeArgument extends @lexicalActualArgument {
  @lstring mAttributeName ;
}

#---------------------------------------------------------------------------*

class @lexicalCharacterArgument extends @lexicalActualArgument {
  @lchar mCharacter ;
}

#---------------------------------------------------------------------------*

class @lexicalCurrentCharacterArgument extends @lexicalActualArgument {
}

#---------------------------------------------------------------------------*

class @lexicalFunctionArgument extends @lexicalActualArgument {
  @lstring mFunctionName ;
  @lexicalActualArgumentList mFunctionActualArgumentList ;
}

#---------------------------------------------------------------------------*

class @lexicalDropInstruction extends @lexicalInstruction {
  @lstring mTerminalName ;
}

#---------------------------------------------------------------------------*

class @lexicalErrorInstruction extends @lexicalInstruction {
  @lstring mErrorMessageName ;
}

#---------------------------------------------------------------------------*

class @lexicalTagInstruction extends @lexicalInstruction {
  @lstring mTagName ;
}

#---------------------------------------------------------------------------*

class @lexicalRewindInstruction extends @lexicalInstruction {
  @lstring mTagName ;
  @lstring mTerminalName ;
}

#---------------------------------------------------------------------------*

class @lexicalLogInstruction extends @lexicalInstruction {
}

#---------------------------------------------------------------------------*

class @lexiqueComponentRoot {
  @lstring mLexiqueComponentName ;
  @bool mIsTemplate ;
  @templateDelimitorList mTemplateDelimitorList ;
  @templateReplacementList mTemplateReplacementList ;
  @lexicalAttributeList mLexicalAttributeList ;
  @lexicalStyleList mLexicalStyleList ;
  @terminalDeclarationList mTerminalDeclarationList ;
  @lexicalErrorMessageDeclarationList mLexicalErrorMessageDeclarationList ;
  @lexicalListDeclarationList mLexicalListDeclarationList ;
  @lexicalImplicitRuleList mLexicalImplicitRuleList ;
  @lexicalExplicitRuleList mLexicalExplicitRuleList ;
}

#---------------------------------------------------------------------------*

end semantics ;