#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS main program definition                                           *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

program galgas_prgm_v1 "version GALGAS_BETA_VERSION" :
  import semantics lexiqueSemantics in "lexiqueSemantics.gSemantics" ;
  import semantics projectGlobalCheckings in "projectGlobalCheckings.gSemantics" ;
  import semantics projectCreation in "projectCreation.gSemantics" ;
  import semantics lexiqueCompilation in "lexiqueCompilation.gSemantics" ;
  import semantics guiCompilation in "guiCompilation.gSemantics" ;
  import semantics syntaxCompilation in "syntaxCompilation.gSemantics" ;
  import semantics predefinedTypes in "predefinedTypes.gSemantics" ;
  import semantics programComponentCompilation in "programComponentCompilation.gSemantics" ;
  import grammar galgas_LL1_grammar in "galgas_LL1_grammar.gGrammar" ;
  import grammar projectLL1grammar in "projectLL1grammar.gGrammar" ;
  import semantics targetGeneration in "targetGeneration.gSemantics" ;

  import "lexiqueSemantics.gSemantics" ;
  import "projectGlobalCheckings.gSemantics" ;
  import "projectCreation.gSemantics" ;
  import "lexiqueCompilation.gSemantics" ;
  import "guiCompilation.gSemantics" ;
  import "syntaxCompilation.gSemantics" ;
  import "predefinedTypes.gSemantics" ;
  import "programComponentCompilation.gSemantics" ;
  import "galgas_LL1_grammar.gGrammar" ;
  import "projectLL1grammar.gGrammar" ;
  import "targetGeneration.gSemantics" ;

#---------------------------------------------------------------------------*

before {
#--- Check definition of 'LIBPM_PATH' environnement variable
  const @string libpmVarName := "LIBPM_PATH" ;
  if not [libpmVarName doesEnvironmentVariableExist] then
    error here : "the '" . libpmVarName
    . "' environnement variable is not set; GALGAS requires it to be defined with the absolute path to the 'libpm' directory" ;
  else
    const @string libpmPosixPath := [[@string stringWithEnvironmentVariable !libpmVarName] unixPathWithNativePath] ;
    if not [libpmPosixPath directoryExists] then
      error here : "the '" . libpmVarName
      . "' environnement variable is set to '" . [@string stringWithEnvironmentVariable !libpmVarName]
      . "', but this value does not designate any directory (it should designate the 'libpm' directory" ;
    else
      const @string libpmVersionFilePath := libpmPosixPath . "/version_libpm.h" ;
      if not [libpmVersionFilePath fileExists] then
        error here : "the '" . libpmVarName
        . "' environnement variable is set to '" . [@string stringWithEnvironmentVariable !libpmVarName]
        . "', but this value does not designate a valid 'libpm' directory (it does not contain the 'version_libpm.h' file)" ;
      end if ;
    end if ;
  end if ;
#--- Generate project
  const @string creationProjectName := [option galgas_cli_options.create_project value] ;
  projectCreation !creationProjectName ;
#--- Print predefined lexical action
  if [option galgas_cli_options.printPredefinedLexicalActions value] then
    printPredefinedLexicalActions ;
  end if ;
#--- Generate predefined files
  generatePredefinedTypeFiles
    ![option galgas_cli_options.generatePredefinedTypes value]
  ;
}

#---------------------------------------------------------------------------*

when . "gOption"
message "a GALGAS option source file"
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
  ] ;
  compileOptionComponent !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct ;
}

#---------------------------------------------------------------------------*

when . "gLexique"
message "a GALGAS lexique source file"
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
  ] ;
  compileLexiqueComponent !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct ;
}

#---------------------------------------------------------------------------*

when . "gSemantics"
message "a GALGAS semantics source file"
??@lstring inSourceFile {
  if not [option galgas_cli_options.legacyCodeGeneration value] then
    @parsedComponentStruct parsedComponentStruct [new
      ![@parsedSemanticsComponentMap emptyMap]
      ![@parsedLexiqueComponentMap emptyMap]
      ![@parsedSyntaxComponentMap emptyMap]
      ![@parsedOptionComponentMap emptyMap]
      ![@parsedGrammarComponentMap emptyMap]
      ![@parsedProgramComponentMap emptyMap]
    ] ;
    compileSemanticsComponent !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct;
  else
    @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
    @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
    @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
    @M_grammarComponents grammarComponentsMap [emptyMap] ;
    @M_optionComponents optionComponentsMap [emptyMap] ;
    @EXsemanticContext semanticContext [new
      ![@M_filewrappersEX emptyMap]
      ![@stringset emptySet]
      ![@EXcategoryMethodMap emptyMap]
      ![@EXcategoryReaderMap emptyMap]
      ![@EXcategoryTemplateMap emptyMap]
    ] ;
    grammar galgas_LL1_grammar in inSourceFile dependency "galgas-dep" in "DEPENDENCIES"
      !?lexiqueMapForUse
      !?semanticsComponentsMap
      !?syntaxComponentsMap
      !?grammarComponentsMap
      !?optionComponentsMap
      !?semanticContext
    ;
  end if ;
}

#---------------------------------------------------------------------------*

when . "gSyntax"
message "a GALGAS syntax source file"
??@lstring inSourceFile {
  if not [option galgas_cli_options.legacyCodeGeneration value] then
    @parsedComponentStruct parsedComponentStruct [new
      ![@parsedSemanticsComponentMap emptyMap]
      ![@parsedLexiqueComponentMap emptyMap]
      ![@parsedSyntaxComponentMap emptyMap]
      ![@parsedOptionComponentMap emptyMap]
      ![@parsedGrammarComponentMap emptyMap]
      ![@parsedProgramComponentMap emptyMap]
    ] ;
    compileSyntaxComponent !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct;
  else
    @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
    @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
    @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
    @M_grammarComponents grammarComponentsMap [emptyMap] ;
    @M_optionComponents optionComponentsMap [emptyMap] ;
    @EXsemanticContext semanticContext [new
      ![@M_filewrappersEX emptyMap]
      ![@stringset emptySet]
      ![@EXcategoryMethodMap emptyMap]
      ![@EXcategoryReaderMap emptyMap]
      ![@EXcategoryTemplateMap emptyMap]
    ] ;
    grammar galgas_LL1_grammar in inSourceFile dependency "galgas-dep" in "DEPENDENCIES"
      !?lexiqueMapForUse
      !?semanticsComponentsMap
      !?syntaxComponentsMap
      !?grammarComponentsMap
      !?optionComponentsMap
      !?semanticContext
    ;
  end if ;
}

#---------------------------------------------------------------------------*

when . "gGrammar"
message "a GALGAS grammar source file"
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
  ] ;
  compileGrammarComponent
    !inSourceFile
    !outputDirectory [!inSourceFile]
    ![inSourceFile stringByDeletingLastPathComponent]
    !?parsedComponentStruct;
}

#---------------------------------------------------------------------------*

when . "gGui"
message "a GALGAS GUI source file"
??@lstring inSourceFile {
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
  ] ;
  compileGuiComponent !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct ;
}

#---------------------------------------------------------------------------*

when . "gProgram"
message "a GALGAS program source file"
??@lstring inSourceFile {
  if not [option galgas_cli_options.legacyCodeGeneration value] then
    @parsedComponentStruct parsedComponentStruct [new
      ![@parsedSemanticsComponentMap emptyMap]
      ![@parsedLexiqueComponentMap emptyMap]
      ![@parsedSyntaxComponentMap emptyMap]
      ![@parsedOptionComponentMap emptyMap]
      ![@parsedGrammarComponentMap emptyMap]
      ![@parsedProgramComponentMap emptyMap]
    ] ;
    compileProgramComponent !inSourceFile !outputDirectory [!inSourceFile] !?parsedComponentStruct;
  else
    @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
    @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
    @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
    @M_grammarComponents grammarComponentsMap [emptyMap] ;
    @M_optionComponents optionComponentsMap [emptyMap] ;
    @EXsemanticContext semanticContext [new
      ![@M_filewrappersEX emptyMap]
      ![@stringset emptySet]
      ![@EXcategoryMethodMap emptyMap]
      ![@EXcategoryReaderMap emptyMap]
      ![@EXcategoryTemplateMap emptyMap]
    ] ;
    grammar galgas_LL1_grammar in inSourceFile dependency "galgas-dep" in "DEPENDENCIES"
      !?lexiqueMapForUse
      !?semanticsComponentsMap
      !?syntaxComponentsMap
      !?grammarComponentsMap
      !?optionComponentsMap
      !?semanticContext
    ;
  end if ;
}

#----------------------------------------------------------------------------*
#                                                                            *
#          Project                                                           *
#                                                                            *
#----------------------------------------------------------------------------*

when . "gProject"
message "a GALGAS project source file"
??@lstring inSourceFile {
  const @string outputDirectory := outputDirectory [!inSourceFile] ;
#--- Parse metamodel component
  @projectComponentAST projectComponent ;
  grammar projectLL1grammar in inSourceFile ?projectComponent ;
#--- Check project name
  if [[projectComponent mProjectName] string] != [[inSourceFile lastPathComponent] stringByDeletingPathExtension] then
    error [projectComponent mProjectName] 
    :"the project name ('" . [projectComponent mProjectName] . "') should be the same as the source file base name ('"
    . [[inSourceFile lastPathComponent] stringByDeletingPathExtension] . "')" ;
  end if ;
#--- Check target name
  const @string targetName := [[projectComponent mTargetName] string] ;
  if targetName == "" then
    error [projectComponent mTargetName]: "the target name should not be empty" ;
  end if ;
#--- Update targets
  updateTargets
    !inSourceFile
    ![projectComponent mProjectName]
    !targetName
    ![projectComponent mGenerationFeatureList]
    ![projectComponent mProjectSourceList]
    ![option galgas_cli_options.legacyCodeGeneration value]
  ;
#--- Parset Component struct
  @parsedComponentStruct parsedComponentStruct [new
    ![@parsedSemanticsComponentMap emptyMap]
    ![@parsedLexiqueComponentMap emptyMap]
    ![@parsedSyntaxComponentMap emptyMap]
    ![@parsedOptionComponentMap emptyMap]
    ![@parsedGrammarComponentMap emptyMap]
    ![@parsedProgramComponentMap emptyMap]
  ] ;
#--- Parse galgas sources
  foreach [projectComponent mProjectSourceList] do
    @string extension := [mFilePath pathExtension] ;
    @lstring fullFilePath [new
      ![inSourceFile stringByDeletingLastPathComponent] . "/" . [mFilePath string]
      ![mFilePath location]
    ] ;
    if mSourceKind != [@sourceFileKind externSourceFile] then
      message "*** Compiling '" . mFilePath . "'\n" ;
    end if ;
    switch mSourceKind
    when externSourceFile :
    when guiSourceFile :
      if extension == "gGui" then
        compileGuiComponent !fullFilePath ! outputDirectory !?parsedComponentStruct ;
      else
        error mFilePath:"extension of a gui component should be '.gGui'." ;
      end if ;
    when lexiqueSourceFile :
      if extension == "gLexique" then
        compileLexiqueComponent !fullFilePath ! outputDirectory !?parsedComponentStruct ;
      else
        error mFilePath:"extension of a lexique component should be '.gLexique'." ;
      end if ;
    when optionSourceFile :
      if extension == "gOption" then
        compileOptionComponent !fullFilePath ! outputDirectory !?parsedComponentStruct ;
      else
        error mFilePath:"extension of an option component should be '.gOption'." ;
      end if ;
    when semanticsSourceFile :
      if extension == "gSemantics" then
        if not [option galgas_cli_options.legacyCodeGeneration value] then
          compileSemanticsComponent !fullFilePath ! outputDirectory !?parsedComponentStruct ;
        else
          @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
          @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
          @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
          @M_grammarComponents grammarComponentsMap [emptyMap] ;
          @M_optionComponents optionComponentsMap [emptyMap] ;
          @EXsemanticContext semanticContext [new
            ![@M_filewrappersEX emptyMap]
            ![@stringset emptySet]
            ![@EXcategoryMethodMap emptyMap]
            ![@EXcategoryReaderMap emptyMap]
            ![@EXcategoryTemplateMap emptyMap]
          ] ;
          grammar galgas_LL1_grammar in fullFilePath dependency "galgas-dep" in "DEPENDENCIES"
            !?lexiqueMapForUse
            !?semanticsComponentsMap
            !?syntaxComponentsMap
            !?grammarComponentsMap
            !?optionComponentsMap
            !?semanticContext
          ;
        end if ;
      else
        error mFilePath:"extension of a semantics component should be '.gSemantics'." ;
      end if ;
    when syntaxSourceFile :
      if extension == "gSyntax" then
        if not [option galgas_cli_options.legacyCodeGeneration value] then
          compileSyntaxComponent !fullFilePath !outputDirectory [!inSourceFile] !?parsedComponentStruct;
        else
          @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
          @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
          @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
          @M_grammarComponents grammarComponentsMap [emptyMap] ;
          @M_optionComponents optionComponentsMap [emptyMap] ;
          @EXsemanticContext semanticContext [new
            ![@M_filewrappersEX emptyMap]
            ![@stringset emptySet]
            ![@EXcategoryMethodMap emptyMap]
            ![@EXcategoryReaderMap emptyMap]
            ![@EXcategoryTemplateMap emptyMap]
          ] ;
          grammar galgas_LL1_grammar in fullFilePath dependency "galgas-dep" in "DEPENDENCIES"
            !?lexiqueMapForUse
            !?semanticsComponentsMap
            !?syntaxComponentsMap
            !?grammarComponentsMap
            !?optionComponentsMap
            !?semanticContext
          ;
        end if ;
      else
        error mFilePath:"extension of a syntax component should be '.gSyntax'." ;
      end if ;
    when grammarSourceFile :
      if extension == "gGrammar" then
        compileGrammarComponent
          !fullFilePath
          !outputDirectory [!inSourceFile]
          ![inSourceFile stringByDeletingLastPathComponent]
          !?parsedComponentStruct
        ;
      else
        error mFilePath:"extension of a grammar component should be '.gGrammar'." ;
      end if ;
    when programSourceFile :
      if extension == "gProgram" then
        if not [option galgas_cli_options.legacyCodeGeneration value] then
          compileProgramComponent !fullFilePath !outputDirectory !?parsedComponentStruct ;
        else
          @M_lexiqueComponents lexiqueMapForUse [emptyMap] ;
          @M_semanticsComponents semanticsComponentsMap [emptyMap] ;
          @M_syntaxComponents syntaxComponentsMap [emptyMap] ;
          @M_grammarComponents grammarComponentsMap [emptyMap] ;
          @M_optionComponents optionComponentsMap [emptyMap] ;
          @EXsemanticContext semanticContext [new
            ![@M_filewrappersEX emptyMap]
            ![@stringset emptySet]
            ![@EXcategoryMethodMap emptyMap]
            ![@EXcategoryReaderMap emptyMap]
            ![@EXcategoryTemplateMap emptyMap]
          ] ;
          grammar galgas_LL1_grammar in fullFilePath dependency "galgas-dep" in "DEPENDENCIES"
            !?lexiqueMapForUse
            !?semanticsComponentsMap
            !?syntaxComponentsMap
            !?grammarComponentsMap
            !?optionComponentsMap
            !?semanticContext
          ;
        end if ;
      else
        error mFilePath:"extension of a program component should be '.gProgram'." ;
      end if ;
    end switch ;
  end foreach ;
#--- Perform global checkings
  if [@uint errorCount] == 0 then
    message "*** Perform global checkings\n" ;
    performProjectGlobalCheckings !parsedComponentStruct ![projectComponent mEndOfSourceFile] ;
  end if ;
}

#---------------------------------------------------------------------------*

after {
}

#---------------------------------------------------------------------------*

end program ;

#---------------------------------------------------------------------------*
