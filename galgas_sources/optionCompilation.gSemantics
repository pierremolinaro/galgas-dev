#---------------------------------------------------------------------------*
#                                                                           *
#  Treewalking for generating option header file                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics optionCompilation :
import "optionMetamodel.gSemantics" ;
import semantics optionMetamodel in "optionMetamodel.gSemantics" ;
import semantics optionSemantics in "optionSemantics.gSemantics" ;
import grammar optionLL1grammar in "optionLL1grammar.gGrammar" ;

#---------------------------------------------------------------------------*

routine optionHeaderGeneration
  ??@string inStartDirectory
  ??@string inOptionComponentName
  ??@commandLineOptionMap inBoolOptionMap
  ??@commandLineOptionMap inUIntOptionMap
  ??@commandLineOptionMap inStringOptionMap
:
#--- User zone 2
  @string generatedUserZone2 := "" ;
  generatedUserZone2 .=
    "#ifndef " . inOptionComponentName . "_0_DEFINED\n"
  . "#define " . inOptionComponentName . "_0_DEFINED\n"
  . "#include \"command_line_interface/AC_CLI_Options.h\"\n\n"
  . [@string CppLineComment] ;

#--- User zone 3
  @string generatedUserZone3 := "" ;
  [!?generatedUserZone3 setCapacity !5000] ;
  generatedUserZone3 .=
    [@string CppTitleComment !"Command Line Options definitions class"]
  . "class " . inOptionComponentName . " : public AC_CLI_Options {\n"
    "//--- Constructor\n"
    "  public : " . inOptionComponentName . " (void) ;\n"
    "\n"
    "//--- Boolean Command Line Interface Options\n"
    "  public : virtual sint32 getBoolOptionsCount (void) const ;\n\n"
    "  public : virtual bool\n"
    "  getBoolOptionValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual void\n"
    "  setBoolOptionValue (const sint32 inIndex, const bool inValue) ;\n\n"
    "  public : virtual char\n"
    "  getBoolOptionChar (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getBoolOptionString (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getBoolOptionDescription (const sint32 inIndex) const ;\n\n"
    "  public : virtual bool\n"
    "  boolOptionValueFromKeys (const char * inModuleName,\n"
    "                           const char * inOptionName,\n"
    "                           bool * outFound) const ;\n\n"
    "\n"
    "//--- Unsigned integer Command Line Interface Options\n"
    "  public : virtual sint32 getUintOptionsCount (void) const ;\n\n"
    "  public : virtual uint32\n"
    "  getUintOptionValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual uint32\n"
    "  getUintOptionDefaultValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual void\n"
    "  setUintOptionValue (const sint32 inIndex, const uint32 inValue) ;\n\n"
    "  public : virtual char\n"
    "  getUintOptionChar (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getUintOptionString (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getUintOptionDescription (const sint32 inIndex) const ;\n\n"
    "  public : virtual uint32\n"
    "  uintOptionValueFromKeys (const char * inModuleName,\n"
    "                           const char * inOptionName,\n"
    "                           bool * outFound) const ;\n"
    "\n"
    "//--- String Command Line Interface Options\n"
    "  public : virtual sint32 getStringOptionsCount (void) const ;\n\n"
    "  public : virtual C_String\n"
    "  getStringOptionValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual void\n"
    "  setStringOptionValue (const sint32 inIndex, const C_String & inValue) ;\n\n"
    "  public : virtual char\n"
    "  getStringOptionChar (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getStringOptionString (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getStringOptionDescription (const sint32 inIndex) const ;\n\n"
    "  public : virtual C_String\n"
    "  stringOptionValueFromKeys (const char * inModuleName,\n"
    "                             const char * inOptionName,\n"
    "                             bool * outFound) const ;\n"
    "\n"
    "//--- Private arraies : current options values\n"
    "  private : bool mBoolOptionValues [" . [([inBoolOptionMap count] + 1) string] . "] ;\n"
    "  private : uint32 mUintOptionValues [" . [([inUIntOptionMap count] + 1) string] . "] ;\n"
    "  private : C_String mStringOptionValues [" . [([inStringOptionMap count] + 1) string] . "] ;\n"
    "  private : TC_UniqueArray <C_String> mStringValue ;\n"
    "} ;\n\n"
#--- End of ".h" file
  . [@string CppLineComment]
  . "#endif\n"
  ;

#--- Generate header file
  [@string generateFile
    !inStartDirectory
    !inOptionComponentName . ".h"
    !"//"
    !"\n\n" # Defaut user zone1
    !generatedUserZone2
    !"\n\n" # Defaut user zone2
    !generatedUserZone3
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine optionImplementationGeneration
  ??@string inStartDirectory
  ??@string inOptionComponentName
  ??@commandLineOptionMap inBoolOptionMap
  ??@commandLineOptionMap inUIntOptionMap
  ??@commandLineOptionMap inStringOptionMap
:
#--- User zone 2
  @string generatedUserZone2 := [@string CppLineComment] ;
  generatedUserZone2 .=
    "#include \"version_libpm.h\"\n"
    "#if LIBPM_VERSION != THE_LIBPM_VERSION\n"
    "  #error \"This file has been compiled with a version of GALGAS different than the version of libpm\"\n"
    "#endif\n\n"
    "#include <string.h>\n\n"
    "#include \"" . inOptionComponentName . ".h\"\n\n" ;

#--- User zone 3
  @string generatedUserZone3 := "" ;
  [!?generatedUserZone3 setCapacity !5000] ;
  generatedUserZone3 .=
    [@string CppTitleComment !"C O N S T R U C T O R"]
  . inOptionComponentName . "::" . inOptionComponentName . " (void)\n"
  . ":mStringValue (1 COMMA_HERE) {\n" ;
  @uint index := 0 ;
  foreach inBoolOptionMap (4*) do
    generatedUserZone3 .= "  mBoolOptionValues [" . [index string] . "] = false ;\n" ;
    index ++ ;
  end foreach ;
  generatedUserZone3 .= "  mBoolOptionValues [" . [index string] . "] = false ; // Extra unused entry\n" ;
  index := 0 ;
  foreach inUIntOptionMap (4*) do
    generatedUserZone3 .= "  mUintOptionValues [" . [index string] . "] = 0 ;\n" ;
    index ++ ;
  end foreach ;
  generatedUserZone3 .= "  mUintOptionValues [" . [index string] . "] = 0 ; // Extra unused entry\n"
    "}\n\n" ;

#--------------------------------------- Get bool options count
  generatedUserZone3 .= [@string CppTitleComment !"G E T    B O O L    O P T I O N S    C O U N T"]
  . "sint32 " . inOptionComponentName . "::getBoolOptionsCount (void) const {\n"
  . "  return " . [[inBoolOptionMap count] string] . " ;\n"
    "}\n\n" ;

#--------------------------------------- Get bool option value
  generatedUserZone3.= [@string CppTitleComment !"G E T    B O O L    O P T I O N    V A L U E"]
  . "bool " . inOptionComponentName
  . "::getBoolOptionValue (const sint32 inIndex) const {\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inBoolOptionMap count] string] . ")) ? mBoolOptionValues [inIndex] : false ;\n"
    "}\n\n" ;

#--------------------------------------- Set bool option value
  generatedUserZone3.= [@string CppTitleComment !"S E T    B O O L    O P T I O N    V A L U E"]
  . "void " . inOptionComponentName
  . "::setBoolOptionValue (const sint32 inIndex, const bool inValue) {\n"
    "  if ((inIndex >= 0) && (inIndex < " . [[inBoolOptionMap count] string] . ")) {\n"
    "    mBoolOptionValues [inIndex] = inValue ;\n"
    "  }\n"
    "}\n\n" ;

#--------------------------------------- Get bool option char
  generatedUserZone3 .= [@string CppTitleComment !"G E T    B O O L    O P T I O N    C H A R A C T E R"]
  . "char " . inOptionComponentName
  . "::getBoolOptionChar (const sint32 inIndex) const {\n"
    "  const char kCharArray [". [([inBoolOptionMap count] + 1) string] . "] = {" ;
  foreach inBoolOptionMap (* @lchar kOptionChar 2*) do
    generatedUserZone3.= [@string CppChar ![kOptionChar char]] . ", " ;
  end foreach ;
  generatedUserZone3 .= "'\\0'} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inBoolOptionMap count] string] . ")) ? kCharArray [inIndex] : '\\0' ;\n"
    "}\n\n" ;

#--------------------------------------- Get bool option string
  generatedUserZone3.= [@string CppTitleComment !"G E T    B O O L    O P T I O N    S T R I N G"]
  . "const char * " . inOptionComponentName
  . "::getBoolOptionString (const sint32 inIndex) const {\n"
    "  const char * kStringArray [". [([inBoolOptionMap count] + 1) string] . "] = {" ;
  foreach inBoolOptionMap (2* @lstring kOptionString *) do
    generatedUserZone3.= [@string CppString ![kOptionString string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
     "\"\"} ;\n"
     "  return ((inIndex >= 0) && (inIndex < " . [[inBoolOptionMap count] string] . ")) ? kStringArray [inIndex] : \"\" ;\n"
     "}\n\n" ;

#--------------------------------------- Get bool description string
  generatedUserZone3.= [@string CppTitleComment !"G E T    B O O L    O P T I O N    D E S C R I P T I O N"]
  . "const char * " . inOptionComponentName
  . "::getBoolOptionDescription (const sint32 inIndex) const {\n"
  . "  const char * kDescriptionArray [". [([inBoolOptionMap count] + 1) string] . "] = {" ;
  foreach inBoolOptionMap (3* @lstring kOptionComment) do
    generatedUserZone3.= [@string CppString ![kOptionComment string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
     "\"\"} ;\n"
     "  return ((inIndex >= 0) && (inIndex < " . [[inBoolOptionMap count] string] . ")) ? kDescriptionArray [inIndex] : \"\" ;\n"
     "}\n\n" ;

#--------------------------------------- Get bool option value from keys
  generatedUserZone3.= [@string CppTitleComment !"G E T    B O O L    O P T I O N    V A L U E    F R O M    K E Y S"]
  . "bool " . inOptionComponentName . "::\n"
    "boolOptionValueFromKeys (const char * inModuleName,\n"
    "                         const char * inOptionName,\n"
    "                         bool * outFound) const {\n"
  . "  const char * kKeyArray [". [([inBoolOptionMap count] + 1) string] . "] = {" ;
  foreach inBoolOptionMap (@lstring kKey 3*) do
    generatedUserZone3.= [@string CppString ![kKey string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
    "\"\"} ;\n"
    "  bool result = false ;\n"
    "  bool found = strcmp (inModuleName, \""  . inOptionComponentName . "\") == 0 ;\n"
    "  if (found) {\n"
    "    found = false ;\n"
    "    sint32 index = 0 ;\n"
    "    while ((index < " . [[inBoolOptionMap count] string] . ") && ! found) {\n"
    "      found = strcmp (inOptionName, kKeyArray [index]) == 0 ;\n"
    "      if (found) {\n"
    "        result = mBoolOptionValues [index] ;\n"
    "      }\n"
    "      index ++ ;\n"
    "    }\n"
    "  }\n"
    "  if (outFound != NULL) {\n"
    "    * outFound = found ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n\n" ;

#--------------------------------------- Get uint options count
  generatedUserZone3 .= [@string CppTitleComment !"G E T    U I N T    O P T I O N S    C O U N T"]
  . "sint32 " . inOptionComponentName . "::getUintOptionsCount (void) const {\n"
  . "  return " . [[inUIntOptionMap count] string] . " ;\n"
    "}\n\n" ;

#--------------------------------------- Get uint option value
  generatedUserZone3.= [@string CppTitleComment !"G E T    U I N T    O P T I O N    V A L U E"]
  . "uint32 " . inOptionComponentName
  . "::getUintOptionValue (const sint32 inIndex) const {\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inUIntOptionMap count] string] . ")) ? mUintOptionValues [inIndex] : 0 ;\n"
    "}\n\n" ;

#--------------------------------------- Get uint option default value
  generatedUserZone3.= [@string CppTitleComment !"G E T    U I N T    O P T I O N    D E F A U L T    V A L U E"]
  . "uint32 " . inOptionComponentName
  . "::getUintOptionDefaultValue (const sint32 inIndex) const {\n"
    "  static const uint32 kDefaultValues [" . [([inUIntOptionMap count] + 1) string] . "] = {\n" ;
  foreach inUIntOptionMap (4*) do
    generatedUserZone3.= "  0,\n" ;
  end foreach ;
  generatedUserZone3 .= "  0} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inUIntOptionMap count] string] . ")) ? kDefaultValues [inIndex] : 0 ;\n"
    "}\n\n" ;

#--------------------------------------- Set uint option value
  generatedUserZone3 .= [@string CppTitleComment !"S E T    U I N T    O P T I O N    V A L U E"]
  . "void " . inOptionComponentName
  . "::setUintOptionValue (const sint32 inIndex, const uint32 inValue) {\n"
    "  if ((inIndex >= 0) && (inIndex < " . [[inUIntOptionMap count] string] . ")) {\n"
    "    mUintOptionValues [inIndex] = inValue ;\n"
    "  }\n"
    "}\n\n" ;

#--------------------------------------- Get uint option char
  generatedUserZone3.= [@string CppTitleComment !"G E T    U I N T    O P T I O N    C H A R A C T E R"]
  . "char " . inOptionComponentName
  . "::getUintOptionChar (const sint32 inIndex) const {\n"
    "  static const char kCharArray [". [([inUIntOptionMap count] + 1) string] . "] = {" ;
  foreach inUIntOptionMap (* @lchar kOptionChar 2*) do
    generatedUserZone3.= [@string CppChar ![kOptionChar char]] . ", " ;
  end foreach ;
  generatedUserZone3 .=
    "'\\0'} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inUIntOptionMap count] string] . ")) ? kCharArray [inIndex] : '\\0' ;\n"
    "}\n\n" ;

#--------------------------------------- Get uint option string
  generatedUserZone3.= [@string CppTitleComment !"G E T    U I N T    O P T I O N    S T R I N G"]
  . "const char * " . inOptionComponentName
  . "::getUintOptionString (const sint32 inIndex) const {\n"
    "  static const char * kStringArray [". [([inUIntOptionMap count] + 1) string] . "] = {" ;
  foreach inUIntOptionMap (2* @lstring kOptionString *) do
    generatedUserZone3.= [@string CppString ![kOptionString string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
    "\"\"} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inUIntOptionMap count] string] . ")) ? kStringArray [inIndex] : \"\" ;\n"
    "}\n\n" ;

#--------------------------------------- Get uint description string
  generatedUserZone3.= [@string CppTitleComment !"G E T   U I N T    O P T I O N    D E S C R I P T I O N"]
  . "const char * " . inOptionComponentName
  . "::getUintOptionDescription (const sint32 inIndex) const {\n"
  . "  static const char * kDescriptionArray [". [([inUIntOptionMap count] + 1) string] . "] = {" ;
  foreach inUIntOptionMap (3* @lstring kOptionComment) do
    generatedUserZone3.= [@string CppString ![kOptionComment string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
    "\"\"} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inUIntOptionMap count] string] . ")) ? kDescriptionArray [inIndex] : \"\" ;\n"
    "}\n\n" ;

#--------------------------------------- Get uint option value from keys
  generatedUserZone3.= [@string CppTitleComment !"G E T    U I N T    O P T I O N    V A L U E    F R O M    K E Y S"]
  . "uint32 " . inOptionComponentName . "::\n"
    "uintOptionValueFromKeys (const char * inModuleName,\n"
    "                         const char * inOptionName,\n"
    "                         bool * outFound) const {\n"
    "  static const char * kKeyArray [". [([inUIntOptionMap count] + 1) string] . "] = {" ;
  foreach inUIntOptionMap (@lstring kKey 3*) do
    generatedUserZone3.= [@string CppString ![kKey string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
    "\"\"} ;\n"
    "  uint32 result = 0 ;\n"
    "  bool found = strcmp (inModuleName, \""  . inOptionComponentName . "\") == 0 ;\n"
    "  if (found) {\n"
    "    found = false ;\n"
    "    sint32 index = 0 ;\n"
    "    while ((index < " . [[inUIntOptionMap count] string] . ") && ! found) {\n"
    "      found = strcmp (inOptionName, kKeyArray [index]) == 0 ;\n"
    "      if (found) {\n"
    "        result = mUintOptionValues [index] ;\n"
    "      }\n"
    "      index ++ ;\n"
    "    }\n"
    "  }\n"
    "  if (outFound != NULL) {\n"
    "    * outFound = found ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n\n" ;

#--------------------------------------- Get string options count
  generatedUserZone3.= [@string CppTitleComment !"G E T    S T R I N G    O P T I O N S    C O U N T"]
  . "sint32 " . inOptionComponentName . "::\n"
    "getStringOptionsCount (void) const {\n"
    "  return " . [[inStringOptionMap count] string] . " ;\n"
    "}\n\n" ;

#--------------------------------------- Get string options value
  generatedUserZone3.= [@string CppTitleComment !"G E T    S T R I N G    O P T I O N S    V A L U E"]
  . "C_String " . inOptionComponentName . "::\n"
    "getStringOptionValue (const sint32 inIndex) const {\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inStringOptionMap count] string] . ")) ? mStringOptionValues [inIndex] : C_String () ;\n"
    "}\n\n" ;

#--------------------------------------- Set string options value
  generatedUserZone3.= [@string CppTitleComment !"S E T    S T R I N G    O P T I O N S    V A L U E"]
  . "void " . inOptionComponentName . "::\n"
    "setStringOptionValue (const sint32 inIndex, const C_String & inValue) {\n"
    "  if ((inIndex >= 0) && (inIndex < " . [[inStringOptionMap count] string] . ")) {\n"
    "     mStringOptionValues [inIndex] = inValue ;\n"
    "  }\n"
    "}\n\n" ;

#--------------------------------------- Get string option char
  generatedUserZone3.= [@string CppTitleComment !"G E T    S T R I N G    O P T I O N    C H A R"]
  . "char " . inOptionComponentName
  . "::\n"
    "getStringOptionChar (const sint32 inIndex) const {\n"
    "  static const char kCharArray [". [([inStringOptionMap count] + 1) string] . "] = {" ;
  foreach inStringOptionMap (* @lchar kOptionChar 2*) do
    generatedUserZone3.= [@string CppChar ![kOptionChar char]] . ", " ;
  end foreach ;
  generatedUserZone3 .=
    "'\\0'} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inStringOptionMap count] string] . ")) ? kCharArray [inIndex] : '\\0' ;\n"
    "}\n\n" ;

#--------------------------------------- Get string option string
  generatedUserZone3 .= [@string CppTitleComment !"G E T    S T R I N G    O P T I O N    S T R I N G"]
  . "const char * " . inOptionComponentName . "::\n"
    "getStringOptionString (const sint32 inIndex) const {\n"
    "  static const char * kStringArray [". [([inStringOptionMap count] + 1) string] . "] = {" ;
  foreach inStringOptionMap (2* @lstring kOptionString *) do
    generatedUserZone3.= [@string CppString ![kOptionString string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
    "\"\"} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inStringOptionMap count] string] . ")) ? kStringArray [inIndex] : \"\" ;\n"
    "}\n\n" ;

#--------------------------------------- Get string option description
  generatedUserZone3 .= [@string CppTitleComment !"G E T    S T R I N G    O P T I O N    D E S C R I P T I O N"]
  . "const char * " . inOptionComponentName . "::\n"
    "getStringOptionDescription (const sint32 inIndex) const {\n"
  . "  static const char * kDescriptionArray [". [([inStringOptionMap count] + 1) string] . "] = {" ;
  foreach inStringOptionMap (3* @lstring kOptionComment) do
    generatedUserZone3.= [@string CppString ![kOptionComment string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
    "\"\"} ;\n"
    "  return ((inIndex >= 0) && (inIndex < " . [[inStringOptionMap count] string] . ")) ? kDescriptionArray [inIndex] : \"\" ;\n"
    "}\n\n" ;

#--------------------------------------- Get string option value from keys
  generatedUserZone3 .= [@string CppTitleComment !"G E T    S T R I N G    O P T I O N    V A L U E   F R O M   K E Y S"]
  . "C_String " . inOptionComponentName . "::\n"
    "stringOptionValueFromKeys (const char * inModuleName,\n"
    "                           const char * inOptionName,\n"
    "                           bool * outFound) const {\n"
    "  static const char * kKeyArray [".  [([inStringOptionMap count] + 1) string] . "] = {" ;
  foreach inStringOptionMap (@lstring kKey 3*) do
    generatedUserZone3.= [@string CppString ![kKey string]] . ",\n    " ;
  end foreach ;
  generatedUserZone3 .=
    "\"\"} ;\n"
    "  C_String result ;\n"
    "  bool found = strcmp (inModuleName, \""  . inOptionComponentName . "\") == 0 ;\n"
    "  if (found) {\n"
    "    found = false ;\n"
    "    sint32 index = 0 ;\n"
    "    while ((index < " . [[inStringOptionMap count] string] . ") && ! found) {\n"
    "      found = strcmp (inOptionName, kKeyArray [index]) == 0 ;\n"
    "      if (found) {\n"
    "        result = mStringOptionValues [index] ;\n"
    "      }\n"
    "      index ++ ;\n"
    "    }\n"
    "  }\n"
    "  if (outFound != NULL) {\n"
    "    * outFound = found ;\n"
    "  }\n"
    "  return result ;\n"
    "}\n\n"
  . [@string CppLineComment]
  ;

#--- Generate header file
  [@string generateFile
    !inStartDirectory
    !inOptionComponentName . ".cpp"
    !"//"
    !"\n\n" # Defaut user zone1
    !generatedUserZone2
    !"\n\n" # Defaut user zone2
    !generatedUserZone3
  ] ;
end routine ;

#---------------------------------------------------------------------------*

routine compileOptionComponent
  ??@lstring inSourceFile
  ??@string inOutputDirectory
:
#--- Parse option component
  @optionComponentRoot optionComponentRoot ;
  grammar optionLL1grammar in inSourceFile ?optionComponentRoot ;
#--- Check component name
  @lstring componentName := [optionComponentRoot mOptionComponentName] ;
  @string basename := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  if [componentName string] != basename then
    warning componentName: "GALGAS checks "
      "the component name ('" . [componentName string]
    . "') against the source file base name ('" . basename . "'): they should be identical"
    ;
  end if ; 
#--- Check component name
  @string baseName := [[inSourceFile lastPathComponent] stringByDeletingPathExtension] ;
  if [[optionComponentRoot mOptionComponentName] string] != baseName then
    error [optionComponentRoot mOptionComponentName]: "the component name is '"
    . [optionComponentRoot mOptionComponentName] . "' should be the file base name '"
    . baseName . "'" ;
  end if ;
#--- Treewalking for defining option map
  @commandLineOptionMap boolOptionMap [emptyMap] ;
  @commandLineOptionMap uintOptionMap [emptyMap] ;
  @commandLineOptionMap stringOptionMap [emptyMap] ;
  @stringset optionNameSet [emptySet] ;
  foreach [optionComponentRoot mOptions] do
    if [optionNameSet hasKey ![mOptionInternalName string]] then
      error mOptionInternalName: "the '" . [mOptionInternalName string] . "' command line option has been already declared" ;
    elsif [mOptionTypeName string] == "bool" then
      [!?boolOptionMap insertKey
        !mOptionInternalName
        !mOptionInvocationLetter
        !mOptionInvocationString
        !mOptionComment
      ] ;
    elsif [mOptionTypeName string] == "uint" then
      [!?uintOptionMap insertKey
        !mOptionInternalName
        !mOptionInvocationLetter
        !mOptionInvocationString
        !mOptionComment
      ] ;
    elsif [mOptionTypeName string] == "string" then
      [!?stringOptionMap insertKey
        !mOptionInternalName
        !mOptionInvocationLetter
        !mOptionInvocationString
        !mOptionComment
      ] ;
    else
      error mOptionTypeName: "only the @bool, @uint or @string types are allowed here" ;
    end if ;
    optionNameSet += ![mOptionInternalName string] ;
  end foreach ;
#--- Generate header
  if [@uint errorCount] == 0 then
    optionHeaderGeneration
      !inOutputDirectory
      ![[optionComponentRoot mOptionComponentName] string]
      !boolOptionMap
      !uintOptionMap
      !stringOptionMap
    ;
 end if ;
#--- Generate Implementation
  if [@uint errorCount] == 0 then
    optionImplementationGeneration
      !inOutputDirectory
      ![[optionComponentRoot mOptionComponentName] string]
      !boolOptionMap
      !uintOptionMap
      !stringOptionMap
    ;
 end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;