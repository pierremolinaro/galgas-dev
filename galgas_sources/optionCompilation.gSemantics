#---------------------------------------------------------------------------*
#                                                                           *
#  Treewalking for generating option header file                            *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics optionCompilation :
import "allASTTypes.gSemantics" ;
import "optionSemantics.gSemantics" ;
import "optionLL1grammar.gGrammar" ;

#---------------------------------------------------------------------------*
#         G E N E R A T I O N    T E M P L A T E S                          *
#---------------------------------------------------------------------------*

filewrapper optionGenerationTemplates in "../generation_templates/option_generation" {
} {
  template optionHeaderZone2 "option-header-zone2.gTemplate"
    ?@string OPTION_COMPONENT_NAME
  ;
  template optionHeaderZone3 "option-header-zone3.gTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
  ;
  template optionImplementation "option-implementation.gTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
  ;
  template optionHeaderCocoaZone2 "option-header-cocoa-zone2.gTemplate"
    ?@string OPTION_COMPONENT_NAME
  ;
  template optionHeaderCocoaZone3 "option-header-cocoa-zone3.gTemplate"
    ?@string OPTION_COMPONENT_NAME
  ;
  template optionImplementationCocoa "option-implementation-cocoa.gTemplate"
    ?@string OPTION_COMPONENT_NAME
    ?@commandLineOptionMap BOOL_OPTION_MAP
    ?@commandLineOptionMap UINT_OPTION_MAP
    ?@commandLineOptionMap STRING_OPTION_MAP
  ;
}

#---------------------------------------------------------------------------*
#                  semanticAnalysisOfOptionComponent                        *
#---------------------------------------------------------------------------*

routine semanticAnalysisOfOptionComponent
  ??@optionComponentAST inOptionComponentRoot
  !@commandLineOptionMap outBoolOptionMap
  !@commandLineOptionMap outUIntOptionMap
  !@commandLineOptionMap outStringOptionMap
:
  outBoolOptionMap := [@commandLineOptionMap emptyMap] ;
  outUIntOptionMap := [@commandLineOptionMap emptyMap] ;
  outStringOptionMap := [@commandLineOptionMap emptyMap] ;
  @stringset optionNameSet [emptySet] ;
  foreach [inOptionComponentRoot mOptions] do
    if [optionNameSet hasKey ![mOptionInternalName string]] then
      error mOptionInternalName: "the '" . [mOptionInternalName string] . "' command line option has been already declared" ;
    elsif [mOptionTypeName string] == "bool" then
      [!?outBoolOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        !"false"
      ] ;
      if mOptionDefaultValueKind != [@optionDefaultValueEnumAST noDefaultValue] then
        error mOptionDefaultValue:"an @bool option cannot have a default value (default value is allways false)" ;      
      end if ;
    elsif [mOptionTypeName string] == "uint" then
      [!?outUIntOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        !if [mOptionDefaultValue string] == "" then "0" else [mOptionDefaultValue string] end
      ] ;
      if mOptionDefaultValueKind == [@optionDefaultValueEnumAST stringDefaultValue] then
        error mOptionDefaultValue:"an @uint option default value cannot be an @string value" ;      
      end if ;
    elsif [mOptionTypeName string] == "string" then
      [!?outStringOptionMap insertKey
        !mOptionInternalName
        ![mOptionInvocationLetter char]
        ![mOptionInvocationString string]
        ![mOptionComment string]
        ![mOptionDefaultValue string]
      ] ;
      if mOptionDefaultValueKind == [@optionDefaultValueEnumAST unsignedDefaultValue] then
        error mOptionDefaultValue:"an @string option default value cannot be an @uint value" ;      
      end if ;
    else
      error mOptionTypeName: "only the @bool, @uint or @string types are allowed here" ;
    end if ;
    optionNameSet += ![mOptionInternalName string] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*
#                         parseOptionComponent                              *
#---------------------------------------------------------------------------*

routine parseOptionComponent
  ??@lstring inSourceFile
  ?!@parsedComponentStruct ioParsedComponentStruct
  !@lstring outOptionComponentName
  !@commandLineOptionMap outBoolOptionMap
  !@commandLineOptionMap outUIntOptionMap
  !@commandLineOptionMap outStringOptionMap
:
  outOptionComponentName := [@lstring new ![[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension] ![inSourceFile location]] ;
  if [[ioParsedComponentStruct mParsedOptionComponentMap] hasKey ! [outOptionComponentName string]] then
    [ioParsedComponentStruct->mParsedOptionComponentMap searchKey !outOptionComponentName ?outBoolOptionMap ?outUIntOptionMap ?outStringOptionMap] ;
  else
    @optionComponentAST optionComponentAST ;
    grammar optionLL1grammar in inSourceFile ?optionComponentAST ;
  #--- Check component name
    @lstring componentName := [optionComponentAST mOptionComponentName] ;
    @string basename := [[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension] ;
    if [componentName string] != basename then
      warning componentName: "GALGAS checks "
        "the component name ('" . [componentName string]
      . "') against the source file base name ('" . basename . "'): they should be the same"
      ;
    end if ; 
  #--- Check component name
    @string baseName := [[[inSourceFile string] lastPathComponent] stringByDeletingPathExtension] ;
    if [[optionComponentAST mOptionComponentName] string] != baseName then
      error [optionComponentAST mOptionComponentName]: "the component name is '"
      . [optionComponentAST mOptionComponentName] . "' should be the file base name '"
      . baseName . "'" ;
    end if ;
  #--- Semantic Analysis of option component
    semanticAnalysisOfOptionComponent
      !optionComponentAST
      ?outBoolOptionMap
      ?outUIntOptionMap
      ?outStringOptionMap
    ;
  #--- Enter option component in parsed option component map
    [!?ioParsedComponentStruct->mParsedOptionComponentMap insertKey !outOptionComponentName !outBoolOptionMap !outUIntOptionMap !outStringOptionMap] ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

routine compileOptionComponent
  ??@lstring inSourceFile
  ??@string inOutputDirectory
  ?!@parsedComponentStruct ioParsedComponentStruct
:
#--- Parse option component
  @commandLineOptionMap boolOptionMap ;
  @commandLineOptionMap uintOptionMap ;
  @commandLineOptionMap stringOptionMap ;
  @lstring optionComponentName ;
  parseOptionComponent
    !inSourceFile
    !?ioParsedComponentStruct
    ?optionComponentName
    ?boolOptionMap
    ?uintOptionMap
    ?stringOptionMap
  ;
#--- Generate header
  if [@uint errorCount] == 0 then
    [@string generateFile
      !inOutputDirectory
      ![optionComponentName string] . ".h"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionHeaderZone2
        ![optionComponentName string]
      ]
      !"\n\n" # Defaut user zone2
      ![filewrapper optionGenerationTemplates.optionHeaderZone3
        ![optionComponentName string]
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
      ]
    ] ;
  end if ;
#--- Generate Implementation
  if [@uint errorCount] == 0 then
    [@string generateFile
      !inOutputDirectory
      ![optionComponentName string] . ".cpp"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionImplementation
        ![optionComponentName string]
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
      ]
      !"\n\n" # Defaut user zone2
      !"\n\n" # User Zone 3
    ] ;
 end if ;
#--- Generate Cocoa header
  if [@uint errorCount] == 0 then
    [@string generateFile
      !inOutputDirectory
      ![optionComponentName string] . "-cocoa.h"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionHeaderCocoaZone2
        ![optionComponentName string]
      ]
      !"\n\n" # Defaut user zone2
      ![filewrapper optionGenerationTemplates.optionHeaderCocoaZone3
        ![optionComponentName string]
      ]
    ] ;
  end if ;
#--- Generate Cocoa Implementation
  if [@uint errorCount] == 0 then
    [@string generateFile
      !inOutputDirectory
      ![optionComponentName string] . "-cocoa.m"
      !"//"
      !"\n\n" # Defaut user zone1
      ![filewrapper optionGenerationTemplates.optionImplementationCocoa
        ![optionComponentName string]
        !boolOptionMap
        !uintOptionMap
        !stringOptionMap
      ]
      !"\n\n" # Defaut user zone2
      !"\n\n" # User Zone 3
    ] ;
 end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;