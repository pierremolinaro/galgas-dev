#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2007 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

abstract metamodel expressionMetamodel :

#---------------------------------------------------------------------------*

abstract entity @semanticExpression {
}

#---------------------------------------------------------------------------*

entity @outExpressionList {
  @semanticExpression [] mExpression ;
  @location mEndOfExpressionLocation ;
}

#---------------------------------------------------------------------------*

entity @variableExpression extends @semanticExpression {
  @lstring mVariableName ;
}

#---------------------------------------------------------------------------*

entity @literalBooleanExpression extends @semanticExpression {
  @bool mValue ;
}

#---------------------------------------------------------------------------*

entity @literalCharExpression extends @semanticExpression {
  @lchar mValue ;
}

#---------------------------------------------------------------------------*

entity @literalStringExpression extends @semanticExpression {
  @stringlist mStringSequence ;
}

#---------------------------------------------------------------------------*

entity @literalDoubleExpression extends @semanticExpression {
  @ldouble mValue ;
}

#---------------------------------------------------------------------------*

entity @literalUIntExpression extends @semanticExpression {
  @luint mValue ;
}

#---------------------------------------------------------------------------*

entity @literalUInt64Expression extends @semanticExpression {
  @luint64 mValue ;
}

#---------------------------------------------------------------------------*

entity @literalSIntExpression extends @semanticExpression {
  @lsint mValue ;
}

#---------------------------------------------------------------------------*

entity @literalSInt64Expression extends @semanticExpression {
  @lsint64 mValue ;
}

#---------------------------------------------------------------------------*

entity @hereExpression extends @semanticExpression {
}

#---------------------------------------------------------------------------*

entity @constructorExpression extends @semanticExpression {
  @lstring mTypeName ;
  @lstring mConstructorName ;
  @outExpressionList mExpressions ;
}

#---------------------------------------------------------------------------*

entity @readerCallExpression extends @semanticExpression {
  @semanticExpression mReceiver ;
  @lstring mReaderName ;
  @outExpressionList mExpressions ;
}

#---------------------------------------------------------------------------*

entity @optionExpression extends @semanticExpression {
  @lstring mOptionComponentName ;
  @lstring mOptionEntryName ;
}

#---------------------------------------------------------------------------*

entity @concatExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @orExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @xorExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @andExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @equalExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @notEqualExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @lowerOrEqualExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @greaterOrEqualExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @strictGreaterExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @strictLowerExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @leftShiftExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @rightShiftExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @addExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @subExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @multiplicationExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @divisionExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @moduloExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mLeftExpression ;
  @semanticExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

entity @unaryMinusExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*

entity @notExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*

entity @negateExpression extends @semanticExpression {
  @location mOperatorLocation ;
  @semanticExpression mExpression ;
}

#---------------------------------------------------------------------------*

entity @trueExpression extends @semanticExpression {
  @location mOperatorLocation ;
}

#---------------------------------------------------------------------------*

entity @falseExpression extends @semanticExpression {
  @location mOperatorLocation ;
}

#---------------------------------------------------------------------------*

entity @varInExpression extends @semanticExpression {
  @lstring mVarName ;
}

#---------------------------------------------------------------------------*

entity @selfInExpression extends @semanticExpression {
}

#---------------------------------------------------------------------------*

entity @descriptionInExpression extends @semanticExpression {
  @semanticExpression mReceiverExpression ;
  @location mLocation ;
}

#---------------------------------------------------------------------------*

end metamodel ;
