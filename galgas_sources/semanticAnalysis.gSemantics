#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticAnalysis :
  import "semanticInstructionsAnalysis.gSemantics" ;
  import "templateGrammar.gGrammar" ;
  import "templateAnalysis.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C H E C K    M E T H O D    S I G N A T U R E                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine checkMethodSignatures
  ??@formalParameterListForGeneration inTestedSignature
  ??@location inErrorLocation
  ??@formalParameterSignature inReferenceSignature
  ??@location inReferenceLocation
:
  if [inTestedSignature length] != [inReferenceSignature length] then
    error inErrorLocation:"this method declares " . [[inTestedSignature length] string]
    . " formal parameter(s), but overriden method declares " . [[inReferenceSignature length] string]
    ;
    error inReferenceLocation:"overriden method is declared here" ;
  else
    foreach inReferenceSignature : ref_, inTestedSignature do
      if ref_mFormalArgumentPassingMode != mFormalArgumentPassingMode then
        error mFormalArgumentName : "the '" . mFormalArgumentName . "' formal parameter is declared as "
        . [mFormalArgumentPassingMode formalArgumentMessage] . ", but overriden method declares it as " 
        . [ref_mFormalArgumentPassingMode formalArgumentMessage] ;
        error inReferenceLocation:"overriden method is declared here" ;
      end if ;
      if mFormalSelector->string != ref_mFormalSelector->string then
        error mFormalSelector : "the selector should be '" . [ref_mFormalArgumentPassingMode string] . ref_mFormalSelector . if ref_mFormalSelector->string != "" then ":" else "" end + "'" ;
      end if ;
      if [mFormalArgumentType key] != [ref_mFormalArgumentType key] then
        error mFormalArgumentName : "the '" . mFormalArgumentName . "' formal parameter has the '@"
        . [mFormalArgumentType key] . "' type, but overriden method declares with the '@" 
        . [ref_mFormalArgumentType key] . "' type" ;
        error inReferenceLocation:"overriden method is declared here" ;
      end if ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C H E C K    R E A D E R    S I G N A T U R E                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine checkReaderSignatures
  ??@formalInputParameterListForGeneration inTestedSignature
  ??@unifiedTypeMapProxy inReturnType
  ??@location inErrorLocation
  ??@functionSignature inReferenceSignature
  ??@unifiedTypeMapProxy inInheritedReturnType
  ??@location inReferenceLocation
:
  if [inReturnType key] != [inInheritedReturnType key] then
    error inErrorLocation : "the return type is '@"
    . [inReturnType key] . "', but overriden getter names '@" 
    . [inInheritedReturnType key] . "' as return type" ;
    error inReferenceLocation:"overriden getter is declared here" ;
  end if ;
  if [inTestedSignature length] != [inReferenceSignature length] then
    error inErrorLocation:"this getter declares " . [[inTestedSignature length] string]
    . " formal parameter(s), but overriden getter declares " . [[inReferenceSignature length] string]
    ;
    error inReferenceLocation:"overriden getter is declared here" ;
  else
    foreach inReferenceSignature : ref_, inTestedSignature do
      if mFormalSelector->string != ref_mFormalSelector->string then
        error mFormalSelector : "the selector should be '?" . ref_mFormalSelector . if ref_mFormalSelector->string != "" then ":" else "" end + "'" ;
      end if ;
      if [mFormalArgumentType key] != [ref_mFormalArgumentType key] then
        error mFormalArgumentName : "the '" . mFormalArgumentName . "' formal parameter has the '@"
        . [mFormalArgumentType key] . "' type, but overriden getter declares with the '@" 
        . [ref_mFormalArgumentType key] . "' type" ;
        error inReferenceLocation:"overriden getter is declared here" ;
      end if ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C L A R A T I O N    S E M A N T I C    A N A L Y S I S            *
#                                                                           *
#---------------------------------------------------------------------------*

abstract method @semanticDeclarationAST semanticAnalysis
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration unused ioSemanticDeclarationListForGeneration
;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
  ioSemanticDeclarationListForGeneration +=
    !"Predefined type " . mPredefinedTypeName
    ![@primitiveTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !mPredefinedTypeName !here]]
      !mPredefinedTypeName
      !mKind
    ]
    !""
  ;

end method ;

#---------------------------------------------------------------------------*

map @attributeIndexMap {
  @unifiedTypeMapProxy mAttributeTypeIndex ;
  insert insertKey error message "the '%K' attribute is already declared" ;
  search searchKey error message "the '%K' attribute is not declared" ;
}

#---------------------------------------------------------------------------*

override method @listDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    const @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    var hasGetter := true ;
    var hasSetter := false ;
    foreach mFeatureList do
      if mValue->string == "nogetter" then
        if not hasGetter then
          error mValue:"duplicate feature" ;
        end if ;
        hasGetter := false ;
      elsif mValue->string == "setter" then
        if hasSetter then
          error mValue:"duplicate feature" ;
        end if ;
        hasSetter := true ;
      else
        error mValue:"unknown feature; the features available here are: 'nogetter', 'setter'" ;
      end if ;
    end foreach ;
    typedAttributeList +=
      !t
      !mAttributeName
      !hasSetter
      !hasGetter
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"list type " . mListTypeName
    ![@listTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mListTypeName]
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !mListTypeName->string . elementTypeNameSuffix [] !mListTypeName->location]]
      !typedAttributeList
    ]
  !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Attribute
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    const t := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    @bool hasSetter := true ;
    @bool hasGetter := true ;
    typedAttributeList +=
      !t
      !mAttributeName
      !hasSetter
      !hasGetter
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#--- Sort descriptor
  @stringset attributesUsedForSorting [emptySet] ;
  @sortDescriptorListForGeneration sortDescriptorList [emptyList] ;
  foreach mSortDescriptorList do
    [attributeMap searchKey !mSortedAttributeName ??@unifiedTypeMapProxy type] ;
    sortDescriptorList += !type ![mSortedAttributeName string] !mAscending ;
    if [attributesUsedForSorting hasKey ![mSortedAttributeName string]] then
      error mSortedAttributeName : "the '" . mSortedAttributeName . "' is already used for sorting" ;
    end if ;
    attributesUsedForSorting += ![mSortedAttributeName string] ;
  end foreach ;
#--- Generate type
  ioSemanticDeclarationListForGeneration +=
    !"sorted list " . mSortedListTypeName
    ![@sortedListTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mSortedListTypeName]
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !mSortedListTypeName->string . elementTypeNameSuffix [] !mSortedListTypeName->location]]
      !typedAttributeList
      !sortDescriptorList
    ]
    !""
  ;

end method ;

#---------------------------------------------------------------------------*

once forbiddenKeysForStruct -> @stringset outResult :
  outResult := [@stringset emptySet] ;
  outResult += !"description" ;
  outResult += !"object" ;
end once ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
  if [mAttributeList length] == 0 then
    error mStructTypeName: "a structure cannot be empty: it must have at least one field" ; 
  end if ;
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    const t := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    foreach mFeatureList do
      error mValue : "a struct attribute does not accept any feature" ;
    end foreach ;
    const @bool hasSetter := false ;
    const @bool hasGetter := false ;
    typedAttributeList +=
      !t
      !mAttributeName
      !hasSetter
      !hasGetter
    ;
    if [forbiddenKeysForStruct [] hasKey !mAttributeName->string] then
      @string m := "an attribute cannot be named:"  ;
      for s in forbiddenKeysForStruct [] do
        m.= " " . s ;
      end for ;
      m .= "; theses names are reserved" ;
      error mAttributeName: m ;
    end if ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
  ioSemanticDeclarationListForGeneration +=
    !"struct " . mStructTypeName
    ![@structTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mStructTypeName]
      !typedAttributeList
    ]
    !"~"
  ;
end method ;

#---------------------------------------------------------------------------*

override method @graphDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
  const graphTypeProxy := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mGraphTypeName] ;
  const associatedListTypeProxy := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAssociatedListTypeName] ;
  const associatedListElementTypeProxy := [@unifiedTypeMapProxy searchKey 
    !inSemanticContext->mTypeMap
    ![@lstring new !mAssociatedListTypeName->string .elementTypeNameSuffix [] !mAssociatedListTypeName->location]
  ] ;
  if [associatedListTypeProxy mTypeKindEnum] != [@typeKindEnum listType] then
    error mAssociatedListTypeName: "the '@" . mAssociatedListTypeName . "' type should be a list" ;
  end if ;
#--- Analyze insert methods
  @stringset reservedModifierNames [emptySet] ;
  reservedModifierNames += !"noteNode" ;
  reservedModifierNames += !"addArc" ;
  foreach mInsertModifierList do
    if [reservedModifierNames hasKey ![mInsertModifierName string]] then
      error mInsertModifierName : "the '" . mInsertModifierName . "' modifier name is reserved for a graph type" ;
    end if ;
    check_K_L_escapeCharacters !mInsertErrorMessage ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"graph " . mGraphTypeName
    ![@graphDeclarationForGeneration new
      !graphTypeProxy
      !associatedListTypeProxy
      !associatedListElementTypeProxy
      !mInsertModifierList
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @externTypeDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
  const externTypeProxy := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mExternTypeName] ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"extern type " . mExternTypeName
    ![@externTypeDeclarationForGeneration new
      !externTypeProxy
      !mExternTypeName->string
      !mCppPreDeclarationCode
      !mCppClassCode
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

map @constantIndexMap {
  @uint mIndex ;
  insert insertKey error message "the '%K' constant is already declared" ;
  search searchKey error message "the '%K' constant is not declared" ;
}

#---------------------------------------------------------------------------*

override method @enumDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Constant list
  @stringlist constantList [emptyList] ;
  @constantIndexMap constantMap [emptyMap] ;
  foreach mConstantList do
    constantList += ![mValue string] ;
    [!?constantMap insertKey !mValue ![constantMap count]] ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"enum " . mEnumTypeName
    ![@enumTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mEnumTypeName]
      !constantList
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @arrayDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#---
  ioSemanticDeclarationListForGeneration +=
    !"array " . mArrayTypeName
    ![@arrayTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mArrayTypeName]
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mElementTypeName]
      ![mDimension uint]
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*
#! Listmap
#---------------------------------------------------------------------------*

override method @listmapDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Check associated list is actually a list
  [inSemanticContext->mTypeMap searchKey
    !mAssociatedListTypeName
    ?3*
    ??@typeKindEnum typeKindEnum
    ?*
    ??@typedAttributeList listTypeAttributeList
    ?20*
  ] ;
#---
  if typeKindEnum != [@typeKindEnum listType] then
    error mAssociatedListTypeName : "associated type should be a list type" ;
  end if ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"list map " . mListmapTypeName
    ![@listmapTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mListmapTypeName]
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAssociatedListTypeName]
      !listTypeAttributeList
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !mListmapTypeName->string . elementTypeNameSuffix [] !mListmapTypeName->location]]
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*
#! Map
#---------------------------------------------------------------------------*

map @insertMethodMap {
  insert insertKey error message "the '%K' insert modifier is already declared" ;
}

#---------------------------------------------------------------------------*

map @searchMethodMap {
  insert insertKey error message "the '%K' search method is already declared" ;
}

#---------------------------------------------------------------------------*
#         M A P                                                             *
#---------------------------------------------------------------------------*

routine check_K_escapeCharacters
 ?@lstring inString
:
#--- Check escape sequences : only %K or %%
  foreach [[inString string] componentsSeparatedByString !"%%"] do
    @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
    [!?explodedArray popFirst ?*] ;
    foreach explodedArray do
      if [mValue length] > 0 then
        const @char c := [mValue characterAtIndex !0] ;
        if c != 'K' then
          error inString: "only '%K' and '%%' escape sequences are allowed in this error message" ;
        end if ;
      end if ;
    end foreach ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine check_K_L_escapeCharacters
 ?@lstring inString
:
#--- Check escape sequences : only %K, %L or %%
  foreach [[inString string] componentsSeparatedByString !"%%"] do
    @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
    [!?explodedArray popFirst ?*] ;
    foreach explodedArray do
      if [mValue length] > 0 then
        const @char c := [mValue characterAtIndex !0] ;
        if (c != 'K') & (c != 'L') then
          error inString: "only '%K', '%L' and '%%' escape sequences are allowed in this error message" ;
        end if ;
      end if ;
    end foreach ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

once forbiddenKeysForMap -> @stringset outResult :
  outResult := [@stringset emptySet] ;
  outResult += !"lkey" ;
  outResult += !"description" ;
  outResult += !"object" ;
end once ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#------ Enter attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    @bool hasSetter := true ;
    @bool hasGetter := true ;
    typedAttributeList +=
      !t
      !mAttributeName
      !hasSetter
      !hasGetter
    ;
    if [forbiddenKeysForMap [] hasKey !mAttributeName->string] then
      @string m := "an attribute cannot be named:"  ;
      for s in forbiddenKeysForMap [] do
        m.= " " . s ;
      end for ;
      m .= "; theses names are reserved" ;
      error mAttributeName: m ;
    end if ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#--- Enter insert modifiers
  @insertMethodMap insertMethodMap [emptyMap] ;
  foreach mInsertMethodList do
    [!?insertMethodMap insertKey !mInsertMethodName] ;
    check_K_L_escapeCharacters !mErrorMessage ;
    check_K_L_escapeCharacters !mShadowErrorMessage ;
  end foreach ;
#--- Enter search methods
  @searchMethodMap searchMethodMap [emptyMap] ;
  foreach mSearchMethodList do
    [!?searchMethodMap insertKey !mSearchMethodName] ;
    check_K_escapeCharacters !mErrorMessage ;
  end foreach ;
#--- Enter remove methods
  foreach mRemoveMethodList do
    [!?insertMethodMap insertKey !mMethodName] ;
    check_K_escapeCharacters !mErrorMessage ;
  end foreach ;
#--- Warn for duplicated declarations or 'insertOrReplace' modifier
  foreach mInsertOrReplaceDeclarationListAST index IDX do
    if IDX > 0 then
      warning mInsertOrReplaceDeclarationLocation: "the 'insertOrReplace' modifier is already declared" ;
    end if ;
  end foreach ;
  const @bool hasInsertOrReplaceModifier := [mInsertOrReplaceDeclarationListAST length] > 0 ;
  if hasInsertOrReplaceModifier & [insertMethodMap hasKey !"insertOrReplace"] then
    @location insertOrReplaceDeclarationLocation ;
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceDeclarationLocation] ;
    error insertOrReplaceDeclarationLocation : "the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name" ;
  end if ;
#--- Enter 'with' accessors
#  @withAccessorMap withAccessorMap [emptyMap] ;
#  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !inPredefinedTypes->mStringType] ;
#  foreach mSearchMethodList do
#    [!?withAccessorMap insertKey
#      !mSearchMethodName
#      !inPredefinedTypes->mLStringType
#    ] ;
#  end foreach ;
#--- Enter map declaration
  ioSemanticDeclarationListForGeneration +=
    !"map " . mMapTypeName
    ![@mapTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mMapTypeName]
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !mMapTypeName->string . elementTypeNameSuffix [] !mMapTypeName->location]]
      !mMapTypeName
      !typedAttributeList
      !mInsertMethodList
      !mSearchMethodList
      !mRemoveMethodList
      !hasInsertOrReplaceModifier
#      !withAccessorMap
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @uniqueMapDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Compute initial state set
  @stringset initialStateSet [emptySet] ;
  foreach mInsertMethodList do
    if [mMapStateList length] > 0 then
      if [mInitialStateName string] == "" then
        error mInsertMethodName: "the '" . mInsertMethodName . "' insert method should name an automaton state" ;
      else
        initialStateSet += ![mInitialStateName string] ;
      end if ;
    elsif [mInitialStateName string] != "" then
      error mInsertMethodName: "the '" . mInsertMethodName . "' insert method should not name an automaton state" ;
    end if ;
  end foreach ;
#--- Analyze map automation actions
  @mapAutomatonActionMap mapAutomatonActionMap [emptyMap] ;
  foreach mSearchMethodList do
    if [mMapStateList length] > 0 then
      if [mActionName string] == "" then
        error mSearchMethodName: "the '" . mSearchMethodName . "' search method should name an automaton action" ;
      elsif not [mapAutomatonActionMap hasKey ![mActionName string]] then
#        actionIndex := [mapAutomatonActionMap count] ;
        [!?mapAutomatonActionMap insertKey !mActionName ![mapAutomatonActionMap count]] ;
#      else
#        [mapAutomatonActionMap searchKey !mActionName ?actionIndex] ;
      end if ;
    elsif [mActionName string] != "" then
      error mSearchMethodName: "the '" . mSearchMethodName . "' search method should not name an automaton action" ;
    end if ;
  end foreach ;
#--- Analyze map automaton
  @mapAutomatonStateMap mapAutomatonStateMap [emptyMap] ;
  foreach mMapStateList do
    [!?mapAutomatonStateMap insertKey !mStateName ![mapAutomatonStateMap count]] ;
  end foreach ;
  foreach mMapStateList do
    foreach mTransitionList do
      [mapAutomatonStateMap searchKey !mTargetStateName ?*] ;
    end foreach ;
  end foreach ;
#--- Check automaton actions are all defined
  const @stringset allActions := [mapAutomatonActionMap keySet] ;
  @mapStateSortedList mapStateSortedList [emptySortedList] ;
  foreach mMapStateList do
    @stringset actionsForCurrentState [emptySet] ;
    @mapStateTransitionSortedList mapStateTransitionSortedList [emptySortedList] ;
    foreach mTransitionList do
      @uint actionIndex ;
      [mapAutomatonActionMap searchKey !mActionName ?actionIndex] ;
      if [actionsForCurrentState hasKey ![mActionName string]] then
        error mActionName : "the '" . mActionName . "' action is already used for this state" ;
      end if ;
      actionsForCurrentState += ![mActionName string] ;
      @uint targetStateIndex ;
      [mapAutomatonStateMap searchKey !mTargetStateName ?targetStateIndex] ;
      mapStateTransitionSortedList +=
        !actionIndex
        ![mActionName string]
        !targetStateIndex
        ![mTargetStateName string]
        !mTransitionMessageKind
        ![mTransitionMessage string]
      ;
    end foreach ;
    @uint stateIndex ;
    [mapAutomatonStateMap searchKey !mStateName ?stateIndex] ;
    mapStateSortedList +=
      !stateIndex
      ![mStateName string]
      !mStateMessageKind
      ![mStateMessage string]
      !mapStateTransitionSortedList
    ;
    @stringset missingActions := allActions - actionsForCurrentState ;
    if [missingActions count] > 0 then
      @string s := "" ;
      foreach missingActions
        do s .= "'" . key . "'" ;
        between s .= ", " ;
      end foreach ;
      error mStateName : "the following actions are not named in a transition from this state: " . s ;
    end if ;
  end foreach ;
#--- Check for useful automaton states
  @stringset accessibleStates := initialStateSet ;
  @bool progress := true ;
  loop [mMapStateList length] + 1 : while progress do
    progress := false ;
    foreach mMapStateList do
      if [accessibleStates hasKey ![mStateName string]] then
        foreach mTransitionList do
          if not [accessibleStates hasKey ![mTargetStateName string]] then
            accessibleStates += ![mTargetStateName string] ;
            progress := true ;
          end if ;
        end foreach ;
      end if ;
    end foreach ;
  end loop ;
  const @stringset uselessStates := [mapAutomatonStateMap keySet] - accessibleStates ;
  if [uselessStates count] > 0 then
    @string s := "" ;
    foreach uselessStates
      do s .= "'" . key . "'" ;
      between s .= ", " ;
    end foreach ;
    warning here : "the following map automaton states are useless: " . s ;
  end if ;
#---------------------------------- override methods
#--- Compute needed associations
  @stringset neededAssociations [emptySet] ;
  @stringset accessibilityGraph [emptySet] ;
  foreach mapAutomatonStateMap do
    @stringset reachableStates [emptySet] ;
    reachableStates += ![lkey string] ;
    @bool progress := true ;
    loop [mapAutomatonStateMap count] + 1 : while progress do
      progress := false ;
      foreach mMapStateList do
        if [reachableStates hasKey ![mStateName string]] then
          foreach mTransitionList do
            if not [reachableStates hasKey ![mTargetStateName string]] then
              reachableStates += ![mTargetStateName string] ;
              accessibilityGraph += ![lkey string] . ":" . [mTargetStateName string] ;
              progress := true ;
            end if ;
          end foreach ;
        end if ;
      end foreach ;
    end loop ;
    foreach reachableStates do
      if [lkey string] != key then
        neededAssociations += ![lkey string] . ":" . key ;
      end if ;
    end foreach ;
  end foreach ;
#---
  @mapOverrideList mapOverrideList [emptyList] ;
  foreach mMapOverrideBlockListAST do
    @stringset handledAssociations [emptySet] ;
    @stringset neededCombinaisons [emptySet] ;
    @branchBehaviourSortedListForMapOverride branchBehaviourSortedListForMapOverride1 [emptySortedList] ;
    foreach mMapOverrideBlockDescriptor1AST do
      @uint startStateNameIndex ;
      [mapAutomatonStateMap searchKey !mLeftState ?startStateNameIndex] ;
      @uint currentStateNameIndex ;
      [mapAutomatonStateMap searchKey !mRightState ?currentStateNameIndex] ;
      const @string association := [mLeftState string] . ":" . [mRightState string] ;
      if not [neededAssociations hasKey !association] then
        warning mRightState :"the '" . association . "' association is useless" ;
      end if ;
      if [handledAssociations hasKey !association] then
        error mRightState
        :"the '" . association . "' association is already defined" ;
      end if ;
      handledAssociations += !association ;
      @uint finalStateNameIndex ;
      [mapAutomatonStateMap searchKey !mResultingState ?finalStateNameIndex] ;
      if [mLeftState string] != [mResultingState string] then
        neededCombinaisons += ![mLeftState string] . ":" . [mResultingState string] ;
        neededCombinaisons += ![mResultingState string] . ":" . [mLeftState string] ;
        if not [accessibilityGraph hasKey ![mLeftState string] . ":" . [mRightState string]] then
          error mResultingState
          : "the '" . mResultingState . "' state is not reachable from '" . mLeftState . "' state"
          ;
        end if ;
      end if ;
      check_K_escapeCharacters !mTransitionMessage ;
      branchBehaviourSortedListForMapOverride1 +=
        !startStateNameIndex
        ![mLeftState string]
        !currentStateNameIndex
        ![mRightState string]
        !finalStateNameIndex
        ![mResultingState string]
        !mMessageKind
        ![mTransitionMessage string]
      ;
    end foreach ;
    @stringset forgottenAssociations := neededAssociations - handledAssociations ;
    if [forgottenAssociations count] > 0 then
      @string s := "" ;
      foreach forgottenAssociations do
        s .= "\n  - " . key ;
      end foreach ;
      error here: [[forgottenAssociations count] string] . " associations should be defined:" . s ;
    end if ;
    @stringset definedCombinaisons [emptySet] ;
    @branchBehaviourSortedListForMapOverride branchBehaviourSortedListForMapOverride2 [emptySortedList] ;
    foreach mMapOverrideBlockDescriptor2AST do
      @uint leftStateIndex ;
      [mapAutomatonStateMap searchKey !mLeftState ?leftStateIndex] ;
      @uint rightStateIndex ;
      [mapAutomatonStateMap searchKey !mRightState ?rightStateIndex] ;
      const @string combinaison := [mLeftState string] . ":" . [mRightState string] ;
      if not [neededCombinaisons hasKey !combinaison] then
        error mRightState
        :"the '" . mLeftState . ":" . mRightState . "' combinaison is useless" ;
      end if ;
      if [definedCombinaisons hasKey !combinaison] then
        error mRightState
        :"the '" . mLeftState . ":" . mRightState . "' combinaison is already defined" ;
      end if ;
      definedCombinaisons += !combinaison ;
      @uint resultingStateNameIndex ;
      [mapAutomatonStateMap searchKey !mResultingState ?resultingStateNameIndex] ;
      if ([mLeftState string] != [mResultingState string])
       & ([mRightState string] != [mResultingState string])
       & not [accessibilityGraph hasKey ![mLeftState string] . ":" . [mResultingState string]] then
        error mResultingState
        :"the '" . mResultingState . "' state cannot be reached from the '" . mResultingState . "' state" ;
      end if ;
      check_K_escapeCharacters !mTransitionMessage ;
      if mMessageKind == [@mapAutomatonMessageKind noMessage] then
        definedCombinaisons += ![mRightState string] . ":" . [mLeftState string] ;
        branchBehaviourSortedListForMapOverride2 +=
          !rightStateIndex
          ![mRightState string]
          !leftStateIndex
          ![mLeftState string]
          !resultingStateNameIndex
          ![mResultingState string]
          !mMessageKind
          ![mTransitionMessage string]
        ;
      end if ;
      branchBehaviourSortedListForMapOverride2 +=
        !leftStateIndex
        ![mLeftState string]
        !rightStateIndex
        ![mRightState string]
        !resultingStateNameIndex
        ![mResultingState string]
        !mMessageKind
        ![mTransitionMessage string]
      ;
    end foreach ;
    if [forgottenAssociations count] == 0 then # Check only if all associations are defined
      @stringset forgottenCombinaisons := neededCombinaisons - definedCombinaisons ;
      if [forgottenCombinaisons count] > 0 then
        @string s := "" ;
        foreach forgottenCombinaisons do
          s .= "\n  - " . key ;
        end foreach ;
        error here: [[forgottenCombinaisons count] string] . " combinaisons are forgotten:" . s ;
      end if ;
    end if ;
    mapOverrideList +=
      ![mOverrideBlockName string]
      !branchBehaviourSortedListForMapOverride1
      !branchBehaviourSortedListForMapOverride2
    ;
  end foreach ;
#------ Enter attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    @bool hasSetter := true ;
    @bool hasGetter := true ;
    typedAttributeList +=
      !t
      !mAttributeName
      !hasSetter
      !hasGetter
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#--- Enter insert modifiers
  @insertMethodMap insertMethodMap [emptyMap] ;
  foreach mInsertMethodList do
    [!?insertMethodMap insertKey !mInsertMethodName] ;
  #--- Check error message escape sequences : only %K, %L or %%
    foreach [[mErrorMessage string] componentsSeparatedByString !"%%"] do
      @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
      [!?explodedArray popFirst ?*] ;
      foreach explodedArray do
        if [mValue length] > 0 then
          const @char c := [mValue characterAtIndex !0] ;
          if (c != 'K') & (c != 'L') then
            error mErrorMessage: "only '%K', '%L' and '%%' escape sequences are allowed in an insert error message" ;
          end if ;
        end if ;
      end foreach ;
    end foreach ;
  #--- Check shadow error message escape sequences : only %K, %L or %%
    foreach [[mShadowErrorMessage string] componentsSeparatedByString !"%%"] do
      @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
      [!?explodedArray popFirst ?*] ;
      foreach explodedArray do
        if [mValue length] > 0 then
          const @char c := [mValue characterAtIndex !0] ;
          if (c != 'K') & (c != 'L') then
            error mErrorMessage: "only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message" ;
          end if ;
        end if ;
      end foreach ;
    end foreach ;
  end foreach ;
#--- Enter search methods
  @searchMethodMap searchMethodMap [emptyMap] ;
  foreach mSearchMethodList do
    if [mMapStateList length] == 0 then # §
      [!?searchMethodMap insertKey !mSearchMethodName] ;
    else
      [!?searchMethodMap insertKey !mSearchMethodName] ;
    end if ;
  #--- Check error message escape sequences : only %K or %%
    foreach [[mErrorMessage string] componentsSeparatedByString !"%%"] do
      @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
      [!?explodedArray popFirst ?*] ;
      foreach explodedArray do
        if [mValue length] > 0 then
          const @char c := [mValue characterAtIndex !0] ;
          if c != 'K' then
            error mErrorMessage: "only '%K' and '%%' escape sequences are allowed in a search error message" ;
          end if ;
        end if ;
      end foreach ;
    end foreach ;
  end foreach ;
#--- Enter 'with' accessors
#  @withAccessorMap withAccessorMap [emptyMap] ;
#  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !inPredefinedTypes->mStringType] ;
#  foreach mSearchMethodList do
#    [!?withAccessorMap insertKey
#      !mSearchMethodName
#      !inPredefinedTypes->mLStringType
#    ] ;
#  end foreach ;
#--- Enter map declaration
  ioSemanticDeclarationListForGeneration +=
    !"unique map " . mMapTypeName
    ![@uniqueMapTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mMapTypeName]
      !mMapTypeName
      !typedAttributeList
      !mInsertMethodList
      !mSearchMethodList
#      !withAccessorMap
      !mapAutomatonStateMap
      !mapAutomatonActionMap
      !mapStateSortedList
      !mapOverrideList
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Get attribute list of associated map
  [inSemanticContext->mTypeMap searchKey
    !mAssociatedMapTypeName
    ?7*
    ??@typedAttributeList listTypeAttributeList
    ?11*
    ??@mapSearchMethodListAST searchMethodList
    ?6*
  ] ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"map proxy " . mMapProxyTypeName
    ![@mapProxyTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mMapProxyTypeName]
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAssociatedMapTypeName]
      !listTypeAttributeList
      !searchMethodList
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

map @declaredMethodMap { # This map is used for checking a method is declared once within a class
  insert insertKey error message "the '%K' method is already declared in %L for this class" ;
}

#---------------------------------------------------------------------------*

routine buildLocalVariableMapAndSignature
  ??@semanticContext inSemanticContext
  ??@formalParameterListAST inRoutineSignatureAST
  ?!@variableMap ioVariableMap
  !@formalParameterListForGeneration outRoutineSignature
:
  outRoutineSignature := [@formalParameterListForGeneration emptyList] ;
  foreach inRoutineSignatureAST do
    const type := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName] ;
    @string formalArgumentCppName ;
    switch mFormalArgumentPassingMode
    when argumentIn :
      formalArgumentCppName := "inArgument_" . [[mFormalArgumentName string] identifierRepresentation] ;
      if mIsUnused then
        [!?ioVariableMap insertInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !type !formalArgumentCppName !formalArgumentCppName] ;
      else
        [!?ioVariableMap insertInputFormalArgument !mFormalArgumentName !type !formalArgumentCppName !formalArgumentCppName] ;
      end if ;
    when argumentOut :
      formalArgumentCppName := "outArgument_" . [[mFormalArgumentName string] identifierRepresentation] ;
      [!?ioVariableMap insertOutputFormalArgument !mFormalArgumentName !type !formalArgumentCppName !formalArgumentCppName] ;
    when argumentInOut :
      formalArgumentCppName := "ioArgument_" . [[mFormalArgumentName string] identifierRepresentation] ;
      if mIsUnused then
        [!?ioVariableMap insertInputOutputFormalArgumentDeclaredAsUnused !mFormalArgumentName !type !formalArgumentCppName !formalArgumentCppName] ;
      else
        [!?ioVariableMap insertInputOutputFormalArgument !mFormalArgumentName !type !formalArgumentCppName !formalArgumentCppName] ;
      end if ;
    when argumentConstantIn :
      formalArgumentCppName := "constinArgument_" . [[mFormalArgumentName string] identifierRepresentation] ;
      if mIsUnused then
        [!?ioVariableMap insertConstantInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !type !formalArgumentCppName !formalArgumentCppName] ;
      else
        [!?ioVariableMap insertConstantInputFormalArgument !mFormalArgumentName !type !formalArgumentCppName !formalArgumentCppName] ;
      end if ;
    end switch ;
    outRoutineSignature += !mFormalSelector !mFormalArgumentPassingMode !type !mFormalArgumentName !formalArgumentCppName ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine analyzeRoutineBody
  ??@analysisContext inAnalysisContext
  ??@formalParameterListAST inRoutineSignatureAST
  ??@localConstantList inLocalConstantList
  ??@typedAttributeList inNonMutableTypedAttributeList
  ??@typedAttributeList inMutableTypedAttributeList
  ??@string inAttributeVariableNamePrefix
  ??@semanticInstructionListAST inInstructionList
  ??@location inEndOfMethodLocation
  !@semanticInstructionListForGeneration outSemanticInstructionListForGeneration
  !@formalParameterListForGeneration outRoutineSignature
:
  @variableMap variableMap [emptyMap] ;
#--- Declare local constants
  foreach inLocalConstantList do
    if mNoWarningIfUnused then
      [!?variableMap insertUsedLocalConstant !mName !mType !mCppName !inAnalysisContext->mSelfObjectCppName] ;
    else
      [!?variableMap insertLocalConstant !mName !mType !mCppName !inAnalysisContext->mSelfObjectCppName] ;
    end if ;
  end foreach ;
#--- Enter non mutable instance attributes
  foreach inNonMutableTypedAttributeList do
    [!?variableMap insertNonMutableAttribute
      !mAttributeName
      !mAttributeTypeProxy
      !inAttributeVariableNamePrefix . "mAttribute_". [[mAttributeName string] identifierRepresentation]
      !inAnalysisContext->mSelfObjectCppName
    ] ;
  end foreach ;
#--- Enter mutable instance attributes
  foreach inMutableTypedAttributeList do
    [!?variableMap insertMutableAttribute
      !mAttributeName
      !mAttributeTypeProxy
      !inAttributeVariableNamePrefix . "mAttribute_". [[mAttributeName string] identifierRepresentation]
      !inAnalysisContext->mSelfObjectCppName
    ] ;
  end foreach ;
#--- Enter formal arguments
  buildLocalVariableMapAndSignature
    !inAnalysisContext->mSemanticContext
    !inRoutineSignatureAST
    !?variableMap
    ?outRoutineSignature
  ;
#---  Analyze instruction list
  outSemanticInstructionListForGeneration := [@semanticInstructionListForGeneration emptyList] ;
  foreach inInstructionList do
    [mInstruction analyzeSemanticInstruction
      !inAnalysisContext
      !?outSemanticInstructionListForGeneration
      !?variableMap
    ] ;
   end foreach ;
#---
  [variableMap checkAutomatonStates !inEndOfMethodLocation] ;
end routine ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
  @formalInputParameterListForGeneration formalArgumentList [emptyList] ;
  foreach mFormalArgumentList do
    formalArgumentList +=
      !mFormalSelector
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
      ![mFormalArgumentName string]
      !mFormalArgumentName
      !mIsConstant
    ;
  end foreach ;
  ioSemanticDeclarationListForGeneration +=
    !"extern func " . mFunctionName
    ![@functionPrototypeDeclarationForGeneration new
      !true # Generate Cpp header file
      !"func-" . mFunctionName
      ![mFunctionName string]
      !formalArgumentList
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mResultTypeName]
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
  @formalParameterListForGeneration formalArgumentList [emptyList] ;
  foreach mFormalArgumentList do
    formalArgumentList +=
      !mFormalSelector
      !mFormalArgumentPassingMode
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
      !mFormalArgumentName
      ![mFormalArgumentName string]
    ;
  end foreach ;
  ioSemanticDeclarationListForGeneration +=
    !"extern proc " . mRoutineName
    ![@routinePrototypeDeclarationForGeneration new
      !true # Generate Cpp header file
      !"proc-" . mRoutineName
      ![mRoutineName string]
      !formalArgumentList
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @routineDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Instruction list
  @formalParameterListForGeneration formalArgumentList [emptyList] ;
  @semanticInstructionListForGeneration instructionList ;
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    ![@unifiedTypeMapProxy null]
    !""
    ![@unifiedTypeMapProxy null]
  ] ;
  analyzeRoutineBody
    !analysisContext
    !mFormalArgumentList
    ![@localConstantList emptyList]
    ![@typedAttributeList emptyList]
    ![@typedAttributeList emptyList]
    !""
    !mRoutineInstructionList
    !mEndOfRoutineInstructionList
    ?instructionList
    ?formalArgumentList
  ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"proc " . mRoutineName
    ![@routineImplementationForGeneration new
      !true # Generate Cpp header file
      !"proc-" . mRoutineName
      ![mRoutineName string]
      !formalArgumentList
      !instructionList
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#------ Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mClassTypeName] ;
#------ Super type, and class features
# A class that has a super may not have any feature
# A class without a super class admits the 'generatedInSeparateFile' feature
  @unifiedTypeMapProxy superClassProxy ;
  @typedAttributeList allAttributeList ;
  if [mSuperClassName string] == "" then
    superClassProxy := [@unifiedTypeMapProxy null] ;
    allAttributeList := [@typedAttributeList emptyList] ;
    @bool generatedInSeparateFileFeature := false ;
    if [mClassFeatureList length] > 0 then
      foreach mClassFeatureList do
        if [mValue string] == "generatedInSeparateFile" then
          if generatedInSeparateFileFeature then
            error mValue:"the 'generatedInSeparateFile' is already named" ;
          end if ;
          generatedInSeparateFileFeature := true ;
        else
          error mValue:"only the 'generatedInSeparateFile' feature is allowed here" ;
        end if ;
      end foreach ;
    end if ;
  else
    superClassProxy := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mSuperClassName] ;
    allAttributeList := [superClassProxy mAllTypedAttributeList] ;
    if [mClassFeatureList length] > 0 then
      foreach mClassFeatureList do
        error mValue:"a class that has a super class does not accept any feature" ;
      end foreach ;
    end if ;
  end if ;
#------ Enter attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    const t := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    @bool hasSetter := false ;
    @bool hasGetter := true ;
    foreach mFeatureList do
      if [mValue string] == "setter" then
        if hasSetter then
          error mValue : "the 'setter' feature is already named" ;
        end if ;
        hasSetter := true ;
      elsif [mValue string] == "nogetter" then
        if not hasGetter then
          error mValue : "the 'nogetter' feature is already named" ;
        end if ;
        hasGetter := false ;
      else
        error mValue : "only the 'setter' or 'nogetter' are allowed here" ;
      end if ;
    end foreach ;
    typedAttributeList +=
      !t
      !mAttributeName
      !hasSetter
      !hasGetter
    ;
    allAttributeList +=
      !t
      !mAttributeName
      !hasSetter
      !hasGetter
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#------ Compute sort string (used for sorting generated code)
  @string sortString := [selfType key] ;
  @unifiedTypeMapProxy t := [selfType mSuperType] ;
  loop [inSemanticContext->mTypeMap count] + 1 :
  while not [t isNull] do
    sortString := [t key] . "." . sortString ;
    t := [t mSuperType] ;
  end loop ;
#------
  ioSemanticDeclarationListForGeneration +=
    !"class " . mClassTypeName
    ![@classTypeForGeneration new
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mClassTypeName]
      !mIsAbstract
      !mClassTypeName
      !superClassProxy
      !allAttributeList
      !typedAttributeList
      ![selfType mGenerateHeaderInSeparateFile]
    ]
    !sortString
  ;
end method ;

#---------------------------------------------------------------------------*

routine analyzeFunctionBody
  ??@analysisContext inAnalysisContext
  ??@formalInputParameterListAST inFunctionSignature
  ??@typedAttributeList inTypedAttributeList
  ??@string inAttributeVariableNamePrefix
  ??@semanticInstructionListAST inInstructionList
  ??@lstring inReturnVariableName
  ??@lstring inResultTypeName
  ??@location inEndOfFunctionLocation
  !@formalInputParameterListForGeneration outSignatureForGeneration
  !@unifiedTypeMapProxy outReturnedType
  !@string outResultVariableCppName
  !@semanticInstructionListForGeneration outSemanticInstructionListForGeneration
:
  @variableMap variableMap [emptyMap] ;
#--- Enter instance attributes
  foreach inTypedAttributeList do
    [!?variableMap insertNonMutableAttribute
      !mAttributeName
      !mAttributeTypeProxy
      !inAttributeVariableNamePrefix . "mAttribute_". [[mAttributeName string] identifierRepresentation]
      !inAnalysisContext->mSelfObjectCppName
    ] ;
  end foreach ;
#--- Enter formal parameters
  outSignatureForGeneration := [@formalInputParameterListForGeneration emptyList] ;
  foreach inFunctionSignature do
    const parameterType := [@unifiedTypeMapProxy searchKey !inAnalysisContext->mSemanticContext->mTypeMap !mFormalArgumentTypeName] ;
    if mIsConstant then
      const @string cppName := "constinArgument_" . [[mFormalArgumentName string] identifierRepresentation] ;
      outSignatureForGeneration +=
        !mFormalSelector
        !parameterType
        !cppName
        !mFormalArgumentName
        !mIsConstant
      ;
      if mIsUnused then
        [!?variableMap insertConstantInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !parameterType !cppName !cppName] ;
      else
        [!?variableMap insertConstantInputFormalArgument !mFormalArgumentName !parameterType !cppName !cppName] ;
      end if ;
    else
      const @string cppName := "inArgument_" . [[mFormalArgumentName string] identifierRepresentation] ;
      outSignatureForGeneration +=
        !mFormalSelector
        !parameterType
        !cppName
        !mFormalArgumentName
        !mIsConstant
      ;
      if mIsUnused then
        [!?variableMap insertInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !parameterType !cppName !cppName] ;
      else
        [!?variableMap insertInputFormalArgument !mFormalArgumentName !parameterType !cppName !cppName] ;
      end if ;
    end if ;
  end foreach ;
#--- Enter return variable
  outReturnedType := [@unifiedTypeMapProxy searchKey !inAnalysisContext->mSemanticContext->mTypeMap !inResultTypeName] ;
  outResultVariableCppName := "result_" . [inReturnVariableName identifierRepresentation] ;
  [!?variableMap insertOutputFormalArgument !inReturnVariableName !outReturnedType !outResultVariableCppName !outResultVariableCppName] ;
#---  Analyze instruction list
  outSemanticInstructionListForGeneration := [@semanticInstructionListForGeneration emptyList] ;
  foreach inInstructionList do
    [mInstruction analyzeSemanticInstruction
      !inAnalysisContext
      !?outSemanticInstructionListForGeneration
      !?variableMap
    ] ;
   end foreach ;
#---
  [variableMap checkAutomatonStates !inEndOfFunctionLocation] ;
end routine ;

#---------------------------------------------------------------------------*

override method @functionDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Analyse function body  
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  @formalInputParameterListForGeneration formalInputParameterList ;
  @unifiedTypeMapProxy returnType ;
  @string resultVariableCppName ;
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    ![@unifiedTypeMapProxy null]
    !""
    ![@unifiedTypeMapProxy null]
  ] ;
  analyzeFunctionBody
    !analysisContext
    !mFormalArgumentList
    ![@typedAttributeList emptyList]
    !""
    !mFunctionInstructionList
    !mResultVariableName
    !mResultTypeName
    !mEndOfFunctionInstructionList
    ?formalInputParameterList
    ?returnType
    ?resultVariableCppName
    ?semanticInstructionListForGeneration
  ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"function " . mFunctionName
    ![@functionImplementationForGeneration new
      !true # Generate Cpp header file
      !"func-" . mFunctionName
      ![mFunctionName string]
      !formalInputParameterList
      !returnType
      !resultVariableCppName
      !semanticInstructionListForGeneration
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Analyse function body  
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  @unifiedTypeMapProxy returnType ;
  @string resultVariableCppName ;
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    ![@unifiedTypeMapProxy null]
    !""
    ![@unifiedTypeMapProxy null]
  ] ;
  analyzeFunctionBody
    !analysisContext
    ![@formalInputParameterListAST emptyList]
    ![@typedAttributeList emptyList]
    !""
    !mFunctionInstructionList
    !mResultVariableName
    !mResultTypeName
    !mEndOfFunctionInstructionList
    ?*
    ?returnType
    ?resultVariableCppName
    ?semanticInstructionListForGeneration
  ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"once function " . mFunctionName
    ![@onceFunctionDeclarationForGeneration new
      !true # Generate Cpp header file
      !"func-" . mFunctionName
      ![mFunctionName string]
      !returnType
      !resultVariableCppName
      !semanticInstructionListForGeneration
    ]
    !""
  ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#     F I L E W R A P P E R    A N A L Y S I S                              *
#                                                                           *
#---------------------------------------------------------------------------*

override method @filewrapperDeclarationAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Get filewrapper features
  [inSemanticContext->mFilewrapperMap searchKey
    !mFilewrapperName
    ?*
    ?*
    ??@wrapperFileMap wrapperFileMap
    ??@wrapperDirectoryMap wrapperDirectoryMap
    ?2*
  ] ;
#--- Build absolute path
  @string absoluteSourcePath ;
  if [mFilewrapperPath->string firstCharacterOrNul] == '/' then
    absoluteSourcePath := mFilewrapperPath->string ;
  else
    absoluteSourcePath := [mSourceFileAbsolutePath stringByDeletingLastPathComponent] . "/" . [mFilewrapperPath string] ;
  end if ;
  if not [absoluteSourcePath directoryExists] then
    error mFilewrapperPath: "The '" . absoluteSourcePath . "' directory does not exist" ;
  else
  #---- Analyze filewrapper templates
    @filewrapperTemplateListForGeneration filewrapperTemplateListForGeneration [emptyList] ;
    foreach mFilewrapperTemplateList do
      if [[mFilewrapperTemplatePath string] firstCharacterOrNul] == '/' then
        error mFilewrapperTemplatePath : "the path should not begin with a '/'; it is relative to filewrapper path '" . absoluteSourcePath . "'" ;
      end if ;
      const @string absoluteTemplatePath := absoluteSourcePath . "/" . mFilewrapperTemplatePath ;
      @templateInstructionListAST resultingInstructionList ;
    #--- Parse template
      grammar templateGrammar in [@lstring new !absoluteTemplatePath ![mFilewrapperTemplatePath location]] ?resultingInstructionList ;
    #--- Build template variable map
      @templateVariableMap templateVariableMap := {} ;
      @formalInputParameterListForGeneration filewrapperTemplateFormalInputParameters [emptyList] ;
      foreach mFilewrapperTemplateFormalInputParameters do
        @unifiedTypeMapProxy type [searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName] ;
        const @string cppVarName := "in_" . [[mFormalArgumentName string] identifierRepresentation] ;
        [!?templateVariableMap insertKey !mFormalArgumentName !type !cppVarName] ;
        filewrapperTemplateFormalInputParameters += !mFormalTemplateSelector !type !cppVarName !mFormalArgumentName !true ;
      end foreach ;
    #--- Analyze template
      @templateInstructionListForGeneration templateInstructionListForGeneration [emptyList] ;
      const templateAnalysisContext := [@templateAnalysisContext new
        !inSemanticContext
        !inPredefinedTypes
        !templateVariableMap
      ] ;
      templateInstructionListAnalysis !templateAnalysisContext !resultingInstructionList !?templateInstructionListForGeneration ;
    #--- Enter in generation list
      filewrapperTemplateListForGeneration +=
        ![mFilewrapperTemplateName string]
        !filewrapperTemplateFormalInputParameters
        !templateInstructionListForGeneration
      ;
    end foreach ;
  #---- Enter filewrapper in generated list
    ioSemanticDeclarationListForGeneration +=
      !"filewrapper " . mFilewrapperName
      ![@filewrapperDeclarationForGeneration new
        !true # Generate Cpp header file
        !"filewrapper-" . mFilewrapperName
        ![mFilewrapperName string]
        ![mFilewrapperPath string]
        !wrapperFileMap
        !wrapperDirectoryMap
        !filewrapperTemplateListForGeneration
      ]
    !""
  ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryMethodAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check self type is an abstract class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mAbstractCategoryMethodName: "cannot declare a category method: '@" . [selfType key] . "' is not a class" ;
  elsif [selfType mIsConcrete] then
    error mAbstractCategoryMethodName: "cannot declare an abstract category method: '@" . [selfType key] . "' is not an abstract class" ;
  end if ;
#--- Compute method signature
  @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
  foreach mAbstractCategoryMethodFormalParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      !mFormalArgumentPassingMode
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
      !mFormalArgumentName
      ![mFormalArgumentName string]
    ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"abstract extension method " . mAbstractCategoryMethodName
    ![@abstractCategoryMethodForGeneration new
      !true # Generate Cpp header file
      !"method-" . [selfType key] . "-" . mAbstractCategoryMethodName
      !selfType
      ![mAbstractCategoryMethodName string]
      !formalParameterListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryMethodAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
  @string selfObjectName ;
  @string selfObjectAccessor ;
  @bool implementedAsFunction ;
#--- Check self type is a class
  if [selfType mTypeKindEnum] == [@typeKindEnum classType] then
    selfObjectName := "object" ;
    selfObjectAccessor := "object->" ;
    implementedAsFunction := false ;
  else
    selfObjectName := "inObject" ;
    selfObjectAccessor := "inObject." ;
    implementedAsFunction := true ;
  end if ;
#--- Analyze instruction list
  @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !selfObjectName
    ![@unifiedTypeMapProxy null]
  ] ;
  analyzeRoutineBody
    !analysisContext
    !mCategoryMethodFormalParameterList
    ![@localConstantList emptyList]
    !if ([selfType mTypeKindEnum] == [@typeKindEnum classType]) | ([selfType mTypeKindEnum] == [@typeKindEnum structType])
       then [selfType mAllTypedAttributeList]
       else [@typedAttributeList emptyList]
     end
    ![@typedAttributeList emptyList]
    !selfObjectAccessor
    !mCategoryMethodInstructionList
    !mEndOfMethodLocation
    ?semanticInstructionListForGeneration
    ?formalParameterListForGeneration
  ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"extension method " . mCategoryMethodName
    ![@categoryMethodForGeneration new
      !true # Generate Cpp header file
      !"method-" . [selfType key] . "-" . mCategoryMethodName
      !selfType
      ![mCategoryMethodName string]
      !implementedAsFunction
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryMethodAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check self type is a class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mOverridingCategoryMethodName: "cannot declare a category method: '@" . [selfType key] . "' is not a class" ;
  end if ;
#--- Find base type name
  @string baseTypeName := "" ;
  @unifiedTypeMapProxy superType := [selfType mSuperType] ;
  @formalParameterSignature inheritedSignature [emptyList] ;
  @location inheritedDeclarationLocation := here ;
  loop [inSemanticContext->mTypeMap count] + 1 :
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mInstanceMethodMap] hasKey ![mOverridingCategoryMethodName string]] then
      @methodQualifier qualifier ;
      [[superType mInstanceMethodMap] searchKey !mOverridingCategoryMethodName ?* ?inheritedSignature ?inheritedDeclarationLocation ?* ?qualifier ?*] ;
      if qualifier <= [@methodQualifier isBasicFinal] then
        baseTypeName := [superType key] ;
      end if ;
    end if ;
    superType := [superType mSuperType] ;
  end loop ;
  if baseTypeName == "" then
    error mOverridingCategoryMethodName:"this method is not declared by a super class" ;
  end if ;
#--- Analyze instruction list
  @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !"object"
    ![@unifiedTypeMapProxy null]
  ] ;
  analyzeRoutineBody
    !analysisContext
    !mOverridingCategoryMethodFormalParameterList
    ![@localConstantList emptyList]
    !if ([selfType mTypeKindEnum] == [@typeKindEnum classType]) | ([selfType mTypeKindEnum] == [@typeKindEnum structType])
       then [selfType mAllTypedAttributeList]
       else [@typedAttributeList emptyList]
     end
    ![@typedAttributeList emptyList]
    !"object->"
    !mOverridingCategoryMethodInstructionList
    !mEndOfMethodLocation
    ?semanticInstructionListForGeneration
    ?formalParameterListForGeneration
  ;
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures
      !formalParameterListForGeneration
      ![mOverridingCategoryMethodName location]
      !inheritedSignature
      !inheritedDeclarationLocation
    ;
  end if ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"override extension method " . mOverridingCategoryMethodName
    ![@overridingCategoryMethodForGeneration new
      !false # Do not generate Cpp header file
      !"method-" . [selfType key] . "-" . mOverridingCategoryMethodName
      !selfType
      !baseTypeName
      ![mOverridingCategoryMethodName string]
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryMethodAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration unused ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check type is an abstract class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mOverridingCategoryMethodName: "cannot declare a category method: '@" . [selfType key] . "' is not a class" ;
  elsif [selfType mIsConcrete] then
    error mOverridingCategoryMethodName: "cannot declare an abstract category method: '@" . [selfType key] . "' is not an abstract class" ;
  end if ;
#--- Find base type name
  @string baseTypeName := "" ;
  @unifiedTypeMapProxy superType := [selfType mSuperType] ;
  @formalParameterSignature inheritedSignature [emptyList] ;
  @location inheritedDeclarationLocation := here ;
  loop [inSemanticContext->mTypeMap count] + 1 :
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mInstanceMethodMap] hasKey ![mOverridingCategoryMethodName string]] then
      @methodQualifier qualifier ;
      [[superType mInstanceMethodMap] searchKey !mOverridingCategoryMethodName ?* ?inheritedSignature ?inheritedDeclarationLocation ?* ?qualifier ?*] ;
      if qualifier <= [@methodQualifier isBasicFinal] then
        baseTypeName := [superType key] ;
      end if ;
    end if ;
    superType := [superType mSuperType] ;
  end loop ;
  if baseTypeName == "" then
    error mOverridingCategoryMethodName:"this getter is not declared by a super class" ;
  end if ;
#--- Analyze formal argument list
  @variableMap variableMap [emptyMap] ;
  @formalParameterListForGeneration formalParameterListForGeneration ;
  buildLocalVariableMapAndSignature
    !inSemanticContext
    !mOverridingCategoryMethodFormalParameterList
    !?variableMap
    ?formalParameterListForGeneration
  ;
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures
      !formalParameterListForGeneration
      ![mOverridingCategoryMethodName location]
      !inheritedSignature
      !inheritedDeclarationLocation
    ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryModifierAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check self type is an abstract class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mAbstractCategoryModifierName: "cannot declare a category modifier: '@" . [selfType key] . "' is not a class" ;
  elsif [selfType mIsConcrete] then
    error mAbstractCategoryModifierName: "cannot declare an abstract category modifier: '@" . [selfType key] . "' is not an abstract class" ;
  end if ;
#--- Compute modifier signature
  @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
  foreach mAbstractCategoryModifierFormalParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      !mFormalArgumentPassingMode
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
      !mFormalArgumentName
      ![mFormalArgumentName string]
    ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration +=
    !" abstract extension setter " . mAbstractCategoryModifierName
    ![@abstractCategoryModifierForGeneration new
      !true # Generate Cpp header file
      !"setter-" . mTypeName . "-" . mAbstractCategoryModifierName
      !selfType
      ![mAbstractCategoryModifierName string]
      !formalParameterListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @categoryModifierAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
  @string selfObjectName ;
  @string selfObjectAccessor ;
  @bool implementedAsFunction ;
#--- Check self type is a class
  if [selfType mTypeKindEnum] == [@typeKindEnum classType] then
    selfObjectName := "object" ;
    selfObjectAccessor := "object->" ;
    implementedAsFunction := false ;
  else
    selfObjectName := "ioObject" ;
    selfObjectAccessor := "ioObject." ;
    implementedAsFunction := true ;
  end if ;
#--- Analyze instruction list
  @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !selfObjectName
    !selfType
  ] ;
  analyzeRoutineBody
    !analysisContext
    !mCategoryModifierFormalParameterList
    ![@localConstantList emptyList]
    ![@typedAttributeList emptyList]
    ![selfType mAllTypedAttributeList]
    !selfObjectAccessor
    !mCategoryModifierInstructionList
    !mEndOfModifierLocation
    ?semanticInstructionListForGeneration
    ?formalParameterListForGeneration
  ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"extension setter " . mCategoryModifierName
    ![@categoryModifierForGeneration new
      !true # Generate Cpp header file
      !"setter-" . [selfType key] . "-" . mCategoryModifierName
      !selfType
      ![mCategoryModifierName string]
      !implementedAsFunction
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryModifierAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check self type is a class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mOverridingCategoryModifierName: "cannot declare a category modifier: '@" . [selfType key] . "' is not a class" ;
  end if ;
#--- Find base type name
  @string baseTypeName := "" ;
  @unifiedTypeMapProxy superType := [selfType mSuperType] ;
  @formalParameterSignature inheritedSignature [emptyList] ;
  @location inheritedDeclarationLocation := here ;
  loop [inSemanticContext->mTypeMap count] + 1 :
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mModifierMap] hasKey ![mOverridingCategoryModifierName string]] then
      @methodQualifier qualifier ;
      [[superType mModifierMap] searchKey !mOverridingCategoryModifierName ?* ?inheritedSignature ?* ?qualifier ?*] ;
      if qualifier <= [@methodQualifier isBasicFinal] then
        baseTypeName := [superType key] ;
      end if ;
    end if ;
    superType := [superType mSuperType] ;
  end loop ;
  if baseTypeName == "" then
    error mOverridingCategoryModifierName:"this modifier is not declared by a super class" ;
  end if ;
#--- Analyze instruction list
  @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !"object"
    !selfType
  ] ;
  analyzeRoutineBody
    !analysisContext
    !mOverridingCategoryModifierFormalParameterList
    ![@localConstantList emptyList]
    ![@typedAttributeList emptyList]
    ![selfType mAllTypedAttributeList]
    !"object->"
    !mOverridingCategoryModifierInstructionList
    !mEndOfModifierLocation
    ?semanticInstructionListForGeneration
    ?formalParameterListForGeneration
  ;
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures
      !formalParameterListForGeneration
      ![mOverridingCategoryModifierName location]
      !inheritedSignature
      !inheritedDeclarationLocation
    ;
  end if ;
#---
  ioSemanticDeclarationListForGeneration +=
    !" overriding extension setter " . mOverridingCategoryModifierName
    ![@overridingCategoryModifierForGeneration new
      !false # Do not generate Cpp header file
      !"setter-" . mTypeName . "-" . mOverridingCategoryModifierName
      !selfType
      !baseTypeName
      ![mOverridingCategoryModifierName string]
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryModifierAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration unused ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check type is an abstract class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mOverridingCategoryModifierName: "cannot declare a category modifier: '@" . [selfType key] . "' is not a class" ;
  elsif [selfType mIsConcrete] then
    error mOverridingCategoryModifierName: "cannot declare an abstract category modifier: '@" . [selfType key] . "' is not an abstract class" ;
  end if ;
#--- Find base type name
  @string baseTypeName := "" ;
  @unifiedTypeMapProxy superType := [selfType mSuperType] ;
  @formalParameterSignature inheritedSignature [emptyList] ;
  @location inheritedDeclarationLocation := here ;
  loop [inSemanticContext->mTypeMap count] + 1 :
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mModifierMap] hasKey ![mOverridingCategoryModifierName string]] then
      @methodQualifier qualifier ;
      [[superType mModifierMap] searchKey !mOverridingCategoryModifierName ?* ?inheritedSignature ?* ?qualifier ?*] ;
      if qualifier <= [@methodQualifier isBasicFinal] then
        baseTypeName := [superType key] ;
      end if ;
    end if ;
    superType := [superType mSuperType] ;
  end loop ;
  if baseTypeName == "" then
    error mOverridingCategoryModifierName:"this modifier is not declared by a super class" ;
  end if ;
#--- Analyze formal argument list
  @variableMap variableMap [emptyMap] ;
  @formalParameterListForGeneration formalParameterListForGeneration ;
  buildLocalVariableMapAndSignature
    !inSemanticContext
    !mOverridingCategoryModifierFormalParameterList
    !?variableMap
    ?formalParameterListForGeneration
  ;
#--- Check Signature
  if baseTypeName != "" then
    checkMethodSignatures
      !formalParameterListForGeneration
      ![mOverridingCategoryModifierName location]
      !inheritedSignature
      !inheritedDeclarationLocation
    ;
  end if ;
end method ;

#---------------------------------------------------------------------------*

override method @abstractCategoryReaderAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check self type is an abstract class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mAbstractCategoryReaderName: "cannot declare a category reader: '@" . [selfType key] . "' is not a class" ;
  elsif [selfType mIsConcrete] then
    error mAbstractCategoryReaderName: "cannot declare an abstract category reader: '@" . [selfType key] . "' is not an abstract class" ;
  end if ;
#--- Compute method signature
  @formalInputParameterListForGeneration formalParameterListForGeneration [emptyList] ;
  foreach mAbstractCategoryReaderFormalInputParameterList do
    formalParameterListForGeneration +=
      !mFormalSelector
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
      ![mFormalArgumentName string]
      !mFormalArgumentName
      !mIsConstant
    ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"abstract extension getter " . mAbstractCategoryReaderName
    ![@abstractCategoryReaderForGeneration new
      !true # Generate Cpp header file
      !"getter-" . mTypeName . "-" . mAbstractCategoryReaderName
      !selfType
      ![mAbstractCategoryReaderName string]
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAbstractCategoryReaderReturnedTypeName]
      !formalParameterListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;


#---------------------------------------------------------------------------*

override method @categoryReaderAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:

#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
  @string selfObjectName ;
  @string selfObjectAccessor ;
  @bool implementedAsFunction ;
#--- Check self type is a class
  if [selfType mTypeKindEnum] == [@typeKindEnum classType] then
    selfObjectName := "object" ;
    selfObjectAccessor := "object->" ;
    implementedAsFunction := false ;
  else
    selfObjectName := "inObject" ;
    selfObjectAccessor := "inObject." ;
    implementedAsFunction := true ;
  end if ;
#--- Analyze instruction list
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !selfObjectName
    ![@unifiedTypeMapProxy null]
  ] ;
  @unifiedTypeMapProxy returnType ;
  @string returnVariableCppName ;
  @formalInputParameterListForGeneration formalParameterListForGeneration ;
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  analyzeFunctionBody
    !analysisContext
    !mCategoryReaderFormalInputParameterList
    !if ([selfType mTypeKindEnum] == [@typeKindEnum classType]) | ([selfType mTypeKindEnum] == [@typeKindEnum structType]) | ([selfType mTypeKindEnum] == [@typeKindEnum mapProxyType])
       then [selfType mAllTypedAttributeList]
       else [@typedAttributeList emptyList]
     end
    !selfObjectAccessor
    !mCategoryReaderInstructionList
    !mCategoryReaderReturnedVariableName
    !mCategoryReaderReturnedTypeName
    !mEndOfReaderLocation
    ?formalParameterListForGeneration
    ?returnType
    ?returnVariableCppName
    ?semanticInstructionListForGeneration
  ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"extension getter " . mCategoryReaderName
    ![@categoryReaderForGeneration new
      !true # Generate Cpp header file
      !"getter-" . [selfType key] . "-" . mCategoryReaderName
      !selfType
      ![mCategoryReaderName string]
      !implementedAsFunction
      !returnType
      !returnVariableCppName
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingCategoryReaderAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Check self type is a class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mOverridingCategoryReaderName: "cannot declare a category reader: '@" . [selfType key] . "' is not a class" ;
  end if ;
#--- Find base type name
  @string baseTypeName := "" ;
  @unifiedTypeMapProxy superType := [selfType mSuperType] ;
  @functionSignature inheritedSignature := {} ;
  @unifiedTypeMapProxy inheritedReturnType [null] ;
  @location inheritedDeclarationLocation := here ;
  loop [inSemanticContext->mTypeMap count] + 1 :
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mReaderMap] hasKey ![mOverridingCategoryReaderName string]] then
      [[superType mReaderMap] searchKey
        !mOverridingCategoryReaderName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?inheritedReturnType
        ??@methodQualifier qualifier
        ?*
      ] ;
      if qualifier <= [@methodQualifier isBasicFinal] then
        baseTypeName := [superType key] ;
      end if ;
    end if ;
    superType := [superType mSuperType] ;
  end loop ;
  if baseTypeName == "" then
    error mOverridingCategoryReaderName:"this getter is not declared by a super class" ;
  end if ;
#--- Analyze instruction list
  const analysisContext := [@analysisContext new
    !inSemanticContext
    !inPredefinedTypes
    !selfType
    !"object"
    ![@unifiedTypeMapProxy null]
  ] ;
  analyzeFunctionBody
    !analysisContext
    !mOverridingCategoryReaderFormalInputParameterList
    !if ([selfType mTypeKindEnum] == [@typeKindEnum classType]) | ([selfType mTypeKindEnum] == [@typeKindEnum structType])
       then [selfType mAllTypedAttributeList]
       else [@typedAttributeList emptyList]
     end
    !"object->"
    !mOverridingCategoryReaderInstructionList
    !mOverridingCategoryReaderReturnedVariableName
    !mOverridingCategoryReaderReturnedTypeName
    !mEndOfReaderLocation
    ??@formalInputParameterListForGeneration formalParameterListForGeneration
    ??@unifiedTypeMapProxy returnType
    ??@string returnVariableCppName
    ??@semanticInstructionListForGeneration semanticInstructionListForGeneration
  ;
#--- Check Signature
  if baseTypeName != "" then
    checkReaderSignatures
      !formalParameterListForGeneration
      !returnType
      ![mOverridingCategoryReaderName location]
      !inheritedSignature
      !inheritedReturnType
      !inheritedDeclarationLocation
    ;
  end if ;
#---
  ioSemanticDeclarationListForGeneration +=
    !"override extension getter " . mOverridingCategoryReaderName
    ![@overrideCategoryReaderForGeneration new
      !false # Do not generate Cpp header file
      !"getter-" . mTypeName . "-" . mOverridingCategoryReaderName
      !selfType
      !baseTypeName
      ![mOverridingCategoryReaderName string]
      !returnType
      !returnVariableCppName
      !formalParameterListForGeneration
      ![selfType mAllTypedAttributeList]
      !semanticInstructionListForGeneration
    ]
    !"~" # So that category are declared at the end of the file
  ;
end method ;

#---------------------------------------------------------------------------*

override method @overridingAbstractCategoryReaderAST semanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationSortedListForGeneration unused ioSemanticDeclarationListForGeneration
:
#--- Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mTypeName] ;
#--- Return type
  const @unifiedTypeMapProxy returnType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAbstractCategoryReaderReturnedTypeName] ;
#--- Check type is an abstract class
  if [selfType mTypeKindEnum] != [@typeKindEnum classType] then
    error mAbstractCategoryReaderName: "cannot declare a category reader: '@" . [selfType key] . "' is not a class" ;
  elsif [selfType mIsConcrete] then
    error mAbstractCategoryReaderName: "cannot declare an abstract category reader: '@" . [selfType key] . "' is not an abstract class" ;
  end if ;
#--- Find base type name
  @string baseTypeName := "" ;
  @unifiedTypeMapProxy superType := [selfType mSuperType] ;
  @functionSignature inheritedSignature := {} ;
  @unifiedTypeMapProxy inheritedReturnType [null] ;
  @location inheritedDeclarationLocation := here ;
  loop [inSemanticContext->mTypeMap count] + 1 :
  while (not [superType isNull]) & (baseTypeName == "") do
    if [[superType mReaderMap] hasKey ![mAbstractCategoryReaderName string]] then
      @methodQualifier qualifier ;
      [[superType mReaderMap] searchKey
        !mAbstractCategoryReaderName
        ?*
        ?inheritedSignature
        ?inheritedDeclarationLocation
        ?*
        ?inheritedReturnType
        ?qualifier
        ?*
      ] ;
      if qualifier <= [@methodQualifier isBasicFinal] then
        baseTypeName := [superType key] ;
      end if ;
    end if ;
    superType := [superType mSuperType] ;
  end loop ;
  if baseTypeName == "" then
    error mAbstractCategoryReaderName:"this getter is not declared by a super class" ;
  end if ;
#--- Check Signature
  if baseTypeName != "" then
    @formalInputParameterListForGeneration formalParameterListForGeneration [emptyList] ;
    foreach mAbstractCategoryReaderFormalInputParameterList do
      formalParameterListForGeneration +=
        !mFormalSelector
        ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
        ![mFormalArgumentName string]
        !mFormalArgumentName
        !mIsConstant
      ;
    end foreach ;
    checkReaderSignatures
      !formalParameterListForGeneration
      !returnType
      ![mAbstractCategoryReaderName location]
      !inheritedSignature
      !inheritedReturnType
      !inheritedDeclarationLocation
    ;
  end if ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    P R E D E F I N E D    T Y P E S                                       *
#                                                                           *
#---------------------------------------------------------------------------*

function buildPredefinedTypes
  ??@semanticContext inSemanticContext
  ->@predefinedTypes outPredefinedTypes {
  outPredefinedTypes := [@predefinedTypes new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"location" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"bool" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"char" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"string" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"uint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"sint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"uint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"sint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"double" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lbool" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lchar" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lstring" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"luint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lsint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"luint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lsint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"ldouble" !here]]
  ] ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    P E R F O R M     S E M A N T I C     A N A L Y S I S                  *
#                                                                           *
#---------------------------------------------------------------------------*

routine performSemanticAnalysis
  ??@semanticDeclarationListAST inDeclarationList
  ??@semanticContext inSemanticContext
  !@semanticDeclarationSortedListForGeneration outDecoratedDeclarationListForGeneration
:
#------ Check there is no undefined types
  foreach [inSemanticContext->mTypeMap unsolvedProxyList] do
    error mValue : "the '" . mValue . "' type is undefined" ;
  end foreach ;
#------ Create associated type (@TYPE:element) for lists, maps, ...
  @semanticDeclarationListAST semanticDeclarationList := inDeclarationList ;
  foreach inDeclarationList do
    [mSemanticDeclaration addAssociatedElement !?semanticDeclarationList] ;
  end foreach ;
#---
  outDecoratedDeclarationListForGeneration := [@semanticDeclarationSortedListForGeneration emptySortedList] ;
  if [@uint errorCount] == 0 then
    const @predefinedTypes predefinedTypes := buildPredefinedTypes [!inSemanticContext] ;
    foreach semanticDeclarationList do
      [mSemanticDeclaration semanticAnalysis
        !inSemanticContext
        !predefinedTypes
        !?outDecoratedDeclarationListForGeneration
      ] ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
