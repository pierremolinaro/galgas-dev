#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticAnalysis :
  import "semanticInstructionsAnalysis.gSemantics" ;
  import semantics semanticInstructionsAnalysis in "semanticInstructionsAnalysis.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C H E C K    M E T H O D    S I G N A T U R E                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine checkMethodSignatures
  ??@formalParameterListForGeneration inTestedSignature
  ??@location inErrorLocation
  ??@formalParameterSignature inReferenceSignature
  ??@location inReferenceLocation
:
  if [inTestedSignature length] != [inReferenceSignature length] then
    error inErrorLocation:"this method declares " . [[inTestedSignature length] string]
    . " formal parameter(s), but overriden method declares " . [[inReferenceSignature length] string]
    ;
    error inReferenceLocation:"overriden method is declared here" ;
  else
    foreach inReferenceSignature prefixedby ref_, inTestedSignature do
      if ref_mFormalArgumentPassingMode != mFormalArgumentPassingMode then
        error mFormalArgumentName : "the '" . mFormalArgumentName . "' formal parameter is declared as "
        . [mFormalArgumentPassingMode formalArgumentMessage] . ", but overriden method declares it as " 
        . [ref_mFormalArgumentPassingMode formalArgumentMessage] ;
        error inReferenceLocation:"overriden method is declared here" ;
      end if ;
      if [mFormalArgumentType key] != [ref_mFormalArgumentType key] then
        error mFormalArgumentName : "the '" . mFormalArgumentName . "' formal parameter has the '@"
        . [mFormalArgumentType key] . "' type, but overriden method declares with the '@" 
        . [ref_mFormalArgumentType key] . "' type" ;
        error inReferenceLocation:"overriden method is declared here" ;
      end if ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C L A R A T I O N    S E M A N T I C    A N A L Y S I S            *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticDeclarationAST performSemanticAnalysis
  ??@semanticContext unused inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
:
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  ioSemanticDeclarationListForGeneration += ![@primitiveTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !mPredefinedTypeName !here]]
  ] ;

end method ;

#---------------------------------------------------------------------------*

map @attributeIndexMap {
  @unifiedTypeMapProxy mAttributeTypeIndex ;
  insert insertKey error message "the '%K' attribute is already declared" ;
  search searchKey error message "the '%K' attribute is not declared" ;
}

#---------------------------------------------------------------------------*

override method @listDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    typedAttributeList +=
      !t
      !mAttributeName
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
  ioSemanticDeclarationListForGeneration += ![@listTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mListTypeName]
    !typedAttributeList
  ] ;

end method ;

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Attribute
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    typedAttributeList +=
      !t
      !mAttributeName
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#--- Sort descriptor
  @stringset attributesUsedForSorting [emptySet] ;
  @sortDescriptorListForGeneration sortDescriptorList [emptyList] ;
  foreach mSortDescriptorList do
    @unifiedTypeMapProxy type ;
    [attributeMap searchKey !mSortedAttributeName ?type] ;
    sortDescriptorList += !type ![mSortedAttributeName string] !mAscending ;
    if [attributesUsedForSorting hasKey ![mSortedAttributeName string]] then
      error mSortedAttributeName : "the '" . mSortedAttributeName . "' is already used for sorting" ;
    end if ;
    attributesUsedForSorting += ![mSortedAttributeName string] ;
  end foreach ;
#--- Generate type
  ioSemanticDeclarationListForGeneration += ![@sortedListTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mSortedListTypeName]
    !typedAttributeList
    !sortDescriptorList
  ] ;

end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    typedAttributeList +=
      !t
      !mAttributeName
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
  ioSemanticDeclarationListForGeneration += ![@structTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mStructTypeName]
    !typedAttributeList
  ] ;
end method ;

#---------------------------------------------------------------------------*

map @constantIndexMap {
  @uint mIndex ;
  insert insertKey error message "the '%K' constant is already declared" ;
  search searchKey error message "the '%K' constant is not declared" ;
}

#---------------------------------------------------------------------------*

override method @enumDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Constant list
  @stringlist constantList [emptyList] ;
  @constantIndexMap constantMap [emptyMap] ;
  foreach mConstantList do
    constantList += ![mValue string] ;
    [!?constantMap insertKey !mValue ![constantMap count]] ;
  end foreach ;
  const @stringset constantSet := [constantMap allKeys] ;
#--- Messages
  @enumMessageListForGeneration enumMessageList [emptyList] ;
  @stringset messageNameSet [emptySet] ;
  foreach mEnumMessageList do
    if [messageNameSet hasKey ![mEnumMessageName string]] then
      error mEnumMessageName : "this message is already declared for this enum type" ;
    end if ;
    messageNameSet += ![mEnumMessageName string] ;
    @enumMessageAssociationSortedListForGeneration enumMessageAssociationSortedListForGeneration [emptySortedList] ;
    @stringset usedConstantSet [emptySet] ; # For checking no constant is missed
    foreach mMessageAssociationList do
      @uint constantIndex ;
      [constantMap searchKey !mConstantName ?constantIndex] ;
      usedConstantSet += ![mConstantName string] ;
      enumMessageAssociationSortedListForGeneration +=
        !constantIndex
        ![mConstantName string]
        ![mMessage string]
      ;
    end foreach ;
    const @stringset missedConstantSet := constantSet - usedConstantSet ;
    foreach missedConstantSet do
      error mEnumMessageName : "the '" . mEnumMessageName . "' message definition does not name the '"
        . key . "' constant" ;
    end foreach ;
    enumMessageList += ![mEnumMessageName string] !enumMessageAssociationSortedListForGeneration ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration += ![@enumTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mEnumTypeName]
    !constantList
    !enumMessageList
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Check associated list is actually a list
  @typeKindEnum typeKindEnum ;
  @typedAttributeList listTypeAttributeList ;
  [inSemanticContext->mTypeMap searchKey !mAssociatedListTypeName ?2* ?typeKindEnum ?listTypeAttributeList ?17*] ;
#---
  ioSemanticDeclarationListForGeneration += ![@listmapTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mListmapTypeName]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAssociatedListTypeName]
    !listTypeAttributeList
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @genericTypeTypeAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  ioSemanticDeclarationListForGeneration += ![@genericTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !mTypeName !here]]
  ] ;
end method ;

#---------------------------------------------------------------------------*

map @insertMethodMap {
  insert insertKey error message "the '%K' insert modifier is already declared" ;
}

#---------------------------------------------------------------------------*

map @searchMethodMap {
  insert insertKey error message "the '%K' search method is already declared" ;
}

#---------------------------------------------------------------------------*

override method @mapDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#------ Enter attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    typedAttributeList +=
      !t
      !mAttributeName
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#--- Enter insert modifiers
  @insertMethodMap insertMethodMap [emptyMap] ;
  foreach mInsertMethodList do
    [!?insertMethodMap insertKey !mMethodName] ;
  #--- Check error message escape sequences : only %K, %L or %%
    foreach [mErrorMessage componentsSeparatedByString !"%%"] do
      @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
      [!?explodedArray popFirst ?*] ;
      foreach explodedArray do
        if [mValue length] > 0 then
          const @char c := [mValue characterAtIndex !0] ;
          if (c != 'K') & (c != 'L') then
            error mErrorMessage: "only '%K', '%L' and '%%' escape sequences are allowed in an insert error message" ;
          end if ;
        end if ;
      end foreach ;
    end foreach ;
  #--- Check shadow error message escape sequences : only %K, %L or %%
    foreach [mShadowErrorMessage componentsSeparatedByString !"%%"] do
      @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
      [!?explodedArray popFirst ?*] ;
      foreach explodedArray do
        if [mValue length] > 0 then
          const @char c := [mValue characterAtIndex !0] ;
          if (c != 'K') & (c != 'L') then
            error mErrorMessage: "only '%K', '%L' and '%%' escape sequences are allowed in a shadow error message" ;
          end if ;
        end if ;
      end foreach ;
    end foreach ;
  end foreach ;
#--- Enter search methods
  @searchMethodMap searchMethodMap [emptyMap] ;
  foreach mSearchMethodList do
    [!?searchMethodMap insertKey !mMethodName] ;
  #--- Check error message escape sequences : only %K or %%
    foreach [mErrorMessage componentsSeparatedByString !"%%"] do
      @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
      [!?explodedArray popFirst ?*] ;
      foreach explodedArray do
        if [mValue length] > 0 then
          const @char c := [mValue characterAtIndex !0] ;
          if c != 'K' then
            error mErrorMessage: "only '%K' and '%%' escape sequences are allowed in a search error message" ;
          end if ;
        end if ;
      end foreach ;
    end foreach ;
  end foreach ;
#--- Enter remove methods
  foreach mRemoveMethodList do
    [!?insertMethodMap insertKey !mMethodName] ;
  #--- Check error message escape sequences : only %K or %%
    foreach [mErrorMessage componentsSeparatedByString !"%%"] do
      @stringlist explodedArray := [mValue componentsSeparatedByString !"%"] ;
      [!?explodedArray popFirst ?*] ;
      foreach explodedArray do
        if [mValue length] > 0 then
          const @char c := [mValue characterAtIndex !0] ;
          if c != 'K' then
            error mErrorMessage: "only '%K' and '%%' escape sequences are allowed in a remove error message" ;
          end if ;
        end if ;
      end foreach ;
    end foreach ;
  end foreach ;
#--- Warn for duplicated declarations or 'insertOrReplace' modifier
  foreach mInsertOrReplaceDeclarationListAST index IDX do
    if IDX > 0 then
      warning mInsertOrReplaceDeclarationLocation: "the 'insertOrReplace' modifier is already declared" ;
    end if ;
  end foreach ;
  const @bool hasInsertOrReplaceModifier := [mInsertOrReplaceDeclarationListAST length] > 0 ;
  if hasInsertOrReplaceModifier & [insertMethodMap hasKey !"insertOrReplace"] then
    @location insertOrReplaceDeclarationLocation ;
    [mInsertOrReplaceDeclarationListAST first ?insertOrReplaceDeclarationLocation] ;
    error insertOrReplaceDeclarationLocation : "the insertOrReplace' modifier cannot be declared : an insert modifier or a remove modifier has been declared with this name" ;
  end if ;
#--- Enter 'with' accessors
  @withAccessorMap withAccessorMap [emptyMap] ;
  [!?withAccessorMap insertKey ![@lstring new !"hasKey" !here] !inPredefinedTypes->mStringType] ;
  foreach mSearchMethodList do
    [!?withAccessorMap insertKey
      !mMethodName
      !inPredefinedTypes->mLStringType
    ] ;
  end foreach ;
#--- Enter map declaration
  ioSemanticDeclarationListForGeneration += ![@mapTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mMapTypeName]
    !mMapTypeName
    !typedAttributeList
    !mInsertMethodList
    !mSearchMethodList
    !mRemoveMethodList
    !hasInsertOrReplaceModifier
    !withAccessorMap
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapProxyDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Get attribute list of associated map
  @typedAttributeList listTypeAttributeList ;
  @mapSearchMethodListAST searchMethodList ;
  [inSemanticContext->mTypeMap searchKey !mAssociatedMapTypeName ?5* ?listTypeAttributeList ?12* ?searchMethodList ?2*] ;
#---
  ioSemanticDeclarationListForGeneration += ![@mapProxyTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mMapProxyTypeName]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mAssociatedMapTypeName]
    !listTypeAttributeList
    !searchMethodList
  ] ;
end method ;

#---------------------------------------------------------------------------*

map @declaredMethodMap { # This map is used for checking a method is declared once within a class
  insert insertKey error message "the '%K' method is already declared in %L for this class" ;
}

#---------------------------------------------------------------------------*

routine buildLocalVariableMapAndSignature
  ??@semanticContext inSemanticContext
  ??@formalParameterListAST inRoutineSignatureAST
  ?!@variableMap ioVariableMap
  !@formalParameterListForGeneration outRoutineSignature
:
  outRoutineSignature := [@formalParameterListForGeneration emptyList] ;
  foreach inRoutineSignatureAST do
    const @unifiedTypeMapProxy type [searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName] ;
    @string formalArgumentCppName ;
    switch mFormalArgumentPassingMode
    when argumentIn :
      formalArgumentCppName := "inArgument_" . [mFormalArgumentName identifierRepresentation] ;
      if mIsUnused then
        [!?ioVariableMap insertInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !type !formalArgumentCppName] ;
      else
        [!?ioVariableMap insertInputFormalArgument !mFormalArgumentName !type !formalArgumentCppName] ;
      end if ;
    when argumentOut :
      formalArgumentCppName := "outArgument_" . [mFormalArgumentName identifierRepresentation] ;
      [!?ioVariableMap insertOutputFormalArgument !mFormalArgumentName !type !formalArgumentCppName] ;
    when argumentInOut :
      formalArgumentCppName := "ioArgument_" . [mFormalArgumentName identifierRepresentation] ;
      if mIsUnused then
        [!?ioVariableMap insertInputOutputFormalArgumentDeclaredAsUnused !mFormalArgumentName !type !formalArgumentCppName] ;
      else
        [!?ioVariableMap insertInputOutputFormalArgument !mFormalArgumentName !type !formalArgumentCppName] ;
      end if ;
    when argumentConstantIn :
      formalArgumentCppName := "constinArgument_" . [mFormalArgumentName identifierRepresentation] ;
      if mIsUnused then
        [!?ioVariableMap insertConstantInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !type !formalArgumentCppName] ;
      else
        [!?ioVariableMap insertConstantInputFormalArgument !mFormalArgumentName !type !formalArgumentCppName] ;
      end if ;
    end switch ;
    outRoutineSignature += !mFormalArgumentPassingMode !type !mFormalArgumentName !formalArgumentCppName ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

routine analyzeRoutineBody
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ??@formalParameterListAST inRoutineSignatureAST
  ??@localConstantList inLocalConstantList
  ??@typedAttributeList inTypedAttributeList
  ??@semanticInstructionListAST inInstructionList
  ??@location inEndOfMethodLocation
  !@semanticInstructionListForGeneration outSemanticInstructionListForGeneration
  !@formalParameterListForGeneration outRoutineSignature
:
  @variableMap variableMap [emptyMap] ;
#--- Declare local constants
  foreach inLocalConstantList do
    if mNoWarningIfUnused then
      [!?variableMap insertUsedLocalConstant !mName !mType !mCppName] ;
    else
      [!?variableMap insertLocalConstant !mName !mType !mCppName] ;
    end if ;
  end foreach ;
#--- Enter instance attributes
  foreach inTypedAttributeList do
    [!?variableMap insertNonMutableAttribute !mAttributeName !mAttributeTypeIndex !"mAttribute_". [mAttributeName identifierRepresentation]] ;
  end foreach ;
#--- Enter formal arguments
  buildLocalVariableMapAndSignature
    !inSemanticContext
    !inRoutineSignatureAST
    !?variableMap
    ?outRoutineSignature
  ;
#---  Analyze instruction list
  outSemanticInstructionListForGeneration := [@semanticInstructionListForGeneration emptyList] ;
  foreach inInstructionList do
    [mInstruction analyzeSemanticInstruction
      !inSemanticContext
      !inPredefinedTypes
      !?outSemanticInstructionListForGeneration
      !?variableMap
    ] ;
   end foreach ;
#---
  [variableMap checkAutomatonStates !inEndOfMethodLocation] ;
end routine ;

#---------------------------------------------------------------------------*

override method @externFunctionDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @formalInputParameterListForGeneration formalArgumentList [emptyList] ;
  foreach mFormalArgumentList do
    formalArgumentList +=
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
      ![mFormalArgumentName string]
      !mIsUnused
    ;
  end foreach ;
  ioSemanticDeclarationListForGeneration += ![@functionPrototypeDeclarationForGeneration new
    ![mFunctionName string]
    !formalArgumentList
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mResultTypeName]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @externRoutineDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes unused inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @formalParameterListForGeneration formalArgumentList [emptyList] ;
  foreach mFormalArgumentList do
    formalArgumentList +=
      !mFormalArgumentPassingMode
      ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
      !mFormalArgumentName
      ![mFormalArgumentName string] # §
    ;
  end foreach ;
  ioSemanticDeclarationListForGeneration += ![@routinePrototypeDeclarationForGeneration new
    ![mRoutineName string]
    !formalArgumentList
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @routineDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Instruction list
  @formalParameterListForGeneration formalArgumentList [emptyList] ;
  @semanticInstructionListForGeneration instructionList ;
  analyzeRoutineBody
    !inSemanticContext
    !inPredefinedTypes
    !mFormalArgumentList
    ![@localConstantList emptyList]
    ![@typedAttributeList emptyList]
    !mRoutineInstructionList
    !mEndOfRoutineInstructionList
    ?instructionList
    ?formalArgumentList
  ;
#---
  ioSemanticDeclarationListForGeneration += ![@routineImplementationForGeneration new
    ![mRoutineName string]
    !formalArgumentList
    !instructionList
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#------ Self type
  const @unifiedTypeMapProxy selfType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mClassTypeName] ;
#------ Super type
  @unifiedTypeMapProxy superClassProxy ;
  if [mSuperClassName string] == "" then
    superClassProxy := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"class" !here]] ;
  else
    superClassProxy := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mSuperClassName] ;
  end if ;
#------ Enter attributes
  @typedAttributeList allAttributeList := [superClassProxy mInheritedTypedAttributeList] ;
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeMap [emptyMap] ;
  foreach mAttributeList do
    @unifiedTypeMapProxy t [searchKey !inSemanticContext->mTypeMap !mAttributeTypeName] ;
    typedAttributeList +=
      !t
      !mAttributeName
    ;
    allAttributeList +=
      !t
      !mAttributeName
    ;
    [!?attributeMap insertKey !mAttributeName !t] ;
  end foreach ;
#------ Check a method is defined once within class
  @declaredMethodMap classMethodMap [emptyMap] ;
  foreach mAbstractMethodList do
   [!?classMethodMap insertKey !mMethodName] ;
  end foreach ;
  foreach mMethodList do
   [!?classMethodMap insertKey !mMethodName] ;
  end foreach ;
#------ Inherited instance methods
  @instanceMethodMap inheritedInstanceMethodMap := [superClassProxy mInstanceMethodMap] ;
#------ Abstract methods
  @abstractMethodDefinitionListForGeneration abstractMethodList [emptyList] ;
  foreach mAbstractMethodList do
  #--- Check a concrete class does not declare an abstract method
    if not mIsAbstract then
      error mMethodName : "a concrete class cannot declare an abstract method" ;
    end if ;
  #--- Compute method signature
    @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
    foreach mSignature do
      formalParameterListForGeneration +=
        !mFormalArgumentPassingMode
        ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName]
        !mFormalArgumentName
        ![mFormalArgumentName string]
      ;
    end foreach ;
  #--- Check overriding status
    if mIsOverriding then
      @formalParameterSignature inheritedSignature ;
      @location inheritedDeclarationLocation ;
      [inheritedInstanceMethodMap searchInheritedKey !mMethodName ?inheritedSignature ?inheritedDeclarationLocation ?2*] ;
      checkMethodSignatures
        !formalParameterListForGeneration
        ![mMethodName location]
        !inheritedSignature
        !inheritedDeclarationLocation
      ;
    elsif [inheritedInstanceMethodMap hasKey ![mMethodName string]] then
      error mMethodName : "this method cannot be declared as abstract, it is already declared in super class" ;
    end if ;
    abstractMethodList += !mIsOverriding !mMethodName !formalParameterListForGeneration ;
  end foreach ;
#------ Methods
  @methodDefinitionListForGeneration methodList [emptyList] ;
  @stringset definedMethodSet [emptySet] ;
  foreach mMethodList do
  #---
    @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
    @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
    analyzeRoutineBody
      !inSemanticContext
      !inPredefinedTypes
      !mSignature
      ![@localConstantList listWithValue !selfType ![@lstring new !"self" !here] !true !"(self)"]
      !allAttributeList
      !mInstructionList
      !mEndOfMethodLocation
      ?semanticInstructionListForGeneration
      ?formalParameterListForGeneration
    ;
  #--- Check overriding status
    if mIsOverriding then
      @formalParameterSignature inheritedSignature ;
      @location inheritedDeclarationLocation ;
      [inheritedInstanceMethodMap searchInheritedKey !mMethodName ?inheritedSignature ?inheritedDeclarationLocation ?2*] ;
      checkMethodSignatures
        !formalParameterListForGeneration
        ![mMethodName location]
        !inheritedSignature
        !inheritedDeclarationLocation
      ;
    elsif [inheritedInstanceMethodMap hasKey ![mMethodName string]] then
      error mMethodName : "this method should be declared as overridding, as it is already declared in super class" ;
    end if ;
  #---
    definedMethodSet += ![mMethodName string] ;
    methodList +=
      !mIsOverriding
      !mMethodName
      !formalParameterListForGeneration
      !semanticInstructionListForGeneration
    ;
  end foreach ;
#------ Check a concrete class has no abstract method
  if not mIsAbstract then
    foreach inheritedInstanceMethodMap do
      if (mQualifier == [@readerQualifier isAbstract]) | (mQualifier == [@readerQualifier isOverridingAbstract]) then
        if not [definedMethodSet hasKey ![lkey string]] then
          error lkey : "the '@" . mClassTypeName . "' class is declared concrete, but the '" . lkey . "' method declared in a super class is not implemented" ;
        end if ;    
      end if ;
    end foreach ;
  end if ;
#------
  ioSemanticDeclarationListForGeneration += ![@classTypeForGeneration new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !mClassTypeName]
    !mIsAbstract
    !mClassTypeName
    !superClassProxy
    !allAttributeList
    !typedAttributeList
    !abstractMethodList
    !methodList
  ] ;
end method ;

#---------------------------------------------------------------------------*

routine analyzeFunctionBody
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ??@formalInputParameterListAST inFunctionSignature
  ??@semanticInstructionListAST inInstructionList
  ??@lstring inReturnVariableName
  ??@lstring inResultTypeName
  ??@location inEndOfFunctionLocation
  !@formalInputParameterListForGeneration outSignatureForGeneration
  !@unifiedTypeMapProxy outReturnedType
  !@string outResultVariableCppName
  !@semanticInstructionListForGeneration outSemanticInstructionListForGeneration
:
  @variableMap variableMap [emptyMap] ;
#--- Enter formal parameters
  outSignatureForGeneration := [@formalInputParameterListForGeneration emptyList] ;
  foreach inFunctionSignature do
    const @unifiedTypeMapProxy parameterType [searchKey !inSemanticContext->mTypeMap !mFormalArgumentTypeName] ;
    if mIsConstant then
      const @string cppName := "constinArgument_" . [mFormalArgumentName identifierRepresentation] ;
      outSignatureForGeneration +=
        !parameterType
        !cppName
        !mIsUnused
      ;
      if mIsUnused then
        [!?variableMap insertConstantInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !parameterType !cppName] ;
      else
        [!?variableMap insertConstantInputFormalArgument !mFormalArgumentName !parameterType !cppName] ;
      end if ;
    else
      const @string cppName := "inArgument_" . [mFormalArgumentName identifierRepresentation] ;
      outSignatureForGeneration +=
        !parameterType
        !cppName
        !mIsUnused
      ;
      if mIsUnused then
        [!?variableMap insertInputFormalArgumentDeclaredAsUnused !mFormalArgumentName !parameterType !cppName] ;
      else
        [!?variableMap insertInputFormalArgument !mFormalArgumentName !parameterType !cppName] ;
      end if ;
    end if ;
  end foreach ;
#--- Enter return variable
  outReturnedType := [@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap !inResultTypeName] ;
  outResultVariableCppName := "result_" . [inResultTypeName identifierRepresentation] ;
  [!?variableMap insertOutputFormalArgument !inReturnVariableName !outReturnedType !outResultVariableCppName] ;
#---  Analyze instruction list
  outSemanticInstructionListForGeneration := [@semanticInstructionListForGeneration emptyList] ;
  foreach inInstructionList do
    [mInstruction analyzeSemanticInstruction
      !inSemanticContext
      !inPredefinedTypes
      !?outSemanticInstructionListForGeneration
      !?variableMap
    ] ;
   end foreach ;
#---
  [variableMap checkAutomatonStates !inEndOfFunctionLocation] ;
end routine ;

#---------------------------------------------------------------------------*

override method @functionDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Analyse function body  
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  @formalInputParameterListForGeneration formalInputParameterList ;
  @unifiedTypeMapProxy returnType ;
  @string resultVariableCppName ;
  analyzeFunctionBody
    !inSemanticContext
    !inPredefinedTypes
    !mFormalArgumentList
    !mFunctionInstructionList
    !mResultVariableName
    !mResultTypeName
    !mEndOfFunctionInstructionList
    ?formalInputParameterList
    ?returnType
    ?resultVariableCppName
    ?semanticInstructionListForGeneration
  ;
#---
  ioSemanticDeclarationListForGeneration += ![@functionImplementationForGeneration new
    ![mFunctionName string]
    !formalInputParameterList
    !returnType
    !resultVariableCppName
    !semanticInstructionListForGeneration
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @onceFunctionDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ??@predefinedTypes inPredefinedTypes
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Analyse function body  
  @semanticInstructionListForGeneration semanticInstructionListForGeneration ;
  @unifiedTypeMapProxy returnType ;
  @string resultVariableCppName ;
  analyzeFunctionBody
    !inSemanticContext
    !inPredefinedTypes
    ![@formalInputParameterListAST emptyList]
    !mFunctionInstructionList
    !mResultVariableName
    !mResultTypeName
    !mEndOfFunctionInstructionList
    ?*
    ?returnType
    ?resultVariableCppName
    ?semanticInstructionListForGeneration
  ;
#---
  ioSemanticDeclarationListForGeneration += ![@onceFunctionDeclarationForGeneration new
    ![mFunctionName string]
    !returnType
    !resultVariableCppName
    !semanticInstructionListForGeneration
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    P R E D E F I N E D    T Y P E S                                       *
#                                                                           *
#---------------------------------------------------------------------------*

function buildPredefinedTypes
  ??@semanticContext inSemanticContext
  ->@predefinedTypes outPredefinedTypes
:
  outPredefinedTypes := [@predefinedTypes new
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"location" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"bool" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"char" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"string" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"uint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"sint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"uint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"sint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"double" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lbool" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lchar" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lstring" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"luint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lsint" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"luint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"lsint64" !here]]
    ![@unifiedTypeMapProxy searchKey !inSemanticContext->mTypeMap ![@lstring new !"ldouble" !here]]
  ] ;
end function ;

#---------------------------------------------------------------------------*
#                                                                           *
#    P E R F O R M     S E M A N T I C     A N A L Y S I S                  *
#                                                                           *
#---------------------------------------------------------------------------*

routine performSemanticAnalysis
  ??@semanticDeclarationListAST inDeclarationList
  ??@semanticContext inSemanticContext
  !@semanticDeclarationListForGeneration outDecoratedDeclarationListForGeneration
:
  const @predefinedTypes predefinedTypes := buildPredefinedTypes [!inSemanticContext] ;
  outDecoratedDeclarationListForGeneration := [@semanticDeclarationListForGeneration emptyList] ;
  foreach inDeclarationList do
    [mSemanticDeclaration performSemanticAnalysis
      !inSemanticContext
      !predefinedTypes
      !?outDecoratedDeclarationListForGeneration
    ] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
