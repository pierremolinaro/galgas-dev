#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticAnalysis :
  import "semanticsDecoratedTypes.gSemantics" ;
  import semantics semanticsDecoratedTypes in "semanticsDecoratedTypes.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C L A R A T I O N    S E M A N T I C    A N A L Y S I S            *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticDeclarationAST performSemanticAnalysis
  ?!@semanticContext unused inSemanticContext
  ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
:
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST performSemanticAnalysis
  ?!@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @unifiedTypeMapIndex idx ;
  [@unifiedTypeMapIndex makeRegularIndex  ![@lstring new !mPredefinedTypeName !here] !?inSemanticContext->mTypeMap ?idx] ;
  ioSemanticDeclarationListForGeneration += ![@primitiveTypeForGeneration new
    !idx
  ] ;

end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST performSemanticAnalysis
  ?!@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex idx ;
    [@unifiedTypeMapIndex makeRegularIndex  !mAttributeTypeName !?inSemanticContext->mTypeMap ?idx] ;
    typedAttributeList +=
      !idx
      !mAttributeName
    ;
  end foreach ;
  @unifiedTypeMapIndex idx ;
  [@unifiedTypeMapIndex makeRegularIndex !mListTypeName !?inSemanticContext->mTypeMap ?idx] ;
  ioSemanticDeclarationListForGeneration += ![@listTypeForGeneration new
    !idx
    !typedAttributeList
  ] ;

end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST performSemanticAnalysis
  ?!@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex idx ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?inSemanticContext->mTypeMap ?idx] ;
    typedAttributeList +=
      !idx
      !mAttributeName
    ;
  end foreach ;
  @unifiedTypeMapIndex idx ;
  [@unifiedTypeMapIndex makeRegularIndex !mStructTypeName !?inSemanticContext->mTypeMap ?idx] ;
  ioSemanticDeclarationListForGeneration += ![@structTypeForGeneration new
    !idx
    !typedAttributeList
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @genericTypeTypeAST performSemanticAnalysis
  ?!@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @unifiedTypeMapIndex idx ;
  [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !mTypeName !here] !?inSemanticContext->mTypeMap ?idx] ;
  ioSemanticDeclarationListForGeneration += ![@genericTypeForGeneration new
    !idx
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST performSemanticAnalysis
  ?!@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    @unifiedTypeMapIndex idx ;
    [@unifiedTypeMapIndex makeRegularIndex !mAttributeTypeName !?inSemanticContext->mTypeMap ?idx] ;
    typedAttributeList +=
      !idx
      !mAttributeName
    ;
  end foreach ;
  @unifiedTypeMapIndex superClassIndex ;
  if [mSuperClassName string] == "" then
    [@unifiedTypeMapIndex makeRegularIndex ![@lstring new !"class" !here] !?inSemanticContext->mTypeMap ?superClassIndex] ;
  else
    [@unifiedTypeMapIndex makeRegularIndex !mSuperClassName !?inSemanticContext->mTypeMap ?superClassIndex] ;
  end if ;
  @unifiedTypeMapIndex idx ;
  [@unifiedTypeMapIndex makeRegularIndex !mClassTypeName !?inSemanticContext->mTypeMap ?idx] ;
#--- Abstract methods
  @abstractMethodDefinitionListForGeneration abstractMethodList [emptyList] ;
  foreach mAbstractMethodList do
    if not mIsAbstract then
      error mMethodName : "a concrete class cannot declare an abstract method" ;
    end if ;
  end foreach ;
#--- Overriden methods
  @overridenMethodDefinitionListForGeneration overridenMethodList [emptyList] ;
  foreach mOverridenMethodList do

  end foreach ;
#--- Base methods
  @methodDefinitionListForGeneration methodList [emptyList] ;
  foreach mMethodList do

  end foreach ;
#---
  ioSemanticDeclarationListForGeneration += ![@classDeclarationForGeneration new
    !idx
    !mIsAbstract
    !mClassTypeName
    !superClassIndex
    !typedAttributeList
    !abstractMethodList
    !overridenMethodList
    !methodList
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    P E R F O R M     S E M A N T I C     A N A L Y S I S                  *
#                                                                           *
#---------------------------------------------------------------------------*

routine performSemanticAnalysis
  ??@semanticDeclarationListAST inDeclarationList
  ?!@semanticContext inSemanticContext
  !@semanticDeclarationListForGeneration outDecoratedDeclarationListForGeneration
:
  outDecoratedDeclarationListForGeneration := [@semanticDeclarationListForGeneration emptyList] ;
  
  foreach inDeclarationList do
    [mSemanticDeclaration performSemanticAnalysis
      !?inSemanticContext
      !?outDecoratedDeclarationListForGeneration
    ] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
