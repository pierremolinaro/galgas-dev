#---------------------------------------------------------------------------*
#                                                                           *
#  metamodel that defines expression                                        *
#                                                                           *
#  Copyright (C) 2007, ..., 2010 Pierre Molinaro.                           *
#                                                                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semanticAnalysis :
  import "semanticsDecoratedTypes.gSemantics" ;
  import semantics semanticsDecoratedTypes in "semanticsDecoratedTypes.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#    C H E C K    M E T H O D    S I G N A T U R E                          *
#                                                                           *
#---------------------------------------------------------------------------*

routine checkMethodSignatures
  ??@formalParameterListForGeneration inTestedSignature
  ??@location inErrorLocation
  ??@formalParameterSignature inReferenceSignature
  ??@location inReferenceLocation
:
  if [inTestedSignature length] != [inReferenceSignature length] then
    error inErrorLocation:"this method declares " . [[inTestedSignature length] string]
    . " formal parameter(s), but overriden method declares " . [[inReferenceSignature length] string]
    ;
    error inReferenceLocation:"overriden method is declared here" ;
  else
    foreach inReferenceSignature prefixedby ref_, inTestedSignature do
      if ref_mFormalParameterPassingMode != mFormalParameterPassingMode then
        error mFormalParameterName : "the '" . mFormalParameterName . "' formal parameter is declared as "
        . [mFormalParameterPassingMode formalArgumentMessage] . ", but overriden method declares it as " 
        . [ref_mFormalParameterPassingMode formalArgumentMessage] ;
        error inReferenceLocation:"overriden method is declared here" ;
      end if ;
      if [[mFormalParameterType key] string] != [[ref_mParameterType key] string] then
        error mFormalParameterName : "the '" . mFormalParameterName . "' formal parameter has the '@"
        . [mFormalParameterType key] . "' type, but overriden method declares with the '@" 
        . [ref_mParameterType key] . "' type" ;
        error inReferenceLocation:"overriden method is declared here" ;
      end if ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#    D E C L A R A T I O N    S E M A N T I C    A N A L Y S I S            *
#                                                                           *
#---------------------------------------------------------------------------*

method @semanticDeclarationAST performSemanticAnalysis
  ??@semanticContext unused inSemanticContext
  ?!@semanticDeclarationListForGeneration unused ioSemanticDeclarationListForGeneration
:
end method ;

#---------------------------------------------------------------------------*

override method @predefinedTypeAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  ioSemanticDeclarationListForGeneration += ![@primitiveTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap ![@lstring new !mPredefinedTypeName !here]]
  ] ;

end method ;

#---------------------------------------------------------------------------*

override method @listDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    typedAttributeList +=
      ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mAttributeTypeName]
      !mAttributeName
    ;
  end foreach ;
  ioSemanticDeclarationListForGeneration += ![@listTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mListTypeName]
    !typedAttributeList
  ] ;

end method ;

#---------------------------------------------------------------------------*

map @attributeIndexMap {
  @uint mIndex ;
  insert insertKey error message "the '%K' attribute is already declared" ;
  search searchKey error message "the '%K' attribute is not declared" ;
}

#---------------------------------------------------------------------------*

override method @sortedListDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Attribute
  @typedAttributeList typedAttributeList [emptyList] ;
  @attributeIndexMap attributeIndexMap [emptyMap] ;
  foreach mAttributeList do
    typedAttributeList +=
      ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mAttributeTypeName]
      !mAttributeName
    ;
    [!?attributeIndexMap insertKey !mAttributeName ![attributeIndexMap count]] ;
  end foreach ;
#--- Sort descriptor
  @stringset attributesUsedForSorting [emptySet] ;
  @sortDescriptorListForGeneration sortDescriptorList [emptyList] ;
  foreach mSortDescriptorList do
    @uint attributeIndex ;
    [attributeIndexMap searchKey !mSortedAttributeName ?attributeIndex] ;
    sortDescriptorList += !attributeIndex !mAscending ;
    if [attributesUsedForSorting hasKey ![mSortedAttributeName string]] then
      error mSortedAttributeName : "the '" . mSortedAttributeName . "' is already used for sorting" ;
    end if ;
    attributesUsedForSorting += ![mSortedAttributeName string] ;
  end foreach ;
#--- Generate type
  ioSemanticDeclarationListForGeneration += ![@sortedListTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mSortedListTypeName]
    !typedAttributeList
    !sortDescriptorList
  ] ;

end method ;

#---------------------------------------------------------------------------*

override method @structDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    typedAttributeList +=
      ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mAttributeTypeName]
      !mAttributeName
    ;
  end foreach ;
  ioSemanticDeclarationListForGeneration += ![@structTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mStructTypeName]
    !typedAttributeList
  ] ;
end method ;

#---------------------------------------------------------------------------*

map @constantIndexMap {
  @uint mIndex ;
  insert insertKey error message "the '%K' constant is already declared" ;
  search searchKey error message "the '%K' constant is not declared" ;
}

#---------------------------------------------------------------------------*

override method @enumDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Constant list
  @stringlist constantList [emptyList] ;
  @constantIndexMap constantMap [emptyMap] ;
  foreach mConstantList do
    constantList += ![mValue string] ;
    [!?constantMap insertKey !mValue ![constantMap count]] ;
  end foreach ;
  const @stringset constantSet := [constantMap allKeys] ;
#--- Messages
  @enumMessageListForGeneration enumMessageList [emptyList] ;
  @stringset messageNameSet [emptySet] ;
  foreach mEnumMessageList do
    if [messageNameSet hasKey ![mEnumMessageName string]] then
      error mEnumMessageName : "this message is already declared for this enum type" ;
    end if ;
    messageNameSet += ![mEnumMessageName string] ;
    @enumMessageAssociationSortedListForGeneration enumMessageAssociationSortedListForGeneration [emptySortedList] ;
    @stringset usedConstantSet [emptySet] ; # For checking no constant is missed
    foreach mMessageAssociationList do
      @uint constantIndex ;
      [constantMap searchKey !mConstantName ?constantIndex] ;
      usedConstantSet += ![mConstantName string] ;
      enumMessageAssociationSortedListForGeneration +=
        !constantIndex
        ![mConstantName string]
        ![mMessage string]
      ;
    end foreach ;
    const @stringset missedConstantSet := constantSet - usedConstantSet ;
    foreach missedConstantSet do
      error mEnumMessageName : "the '" . mEnumMessageName . "' message definition does not name the '"
        . key . "' constant" ;
    end foreach ;
    enumMessageList += ![mEnumMessageName string] !enumMessageAssociationSortedListForGeneration ;
  end foreach ;
#---
  ioSemanticDeclarationListForGeneration += ![@enumTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mEnumTypeName]
    !constantList
    !enumMessageList
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @listmapDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#--- Check associated list is actually a list
  @typeKindEnum typeKindEnum ;
  @typedAttributeList listTypeAttributeList ;
  [inSemanticContext->mTypeMap searchKey !mAssociatedListTypeName ?2* ?typeKindEnum ?listTypeAttributeList ?13*] ;
#---
  ioSemanticDeclarationListForGeneration += ![@listmapTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mListmapTypeName]
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mAssociatedListTypeName]
    !listTypeAttributeList
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @genericTypeTypeAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
  ioSemanticDeclarationListForGeneration += ![@genericTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap ![@lstring new !mTypeName !here]]
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @mapDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#------ Enter attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    typedAttributeList +=
      ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mAttributeTypeName]
      !mAttributeName
    ;
  end foreach ;
#--- Warn for duplicated declarations or 'insertOrReplace' modifier
  foreach mInsertOrReplaceDeclarationListAST index IDX do
    if IDX > 0 then
      warning mInsertOrReplaceDeclarationLocation: "the 'insertOrReplace' modifier is already declared" ;
    end if ;
  end foreach ;
#--- Enter map declaration
  ioSemanticDeclarationListForGeneration += ![@mapTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mMapTypeName]
    !mMapTypeName
    !typedAttributeList
    ![mInsertOrReplaceDeclarationListAST length] > 0
  ] ;
end method ;

#---------------------------------------------------------------------------*

override method @classDeclarationAST performSemanticAnalysis
  ??@semanticContext inSemanticContext
  ?!@semanticDeclarationListForGeneration ioSemanticDeclarationListForGeneration
:
#------ Enter attributes
  @typedAttributeList typedAttributeList [emptyList] ;
  foreach mAttributeList do
    typedAttributeList +=
      ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mAttributeTypeName]
      !mAttributeName
    ;
  end foreach ;
#------ Inherited instance methods
  @instanceMethodMap inheritedInstanceMethodMap ;
  if [mSuperClassName string] == "" then
    inheritedInstanceMethodMap := [@instanceMethodMap emptyMap] ;
  else
    [inSemanticContext->mTypeMap searchKey !mSuperClassName ?8* ?inheritedInstanceMethodMap ?8*] ;
  end if ;
#------ Super type
  @unifiedTypeMapIndex superClassIndex ;
  if [mSuperClassName string] == "" then
    superClassIndex := [@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap ![@lstring new !"class" !here]] ;
  else
    superClassIndex := [@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mSuperClassName] ;
  end if ;
#------ Abstract methods
  @abstractMethodDefinitionListForGeneration abstractMethodList [emptyList] ;
  foreach mAbstractMethodList do
  #--- Check a concrete class does not declare an abstract method
    if not mIsAbstract then
      error mMethodName : "a concrete class cannot declare an abstract method" ;
    end if ;
  #--- Compute method signature
    @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
    foreach mSignature do
      formalParameterListForGeneration +=
        !mFormalParameterPassingMode
        ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mFormalParameterTypeName]
        !mFormalParameterName
        !mIsUnused
      ;
    end foreach ;
  #--- Check overriding status
    if mIsOverriding then
      @formalParameterSignature inheritedSignature ;
      @location inheritedDeclarationLocation ;
      [inheritedInstanceMethodMap searchInheritedKey !mMethodName ?inheritedSignature ?inheritedDeclarationLocation ?*] ;
      checkMethodSignatures
        !formalParameterListForGeneration
        ![mMethodName location]
        !inheritedSignature
        !inheritedDeclarationLocation
      ;
    elsif [inheritedInstanceMethodMap hasKey ![mMethodName string]] then
      error mMethodName : "this method cannot be declared as abstract, it is already declared in super class" ;
    end if ;
    abstractMethodList += !mIsOverriding !mMethodName !formalParameterListForGeneration ;
  end foreach ;
#------ Base methods
  @methodDefinitionListForGeneration methodList [emptyList] ;
  foreach mMethodList do
  #--- Compute method signature
    @formalParameterListForGeneration formalParameterListForGeneration [emptyList] ;
    foreach mSignature do
      formalParameterListForGeneration +=
        !mFormalParameterPassingMode
        ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mFormalParameterTypeName]
        !mFormalParameterName
        !mIsUnused
      ;
    end foreach ;
  #--- Check overriding status
    if mIsOverriding then
      @formalParameterSignature inheritedSignature ;
      @location inheritedDeclarationLocation ;
      [inheritedInstanceMethodMap searchInheritedKey !mMethodName ?inheritedSignature ?inheritedDeclarationLocation ?*] ;
      checkMethodSignatures
        !formalParameterListForGeneration
        ![mMethodName location]
        !inheritedSignature
        !inheritedDeclarationLocation
      ;
    elsif [inheritedInstanceMethodMap hasKey ![mMethodName string]] then
      error mMethodName : "this method cannot be declared as abstract, it is already declared in super class" ;
    end if ;
    methodList +=
      !mIsOverriding
      !mMethodName
      !formalParameterListForGeneration
      ![@semanticInstructionListForGeneration emptyList]
    ;
  end foreach ;
#------
  ioSemanticDeclarationListForGeneration += ![@classTypeForGeneration new
    ![@unifiedTypeMapIndex searchKey !inSemanticContext->mTypeMap !mClassTypeName]
    !mIsAbstract
    !mClassTypeName
    !superClassIndex
    !typedAttributeList
    !abstractMethodList
    !methodList
  ] ;
end method ;

#---------------------------------------------------------------------------*
#                                                                           *
#    P E R F O R M     S E M A N T I C     A N A L Y S I S                  *
#                                                                           *
#---------------------------------------------------------------------------*

routine performSemanticAnalysis
  ??@semanticDeclarationListAST inDeclarationList
  ??@semanticContext inSemanticContext
  !@semanticDeclarationListForGeneration outDecoratedDeclarationListForGeneration
:
  outDecoratedDeclarationListForGeneration := [@semanticDeclarationListForGeneration emptyList] ;
  
  foreach inDeclarationList do
    [mSemanticDeclaration performSemanticAnalysis
      !inSemanticContext
      !?outDecoratedDeclarationListForGeneration
    ] ;
  end foreach ;
end routine ;

#---------------------------------------------------------------------------*

end semantics ;
