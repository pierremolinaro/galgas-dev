#---------------------------------------------------------------------------*
#                                                                           *
#  GALGAS semantics component semantics definition                          *
#                                                                           *
#  Copyright (C) 1997, ..., 2008 Pierre Molinaro.                           *
#  e-mail : molinaro@irccyn.ec-nantes.fr                                    *
#                                                                           *
#  This program is free software; you can redistribute it and/or modify it  *
#  under the terms of the GNU General Public License as published by the    *
#  Free Software Foundation.                                                *
#                                                                           *
#  This program is distributed in the hope it will be useful, but WITHOUT   *
#  ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or    *
#  FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for *
#   more details.                                                           *
#                                                                           *
#---------------------------------------------------------------------------*

semantics semantics_semantics :
  import "common_semantics.gSemantics" ;

  import semantics common_semantics in "common_semantics.gSemantics" ;

#---------------------------------------------------------------------------*
#                                                                           *
#   A LIST OF C++ NAMES                                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @typeCplusPlusNameList {
  @typeCplusPlusName mCppName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   C L A S S    M E S S A G E    M A P                                     *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeClassMessagesMap {
  @lstring mMessage ;
  insert insertKey error message "the message '%K' is already declared in %L" ;
  search searchKey error message "the message '%K' is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  S E M A N T I C S   T Y P E S   L I S T                                  *
#                                                                           *
#---------------------------------------------------------------------------*

list @typeSemanticsTypesList {
  @AC_galgasType mType ;
  @lstring mGalgasVariableName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  V A R I A B L E S    M A P                                               *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeVariablesMap
  class cGalgasVariablesMap ;
#--- Inserting
  insert insertInArgument error message "the variable '%' is already declared" ;
  insert insertUnusedInArgument error message "the variable '%' is already declared" ;
  insert insertConstInArgument error message "the variable '%' is already declared" ;
  insert insertUsedConstInArgument error message "the variable '%' is already declared" ;
  insert insertUsedConstInArgumentNoShadow error message "the variable '%' is already declared" ;
  insert insertUnusedConstInArgument error message "the variable '%' is already declared" ;
  insert insertLocalVariable error message "the variable '%' is already declared" ;
  insert insertOutArgument error message "the variable '%' is already declared" ;
  insert insertInOutArgument error message "the variable '%' is already declared" ;
  insert insertWithInstructionLocalVariable error message "the variable '%' is already declared" ;
  insert insertUsedInOutArgument error message "the variable '%' is already declared" ;
  insert insertUnusedInOutArgument error message "the variable '%' is already declared" ;
#--- Searching
  search searchForReadOnlyAccess error message "the variable '%' cannot be accessed in read only mode" ;
  search searchForDestructiveReadAccess error message "the variable '%' cannot be accessed in destructive mode" ;
  search searchForReadWriteAccess error message "the variable '%' cannot be accessed in read/write mode" ;
  search searchForWriteAccess error message "the variable '%' cannot be accessed in write mode" ;
#--- Blocks
  block  verifyVariableUsing : () : (?@location positionErreur) ;
  block  testBloc : () : () ;
  block  testPart : () : (?@location positionErreur) ;
  block  repeatBlock : () : () ;
  block  repeatPart : () : (?@location positionErreur) ;
#--- Attributes
  @AC_galgasType mArgumentType ;
  @typeCplusPlusName mCplusPlusName ;
}

#---------------------------------------------------------------------------*

list @L_assignedVariables  {
  @typeCplusPlusName aNomVariableCible ;
  @lstring aNomAttributSource ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#                            class 'typeCible'                              *
#     Est utilise pour denoter le type d'une variable cible anonyme         *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @typeCible {
  abstract method verifierType
    ??@AC_galgasType typeArgumentFormel
    ?!@lstring nomAttributSource
    ?!@L_assignedVariables listeAffectations
    ?!@typeCplusPlusNameList outAllVariablesList
  ;
}

#---------------------------------------------------------------------------*

list @typeListeCibles {
  @typeCible aCible ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#                  Liste d'attributs externes                               *
#                                                                           *
#---------------------------------------------------------------------------*

list @L_nameWithType {
  @lstring mType ;
  @lstring mName ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#              Table des methodes (d'une classe a implementer)              *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeTableMethodesAimplementer
  class cTableMethodesAimplementer ;
  insert insertAbstract error message "the method '%' is already declared" ;
  insert insertNotAbstract error message "the method '%' is already declared" ;
  @L_EXsignature aListeTypesParametres ;
  @typeListeTypesEtNomsArgMethode aListeTypeEtNomsArguments ;
  @typeInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*
#   E X P R E S S I O N S    L I S T                                        *
#---------------------------------------------------------------------------*

list @typeExpressionList {
  @typeExpression mExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E R R O R    I N S T R U C T I O N                                     *
#                                                                           *
#---------------------------------------------------------------------------*

list @varToDropList {
  @typeCplusPlusName mVarToDrop ;
}

#---------------------------------------------------------------------------*

class @typeErrorInstruction extends @typeInstruction {
  @typeExpression mErrorLocationExpression ;
  @typeExpression mErrorMessageExpression ;
  @location mLocation ;
  @varToDropList mVarToDropList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    S E N D    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeSendInstruction extends @typeInstruction {
  @typeExpression mExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    W I T H    I N S T R U C T I O N                                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeWithInstruction extends @typeInstruction {
  @string mMapTypeName ;
  @typeCplusPlusName mAccessedVariableCppName ;
  @lstringlist mStructAttributeList ;
  @string mErrorMessageName ;
  @typeExpression mKeyExpression ;
  @typeInstructionList mDoBranchInstructionList ;
  @typeInstructionList mElseBranchInstructionList ;
  @location mInstructionLocation ;
  @bool mReadWriteAccess ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    W A R N I N G    I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeWarningInstruction extends @typeInstruction {
  @typeExpression mWarningLocationExpression ;
  @typeExpression mWarningMessageExpression ;
  @location mLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    M E S S A G E    I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeMessageInstruction extends @typeInstruction {
  @typeExpression mMessageExpression ;
  @location mInstructionLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   M E T H O D    C A L L    I N S T R U C T I O N                         *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeMethodCallInstruction extends @typeInstruction {
  @AC_galgasType mExpressionType ;
  @typeExpression mExpression ;
  @lstring mMethodName ;
  @string mCategoryMethodClassBaseName ;
  @typeExpressionList mExpressionsList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   T Y P E    M E T H O D    C A L L    I N S T R U C T I O N              *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeCallOfTypeMethodInstruction extends @typeInstruction {
  @lstring mTypeName ;
  @lstring mTypeMethodName ;
  @typeExpressionList mExpressionsList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   M O D I F I E R    C A L L    I N S T R U C T I O N                     *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeModifierCallInstruction extends @typeInstruction {
  @typeCplusPlusName aNomCppVariable ;
  @lstringlist mStructAttributeList ;
  @lstring aNomMethodeSimple ;
  @typeExpressionList mExpressionsList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#           Instruction d'appel d'une methode de list                       *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeInstructionAppelMethodeListe extends @typeInstruction {
  @typeCplusPlusName aNomCppAttribut ;
  @lstring aMethodeDeListe ;
  @typeCplusPlusNameList aListeNomsCppArguments ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#           Instruction de declaration d'une variable locale                *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeInstructionDeclarationVarLocale extends @typeInstruction {
  @typeCplusPlusName aNomCppVariable ;
  @AC_galgasType aTypeVariable ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#               'block...' instruction for a map                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeMapBlockPrologueInstruction extends @typeInstruction {
  @typeCplusPlusName aNomVariableTable ;
  @lstring aNomMethodeBloc ;
  @typeExpressionList mPrologueExpressionList ;
}

#---------------------------------------------------------------------------*

class @typeMapBlockEpilogueInstruction extends @typeInstruction {
  @typeCplusPlusName aNomVariableTable ;
  @lstring aNomMethodeBloc ;
  @typeExpressionList mEpilogueExpressionList ;
}

#---------------------------------------------------------------------------*
#   R E A D E R    C A L L    O P E R A N D                                 *
#---------------------------------------------------------------------------*

class @typeReaderCallInExpression extends @typeExpression {
  @typeExpression mExpressionValue ;
  @lstring mReaderName ;
  @typeExpressionList mExpressionList ;
  @string mConversionMethod ;
  @string mCategoryReaderClassBaseName ;
  @bool mHasLexiqueAndLocationArguments ;
}
 
#---------------------------------------------------------------------------*
#   F I L E W R A P P E R    W I T H    S T A T I C    P A T H              *
#---------------------------------------------------------------------------*

class @typeFileWrapperWithStaticPath extends @typeExpression {
  @lstring mFileWrapperName ;
  @uint mFileIndex ;
}
 
#---------------------------------------------------------------------------*
#   F I L E W R A P P E R    T E M P L A T E     C A L L                    *
#---------------------------------------------------------------------------*

class @typeFileWrapperTemplateCall extends @typeExpression {
  @lstring mFileWrapperName ;
  @lstring mTemplateName ;
  @typeExpressionList mOutExpressionList ;
}
 
#---------------------------------------------------------------------------*
#   C A T E G O R Y    T E M P L A T E     C A L L                          *
#---------------------------------------------------------------------------*

class @typeCategoryTemplateCall extends @typeExpression {
  @typeExpression mExpressionValue ;
  @string mCategoryTemplateClassBaseName ;
  @lstring mTemplateName ;
  @typeExpressionList mOutExpressionList ;
}
 
#---------------------------------------------------------------------------*
#   F I L E W R A P P E R    O B J E C T    I N S T A N C I A T I O N       *
#---------------------------------------------------------------------------*

class @typeFileWrapperObjectInstanciation extends @typeExpression {
  @lstring mFileWrapperName ;
}
 
#---------------------------------------------------------------------------*
#   C L A S S    C A S T    O P E R A N D                                   *
#---------------------------------------------------------------------------*

class @typeCastInExpression extends @typeExpression {
  @typeExpression mCastedExpression ;
  @bool mCheckForKindOfClass ;
  @lstring mCastTypeName ;
  @typeExpression mErrorLocationExpression ;
}
 
#---------------------------------------------------------------------------*
#   O B J E C T    C A S T    O P E R A N D                                 *
#---------------------------------------------------------------------------*

class @objectCastInExpression extends @typeExpression {
  @typeExpression mCastedExpression ;
  @lstring mCastTypeName ;
  @typeExpression mErrorLocationExpression ;
}
 
#---------------------------------------------------------------------------*
#   B O O L E A N    O P E R A T I O N S                                    *
#---------------------------------------------------------------------------*

class @typeAndOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeOrOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeXorOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeConcatOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeTrueBool extends @typeExpression {
}
 
#---------------------------------------------------------------------------*

class @typeFalseBool extends @typeExpression {
}
 
#---------------------------------------------------------------------------*

class @typeLiteralStringExpression extends @typeExpression {
  @stringlist mLiteralStringList ;
}
 
#---------------------------------------------------------------------------*

class @typeLiteralUIntExpression extends @typeExpression {
  @luint mLiteralInt ;
}
 
#---------------------------------------------------------------------------*

class @typeLiteralSIntExpression extends @typeExpression {
  @lsint mLiteralInt ;
}
 
#---------------------------------------------------------------------------*

class @typeLiteralUInt64Expression extends @typeExpression {
  @luint64 mLiteralInt ;
}
 
#---------------------------------------------------------------------------*

class @typeLiteralSInt64Expression extends @typeExpression {
  @lsint64 mLiteralInt ;
}
 
#---------------------------------------------------------------------------*

class @typeLiteralCharExpression extends @typeExpression {
  @lchar mLiteralChar ;
}
 
#---------------------------------------------------------------------------*

class @typeLiteralDoubleExpression extends @typeExpression {
  @ldouble mLiteralDouble ;
}
 
#---------------------------------------------------------------------------*

class @typeHereExpression extends @typeExpression {
}
 
#---------------------------------------------------------------------------*

class @typeConstructorExpression extends @typeExpression {
  @AC_galgasType mType ;
  @lstring mConstructorName ;
  @bool mHasLexiqueAndLocationArguments ;
  @typeExpressionList mExpressionList ;
}
 
#---------------------------------------------------------------------------*

class @typeIfThenElseExpression extends @typeExpression {
  @typeExpression mIfExpression ;
  @typeExpression mThenExpression ;
  @typeExpression mElseExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeTestComplement extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeLogicalNegate extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mExpression ;
}

#---------------------------------------------------------------------------*

class @typeOptionAccess extends @typeExpression {
  @string mOptionComponentName ;
  @lstring mOptionName ;
  @string mAccessorName ;
}
 
#---------------------------------------------------------------------------*
#   F U N C T I O N    C A L L                                              *
#---------------------------------------------------------------------------*

class @typeFunctionCall extends @typeExpression {
  @lstring mFunctionName ;
  @typeExpressionList mExpressionList ;
}
 
#---------------------------------------------------------------------------*
#   S I M P L E    V A R I A B L E                                          *
#---------------------------------------------------------------------------*

class @typeVarInExpression extends @typeExpression {
  @typeCplusPlusName mCppVarName ;
  @lstringlist mStructAttributeList ;
}
 
#---------------------------------------------------------------------------*
#   J O K E R    E X P R E S S I O N                                        *
#---------------------------------------------------------------------------*

class @typeJokerInExpression extends @typeExpression {
}
 
#---------------------------------------------------------------------------*
#   A D D I T I O N    O P E R A T I O N                                    *
#---------------------------------------------------------------------------*

class @typeAddOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*
#   S U B S T R A C T I O N    O P E R A T I O N                            *
#---------------------------------------------------------------------------*

class @typeSubOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*
#   M U L T I P L I C A T I O N    O P E R A T I O N                        *
#---------------------------------------------------------------------------*

class @typeMultiplyOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*
#   D I V I S I O N    O P E R A T I O N                                    *
#---------------------------------------------------------------------------*

class @typeDivideOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*
#   M O D U L O    O P E R A T I O N                                        *
#---------------------------------------------------------------------------*

class @typeModuloOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*
#   U N A R Y   -    O P E R A T I O N                                      *
#---------------------------------------------------------------------------*

class @typeUnaryMinusOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mExpression ;
}
 
#---------------------------------------------------------------------------*
#  ==    O P E R A T I O N                                                  *
#---------------------------------------------------------------------------*

class @typeEqualTest extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeNonEqualTest extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeStrictInfTest extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeInfOrEqualTest extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}

#---------------------------------------------------------------------------*

class @typeStrictSupTest extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeSupOrEqualTest extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeLeftShiftOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeRightShiftOperation extends @typeExpression {
  @location mOperatorLocation ;
  @typeExpression mLeftExpression ;
  @typeExpression mRightExpression ;
}
 
#---------------------------------------------------------------------------*

class @typeClassToTypeOperand extends @typeExpression {
  @lstring mTypeName ;
}
 
#---------------------------------------------------------------------------*
#   F I E L D    A C C E S S                                                *
#---------------------------------------------------------------------------*

class @typeFieldAccessOperation extends @typeExpression {
  @typeExpression mExpression ;
  @lstring mFieldName ;
}
 
#---------------------------------------------------------------------------*
#   C A L L    T E S T    M E T H O D    F O R    M A P                     *
#---------------------------------------------------------------------------*

class @typeTextTableCall extends @typeExpression {
  @typeExpression mExpression ;
  @lstring aNomMethodeTest ;
  @typeCplusPlusName aNomCppClef ;
}
 
#---------------------------------------------------------------------------*
#                                                                           *
#   A S S I G N M E N T    I N S T R U C T I O N                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_assignmentInstruction extends @typeInstruction {
  @typeCplusPlusName mTargetVarCppName ;
  @lstringlist mStructAttributeList ;
  @typeExpression mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   C O N S T A N T    D E C L A R A T I O N    I N S T R U C T I O N       *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_constantDeclarationInstruction extends @typeInstruction {
  @AC_galgasType mTargetType ;
  @typeCplusPlusName mTargetVarCppName ;
  @typeExpression mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   . =    I N S T R U C T I O N                                            *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_dotEqualInstruction extends @typeInstruction {
  @typeCplusPlusName mTargetVarCppName ;
  @lstringlist mStructAttributeList ;
  @typeExpression mSourceExpression ;
  @string mSourceExpressionConverter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   D E C L A R A T I O N    I N S T R U C T I O N                          *
#                                                                           *
#   W I T H    A S S I G N M E N T                                          *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_declarationInstructionWithAssignment extends @typeInstruction {
  @AC_galgasType mVariableType ;
  @typeCplusPlusName mTargetVarCppName ;
  @typeExpression mSourceExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   " W H I L E "   I N S T R U C T I O N                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_while_instruction extends @typeInstruction {
  @typeExpression mVariantExpression ;
  @typeInstructionList mInstructionList1 ;
  @typeExpression mWhileExpression ;
  @typeInstructionList mInstructionList2 ;
  @location mLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   " I F "   I N S T R U C T I O N                                         *
#                                                                           *
#---------------------------------------------------------------------------*

list @L_expression_instructionsList_list {
  @typeExpression mIFexpression ;
  @typeInstructionList mInstructionList ;
  @location mLocation ;
}

#---------------------------------------------------------------------------*

class @C_if_instruction extends @typeInstruction {
  @L_expression_instructionsList_list mIFbranchesList ;
  @typeInstructionList mElseInstructionsList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   " S W I T C H "   I N S T R U C T I O N                                 *
#                                                                           *
#---------------------------------------------------------------------------*

list @L_switchBranchlist {
  @stringset mConstantSet ;
  @typeInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*

class @C_switch_instruction extends @typeInstruction {
  @typeExpression mSwitchExpression ;
  @lstring mEnumTypeName ;
  @L_switchBranchlist mBranchList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#      Definition de la map des routines a implementer                      *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeTableRoutinesAimplementer {
  insert insertKey error message "the routine '%K' is already declared in %L" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
# Table des attributs semantiques internes (pour list d'instructions)       *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeTableAttributsSemantiques {
  @typeCplusPlusName aNomCppAttribut ;
  @AC_galgasType mAttributType ;
  insert insertKey error message "the attribute '%K' is already declared in %L" ;
  search searchKey error message "the attribute '%K' is not declared" ;
}

#---------------------------------------------------------------------------*

routine buildMapWithLocalConstants
  ?@bool inEnumeratorNewStyle
  ?@L_nameWithType inLocalDeclarationsList
  ?@typeListeAttributsSemantiques inSemanticAttributsList
  ?!@typeVariablesMap ioVariablesMap
  ?@location inLocation
  ?@localConstantBuildStyleEnum inLocalConstantStyle
  ?@bool inEllipsisFound
:
  @bool mapStyle := inLocalConstantStyle != [@localConstantBuildStyleEnum listStyle] ;
  @bool firstOne := true ;
  foreach inLocalDeclarationsList,
          inSemanticAttributsList do
    if [mType string] != "" then
      @string typeName ;
      [mAttributType getTypeName ? typeName] ;
      if [mType string] == typeName then
        @typeCplusPlusName cppName ;
        if (inLocalConstantStyle == [@localConstantBuildStyleEnum firstIsKeyOtherMapStyle]) & firstOne then
          cppName := [@typeKeyName new !inLocation !inEnumeratorNewStyle] ;
        else
          cppName := [@typeOperandName new !inLocation ![mAttributeName string] !mapStyle !inEnumeratorNewStyle] ;
        end if ;
        [!?ioVariablesMap insertUsedConstInArgument !mName !mAttributType !cppName] ;
      else
        error mType : "I have found the '@" . [mType string]
          . "' type, I was expected the '@" . typeName . "' type" ;
      end if ;
    end if ;
    firstOne := false ;
  end foreach ;
#--- Check effective parameters list length
  if ([inLocalDeclarationsList length] < [inSemanticAttributsList length]) & not inEllipsisFound then
    error here : "one or more parameters missing: found "
    . [[inLocalDeclarationsList length] string] . " effective parameters, while "
    . [[inSemanticAttributsList length] string] . " are needed" ;
  elsif [inLocalDeclarationsList length] > [inSemanticAttributsList length] then
    error here : "too much parameters: found "
    . [[inLocalDeclarationsList length] string] . " effective parameters, while "
    . [[inSemanticAttributsList length] string] . " are needed" ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#     ITERATEUR (DOUBLE) DE VERIFICATION DE COMPATIBILITE ENTRE             *
#   ENTRE UNE LISTE DE TYPES ET UNE LISTE D'ATTRIBUTS SEMANTIQUES           *
#                                                                           *
#---------------------------------------------------------------------------*

routine verifierCompatibiliteTypes
  ??@typeSemanticsTypesList t1
  ??@typeListeAttributsSemantiques t2
  ??@location inErrorLocation
:
  if [t1 length] < [t2 length] then
    error inErrorLocation : "one or more identifiers missing" ;
  elsif [t1 length] > [t2 length] then
    error inErrorLocation : "too much identifiers" ;
  else
    foreach t1, t2 do
      checkAssignmentTypesCompatibility
        !mType
        !mAttributType
        ![mGalgasVariableName location]
        !false
      ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#     VERIFICATION DE COMPATIBILITE ENTRE UNE SIGNATURE ET UN APPEL         *
#                                                                           *
#---------------------------------------------------------------------------*

routine verifierCompatibiliteArgEffectifsSignature
  ??@L_EXsignature signatureReference
  ??@L_actualParametersSignature inEffectiveArgumentsSignature
  ??@location inErrorLocation
  ?!@typeInstructionList ioInstructionsList
  ?!@typeExpressionList ioExpressionList
:
  if [signatureReference length] > [inEffectiveArgumentsSignature length] then
    error inErrorLocation : "one or more arguments missing" ;
  elsif [signatureReference length] < [inEffectiveArgumentsSignature length] then
    error inErrorLocation : "too much arguments" ;
  else
  #--- Check signatures
    foreach signatureReference,
            inEffectiveArgumentsSignature prefixedby other_ do
      match mFormalArgumentPassingMode::other_mFormalArgumentPassingMode :
      when argumentConstantIn :: parameterOut :
        checkAssignmentTypesCompatibility !mType !other_mType !inErrorLocation !true ;
      when argumentIn :: parameterOut :
        checkAssignmentTypesCompatibility !mType !other_mType !inErrorLocation !true ;
      when argumentInOut :: parameterOutIn :
        checkAssignmentTypesCompatibility !mType !other_mType !inErrorLocation !false ;
      when argumentOut :: parameterIn :
        cast other_mType :
        when >= @typeGalgas_jokerInParameterList do
        else
          checkAssignmentTypesCompatibility !mType !other_mType !inErrorLocation !false ;
        end cast ;
      else
        error inErrorLocation : [other_mFormalArgumentPassingMode actualArgumentMessage] . " is not compatible with " .
                                [mFormalArgumentPassingMode formalArgumentMessage] ;
      end match ;
    end foreach ;
  #--- Build expression list
    @typeExpressionList expressionList := ioExpressionList ;
    ioExpressionList := [@typeExpressionList emptyList] ;
    @uint sequenceNumber := 0 ;
    foreach signatureReference, expressionList do
      cast mExpression :
      when >= @typeJokerInExpression do
        @typeCplusPlusName cppVarName := [@typeLocationAutomaticName new !here !sequenceNumber] ;
        sequenceNumber ++ ;
        @typeExpression e := [@typeVarInExpression new !cppVarName ![@lstringlist emptyList]] ;
        ioExpressionList += !e ;
        @typeInstruction i := [@typeInstructionDeclarationVarLocale new !cppVarName !mType] ;
        ioInstructionsList += !i ;
      else
        ioExpressionList += !mExpression ;
      end cast ;
    end foreach ;
  end if ;
end routine ;

#---------------------------------------------------------------------------*
#                                                                           *
#                           class 'typeJoker'                               *
#     Est utilise pour denoter le type d'une variable cible anonyme         *       
#                                                                           *
#---------------------------------------------------------------------------*

class @typeJoker extends @typeCible {
  override method verifierType
    ??@AC_galgasType unused typeArgumentFormel
    ?!@lstring unused nomAttributSource
    ?!@L_assignedVariables unused listeAffectations
    ?!@typeCplusPlusNameList outAllVariablesList
  :
    outAllVariablesList += ![@typeNullName new !here] ;
  end method ;
}

#---------------------------------------------------------------------------*

class @typeEntiteDest extends @typeCible {
  @AC_galgasType aTypeVarDest ;
  @typeCplusPlusName mCppName ;
  @location aPositionVariableCible ;

  override method verifierType
    ??@AC_galgasType typeArgumentFormel
    ?!@lstring nomAttributSource
    ?!@L_assignedVariables listeAffectations
    ?!@typeCplusPlusNameList ioAllVariablesList
  :
    checkAssignmentTypesCompatibility
       !aTypeVarDest
       !typeArgumentFormel
       !aPositionVariableCible
       !false
    ;
    listeAffectations += !mCppName !nomAttributSource ;
    ioAllVariablesList += !mCppName ;
  end method ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#      Map of non terminal symbols                                          *
#                                                                           *
#---------------------------------------------------------------------------*

map @M_nonTerminalSymbolForSyntax {
  @M_nonterminalSymbolAlts mAltParametersMap ;
  insert insertKey error message "the '%K' non terminal symbol is already declared in %L"  ;
  search searchKey error message "the '%K' non terminal symbol is not declared" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    Grammar instruction                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

class @C_grammarInstruction extends @typeInstruction {
  @bool mSourceIsFile ; # if false, next arg is a @string
  @typeExpression mSourceExpression ; # @lstring var or @string var
  @lstring mGrammarName ;
  @typeExpressionList mExpressionsList ;
  @lstring mAltSymbol ;
  @lstring mLexiqueClassName ;
  @typeCplusPlusName mSentStringName ;
  @typeExpression mDependencyFileExtension ;
  @typeExpression mDependancyFilePath ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#          += instruction (without luint assignment)                        *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeAppendInstruction extends @typeInstruction {
  @typeCplusPlusName mTargetVarCppName ;
  @lstringlist mStructAttributeList ;
  @typeExpressionList mSourceExpressions ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#          ++ instruction                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeIncrementInstruction extends @typeInstruction {
  @typeCplusPlusName mTargetVarCppName ;
  @lstringlist mStructAttributeList ;
  @location mInstructionLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#          -- instruction                                                   *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeDecrementInstruction extends @typeInstruction {
  @typeCplusPlusName mTargetVarCppName ;
  @lstringlist mStructAttributeList ;
  @location mInstructionLocation ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   C A S E S    L I S T    F O R    M A T C H    I N S T R U C T I O N     *
#                                                                           *
#---------------------------------------------------------------------------*

list @L_matchInstructionCasesList {
  @lstring mCase1_name ;
  @lstring mCase2_name ;
  @typeInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#     M A T C H    I N S T R U C T I O N                                    *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeMatchInstruction extends @typeInstruction {
  @location aIndicatif1 ;
  @location aIndicatif2 ;
  @typeCplusPlusName aNomCppVariable1 ;
  @typeCplusPlusName aNomCppVariable2 ;
  @lstring aNomTypeBase1 ;
  @lstring aNomTypeBase2 ;
  @bool mOperand1_isEnumeration ;
  @bool mOperand2_isEnumeration ;
  @L_matchInstructionCasesList aListeCas ;
  @typeInstructionList mElseInstructionsList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  Instruction                                                              *
#    foreach var ??@... name ??@... name, ... :                             *
#      instructions                                                         *
#    end foreach ;                                                          *
#                                                                           *
#---------------------------------------------------------------------------*

list @foreachEnumerationList  {
  @bool mNewStyle ;
  @typeExpression mSourceExpression ;
  @location mLocationOffset ;
  @string mCppTypeName ;
  @bool mAscending ;
}

#---------------------------------------------------------------------------*

class @typeForeachInstruction extends @typeInstruction {
  @foreachEnumerationList mForeachEnumerationList ;
  @typeCplusPlusName mIndexVariable ;
  @typeExpression mWhileExpression ;
  @typeInstructionList mBeforeInstructionList ;
  @typeInstructionList mDoInstructionList ;
  @typeInstructionList mBetweenInstructionList ;
  @typeInstructionList mAfterInstructionList ;
}

#----------------------------------------------------------------------*
#                                                                      *
#                    Structured instruction 'extract ...'              *
#                                                                      *
#----------------------------------------------------------------------*

list @typeStructuredExtractCasesList {
  @lstring mClassName ;
  @location mResultVarID ;
  @typeInstructionList mInstructionList ;
  @bool mNoUsedParameter ;
}

#----------------------------------------------------------------------*

class @typeStructuredExtractInstructionWithElse extends @typeInstruction {
  @typeCplusPlusName mVariableName ;
  @typeStructuredExtractCasesList mCasesList ;
  @typeInstructionList mElseInstructionList ;
}

#----------------------------------------------------------------------*
#                                                                      *
#                    Structured instruction 'cast ...'                 *
#                                                                      *
#----------------------------------------------------------------------*

abstract class @AC_elseOrDefaultForCastInstruction feature generatedInSeparateFile {
}

#----------------------------------------------------------------------*

class @C_elseForCastInstruction extends @AC_elseOrDefaultForCastInstruction {
  @typeInstructionList mElseInstructionList ;
}

#----------------------------------------------------------------------*

class @C_defaultForCastInstruction extends @AC_elseOrDefaultForCastInstruction {
  @typeExpression mErrorLocationExpression ;
  @location mLocation ;
}

#----------------------------------------------------------------------*

list @typeStructuredCastBranchList {
  @lstring mCastClassName ;
  @bool mCheckForKindOfClass ;
  @typeCplusPlusNameList mLocalConstantName ; # 0 or 1 element
  @typeInstructionList mInstructionList ;
}

#----------------------------------------------------------------------*

class @typeStructuredCastInstruction extends @typeInstruction {
  @location mCastInstructionLocation ;
  @typeExpression mSourceExpression ;
  @lstring mSourceExpressionTypeName ;
  @typeStructuredCastBranchList mBranchList ;
  @AC_elseOrDefaultForCastInstruction mElseOrDefault ;
}


#---------------------------------------------------------------------------*
#                                                                           *
#       Routine or extern routine call instruction                          *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeRoutineCallInstruction extends @typeInstruction {
  @lstring mRoutineName ;
  @typeExpressionList mExpressionsList ;
  @L_EXsignature mFormalParameterList ;
  @bool mIsExternActionCall ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#                    'log ...' instruction                                  *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeLogInstruction extends @typeInstruction {
  @lstring mLogMessage ;
  @typeExpression mLogExpression ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#                    'drop ...' instruction                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeDropInstruction extends @typeInstruction {
  @typeCplusPlusName aVariableConsommee ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#            Table des routines declarees par un prototype                  *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeTableNomRoutinesDeclarees {
  insert insertKey error message "the routine '%K' is already declared in %L" ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#              Entites a engendrer                                          *
#                                                                           *
#---------------------------------------------------------------------------*

abstract class @typeEntityToGenerate feature generatedInSeparateFile {
}

#---------------------------------------------------------------------------*

class @typeExternTypeToGenerate extends @typeEntityToGenerate {
  @lstring mGalgasName feature nogetter ;
#--- Constructor map
  @M_externTypeConstructorMap mConstructorMap feature nogetter ;
#--- Modifiers map
  @typeTableMethodes mModifiersMap feature nogetter ;  
#--- Readers map
  @typeTableMethodes mReadersInInstructionMap feature nogetter ;  
#--- Attributes for handling operator '+=' call
  @bool mAcceptAddAssignOperatorCall feature nogetter ;
  @typeListeAttributsSemantiques mAddAssignOperatorCallTypeList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @typeRoutineAengendrer extends @typeEntityToGenerate {
  @lstring mRoutineName feature nogetter ;
  @typeListeTypesEtNomsArgMethode aListeTypeEtNomsArguments feature nogetter ;
  @typeInstructionList mInstructionList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @typeFonctionAengendrer extends @typeEntityToGenerate {
  @lstring mFunctionName feature nogetter ;
  @typeListeTypesEtNomsArgMethode aListeTypeEtNomsArguments feature nogetter ;
  @AC_galgasType mReturnedType feature nogetter ;
  @typeCplusPlusName mReturnedVar feature nogetter ;
  @typeInstructionList mInstructionList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @typeOnceFunctionToGenerate extends @typeEntityToGenerate {
  @lstring mFunctionName feature nogetter ;
  @AC_galgasType mReturnedType feature nogetter ;
  @typeCplusPlusName mReturnedVar feature nogetter ;
  @typeInstructionList mInstructionList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @categoryMethodToImplement extends @typeEntityToGenerate {
  @categoryMethodKind mCategoryMethodKind feature nogetter ;
  @string mBaseClassName feature nogetter ;
  @lstring mClassName feature nogetter ;
  @lstring mMethodName feature nogetter ;
  @typeListeTypesEtNomsArgMethode aListeTypeEtNomsArguments feature nogetter ;
  @typeInstructionList mInstructionList feature nogetter ;
  @location mMagicNumber feature nogetter ;
}

#---------------------------------------------------------------------------*

class @categoryReaderToImplement extends @typeEntityToGenerate {
  @categoryMethodKind mCategoryMethodKind feature nogetter ;
  @string mBaseClassName feature nogetter ;
  @lstring mClassName feature nogetter ;
  @lstring mMethodName feature nogetter ;
  @typeListeTypesEtNomsArgMethode aListeTypeEtNomsArguments feature nogetter ;
  @typeInstructionList mInstructionList feature nogetter ;
  @location mMagicNumber feature nogetter ;
  @AC_galgasType mReturnedType feature nogetter ;
  @typeCplusPlusName mReturnedCppVariableName feature nogetter ;
}

#---------------------------------------------------------------------------*

class @categoryTemplateToImplement extends @typeEntityToGenerate {
  @categoryMethodKind mCategoryMethodKind feature nogetter ;
  @string mBaseClassName feature nogetter ;
  @lstring mClassName feature nogetter ;
  @lstring mMethodName feature nogetter ;
  @typeListeTypesEtNomsArgMethode aListeTypeEtNomsArguments feature nogetter ;
  @templateInstructionList mInstructionList feature nogetter ;
  @location mMagicNumber feature nogetter ;
  @bool mUsesColumnMarker feature nogetter ;
}

#---------------------------------------------------------------------------*

class @C_listTypeToImplement extends @typeEntityToGenerate {
  @lstring aNomListe feature nogetter ;
  @typeListeAttributsSemantiques mNonExternAttributesList feature nogetter ;
}

#---------------------------------------------------------------------------*

list @EXsortDescriptorList {
  @lstring mSortAttribute ;
  @bool mAscendingOrder ;
}

#---------------------------------------------------------------------------*

class @C_sortedListTypeToImplement extends @typeEntityToGenerate {
  @lstring aNomListe feature nogetter ;
  @typeListeAttributsSemantiques mNonExternAttributesList feature nogetter ;
  @EXsortDescriptorList mSortDescriptorList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @typeDefinitionTableAimplementer extends @typeEntityToGenerate {
  @lstring aNomTable feature nogetter ;
  @typeListeAttributsSemantiques mNonExternAttributesList feature nogetter ;
  @lstring aNomClasseGenerique feature nogetter ;
  @insertOrSearchMethodList mInsertMethodList feature nogetter ;
  @insertOrSearchMethodList mSearchMethodList feature nogetter ;
  @typeTableBlocsDeTable aTableMethodesSurcharger feature nogetter ;
}

#---------------------------------------------------------------------------*
#         M A P                                                             *
#---------------------------------------------------------------------------*

map @mapAutomatonStateMap {
  @uint mStateIndex ;
  insert insertKey error message "redefinition of '%K' map automaton state" ;
  search searchKey error message "undefined '%K' map automaton state" ;
}

#---------------------------------------------------------------------------*

map @mapAutomatonActionMap {
  @uint mActionIndex ;
  insert insertKey error message "redefinition of '%K' map automaton action" ;
  search searchKey error message "undefined '%K' map automaton action" ;
}

#---------------------------------------------------------------------------*

sortedlist @mapStateTransitionSortedList {
  @uint mActionIndex ;
  @string mActionName ;
  @uint mTargetStateIndex ;
  @string mTargetStateName ;
  @mapAutomatonMessageKind mTransitionMessageKind ;
  @string mTransitionMessage ;
}{
  mActionIndex <
}

#---------------------------------------------------------------------------*

sortedlist @mapStateSortedList {
  @uint mStateIndex ;
  @string mStateName ;
  @mapAutomatonMessageKind mStateMessageKind ;
  @string mStateMessage ;
  @mapStateTransitionSortedList mTransitionList ;
}{
  mStateIndex <
}

#---------------------------------------------------------------------------*

sortedlist @branchBehaviourSortedListForMapOverride {
  @uint mStartStateIndex ;
  @string mStartStateName ;
  @uint mCurrentStateIndex ;
  @string mCurrentStateName ;
  @uint mFinalStateIndex ;
  @string mFinalStateName ;
  @mapAutomatonMessageKind mStateMessageKind ;
  @string mBehaviourMessage ;
}{
  mStartStateIndex <, mCurrentStateIndex <
}

#---------------------------------------------------------------------------*

list @mapOverrideList {
  @lstring mOverrideName ;
  @branchBehaviourSortedListForMapOverride mBranchBehaviourSortedListForMapOverride ;
  @branchBehaviourSortedListForMapOverride mBranchCombinationSortedListForMapOverride ;
}

#---------------------------------------------------------------------------*

class @C_mapToImplement extends @typeEntityToGenerate {
  @lstring mMapTypeName feature nogetter ;
  @typeListeAttributsSemantiques mNonExternAttributesList feature nogetter ;
  @typeSemanticAttributesMap mAttributeMap feature nogetter ;
  @insertOrSearchMethodList mInsertMethodList feature nogetter ;
  @insertOrSearchMethodList mSearchMethodList feature nogetter ;
  @insertOrSearchMethodList mRemoveMethodList feature nogetter ;
  @bool mHasInsertOrReplaceModifier ;
  @mapStateSortedList mMapStateSortedList ;
  @uint mActionCount ;
  @mapOverrideList mMapOverrideList ;
}

#---------------------------------------------------------------------------*

class @C_classToImplement extends @typeEntityToGenerate {
#--- Class Name
  @lstring aNomClasse feature nogetter ;

#--- Is Abstract ?
  @bool mIsAbstract feature nogetter ;

#--- Liste de tous les attributs not externes, y compris ceux definis dans une classe mere
  @typeListeAttributsSemantiques aListeTousAttributsNonExternes feature nogetter ;  

#--- Table de toutes les methodes, y compris celles heritees
  @typeTableMethodes aTableToutesMethodes feature nogetter ;

#--- Table des methodes de la classe abstract
  @typeTableMethodesAimplementer mMethodsMap feature nogetter ;

#--- Liste des attributs semantiques not externes definis dans cette classe
  @typeListeAttributsSemantiques aListeAttributsCourants feature nogetter ;

#--- Table des classes ancetre de la classe courante
  @typeSuperClassesMap mAncestorClassesMap feature nogetter ;

#--- Table des messages
  @typeClassMessagesMap mMessagesMap feature nogetter ;

#--- Table des messages
  @string mClassMessage feature nogetter ;

#--- Generate in Separate file ?
  @bool mHasGeneratedInSeparateFileSetting feature nogetter ;

#--- Once Reader map
  @L_lazyAttributeList mLazyAttributeList feature nogetter ;

#--- Attribute modifiers to implement
  @typeListeAttributsSemantiques mSetterAttributeModifierToImplementList feature nogetter ;

#--- Attribute readers to implement
  @typeListeAttributsSemantiques mGetterAttributeReaderToImplementList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @C_mapindexToImplement extends @typeEntityToGenerate {
#--- Map index type Name
  @lstring mMapindexTypeName feature nogetter ;
#--- Map type Map
  @lstring mMapTypeName feature nogetter ;
#--- Map attributes
  @typeListeAttributsSemantiques mMapAttributesList feature nogetter ;
#--- Map readers (search) for implementing as constructors
  @EXmapMethodMap mMapReaderMethodMap feature nogetter ;
}

#---------------------------------------------------------------------------*

class @C_domainToImplement extends @typeEntityToGenerate {
#--- Domain Name
  @lstring mDomainName feature nogetter ;
#--- Attribute Map
  @domainAttributeMap mAttributeMap feature nogetter ;
#--- Relation Map
  @domainRelationMap mRelationMap feature nogetter ;
}

#---------------------------------------------------------------------------*

class @typeEntiteRoutineExterne extends @AC_semanticsEntity {
  @L_EXsignature aSignature ;

  message "an extern routine" ;
  message messageTypeEntite "an extern routine" ;
}

#---------------------------------------------------------------------------*

class @typeEntiteFonctionExterne extends @AC_semanticsEntity {
  @L_EXsignature aSignature ;
  @AC_galgasType mReturnedType ;

  message "an extern function" ;
  message messageTypeEntite "an extern function" ;
}

#---------------------------------------------------------------------------*

class @typeRoutineExterneAengendrer extends @typeEntityToGenerate {
  @lstring aNomAction feature nogetter ;
  @L_EXsignature aSignature feature nogetter ;
}

#---------------------------------------------------------------------------*

class @typeFonctionExterneAengendrer extends @typeEntityToGenerate {
  @lstring aNomAction feature nogetter ;
  @L_EXsignature aSignature feature nogetter ;
  @AC_galgasType mReturnedType feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#              Liste des entites a engendrer                                *
#                                                                           *
#---------------------------------------------------------------------------*

list @typeEntitiesToGenerateList {
  @typeEntityToGenerate mEntityToGenerate ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#   G A L G A S    L I S T M A P    T Y P E                                 *
#                                                                           *
#---------------------------------------------------------------------------*

class @typeGalgasListmapToImplement extends @typeEntityToGenerate {
  @lstring mListmapTypeName feature nogetter ;
  @lstring mListTypename feature nogetter ;
#--- List of all attributes of list
  @typeListeAttributsSemantiques mAttributesList feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#    E N U M     T Y P E                                                    *
#                                                                           *
#---------------------------------------------------------------------------*

map @typeEnumCstMessageStringMap {
  @lstring mMessageString ;
  insert insertKey error message "the message for '%K' constant is already declared in %L" ;
  search searchKey error message "the message for '%K' constant is not declared" ;
}

#---------------------------------------------------------------------------*

class @enumGalgasType extends @typeEntityToGenerate {
  @lstring mEnumTypeName feature nogetter ;
  @enumConstantMap mConstantMap feature nogetter ;
  @typeEnumMessageMap mEnumMessageMap feature nogetter ;
}

#---------------------------------------------------------------------------*

extern routine appendJokersIfNeeded
 ?!@typeCplusPlusNameList ioAllVariablesList
 ?@uint inEffectiveParametersCount
 ?@uint inFormalArgumentsCount
 ?@typeCplusPlusName inNullName
;

#---------------------------------------------------------------------------*

extern routine generateSemanticsComponent
  ?!@lstring componentName
  ?!@stringset includesForHeaderFile
  ?!@string defLexique
  ?!@typeEntitiesToGenerateList listeEntitesAengendrer
  ?!@stringset includesForImplementationFile
;

#---------------------------------------------------------------------------*
#                                                                           *
#              Grammar descriptor (for program component)                   *
#                                                                           *
#---------------------------------------------------------------------------*

list @ruleDescriptorForProgramList {
  @lstring mSourceExtension ;
  @string mHelpMessage ;
  @lstring mSourceFileName ;
  @typeInstructionList mInstructionList ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#              F I L E    W R A P P E R                                     *
#                                                                           *
#---------------------------------------------------------------------------*

sortedlist @wrapperFileSortedListEX {
  @string mRegularFileName ;
  @string mAbsoluteFilePath ;
  @uint mWrapperDirectoryIndex ;
  @uint mWrapperFileIndex ;
}{
  mRegularFileName <
}

#---------------------------------------------------------------------------*

sortedlist @wrapperDirectorySortedListEX ;

sortedlist @wrapperDirectorySortedListEX {
  @string mDirectoryName ;
  @wrapperFileSortedListEX mRegularFileSortedList ;
  @wrapperDirectorySortedListEX mDirectorySortedList ;
  @uint mWrapperDirectoryIndex ;
}{
  mDirectoryName <
}

#---------------------------------------------------------------------------*

map @wrapperExtensionMapEX {
  insert insertKey error message "the '%K' extension has been already declared" ;
}

#---------------------------------------------------------------------------*

class @C_wrapperToImplement extends @typeEntityToGenerate {
  @lstring mWrapperName feature nogetter ;
  @string mSourceDirectory feature nogetter ; # Used for comment in generated code
  @wrapperExtensionMapEX mExtensionMap feature nogetter ; # Used for comment in generated code
  @wrapperFileSortedListEX mRegularFileSortedList feature nogetter ;
  @wrapperDirectorySortedListEX mDirectorySortedList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @C_structToImplement extends @typeEntityToGenerate {
  @lstring mStructName feature nogetter ;
  @typeListeAttributsSemantiques mAttributeList feature nogetter ;
}

#---------------------------------------------------------------------------*

class @C_filewrapperTemplateToImplement extends @typeEntityToGenerate {
  @lstring mFilewrapperName feature nogetter ;
  @lstring mTemplateName feature nogetter ;
  @typeListeTypesEtNomsArgMethode mTemplateArgumentList feature nogetter ;
  @templateInstructionList mTemplateInstructionList feature nogetter ;
  @bool mUsesColumnMarker feature nogetter ;
}

#---------------------------------------------------------------------------*
#                                                                           *
#  T E M P L A T E    V A R I A B L E    M A P                              *
#                                                                           *
#---------------------------------------------------------------------------*

map @templateVariableMap {
  @AC_galgasType mArgumentType ;
  @typeCplusPlusName mCplusPlusName ;
  insert insertKey error message "the template variable '%K' is already declared" ;
  search searchKey error message "the template variable '%K' is not declared" ;
}

#---------------------------------------------------------------------------*

end semantics ;
