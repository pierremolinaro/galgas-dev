//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'common_semantics.h'                          *
//                Generated by version GALGAS_BETA_VERSION (LL(1) grammar)                 *
//                    november 16th, 2005, at 15h15'55"                      *
//                                                                           *
// This program is free software; you can redistribute it and/or modify it   *
// under the terms of the GNU General Public License as published by the     *
// Free Software Foundation.                                                 *
//                                                                           *
// This program is distributed in the hope it will be useful, but WITHOUT    *
// ANY WARRANTY; without even the implied warranty of MERCHANDIBILITY or     *
// FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for  *
// more details.                                                             *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef common_semantics_DEFINED
#define common_semantics_DEFINED

#include <string.h>

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/C_Lexique.h"

//---------------------------------------------------------------------------*
//                                                                           *
//   Include directives generated by extern types, methods or attributes     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "cClassMethodsMap.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//   Include directives generated by extern types, methods or attributes     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_signature ;
class GGS_typeListeAttributsSemantiques ;
//---------------------------------------------------------------------------*
//                                                                           *
//           class for enumeration 'actualParametersPassingMode'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_actualParametersPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_parameterOut, enum_parameterOutIn, enum_parameterIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const {return mValue ; }

//--- Default constructor
  public : inline GGS_actualParametersPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_actualParametersPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : inline bool isBuilt (void) const { return mValue > kNotBuilt ; }

//--- Construction from GALGAS constructor
  public : static inline GGS_actualParametersPassingMode constructor_parameterOut (void) {
    return GGS_actualParametersPassingMode (enum_parameterOut) ;
  }
  public : static inline GGS_actualParametersPassingMode constructor_parameterOutIn (void) {
    return GGS_actualParametersPassingMode (enum_parameterOutIn) ;
  }
  public : static inline GGS_actualParametersPassingMode constructor_parameterIn (void) {
    return GGS_actualParametersPassingMode (enum_parameterIn) ;
  }

//--- Messages
  public : GGS_string reader_actualArgumentMessage (void) const ;

//--- Drop operation
  public : inline void drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool operator == (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool operator != (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool operator <= (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool operator >= (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool operator <  (const GGS_actualParametersPassingMode inOperand) const ;
  public : GGS_bool operator >  (const GGS_actualParametersPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            class for enumeration 'formalArgumentPassingMode'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_formalArgumentPassingMode {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_argumentIn, enum_argumentOut, enum_argumentInOut, enum_argumentConstantIn} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const {return mValue ; }

//--- Default constructor
  public : inline GGS_formalArgumentPassingMode (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_formalArgumentPassingMode (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 3 ; }

//--- Is built ?
  public : inline bool isBuilt (void) const { return mValue > kNotBuilt ; }

//--- Construction from GALGAS constructor
  public : static inline GGS_formalArgumentPassingMode constructor_argumentIn (void) {
    return GGS_formalArgumentPassingMode (enum_argumentIn) ;
  }
  public : static inline GGS_formalArgumentPassingMode constructor_argumentOut (void) {
    return GGS_formalArgumentPassingMode (enum_argumentOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode constructor_argumentInOut (void) {
    return GGS_formalArgumentPassingMode (enum_argumentInOut) ;
  }
  public : static inline GGS_formalArgumentPassingMode constructor_argumentConstantIn (void) {
    return GGS_formalArgumentPassingMode (enum_argumentConstantIn) ;
  }

//--- Messages
  public : GGS_string reader_formalArgumentMessage (void) const ;

//--- Drop operation
  public : inline void drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool operator == (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool operator != (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool operator <= (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool operator >= (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool operator <  (const GGS_formalArgumentPassingMode inOperand) const ;
  public : GGS_bool operator >  (const GGS_formalArgumentPassingMode inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           class for enumeration 'localConstantBuildStyleEnum'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_localConstantBuildStyleEnum {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_listStyle, enum_mapStyle, enum_firstIsKeyOtherMapStyle} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const {return mValue ; }

//--- Default constructor
  public : inline GGS_localConstantBuildStyleEnum (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_localConstantBuildStyleEnum (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : inline bool isBuilt (void) const { return mValue > kNotBuilt ; }

//--- Construction from GALGAS constructor
  public : static inline GGS_localConstantBuildStyleEnum constructor_listStyle (void) {
    return GGS_localConstantBuildStyleEnum (enum_listStyle) ;
  }
  public : static inline GGS_localConstantBuildStyleEnum constructor_mapStyle (void) {
    return GGS_localConstantBuildStyleEnum (enum_mapStyle) ;
  }
  public : static inline GGS_localConstantBuildStyleEnum constructor_firstIsKeyOtherMapStyle (void) {
    return GGS_localConstantBuildStyleEnum (enum_firstIsKeyOtherMapStyle) ;
  }

//--- Messages

//--- Drop operation
  public : inline void drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool operator == (const GGS_localConstantBuildStyleEnum inOperand) const ;
  public : GGS_bool operator != (const GGS_localConstantBuildStyleEnum inOperand) const ;
  public : GGS_bool operator <= (const GGS_localConstantBuildStyleEnum inOperand) const ;
  public : GGS_bool operator >= (const GGS_localConstantBuildStyleEnum inOperand) const ;
  public : GGS_bool operator <  (const GGS_localConstantBuildStyleEnum inOperand) const ;
  public : GGS_bool operator >  (const GGS_localConstantBuildStyleEnum inOperand) const ;
} ;

class cPtr_AC_galgasType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     GALGAS class 'GGS_AC_galgasType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_galgasType {
  protected : cPtr_AC_galgasType * mPointer ;
  public : GGS_AC_galgasType (void) ;
  public : GGS_AC_galgasType (const GGS_AC_galgasType &) ;
  public : virtual ~GGS_AC_galgasType (void) ;
  public : void operator = (const GGS_AC_galgasType &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_AC_galgasType & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_galgasType * inSource) ;
  public : GGS_AC_galgasType (cPtr_AC_galgasType * inSource) ;
  public : inline cPtr_AC_galgasType * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : cPtr_AC_galgasType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_galgasType * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
  public : GGS_string reader_messageGalgasType (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                class list 'typeListeAttributsSemantiques'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeListeAttributsSemantiques {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_AC_galgasType  mAttributType ;
    public : GGS_lstring  aNomAttribut ;
    public : element_type (const GGS_AC_galgasType & ,
                                const GGS_lstring & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_typeListeAttributsSemantiques ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeListeAttributsSemantiques (void) ; // Default Constructor
  public : GGS_typeListeAttributsSemantiques (const GGS_typeListeAttributsSemantiques &) ; // Copy constructor
  public : void operator = (const GGS_typeListeAttributsSemantiques &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeListeAttributsSemantiques (void) ;

//--- Constructor 'new'
  public : static GGS_typeListeAttributsSemantiques constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1) ;
  protected : void internalAppendItem (const GGS_AC_galgasType & argument_0,
                                const GGS_lstring & argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class list 'typeTypesList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTypesList {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_AC_galgasType  mType ;
    public : GGS_location  mEndOfExpressionLocation ;
    public : element_type (const GGS_AC_galgasType & ,
                                const GGS_location & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_typeTypesList ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeTypesList (void) ; // Default Constructor
  public : GGS_typeTypesList (const GGS_typeTypesList &) ; // Copy constructor
  public : void operator = (const GGS_typeTypesList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeTypesList (void) ;

//--- Constructor 'new'
  public : static GGS_typeTypesList constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_AC_galgasType & argument_0,
                                const GGS_location & argument_1) ;
  protected : void internalAppendItem (const GGS_AC_galgasType & argument_0,
                                const GGS_location & argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class list 'L_signature'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_signature {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_AC_galgasType  mType ;
    public : GGS_formalArgumentPassingMode mFormalArgumentPassingMode ;
    public : element_type (const GGS_AC_galgasType & ,
                                const GGS_formalArgumentPassingMode& ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_signature ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_signature (void) ; // Default Constructor
  public : GGS_L_signature (const GGS_L_signature &) ; // Copy constructor
  public : void operator = (const GGS_L_signature &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_signature (void) ;

//--- Constructor 'new'
  public : static GGS_L_signature constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_AC_galgasType & argument_0,
                                const GGS_formalArgumentPassingMode& argument_1) ;
  protected : void internalAppendItem (const GGS_AC_galgasType & argument_0,
                                const GGS_formalArgumentPassingMode& argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 class list 'L_actualParametersSignature'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_actualParametersSignature {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_AC_galgasType  mType ;
    public : GGS_actualParametersPassingMode mFormalArgumentPassingMode ;
    public : element_type (const GGS_AC_galgasType & ,
                                const GGS_actualParametersPassingMode& ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_actualParametersSignature ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_actualParametersSignature (void) ; // Default Constructor
  public : GGS_L_actualParametersSignature (const GGS_L_actualParametersSignature &) ; // Copy constructor
  public : void operator = (const GGS_L_actualParametersSignature &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_actualParametersSignature (void) ;

//--- Constructor 'new'
  public : static GGS_L_actualParametersSignature constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_AC_galgasType & argument_0,
                                const GGS_actualParametersPassingMode& argument_1) ;
  protected : void internalAppendItem (const GGS_AC_galgasType & argument_0,
                                const GGS_actualParametersPassingMode& argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  DECLARATIONS FOR MAP 'M_accessors_map'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_accessors_map {
  public : GGS_L_signature  mAccessorSignature ;
  public : GGS_AC_galgasType  mReturnedType ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_accessors_map : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_accessors_map & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_accessors_map mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_accessors_map * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_accessors_map constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_signature &  inParameter0,
                                const GGS_AC_galgasType &  inParameter1) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_signature   & outParameter0,
                                GGS_AC_galgasType   & outParameter1) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_L_signature & inParameter0,
                                  const GGS_AC_galgasType & inParameter1,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_L_signature & outParameter0,
                                  GGS_AC_galgasType & outParameter1,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class list 'L_stringList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_stringList {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_string mErrorMessageElement ;
    public : element_type (const GGS_string& ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_stringList ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_stringList (void) ; // Default Constructor
  public : GGS_L_stringList (const GGS_L_stringList &) ; // Copy constructor
  public : void operator = (const GGS_L_stringList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_stringList (void) ;

//--- Constructor 'new'
  public : static GGS_L_stringList constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_string& argument_0) ;
  protected : void internalAppendItem (const GGS_string& argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class list 'L_lstringList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_lstringList {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_lstring  mString ;
    public : element_type (const GGS_lstring & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_lstringList ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_lstringList (void) ; // Default Constructor
  public : GGS_L_lstringList (const GGS_L_lstringList &) ; // Copy constructor
  public : void operator = (const GGS_L_lstringList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_lstringList (void) ;

//--- Constructor 'new'
  public : static GGS_L_lstringList constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

class cPtr_C_galgasPrimitiveType ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_galgasPrimitiveType'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_galgasPrimitiveType {
  protected : cPtr_C_galgasPrimitiveType * mPointer ;
  public : GGS_C_galgasPrimitiveType (void) ;
  public : GGS_C_galgasPrimitiveType (const GGS_C_galgasPrimitiveType &) ;
  public : virtual ~GGS_C_galgasPrimitiveType (void) ;
  public : void operator = (const GGS_C_galgasPrimitiveType &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_C_galgasPrimitiveType & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_C_galgasPrimitiveType * inSource) ;
  public : GGS_C_galgasPrimitiveType (cPtr_C_galgasPrimitiveType * inSource) ;
  public : inline cPtr_C_galgasPrimitiveType * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : cPtr_C_galgasPrimitiveType * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_galgasPrimitiveType * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
  public : GGS_string reader_messageGalgasType (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 class map element 'e_typeTableMethodes'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableMethodes {
  public : GGS_L_signature  aListeTypesParametres ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         map 'typeTableMethodes'                           *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeTableMethodes : public cClassMethodsMap <e_typeTableMethodes> {
//--- Get object pointer
  public : inline GGS_typeTableMethodes * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- Handle 'empty' constructor
  public : static GGS_typeTableMethodes constructor_empty (void) ;
//---
public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_signature   & outParameter0) ;
public : void methode_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_L_signature   & outParameter0) ;
//---
public : void methode_searchForOverride (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_signature   & outParameter0) ;
public : void methode_searchForOverrideGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_L_signature   & outParameter0) ;
//---
public : void methode_insertAbstract (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_signature &  inParameter0) ;
public : void methode_insertAbstractGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_L_signature &  inParameter0) ;
//---
public : void methode_insertNotAbstract (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_signature &  inParameter0) ;
public : void methode_insertNotAbstractGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                const GGS_L_signature &  inParameter0) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            DECLARATIONS FOR MAP 'M_externTypeConstructorMap'              *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_externTypeConstructorMap {
  public : GGS_typeListeAttributsSemantiques  aListeDesAttributs ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_externTypeConstructorMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_externTypeConstructorMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_externTypeConstructorMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_externTypeConstructorMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_externTypeConstructorMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeListeAttributsSemantiques &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeListeAttributsSemantiques   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_typeListeAttributsSemantiques & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_typeListeAttributsSemantiques & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            DECLARATIONS FOR MAP 'M_terminalSymbolsMapForUse'              *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_terminalSymbolsMapForUse {
  public : GGS_typeListeAttributsSemantiques  aListeDesAttributs ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_terminalSymbolsMapForUse : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_terminalSymbolsMapForUse & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_terminalSymbolsMapForUse mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_terminalSymbolsMapForUse * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_terminalSymbolsMapForUse constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeListeAttributsSemantiques &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeListeAttributsSemantiques   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_typeListeAttributsSemantiques & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_typeListeAttributsSemantiques & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                DECLARATIONS FOR MAP 'M_lexiqueComponents'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_lexiqueComponents {
  public : GGS_M_terminalSymbolsMapForUse  mTerminalSymbolMap ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_lexiqueComponents : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_lexiqueComponents & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_lexiqueComponents mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_lexiqueComponents * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_lexiqueComponents constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_terminalSymbolsMapForUse &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_terminalSymbolsMapForUse   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_M_terminalSymbolsMapForUse & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_M_terminalSymbolsMapForUse & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 DECLARATIONS FOR MAP 'typeTableEnAvant'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableEnAvant {
  public : GGS_AC_galgasType  mType ;
} ;

//---------------------------------------------------------------------------*

class GGS_typeTableEnAvant : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeTableEnAvant & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeTableEnAvant mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableEnAvant * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeTableEnAvant constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_AC_galgasType & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_AC_galgasType & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              DECLARATIONS FOR MAP 'M_nonterminalSymbolAlts'               *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_nonterminalSymbolAlts {
  public : GGS_L_signature  mFormalParametersList ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_nonterminalSymbolAlts : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_nonterminalSymbolAlts & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_nonterminalSymbolAlts mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_nonterminalSymbolAlts * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_nonterminalSymbolAlts constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_signature &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_signature   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_L_signature & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_L_signature & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            DECLARATIONS FOR MAP 'M_externClassesDirectories'              *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_externClassesDirectories {
  public : GGS_lstring  mDirectory ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_externClassesDirectories : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_externClassesDirectories & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_externClassesDirectories mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_externClassesDirectories * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_externClassesDirectories constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_lstring & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_lstring & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

class cPtr_AC_semanticsEntity ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_AC_semanticsEntity'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_semanticsEntity {
  protected : cPtr_AC_semanticsEntity * mPointer ;
  public : GGS_AC_semanticsEntity (void) ;
  public : GGS_AC_semanticsEntity (const GGS_AC_semanticsEntity &) ;
  public : virtual ~GGS_AC_semanticsEntity (void) ;
  public : void operator = (const GGS_AC_semanticsEntity &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_AC_semanticsEntity & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_semanticsEntity * inSource) ;
  public : GGS_AC_semanticsEntity (cPtr_AC_semanticsEntity * inSource) ;
  public : inline cPtr_AC_semanticsEntity * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : cPtr_AC_semanticsEntity * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_semanticsEntity * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
  public : GGS_string reader_messageTypeEntite (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             DECLARATIONS FOR MAP 'M_semanticsEntitiesForUse'              *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_semanticsEntitiesForUse {
  public : GGS_AC_semanticsEntity  aDefEntite ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_semanticsEntitiesForUse : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_semanticsEntitiesForUse & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_semanticsEntitiesForUse mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_semanticsEntitiesForUse * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_semanticsEntitiesForUse constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_semanticsEntity &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_semanticsEntity   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_AC_semanticsEntity & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_AC_semanticsEntity & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

class cPtr_AC_typeForGrammarComponent ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_AC_typeForGrammarComponent'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_typeForGrammarComponent {
  protected : cPtr_AC_typeForGrammarComponent * mPointer ;
  public : GGS_AC_typeForGrammarComponent (void) ;
  public : GGS_AC_typeForGrammarComponent (const GGS_AC_typeForGrammarComponent &) ;
  public : virtual ~GGS_AC_typeForGrammarComponent (void) ;
  public : void operator = (const GGS_AC_typeForGrammarComponent &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_AC_typeForGrammarComponent & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_typeForGrammarComponent * inSource) ;
  public : GGS_AC_typeForGrammarComponent (cPtr_AC_typeForGrammarComponent * inSource) ;
  public : inline cPtr_AC_typeForGrammarComponent * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : cPtr_AC_typeForGrammarComponent * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_typeForGrammarComponent * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
  public : GGS_string reader_typeForGrammarComponentMessage (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            DECLARATIONS FOR MAP 'M_typesForGrammarComponent'              *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_typesForGrammarComponent {
  public : GGS_AC_typeForGrammarComponent  mType ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_typesForGrammarComponent : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_typesForGrammarComponent & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_typesForGrammarComponent mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_typesForGrammarComponent * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_typesForGrammarComponent constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_typeForGrammarComponent &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_typeForGrammarComponent   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_AC_typeForGrammarComponent & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_AC_typeForGrammarComponent & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               class list 'L_signature_ForGrammarComponent'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_signature_ForGrammarComponent {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_formalArgumentPassingMode mFormalArgumentPassingMode ;
    public : GGS_lstring  mGalgasTypeName ;
    public : element_type (const GGS_formalArgumentPassingMode& ,
                                const GGS_lstring & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_signature_ForGrammarComponent ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_signature_ForGrammarComponent (void) ; // Default Constructor
  public : GGS_L_signature_ForGrammarComponent (const GGS_L_signature_ForGrammarComponent &) ; // Copy constructor
  public : void operator = (const GGS_L_signature_ForGrammarComponent &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_signature_ForGrammarComponent (void) ;

//--- Constructor 'new'
  public : static GGS_L_signature_ForGrammarComponent constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1) ;
  protected : void internalAppendItem (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

void routine_checkSignature_ForGrammarComponent (C_Lexique &,
                                const GGS_L_signature_ForGrammarComponent  &,
                                const GGS_L_signature_ForGrammarComponent  &,
                                const GGS_location  &) ;

class cPtr_AC_instruction_ForGrammar ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_AC_instruction_ForGrammar'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_AC_instruction_ForGrammar {
  protected : cPtr_AC_instruction_ForGrammar * mPointer ;
  public : GGS_AC_instruction_ForGrammar (void) ;
  public : GGS_AC_instruction_ForGrammar (const GGS_AC_instruction_ForGrammar &) ;
  public : virtual ~GGS_AC_instruction_ForGrammar (void) ;
  public : void operator = (const GGS_AC_instruction_ForGrammar &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_AC_instruction_ForGrammar & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_AC_instruction_ForGrammar * inSource) ;
  public : GGS_AC_instruction_ForGrammar (cPtr_AC_instruction_ForGrammar * inSource) ;
  public : inline cPtr_AC_instruction_ForGrammar * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : cPtr_AC_instruction_ForGrammar * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_AC_instruction_ForGrammar * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class list 'L_ruleSyntaxSignature'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_ruleSyntaxSignature {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_AC_instruction_ForGrammar  mInstruction ;
    public : element_type (const GGS_AC_instruction_ForGrammar & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_ruleSyntaxSignature ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_ruleSyntaxSignature (void) ; // Default Constructor
  public : GGS_L_ruleSyntaxSignature (const GGS_L_ruleSyntaxSignature &) ; // Copy constructor
  public : void operator = (const GGS_L_ruleSyntaxSignature &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_ruleSyntaxSignature (void) ;

//--- Constructor 'new'
  public : static GGS_L_ruleSyntaxSignature constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_AC_instruction_ForGrammar & argument_0) ;
  protected : void internalAppendItem (const GGS_AC_instruction_ForGrammar & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   DECLARATIONS FOR MAP 'L_grammarsMap'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_L_grammarsMap {
  public : GGS_M_nonterminalSymbolAlts  mStartSymbolParametersMap ;
} ;

//---------------------------------------------------------------------------*

class GGS_L_grammarsMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_L_grammarsMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_L_grammarsMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_L_grammarsMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_L_grammarsMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_nonterminalSymbolAlts &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_nonterminalSymbolAlts   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_M_nonterminalSymbolAlts & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_M_nonterminalSymbolAlts & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         DECLARATIONS FOR MAP 'M_nonterminalSymbolAltsForGrammar'          *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_nonterminalSymbolAltsForGrammar {
  public : GGS_L_signature_ForGrammarComponent  mFormalParametersList ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_nonterminalSymbolAltsForGrammar : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_nonterminalSymbolAltsForGrammar & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_nonterminalSymbolAltsForGrammar mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_nonterminalSymbolAltsForGrammar * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_nonterminalSymbolAltsForGrammar constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_signature_ForGrammarComponent &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_signature_ForGrammarComponent   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_L_signature_ForGrammarComponent & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_L_signature_ForGrammarComponent & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            class list 'L_productionRules_ForGrammarComponent'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_productionRules_ForGrammarComponent {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_lstring  mLeftNonterminalSymbol ;
    public : GGS_uint  mLeftNonterminalSymbolIndex ;
    public : GGS_L_ruleSyntaxSignature  mInstructionsList ;
    public : element_type (const GGS_lstring & ,
                                const GGS_uint & ,
                                const GGS_L_ruleSyntaxSignature & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_productionRules_ForGrammarComponent ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_productionRules_ForGrammarComponent (void) ; // Default Constructor
  public : GGS_L_productionRules_ForGrammarComponent (const GGS_L_productionRules_ForGrammarComponent &) ; // Copy constructor
  public : void operator = (const GGS_L_productionRules_ForGrammarComponent &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_productionRules_ForGrammarComponent (void) ;

//--- Constructor 'new'
  public : static GGS_L_productionRules_ForGrammarComponent constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_L_ruleSyntaxSignature & argument_2) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_uint & argument_1,
                                const GGS_L_ruleSyntaxSignature & argument_2) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//          DECLARATIONS FOR MAP 'M_nonTerminalSymbolsForGrammar'            *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_nonTerminalSymbolsForGrammar {
  public : GGS_M_nonterminalSymbolAltsForGrammar  mNonterminalSymbolParametersMap ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_nonTerminalSymbolsForGrammar : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_nonTerminalSymbolsForGrammar & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_nonTerminalSymbolsForGrammar mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_nonTerminalSymbolsForGrammar * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_nonTerminalSymbolsForGrammar constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_nonterminalSymbolAltsForGrammar &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_nonterminalSymbolAltsForGrammar   & outParameter0) ;
//--- 'searchKeyGetIndex' Search Method
  public : void methode_searchKeyGetIndex (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_luint & outIndex,
                                GGS_M_nonterminalSymbolAltsForGrammar   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_M_nonterminalSymbolAltsForGrammar & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_M_nonterminalSymbolAltsForGrammar & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                DECLARATIONS FOR MAP 'M_syntaxComponents'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_syntaxComponents {
  public : GGS_M_nonTerminalSymbolsForGrammar  mNonterminalSymbolsMap ;
  public : GGS_L_productionRules_ForGrammarComponent  mProductionRulesList ;
  public : GGS_lstring  mLexiqueComponentName ;
  public : GGS_stringset  mClassesNamesSet ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_syntaxComponents : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_syntaxComponents & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_syntaxComponents mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_syntaxComponents * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_syntaxComponents constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_nonTerminalSymbolsForGrammar &  inParameter0,
                                const GGS_L_productionRules_ForGrammarComponent &  inParameter1,
                                const GGS_lstring &  inParameter2,
                                const GGS_stringset &  inParameter3) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_nonTerminalSymbolsForGrammar   & outParameter0,
                                GGS_L_productionRules_ForGrammarComponent   & outParameter1,
                                GGS_lstring   & outParameter2,
                                GGS_stringset   & outParameter3) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_M_nonTerminalSymbolsForGrammar & inParameter0,
                                  const GGS_L_productionRules_ForGrammarComponent & inParameter1,
                                  const GGS_lstring & inParameter2,
                                  const GGS_stringset & inParameter3,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_M_nonTerminalSymbolsForGrammar & outParameter0,
                                  GGS_L_productionRules_ForGrammarComponent & outParameter1,
                                  GGS_lstring & outParameter2,
                                  GGS_stringset & outParameter3,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              class list 'L_branchList_ForGrammarComponent'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_branchList_ForGrammarComponent {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_L_ruleSyntaxSignature  mInstructionsList ;
    public : element_type (const GGS_L_ruleSyntaxSignature & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_branchList_ForGrammarComponent ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_branchList_ForGrammarComponent (void) ; // Default Constructor
  public : GGS_L_branchList_ForGrammarComponent (const GGS_L_branchList_ForGrammarComponent &) ; // Copy constructor
  public : void operator = (const GGS_L_branchList_ForGrammarComponent &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_branchList_ForGrammarComponent (void) ;

//--- Constructor 'new'
  public : static GGS_L_branchList_ForGrammarComponent constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_L_ruleSyntaxSignature & argument_0) ;
  protected : void internalAppendItem (const GGS_L_ruleSyntaxSignature & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                class list 'L_syntaxComponents_ForGrammar'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_syntaxComponents_ForGrammar {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_M_nonTerminalSymbolsForGrammar  mNonterminalSymbolsMap ;
    public : GGS_L_productionRules_ForGrammarComponent  mProductionRulesList ;
    public : GGS_stringset  mClassesNamesSet ;
    public : GGS_lstring  mSyntaxComponentName ;
    public : element_type (const GGS_M_nonTerminalSymbolsForGrammar & ,
                                const GGS_L_productionRules_ForGrammarComponent & ,
                                const GGS_stringset & ,
                                const GGS_lstring & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_syntaxComponents_ForGrammar ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_syntaxComponents_ForGrammar (void) ; // Default Constructor
  public : GGS_L_syntaxComponents_ForGrammar (const GGS_L_syntaxComponents_ForGrammar &) ; // Copy constructor
  public : void operator = (const GGS_L_syntaxComponents_ForGrammar &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_syntaxComponents_ForGrammar (void) ;

//--- Constructor 'new'
  public : static GGS_L_syntaxComponents_ForGrammar constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_M_nonTerminalSymbolsForGrammar & argument_0,
                                const GGS_L_productionRules_ForGrammarComponent & argument_1,
                                const GGS_stringset & argument_2,
                                const GGS_lstring & argument_3) ;
  protected : void internalAppendItem (const GGS_M_nonTerminalSymbolsForGrammar & argument_0,
                                const GGS_L_productionRules_ForGrammarComponent & argument_1,
                                const GGS_stringset & argument_2,
                                const GGS_lstring & argument_3) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class list 'L_identifiers'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_L_identifiers {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_lstring  aIdentificateur ;
    public : element_type (const GGS_lstring & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_L_identifiers ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_identifiers (void) ; // Default Constructor
  public : GGS_L_identifiers (const GGS_L_identifiers &) ; // Copy constructor
  public : void operator = (const GGS_L_identifiers &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_identifiers (void) ;

//--- Constructor 'new'
  public : static GGS_L_identifiers constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                DECLARATIONS FOR MAP 'typeSuperClassesMap'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeSuperClassesMap {
} ;

//---------------------------------------------------------------------------*

class GGS_typeSuperClassesMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeSuperClassesMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeSuperClassesMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeSuperClassesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeSuperClassesMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           DECLARATIONS FOR MAP 'typeClassInheritedMessagesMap'            *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeClassInheritedMessagesMap {
} ;

//---------------------------------------------------------------------------*

class GGS_typeClassInheritedMessagesMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeClassInheritedMessagesMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeClassInheritedMessagesMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeClassInheritedMessagesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeClassInheritedMessagesMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             DECLARATIONS FOR MAP 'typeSemanticAttributesMap'              *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeSemanticAttributesMap {
  public : GGS_AC_galgasType  mAttributType ;
} ;

//---------------------------------------------------------------------------*

class GGS_typeSemanticAttributesMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeSemanticAttributesMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeSemanticAttributesMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeSemanticAttributesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeSemanticAttributesMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_AC_galgasType &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_AC_galgasType   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_AC_galgasType & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_AC_galgasType & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class for enumeration 'lastStateEnum'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lastStateEnum {
//--- Enumeration
  public : enum enumeration {kNotBuilt, enum_acceptedState, enum_warningState, enum_errorState} ;

//--- Private attribute
  private : enumeration mValue ;

//--- Get value
  public : inline enumeration enumValue (void) const {return mValue ; }

//--- Default constructor
  public : inline GGS_lastStateEnum (void) : mValue (kNotBuilt) {}

//--- Internal constructor
  private : inline GGS_lastStateEnum (const enumeration inValue) : mValue (inValue) {}

//--- Bit count for bdd
  public : static inline uint16 bitCount (void) { return 2 ; }

//--- Is built ?
  public : inline bool isBuilt (void) const { return mValue > kNotBuilt ; }

//--- Construction from GALGAS constructor
  public : static inline GGS_lastStateEnum constructor_acceptedState (void) {
    return GGS_lastStateEnum (enum_acceptedState) ;
  }
  public : static inline GGS_lastStateEnum constructor_warningState (void) {
    return GGS_lastStateEnum (enum_warningState) ;
  }
  public : static inline GGS_lastStateEnum constructor_errorState (void) {
    return GGS_lastStateEnum (enum_errorState) ;
  }

//--- Messages

//--- Drop operation
  public : inline void drop_operation (void) { mValue = kNotBuilt ; }

//--- Comparison operators
  public : GGS_bool operator == (const GGS_lastStateEnum inOperand) const ;
  public : GGS_bool operator != (const GGS_lastStateEnum inOperand) const ;
  public : GGS_bool operator <= (const GGS_lastStateEnum inOperand) const ;
  public : GGS_bool operator >= (const GGS_lastStateEnum inOperand) const ;
  public : GGS_bool operator <  (const GGS_lastStateEnum inOperand) const ;
  public : GGS_bool operator >  (const GGS_lastStateEnum inOperand) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class list 'lastStateList'                         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_lastStateList {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_lstring  mLastState ;
    public : GGS_lastStateEnum mStatus ;
    public : GGS_L_stringList  mMessageList ;
    public : element_type (const GGS_lstring & ,
                                const GGS_lastStateEnum& ,
                                const GGS_L_stringList & ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_lastStateList ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_lastStateList (void) ; // Default Constructor
  public : GGS_lastStateList (const GGS_lastStateList &) ; // Copy constructor
  public : void operator = (const GGS_lastStateList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_lastStateList (void) ;

//--- Constructor 'new'
  public : static GGS_lastStateList constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_lastStateEnum& argument_1,
                                const GGS_L_stringList & argument_2) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_lastStateEnum& argument_1,
                                const GGS_L_stringList & argument_2) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                DECLARATIONS FOR MAP 'transitionStatusMap'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class e_transitionStatusMap {
  public : GGS_lastStateEnum mStatus ;
  public : GGS_L_stringList  mMessageList ;
} ;

//---------------------------------------------------------------------------*

class GGS_transitionStatusMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_transitionStatusMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_transitionStatusMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_transitionStatusMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_transitionStatusMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lastStateEnum&  inParameter0,
                                const GGS_L_stringList &  inParameter1) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_lastStateEnum& inParameter0,
                                  const GGS_L_stringList & inParameter1,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_lastStateEnum& outParameter0,
                                  GGS_L_stringList & outParameter1,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class list 'insertOrSearchMethodList'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_insertOrSearchMethodList {
  public : class element_type {
    private : element_type * mNextItem ;
    public : GGS_lstring  mMethodName ;
    public : GGS_L_stringList  mErrorMessageList ;
    public : GGS_string mFirstState ;
    public : GGS_lastStateList  mLastStateList ;
    public : GGS_transitionStatusMap  mTransitionStatusMap ;
    public : GGS_bool mIsGetIndexMethod ;
    public : element_type (const GGS_lstring & ,
                                const GGS_L_stringList & ,
                                const GGS_string& ,
                                const GGS_lastStateList & ,
                                const GGS_transitionStatusMap & ,
                                const GGS_bool& ) ;

    public : inline element_type * nextObject (void) const { return mNextItem ; }
    private : element_type (const element_type &) ;
    private : void operator = (const element_type &) ;
    public : ~element_type (void) {}
    friend class GGS_insertOrSearchMethodList ;
  } ;

  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : element_type * mCurrentItemPtr ;
  private : sint32 mCurrentItemIndex ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_insertOrSearchMethodList (void) ; // Default Constructor
  public : GGS_insertOrSearchMethodList (const GGS_insertOrSearchMethodList &) ; // Copy constructor
  public : void operator = (const GGS_insertOrSearchMethodList &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_insertOrSearchMethodList (void) ;

//--- Constructor 'new'
  public : static GGS_insertOrSearchMethodList constructor_empty (void) ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_L_stringList & argument_1,
                                const GGS_string& argument_2,
                                const GGS_lastStateList & argument_3,
                                const GGS_transitionStatusMap & argument_4,
                                const GGS_bool& argument_5) ;
  protected : void internalAppendItem (const GGS_lstring & argument_0,
                                const GGS_L_stringList & argument_1,
                                const GGS_string& argument_2,
                                const GGS_lastStateList & argument_3,
                                const GGS_transitionStatusMap & argument_4,
                                const GGS_bool& argument_5) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

class cPtr_typeDefEntiteUtilisable ;

//---------------------------------------------------------------------------*
//                                                                           *
//                GALGAS class 'GGS_typeDefEntiteUtilisable'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeDefEntiteUtilisable {
  protected : cPtr_typeDefEntiteUtilisable * mPointer ;
  public : GGS_typeDefEntiteUtilisable (void) ;
  public : GGS_typeDefEntiteUtilisable (const GGS_typeDefEntiteUtilisable &) ;
  public : virtual ~GGS_typeDefEntiteUtilisable (void) ;
  public : void operator = (const GGS_typeDefEntiteUtilisable &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_typeDefEntiteUtilisable & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeDefEntiteUtilisable * inSource) ;
  public : GGS_typeDefEntiteUtilisable (cPtr_typeDefEntiteUtilisable * inSource) ;
  public : inline cPtr_typeDefEntiteUtilisable * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : cPtr_typeDefEntiteUtilisable * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeDefEntiteUtilisable * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
  public : GGS_string reader_messageTypeEntite (void) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               DECLARATIONS FOR MAP 'typeTableBlocsDeTable'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableBlocsDeTable {
  public : GGS_L_signature  aSignatureDebut ;
  public : GGS_L_signature  aSignatureFin ;
} ;

//---------------------------------------------------------------------------*

class GGS_typeTableBlocsDeTable : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeTableBlocsDeTable & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeTableBlocsDeTable mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableBlocsDeTable * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeTableBlocsDeTable constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_signature &  inParameter0,
                                const GGS_L_signature &  inParameter1) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_signature   & outParameter0,
                                GGS_L_signature   & outParameter1) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_L_signature & inParameter0,
                                  const GGS_L_signature & inParameter1,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_L_signature & outParameter0,
                                  GGS_L_signature & outParameter1,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   DECLARATIONS FOR MAP 'mapMethodMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class e_mapMethodMap {
  public : GGS_L_signature  mMethodSignature ;
} ;

//---------------------------------------------------------------------------*

class GGS_mapMethodMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_mapMethodMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_mapMethodMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_mapMethodMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_mapMethodMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_signature &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_signature   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_L_signature & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_L_signature & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//         DECLARATIONS FOR MAP 'typeTableUtilisationsSemantiques'           *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeTableUtilisationsSemantiques {
} ;

//---------------------------------------------------------------------------*

class GGS_typeTableUtilisationsSemantiques : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeTableUtilisationsSemantiques & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeTableUtilisationsSemantiques mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeTableUtilisationsSemantiques * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeTableUtilisationsSemantiques constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               DECLARATIONS FOR MAP 'typeEnumConstantesMap'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeEnumConstantesMap {
} ;

//---------------------------------------------------------------------------*

class GGS_typeEnumConstantesMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeEnumConstantesMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeEnumConstantesMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeEnumConstantesMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeEnumConstantesMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                DECLARATIONS FOR MAP 'typeEnumMessageMap'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeEnumMessageMap {
  public : GGS_L_lstringList  mMessageStringList ;
} ;

//---------------------------------------------------------------------------*

class GGS_typeEnumMessageMap : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_typeEnumMessageMap & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_typeEnumMessageMap mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeEnumMessageMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeEnumMessageMap constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_L_lstringList &  inParameter0) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_L_lstringList   & outParameter0) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_L_lstringList & inParameter0,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_L_lstringList & outParameter0,
                                  GGS_luint * outIndex) ;
} ;

void routine_verifierCompatibiliteTypesSemantiques (C_Lexique &,
                                const GGS_AC_galgasType  &,
                                const GGS_AC_galgasType  &,
                                const GGS_location  &) ;

void routine_verifierCompatibiliteSignatures (C_Lexique &,
                                GGS_L_signature  ,
                                GGS_L_signature  ,
                                GGS_location  ) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   DECLARATIONS FOR MAP 'M_cli_options'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_cli_options {
  public : GGS_lchar  mOptionChar ;
  public : GGS_lstring  mOptionString ;
  public : GGS_lstring  mComment ;
  public : GGS_uint  mDefaultValue ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_cli_options : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_cli_options & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_cli_options mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_cli_options * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_cli_options constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lchar &  inParameter0,
                                const GGS_lstring &  inParameter1,
                                const GGS_lstring &  inParameter2,
                                const GGS_uint &  inParameter3) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lchar   & outParameter0,
                                GGS_lstring   & outParameter1,
                                GGS_lstring   & outParameter2,
                                GGS_uint   & outParameter3) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_lchar & inParameter0,
                                  const GGS_lstring & inParameter1,
                                  const GGS_lstring & inParameter2,
                                  const GGS_uint & inParameter3,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_lchar & outParameter0,
                                  GGS_lstring & outParameter1,
                                  GGS_lstring & outParameter2,
                                  GGS_uint & outParameter3,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                DECLARATIONS FOR MAP 'M_optionComponents'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_optionComponents {
  public : GGS_M_cli_options  mBoolOptionsMap ;
  public : GGS_M_cli_options  mUintOptionsMap ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_optionComponents : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_optionComponents & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_optionComponents mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_optionComponents * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_optionComponents constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_cli_options &  inParameter0,
                                const GGS_M_cli_options &  inParameter1) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_cli_options   & outParameter0,
                                GGS_M_cli_options   & outParameter1) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_M_cli_options & inParameter0,
                                  const GGS_M_cli_options & inParameter1,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_M_cli_options & outParameter0,
                                  GGS_M_cli_options & outParameter1,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               DECLARATIONS FOR MAP 'M_semanticsComponents'                *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_semanticsComponents {
  public : GGS_M_semanticsEntitiesForUse  mSemanticsEntitiesMap ;
  public : GGS_M_optionComponents  mOptionsComponents ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_semanticsComponents : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_semanticsComponents & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_semanticsComponents mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_semanticsComponents * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_semanticsComponents constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_semanticsEntitiesForUse &  inParameter0,
                                const GGS_M_optionComponents &  inParameter1) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_semanticsEntitiesForUse   & outParameter0,
                                GGS_M_optionComponents   & outParameter1) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_M_semanticsEntitiesForUse & inParameter0,
                                  const GGS_M_optionComponents & inParameter1,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_M_semanticsEntitiesForUse & outParameter0,
                                  GGS_M_optionComponents & outParameter1,
                                  GGS_luint * outIndex) ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                DECLARATIONS FOR MAP 'M_grammarComponents'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class e_M_grammarComponents {
  public : GGS_M_nonterminalSymbolAltsForGrammar  mNonterminalSymbolParametersMap ;
  public : GGS_lstring  mLexiqueName ;
  public : GGS_M_optionComponents  mOptionsMap ;
} ;

//---------------------------------------------------------------------------*

class GGS_M_grammarComponents : public AC_galgas_map {
//------------------------ Internal class for an element
  public : class element_type : public AC_galgas_map_element {
  //--- Constructor
    public : element_type (const GGS_lstring & inKey,
                           const sint32 inIndex,
                           const e_M_grammarComponents & inInfo) ;
  //--- Get pointers
    public : inline element_type * nextObject (void) const { return (element_type *) mNextItem ; }
    public : inline element_type * infObject (void) const { return (element_type *) mInfPtr ; }
    public : inline element_type * supObject (void) const { return (element_type *) mSupPtr ; }
  //--- Data members
    public : e_M_grammarComponents mInfo ;
  } ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_M_grammarComponents * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_M_grammarComponents constructor_empty (void) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_M_nonterminalSymbolAltsForGrammar &  inParameter0,
                                const GGS_lstring &  inParameter1,
                                const GGS_M_optionComponents &  inParameter2) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_M_nonterminalSymbolAltsForGrammar   & outParameter0,
                                GGS_lstring   & outParameter1,
                                GGS_M_optionComponents   & outParameter2) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  const GGS_M_nonterminalSymbolAltsForGrammar & inParameter0,
                                  const GGS_lstring & inParameter1,
                                  const GGS_M_optionComponents & inParameter2,
                                  GGS_luint * outIndex) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessagesArray [],
                                  const GGS_lstring & inKey,
                                  GGS_M_nonterminalSymbolAltsForGrammar & outParameter0,
                                  GGS_lstring & outParameter1,
                                  GGS_M_optionComponents & outParameter2,
                                  GGS_luint * outIndex) ;
} ;

void routine_handleReaderCall (C_Lexique &,
                                const GGS_AC_galgasType  &,
                                const GGS_lstring  &,
                                GGS_typeListeAttributsSemantiques  &,
                                GGS_AC_galgasType  &) ;

#include "include_AC_galgasType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'typeGalgas_jokerInParameterList'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_jokerInParameterList.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeGalgas_jokerInParameterList'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_jokerInParameterList {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_jokerInParameterList * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_jokerInParameterList * constructor_new () {
      return new cPtr_typeGalgas_jokerInParameterList() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_bool'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_bool.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeGalgas_bool'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_bool {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_bool * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_bool * constructor_new () {
      return new cPtr_typeGalgas_bool() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeGalgas_string'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_string.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeGalgas_string'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_string {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_string * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_string * constructor_new () {
      return new cPtr_typeGalgas_string() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_sint'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_sint.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeGalgas_sint'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_sint {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_sint * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_sint * constructor_new () {
      return new cPtr_typeGalgas_sint() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_uint'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_uint.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeGalgas_uint'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_uint {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_uint * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_uint * constructor_new () {
      return new cPtr_typeGalgas_uint() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_char'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_char.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeGalgas_char'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_char {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_char * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_char * constructor_new () {
      return new cPtr_typeGalgas_char() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeGalgas_double'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_double.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeGalgas_double'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_double {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_double * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_double * constructor_new () {
      return new cPtr_typeGalgas_double() ;
    }
  #endif
} ;

#include "include_C_galgasPrimitiveType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeGalgas_location'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_location.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeGalgas_location'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_location {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_location * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_location * constructor_new () {
      return new cPtr_typeGalgas_location() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeGalgas_lstring'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_lstring.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeGalgas_lstring'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_lstring {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_lstring * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_lstring * constructor_new () {
      return new cPtr_typeGalgas_lstring() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_lchar'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_lchar.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeGalgas_lchar'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_lchar {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_lchar * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_lchar * constructor_new () {
      return new cPtr_typeGalgas_lchar() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_lbool'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_lbool.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeGalgas_lbool'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_lbool {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_lbool * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_lbool * constructor_new () {
      return new cPtr_typeGalgas_lbool() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_luint'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_luint.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeGalgas_luint'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_luint {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_luint * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_luint * constructor_new () {
      return new cPtr_typeGalgas_luint() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_lsint'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_lsint.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeGalgas_lsint'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_lsint {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_lsint * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_lsint * constructor_new () {
      return new cPtr_typeGalgas_lsint() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeGalgas_ldouble'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_ldouble.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeGalgas_ldouble'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_ldouble {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_ldouble * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_ldouble * constructor_new () {
      return new cPtr_typeGalgas_ldouble() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeGalgas_stringset'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_stringset.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeGalgas_stringset'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_stringset {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_stringset * constructor_new () ;
  #else
    public : inline static cPtr_typeGalgas_stringset * constructor_new () {
      return new cPtr_typeGalgas_stringset() ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeGalgasUndefinedExternType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasUndefinedExternType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeGalgasUndefinedExternType'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasUndefinedExternType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasUndefinedExternType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) ;
  #else
    public : inline static cPtr_typeGalgasUndefinedExternType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1) {
      return new cPtr_typeGalgasUndefinedExternType(argument_0,
                                argument_1) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeGalgasExternType'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasExternType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeGalgasExternType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasExternType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasExternType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_M_externTypeConstructorMap & argument_2,
                                const GGS_typeTableMethodes & argument_3,
                                const GGS_typeTableMethodes & argument_4,
                                const GGS_bool& argument_5,
                                const GGS_typeListeAttributsSemantiques & argument_6) ;
  #else
    public : inline static cPtr_typeGalgasExternType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_M_externTypeConstructorMap & argument_2,
                                const GGS_typeTableMethodes & argument_3,
                                const GGS_typeTableMethodes & argument_4,
                                const GGS_bool& argument_5,
                                const GGS_typeListeAttributsSemantiques & argument_6) {
      return new cPtr_typeGalgasExternType(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6) ;
    }
  #endif
} ;

#include "include_AC_semanticsEntity.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                      class 'C_grammarForSemantics'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_grammarForSemantics.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_grammarForSemantics'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_grammarForSemantics {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_C_grammarForSemantics * constructor_new (const GGS_M_nonterminalSymbolAlts & argument_0) ;
  #else
    public : inline static cPtr_C_grammarForSemantics * constructor_new (const GGS_M_nonterminalSymbolAlts & argument_0) {
      return new cPtr_C_grammarForSemantics(argument_0) ;
    }
  #endif
} ;

#include "include_AC_typeForGrammarComponent.h"

#include "include_AC_instruction_ForGrammar.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            class 'T_terminalInstruction_forGrammarComponent'              *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_T_terminalInstruction_forGrammarComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//       GALGAS class 'GGS_T_terminalInstruction_forGrammarComponent'        *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_T_terminalInstruction_forGrammarComponent {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_T_terminalInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_uint & argument_2) ;
  #else
    public : inline static cPtr_T_terminalInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_uint & argument_2) {
      return new cPtr_T_terminalInstruction_forGrammarComponent(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//           class 'T_nonterminalInstruction_forGrammarComponent'            *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_T_nonterminalInstruction_forGrammarComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//     GALGAS class 'GGS_T_nonterminalInstruction_forGrammarComponent'       *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_T_nonterminalInstruction_forGrammarComponent {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_T_nonterminalInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_uint & argument_2) ;
  #else
    public : inline static cPtr_T_nonterminalInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_uint & argument_2) {
      return new cPtr_T_nonterminalInstruction_forGrammarComponent(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'T_selectInstruction_forGrammarComponent'               *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_T_selectInstruction_forGrammarComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_T_selectInstruction_forGrammarComponent'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_T_selectInstruction_forGrammarComponent {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_T_selectInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_L_branchList_ForGrammarComponent & argument_1,
                                const GGS_uint & argument_2) ;
  #else
    public : inline static cPtr_T_selectInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_L_branchList_ForGrammarComponent & argument_1,
                                const GGS_uint & argument_2) {
      return new cPtr_T_selectInstruction_forGrammarComponent(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'T_repeatInstruction_forGrammarComponent'               *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_T_repeatInstruction_forGrammarComponent.h"

//---------------------------------------------------------------------------*
//                                                                           *
//        GALGAS class 'GGS_T_repeatInstruction_forGrammarComponent'         *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_T_repeatInstruction_forGrammarComponent {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_T_repeatInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_L_branchList_ForGrammarComponent & argument_1,
                                const GGS_uint & argument_2) ;
  #else
    public : inline static cPtr_T_repeatInstruction_forGrammarComponent * constructor_new (const GGS_location & argument_0,
                                const GGS_L_branchList_ForGrammarComponent & argument_1,
                                const GGS_uint & argument_2) {
      return new cPtr_T_repeatInstruction_forGrammarComponent(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

#include "include_typeDefEntiteUtilisable.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeGalgasUndefinedListType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasUndefinedListType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeGalgasUndefinedListType'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasUndefinedListType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasUndefinedListType * constructor_new (const GGS_lstring & argument_0) ;
  #else
    public : inline static cPtr_typeGalgasUndefinedListType * constructor_new (const GGS_lstring & argument_0) {
      return new cPtr_typeGalgasUndefinedListType(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeGalgasListType'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasListType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeGalgasListType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasListType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasListType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1) ;
  #else
    public : inline static cPtr_typeGalgasListType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1) {
      return new cPtr_typeGalgasListType(argument_0,
                                argument_1) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeGalgasUndefinedMapType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasUndefinedMapType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_typeGalgasUndefinedMapType'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasUndefinedMapType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasUndefinedMapType * constructor_new (const GGS_lstring & argument_0) ;
  #else
    public : inline static cPtr_typeGalgasUndefinedMapType * constructor_new (const GGS_lstring & argument_0) {
      return new cPtr_typeGalgasUndefinedMapType(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeGalgasMapType'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasMapType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeGalgasMapType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasMapType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasMapType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_typeTableBlocsDeTable & argument_2,
                                const GGS_mapMethodMap & argument_3) ;
  #else
    public : inline static cPtr_typeGalgasMapType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeListeAttributsSemantiques & argument_1,
                                const GGS_typeTableBlocsDeTable & argument_2,
                                const GGS_mapMethodMap & argument_3) {
      return new cPtr_typeGalgasMapType(argument_0,
                                argument_1,
                                argument_2,
                                argument_3) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   class 'typeGalgasUndefinedClassType'                    *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasUndefinedClassType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_typeGalgasUndefinedClassType'               *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasUndefinedClassType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasUndefinedClassType * constructor_new (const GGS_lstring & argument_0) ;
  #else
    public : inline static cPtr_typeGalgasUndefinedClassType * constructor_new (const GGS_lstring & argument_0) {
      return new cPtr_typeGalgasUndefinedClassType(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'typeGalgasClassType'                         *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgasClassType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_typeGalgasClassType'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgasClassType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgasClassType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeTableMethodes & argument_1,
                                const GGS_typeListeAttributsSemantiques & argument_2,
                                const GGS_typeSuperClassesMap & argument_3,
                                const GGS_typeClassInheritedMessagesMap & argument_4,
                                const GGS_typeSemanticAttributesMap & argument_5,
                                const GGS_bool& argument_6) ;
  #else
    public : inline static cPtr_typeGalgasClassType * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeTableMethodes & argument_1,
                                const GGS_typeListeAttributsSemantiques & argument_2,
                                const GGS_typeSuperClassesMap & argument_3,
                                const GGS_typeClassInheritedMessagesMap & argument_4,
                                const GGS_typeSemanticAttributesMap & argument_5,
                                const GGS_bool& argument_6) {
      return new cPtr_typeGalgasClassType(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'typeEntiteType'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeEntiteType.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeEntiteType'                      *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntiteType {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeEntiteType * constructor_new (const GGS_AC_galgasType & argument_0) ;
  #else
    public : inline static cPtr_typeEntiteType * constructor_new (const GGS_AC_galgasType & argument_0) {
      return new cPtr_typeEntiteType(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'typeEntiteRoutine'                          *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeEntiteRoutine.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                   GALGAS class 'GGS_typeEntiteRoutine'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeEntiteRoutine {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeEntiteRoutine * constructor_new (const GGS_L_signature & argument_0) ;
  #else
    public : inline static cPtr_typeEntiteRoutine * constructor_new (const GGS_L_signature & argument_0) {
      return new cPtr_typeEntiteRoutine(argument_0) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'typeGalgas_enum'                           *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeGalgas_enum.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    GALGAS class 'GGS_typeGalgas_enum'                     *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeGalgas_enum {
  #ifndef DO_NOT_GENERATE_MEMORY_CHECK_CODE
    public : static cPtr_typeGalgas_enum * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeEnumConstantesMap & argument_1,
                                const GGS_typeEnumMessageMap & argument_2) ;
  #else
    public : inline static cPtr_typeGalgas_enum * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeEnumConstantesMap & argument_1,
                                const GGS_typeEnumMessageMap & argument_2) {
      return new cPtr_typeGalgas_enum(argument_0,
                                argument_1,
                                argument_2) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*

#endif
