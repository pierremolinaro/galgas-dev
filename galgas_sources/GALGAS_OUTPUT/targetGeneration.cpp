//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'targetGeneration.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 10th, 2010, at 15h16'3"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "targetGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "targetGeneration.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'targetGenerationFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File 'makefile-i386-linux-on-macosx/build.command'

const char * gWrapperFileContent_0_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_0_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_0_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-i386-linux-on-macosx/clean.command'

const char * gWrapperFileContent_1_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_1_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_1_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-i386-linux-on-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_1 [3] = {
  & gWrapperFile_0_targetGenerationFileWrapper,
  & gWrapperFile_1_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-i386-linux-on-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_1 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-i386-linux-on-macosx'

const cDirectoryWrapperEx gWrapperDirectory_1_targetGenerationFileWrapper (
  "makefile-i386-linux-on-macosx",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_1,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_1
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/build.command'

const char * gWrapperFileContent_2_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_2_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_2_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/build64.command'

const char * gWrapperFileContent_3_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_3_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_3_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/clean.command'

const char * gWrapperFileContent_4_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_4_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_4_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/clean64.command'

const char * gWrapperFileContent_5_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_5_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_5_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_2 [5] = {
  & gWrapperFile_2_targetGenerationFileWrapper,
  & gWrapperFile_3_targetGenerationFileWrapper,
  & gWrapperFile_4_targetGenerationFileWrapper,
  & gWrapperFile_5_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_2 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx'

const cDirectoryWrapperEx gWrapperDirectory_2_targetGenerationFileWrapper (
  "makefile-macosx",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_2,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_2
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/build.command'

const char * gWrapperFileContent_6_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_6_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_6_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/build64.command'

const char * gWrapperFileContent_7_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_7_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_7_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/clean.command'

const char * gWrapperFileContent_8_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_8_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_8_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/clean64.command'

const char * gWrapperFileContent_9_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_9_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_9_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-intel' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_3 [5] = {
  & gWrapperFile_6_targetGenerationFileWrapper,
  & gWrapperFile_7_targetGenerationFileWrapper,
  & gWrapperFile_8_targetGenerationFileWrapper,
  & gWrapperFile_9_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-intel' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_3 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-intel'

const cDirectoryWrapperEx gWrapperDirectory_3_targetGenerationFileWrapper (
  "makefile-macosx-intel",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_3,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_3
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/build.command'

const char * gWrapperFileContent_10_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_10_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_10_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/build64.command'

const char * gWrapperFileContent_11_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_11_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_11_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/clean.command'

const char * gWrapperFileContent_12_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_12_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_12_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/clean64.command'

const char * gWrapperFileContent_13_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_13_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_13_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-ppc' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_4 [5] = {
  & gWrapperFile_10_targetGenerationFileWrapper,
  & gWrapperFile_11_targetGenerationFileWrapper,
  & gWrapperFile_12_targetGenerationFileWrapper,
  & gWrapperFile_13_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-ppc' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_4 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-ppc'

const cDirectoryWrapperEx gWrapperDirectory_4_targetGenerationFileWrapper (
  "makefile-macosx-ppc",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_4,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_4
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/build.command'

const char * gWrapperFileContent_14_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_14_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_14_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/build64.command'

const char * gWrapperFileContent_15_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_15_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_15_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/clean.command'

const char * gWrapperFileContent_16_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_16_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_16_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/clean64.command'

const char * gWrapperFileContent_17_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_17_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_17_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-universal' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_5 [5] = {
  & gWrapperFile_14_targetGenerationFileWrapper,
  & gWrapperFile_15_targetGenerationFileWrapper,
  & gWrapperFile_16_targetGenerationFileWrapper,
  & gWrapperFile_17_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-universal' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_5 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-universal'

const cDirectoryWrapperEx gWrapperDirectory_5_targetGenerationFileWrapper (
  "makefile-macosx-universal",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_5,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_5
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-mingw-on-macosx/build.command'

const char * gWrapperFileContent_18_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_18_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_18_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-mingw-on-macosx/clean.command'

const char * gWrapperFileContent_19_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_19_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_19_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-mingw-on-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_6 [3] = {
  & gWrapperFile_18_targetGenerationFileWrapper,
  & gWrapperFile_19_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-mingw-on-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_6 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-mingw-on-macosx'

const cDirectoryWrapperEx gWrapperDirectory_6_targetGenerationFileWrapper (
  "makefile-mingw-on-macosx",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_6,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_6
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/build.bat'

const char * gWrapperFileContent_20_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_20_targetGenerationFileWrapper (
  "build.bat",
  "bat",
  gWrapperFileContent_20_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/clean.bat'

const char * gWrapperFileContent_21_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make clean --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_21_targetGenerationFileWrapper (
  "clean.bat",
  "bat",
  gWrapperFileContent_21_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/install.bat'

const char * gWrapperFileContent_22_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make install --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_22_targetGenerationFileWrapper (
  "install.bat",
  "bat",
  gWrapperFileContent_22_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-msys-on-win32' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_7 [4] = {
  & gWrapperFile_20_targetGenerationFileWrapper,
  & gWrapperFile_21_targetGenerationFileWrapper,
  & gWrapperFile_22_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-msys-on-win32' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_7 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-msys-on-win32'

const cDirectoryWrapperEx gWrapperDirectory_7_targetGenerationFileWrapper (
  "makefile-msys-on-win32",
  3,
  gWrapperAllFiles_targetGenerationFileWrapper_7,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_7
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/build.command'

const char * gWrapperFileContent_23_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_23_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_23_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/build64.command'

const char * gWrapperFileContent_24_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_24_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_24_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/clean.command'

const char * gWrapperFileContent_25_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_25_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_25_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/clean64.command'

const char * gWrapperFileContent_26_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_26_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_26_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-unix' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_8 [5] = {
  & gWrapperFile_23_targetGenerationFileWrapper,
  & gWrapperFile_24_targetGenerationFileWrapper,
  & gWrapperFile_25_targetGenerationFileWrapper,
  & gWrapperFile_26_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-unix' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_8 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-unix'

const cDirectoryWrapperEx gWrapperDirectory_8_targetGenerationFileWrapper (
  "makefile-unix",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_8,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_8
) ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/Credits.rtf'

const char * gWrapperFileContent_28_targetGenerationFileWrapper = // 1 bytes
"{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf380\n"
  "{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n"
  "{\\colortbl;\\red255\\green255\\blue255;}\n"
  "\\vieww9000\\viewh8400\\viewkind0\n"
  "\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n"
  "\n"
  "\\f0\\b\\fs24 \\cf0 GALGAS Cocoa Project\\\n"
  "}\n";

static const cRegularFileWrapperEx gWrapperFile_28_targetGenerationFileWrapper (
  "Credits.rtf",
  "rtf",
  gWrapperFileContent_28_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'English.lproj' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_10 [2] = {
  & gWrapperFile_28_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'English.lproj' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_10 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'English.lproj'

const cDirectoryWrapperEx gWrapperDirectory_10_targetGenerationFileWrapper (
  "English.lproj",
  1,
  gWrapperAllFiles_targetGenerationFileWrapper_10,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_10
) ;

//---------------------------------------------------------------------------*

//--- File 'xcode-project/adding-icons-to-your-application.rtf'

const char * gWrapperFileContent_27_targetGenerationFileWrapper = // 1 bytes
"{\\rtf1\\ansi\\ansicpg1252\\cocoartf1038\\cocoasubrtf320\n"
  "{\\fonttbl\\f0\\fnil\\fcharset0 GillSans;\\f1\\fnil\\fcharset128 HiraKakuProN-W3;}\n"
  "{\\colortbl;\\red255\\green255\\blue255;}\n"
  "\\paperw11900\\paperh16840\\margl1440\\margr1440\\vieww14100\\viewh8520\\viewkind0\n"
  "\\pard\\tx566\\tx1133\\tx1700\\tx2267\\tx2834\\tx3401\\tx3968\\tx4535\\tx5102\\tx5669\\tx6236\\tx6803\\ql\\qnatural\\pardirnatural\n"
  "\n"
  "\\f0\\fs28 \\cf0 By default, your Cocoa application has no associated icon.\\\n"
  "\\\n"
  "For adding an icon for your application and your documents :\\\n"
  "\\\n"
  "\n"
  "\\f1\\b \\'87\\'40\n"
  "\\f0  Add the icons files to the 'xcode-project'.\\\n"
  "\n"
  "\\b0 \\\n"
  "For example 'myAppIcon.icns' (for your application), and 'myDocIcon.icns' for your documents.\\\n"
  "\\\n"
  "When your project will be compiled, theses icons will be added automatically to the Xcode project.\\\n"
  "\\\n"
  "\n"
  "\\f1\\b \\'87\\'41\n"
  "\\f0  Open your Xcode project, edit the 'Properties' tab of your Cocoa Target Info.\\\n"
  "\n"
  "\\b0 \\\n"
  "Application icon: enter 'myAppIcon' to then 'Icon File' field.\\\n"
  "\\\n"
  "Document Icon: in the 'Document Types' table, enter 'MyDocIcon' in then 'Icon File' field.\\\n"
  "\\\n"
  "}";

static const cRegularFileWrapperEx gWrapperFile_27_targetGenerationFileWrapper (
  "adding-icons-to-your-application.rtf",
  "rtf",
  gWrapperFileContent_27_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'xcode-project' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_9 [2] = {
  & gWrapperFile_27_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'xcode-project' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_9 [2] = {
  & gWrapperDirectory_10_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'xcode-project'

const cDirectoryWrapperEx gWrapperDirectory_9_targetGenerationFileWrapper (
  "xcode-project",
  1,
  gWrapperAllFiles_targetGenerationFileWrapper_9,
  1,
  gWrapperAllDirectories_targetGenerationFileWrapper_9
) ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_0 [10] = {
  & gWrapperDirectory_1_targetGenerationFileWrapper,
  & gWrapperDirectory_2_targetGenerationFileWrapper,
  & gWrapperDirectory_3_targetGenerationFileWrapper,
  & gWrapperDirectory_4_targetGenerationFileWrapper,
  & gWrapperDirectory_5_targetGenerationFileWrapper,
  & gWrapperDirectory_6_targetGenerationFileWrapper,
  & gWrapperDirectory_7_targetGenerationFileWrapper,
  & gWrapperDirectory_8_targetGenerationFileWrapper,
  & gWrapperDirectory_9_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapperEx gWrapperDirectory_0_targetGenerationFileWrapper (
  "",
  0,
  gWrapperAllFiles_targetGenerationFileWrapper_0,
  9,
  gWrapperAllDirectories_targetGenerationFileWrapper_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_intel_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_i386_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_intel_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_i386_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_ppc_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_ppc_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel $(EXECUTABLE)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc $(EXECUTABLE_DEBUG)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel $(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc   -f makefile64 $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel -f makefile64 $(EXECUTABLE)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc   -f makefile64 $(EXECUTABLE_DEBUG)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel -f makefile64 $(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE_DEBUG):\n"
      "\t../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) | ../makefile-macosx-intel/$(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/unix_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/unix_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_i386_linux_on_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_i386_linux_on_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for x86 Linux, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Link Options for i386 Linux                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Include i386 Linux tools for MAC OS X                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/x86linux_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_mingw_on_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_mingw_on_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                     Include MinGW tools for MAC OS X                      *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/mingw_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_msys_on_win32_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_msys_on_win32_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built with MSYS*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#              Install directory (for \"install\" goal)                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /C/WINDOWS/system32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Include MinGW tools for MSYS                        *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/msys_on_win32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_info_plist' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_info_plist (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
      "<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
      "<plist version=\"1.0\">\n"
      "<dict>\n"
      "     <key>CFBundleDevelopmentRegion</key>\n"
      "     <string>English</string>\n"
      "     <key>CFBundleExecutable</key>\n"
      "     <string>${EXECUTABLE_NAME}</string>\n"
      "     <key>CFBundleIconFile</key>\n"
      "     <string></string>\n"
      "     <key>CFBundleIdentifier</key>\n"
      "     <string>com.yourcompany." ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "     <key>CFBundleInfoDictionaryVersion</key>\n"
      "     <string>6.0</string>\n"
      "     <key>CFBundleName</key>\n"
      "     <string>${PRODUCT_NAME}</string>\n"
      "     <key>CFBundlePackageType</key>\n"
      "     <string>APPL</string>\n"
      "     <key>CFBundleSignature</key>\n"
      "     <string>\?\?\?\?</string>\n"
      "     <key>CFBundleVersion</key>\n"
      "     <string>1.0</string>\n"
      "     <key>NSMainNibFile</key>\n"
      "     <string>MainMenu</string>\n"
      "     <key>NSPrincipalClass</key>\n"
      "     <string>NSApplication</string>\n"
      "    <key>CFBundleDocumentTypes</key>\n"
      "    <array>\n"
      "        <dict>\n"
      "            <key>CFBundleTypeExtensions</key>\n"
      "            <array>\n"
      "                <string>" ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "            </array>\n"
      "            <key>CFBundleTypeName</key>\n"
      "            <string>" ;
    result << var_cas_PROJECT_NAME ;
    result << " Source</string>\n"
      "            <key>CFBundleTypeOSTypes</key>\n"
      "            <array>\n"
      "                <string>TEXT</string>\n"
      "            </array>\n"
      "            <key>CFBundleTypeRole</key>\n"
      "            <string>Editor</string>\n"
      "            <key>LSTypeIsPackage</key>\n"
      "            <false/>\n"
      "            <key>NSDocumentClass</key>\n"
      "            <string>OC_GGS_Document</string>\n"
      "        </dict>\n"
      "    </array>\n"
      "</dict>\n"
      "</plist>\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_info_plist_strings' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_info_plist_strings (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "/* Localized versions of Info.plist keys */\n"
      "CFBundleName = \"cocoa" ;
    result << var_cas_PROJECT_NAME.reader_stringByCapitalizingFirstCharacter () ;
    result << "\";\n"
      "CFBundleShortVersionString = \"1.0.0\";\n"
      "CFBundleGetInfoString = \"Cocoa " ;
    result << var_cas_PROJECT_NAME ;
    result << " version 1.0.0, Copyright __MyCompanyName__.\";\n"
      "NSHumanReadableCopyright = \"Copyright __MyCompanyName__.\";\n"
      "LSMinimumSystemVersion = \"10.3.9\";\n"
      "\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_file_list' template of 'targetGenerationFileWrapper' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_file_list (C_CompilerEx & /* inLexique */,
                                const GGS_stringset & var_cas_HAND_CODED_SOURCE_DIR_SET,
                                const GGS_stringlist & var_cas_HAND_CODED_SOURCE_FILE_LIST,
                                const GGS_stringlist & var_cas_MAKEFILE_FILE_LIST,
                                const GGS_bool& var_cas_COMPILE_FOR_GALGAS_1) {
  C_String result ;
  const bool isBuilt = var_cas_HAND_CODED_SOURCE_DIR_SET.isBuilt ()
    && var_cas_HAND_CODED_SOURCE_FILE_LIST.isBuilt ()
    && var_cas_MAKEFILE_FILE_LIST.isBuilt ()
    && var_cas_COMPILE_FOR_GALGAS_1.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Lib PM directory\n"
      "ifndef LIBPM_PATH\n"
      "  $(info *** the LIBPM_PATH environment variable is not defined)\n"
      "endif\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Project source files directories                          *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
      "SOURCES_DIR += ../galgas_sources/GALGAS_OUTPUT/include-files\n" ;
    GGS_stringset::cEnumerator enumerator_654 (var_cas_HAND_CODED_SOURCE_DIR_SET, true) ;
    while (enumerator_654.hasCurrentObject ()) {
      result << "SOURCES_DIR += " ;
      result << enumerator_654._key (HERE) ;
      result << "\n" ;
      enumerator_654.next () ;
    }
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Source files names list (without their actual path)       *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES :=\n"
      "\n"
      "#--- Files from libpm --------------------\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     This file contains a source file list that is included    *\n"
      "#     by every galgas project makefile                          *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Files from libpm --------------------\n"
      "#--- Command Line Option\n"
      "SOURCES += C_CommandLineOption.cpp\n"
      "SOURCES += C_BoolCommandLineOption.cpp\n"
      "SOURCES += C_UIntCommandLineOption.cpp\n"
      "SOURCES += C_StringCommandLineOption.cpp\n"
      "SOURCES += C_builtin_CLI_Options.cpp\n"
      "SOURCES += C_galgas_CLI_Options.cpp\n"
      "SOURCES += F_Analyze_CLI_Options.cpp\n"
      "\n"
      "#--- BDD\n"
      "SOURCES += C_Display_BDD.cpp\n"
      "SOURCES += C_BDD.cpp\n"
      "SOURCES += C_BDD-find-or-add.cpp\n"
      "SOURCES += C_BDD-single-operand-ops.cpp\n"
      "SOURCES += C_BDD-and-operation.cpp\n"
      "SOURCES += C_BDD_Set1.cpp\n"
      "SOURCES += C_BDD_Set2.cpp\n"
      "SOURCES += C_BDD_Set3.cpp\n"
      "SOURCES += C_BDD_Descriptor.cpp\n"
      "\n"
      "#--- Files\n"
      "SOURCES += C_TextFileWrite.cpp\n"
      "SOURCES += C_HTML_FileWrite.cpp\n"
      "\n"
      "#--- Streams\n"
      "SOURCES += AC_OutputStream.cpp\n"
      "SOURCES += C_ConsoleOut.cpp\n"
      "SOURCES += C_ErrorOut.cpp\n"
      "\n"
      "#--- Strings\n"
      "SOURCES += unicode_character_cpp.cpp\n"
      "SOURCES += unicode_string_routines.cpp\n"
      "SOURCES += C_String.cpp\n"
      "SOURCES += md5.cpp\n"
      "\n"
      "#--- Time\n"
      "SOURCES += C_Timer.cpp\n"
      "SOURCES += C_DateTime.cpp\n"
      "\n"
      "#--- Utilities\n"
      "SOURCES += F_main.cpp\n"
      "SOURCES += C_PrologueEpilogue.cpp\n"
      "SOURCES += C_SharedObject.cpp\n"
      "SOURCES += F_DisplayException.cpp\n"
      "SOURCES += MF_Assert.cpp\n"
      "SOURCES += F_GetPrime.cpp\n"
      "SOURCES += MF_MemoryControl.cpp\n"
      "SOURCES += cpp-allocation.cpp\n"
      "SOURCES += basic-allocation.cpp\n"
      "\n" ;
    if (var_cas_COMPILE_FOR_GALGAS_1.boolValue ()) {
      result << "#---------------------------------------------------------------*\n"
        "#    G A L G A S    1                                           *\n"
        "#---------------------------------------------------------------*\n"
        "\n"
        "SOURCES += PM_C_Object.cpp\n"
        "SOURCES += PM_C_Array.cpp\n"
        "SOURCES += PM_C_Dictionary.cpp\n"
        "SOURCES += C_CompilerEx.cpp\n"
        "SOURCES += C_LexiqueEx.cpp\n"
        "SOURCES += scanner_actionsEx.cpp\n"
        "SOURCES += galgas_introspection.cpp\n"
        "SOURCES += AC_GGS_class.cpp\n"
        "SOURCES += AC_GGS_map.cpp\n"
        "SOURCES += AC_GGS_listmap.cpp\n"
        "SOURCES += AC_GGS_list.cpp\n"
        "SOURCES += AC_GGS_sortedlist.cpp\n"
        "SOURCES += AC_GGS_domain.cpp\n"
        "SOURCES += AC_GGS_mapindex.cpp\n"
        "SOURCES += predefined_types.cpp\n"
        "SOURCES += GGS__root.cpp\n"
        "SOURCES += GGS_object.cpp\n"
        "SOURCES += GGS_type.cpp\n"
        "SOURCES += GGS_function.cpp\n"
        "SOURCES += GGS_data.cpp\n"
        "SOURCES += GGS_bool.cpp\n"
        "SOURCES += GGS_char.cpp\n"
        "SOURCES += GGS_double.cpp\n"
        "SOURCES += GGS_location.cpp\n"
        "SOURCES += GGS_string.cpp\n"
        "SOURCES += GGS_uint.cpp\n"
        "SOURCES += GGS_sint.cpp\n"
        "SOURCES += GGS_uint64.cpp\n"
        "SOURCES += GGS_sint64.cpp\n"
        "SOURCES += GGS_lbool.cpp\n"
        "SOURCES += GGS_lchar.cpp\n"
        "SOURCES += GGS_ldouble.cpp\n"
        "SOURCES += GGS_lstring.cpp\n"
        "SOURCES += GGS_luint.cpp\n"
        "SOURCES += GGS_lsint.cpp\n"
        "SOURCES += GGS_luint64.cpp\n"
        "SOURCES += GGS_lsint64.cpp\n"
        "SOURCES += GGS_stringset.cpp\n"
        "SOURCES += GGS_binaryset.cpp\n"
        "SOURCES += GGS_filewrapper.cpp\n"
        "SOURCES += GGS_application.cpp\n" ;
    }else {
    }
    result << "\n"
      "#---------------------------------------------------------------*\n"
      "#    G A L G A S    2                                           *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES += C_LocationInSource.cpp\n"
      "SOURCES += C_SourceTextInString.cpp\n"
      "SOURCES += C_galgas_type_descriptor.cpp\n"
      "SOURCES += C_galgas_function_descriptor.cpp\n"
      "SOURCES += C_galgas_io.cpp\n"
      "SOURCES += C_galgas_class_inspector.cpp\n"
      "SOURCES += cObjectArray.cpp\n"
      "SOURCES += cCollectionElement.cpp\n"
      "SOURCES += capCollectionElement.cpp\n"
      "SOURCES += capCollectionElementArray.cpp\n"
      "SOURCES += cSortedListElement.cpp\n"
      "SOURCES += capSortedListElement.cpp\n"
      "SOURCES += cGenericAbstractEnumerator.cpp\n"
      "\n"
      "SOURCES += AC_GALGAS_root.cpp\n"
      "SOURCES += AC_GALGAS_list.cpp\n"
      "SOURCES += AC_GALGAS_sortedlist.cpp\n"
      "SOURCES += AC_GALGAS_map.cpp\n"
      "SOURCES += AC_GALGAS_class.cpp\n"
      "SOURCES += acPtr_class.cpp\n"
      "SOURCES += cPtr_object.cpp\n"
      "\n"
      "SOURCES += GALGAS_application.cpp\n"
      "SOURCES += GALGAS_binaryset.cpp\n"
      "SOURCES += GALGAS_bool.cpp\n"
      "SOURCES += GALGAS_char.cpp\n"
      "SOURCES += GALGAS_data.cpp\n"
      "SOURCES += GALGAS_double.cpp\n"
      "SOURCES += GALGAS_filewrapper.cpp\n"
      "SOURCES += GALGAS_function.cpp\n"
      "SOURCES += GALGAS_location.cpp\n"
      "SOURCES += GALGAS_sint.cpp\n"
      "SOURCES += GALGAS_sint_36__34_.cpp\n"
      "SOURCES += GALGAS_string.cpp\n"
      "SOURCES += GALGAS_stringset.cpp\n"
      "SOURCES += GALGAS_type.cpp\n"
      "SOURCES += GALGAS_object.cpp\n"
      "SOURCES += GALGAS_uint.cpp\n"
      "SOURCES += GALGAS_uint_36__34_.cpp\n"
      "SOURCES += predefined-types.cpp\n"
      "SOURCES += scanner_actions.cpp\n"
      "SOURCES += C_Compiler.cpp\n"
      "SOURCES += C_Lexique.cpp\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Hand-coded files ---------------------\n" ;
    GGS_stringlist::cEnumerator enumerator_5768 (var_cas_HAND_CODED_SOURCE_FILE_LIST, true) ;
    const GGS_stringlist::cElement * operand_5768 = NULL ;
    while (((operand_5768 = enumerator_5768.nextObject ()))) {
      macroValidPointer (operand_5768) ;
      result << "SOURCES += " ;
      result << operand_5768->mValue ;
      result << "\n" ;
    }
    result << "\n"
      "#--- Files generated by GALGAS ------------\n" ;
    GGS_stringlist::cEnumerator enumerator_5885 (var_cas_MAKEFILE_FILE_LIST, true) ;
    const GGS_stringlist::cElement * operand_5885 = NULL ;
    while (((operand_5885 = enumerator_5885.nextObject ()))) {
      macroValidPointer (operand_5885) ;
      result << "SOURCES += " ;
      result << operand_5885->mValue ;
      result << "\n" ;
    }
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateMsysOnWin32Target"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMsysOnWin32Target (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMsysOnWin32Target at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-msys-on-win32")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
  }
  GGS_bool automatic_var_2661_0 ;
  const GGS_string temp_2638 = GGS_string (gWrapperFileContent_20_targetGenerationFileWrapper) ;
  if (temp_2638.isBuilt ()) {
    temp_2638 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.bat")), automatic_var_2661_0 COMMA_SOURCE_FILE_AT_LINE (57)) ;
  }
  GGS_bool automatic_var_2799_0 ;
  const GGS_string temp_2776 = GGS_string (gWrapperFileContent_21_targetGenerationFileWrapper) ;
  if (temp_2776.isBuilt ()) {
    temp_2776 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.bat")), automatic_var_2799_0 COMMA_SOURCE_FILE_AT_LINE (58)) ;
  }
  GGS_bool automatic_var_2941_0 ;
  const GGS_string temp_2916 = GGS_string (gWrapperFileContent_22_targetGenerationFileWrapper) ;
  if (temp_2916.isBuilt ()) {
    temp_2916 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/install.bat")), automatic_var_2941_0 COMMA_SOURCE_FILE_AT_LINE (59)) ;
  }
  GGS_bool automatic_var_3090_0 ;
  const GGS_string temp_3068 = template_filewrapper_targetGenerationFileWrapper_makefile_msys_on_win32_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_3068.isBuilt ()) {
    temp_3068 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_3090_0 COMMA_SOURCE_FILE_AT_LINE (60)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMsysOnWin32Target\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generateMinGWOnMacOSXTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMinGWOnMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMinGWOnMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-mingw-on-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (70)) ;
  }
  GGS_bool automatic_var_3535_0 ;
  const GGS_string temp_3508 = GGS_string (gWrapperFileContent_18_targetGenerationFileWrapper) ;
  if (temp_3508.isBuilt ()) {
    temp_3508 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_3535_0 COMMA_SOURCE_FILE_AT_LINE (71)) ;
  }
  GGS_bool automatic_var_3693_0 ;
  const GGS_string temp_3666 = GGS_string (gWrapperFileContent_19_targetGenerationFileWrapper) ;
  if (temp_3666.isBuilt ()) {
    temp_3666 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_3693_0 COMMA_SOURCE_FILE_AT_LINE (72)) ;
  }
  GGS_bool automatic_var_3844_0 ;
  const GGS_string temp_3822 = template_filewrapper_targetGenerationFileWrapper_makefile_mingw_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_3822.isBuilt ()) {
    temp_3822 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_3844_0 COMMA_SOURCE_FILE_AT_LINE (73)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMinGWOnMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generateMakefileMacOSXTarget"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (83)) ;
  }
  GGS_bool automatic_var_4272_0 ;
  const GGS_string temp_4245 = GGS_string (gWrapperFileContent_2_targetGenerationFileWrapper) ;
  if (temp_4245.isBuilt ()) {
    temp_4245 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_4272_0 COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  GGS_bool automatic_var_4421_0 ;
  const GGS_string temp_4394 = GGS_string (gWrapperFileContent_4_targetGenerationFileWrapper) ;
  if (temp_4394.isBuilt ()) {
    temp_4394 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_4421_0 COMMA_SOURCE_FILE_AT_LINE (85)) ;
  }
  GGS_bool automatic_var_4574_0 ;
  const GGS_string temp_4545 = GGS_string (gWrapperFileContent_3_targetGenerationFileWrapper) ;
  if (temp_4545.isBuilt ()) {
    temp_4545 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_4574_0 COMMA_SOURCE_FILE_AT_LINE (86)) ;
  }
  GGS_bool automatic_var_4727_0 ;
  const GGS_string temp_4698 = GGS_string (gWrapperFileContent_5_targetGenerationFileWrapper) ;
  if (temp_4698.isBuilt ()) {
    temp_4698 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_4727_0 COMMA_SOURCE_FILE_AT_LINE (87)) ;
  }
  GGS_bool automatic_var_4869_0 ;
  const GGS_string temp_4847 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_4847.isBuilt ()) {
    temp_4847 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_4869_0 COMMA_SOURCE_FILE_AT_LINE (88)) ;
  }
  GGS_bool automatic_var_5015_0 ;
  const GGS_string temp_4991 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_4991.isBuilt ()) {
    temp_4991 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_5015_0 COMMA_SOURCE_FILE_AT_LINE (89)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "generateMakefileIntelMacOSXTarget"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileIntelMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileIntelMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-intel")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (99)) ;
  }
  GGS_bool automatic_var_5460_0 ;
  const GGS_string temp_5433 = GGS_string (gWrapperFileContent_6_targetGenerationFileWrapper) ;
  if (temp_5433.isBuilt ()) {
    temp_5433 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_5460_0 COMMA_SOURCE_FILE_AT_LINE (100)) ;
  }
  GGS_bool automatic_var_5615_0 ;
  const GGS_string temp_5588 = GGS_string (gWrapperFileContent_8_targetGenerationFileWrapper) ;
  if (temp_5588.isBuilt ()) {
    temp_5588 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_5615_0 COMMA_SOURCE_FILE_AT_LINE (101)) ;
  }
  GGS_bool automatic_var_5774_0 ;
  const GGS_string temp_5745 = GGS_string (gWrapperFileContent_7_targetGenerationFileWrapper) ;
  if (temp_5745.isBuilt ()) {
    temp_5745 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_5774_0 COMMA_SOURCE_FILE_AT_LINE (102)) ;
  }
  GGS_bool automatic_var_5933_0 ;
  const GGS_string temp_5904 = GGS_string (gWrapperFileContent_9_targetGenerationFileWrapper) ;
  if (temp_5904.isBuilt ()) {
    temp_5904 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_5933_0 COMMA_SOURCE_FILE_AT_LINE (103)) ;
  }
  GGS_bool automatic_var_6081_0 ;
  const GGS_string temp_6059 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_6059.isBuilt ()) {
    temp_6059 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_6081_0 COMMA_SOURCE_FILE_AT_LINE (104)) ;
  }
  GGS_bool automatic_var_6233_0 ;
  const GGS_string temp_6209 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_6209.isBuilt ()) {
    temp_6209 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_6233_0 COMMA_SOURCE_FILE_AT_LINE (105)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileIntelMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "generateMakefilePPCMacOSXTarget"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefilePPCMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefilePPCMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-ppc")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (115)) ;
  }
  GGS_bool automatic_var_6672_0 ;
  const GGS_string temp_6645 = GGS_string (gWrapperFileContent_10_targetGenerationFileWrapper) ;
  if (temp_6645.isBuilt ()) {
    temp_6645 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_6672_0 COMMA_SOURCE_FILE_AT_LINE (116)) ;
  }
  GGS_bool automatic_var_6825_0 ;
  const GGS_string temp_6798 = GGS_string (gWrapperFileContent_12_targetGenerationFileWrapper) ;
  if (temp_6798.isBuilt ()) {
    temp_6798 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_6825_0 COMMA_SOURCE_FILE_AT_LINE (117)) ;
  }
  GGS_bool automatic_var_6982_0 ;
  const GGS_string temp_6953 = GGS_string (gWrapperFileContent_11_targetGenerationFileWrapper) ;
  if (temp_6953.isBuilt ()) {
    temp_6953 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_6982_0 COMMA_SOURCE_FILE_AT_LINE (118)) ;
  }
  GGS_bool automatic_var_7139_0 ;
  const GGS_string temp_7110 = GGS_string (gWrapperFileContent_13_targetGenerationFileWrapper) ;
  if (temp_7110.isBuilt ()) {
    temp_7110 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_7139_0 COMMA_SOURCE_FILE_AT_LINE (119)) ;
  }
  GGS_bool automatic_var_7285_0 ;
  const GGS_string temp_7263 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_7263.isBuilt ()) {
    temp_7263 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_7285_0 COMMA_SOURCE_FILE_AT_LINE (120)) ;
  }
  GGS_bool automatic_var_7435_0 ;
  const GGS_string temp_7411 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_7411.isBuilt ()) {
    temp_7411 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_7435_0 COMMA_SOURCE_FILE_AT_LINE (121)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefilePPCMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "generateMakefileUniversalMacOSXTarget"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileUniversalMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileUniversalMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-universal")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (131)) ;
  }
  GGS_bool automatic_var_7892_0 ;
  const GGS_string temp_7865 = GGS_string (gWrapperFileContent_14_targetGenerationFileWrapper) ;
  if (temp_7865.isBuilt ()) {
    temp_7865 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_7892_0 COMMA_SOURCE_FILE_AT_LINE (132)) ;
  }
  GGS_bool automatic_var_8051_0 ;
  const GGS_string temp_8024 = GGS_string (gWrapperFileContent_16_targetGenerationFileWrapper) ;
  if (temp_8024.isBuilt ()) {
    temp_8024 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_8051_0 COMMA_SOURCE_FILE_AT_LINE (133)) ;
  }
  GGS_bool automatic_var_8214_0 ;
  const GGS_string temp_8185 = GGS_string (gWrapperFileContent_15_targetGenerationFileWrapper) ;
  if (temp_8185.isBuilt ()) {
    temp_8185 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_8214_0 COMMA_SOURCE_FILE_AT_LINE (134)) ;
  }
  GGS_bool automatic_var_8377_0 ;
  const GGS_string temp_8348 = GGS_string (gWrapperFileContent_17_targetGenerationFileWrapper) ;
  if (temp_8348.isBuilt ()) {
    temp_8348 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_8377_0 COMMA_SOURCE_FILE_AT_LINE (135)) ;
  }
  GGS_bool automatic_var_8529_0 ;
  const GGS_string temp_8507 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_8507.isBuilt ()) {
    temp_8507 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_8529_0 COMMA_SOURCE_FILE_AT_LINE (136)) ;
  }
  GGS_bool automatic_var_8685_0 ;
  const GGS_string temp_8661 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_8661.isBuilt ()) {
    temp_8661 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_8685_0 COMMA_SOURCE_FILE_AT_LINE (137)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileUniversalMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateMakefileUnixTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileUnixTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileUnixTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-unix")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (147)) ;
  }
  GGS_bool automatic_var_9107_0 ;
  const GGS_string temp_9080 = GGS_string (gWrapperFileContent_23_targetGenerationFileWrapper) ;
  if (temp_9080.isBuilt ()) {
    temp_9080 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_9107_0 COMMA_SOURCE_FILE_AT_LINE (148)) ;
  }
  GGS_bool automatic_var_9254_0 ;
  const GGS_string temp_9227 = GGS_string (gWrapperFileContent_25_targetGenerationFileWrapper) ;
  if (temp_9227.isBuilt ()) {
    temp_9227 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_9254_0 COMMA_SOURCE_FILE_AT_LINE (149)) ;
  }
  GGS_bool automatic_var_9405_0 ;
  const GGS_string temp_9376 = GGS_string (gWrapperFileContent_24_targetGenerationFileWrapper) ;
  if (temp_9376.isBuilt ()) {
    temp_9376 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_9405_0 COMMA_SOURCE_FILE_AT_LINE (150)) ;
  }
  GGS_bool automatic_var_9556_0 ;
  const GGS_string temp_9527 = GGS_string (gWrapperFileContent_26_targetGenerationFileWrapper) ;
  if (temp_9527.isBuilt ()) {
    temp_9527 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_9556_0 COMMA_SOURCE_FILE_AT_LINE (151)) ;
  }
  GGS_bool automatic_var_9696_0 ;
  const GGS_string temp_9674 = template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_9674.isBuilt ()) {
    temp_9674 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_9696_0 COMMA_SOURCE_FILE_AT_LINE (152)) ;
  }
  GGS_bool automatic_var_9840_0 ;
  const GGS_string temp_9816 = template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_9816.isBuilt ()) {
    temp_9816 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_9840_0 COMMA_SOURCE_FILE_AT_LINE (153)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileUnixTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "generateI386LinuxOnMacOSXTarget"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateI386LinuxOnMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateI386LinuxOnMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-i386-linux-on-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (163)) ;
  }
  GGS_bool automatic_var_10299_0 ;
  const GGS_string temp_10272 = GGS_string (gWrapperFileContent_0_targetGenerationFileWrapper) ;
  if (temp_10272.isBuilt ()) {
    temp_10272 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_10299_0 COMMA_SOURCE_FILE_AT_LINE (164)) ;
  }
  GGS_bool automatic_var_10462_0 ;
  const GGS_string temp_10435 = GGS_string (gWrapperFileContent_1_targetGenerationFileWrapper) ;
  if (temp_10435.isBuilt ()) {
    temp_10435 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_10462_0 COMMA_SOURCE_FILE_AT_LINE (165)) ;
  }
  GGS_bool automatic_var_10618_0 ;
  const GGS_string temp_10596 = template_filewrapper_targetGenerationFileWrapper_makefile_i386_linux_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_10596.isBuilt ()) {
    temp_10596 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_10618_0 COMMA_SOURCE_FILE_AT_LINE (166)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateI386LinuxOnMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "updateTargets"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTargets (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inProjectSourceFilePath,
                                const GGS_lstring   var_cas_inProjectName,
                                const GGS_string  var_cas_inTargetName,
                                const GGS_lstringlist   var_cas_inTargetFeatureList,
                                const GGS_projectSourceList   var_cas_inProjectSourceList,
                                const GGS_bool  var_cas_inGenerateForGalgas1
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTargets at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_projectDirectory = var_cas_inProjectSourceFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ().reader_stringByDeletingLastPathComponent () ;
  GGS_stringset  var_cas_externSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_guiSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_scannerSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_optionSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_semanticsSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_syntaxSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_grammarSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_programSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_externSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_guiSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_scannerSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_optionSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_semanticsSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_syntaxSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_grammarSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_programSourceSet_app = GGS_stringset ::constructor_emptySet () ;
  GGS_stringset  var_cas_sourceFileSet = GGS_stringset ::constructor_emptySet () ;
  GGS_stringlist  var_cas_generatedFileListForMakefile = GGS_stringlist ::constructor_emptyList () ;
  GGS_stringlist  var_cas_handCodedSourceList = GGS_stringlist ::constructor_emptyList () ;
  GGS_stringset  var_cas_handCodedSourceDirectorySet = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_projectSourceList::cEnumerator enumerator_12140 (var_cas_inProjectSourceList, true) ;
    const GGS_projectSourceList::cElement * operand_12140 = NULL ;
    while (((operand_12140 = enumerator_12140.nextObject ()))) {
      macroValidPointer (operand_12140) ;
      const GGS_string var_cas_baseName = operand_12140->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (204)).reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
      const GGS_string var_cas_cppFile = (var_cas_baseName).operator_concat (GGS_string (".cpp")) ;
      const GGS_bool cond_12484 = var_cas_sourceFileSet.reader_hasKey (var_cas_baseName) ;
      if (cond_12484.isBuiltAndTrue ()) {
        operand_12140->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("there is already a file with '")).operator_concat (var_cas_baseName)).operator_concat (GGS_string ("' as base name in the project")) COMMA_SOURCE_FILE_AT_LINE (209)) ;
      }
      var_cas_sourceFileSet.addAssign_operation (var_cas_baseName) ;
      switch (operand_12140->mSourceKind.enumValue ()) {
      case GGS_sourceFileKind::enum_externSourceFile:
        {
        const GGS_string var_cas_extension = operand_12140->mFilePath.ggs_string ().reader_pathExtension () ;
        const GGS_bool cond_12972 = (((var_cas_extension).operator_isEqual (GGS_string ("cpp"))).operator_or ((var_cas_extension).operator_isEqual (GGS_string ("mm")))).operator_or ((var_cas_extension).operator_isEqual (GGS_string ("framework"))) ;
        if (cond_12972.isBuiltAndTrue ()) {
          var_cas_externSourceSet_tool.addAssign_operation (operand_12140->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (216))) ;
          var_cas_handCodedSourceList.addAssign_operation (operand_12140->mFilePath.ggs_string ().reader_lastPathComponent ()) ;
          var_cas_handCodedSourceDirectorySet.addAssign_operation ((GGS_string ("../hand_coded_sources/")).operator_concat (operand_12140->mFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ())) ;
        }else if (cond_12972.isBuiltAndFalse ()) {
          const GGS_bool cond_13173 = (var_cas_extension).operator_isEqual (GGS_string ("m")) ;
          if (cond_13173.isBuiltAndTrue ()) {
            var_cas_externSourceSet_app.addAssign_operation (operand_12140->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (220))) ;
            var_cas_handCodedSourceDirectorySet.addAssign_operation ((GGS_string ("../hand_coded_sources/")).operator_concat (operand_12140->mFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ())) ;
          }else if (cond_13173.isBuiltAndFalse ()) {
            operand_12140->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled extension") COMMA_SOURCE_FILE_AT_LINE (224)) ;
          }
        }
        }
        break ;
      case GGS_sourceFileKind::enum_lexiqueSourceFile:
        {
        var_cas_generatedFileListForMakefile.addAssign_operation (var_cas_cppFile) ;
        var_cas_scannerSourceSet_tool.addAssign_operation (var_cas_baseName) ;
        }
        break ;
      case GGS_sourceFileKind::enum_syntaxSourceFile:
        {
        var_cas_generatedFileListForMakefile.addAssign_operation (var_cas_cppFile) ;
        var_cas_syntaxSourceSet_tool.addAssign_operation (var_cas_baseName) ;
        }
        break ;
      case GGS_sourceFileKind::enum_semanticsSourceFile:
        {
        var_cas_generatedFileListForMakefile.addAssign_operation (var_cas_cppFile) ;
        var_cas_semanticsSourceSet_tool.addAssign_operation (var_cas_baseName) ;
        }
        break ;
      case GGS_sourceFileKind::enum_grammarSourceFile:
        {
        var_cas_generatedFileListForMakefile.addAssign_operation (var_cas_cppFile) ;
        var_cas_grammarSourceSet_tool.addAssign_operation (var_cas_baseName) ;
        }
        break ;
      case GGS_sourceFileKind::enum_programSourceFile:
        {
        var_cas_generatedFileListForMakefile.addAssign_operation (var_cas_cppFile) ;
        var_cas_programSourceSet_tool.addAssign_operation (var_cas_baseName) ;
        }
        break ;
      case GGS_sourceFileKind::enum_optionSourceFile:
        {
        var_cas_generatedFileListForMakefile.addAssign_operation (var_cas_cppFile) ;
        var_cas_optionSourceSet_tool.addAssign_operation (var_cas_baseName) ;
        }
        break ;
      case GGS_sourceFileKind::enum_guiSourceFile:
        {
        var_cas_guiSourceSet_app.addAssign_operation (var_cas_baseName) ;
        }
        break ;
      case GGS_sourceFileKind::kNotBuilt:
        break ;
      }
    }
  }
  inLexique.printMessage (GGS_string ("*** Updating targets\n") COMMA_SOURCE_FILE_AT_LINE (255)) ;
  GGS_stringset  var_cas_availableGenerationFeatures = GGS_stringset ::constructor_emptySet () ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx-intel")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx-ppc")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx-universal")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-unix")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-i386-linux-on-macosx")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-mingw-on-macosx")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-msys-on-win32")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("xcode-project")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("xcode-arch:i386")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("xcode-arch:x86_64")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("xcode-arch:ppc64")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("xcode-arch:ppc")) ;
  GGS_stringset  var_cas_generationFeatures = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_lstringlist::cEnumerator enumerator_15292 (var_cas_inTargetFeatureList, true) ;
    const GGS_lstringlist::cElement * operand_15292 = NULL ;
    while (((operand_15292 = enumerator_15292.nextObject ()))) {
      macroValidPointer (operand_15292) ;
      const GGS_bool cond_15552 = var_cas_availableGenerationFeatures.reader_hasKey (operand_15292->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (272))) ;
      if (cond_15552.isBuiltAndTrue ()) {
        const GGS_bool cond_15491 = var_cas_generationFeatures.reader_hasKey (operand_15292->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273))) ;
        if (cond_15491.isBuiltAndTrue ()) {
          operand_15292->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("duplicate '")).operator_concat (operand_15292->mValue)).operator_concat (GGS_string ("' feature")) COMMA_SOURCE_FILE_AT_LINE (275)) ;
        }
        var_cas_generationFeatures.addAssign_operation (operand_15292->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (276))) ;
      }else if (cond_15552.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_stringset::cEnumerator enumerator_15618 (var_cas_availableGenerationFeatures, true) ;
          while (enumerator_15618.hasCurrentObject ()) {
            var_cas_s.appendCString ("\n"
              "  - '") ;
            var_cas_s.dotAssign_operation (enumerator_15618._key (HERE)) ;
            var_cas_s.appendCString ("'") ;
            enumerator_15618.next () ;
          }
        }
        operand_15292->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("unknown '")).operator_concat (operand_15292->mValue)).operator_concat (GGS_string ("' feature; avalaible features are:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (283)) ;
      }
    }
  }
  const GGS_bool cond_16153 = (var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-universal"))).operator_and ((var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-ppc"))).operator_not ()) ;
  if (cond_16153.isBuiltAndTrue ()) {
    var_cas_inProjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("'feature \"makefile-macosx-ppc\" ;' implicitly added, due to 'feature makefile-macosx-universal'") COMMA_SOURCE_FILE_AT_LINE (287)) ;
    var_cas_generationFeatures.addAssign_operation (GGS_string ("makefile-macosx-ppc")) ;
  }
  const GGS_bool cond_16474 = (var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-universal"))).operator_and ((var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-intel"))).operator_not ()) ;
  if (cond_16474.isBuiltAndTrue ()) {
    var_cas_inProjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("'feature \"makefile-macosx-intel\" ;' implicitly added, due to 'feature makefile-macosx-universal'") COMMA_SOURCE_FILE_AT_LINE (291)) ;
    var_cas_generationFeatures.addAssign_operation (GGS_string ("makefile-macosx-intel")) ;
  }
  GGS_stringlist  var_cas_architectureList = GGS_stringlist ::constructor_emptyList () ;
  const GGS_bool cond_16660 = var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-arch:i386")) ;
  if (cond_16660.isBuiltAndTrue ()) {
    var_cas_architectureList.addAssign_operation (GGS_string ("i386")) ;
  }
  const GGS_bool cond_16767 = var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-arch:x86_64")) ;
  if (cond_16767.isBuiltAndTrue ()) {
    var_cas_architectureList.addAssign_operation (GGS_string ("x86_64")) ;
  }
  const GGS_bool cond_16872 = var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-arch:ppc64")) ;
  if (cond_16872.isBuiltAndTrue ()) {
    var_cas_architectureList.addAssign_operation (GGS_string ("ppc64")) ;
  }
  const GGS_bool cond_16982 = var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-arch:ppc")) ;
  if (cond_16982.isBuiltAndTrue ()) {
    var_cas_architectureList.addAssign_operation (GGS_string ("ppc7400")) ;
  }
  const GGS_bool cond_17222 = (var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-project"))).operator_and ((var_cas_architectureList.reader_length ()).operator_isEqual (GGS_uint (0U))) ;
  if (cond_17222.isBuiltAndTrue ()) {
    var_cas_inProjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("'feature \"xcode-arch:i386\" ;' implicitly added, due to 'xcode-project'") COMMA_SOURCE_FILE_AT_LINE (309)) ;
    var_cas_architectureList.addAssign_operation (GGS_string ("i386")) ;
  }
  const GGS_bool cond_17421 = ((var_cas_architectureList.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and ((var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-project"))).operator_not ()) ;
  if (cond_17421.isBuiltAndTrue ()) {
    var_cas_inProjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'a 'xcode-arch:...' feature requires the 'xcode-project' feature") COMMA_SOURCE_FILE_AT_LINE (314)) ;
  }
  const GGS_bool cond_17586 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-ppc")) ;
  if (cond_17586.isBuiltAndTrue ()) {
    ::routine_generateMakefilePPCMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (317)) ;
  }
  const GGS_bool cond_17732 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-intel")) ;
  if (cond_17732.isBuiltAndTrue ()) {
    ::routine_generateMakefileIntelMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (320)) ;
  }
  const GGS_bool cond_17886 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-universal")) ;
  if (cond_17886.isBuiltAndTrue ()) {
    ::routine_generateMakefileUniversalMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (323)) ;
  }
  const GGS_bool cond_18021 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx")) ;
  if (cond_18021.isBuiltAndTrue ()) {
    ::routine_generateMakefileMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (326)) ;
  }
  const GGS_bool cond_18152 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-unix")) ;
  if (cond_18152.isBuiltAndTrue ()) {
    ::routine_generateMakefileUnixTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (329)) ;
  }
  const GGS_bool cond_18304 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-i386-linux-on-macosx")) ;
  if (cond_18304.isBuiltAndTrue ()) {
    ::routine_generateI386LinuxOnMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (332)) ;
  }
  const GGS_bool cond_18447 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-mingw-on-macosx")) ;
  if (cond_18447.isBuiltAndTrue ()) {
    ::routine_generateMinGWOnMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (335)) ;
  }
  const GGS_bool cond_18586 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-msys-on-win32")) ;
  if (cond_18586.isBuiltAndTrue ()) {
    ::routine_generateMsysOnWin32Target (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (338)) ;
  }
  const GGS_string var_cas_newFileListContents = template_filewrapper_targetGenerationFileWrapper_makefile_file_list (inLexique, var_cas_handCodedSourceDirectorySet, var_cas_handCodedSourceList, var_cas_generatedFileListForMakefile, var_cas_inGenerateForGalgas1) ;
  GGS_string var_cas_fileListPath = (var_cas_inProjectSourceFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/GALGAS_OUTPUT/file_list.mke")) ;
  GGS_bool automatic_var_19040_0 ;
  if (var_cas_newFileListContents.isBuilt ()) {
    var_cas_newFileListContents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_fileListPath, automatic_var_19040_0 COMMA_SOURCE_FILE_AT_LINE (348)) ;
  }
  const GGS_bool cond_21881 = var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-project")) ;
  if (cond_21881.isBuiltAndTrue ()) {
    const GGS_string var_cas_dir = (var_cas_projectDirectory).operator_concat (GGS_string ("/xcode-project")) ;
    if (var_cas_dir.isBuilt ()) {
      var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (352)) ;
    }
    const GGS_string var_cas_icon_help_file_path = (var_cas_dir).operator_concat (GGS_string ("/adding-icons-to-your-application.rtf")) ;
    GGS_bool automatic_var_19477_0 ;
    const GGS_string temp_19452 = GGS_string (gWrapperFileContent_27_targetGenerationFileWrapper) ;
    if (temp_19452.isBuilt ()) {
      temp_19452 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_icon_help_file_path, automatic_var_19477_0 COMMA_SOURCE_FILE_AT_LINE (355)) ;
    }
    const GGS_bool cond_19652 = ((var_cas_dir).operator_concat (GGS_string ("/Info.plist")).reader_fileExists ()).operator_not () ;
    if (cond_19652.isBuiltAndTrue ()) {
      const GGS_string temp_19621 = template_filewrapper_targetGenerationFileWrapper_makefile_info_plist (inLexique, var_cas_inTargetName) ;
      if (temp_19621.isBuilt ()) {
        temp_19621 (HERE)->method_writeToFile (inLexique, (var_cas_dir).operator_concat (GGS_string ("/Info.plist")) COMMA_SOURCE_FILE_AT_LINE (358)) ;
      }
    }
    const GGS_string temp_19700 = (var_cas_dir).operator_concat (GGS_string ("/English.lproj")) ;
    if (temp_19700.isBuilt ()) {
      temp_19700 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (361)) ;
    }
    const GGS_string var_cas_InfoPlist_strings_path = (var_cas_dir).operator_concat (GGS_string ("/English.lproj/InfoPlist.strings")) ;
    GGS_bool automatic_var_19939_0 ;
    const GGS_string temp_19911 = template_filewrapper_targetGenerationFileWrapper_makefile_info_plist_strings (inLexique, var_cas_inTargetName) ;
    if (temp_19911.isBuilt ()) {
      temp_19911 (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_InfoPlist_strings_path, automatic_var_19939_0 COMMA_SOURCE_FILE_AT_LINE (363)) ;
    }
    const GGS_string var_cas_Credits_rtf_path = (var_cas_dir).operator_concat (GGS_string ("/English.lproj/Credits.rtf")) ;
    const GGS_bool cond_20193 = (var_cas_Credits_rtf_path.reader_fileExists ()).operator_not () ;
    if (cond_20193.isBuiltAndTrue ()) {
      const GGS_string temp_20164 = GGS_string (gWrapperFileContent_28_targetGenerationFileWrapper) ;
      if (temp_20164.isBuilt ()) {
        temp_20164 (HERE)->method_writeToFile (inLexique, var_cas_Credits_rtf_path COMMA_SOURCE_FILE_AT_LINE (366)) ;
      }
    }
    const GGS_string var_cas_libpmPosixPath = GGS_string::constructor_stringWithEnvironmentVariable (inLexique, GGS_string ("LIBPM_PATH") COMMA_SOURCE_FILE_AT_LINE (369)).reader_unixPathWithNativePath () ;
    const GGS_string var_cas_symbLinkPath = (var_cas_dir).operator_concat (GGS_string ("/libpm")) ;
    const GGS_bool cond_20512 = (var_cas_symbLinkPath.reader_isSymbolicLink ()).operator_not () ;
    if (cond_20512.isBuiltAndTrue ()) {
      if (var_cas_symbLinkPath.isBuilt ()) {
        var_cas_symbLinkPath (HERE)->method_makeSymbolicLinkWithPath (inLexique, var_cas_libpmPosixPath COMMA_SOURCE_FILE_AT_LINE (372)) ;
      }
    }else if (cond_20512.isBuiltAndFalse ()) {
      const GGS_bool cond_20705 = (GGS_string::constructor_stringWithSymbolicLinkContents (inLexique, var_cas_symbLinkPath COMMA_SOURCE_FILE_AT_LINE (373))).operator_isNotEqual (var_cas_libpmPosixPath) ;
      if (cond_20705.isBuiltAndTrue ()) {
        GGS_string::class_method_deleteFile (inLexique, var_cas_symbLinkPath COMMA_SOURCE_FILE_AT_LINE (374)) ;
        if (var_cas_symbLinkPath.isBuilt ()) {
          var_cas_symbLinkPath (HERE)->method_makeSymbolicLinkWithPath (inLexique, var_cas_libpmPosixPath COMMA_SOURCE_FILE_AT_LINE (375)) ;
        }
      }
    }
    const GGS_stringlist  var_cas_iconFiles = var_cas_dir.reader_regularFilesWithExtensions (GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("icns"))) ;
    const GGS_string var_cas_xcodeProjectPath = (((var_cas_dir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_inTargetName)).operator_concat (GGS_string (".xcodeproj")) ;
    const GGS_string var_cas_intermediateFilePath = (var_cas_inProjectSourceFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/GALGAS_OUTPUT/file_list_for_xcode_project.txt")) ;
    if (var_cas_xcodeProjectPath.isBuilt ()) {
      var_cas_xcodeProjectPath (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (383)) ;
    }
    ::routine_generateXcodeProject (inLexique,  var_cas_externSourceSet_tool,  var_cas_guiSourceSet_tool,  var_cas_scannerSourceSet_tool,  var_cas_optionSourceSet_tool,  var_cas_semanticsSourceSet_tool,  var_cas_syntaxSourceSet_tool,  var_cas_grammarSourceSet_tool,  var_cas_programSourceSet_tool,  var_cas_externSourceSet_app,  var_cas_guiSourceSet_app,  var_cas_scannerSourceSet_app,  var_cas_optionSourceSet_app,  var_cas_semanticsSourceSet_app,  var_cas_syntaxSourceSet_app,  var_cas_grammarSourceSet_app,  var_cas_programSourceSet_app,  var_cas_inTargetName,  var_cas_xcodeProjectPath,  var_cas_iconFiles,  var_cas_intermediateFilePath,  var_cas_architectureList,  var_cas_inGenerateForGalgas1 COMMA_SOURCE_FILE_AT_LINE (385)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTargets\n") ;
  #endif
}

//---------------------------------------------------------------------------*

