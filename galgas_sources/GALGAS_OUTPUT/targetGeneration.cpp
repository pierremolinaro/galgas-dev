//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'targetGeneration.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 31th, 2010, at 18h59'53"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "targetGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "targetGeneration.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'targetGenerationFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File 'makefile-i386-linux-on-macosx/build.command'

const char * gWrapperFileContent_0_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n";

static const cRegularFileWrapperEx gWrapperFile_0_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_0_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-i386-linux-on-macosx/clean.command'

const char * gWrapperFileContent_1_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_1_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_1_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-i386-linux-on-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_1 [3] = {
  & gWrapperFile_0_targetGenerationFileWrapper,
  & gWrapperFile_1_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-i386-linux-on-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_1 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-i386-linux-on-macosx'

const cDirectoryWrapperEx gWrapperDirectory_1_targetGenerationFileWrapper (
  "makefile-i386-linux-on-macosx",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_1,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_1
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/build.command'

const char * gWrapperFileContent_2_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_2_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_2_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/build64.command'

const char * gWrapperFileContent_3_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_3_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_3_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/clean.command'

const char * gWrapperFileContent_4_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_4_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_4_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/clean64.command'

const char * gWrapperFileContent_5_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_5_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_5_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_2 [5] = {
  & gWrapperFile_2_targetGenerationFileWrapper,
  & gWrapperFile_3_targetGenerationFileWrapper,
  & gWrapperFile_4_targetGenerationFileWrapper,
  & gWrapperFile_5_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_2 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx'

const cDirectoryWrapperEx gWrapperDirectory_2_targetGenerationFileWrapper (
  "makefile-macosx",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_2,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_2
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/build.command'

const char * gWrapperFileContent_6_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_6_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_6_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/build64.command'

const char * gWrapperFileContent_7_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_7_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_7_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/clean.command'

const char * gWrapperFileContent_8_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_8_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_8_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/clean64.command'

const char * gWrapperFileContent_9_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_9_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_9_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-intel' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_3 [5] = {
  & gWrapperFile_6_targetGenerationFileWrapper,
  & gWrapperFile_7_targetGenerationFileWrapper,
  & gWrapperFile_8_targetGenerationFileWrapper,
  & gWrapperFile_9_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-intel' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_3 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-intel'

const cDirectoryWrapperEx gWrapperDirectory_3_targetGenerationFileWrapper (
  "makefile-macosx-intel",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_3,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_3
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/build.command'

const char * gWrapperFileContent_10_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_10_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_10_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/build64.command'

const char * gWrapperFileContent_11_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_11_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_11_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/clean.command'

const char * gWrapperFileContent_12_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_12_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_12_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/clean64.command'

const char * gWrapperFileContent_13_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_13_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_13_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-ppc' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_4 [5] = {
  & gWrapperFile_10_targetGenerationFileWrapper,
  & gWrapperFile_11_targetGenerationFileWrapper,
  & gWrapperFile_12_targetGenerationFileWrapper,
  & gWrapperFile_13_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-ppc' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_4 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-ppc'

const cDirectoryWrapperEx gWrapperDirectory_4_targetGenerationFileWrapper (
  "makefile-macosx-ppc",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_4,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_4
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/build.command'

const char * gWrapperFileContent_14_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_14_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_14_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/build64.command'

const char * gWrapperFileContent_15_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_15_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_15_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/clean.command'

const char * gWrapperFileContent_16_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_16_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_16_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/clean64.command'

const char * gWrapperFileContent_17_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_17_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_17_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-universal' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_5 [5] = {
  & gWrapperFile_14_targetGenerationFileWrapper,
  & gWrapperFile_15_targetGenerationFileWrapper,
  & gWrapperFile_16_targetGenerationFileWrapper,
  & gWrapperFile_17_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-universal' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_5 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-universal'

const cDirectoryWrapperEx gWrapperDirectory_5_targetGenerationFileWrapper (
  "makefile-macosx-universal",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_5,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_5
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-mingw-on-macosx/build.command'

const char * gWrapperFileContent_18_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_18_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_18_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-mingw-on-macosx/clean.command'

const char * gWrapperFileContent_19_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_19_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_19_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-mingw-on-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_6 [3] = {
  & gWrapperFile_18_targetGenerationFileWrapper,
  & gWrapperFile_19_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-mingw-on-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_6 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-mingw-on-macosx'

const cDirectoryWrapperEx gWrapperDirectory_6_targetGenerationFileWrapper (
  "makefile-mingw-on-macosx",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_6,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_6
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/build.bat'

const char * gWrapperFileContent_20_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_20_targetGenerationFileWrapper (
  "build.bat",
  "bat",
  gWrapperFileContent_20_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/clean.bat'

const char * gWrapperFileContent_21_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make clean --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_21_targetGenerationFileWrapper (
  "clean.bat",
  "bat",
  gWrapperFileContent_21_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/install.bat'

const char * gWrapperFileContent_22_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make install --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_22_targetGenerationFileWrapper (
  "install.bat",
  "bat",
  gWrapperFileContent_22_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-msys-on-win32' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_7 [4] = {
  & gWrapperFile_20_targetGenerationFileWrapper,
  & gWrapperFile_21_targetGenerationFileWrapper,
  & gWrapperFile_22_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-msys-on-win32' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_7 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-msys-on-win32'

const cDirectoryWrapperEx gWrapperDirectory_7_targetGenerationFileWrapper (
  "makefile-msys-on-win32",
  3,
  gWrapperAllFiles_targetGenerationFileWrapper_7,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_7
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/build.command'

const char * gWrapperFileContent_23_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n";

static const cRegularFileWrapperEx gWrapperFile_23_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_23_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/build64.command'

const char * gWrapperFileContent_24_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n";

static const cRegularFileWrapperEx gWrapperFile_24_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_24_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/clean.command'

const char * gWrapperFileContent_25_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_25_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_25_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/clean64.command'

const char * gWrapperFileContent_26_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_26_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_26_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-unix' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_8 [5] = {
  & gWrapperFile_23_targetGenerationFileWrapper,
  & gWrapperFile_24_targetGenerationFileWrapper,
  & gWrapperFile_25_targetGenerationFileWrapper,
  & gWrapperFile_26_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-unix' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_8 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-unix'

const cDirectoryWrapperEx gWrapperDirectory_8_targetGenerationFileWrapper (
  "makefile-unix",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_8,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_8
) ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/Credits.rtf'

const char * gWrapperFileContent_27_targetGenerationFileWrapper = // 1 bytes
"{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf380\n"
  "{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n"
  "{\\colortbl;\\red255\\green255\\blue255;}\n"
  "\\vieww9000\\viewh8400\\viewkind0\n"
  "\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n"
  "\n"
  "\\f0\\b\\fs24 \\cf0 GALGAS Cocoa Project\\\n"
  "}\n";

static const cRegularFileWrapperEx gWrapperFile_27_targetGenerationFileWrapper (
  "Credits.rtf",
  "rtf",
  gWrapperFileContent_27_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/InfoPlist.strings'

const char * gWrapperFileContent_28_targetGenerationFileWrapper = // 1 bytes
"/* Localized versions of Info.plist keys */\n"
  "CFBundleName = \"cocoa%!PROJECT_NAME%\";\n"
  "CFBundleShortVersionString = \"1.0.0\";\n"
  "CFBundleGetInfoString = \"Cocoa %!PROJECT_NAME% version 1.0.0, Copyright __MyCompanyName__.\";\n"
  "NSHumanReadableCopyright = \"Copyright __MyCompanyName__.\";\n"
  "LSMinimumSystemVersion = \"10.3.9\";\n"
  "\n";

static const cRegularFileWrapperEx gWrapperFile_28_targetGenerationFileWrapper (
  "InfoPlist.strings",
  "strings",
  gWrapperFileContent_28_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'English.lproj' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_10 [3] = {
  & gWrapperFile_27_targetGenerationFileWrapper,
  & gWrapperFile_28_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'English.lproj' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_10 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'English.lproj'

const cDirectoryWrapperEx gWrapperDirectory_10_targetGenerationFileWrapper (
  "English.lproj",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_10,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_10
) ;

//---------------------------------------------------------------------------*

//--- All files of 'xcode-project' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_9 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'xcode-project' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_9 [2] = {
  & gWrapperDirectory_10_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'xcode-project'

const cDirectoryWrapperEx gWrapperDirectory_9_targetGenerationFileWrapper (
  "xcode-project",
  0,
  gWrapperAllFiles_targetGenerationFileWrapper_9,
  1,
  gWrapperAllDirectories_targetGenerationFileWrapper_9
) ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_0 [10] = {
  & gWrapperDirectory_1_targetGenerationFileWrapper,
  & gWrapperDirectory_2_targetGenerationFileWrapper,
  & gWrapperDirectory_3_targetGenerationFileWrapper,
  & gWrapperDirectory_4_targetGenerationFileWrapper,
  & gWrapperDirectory_5_targetGenerationFileWrapper,
  & gWrapperDirectory_6_targetGenerationFileWrapper,
  & gWrapperDirectory_7_targetGenerationFileWrapper,
  & gWrapperDirectory_8_targetGenerationFileWrapper,
  & gWrapperDirectory_9_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapperEx gWrapperDirectory_0_targetGenerationFileWrapper (
  "",
  0,
  gWrapperAllFiles_targetGenerationFileWrapper_0,
  9,
  gWrapperAllDirectories_targetGenerationFileWrapper_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_intel_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_i386_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_intel_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_i386_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_ppc_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_ppc_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel $(EXECUTABLE)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc $(EXECUTABLE_DEBUG)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel $(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc   -f makefile64 $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel -f makefile64 $(EXECUTABLE)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc   -f makefile64 $(EXECUTABLE_DEBUG)\n"
      "\t$(MAKE) -C ../makefile-macosx-intel -f makefile64 $(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE_DEBUG):\n"
      "\t../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) | ../makefile-macosx-intel/$(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/macosx_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/unix_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/unix_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_i386_linux_on_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_i386_linux_on_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for x86 Linux, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Link Options for i386 Linux                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Include i386 Linux tools for MAC OS X                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/x86linux_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_mingw_on_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_mingw_on_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                     Include MinGW tools for MAC OS X                      *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/mingw_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_msys_on_win32_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_msys_on_win32_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built with MSYS*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#              Install directory (for \"install\" goal)                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /C/WINDOWS/system32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Include MinGW tools for MSYS                        *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/msys_on_win32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIBPM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_info_plist' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_info_plist (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
      "<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
      "<plist version=\"1.0\">\n"
      "<dict>\n"
      "     <key>CFBundleDevelopmentRegion</key>\n"
      "     <string>English</string>\n"
      "     <key>CFBundleExecutable</key>\n"
      "     <string>${EXECUTABLE_NAME}</string>\n"
      "     <key>CFBundleIconFile</key>\n"
      "     <string></string>\n"
      "     <key>CFBundleIdentifier</key>\n"
      "     <string>com.yourcompany." ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "     <key>CFBundleInfoDictionaryVersion</key>\n"
      "     <string>6.0</string>\n"
      "     <key>CFBundleName</key>\n"
      "     <string>${PRODUCT_NAME}</string>\n"
      "     <key>CFBundlePackageType</key>\n"
      "     <string>APPL</string>\n"
      "     <key>CFBundleSignature</key>\n"
      "     <string>\?\?\?\?</string>\n"
      "     <key>CFBundleVersion</key>\n"
      "     <string>1.0</string>\n"
      "     <key>NSMainNibFile</key>\n"
      "     <string>MainMenu</string>\n"
      "     <key>NSPrincipalClass</key>\n"
      "     <string>NSApplication</string>\n"
      "    <key>CFBundleDocumentTypes</key>\n"
      "    <array>\n"
      "        <dict>\n"
      "            <key>CFBundleTypeExtensions</key>\n"
      "            <array>\n"
      "                <string>" ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "            </array>\n"
      "            <key>CFBundleTypeName</key>\n"
      "            <string>" ;
    result << var_cas_PROJECT_NAME ;
    result << " Source</string>\n"
      "            <key>CFBundleTypeOSTypes</key>\n"
      "            <array>\n"
      "                <string>TEXT</string>\n"
      "            </array>\n"
      "            <key>CFBundleTypeRole</key>\n"
      "            <string>Editor</string>\n"
      "            <key>LSTypeIsPackage</key>\n"
      "            <false/>\n"
      "            <key>NSDocumentClass</key>\n"
      "            <string>OC_GGS_Document</string>\n"
      "        </dict>\n"
      "    </array>\n"
      "</dict>\n"
      "</plist>\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_file_list' template of 'targetGenerationFileWrapper' filewrapper *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_file_list (C_CompilerEx & /* inLexique */,
                                const GGS_stringlist & var_cas_HAND_CODED_SOURCE_DIR_LIST,
                                const GGS_stringlist & var_cas_HAND_CODED_SOURCE_FILE_LIST,
                                const GGS_stringlist & var_cas_MAKEFILE_FILE_LIST,
                                const GGS_bool& var_cas_COMPILE_FOR_GALGAS_1) {
  C_String result ;
  const bool isBuilt = var_cas_HAND_CODED_SOURCE_DIR_LIST.isBuilt ()
    && var_cas_HAND_CODED_SOURCE_FILE_LIST.isBuilt ()
    && var_cas_MAKEFILE_FILE_LIST.isBuilt ()
    && var_cas_COMPILE_FOR_GALGAS_1.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Lib PM directory\n"
      "ifndef LIBPM_PATH\n"
      "  $(info *** the LIBPM_PATH environment variable is not defined)\n"
      "endif\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Project source files directories                          *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES_DIR := ../galgas_sources/GALGAS_OUTPUT\n"
      "SOURCES_DIR += ../galgas_sources/GALGAS_OUTPUT/include-files\n" ;
    GGS_stringlist::cEnumerator enumerator_655 (var_cas_HAND_CODED_SOURCE_DIR_LIST, true) ;
    const GGS_stringlist::cElement * operand_655 = NULL ;
    while (((operand_655 = enumerator_655.nextObject ()))) {
      macroValidPointer (operand_655) ;
      result << "SOURCES_DIR += " ;
      result << operand_655->mValue ;
      result << "\n" ;
    }
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     Source files names list (without their actual path)       *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES :=\n"
      "\n"
      "#--- Files from libpm --------------------\n"
      "#---------------------------------------------------------------*\n"
      "#                                                               *\n"
      "#     This file contains a source file list that is included    *\n"
      "#     by every galgas project makefile                          *\n"
      "#                                                               *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Files from libpm --------------------\n"
      "#--- Command Line Option\n"
      "SOURCES += C_CommandLineOption.cpp\n"
      "SOURCES += C_BoolCommandLineOption.cpp\n"
      "SOURCES += C_UIntCommandLineOption.cpp\n"
      "SOURCES += C_StringCommandLineOption.cpp\n"
      "SOURCES += C_builtin_CLI_Options.cpp\n"
      "SOURCES += C_galgas_CLI_Options.cpp\n"
      "SOURCES += F_Analyze_CLI_Options.cpp\n"
      "\n"
      "#--- BDD\n"
      "SOURCES += C_Display_BDD.cpp\n"
      "SOURCES += C_BDD.cpp\n"
      "SOURCES += C_BDD-find-or-add.cpp\n"
      "SOURCES += C_BDD-single-operand-ops.cpp\n"
      "SOURCES += C_BDD-and-operation.cpp\n"
      "SOURCES += C_BDD_Set1.cpp\n"
      "SOURCES += C_BDD_Set2.cpp\n"
      "SOURCES += C_BDD_Set3.cpp\n"
      "SOURCES += C_BDD_Descriptor.cpp\n"
      "\n"
      "#--- Files\n"
      "SOURCES += C_TextFileWrite.cpp\n"
      "SOURCES += C_HTML_FileWrite.cpp\n"
      "\n"
      "#--- Streams\n"
      "SOURCES += AC_OutputStream.cpp\n"
      "SOURCES += C_ConsoleOut.cpp\n"
      "SOURCES += C_ErrorOut.cpp\n"
      "\n"
      "#--- Strings\n"
      "SOURCES += unicode_character_cpp.cpp\n"
      "SOURCES += unicode_string_routines.cpp\n"
      "SOURCES += C_String.cpp\n"
      "SOURCES += md5.cpp\n"
      "\n"
      "#--- Time\n"
      "SOURCES += C_Timer.cpp\n"
      "SOURCES += C_DateTime.cpp\n"
      "\n"
      "#--- Utilities\n"
      "SOURCES += F_main.cpp\n"
      "SOURCES += C_PrologueEpilogue.cpp\n"
      "SOURCES += C_SharedObject.cpp\n"
      "SOURCES += F_DisplayException.cpp\n"
      "SOURCES += MF_Assert.cpp\n"
      "SOURCES += F_GetPrime.cpp\n"
      "SOURCES += MF_MemoryControl.cpp\n"
      "SOURCES += cpp-allocation.cpp\n"
      "SOURCES += basic-allocation.cpp\n"
      "\n" ;
    if (var_cas_COMPILE_FOR_GALGAS_1.boolValue ()) {
      result << "#---------------------------------------------------------------*\n"
        "#    G A L G A S    1                                           *\n"
        "#---------------------------------------------------------------*\n"
        "\n"
        "SOURCES += PM_C_Object.cpp\n"
        "SOURCES += PM_C_Array.cpp\n"
        "SOURCES += PM_C_Dictionary.cpp\n"
        "SOURCES += C_CompilerEx.cpp\n"
        "SOURCES += C_LexiqueEx.cpp\n"
        "SOURCES += scanner_actionsEx.cpp\n"
        "SOURCES += galgas_introspection.cpp\n"
        "SOURCES += AC_GGS_class.cpp\n"
        "SOURCES += AC_GGS_map.cpp\n"
        "SOURCES += AC_GGS_listmap.cpp\n"
        "SOURCES += AC_GGS_list.cpp\n"
        "SOURCES += AC_GGS_sortedlist.cpp\n"
        "SOURCES += AC_GGS_domain.cpp\n"
        "SOURCES += AC_GGS_mapindex.cpp\n"
        "SOURCES += predefined_types.cpp\n"
        "SOURCES += GGS__root.cpp\n"
        "SOURCES += GGS_object.cpp\n"
        "SOURCES += GGS_type.cpp\n"
        "SOURCES += GGS_function.cpp\n"
        "SOURCES += GGS_data.cpp\n"
        "SOURCES += GGS_bool.cpp\n"
        "SOURCES += GGS_char.cpp\n"
        "SOURCES += GGS_double.cpp\n"
        "SOURCES += GGS_location.cpp\n"
        "SOURCES += GGS_string.cpp\n"
        "SOURCES += GGS_uint.cpp\n"
        "SOURCES += GGS_sint.cpp\n"
        "SOURCES += GGS_uint64.cpp\n"
        "SOURCES += GGS_sint64.cpp\n"
        "SOURCES += GGS_lbool.cpp\n"
        "SOURCES += GGS_lchar.cpp\n"
        "SOURCES += GGS_ldouble.cpp\n"
        "SOURCES += GGS_lstring.cpp\n"
        "SOURCES += GGS_luint.cpp\n"
        "SOURCES += GGS_lsint.cpp\n"
        "SOURCES += GGS_luint64.cpp\n"
        "SOURCES += GGS_lsint64.cpp\n"
        "SOURCES += GGS_stringset.cpp\n"
        "SOURCES += GGS_binaryset.cpp\n"
        "SOURCES += GGS_filewrapper.cpp\n"
        "SOURCES += GGS_application.cpp\n" ;
    }else {
    }
    result << "\n"
      "#---------------------------------------------------------------*\n"
      "#    G A L G A S    2                                           *\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "SOURCES += C_LocationInSource.cpp\n"
      "SOURCES += C_SourceTextInString.cpp\n"
      "SOURCES += C_galgas_type_descriptor.cpp\n"
      "SOURCES += C_galgas_function_descriptor.cpp\n"
      "SOURCES += C_galgas_io.cpp\n"
      "SOURCES += C_galgas_class_inspector.cpp\n"
      "SOURCES += cObjectArray.cpp\n"
      "SOURCES += cCollectionElement.cpp\n"
      "SOURCES += capCollectionElement.cpp\n"
      "SOURCES += capCollectionElementArray.cpp\n"
      "SOURCES += cSortedListElement.cpp\n"
      "SOURCES += capSortedListElement.cpp\n"
      "SOURCES += cGenericAbstractEnumerator.cpp\n"
      "\n"
      "SOURCES += AC_GALGAS_root.cpp\n"
      "SOURCES += AC_GALGAS_list.cpp\n"
      "SOURCES += AC_GALGAS_sortedlist.cpp\n"
      "SOURCES += AC_GALGAS_map.cpp\n"
      "SOURCES += AC_GALGAS_class.cpp\n"
      "SOURCES += acPtr_class.cpp\n"
      "SOURCES += cPtr_object.cpp\n"
      "\n"
      "SOURCES += GALGAS_application.cpp\n"
      "SOURCES += GALGAS_binaryset.cpp\n"
      "SOURCES += GALGAS_bool.cpp\n"
      "SOURCES += GALGAS_char.cpp\n"
      "SOURCES += GALGAS_data.cpp\n"
      "SOURCES += GALGAS_double.cpp\n"
      "SOURCES += GALGAS_filewrapper.cpp\n"
      "SOURCES += GALGAS_function.cpp\n"
      "SOURCES += GALGAS_location.cpp\n"
      "SOURCES += GALGAS_sint.cpp\n"
      "SOURCES += GALGAS_sint_36__34_.cpp\n"
      "SOURCES += GALGAS_string.cpp\n"
      "SOURCES += GALGAS_stringset.cpp\n"
      "SOURCES += GALGAS_type.cpp\n"
      "SOURCES += GALGAS_object.cpp\n"
      "SOURCES += GALGAS_uint.cpp\n"
      "SOURCES += GALGAS_uint_36__34_.cpp\n"
      "SOURCES += predefined-types.cpp\n"
      "SOURCES += scanner_actions.cpp\n"
      "SOURCES += C_Compiler.cpp\n"
      "SOURCES += C_Lexique.cpp\n"
      "\n"
      "#---------------------------------------------------------------*\n"
      "\n"
      "#--- Hand-coded files ---------------------\n" ;
    GGS_stringlist::cEnumerator enumerator_5772 (var_cas_HAND_CODED_SOURCE_FILE_LIST, true) ;
    const GGS_stringlist::cElement * operand_5772 = NULL ;
    while (((operand_5772 = enumerator_5772.nextObject ()))) {
      macroValidPointer (operand_5772) ;
      result << "SOURCES += " ;
      result << operand_5772->mValue ;
      result << "\n" ;
    }
    result << "\n"
      "#--- Files generated by GALGAS ------------\n" ;
    GGS_stringlist::cEnumerator enumerator_5889 (var_cas_MAKEFILE_FILE_LIST, true) ;
    const GGS_stringlist::cElement * operand_5889 = NULL ;
    while (((operand_5889 = enumerator_5889.nextObject ()))) {
      macroValidPointer (operand_5889) ;
      result << "SOURCES += " ;
      result << operand_5889->mValue ;
      result << "\n" ;
    }
    result << "\n"
      "\n"
      "#---------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateXcodeProjectTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateXcodeProjectTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateXcodeProjectTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/xcode-project")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (51)) ;
  }
  GGS_bool automatic_var_2423_0 ;
  const GGS_string temp_2399 = template_filewrapper_targetGenerationFileWrapper_makefile_info_plist (inLexique, var_cas_inProjectName) ;
  if (temp_2399.isBuilt ()) {
    temp_2399 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/Info.plist")), automatic_var_2423_0 COMMA_SOURCE_FILE_AT_LINE (52)) ;
  }
  const GGS_string temp_2466 = (var_cas_dir).operator_concat (GGS_string ("/English.lproj")) ;
  if (temp_2466.isBuilt ()) {
    temp_2466 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (54)) ;
  }
  const GGS_string var_cas_InfoPlist_strings_path = (var_cas_dir).operator_concat (GGS_string ("/English.lproj/InfoPlist.strings")) ;
  const GGS_bool cond_2743 = (var_cas_InfoPlist_strings_path.reader_fileExists ()).operator_not () ;
  if (cond_2743.isBuiltAndTrue ()) {
    const GGS_string temp_2710 = GGS_string (gWrapperFileContent_28_targetGenerationFileWrapper) ;
    if (temp_2710.isBuilt ()) {
      temp_2710 (HERE)->method_writeToFile (inLexique, var_cas_InfoPlist_strings_path COMMA_SOURCE_FILE_AT_LINE (57)) ;
    }
  }
  const GGS_string var_cas_Credits_rtf_path = (var_cas_dir).operator_concat (GGS_string ("/English.lproj/Credits.rtf")) ;
  const GGS_bool cond_2992 = (var_cas_Credits_rtf_path.reader_fileExists ()).operator_not () ;
  if (cond_2992.isBuiltAndTrue ()) {
    const GGS_string temp_2965 = GGS_string (gWrapperFileContent_27_targetGenerationFileWrapper) ;
    if (temp_2965.isBuilt ()) {
      temp_2965 (HERE)->method_writeToFile (inLexique, var_cas_Credits_rtf_path COMMA_SOURCE_FILE_AT_LINE (61)) ;
    }
  }
  const GGS_string var_cas_libpmPosixPath = GGS_string::constructor_stringWithEnvironmentVariable (inLexique, GGS_string ("LIBPM_PATH") COMMA_SOURCE_FILE_AT_LINE (64)).reader_unixPathWithNativePath () ;
  const GGS_string var_cas_symbLinkPath = (var_cas_dir).operator_concat (GGS_string ("/libpm")) ;
  const GGS_bool cond_3299 = (var_cas_symbLinkPath.reader_isSymbolicLink ()).operator_not () ;
  if (cond_3299.isBuiltAndTrue ()) {
    if (var_cas_symbLinkPath.isBuilt ()) {
      var_cas_symbLinkPath (HERE)->method_makeSymbolicLinkWithPath (inLexique, var_cas_libpmPosixPath COMMA_SOURCE_FILE_AT_LINE (67)) ;
    }
  }else if (cond_3299.isBuiltAndFalse ()) {
    const GGS_bool cond_3486 = (GGS_string::constructor_stringWithSymbolicLinkContents (inLexique, var_cas_symbLinkPath COMMA_SOURCE_FILE_AT_LINE (68))).operator_isNotEqual (var_cas_libpmPosixPath) ;
    if (cond_3486.isBuiltAndTrue ()) {
      GGS_string::class_method_deleteFile (inLexique, var_cas_symbLinkPath COMMA_SOURCE_FILE_AT_LINE (69)) ;
      if (var_cas_symbLinkPath.isBuilt ()) {
        var_cas_symbLinkPath (HERE)->method_makeSymbolicLinkWithPath (inLexique, var_cas_libpmPosixPath COMMA_SOURCE_FILE_AT_LINE (70)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateXcodeProjectTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateMsysOnWin32Target"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMsysOnWin32Target (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMsysOnWin32Target at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-msys-on-win32")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (81)) ;
  }
  GGS_bool automatic_var_3910_0 ;
  const GGS_string temp_3887 = GGS_string (gWrapperFileContent_20_targetGenerationFileWrapper) ;
  if (temp_3887.isBuilt ()) {
    temp_3887 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.bat")), automatic_var_3910_0 COMMA_SOURCE_FILE_AT_LINE (82)) ;
  }
  GGS_bool automatic_var_4048_0 ;
  const GGS_string temp_4025 = GGS_string (gWrapperFileContent_21_targetGenerationFileWrapper) ;
  if (temp_4025.isBuilt ()) {
    temp_4025 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.bat")), automatic_var_4048_0 COMMA_SOURCE_FILE_AT_LINE (83)) ;
  }
  GGS_bool automatic_var_4190_0 ;
  const GGS_string temp_4165 = GGS_string (gWrapperFileContent_22_targetGenerationFileWrapper) ;
  if (temp_4165.isBuilt ()) {
    temp_4165 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/install.bat")), automatic_var_4190_0 COMMA_SOURCE_FILE_AT_LINE (84)) ;
  }
  GGS_bool automatic_var_4339_0 ;
  const GGS_string temp_4317 = template_filewrapper_targetGenerationFileWrapper_makefile_msys_on_win32_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_4317.isBuilt ()) {
    temp_4317 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_4339_0 COMMA_SOURCE_FILE_AT_LINE (85)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMsysOnWin32Target\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generateMinGWOnMacOSXTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMinGWOnMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMinGWOnMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-mingw-on-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (95)) ;
  }
  GGS_bool automatic_var_4784_0 ;
  const GGS_string temp_4757 = GGS_string (gWrapperFileContent_18_targetGenerationFileWrapper) ;
  if (temp_4757.isBuilt ()) {
    temp_4757 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_4784_0 COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
  GGS_bool automatic_var_4942_0 ;
  const GGS_string temp_4915 = GGS_string (gWrapperFileContent_19_targetGenerationFileWrapper) ;
  if (temp_4915.isBuilt ()) {
    temp_4915 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_4942_0 COMMA_SOURCE_FILE_AT_LINE (97)) ;
  }
  GGS_bool automatic_var_5093_0 ;
  const GGS_string temp_5071 = template_filewrapper_targetGenerationFileWrapper_makefile_mingw_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_5071.isBuilt ()) {
    temp_5071 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_5093_0 COMMA_SOURCE_FILE_AT_LINE (98)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMinGWOnMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generateMakefileMacOSXTarget"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (108)) ;
  }
  GGS_bool automatic_var_5521_0 ;
  const GGS_string temp_5494 = GGS_string (gWrapperFileContent_2_targetGenerationFileWrapper) ;
  if (temp_5494.isBuilt ()) {
    temp_5494 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_5521_0 COMMA_SOURCE_FILE_AT_LINE (109)) ;
  }
  GGS_bool automatic_var_5670_0 ;
  const GGS_string temp_5643 = GGS_string (gWrapperFileContent_4_targetGenerationFileWrapper) ;
  if (temp_5643.isBuilt ()) {
    temp_5643 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_5670_0 COMMA_SOURCE_FILE_AT_LINE (110)) ;
  }
  GGS_bool automatic_var_5823_0 ;
  const GGS_string temp_5794 = GGS_string (gWrapperFileContent_3_targetGenerationFileWrapper) ;
  if (temp_5794.isBuilt ()) {
    temp_5794 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_5823_0 COMMA_SOURCE_FILE_AT_LINE (111)) ;
  }
  GGS_bool automatic_var_5976_0 ;
  const GGS_string temp_5947 = GGS_string (gWrapperFileContent_5_targetGenerationFileWrapper) ;
  if (temp_5947.isBuilt ()) {
    temp_5947 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_5976_0 COMMA_SOURCE_FILE_AT_LINE (112)) ;
  }
  GGS_bool automatic_var_6118_0 ;
  const GGS_string temp_6096 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_6096.isBuilt ()) {
    temp_6096 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_6118_0 COMMA_SOURCE_FILE_AT_LINE (113)) ;
  }
  GGS_bool automatic_var_6264_0 ;
  const GGS_string temp_6240 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_6240.isBuilt ()) {
    temp_6240 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_6264_0 COMMA_SOURCE_FILE_AT_LINE (114)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "generateMakefileIntelMacOSXTarget"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileIntelMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileIntelMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-intel")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (124)) ;
  }
  GGS_bool automatic_var_6709_0 ;
  const GGS_string temp_6682 = GGS_string (gWrapperFileContent_6_targetGenerationFileWrapper) ;
  if (temp_6682.isBuilt ()) {
    temp_6682 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_6709_0 COMMA_SOURCE_FILE_AT_LINE (125)) ;
  }
  GGS_bool automatic_var_6864_0 ;
  const GGS_string temp_6837 = GGS_string (gWrapperFileContent_8_targetGenerationFileWrapper) ;
  if (temp_6837.isBuilt ()) {
    temp_6837 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_6864_0 COMMA_SOURCE_FILE_AT_LINE (126)) ;
  }
  GGS_bool automatic_var_7023_0 ;
  const GGS_string temp_6994 = GGS_string (gWrapperFileContent_7_targetGenerationFileWrapper) ;
  if (temp_6994.isBuilt ()) {
    temp_6994 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_7023_0 COMMA_SOURCE_FILE_AT_LINE (127)) ;
  }
  GGS_bool automatic_var_7182_0 ;
  const GGS_string temp_7153 = GGS_string (gWrapperFileContent_9_targetGenerationFileWrapper) ;
  if (temp_7153.isBuilt ()) {
    temp_7153 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_7182_0 COMMA_SOURCE_FILE_AT_LINE (128)) ;
  }
  GGS_bool automatic_var_7330_0 ;
  const GGS_string temp_7308 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_7308.isBuilt ()) {
    temp_7308 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_7330_0 COMMA_SOURCE_FILE_AT_LINE (129)) ;
  }
  GGS_bool automatic_var_7482_0 ;
  const GGS_string temp_7458 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_7458.isBuilt ()) {
    temp_7458 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_7482_0 COMMA_SOURCE_FILE_AT_LINE (130)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileIntelMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "generateMakefilePPCMacOSXTarget"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefilePPCMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefilePPCMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-ppc")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (140)) ;
  }
  GGS_bool automatic_var_7921_0 ;
  const GGS_string temp_7894 = GGS_string (gWrapperFileContent_10_targetGenerationFileWrapper) ;
  if (temp_7894.isBuilt ()) {
    temp_7894 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_7921_0 COMMA_SOURCE_FILE_AT_LINE (141)) ;
  }
  GGS_bool automatic_var_8074_0 ;
  const GGS_string temp_8047 = GGS_string (gWrapperFileContent_12_targetGenerationFileWrapper) ;
  if (temp_8047.isBuilt ()) {
    temp_8047 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_8074_0 COMMA_SOURCE_FILE_AT_LINE (142)) ;
  }
  GGS_bool automatic_var_8231_0 ;
  const GGS_string temp_8202 = GGS_string (gWrapperFileContent_11_targetGenerationFileWrapper) ;
  if (temp_8202.isBuilt ()) {
    temp_8202 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_8231_0 COMMA_SOURCE_FILE_AT_LINE (143)) ;
  }
  GGS_bool automatic_var_8388_0 ;
  const GGS_string temp_8359 = GGS_string (gWrapperFileContent_13_targetGenerationFileWrapper) ;
  if (temp_8359.isBuilt ()) {
    temp_8359 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_8388_0 COMMA_SOURCE_FILE_AT_LINE (144)) ;
  }
  GGS_bool automatic_var_8534_0 ;
  const GGS_string temp_8512 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_8512.isBuilt ()) {
    temp_8512 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_8534_0 COMMA_SOURCE_FILE_AT_LINE (145)) ;
  }
  GGS_bool automatic_var_8684_0 ;
  const GGS_string temp_8660 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_8660.isBuilt ()) {
    temp_8660 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_8684_0 COMMA_SOURCE_FILE_AT_LINE (146)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefilePPCMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "generateMakefileUniversalMacOSXTarget"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileUniversalMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileUniversalMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-universal")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) ;
  }
  GGS_bool automatic_var_9141_0 ;
  const GGS_string temp_9114 = GGS_string (gWrapperFileContent_14_targetGenerationFileWrapper) ;
  if (temp_9114.isBuilt ()) {
    temp_9114 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_9141_0 COMMA_SOURCE_FILE_AT_LINE (157)) ;
  }
  GGS_bool automatic_var_9300_0 ;
  const GGS_string temp_9273 = GGS_string (gWrapperFileContent_16_targetGenerationFileWrapper) ;
  if (temp_9273.isBuilt ()) {
    temp_9273 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_9300_0 COMMA_SOURCE_FILE_AT_LINE (158)) ;
  }
  GGS_bool automatic_var_9463_0 ;
  const GGS_string temp_9434 = GGS_string (gWrapperFileContent_15_targetGenerationFileWrapper) ;
  if (temp_9434.isBuilt ()) {
    temp_9434 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_9463_0 COMMA_SOURCE_FILE_AT_LINE (159)) ;
  }
  GGS_bool automatic_var_9626_0 ;
  const GGS_string temp_9597 = GGS_string (gWrapperFileContent_17_targetGenerationFileWrapper) ;
  if (temp_9597.isBuilt ()) {
    temp_9597 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_9626_0 COMMA_SOURCE_FILE_AT_LINE (160)) ;
  }
  GGS_bool automatic_var_9778_0 ;
  const GGS_string temp_9756 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_9756.isBuilt ()) {
    temp_9756 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_9778_0 COMMA_SOURCE_FILE_AT_LINE (161)) ;
  }
  GGS_bool automatic_var_9934_0 ;
  const GGS_string temp_9910 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_9910.isBuilt ()) {
    temp_9910 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_9934_0 COMMA_SOURCE_FILE_AT_LINE (162)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileUniversalMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateMakefileUnixTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileUnixTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileUnixTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-unix")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (172)) ;
  }
  GGS_bool automatic_var_10356_0 ;
  const GGS_string temp_10329 = GGS_string (gWrapperFileContent_23_targetGenerationFileWrapper) ;
  if (temp_10329.isBuilt ()) {
    temp_10329 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_10356_0 COMMA_SOURCE_FILE_AT_LINE (173)) ;
  }
  GGS_bool automatic_var_10503_0 ;
  const GGS_string temp_10476 = GGS_string (gWrapperFileContent_25_targetGenerationFileWrapper) ;
  if (temp_10476.isBuilt ()) {
    temp_10476 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_10503_0 COMMA_SOURCE_FILE_AT_LINE (174)) ;
  }
  GGS_bool automatic_var_10654_0 ;
  const GGS_string temp_10625 = GGS_string (gWrapperFileContent_24_targetGenerationFileWrapper) ;
  if (temp_10625.isBuilt ()) {
    temp_10625 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_10654_0 COMMA_SOURCE_FILE_AT_LINE (175)) ;
  }
  GGS_bool automatic_var_10805_0 ;
  const GGS_string temp_10776 = GGS_string (gWrapperFileContent_26_targetGenerationFileWrapper) ;
  if (temp_10776.isBuilt ()) {
    temp_10776 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_10805_0 COMMA_SOURCE_FILE_AT_LINE (176)) ;
  }
  GGS_bool automatic_var_10945_0 ;
  const GGS_string temp_10923 = template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_10923.isBuilt ()) {
    temp_10923 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_10945_0 COMMA_SOURCE_FILE_AT_LINE (177)) ;
  }
  GGS_bool automatic_var_11089_0 ;
  const GGS_string temp_11065 = template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_11065.isBuilt ()) {
    temp_11065 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_11089_0 COMMA_SOURCE_FILE_AT_LINE (178)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileUnixTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "generateI386LinuxOnMacOSXTarget"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateI386LinuxOnMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateI386LinuxOnMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-i386-linux-on-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (188)) ;
  }
  GGS_bool automatic_var_11548_0 ;
  const GGS_string temp_11521 = GGS_string (gWrapperFileContent_0_targetGenerationFileWrapper) ;
  if (temp_11521.isBuilt ()) {
    temp_11521 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_11548_0 COMMA_SOURCE_FILE_AT_LINE (189)) ;
  }
  GGS_bool automatic_var_11711_0 ;
  const GGS_string temp_11684 = GGS_string (gWrapperFileContent_1_targetGenerationFileWrapper) ;
  if (temp_11684.isBuilt ()) {
    temp_11684 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_11711_0 COMMA_SOURCE_FILE_AT_LINE (190)) ;
  }
  GGS_bool automatic_var_11867_0 ;
  const GGS_string temp_11845 = template_filewrapper_targetGenerationFileWrapper_makefile_i386_linux_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_11845.isBuilt ()) {
    temp_11845 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_11867_0 COMMA_SOURCE_FILE_AT_LINE (191)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateI386LinuxOnMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of routine "updateTargets"                  *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_updateTargets (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inProjectSourceFilePath,
                                const GGS_lstring   var_cas_inProjectName,
                                const GGS_string  var_cas_inTargetName,
                                const GGS_lstringlist   var_cas_inTargetFeatureList,
                                const GGS_projectSourceList   var_cas_inProjectSourceList,
                                const GGS_bool  var_cas_inGenerateForGalgas1
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_updateTargets at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_projectDirectory = var_cas_inProjectSourceFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ().reader_stringByDeletingLastPathComponent () ;
  inLexique.printMessage (GGS_string ("*** Updating targets\n") COMMA_SOURCE_FILE_AT_LINE (206)) ;
  GGS_stringset  var_cas_availableGenerationFeatures = GGS_stringset ::constructor_emptySet () ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx-intel")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx-ppc")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx-universal")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-macosx")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-unix")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-i386-linux-on-macosx")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-mingw-on-macosx")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("makefile-msys-on-win32")) ;
  var_cas_availableGenerationFeatures.addAssign_operation (GGS_string ("xcode-project")) ;
  GGS_stringset  var_cas_generationFeatures = GGS_stringset ::constructor_emptySet () ;
  {
    GGS_lstringlist::cEnumerator enumerator_13039 (var_cas_inTargetFeatureList, true) ;
    const GGS_lstringlist::cElement * operand_13039 = NULL ;
    while (((operand_13039 = enumerator_13039.nextObject ()))) {
      macroValidPointer (operand_13039) ;
      const GGS_bool cond_13299 = var_cas_availableGenerationFeatures.reader_hasKey (operand_13039->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (219))) ;
      if (cond_13299.isBuiltAndTrue ()) {
        const GGS_bool cond_13238 = var_cas_generationFeatures.reader_hasKey (operand_13039->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (220))) ;
        if (cond_13238.isBuiltAndTrue ()) {
          operand_13039->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("duplicate '")).operator_concat (operand_13039->mValue)).operator_concat (GGS_string ("' feature")) COMMA_SOURCE_FILE_AT_LINE (222)) ;
        }
        var_cas_generationFeatures.addAssign_operation (operand_13039->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (223))) ;
      }else if (cond_13299.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_stringset::cEnumerator enumerator_13365 (var_cas_availableGenerationFeatures, true) ;
          while (enumerator_13365.hasCurrentObject ()) {
            var_cas_s.appendCString ("\n"
              "  - '") ;
            var_cas_s.dotAssign_operation (enumerator_13365._key (HERE)) ;
            var_cas_s.appendCString ("'") ;
            enumerator_13365.next () ;
          }
        }
        operand_13039->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((GGS_string ("unknown '")).operator_concat (operand_13039->mValue)).operator_concat (GGS_string ("' feature; avalaible features are:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (230)) ;
      }
    }
  }
  const GGS_bool cond_13894 = (var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-universal"))).operator_and ((var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-ppc"))).operator_not ()) ;
  if (cond_13894.isBuiltAndTrue ()) {
    var_cas_inProjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("'feature makefile-macosx-ppc' implicitly added, due to 'feature makefile-macosx-universal'") COMMA_SOURCE_FILE_AT_LINE (234)) ;
    var_cas_generationFeatures.addAssign_operation (GGS_string ("makefile-macosx-ppc")) ;
  }
  const GGS_bool cond_14209 = (var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-universal"))).operator_and ((var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-intel"))).operator_not ()) ;
  if (cond_14209.isBuiltAndTrue ()) {
    var_cas_inProjectName.reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("'feature makefile-macosx-intel' implicitly added, due to 'feature makefile-macosx-universal'") COMMA_SOURCE_FILE_AT_LINE (238)) ;
    var_cas_generationFeatures.addAssign_operation (GGS_string ("makefile-macosx-intel")) ;
  }
  const GGS_bool cond_14374 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-ppc")) ;
  if (cond_14374.isBuiltAndTrue ()) {
    ::routine_generateMakefilePPCMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (243)) ;
  }
  const GGS_bool cond_14520 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-intel")) ;
  if (cond_14520.isBuiltAndTrue ()) {
    ::routine_generateMakefileIntelMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (246)) ;
  }
  const GGS_bool cond_14674 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx-universal")) ;
  if (cond_14674.isBuiltAndTrue ()) {
    ::routine_generateMakefileUniversalMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (249)) ;
  }
  const GGS_bool cond_14809 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-macosx")) ;
  if (cond_14809.isBuiltAndTrue ()) {
    ::routine_generateMakefileMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (252)) ;
  }
  const GGS_bool cond_14940 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-unix")) ;
  if (cond_14940.isBuiltAndTrue ()) {
    ::routine_generateMakefileUnixTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (255)) ;
  }
  const GGS_bool cond_15092 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-i386-linux-on-macosx")) ;
  if (cond_15092.isBuiltAndTrue ()) {
    ::routine_generateI386LinuxOnMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (258)) ;
  }
  const GGS_bool cond_15235 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-mingw-on-macosx")) ;
  if (cond_15235.isBuiltAndTrue ()) {
    ::routine_generateMinGWOnMacOSXTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (261)) ;
  }
  const GGS_bool cond_15374 = var_cas_generationFeatures.reader_hasKey (GGS_string ("makefile-msys-on-win32")) ;
  if (cond_15374.isBuiltAndTrue ()) {
    ::routine_generateMsysOnWin32Target (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (264)) ;
  }
  const GGS_bool cond_15505 = var_cas_generationFeatures.reader_hasKey (GGS_string ("xcode-project")) ;
  if (cond_15505.isBuiltAndTrue ()) {
    ::routine_generateXcodeProjectTarget (inLexique,  var_cas_projectDirectory,  var_cas_inTargetName COMMA_SOURCE_FILE_AT_LINE (267)) ;
  }
  GGS_stringset  var_cas_sourceFileSet = GGS_stringset ::constructor_emptySet () ;
  GGS_stringlist  var_cas_generatedFileListForMakefile = GGS_stringlist ::constructor_emptyList () ;
  GGS_stringlist  var_cas_handCodedSourceList = GGS_stringlist ::constructor_emptyList () ;
  GGS_stringlist  var_cas_handCodedSourceDirectoryList = GGS_stringlist ::constructor_emptyList () ;
  {
    GGS_projectSourceList::cEnumerator enumerator_16486 (var_cas_inProjectSourceList, true) ;
    const GGS_projectSourceList::cElement * operand_16486 = NULL ;
    while (((operand_16486 = enumerator_16486.nextObject ()))) {
      macroValidPointer (operand_16486) ;
      const GGS_string var_cas_baseName = operand_16486->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (290)).reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
      const GGS_bool cond_16831 = var_cas_sourceFileSet.reader_hasKey (var_cas_baseName) ;
      if (cond_16831.isBuiltAndTrue ()) {
        operand_16486->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("there is already a file with '")).operator_concat (var_cas_baseName)).operator_concat (GGS_string ("' as base name in the project")) COMMA_SOURCE_FILE_AT_LINE (295)) ;
      }
      var_cas_sourceFileSet.addAssign_operation (var_cas_baseName) ;
      switch (operand_16486->mSourceKind.enumValue ()) {
      case GGS_sourceFileKind::enum_externSourceFile:
        {
        var_cas_handCodedSourceList.addAssign_operation (operand_16486->mFilePath.ggs_string ().reader_lastPathComponent ()) ;
        var_cas_handCodedSourceDirectoryList.addAssign_operation (operand_16486->mFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ()) ;
        }
        break ;
      case GGS_sourceFileKind::enum_grammarSourceFile:
      case GGS_sourceFileKind::enum_lexiqueSourceFile:
      case GGS_sourceFileKind::enum_optionSourceFile:
      case GGS_sourceFileKind::enum_programSourceFile:
      case GGS_sourceFileKind::enum_semanticsSourceFile:
      case GGS_sourceFileKind::enum_syntaxSourceFile:
        {
        var_cas_generatedFileListForMakefile.addAssign_operation ((var_cas_baseName).operator_concat (GGS_string (".cpp"))) ;
        }
        break ;
      case GGS_sourceFileKind::enum_guiSourceFile:
        {
        }
        break ;
      case GGS_sourceFileKind::kNotBuilt:
        break ;
      }
    }
  }
  const GGS_string var_cas_newFileListContents = template_filewrapper_targetGenerationFileWrapper_makefile_file_list (inLexique, var_cas_handCodedSourceDirectoryList, var_cas_handCodedSourceList, var_cas_generatedFileListForMakefile, var_cas_inGenerateForGalgas1) ;
  GGS_string var_cas_fileListPath = (var_cas_inProjectSourceFilePath.ggs_string ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/GALGAS_OUTPUT/file_list.mke")) ;
  GGS_bool automatic_var_17767_0 ;
  if (var_cas_newFileListContents.isBuilt ()) {
    var_cas_newFileListContents (HERE)->method_writeToFileWhenDifferentContents (inLexique, var_cas_fileListPath, automatic_var_17767_0 COMMA_SOURCE_FILE_AT_LINE (316)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_updateTargets\n") ;
  #endif
}

//---------------------------------------------------------------------------*

