//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'targetGeneration.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 30th, 2010, at 23h9'21"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "targetGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "targetGeneration.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of wrapper 'targetGenerationFileWrapper'           *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File 'makefile-i386-linux-on-macosx/build.command'

const char * gWrapperFileContent_0_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n";

static const cRegularFileWrapperEx gWrapperFile_0_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_0_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-i386-linux-on-macosx/clean.command'

const char * gWrapperFileContent_1_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_1_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_1_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-i386-linux-on-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_1 [3] = {
  & gWrapperFile_0_targetGenerationFileWrapper,
  & gWrapperFile_1_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-i386-linux-on-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_1 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-i386-linux-on-macosx'

const cDirectoryWrapperEx gWrapperDirectory_1_targetGenerationFileWrapper (
  "makefile-i386-linux-on-macosx",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_1,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_1
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/build.command'

const char * gWrapperFileContent_2_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_2_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_2_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/build64.command'

const char * gWrapperFileContent_3_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_3_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_3_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/clean.command'

const char * gWrapperFileContent_4_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_4_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_4_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx/clean64.command'

const char * gWrapperFileContent_5_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_5_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_5_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_2 [5] = {
  & gWrapperFile_2_targetGenerationFileWrapper,
  & gWrapperFile_3_targetGenerationFileWrapper,
  & gWrapperFile_4_targetGenerationFileWrapper,
  & gWrapperFile_5_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_2 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx'

const cDirectoryWrapperEx gWrapperDirectory_2_targetGenerationFileWrapper (
  "makefile-macosx",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_2,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_2
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/build.command'

const char * gWrapperFileContent_6_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_6_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_6_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/build64.command'

const char * gWrapperFileContent_7_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_7_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_7_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/clean.command'

const char * gWrapperFileContent_8_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_8_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_8_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-intel/clean64.command'

const char * gWrapperFileContent_9_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_9_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_9_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-intel' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_3 [5] = {
  & gWrapperFile_6_targetGenerationFileWrapper,
  & gWrapperFile_7_targetGenerationFileWrapper,
  & gWrapperFile_8_targetGenerationFileWrapper,
  & gWrapperFile_9_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-intel' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_3 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-intel'

const cDirectoryWrapperEx gWrapperDirectory_3_targetGenerationFileWrapper (
  "makefile-macosx-intel",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_3,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_3
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/build.command'

const char * gWrapperFileContent_10_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_10_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_10_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/build64.command'

const char * gWrapperFileContent_11_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_11_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_11_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/clean.command'

const char * gWrapperFileContent_12_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_12_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_12_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-ppc/clean64.command'

const char * gWrapperFileContent_13_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_13_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_13_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-ppc' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_4 [5] = {
  & gWrapperFile_10_targetGenerationFileWrapper,
  & gWrapperFile_11_targetGenerationFileWrapper,
  & gWrapperFile_12_targetGenerationFileWrapper,
  & gWrapperFile_13_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-ppc' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_4 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-ppc'

const cDirectoryWrapperEx gWrapperDirectory_4_targetGenerationFileWrapper (
  "makefile-macosx-ppc",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_4,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_4
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/build.command'

const char * gWrapperFileContent_14_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_14_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_14_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/build64.command'

const char * gWrapperFileContent_15_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_15_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_15_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/clean.command'

const char * gWrapperFileContent_16_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_16_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_16_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-macosx-universal/clean64.command'

const char * gWrapperFileContent_17_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_17_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_17_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-macosx-universal' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_5 [5] = {
  & gWrapperFile_14_targetGenerationFileWrapper,
  & gWrapperFile_15_targetGenerationFileWrapper,
  & gWrapperFile_16_targetGenerationFileWrapper,
  & gWrapperFile_17_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-macosx-universal' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_5 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-macosx-universal'

const cDirectoryWrapperEx gWrapperDirectory_5_targetGenerationFileWrapper (
  "makefile-macosx-universal",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_5,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_5
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-mingw-on-macosx/build.command'

const char * gWrapperFileContent_18_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all -j `sysctl -n hw.ncpu`\n";

static const cRegularFileWrapperEx gWrapperFile_18_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_18_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-mingw-on-macosx/clean.command'

const char * gWrapperFileContent_19_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_19_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_19_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-mingw-on-macosx' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_6 [3] = {
  & gWrapperFile_18_targetGenerationFileWrapper,
  & gWrapperFile_19_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-mingw-on-macosx' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_6 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-mingw-on-macosx'

const cDirectoryWrapperEx gWrapperDirectory_6_targetGenerationFileWrapper (
  "makefile-mingw-on-macosx",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_6,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_6
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/build.bat'

const char * gWrapperFileContent_20_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_20_targetGenerationFileWrapper (
  "build.bat",
  "bat",
  gWrapperFileContent_20_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/clean.bat'

const char * gWrapperFileContent_21_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make clean --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_21_targetGenerationFileWrapper (
  "clean.bat",
  "bat",
  gWrapperFileContent_21_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-msys-on-win32/install.bat'

const char * gWrapperFileContent_22_targetGenerationFileWrapper = // 1 bytes
"PATH=C:\\msys\\1.0\\bin;C:\\MinGW\\bin;%PATH%\n"
  "sh -c \"make install --warn-undefined-variables\"\n"
  "pause\n";

static const cRegularFileWrapperEx gWrapperFile_22_targetGenerationFileWrapper (
  "install.bat",
  "bat",
  gWrapperFileContent_22_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-msys-on-win32' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_7 [4] = {
  & gWrapperFile_20_targetGenerationFileWrapper,
  & gWrapperFile_21_targetGenerationFileWrapper,
  & gWrapperFile_22_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-msys-on-win32' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_7 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-msys-on-win32'

const cDirectoryWrapperEx gWrapperDirectory_7_targetGenerationFileWrapper (
  "makefile-msys-on-win32",
  3,
  gWrapperAllFiles_targetGenerationFileWrapper_7,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_7
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/build.command'

const char * gWrapperFileContent_23_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables all\n";

static const cRegularFileWrapperEx gWrapperFile_23_targetGenerationFileWrapper (
  "build.command",
  "command",
  gWrapperFileContent_23_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/build64.command'

const char * gWrapperFileContent_24_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 all\n";

static const cRegularFileWrapperEx gWrapperFile_24_targetGenerationFileWrapper (
  "build64.command",
  "command",
  gWrapperFileContent_24_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/clean.command'

const char * gWrapperFileContent_25_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables clean\n";

static const cRegularFileWrapperEx gWrapperFile_25_targetGenerationFileWrapper (
  "clean.command",
  "command",
  gWrapperFileContent_25_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'makefile-unix/clean64.command'

const char * gWrapperFileContent_26_targetGenerationFileWrapper = // 1 bytes
"#!/bin/sh\n"
  "cd `dirname $0` && time make --warn-undefined-variables -f makefile64 clean\n";

static const cRegularFileWrapperEx gWrapperFile_26_targetGenerationFileWrapper (
  "clean64.command",
  "command",
  gWrapperFileContent_26_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'makefile-unix' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_8 [5] = {
  & gWrapperFile_23_targetGenerationFileWrapper,
  & gWrapperFile_24_targetGenerationFileWrapper,
  & gWrapperFile_25_targetGenerationFileWrapper,
  & gWrapperFile_26_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'makefile-unix' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_8 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'makefile-unix'

const cDirectoryWrapperEx gWrapperDirectory_8_targetGenerationFileWrapper (
  "makefile-unix",
  4,
  gWrapperAllFiles_targetGenerationFileWrapper_8,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_8
) ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/Credits.rtf'

const char * gWrapperFileContent_28_targetGenerationFileWrapper = // 1 bytes
"{\\rtf1\\mac\\ansicpg10000\\cocoartf824\\cocoasubrtf380\n"
  "{\\fonttbl\\f0\\fswiss\\fcharset77 Helvetica-Bold;}\n"
  "{\\colortbl;\\red255\\green255\\blue255;}\n"
  "\\vieww9000\\viewh8400\\viewkind0\n"
  "\\pard\\tx560\\tx1120\\tx1680\\tx2240\\tx2800\\tx3360\\tx3920\\tx4480\\tx5040\\tx5600\\tx6160\\tx6720\\ql\\qnatural\n"
  "\n"
  "\\f0\\b\\fs24 \\cf0 GALGAS Cocoa Project\\\n"
  "}\n";

static const cRegularFileWrapperEx gWrapperFile_28_targetGenerationFileWrapper (
  "Credits.rtf",
  "rtf",
  gWrapperFileContent_28_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- File 'English.lproj/InfoPlist.strings'

const char * gWrapperFileContent_29_targetGenerationFileWrapper = // 1 bytes
"/* Localized versions of Info.plist keys */\n"
  "CFBundleName = \"cocoa%!PROJECT_NAME%\";\n"
  "CFBundleShortVersionString = \"1.0.0\";\n"
  "CFBundleGetInfoString = \"Cocoa %!PROJECT_NAME% version 1.0.0, Copyright __MyCompanyName__.\";\n"
  "NSHumanReadableCopyright = \"Copyright __MyCompanyName__.\";\n"
  "LSMinimumSystemVersion = \"10.3.9\";\n"
  "\n";

static const cRegularFileWrapperEx gWrapperFile_29_targetGenerationFileWrapper (
  "InfoPlist.strings",
  "strings",
  gWrapperFileContent_29_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'English.lproj' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_10 [3] = {
  & gWrapperFile_28_targetGenerationFileWrapper,
  & gWrapperFile_29_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'English.lproj' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_10 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'English.lproj'

const cDirectoryWrapperEx gWrapperDirectory_10_targetGenerationFileWrapper (
  "English.lproj",
  2,
  gWrapperAllFiles_targetGenerationFileWrapper_10,
  0,
  gWrapperAllDirectories_targetGenerationFileWrapper_10
) ;

//---------------------------------------------------------------------------*

//--- File 'xcode-project/Info.plist'

const char * gWrapperFileContent_27_targetGenerationFileWrapper = // 1 bytes
"<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
  "<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
  "<plist version=\"1.0\">\n"
  "<dict>\n"
  "     <key>CFBundleDevelopmentRegion</key>\n"
  "     <string>English</string>\n"
  "     <key>CFBundleExecutable</key>\n"
  "     <string>${EXECUTABLE_NAME}</string>\n"
  "     <key>CFBundleIconFile</key>\n"
  "     <string></string>\n"
  "     <key>CFBundleIdentifier</key>\n"
  "     <string>com.yourcompany.%!PROJECT_NAME%</string>\n"
  "     <key>CFBundleInfoDictionaryVersion</key>\n"
  "     <string>6.0</string>\n"
  "     <key>CFBundleName</key>\n"
  "     <string>${PRODUCT_NAME}</string>\n"
  "     <key>CFBundlePackageType</key>\n"
  "     <string>APPL</string>\n"
  "     <key>CFBundleSignature</key>\n"
  "     <string>\?\?\?\?</string>\n"
  "     <key>CFBundleVersion</key>\n"
  "     <string>1.0</string>\n"
  "     <key>NSMainNibFile</key>\n"
  "     <string>MainMenu</string>\n"
  "     <key>NSPrincipalClass</key>\n"
  "     <string>NSApplication</string>\n"
  "    <key>CFBundleDocumentTypes</key>\n"
  "    <array>\n"
  "        <dict>\n"
  "            <key>CFBundleTypeExtensions</key>\n"
  "            <array>\n"
  "                <string>%!PROJECT_NAME%</string>\n"
  "            </array>\n"
  "            <key>CFBundleTypeName</key>\n"
  "            <string>%!PROJECT_NAME% Source</string>\n"
  "            <key>CFBundleTypeOSTypes</key>\n"
  "            <array>\n"
  "                <string>TEXT</string>\n"
  "            </array>\n"
  "            <key>CFBundleTypeRole</key>\n"
  "            <string>Editor</string>\n"
  "            <key>LSTypeIsPackage</key>\n"
  "            <false/>\n"
  "            <key>NSDocumentClass</key>\n"
  "            <string>OC_GGS_Document</string>\n"
  "        </dict>\n"
  "    </array>\n"
  "</dict>\n"
  "</plist>\n";

static const cRegularFileWrapperEx gWrapperFile_27_targetGenerationFileWrapper (
  "Info.plist",
  "plist",
  gWrapperFileContent_27_targetGenerationFileWrapper
) ;

//---------------------------------------------------------------------------*

//--- All files of 'xcode-project' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_9 [2] = {
  & gWrapperFile_27_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of 'xcode-project' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_9 [2] = {
  & gWrapperDirectory_10_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory 'xcode-project'

const cDirectoryWrapperEx gWrapperDirectory_9_targetGenerationFileWrapper (
  "xcode-project",
  1,
  gWrapperAllFiles_targetGenerationFileWrapper_9,
  1,
  gWrapperAllDirectories_targetGenerationFileWrapper_9
) ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapperEx * gWrapperAllFiles_targetGenerationFileWrapper_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapperEx * gWrapperAllDirectories_targetGenerationFileWrapper_0 [10] = {
  & gWrapperDirectory_1_targetGenerationFileWrapper,
  & gWrapperDirectory_2_targetGenerationFileWrapper,
  & gWrapperDirectory_3_targetGenerationFileWrapper,
  & gWrapperDirectory_4_targetGenerationFileWrapper,
  & gWrapperDirectory_5_targetGenerationFileWrapper,
  & gWrapperDirectory_6_targetGenerationFileWrapper,
  & gWrapperDirectory_7_targetGenerationFileWrapper,
  & gWrapperDirectory_8_targetGenerationFileWrapper,
  & gWrapperDirectory_9_targetGenerationFileWrapper,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapperEx gWrapperDirectory_0_targetGenerationFileWrapper (
  "",
  0,
  gWrapperAllFiles_targetGenerationFileWrapper_0,
  9,
  gWrapperAllDirectories_targetGenerationFileWrapper_0
) ;

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_intel_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_i386_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_intel_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_i386_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_ppc_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_ppc_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_ppc_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:$(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build ppc executable                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile-macosx-ppc/%:\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build i386 executable                                *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile-macosx-intel/%:\n"
      "\t$(MAKE) -C ../makefile-macosx-intel $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build EXECUTABLES                                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE):../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE_DEBUG):../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_universal_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'all' goal                                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "all:$(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        'clean' goal                                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "clean:\n"
      "\trm -f $(EXECUTABLE) $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build ppc executable                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile-macosx-ppc/%:\n"
      "\t$(MAKE) -C ../makefile-macosx-ppc -f makefile64 $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build i386 executable                                *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "../makefile-macosx-intel/%:\n"
      "\t$(MAKE) -C ../makefile-macosx-intel -f makefile64 $<\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Build EXECUTABLES                                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE):../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE) ../makefile-macosx-intel/$(EXECUTABLE) -output $(EXECUTABLE)\n"
      "\tlipo -info $(EXECUTABLE)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "$(EXECUTABLE_DEBUG):../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG)\n"
      "\tlipo -create ../makefile-macosx-ppc/$(EXECUTABLE_DEBUG) ../makefile-macosx-intel/$(EXECUTABLE_DEBUG) -output $(EXECUTABLE_DEBUG)\n"
      "\tlipo -info $(EXECUTABLE_DEBUG)\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_macosx_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "# MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bits command line tools for Mac OS X   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Linker Options for Mac OS X                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                      Include gcc tools for MAC OS X                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/macosx_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/unix_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_unix_makefile64' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile64 (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#    MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 64-bit command line tools for Unix     *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "64_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects64\n"
      "DEBUG_OBJECTS_DIR := debug_objects64\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Unix                           *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := \n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                            Include Unix tools                             *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/unix_gcc_tools_64.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_i386_linux_on_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_i386_linux_on_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" 32-bit command line tools for x86 Linux, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << "\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Install directory (for \"install\" goal)                   *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /usr/local/bin\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Link Options for i386 Linux                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS :=\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                  Include i386 Linux tools for MAC OS X                    *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/x86linux_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_mingw_on_macosx_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_mingw_on_macosx_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built on Mac OS X*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                     Include MinGW tools for MAC OS X                      *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/mingw_on_macosx_gcc_tools_32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_msys_on_win32_makefile' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_msys_on_win32_makefile (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#MAKEFILE for building \"" ;
    result << var_cas_PROJECT_NAME ;
    result << "\" command line tools for Win32, built with MSYS*\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                               Executables                                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "EXECUTABLE := " ;
    result << var_cas_PROJECT_NAME ;
    result << ".exe\n"
      "EXECUTABLE_DEBUG := " ;
    result << var_cas_PROJECT_NAME ;
    result << "_debug.exe\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#              Install directory (for \"install\" goal)                       *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "INSTALL_DIR := /C/WINDOWS/system32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Object files directories                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "OBJECTS_DIR       := objects\n"
      "DEBUG_OBJECTS_DIR := debug_objects\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                         Linker Options for Win32                          *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "PLATFORM_LINKER_OPTIONS := -lcomdlg32\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                        Include Common Definitions                         *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include ../galgas_sources/GALGAS_OUTPUT/file_list.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                       Include MinGW tools for MSYS                        *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/msys_on_win32.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n"
      "#                                                                           *\n"
      "#                Include makefile that performs actual work                 *\n"
      "#                                                                           *\n"
      "#---------------------------------------------------------------------------*\n"
      "\n"
      "include $(LIB_PM_PATH)/included_makefiles/generic_makefile.mke\n"
      "\n"
      "#---------------------------------------------------------------------------*\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//'makefile_info_plist' template of 'targetGenerationFileWrapper' filewrapper*
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
template_filewrapper_targetGenerationFileWrapper_makefile_info_plist (C_CompilerEx & /* inLexique */,
                                const GGS_string& var_cas_PROJECT_NAME) {
  C_String result ;
  const bool isBuilt = var_cas_PROJECT_NAME.isBuilt () ;
  if (isBuilt) {
    result << "<\?xml version=\"1.0\" encoding=\"UTF-8\"\?>\n"
      "<!DOCTYPE plist PUBLIC \"-//Apple Computer//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n"
      "<plist version=\"1.0\">\n"
      "<dict>\n"
      "     <key>CFBundleDevelopmentRegion</key>\n"
      "     <string>English</string>\n"
      "     <key>CFBundleExecutable</key>\n"
      "     <string>${EXECUTABLE_NAME}</string>\n"
      "     <key>CFBundleIconFile</key>\n"
      "     <string></string>\n"
      "     <key>CFBundleIdentifier</key>\n"
      "     <string>com.yourcompany." ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "     <key>CFBundleInfoDictionaryVersion</key>\n"
      "     <string>6.0</string>\n"
      "     <key>CFBundleName</key>\n"
      "     <string>${PRODUCT_NAME}</string>\n"
      "     <key>CFBundlePackageType</key>\n"
      "     <string>APPL</string>\n"
      "     <key>CFBundleSignature</key>\n"
      "     <string>\?\?\?\?</string>\n"
      "     <key>CFBundleVersion</key>\n"
      "     <string>1.0</string>\n"
      "     <key>NSMainNibFile</key>\n"
      "     <string>MainMenu</string>\n"
      "     <key>NSPrincipalClass</key>\n"
      "     <string>NSApplication</string>\n"
      "    <key>CFBundleDocumentTypes</key>\n"
      "    <array>\n"
      "        <dict>\n"
      "            <key>CFBundleTypeExtensions</key>\n"
      "            <array>\n"
      "                <string>" ;
    result << var_cas_PROJECT_NAME ;
    result << "</string>\n"
      "            </array>\n"
      "            <key>CFBundleTypeName</key>\n"
      "            <string>" ;
    result << var_cas_PROJECT_NAME ;
    result << " Source</string>\n"
      "            <key>CFBundleTypeOSTypes</key>\n"
      "            <array>\n"
      "                <string>TEXT</string>\n"
      "            </array>\n"
      "            <key>CFBundleTypeRole</key>\n"
      "            <string>Editor</string>\n"
      "            <key>LSTypeIsPackage</key>\n"
      "            <false/>\n"
      "            <key>NSDocumentClass</key>\n"
      "            <string>OC_GGS_Document</string>\n"
      "        </dict>\n"
      "    </array>\n"
      "</dict>\n"
      "</plist>\n" ;
  }
  return GGS_string (isBuilt, result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateXcodeProjectTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateXcodeProjectTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateXcodeProjectTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/xcode-project")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (42)) ;
  }
  GGS_bool automatic_var_2097_0 ;
  const GGS_string temp_2073 = template_filewrapper_targetGenerationFileWrapper_makefile_info_plist (inLexique, var_cas_inProjectName) ;
  if (temp_2073.isBuilt ()) {
    temp_2073 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/Info.plist")), automatic_var_2097_0 COMMA_SOURCE_FILE_AT_LINE (43)) ;
  }
  const GGS_string temp_2140 = (var_cas_dir).operator_concat (GGS_string ("/English.lproj")) ;
  if (temp_2140.isBuilt ()) {
    temp_2140 (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (45)) ;
  }
  const GGS_string var_cas_InfoPlist_strings_path = (var_cas_dir).operator_concat (GGS_string ("/English.lproj/InfoPlist.strings")) ;
  const GGS_bool cond_2417 = (var_cas_InfoPlist_strings_path.reader_fileExists ()).operator_not () ;
  if (cond_2417.isBuiltAndTrue ()) {
    const GGS_string temp_2384 = GGS_string (gWrapperFileContent_29_targetGenerationFileWrapper) ;
    if (temp_2384.isBuilt ()) {
      temp_2384 (HERE)->method_writeToFile (inLexique, var_cas_InfoPlist_strings_path COMMA_SOURCE_FILE_AT_LINE (48)) ;
    }
  }
  const GGS_string var_cas_Credits_rtf_path = (var_cas_dir).operator_concat (GGS_string ("/English.lproj/Credits.rtf")) ;
  const GGS_bool cond_2666 = (var_cas_Credits_rtf_path.reader_fileExists ()).operator_not () ;
  if (cond_2666.isBuiltAndTrue ()) {
    const GGS_string temp_2639 = GGS_string (gWrapperFileContent_28_targetGenerationFileWrapper) ;
    if (temp_2639.isBuilt ()) {
      temp_2639 (HERE)->method_writeToFile (inLexique, var_cas_Credits_rtf_path COMMA_SOURCE_FILE_AT_LINE (52)) ;
    }
  }
  const GGS_string var_cas_libpmPosixPath = GGS_string::constructor_stringWithEnvironmentVariable (inLexique, GGS_string ("LIBPM_PATH") COMMA_SOURCE_FILE_AT_LINE (55)).reader_unixPathWithNativePath () ;
  const GGS_string temp_2853 = (var_cas_dir).operator_concat (GGS_string ("/libpm")) ;
  if (temp_2853.isBuilt ()) {
    temp_2853 (HERE)->method_makeSymbolicLinkWithPath (inLexique, var_cas_libpmPosixPath COMMA_SOURCE_FILE_AT_LINE (56)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateXcodeProjectTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateMsysOnWin32Target"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMsysOnWin32Target (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMsysOnWin32Target at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-msys-on-win32")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (66)) ;
  }
  GGS_bool automatic_var_3291_0 ;
  const GGS_string temp_3268 = GGS_string (gWrapperFileContent_20_targetGenerationFileWrapper) ;
  if (temp_3268.isBuilt ()) {
    temp_3268 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.bat")), automatic_var_3291_0 COMMA_SOURCE_FILE_AT_LINE (67)) ;
  }
  GGS_bool automatic_var_3429_0 ;
  const GGS_string temp_3406 = GGS_string (gWrapperFileContent_21_targetGenerationFileWrapper) ;
  if (temp_3406.isBuilt ()) {
    temp_3406 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.bat")), automatic_var_3429_0 COMMA_SOURCE_FILE_AT_LINE (68)) ;
  }
  GGS_bool automatic_var_3571_0 ;
  const GGS_string temp_3546 = GGS_string (gWrapperFileContent_22_targetGenerationFileWrapper) ;
  if (temp_3546.isBuilt ()) {
    temp_3546 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/install.bat")), automatic_var_3571_0 COMMA_SOURCE_FILE_AT_LINE (69)) ;
  }
  GGS_bool automatic_var_3720_0 ;
  const GGS_string temp_3698 = template_filewrapper_targetGenerationFileWrapper_makefile_msys_on_win32_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_3698.isBuilt ()) {
    temp_3698 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_3720_0 COMMA_SOURCE_FILE_AT_LINE (70)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMsysOnWin32Target\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generateMinGWOnMacOSXTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMinGWOnMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMinGWOnMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-mingw-on-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (80)) ;
  }
  GGS_bool automatic_var_4165_0 ;
  const GGS_string temp_4138 = GGS_string (gWrapperFileContent_18_targetGenerationFileWrapper) ;
  if (temp_4138.isBuilt ()) {
    temp_4138 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_4165_0 COMMA_SOURCE_FILE_AT_LINE (81)) ;
  }
  GGS_bool automatic_var_4323_0 ;
  const GGS_string temp_4296 = GGS_string (gWrapperFileContent_19_targetGenerationFileWrapper) ;
  if (temp_4296.isBuilt ()) {
    temp_4296 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_4323_0 COMMA_SOURCE_FILE_AT_LINE (82)) ;
  }
  GGS_bool automatic_var_4474_0 ;
  const GGS_string temp_4452 = template_filewrapper_targetGenerationFileWrapper_makefile_mingw_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_4452.isBuilt ()) {
    temp_4452 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_4474_0 COMMA_SOURCE_FILE_AT_LINE (83)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMinGWOnMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "generateMakefileMacOSXTarget"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (93)) ;
  }
  GGS_bool automatic_var_4902_0 ;
  const GGS_string temp_4875 = GGS_string (gWrapperFileContent_2_targetGenerationFileWrapper) ;
  if (temp_4875.isBuilt ()) {
    temp_4875 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_4902_0 COMMA_SOURCE_FILE_AT_LINE (94)) ;
  }
  GGS_bool automatic_var_5051_0 ;
  const GGS_string temp_5024 = GGS_string (gWrapperFileContent_4_targetGenerationFileWrapper) ;
  if (temp_5024.isBuilt ()) {
    temp_5024 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_5051_0 COMMA_SOURCE_FILE_AT_LINE (95)) ;
  }
  GGS_bool automatic_var_5204_0 ;
  const GGS_string temp_5175 = GGS_string (gWrapperFileContent_3_targetGenerationFileWrapper) ;
  if (temp_5175.isBuilt ()) {
    temp_5175 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_5204_0 COMMA_SOURCE_FILE_AT_LINE (96)) ;
  }
  GGS_bool automatic_var_5357_0 ;
  const GGS_string temp_5328 = GGS_string (gWrapperFileContent_5_targetGenerationFileWrapper) ;
  if (temp_5328.isBuilt ()) {
    temp_5328 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_5357_0 COMMA_SOURCE_FILE_AT_LINE (97)) ;
  }
  GGS_bool automatic_var_5499_0 ;
  const GGS_string temp_5477 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_5477.isBuilt ()) {
    temp_5477 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_5499_0 COMMA_SOURCE_FILE_AT_LINE (98)) ;
  }
  GGS_bool automatic_var_5645_0 ;
  const GGS_string temp_5621 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_5621.isBuilt ()) {
    temp_5621 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_5645_0 COMMA_SOURCE_FILE_AT_LINE (99)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of routine "generateMakefileIntelMacOSXTarget"        *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileIntelMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileIntelMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-intel")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (109)) ;
  }
  GGS_bool automatic_var_6090_0 ;
  const GGS_string temp_6063 = GGS_string (gWrapperFileContent_6_targetGenerationFileWrapper) ;
  if (temp_6063.isBuilt ()) {
    temp_6063 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_6090_0 COMMA_SOURCE_FILE_AT_LINE (110)) ;
  }
  GGS_bool automatic_var_6245_0 ;
  const GGS_string temp_6218 = GGS_string (gWrapperFileContent_8_targetGenerationFileWrapper) ;
  if (temp_6218.isBuilt ()) {
    temp_6218 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_6245_0 COMMA_SOURCE_FILE_AT_LINE (111)) ;
  }
  GGS_bool automatic_var_6404_0 ;
  const GGS_string temp_6375 = GGS_string (gWrapperFileContent_7_targetGenerationFileWrapper) ;
  if (temp_6375.isBuilt ()) {
    temp_6375 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_6404_0 COMMA_SOURCE_FILE_AT_LINE (112)) ;
  }
  GGS_bool automatic_var_6563_0 ;
  const GGS_string temp_6534 = GGS_string (gWrapperFileContent_9_targetGenerationFileWrapper) ;
  if (temp_6534.isBuilt ()) {
    temp_6534 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_6563_0 COMMA_SOURCE_FILE_AT_LINE (113)) ;
  }
  GGS_bool automatic_var_6711_0 ;
  const GGS_string temp_6689 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_6689.isBuilt ()) {
    temp_6689 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_6711_0 COMMA_SOURCE_FILE_AT_LINE (114)) ;
  }
  GGS_bool automatic_var_6863_0 ;
  const GGS_string temp_6839 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_intel_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_6839.isBuilt ()) {
    temp_6839 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_6863_0 COMMA_SOURCE_FILE_AT_LINE (115)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileIntelMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "generateMakefilePPCMacOSXTarget"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefilePPCMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefilePPCMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-ppc")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (125)) ;
  }
  GGS_bool automatic_var_7302_0 ;
  const GGS_string temp_7275 = GGS_string (gWrapperFileContent_10_targetGenerationFileWrapper) ;
  if (temp_7275.isBuilt ()) {
    temp_7275 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_7302_0 COMMA_SOURCE_FILE_AT_LINE (126)) ;
  }
  GGS_bool automatic_var_7455_0 ;
  const GGS_string temp_7428 = GGS_string (gWrapperFileContent_12_targetGenerationFileWrapper) ;
  if (temp_7428.isBuilt ()) {
    temp_7428 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_7455_0 COMMA_SOURCE_FILE_AT_LINE (127)) ;
  }
  GGS_bool automatic_var_7612_0 ;
  const GGS_string temp_7583 = GGS_string (gWrapperFileContent_11_targetGenerationFileWrapper) ;
  if (temp_7583.isBuilt ()) {
    temp_7583 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_7612_0 COMMA_SOURCE_FILE_AT_LINE (128)) ;
  }
  GGS_bool automatic_var_7769_0 ;
  const GGS_string temp_7740 = GGS_string (gWrapperFileContent_13_targetGenerationFileWrapper) ;
  if (temp_7740.isBuilt ()) {
    temp_7740 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_7769_0 COMMA_SOURCE_FILE_AT_LINE (129)) ;
  }
  GGS_bool automatic_var_7915_0 ;
  const GGS_string temp_7893 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_7893.isBuilt ()) {
    temp_7893 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_7915_0 COMMA_SOURCE_FILE_AT_LINE (130)) ;
  }
  GGS_bool automatic_var_8065_0 ;
  const GGS_string temp_8041 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_ppc_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_8041.isBuilt ()) {
    temp_8041 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_8065_0 COMMA_SOURCE_FILE_AT_LINE (131)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefilePPCMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of routine "generateMakefileUniversalMacOSXTarget"      *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileUniversalMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileUniversalMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-macosx-universal")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (141)) ;
  }
  GGS_bool automatic_var_8522_0 ;
  const GGS_string temp_8495 = GGS_string (gWrapperFileContent_14_targetGenerationFileWrapper) ;
  if (temp_8495.isBuilt ()) {
    temp_8495 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_8522_0 COMMA_SOURCE_FILE_AT_LINE (142)) ;
  }
  GGS_bool automatic_var_8681_0 ;
  const GGS_string temp_8654 = GGS_string (gWrapperFileContent_16_targetGenerationFileWrapper) ;
  if (temp_8654.isBuilt ()) {
    temp_8654 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_8681_0 COMMA_SOURCE_FILE_AT_LINE (143)) ;
  }
  GGS_bool automatic_var_8844_0 ;
  const GGS_string temp_8815 = GGS_string (gWrapperFileContent_15_targetGenerationFileWrapper) ;
  if (temp_8815.isBuilt ()) {
    temp_8815 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_8844_0 COMMA_SOURCE_FILE_AT_LINE (144)) ;
  }
  GGS_bool automatic_var_9007_0 ;
  const GGS_string temp_8978 = GGS_string (gWrapperFileContent_17_targetGenerationFileWrapper) ;
  if (temp_8978.isBuilt ()) {
    temp_8978 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_9007_0 COMMA_SOURCE_FILE_AT_LINE (145)) ;
  }
  GGS_bool automatic_var_9159_0 ;
  const GGS_string temp_9137 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_9137.isBuilt ()) {
    temp_9137 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_9159_0 COMMA_SOURCE_FILE_AT_LINE (146)) ;
  }
  GGS_bool automatic_var_9315_0 ;
  const GGS_string temp_9291 = template_filewrapper_targetGenerationFileWrapper_makefile_macosx_universal_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_9291.isBuilt ()) {
    temp_9291 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_9315_0 COMMA_SOURCE_FILE_AT_LINE (147)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileUniversalMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of routine "generateMakefileUnixTarget"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateMakefileUnixTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateMakefileUnixTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-unix")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) ;
  }
  GGS_bool automatic_var_9737_0 ;
  const GGS_string temp_9710 = GGS_string (gWrapperFileContent_23_targetGenerationFileWrapper) ;
  if (temp_9710.isBuilt ()) {
    temp_9710 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_9737_0 COMMA_SOURCE_FILE_AT_LINE (158)) ;
  }
  GGS_bool automatic_var_9884_0 ;
  const GGS_string temp_9857 = GGS_string (gWrapperFileContent_25_targetGenerationFileWrapper) ;
  if (temp_9857.isBuilt ()) {
    temp_9857 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_9884_0 COMMA_SOURCE_FILE_AT_LINE (159)) ;
  }
  GGS_bool automatic_var_10035_0 ;
  const GGS_string temp_10006 = GGS_string (gWrapperFileContent_24_targetGenerationFileWrapper) ;
  if (temp_10006.isBuilt ()) {
    temp_10006 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build64.command")), automatic_var_10035_0 COMMA_SOURCE_FILE_AT_LINE (160)) ;
  }
  GGS_bool automatic_var_10186_0 ;
  const GGS_string temp_10157 = GGS_string (gWrapperFileContent_26_targetGenerationFileWrapper) ;
  if (temp_10157.isBuilt ()) {
    temp_10157 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean64.command")), automatic_var_10186_0 COMMA_SOURCE_FILE_AT_LINE (161)) ;
  }
  GGS_bool automatic_var_10326_0 ;
  const GGS_string temp_10304 = template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_10304.isBuilt ()) {
    temp_10304 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_10326_0 COMMA_SOURCE_FILE_AT_LINE (162)) ;
  }
  GGS_bool automatic_var_10470_0 ;
  const GGS_string temp_10446 = template_filewrapper_targetGenerationFileWrapper_makefile_unix_makefile64 (inLexique, var_cas_inProjectName) ;
  if (temp_10446.isBuilt ()) {
    temp_10446 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile64")), automatic_var_10470_0 COMMA_SOURCE_FILE_AT_LINE (163)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateMakefileUnixTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of routine "generateI386LinuxOnMacOSXTarget"         *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_generateI386LinuxOnMacOSXTarget (C_CompilerEx & inLexique,
                                const GGS_string  var_cas_inProjectDirectory,
                                const GGS_string  var_cas_inProjectName
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_generateI386LinuxOnMacOSXTarget at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_dir = (var_cas_inProjectDirectory).operator_concat (GGS_string ("/makefile-i386-linux-on-macosx")) ;
  if (var_cas_dir.isBuilt ()) {
    var_cas_dir (HERE)->method_makeDirectory (inLexique COMMA_SOURCE_FILE_AT_LINE (173)) ;
  }
  GGS_bool automatic_var_10929_0 ;
  const GGS_string temp_10902 = GGS_string (gWrapperFileContent_0_targetGenerationFileWrapper) ;
  if (temp_10902.isBuilt ()) {
    temp_10902 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/build.command")), automatic_var_10929_0 COMMA_SOURCE_FILE_AT_LINE (174)) ;
  }
  GGS_bool automatic_var_11092_0 ;
  const GGS_string temp_11065 = GGS_string (gWrapperFileContent_1_targetGenerationFileWrapper) ;
  if (temp_11065.isBuilt ()) {
    temp_11065 (HERE)->method_writeToExecutableFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/clean.command")), automatic_var_11092_0 COMMA_SOURCE_FILE_AT_LINE (175)) ;
  }
  GGS_bool automatic_var_11248_0 ;
  const GGS_string temp_11226 = template_filewrapper_targetGenerationFileWrapper_makefile_i386_linux_on_macosx_makefile (inLexique, var_cas_inProjectName) ;
  if (temp_11226.isBuilt ()) {
    temp_11226 (HERE)->method_writeToFileWhenDifferentContents (inLexique, (var_cas_dir).operator_concat (GGS_string ("/makefile")), automatic_var_11248_0 COMMA_SOURCE_FILE_AT_LINE (176)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_generateI386LinuxOnMacOSXTarget\n") ;
  #endif
}

//---------------------------------------------------------------------------*

