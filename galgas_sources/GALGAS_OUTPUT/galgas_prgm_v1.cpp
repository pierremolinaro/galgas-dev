//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'galgas_prgm_v1.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 31th, 2010, at 19h0'32"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/F_DisplayException.h"
#include "utilities/MF_MemoryControl.h"
#include "collections/TC_UniqueArray.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "command_line_interface/mainForLIBPM.h"
#include "utilities/MF_MemoryControl.h"
#include "command_line_interface/C_StringCommandLineOption.h"
#include "utilities/cpp-allocation.h"
#include "utilities/basic-allocation.h"

#ifdef TARGET_API_MAC_CARBON
  #include <SIOUX.H>
#endif

#ifdef COMPILE_FOR_WIN32
  #ifdef __MWERKS__
    #include <WINSIOUX.H>
  #endif
#endif

#include <typeinfo>

//---------------------------------------------------------------------------*

#include "XcodeProjectGeneration.h"
#include "galgas_LL1_grammar.h"
#include "galgas_prgm_v1.h"
#include "guiCompilation.h"
#include "lexiqueCompilation.h"
#include "lexiqueSemantics.h"
#include "predefinedTypes.h"
#include "programComponentCompilation.h"
#include "projectCreation.h"
#include "projectGlobalCheckings.h"
#include "projectLL1grammar.h"
#include "syntaxCompilation.h"
#include "targetGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgas_prgm_v1.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    P R O L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
galgas_prgm_v1_prologue (C_CompilerEx & inLexique,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
  const GGS_string var_cas_libpmVarName = GGS_string ("LIBPM_PATH") ;
  const GGS_bool cond_2782 = (var_cas_libpmVarName.reader_doesEnvironmentVariableExist ()).operator_not () ;
  if (cond_2782.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_libpmVarName)).operator_concat (GGS_string ("' environnement variable is not set; GALGAS requires it to be defined with the absolute path to the 'libpm' directory")) COMMA_SOURCE_FILE_AT_LINE (42)) ;
  }else if (cond_2782.isBuiltAndFalse ()) {
    const GGS_string var_cas_libpmPosixPath = GGS_string::constructor_stringWithEnvironmentVariable (inLexique, var_cas_libpmVarName COMMA_SOURCE_FILE_AT_LINE (43)).reader_unixPathWithNativePath () ;
    const GGS_bool cond_3208 = (var_cas_libpmPosixPath.reader_directoryExists ()).operator_not () ;
    if (cond_3208.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_libpmVarName)).operator_concat (GGS_string ("' environnement variable is set to '"))).operator_concat (GGS_string::constructor_stringWithEnvironmentVariable (inLexique, var_cas_libpmVarName COMMA_SOURCE_FILE_AT_LINE (46)))).operator_concat (GGS_string ("', but this value does not designate any directory (it should designate the 'libpm' directory")) COMMA_SOURCE_FILE_AT_LINE (48)) ;
    }else if (cond_3208.isBuiltAndFalse ()) {
      const GGS_string var_cas_libpmVersionFilePath = (var_cas_libpmPosixPath).operator_concat (GGS_string ("/version_libpm.h")) ;
      const GGS_bool cond_3627 = (var_cas_libpmVersionFilePath.reader_fileExists ()).operator_not () ;
      if (cond_3627.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_libpmVarName)).operator_concat (GGS_string ("' environnement variable is set to '"))).operator_concat (GGS_string::constructor_stringWithEnvironmentVariable (inLexique, var_cas_libpmVarName COMMA_SOURCE_FILE_AT_LINE (52)))).operator_concat (GGS_string ("', but this value does not designate a valid 'libpm' directory (it does not contain the 'version_libpm.h' file)")) COMMA_SOURCE_FILE_AT_LINE (54)) ;
      }
    }
  }
  const GGS_string var_cas_creationProjectName = GGS_string (gOption_galgas_5F_cli_5F_options_create_5F_project.reader_value ()) ;
  ::routine_projectCreation (inLexique,  var_cas_creationProjectName COMMA_SOURCE_FILE_AT_LINE (59)) ;
  const GGS_bool cond_3925 = GGS_bool (gOption_galgas_5F_cli_5F_options_printPredefinedLexicalActions.reader_value ()) ;
  if (cond_3925.isBuiltAndTrue ()) {
    ::routine_printPredefinedLexicalActions (inLexique COMMA_SOURCE_FILE_AT_LINE (61)) ;
  }
  ::routine_generatePredefinedTypeFiles (inLexique,  GGS_string (gOption_galgas_5F_cli_5F_options_generatePredefinedTypes.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (63)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    E P I L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
galgas_prgm_v1_epilogue (C_CompilerEx & /* inLexique */,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM  (const int argc, const char * argv []) {
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
  {
  //--- Input/output parameters
    const char * extensions [] = {"gOption", "gLexique", "gSemantics", "gSyntax", "gGrammar", "gGui", "gProgram", "gProject", NULL} ;
    const char * helpMessages [] = {"a GALGAS option source file", "a GALGAS lexique source file", "a GALGAS semantics source file", "a GALGAS syntax source file", "a GALGAS grammar source file", "a GALGAS GUI source file", "a GALGAS program source file", "a GALGAS project source file", NULL} ;
    TC_UniqueArray <C_String> sourceFilesArray ;
  //--- Analyze Command Line Options
    F_Analyze_CLI_Options (argc, argv,
                                 #ifndef DO_NOT_GENERATE_CHECKINGS
        "version GALGAS_BETA_VERSION" " [debug]",
      #else
        "version GALGAS_BETA_VERSION",
      #endif
                           sourceFilesArray,
                           extensions,
                           helpMessages) ;
  //--- Build galgas io object
    C_galgas_io * galgasIOptr = NULL ;
    macroMyNew (galgasIOptr, C_galgas_io (HERE)) ;
  //--- Common lexique object
    C_CompilerEx * commonLexique = NULL ;
    macroMyNew (commonLexique, C_CompilerEx (NULL, "", "", galgasIOptr COMMA_HERE)) ;
  //--- Ask Save On Close ? (Carbon and Windows SIOUX Only)
    #ifdef SIOUX_IS_IMPLEMENTED
      SIOUXSettings.asktosaveonclose = gOption_generic_5F_cli_5F_options_options_asktosaveonclose.mValue ;
    #endif
  //--- Enable 64 bit alloc debug ? Only if compiled in 64 bit and in debug mode
    #ifndef DO_NOT_GENERATE_CHECKINGS
      #ifdef __LP64__
        if (gOption_generic_5F_cli_5F_options_enable_5F_allocation_5F_debugging.mValue) {
          enableAllocDebugFor64BitTool () ;
        }
      #endif
    #endif
    try{
      verboseOptionOn = gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue ;
      galgas_prgm_v1_prologue (* commonLexique, sourceFilesArray) ;
      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        PMSInt16 r = 0 ;
          if (fileExtension.compare ("gOption") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (74)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (75)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (76)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (77)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (78)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (79))) ;
            ::routine_compileOptionComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (81)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (81)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gLexique") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (90)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (91)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (92)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (93)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (94)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (95))) ;
            ::routine_compileLexiqueComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (97)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (97)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gSemantics") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_bool cond_5863 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
            if (cond_5863.isBuiltAndTrue ()) {
              GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (107)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (108)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (110)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (112))) ;
              ::routine_compileSemanticsComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (114)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (114)) ;
            }else if (cond_5863.isBuiltAndFalse ()) {
              GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (116)) ;
              GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (117)) ;
              GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (118)) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
              GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
              GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (122)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (124)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (125)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (126))) ;
              const GGS_string _depExtension = GGS_string ("galgas-dep") ;
              const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
              if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                              _depExtension.string (),
                                              _depPath.string (),
                                              NULL,
                                              var_cas_inSourceFile,
                                              var_cas_lexiqueMapForUse,
                                              var_cas_semanticsComponentsMap,
                                              var_cas_syntaxComponentsMap,
                                              var_cas_grammarComponentsMap,
                                              var_cas_optionComponentsMap,
                                              var_cas_semanticContext
                                              COMMA_SOURCE_FILE_AT_LINE (128)) ;
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gSyntax") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_bool cond_7331 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
            if (cond_7331.isBuiltAndTrue ()) {
              GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (146)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (147)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (148)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (149)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (150)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (151))) ;
              ::routine_compileSyntaxComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (153)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (153)) ;
            }else if (cond_7331.isBuiltAndFalse ()) {
              GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (155)) ;
              GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) ;
              GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
              GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) ;
              GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (161)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (163)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (164)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (165))) ;
              const GGS_string _depExtension = GGS_string ("galgas-dep") ;
              const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
              if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                              _depExtension.string (),
                                              _depPath.string (),
                                              NULL,
                                              var_cas_inSourceFile,
                                              var_cas_lexiqueMapForUse,
                                              var_cas_semanticsComponentsMap,
                                              var_cas_syntaxComponentsMap,
                                              var_cas_grammarComponentsMap,
                                              var_cas_optionComponentsMap,
                                              var_cas_semanticContext
                                              COMMA_SOURCE_FILE_AT_LINE (167)) ;
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gGrammar") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (184)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (185)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (187)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (188)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (189))) ;
            ::routine_compileGrammarComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (193)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (191)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gGui") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (204)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (205)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (207)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (208)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (209))) ;
            ::routine_compileGuiComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (211)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (211)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gProgram") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_bool cond_10015 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
            if (cond_10015.isBuiltAndTrue ()) {
              GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (221)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (222)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (223)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (224)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (225)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (226))) ;
              ::routine_compileProgramComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (228)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (228)) ;
            }else if (cond_10015.isBuiltAndFalse ()) {
              GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (230)) ;
              GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ;
              GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (232)) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
              GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (234)) ;
              GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (236)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (238)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (240))) ;
              const GGS_string _depExtension = GGS_string ("galgas-dep") ;
              const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
              if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                              _depExtension.string (),
                                              _depPath.string (),
                                              NULL,
                                              var_cas_inSourceFile,
                                              var_cas_lexiqueMapForUse,
                                              var_cas_semanticsComponentsMap,
                                              var_cas_syntaxComponentsMap,
                                              var_cas_grammarComponentsMap,
                                              var_cas_optionComponentsMap,
                                              var_cas_semanticContext
                                              COMMA_SOURCE_FILE_AT_LINE (242)) ;
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gProject") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_string var_cas_outputDirectory = function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (262)) ;
            GGS_projectComponentAST var_cas_projectComponent ;
            const GGS_string _depExtension = GGS_string ("") ;
            const GGS_string _depPath = GGS_string ("") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              C_Grammar_projectLL_31_grammar::_performSourceFileParsing_ (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile,
                                            var_cas_projectComponent
                                            COMMA_SOURCE_FILE_AT_LINE (265)) ;
            }
            const GGS_bool cond_11892 = (var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (267)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (267))).operator_isNotEqual (var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension ()) ;
            if (cond_11892.isBuiltAndTrue ()) {
              var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (268)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the project name ('")).operator_concat (var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (269)))).operator_concat (GGS_string ("') should be the same as the source file base name ('"))).operator_concat (var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension ())).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (271)) ;
            }
            const GGS_string var_cas_targetName = var_cas_projectComponent.reader_mTargetName (inLexique COMMA_SOURCE_FILE_AT_LINE (273)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (273)) ;
            const GGS_bool cond_12107 = (var_cas_targetName).operator_isEqual (GGS_string ("")) ;
            if (cond_12107.isBuiltAndTrue ()) {
              var_cas_projectComponent.reader_mTargetName (inLexique COMMA_SOURCE_FILE_AT_LINE (275)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the target name should not be empty") COMMA_SOURCE_FILE_AT_LINE (276)) ;
            }
            ::routine_updateTargets (inLexique,  var_cas_inSourceFile,  var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (280)),  var_cas_targetName,  var_cas_projectComponent.reader_mGenerationFeatureList (inLexique COMMA_SOURCE_FILE_AT_LINE (282)),  var_cas_projectComponent.reader_mProjectSourceList (inLexique COMMA_SOURCE_FILE_AT_LINE (283)),  GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (278)) ;
            GGS_sourceFileMap  var_cas_sourceFileMap = GGS_sourceFileMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (287)) ;
            GGS_targetFileListMap var_cas_targetFileListMap = GGS_targetFileListMap::constructor_emptyMap () ;
            {
              GGS_projectSourceList::cEnumerator enumerator_12560 (var_cas_projectComponent.reader_mProjectSourceList (inLexique COMMA_SOURCE_FILE_AT_LINE (289)), true) ;
              const GGS_projectSourceList::cElement * operand_12560 = NULL ;
              while (((operand_12560 = enumerator_12560.nextObject ()))) {
                macroValidPointer (operand_12560) ;
                GGS_string var_cas_baseName = operand_12560->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (290)).reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
                var_cas_sourceFileMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_baseName, operand_12560->mFilePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (291)) COMMA_SOURCE_FILE_AT_LINE (291)), operand_12560->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (291)), operand_12560->mSourceKind COMMA_SOURCE_FILE_AT_LINE (291)) ;
                {
                  GGS_lstringlist::cEnumerator enumerator_12835 (operand_12560->mTargetList, true) ;
                  const GGS_lstringlist::cElement * operand_12835 = NULL ;
                  while (((operand_12835 = enumerator_12835.nextObject ()))) {
                    macroValidPointer (operand_12835) ;
                    const GGS_bool cond_13064 = (((operand_12835->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))).operator_isNotEqual (GGS_string ("makefile"))).operator_and ((operand_12835->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))).operator_isNotEqual (GGS_string ("xcode_tool")))).operator_and ((operand_12835->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (293))).operator_isNotEqual (GGS_string ("xcode_app"))) ;
                    if (cond_13064.isBuiltAndTrue ()) {
                      operand_12835->mValue.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the target name should be \"makefile\", \"xcode_tool\" or \"xcode_app\"") COMMA_SOURCE_FILE_AT_LINE (295)) ;
                    }else if (cond_13064.isBuiltAndFalse ()) {
                      var_cas_targetFileListMap.addAssign_operation (operand_12835->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (296)), var_cas_baseName) ;
                    }
                  }
                }
              }
            }
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (302)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (303)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (304)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (305)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (306)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (307))) ;
            {
              GGS_projectSourceList::cEnumerator enumerator_13554 (var_cas_projectComponent.reader_mProjectSourceList (inLexique COMMA_SOURCE_FILE_AT_LINE (310)), true) ;
              const GGS_projectSourceList::cElement * operand_13554 = NULL ;
              while (((operand_13554 = enumerator_13554.nextObject ()))) {
                macroValidPointer (operand_13554) ;
                GGS_string var_cas_extension = operand_13554->mFilePath.ggs_string ().reader_pathExtension () ;
                GGS_lstring  var_cas_fullFilePath = GGS_lstring ::constructor_new (inLexique, ((var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_13554->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (313))), operand_13554->mFilePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (314)) COMMA_SOURCE_FILE_AT_LINE (312)) ;
                const GGS_bool cond_13920 = (operand_13554->mSourceKind).operator_isNotEqual (GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (316))) ;
                if (cond_13920.isBuiltAndTrue ()) {
                  inLexique.printMessage (((GGS_string ("*** Compiling '")).operator_concat (operand_13554->mFilePath)).operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (317)) ;
                }
                switch (operand_13554->mSourceKind.enumValue ()) {
                case GGS_sourceFileKind::enum_externSourceFile:
                  {
                  }
                  break ;
                case GGS_sourceFileKind::enum_guiSourceFile:
                  {
                  const GGS_bool cond_14132 = (var_cas_extension).operator_isEqual (GGS_string ("gGui")) ;
                  if (cond_14132.isBuiltAndTrue ()) {
                    ::routine_compileGuiComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (323)) ;
                  }else if (cond_14132.isBuiltAndFalse ()) {
                    operand_13554->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a gui component should be '.gGui'.") COMMA_SOURCE_FILE_AT_LINE (326)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_lexiqueSourceFile:
                  {
                  const GGS_bool cond_14391 = (var_cas_extension).operator_isEqual (GGS_string ("gLexique")) ;
                  if (cond_14391.isBuiltAndTrue ()) {
                    ::routine_compileLexiqueComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (329)) ;
                  }else if (cond_14391.isBuiltAndFalse ()) {
                    operand_13554->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a lexique component should be '.gLexique'.") COMMA_SOURCE_FILE_AT_LINE (332)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_optionSourceFile:
                  {
                  const GGS_bool cond_14655 = (var_cas_extension).operator_isEqual (GGS_string ("gOption")) ;
                  if (cond_14655.isBuiltAndTrue ()) {
                    ::routine_compileOptionComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (335)) ;
                  }else if (cond_14655.isBuiltAndFalse ()) {
                    operand_13554->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of an option component should be '.gOption'.") COMMA_SOURCE_FILE_AT_LINE (338)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_semanticsSourceFile:
                  {
                  const GGS_bool cond_15941 = (var_cas_extension).operator_isEqual (GGS_string ("gSemantics")) ;
                  if (cond_15941.isBuiltAndTrue ()) {
                    const GGS_bool cond_15006 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
                    if (cond_15006.isBuiltAndTrue ()) {
                      ::routine_compileSemanticsComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (342)) ;
                    }else if (cond_15006.isBuiltAndFalse ()) {
                      GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (344)) ;
                      GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (345)) ;
                      GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (346)) ;
                      GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (347)) ;
                      GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (348)) ;
                      GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (350)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (352)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (353)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (354))) ;
                      const GGS_string _depExtension = GGS_string ("galgas-dep") ;
                      const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
                      if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                        C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                                      _depExtension.string (),
                                                      _depPath.string (),
                                                      NULL,
                                                      var_cas_fullFilePath,
                                                      var_cas_lexiqueMapForUse,
                                                      var_cas_semanticsComponentsMap,
                                                      var_cas_syntaxComponentsMap,
                                                      var_cas_grammarComponentsMap,
                                                      var_cas_optionComponentsMap,
                                                      var_cas_semanticContext
                                                      COMMA_SOURCE_FILE_AT_LINE (356)) ;
                      }
                    }
                  }else if (cond_15941.isBuiltAndFalse ()) {
                    operand_13554->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a semantics component should be '.gSemantics'.") COMMA_SOURCE_FILE_AT_LINE (367)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_syntaxSourceFile:
                  {
                  const GGS_bool cond_17237 = (var_cas_extension).operator_isEqual (GGS_string ("gSyntax")) ;
                  if (cond_17237.isBuiltAndTrue ()) {
                    const GGS_bool cond_16302 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
                    if (cond_16302.isBuiltAndTrue ()) {
                      ::routine_compileSyntaxComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (371)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (371)) ;
                    }else if (cond_16302.isBuiltAndFalse ()) {
                      GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
                      GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (374)) ;
                      GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (375)) ;
                      GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (376)) ;
                      GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (377)) ;
                      GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (379)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (381)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (382)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (383))) ;
                      const GGS_string _depExtension = GGS_string ("galgas-dep") ;
                      const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
                      if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                        C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                                      _depExtension.string (),
                                                      _depPath.string (),
                                                      NULL,
                                                      var_cas_fullFilePath,
                                                      var_cas_lexiqueMapForUse,
                                                      var_cas_semanticsComponentsMap,
                                                      var_cas_syntaxComponentsMap,
                                                      var_cas_grammarComponentsMap,
                                                      var_cas_optionComponentsMap,
                                                      var_cas_semanticContext
                                                      COMMA_SOURCE_FILE_AT_LINE (385)) ;
                      }
                    }
                  }else if (cond_17237.isBuiltAndFalse ()) {
                    operand_13554->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a syntax component should be '.gSyntax'.") COMMA_SOURCE_FILE_AT_LINE (396)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_grammarSourceFile:
                  {
                  const GGS_bool cond_17615 = (var_cas_extension).operator_isEqual (GGS_string ("gGrammar")) ;
                  if (cond_17615.isBuiltAndTrue ()) {
                    ::routine_compileGrammarComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (401)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (399)) ;
                  }else if (cond_17615.isBuiltAndFalse ()) {
                    operand_13554->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a grammar component should be '.gGrammar'.") COMMA_SOURCE_FILE_AT_LINE (407)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_programSourceFile:
                  {
                  const GGS_bool cond_18895 = (var_cas_extension).operator_isEqual (GGS_string ("gProgram")) ;
                  if (cond_18895.isBuiltAndTrue ()) {
                    const GGS_bool cond_17960 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
                    if (cond_17960.isBuiltAndTrue ()) {
                      ::routine_compileProgramComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (411)) ;
                    }else if (cond_17960.isBuiltAndFalse ()) {
                      GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (413)) ;
                      GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (414)) ;
                      GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (415)) ;
                      GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (416)) ;
                      GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (417)) ;
                      GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (419)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (421)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (422)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (423))) ;
                      const GGS_string _depExtension = GGS_string ("galgas-dep") ;
                      const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
                      if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                        C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                                      _depExtension.string (),
                                                      _depPath.string (),
                                                      NULL,
                                                      var_cas_fullFilePath,
                                                      var_cas_lexiqueMapForUse,
                                                      var_cas_semanticsComponentsMap,
                                                      var_cas_syntaxComponentsMap,
                                                      var_cas_grammarComponentsMap,
                                                      var_cas_optionComponentsMap,
                                                      var_cas_semanticContext
                                                      COMMA_SOURCE_FILE_AT_LINE (425)) ;
                      }
                    }
                  }else if (cond_18895.isBuiltAndFalse ()) {
                    operand_13554->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a program component should be '.gProgram'.") COMMA_SOURCE_FILE_AT_LINE (436)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::kNotBuilt:
                  break ;
                }
              }
            }
            const GGS_bool cond_19240 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (440))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_19240.isBuiltAndTrue ()) {
              inLexique.printMessage (GGS_string ("*** Perform global checkings\n") COMMA_SOURCE_FILE_AT_LINE (441)) ;
              ::routine_performProjectGlobalCheckings (inLexique,  var_cas_parsedComponentStruct,  var_cas_projectComponent.reader_mEndOfSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (442)) COMMA_SOURCE_FILE_AT_LINE (442)) ;
            }
            const GGS_bool cond_20981 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (445))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_20981.isBuiltAndTrue ()) {
              GGS_stringlist  var_cas_makefileFiles = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("makefile") COMMA_SOURCE_FILE_AT_LINE (446)) ;
              const GGS_bool cond_20970 = (var_cas_makefileFiles.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
              if (cond_20970.isBuiltAndTrue ()) {
                GGS_string var_cas_externSourceFileList = GGS_string ("") ;
                GGS_string var_cas_galgasSourceList = GGS_string ("") ;
                GGS_stringset  var_cas_pathSet = GGS_stringset ::constructor_emptySet () ;
                var_cas_pathSet.addAssign_operation (GGS_string ("SOURCES_DIR += ../hand_coded_sources\n")) ;
                {
                  GGS_stringlist::cEnumerator enumerator_19640 (var_cas_makefileFiles, true) ;
                  const GGS_stringlist::cElement * operand_19640 = NULL ;
                  while (((operand_19640 = enumerator_19640.nextObject ()))) {
                    macroValidPointer (operand_19640) ;
                    GGS_string var_cas_fullPath ;
                    GGS_sourceFileKind var_cas_sourceKind ;
                    if (var_cas_sourceFileMap.isBuilt ()) {
                      var_cas_sourceFileMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_19640->mValue, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (455)), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (455)) ;
                    }
                    GGS_string var_cas_filePath = var_cas_fullPath.reader_stringByDeletingLastPathComponent () ;
                    const GGS_bool cond_20293 = (var_cas_sourceKind).operator_isEqual (GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (457))) ;
                    if (cond_20293.isBuiltAndTrue ()) {
                      const GGS_bool cond_20069 = (var_cas_filePath.reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
                      if (cond_20069.isBuiltAndTrue ()) {
                        var_cas_pathSet.addAssign_operation (((GGS_string ("SOURCES_DIR += ")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
                      }else if (cond_20069.isBuiltAndFalse ()) {
                        const GGS_bool cond_20187 = (var_cas_filePath).operator_isNotEqual (GGS_string ("")) ;
                        if (cond_20187.isBuiltAndTrue ()) {
                          var_cas_pathSet.addAssign_operation (((GGS_string ("SOURCES_DIR += ../hand_coded_sources/")).operator_concat (var_cas_filePath)).operator_concat (GGS_string ("\n"))) ;
                        }
                      }
                      var_cas_externSourceFileList.appendCString ("SOURCES += ") ;
                      var_cas_externSourceFileList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent ()) ;
                      var_cas_externSourceFileList.appendCString ("\n") ;
                    }else if (cond_20293.isBuiltAndFalse ()) {
                      var_cas_galgasSourceList.appendCString ("SOURCES += ") ;
                      var_cas_galgasSourceList.dotAssign_operation (var_cas_fullPath.reader_lastPathComponent ().reader_stringByDeletingPathExtension ()) ;
                      var_cas_galgasSourceList.appendCString (".cpp\n") ;
                    }
                  }
                }
                GGS_string var_cas_pathesString = GGS_string ("") ;
                {
                  GGS_stringset::cEnumerator enumerator_20507 (var_cas_pathSet, true) ;
                  while (enumerator_20507.hasCurrentObject ()) {
                    var_cas_pathesString.dotAssign_operation (enumerator_20507._key (HERE)) ;
                    enumerator_20507.next () ;
                  }
                }
              }
            }
            GGS_stringlist  var_cas_xcode_tool_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_tool") COMMA_SOURCE_FILE_AT_LINE (483)) ;
            GGS_stringlist  var_cas_xcode_app_files = var_cas_targetFileListMap.reader_listForKey (inLexique, GGS_string ("xcode_app") COMMA_SOURCE_FILE_AT_LINE (484)) ;
            const GGS_bool cond_25709 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (485))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_25709.isBuiltAndTrue ()) {
              GGS_string var_cas_XcodeProjectDir = (var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/project_xcode")) ;
              GGS_stringlist  var_cas_iconFiles = var_cas_XcodeProjectDir.reader_regularFilesWithExtensions (GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("icns"))) ;
              GGS_stringlist  var_cas_xcodeProjects = var_cas_XcodeProjectDir.reader_directoriesWithExtensions (GGS_bool (false), GGS_stringlist ::constructor_listWithValue (GGS_string ("xcodeproj"))) ;
              const GGS_bool cond_21815 = (var_cas_xcodeProjects.reader_length ()).operator_isEqual (GGS_uint (0U)) ;
              if (cond_21815.isBuiltAndTrue ()) {
                inLexique.printMessage (((GGS_string ("****** Cannot update Xcode project, no project found in '")).operator_concat (var_cas_XcodeProjectDir)).operator_concat (GGS_string ("' directory. ********\n")) COMMA_SOURCE_FILE_AT_LINE (492)) ;
              }else if (cond_21815.isBuiltAndFalse ()) {
                const GGS_bool cond_21990 = (var_cas_xcodeProjects.reader_length ()).operator_strictSup (GGS_uint (1U)) ;
                if (cond_21990.isBuiltAndTrue ()) {
                  inLexique.printMessage (((GGS_string ("****** Cannot update Xcode project, more than one project exist in '")).operator_concat (var_cas_XcodeProjectDir)).operator_concat (GGS_string ("' directory. ********\n")) COMMA_SOURCE_FILE_AT_LINE (494)) ;
                }else if (cond_21990.isBuiltAndFalse ()) {
                  const GGS_bool cond_25698 = (var_cas_xcodeProjects.reader_length ()).operator_isEqual (GGS_uint (1U)) ;
                  if (cond_25698.isBuiltAndTrue ()) {
                    GGS_string var_cas_name ;
                    if (var_cas_xcodeProjects.isBuilt ()) {
                      var_cas_xcodeProjects (HERE)->method_first (inLexique, var_cas_name COMMA_SOURCE_FILE_AT_LINE (496)) ;
                    }
                    const GGS_string var_cas_fullXcodePath = (((var_cas_XcodeProjectDir).operator_concat (GGS_string ("/"))).operator_concat (var_cas_name)).operator_concat (GGS_string ("/project.pbxproj")) ;
                    const GGS_string var_cas_intermediateFilePath = (var_cas_outputDirectory).operator_concat (GGS_string ("/file_list_for_xcode_project.txt")) ;
                    GGS_stringset  var_cas_externSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_guiSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_scannerSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_optionSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_semanticsSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_syntaxSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_grammarSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_programSourceSet_tool = GGS_stringset ::constructor_emptySet () ;
                    {
                      GGS_stringlist::cEnumerator enumerator_22768 (var_cas_xcode_tool_files, true) ;
                      const GGS_stringlist::cElement * operand_22768 = NULL ;
                      while (((operand_22768 = enumerator_22768.nextObject ()))) {
                        macroValidPointer (operand_22768) ;
                        GGS_string var_cas_fullPath ;
                        GGS_sourceFileKind var_cas_sourceKind ;
                        if (var_cas_sourceFileMap.isBuilt ()) {
                          var_cas_sourceFileMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_22768->mValue, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (512)), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (512)) ;
                        }
                        switch (var_cas_sourceKind.enumValue ()) {
                        case GGS_sourceFileKind::enum_externSourceFile:
                          {
                          var_cas_externSourceSet_tool.addAssign_operation (var_cas_fullPath) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_lexiqueSourceFile:
                          {
                          var_cas_scannerSourceSet_tool.addAssign_operation (operand_22768->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_guiSourceFile:
                          {
                          var_cas_guiSourceSet_tool.addAssign_operation (operand_22768->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_optionSourceFile:
                          {
                          var_cas_optionSourceSet_tool.addAssign_operation (operand_22768->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_syntaxSourceFile:
                          {
                          var_cas_syntaxSourceSet_tool.addAssign_operation (operand_22768->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_semanticsSourceFile:
                          {
                          var_cas_semanticsSourceSet_tool.addAssign_operation (operand_22768->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_grammarSourceFile:
                          {
                          var_cas_grammarSourceSet_tool.addAssign_operation (operand_22768->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_programSourceFile:
                          {
                          var_cas_programSourceSet_tool.addAssign_operation (operand_22768->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::kNotBuilt:
                          break ;
                        }
                      }
                    }
                    GGS_stringset  var_cas_externSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_guiSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_scannerSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_optionSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_semanticsSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_syntaxSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_grammarSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    GGS_stringset  var_cas_programSourceSet_app = GGS_stringset ::constructor_emptySet () ;
                    {
                      GGS_stringlist::cEnumerator enumerator_24040 (var_cas_xcode_app_files, true) ;
                      const GGS_stringlist::cElement * operand_24040 = NULL ;
                      while (((operand_24040 = enumerator_24040.nextObject ()))) {
                        macroValidPointer (operand_24040) ;
                        GGS_string var_cas_fullPath ;
                        GGS_sourceFileKind var_cas_sourceKind ;
                        if (var_cas_sourceFileMap.isBuilt ()) {
                          var_cas_sourceFileMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_24040->mValue, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (543)), var_cas_fullPath, var_cas_sourceKind COMMA_SOURCE_FILE_AT_LINE (543)) ;
                        }
                        switch (var_cas_sourceKind.enumValue ()) {
                        case GGS_sourceFileKind::enum_externSourceFile:
                          {
                          var_cas_externSourceSet_app.addAssign_operation (var_cas_fullPath) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_lexiqueSourceFile:
                          {
                          var_cas_scannerSourceSet_app.addAssign_operation (operand_24040->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_guiSourceFile:
                          {
                          var_cas_guiSourceSet_app.addAssign_operation (operand_24040->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_optionSourceFile:
                          {
                          var_cas_optionSourceSet_app.addAssign_operation (operand_24040->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_syntaxSourceFile:
                          {
                          var_cas_syntaxSourceSet_app.addAssign_operation (operand_24040->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_semanticsSourceFile:
                          {
                          var_cas_semanticsSourceSet_app.addAssign_operation (operand_24040->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_grammarSourceFile:
                          {
                          var_cas_grammarSourceSet_app.addAssign_operation (operand_24040->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::enum_programSourceFile:
                          {
                          var_cas_programSourceSet_app.addAssign_operation (operand_24040->mValue) ;
                          }
                          break ;
                        case GGS_sourceFileKind::kNotBuilt:
                          break ;
                        }
                      }
                    }
                    ::routine_generateXcodeProject (inLexique,  var_cas_externSourceSet_tool,  var_cas_guiSourceSet_tool,  var_cas_scannerSourceSet_tool,  var_cas_optionSourceSet_tool,  var_cas_semanticsSourceSet_tool,  var_cas_syntaxSourceSet_tool,  var_cas_grammarSourceSet_tool,  var_cas_programSourceSet_tool,  var_cas_externSourceSet_app,  var_cas_guiSourceSet_app,  var_cas_scannerSourceSet_app,  var_cas_optionSourceSet_app,  var_cas_semanticsSourceSet_app,  var_cas_syntaxSourceSet_app,  var_cas_grammarSourceSet_app,  var_cas_programSourceSet_app,  var_cas_name.reader_stringByDeletingPathExtension (),  var_cas_fullXcodePath.reader_stringByDeletingLastPathComponent (),  var_cas_iconFiles,  var_cas_intermediateFilePath,  GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (564)) ;
                  }
                }
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
      }
    //--- Error or warnings ?
      if (commonLexique->totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (commonLexique->totalWarningCount () > 0) {
        if (gOption_galgas_5F_cli_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      galgas_prgm_v1_epilogue (* commonLexique, sourceFilesArray) ;
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      throw ;
    }
    macroReleaseObject (galgasIOptr) ;
    macroReleaseObject (commonLexique) ;
  }
  return returnCode ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


