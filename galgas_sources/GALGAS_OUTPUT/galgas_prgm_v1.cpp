//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'galgas_prgm_v1.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 1st, 2010, at 11h22'23"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "utilities/F_DisplayException.h"
#include "utilities/MF_MemoryControl.h"
#include "collections/TC_UniqueArray.h"
#include "command_line_interface/F_Analyze_CLI_Options.h"
#include "command_line_interface/mainForLIBPM.h"
#include "utilities/MF_MemoryControl.h"
#include "command_line_interface/C_StringCommandLineOption.h"
#include "utilities/cpp-allocation.h"
#include "utilities/basic-allocation.h"

#ifdef TARGET_API_MAC_CARBON
  #include <SIOUX.H>
#endif

#ifdef COMPILE_FOR_WIN32
  #ifdef __MWERKS__
    #include <WINSIOUX.H>
  #endif
#endif

#include <typeinfo>

//---------------------------------------------------------------------------*

#include "galgas_LL1_grammar.h"
#include "galgas_prgm_v1.h"
#include "guiCompilation.h"
#include "lexiqueCompilation.h"
#include "lexiqueSemantics.h"
#include "predefinedTypes.h"
#include "programComponentCompilation.h"
#include "projectCreation.h"
#include "projectGlobalCheckings.h"
#include "projectLL1grammar.h"
#include "syntaxCompilation.h"
#include "targetGeneration.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgas_prgm_v1.gProgram", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    P R O L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
galgas_prgm_v1_prologue (C_CompilerEx & inLexique,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
  const GGS_string var_cas_libpmVarName = GGS_string ("LIBPM_PATH") ;
  const GGS_bool cond_2699 = (var_cas_libpmVarName.reader_doesEnvironmentVariableExist ()).operator_not () ;
  if (cond_2699.isBuiltAndTrue ()) {
    GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (var_cas_libpmVarName)).operator_concat (GGS_string ("' environnement variable is not set; GALGAS requires it to be defined with the absolute path to the 'libpm' directory")) COMMA_SOURCE_FILE_AT_LINE (41)) ;
  }else if (cond_2699.isBuiltAndFalse ()) {
    const GGS_string var_cas_libpmPosixPath = GGS_string::constructor_stringWithEnvironmentVariable (inLexique, var_cas_libpmVarName COMMA_SOURCE_FILE_AT_LINE (42)).reader_unixPathWithNativePath () ;
    const GGS_bool cond_3125 = (var_cas_libpmPosixPath.reader_directoryExists ()).operator_not () ;
    if (cond_3125.isBuiltAndTrue ()) {
      GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_libpmVarName)).operator_concat (GGS_string ("' environnement variable is set to '"))).operator_concat (GGS_string::constructor_stringWithEnvironmentVariable (inLexique, var_cas_libpmVarName COMMA_SOURCE_FILE_AT_LINE (45)))).operator_concat (GGS_string ("', but this value does not designate any directory (it should designate the 'libpm' directory")) COMMA_SOURCE_FILE_AT_LINE (47)) ;
    }else if (cond_3125.isBuiltAndFalse ()) {
      const GGS_string var_cas_libpmVersionFilePath = (var_cas_libpmPosixPath).operator_concat (GGS_string ("/version_libpm.h")) ;
      const GGS_bool cond_3544 = (var_cas_libpmVersionFilePath.reader_fileExists ()).operator_not () ;
      if (cond_3544.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_libpmVarName)).operator_concat (GGS_string ("' environnement variable is set to '"))).operator_concat (GGS_string::constructor_stringWithEnvironmentVariable (inLexique, var_cas_libpmVarName COMMA_SOURCE_FILE_AT_LINE (51)))).operator_concat (GGS_string ("', but this value does not designate a valid 'libpm' directory (it does not contain the 'version_libpm.h' file)")) COMMA_SOURCE_FILE_AT_LINE (53)) ;
      }
    }
  }
  const GGS_string var_cas_creationProjectName = GGS_string (gOption_galgas_5F_cli_5F_options_create_5F_project.reader_value ()) ;
  ::routine_projectCreation (inLexique,  var_cas_creationProjectName COMMA_SOURCE_FILE_AT_LINE (58)) ;
  const GGS_bool cond_3879 = GGS_bool (gOption_galgas_5F_cli_5F_options_printPredefinedLexicalActions.reader_value ()) ;
  if (cond_3879.isBuiltAndTrue ()) {
    ::routine_printPredefinedLexicalActions (inLexique COMMA_SOURCE_FILE_AT_LINE (61)) ;
  }
  ::routine_generatePredefinedTypeFiles (inLexique,  GGS_string (gOption_galgas_5F_cli_5F_options_generatePredefinedTypes.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (64)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     P R O G R A M    E P I L O G U E                      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
galgas_prgm_v1_epilogue (C_CompilerEx & /* inLexique */,
                     const TC_UniqueArray <C_String> & /* inSourceFilesArray */) {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      M A I N    F O R    L I B P M                        *
//                                                                           *
//---------------------------------------------------------------------------*

int mainForLIBPM  (const int argc, const char * argv []) {
  bool verboseOptionOn = true ;
  PMSInt16 returnCode = 0 ; // No error
  {
  //--- Input/output parameters
    const char * extensions [] = {"gOption", "gLexique", "gSemantics", "gSyntax", "gGrammar", "gGui", "gProgram", "gProject", NULL} ;
    const char * helpMessages [] = {"a GALGAS option source file", "a GALGAS lexique source file", "a GALGAS semantics source file", "a GALGAS syntax source file", "a GALGAS grammar source file", "a GALGAS GUI source file", "a GALGAS program source file", "a GALGAS project source file", NULL} ;
    TC_UniqueArray <C_String> sourceFilesArray ;
  //--- Analyze Command Line Options
    F_Analyze_CLI_Options (argc, argv,
                                 #ifndef DO_NOT_GENERATE_CHECKINGS
        "version GALGAS_BETA_VERSION" " [debug]",
      #else
        "version GALGAS_BETA_VERSION",
      #endif
                           sourceFilesArray,
                           extensions,
                           helpMessages) ;
  //--- Build galgas io object
    C_galgas_io * galgasIOptr = NULL ;
    macroMyNew (galgasIOptr, C_galgas_io (HERE)) ;
  //--- Common lexique object
    C_CompilerEx * commonLexique = NULL ;
    macroMyNew (commonLexique, C_CompilerEx (NULL, "", "", galgasIOptr COMMA_HERE)) ;
  //--- Ask Save On Close ? (Carbon and Windows SIOUX Only)
    #ifdef SIOUX_IS_IMPLEMENTED
      SIOUXSettings.asktosaveonclose = gOption_generic_5F_cli_5F_options_options_asktosaveonclose.mValue ;
    #endif
  //--- Enable 64 bit alloc debug ? Only if compiled in 64 bit and in debug mode
    #ifndef DO_NOT_GENERATE_CHECKINGS
      #ifdef __LP64__
        if (gOption_generic_5F_cli_5F_options_enable_5F_allocation_5F_debugging.mValue) {
          enableAllocDebugFor64BitTool () ;
        }
      #endif
    #endif
    try{
      verboseOptionOn = gOption_galgas_5F_cli_5F_options_verbose_5F_output.mValue ;
      galgas_prgm_v1_prologue (* commonLexique, sourceFilesArray) ;
      for (PMSInt32 i=0 ; i<sourceFilesArray.count () ; i++) {
        const C_String fileExtension = sourceFilesArray (i COMMA_HERE).pathExtension () ;
        PMSInt16 r = 0 ;
          if (fileExtension.compare ("gOption") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (75)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (76)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (77)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (78)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (79)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (80))) ;
            ::routine_compileOptionComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (82)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (82)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gLexique") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (91)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (92)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (93)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (94)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (95)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (96))) ;
            ::routine_compileLexiqueComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (98)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (98)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gSemantics") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_bool cond_5848 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
            if (cond_5848.isBuiltAndTrue ()) {
              GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (108)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (109)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (110)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (111)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (112)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (113))) ;
              ::routine_compileSemanticsComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (115)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (115)) ;
            }else if (cond_5848.isBuiltAndFalse ()) {
              GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (117)) ;
              GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (118)) ;
              GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (119)) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (120)) ;
              GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (121)) ;
              GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (123)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (125)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (126)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (127))) ;
              const GGS_string _depExtension = GGS_string ("galgas-dep") ;
              const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
              if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                              _depExtension.string (),
                                              _depPath.string (),
                                              NULL,
                                              var_cas_inSourceFile,
                                              var_cas_lexiqueMapForUse,
                                              var_cas_semanticsComponentsMap,
                                              var_cas_syntaxComponentsMap,
                                              var_cas_grammarComponentsMap,
                                              var_cas_optionComponentsMap,
                                              var_cas_semanticContext
                                              COMMA_SOURCE_FILE_AT_LINE (129)) ;
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gSyntax") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_bool cond_7316 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
            if (cond_7316.isBuiltAndTrue ()) {
              GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (147)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (148)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (149)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (150)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (151)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (152))) ;
              ::routine_compileSyntaxComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (154)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (154)) ;
            }else if (cond_7316.isBuiltAndFalse ()) {
              GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (156)) ;
              GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (157)) ;
              GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (158)) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (159)) ;
              GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (160)) ;
              GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (162)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (164)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (165)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (166))) ;
              const GGS_string _depExtension = GGS_string ("galgas-dep") ;
              const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
              if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                              _depExtension.string (),
                                              _depPath.string (),
                                              NULL,
                                              var_cas_inSourceFile,
                                              var_cas_lexiqueMapForUse,
                                              var_cas_semanticsComponentsMap,
                                              var_cas_syntaxComponentsMap,
                                              var_cas_grammarComponentsMap,
                                              var_cas_optionComponentsMap,
                                              var_cas_semanticContext
                                              COMMA_SOURCE_FILE_AT_LINE (168)) ;
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gGrammar") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (185)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (186)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (187)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (188)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (189)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (190))) ;
            ::routine_compileGrammarComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (194)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (192)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gGui") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (205)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (206)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (207)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (208)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (209)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (210))) ;
            ::routine_compileGuiComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (212)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (212)) ;
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gProgram") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_bool cond_10000 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
            if (cond_10000.isBuiltAndTrue ()) {
              GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (222)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (223)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (224)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (225)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (226)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (227))) ;
              ::routine_compileProgramComponent (inLexique,  var_cas_inSourceFile,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (229)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (229)) ;
            }else if (cond_10000.isBuiltAndFalse ()) {
              GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ;
              GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (232)) ;
              GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (233)) ;
              GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (234)) ;
              GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (235)) ;
              GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (237)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (240)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (241))) ;
              const GGS_string _depExtension = GGS_string ("galgas-dep") ;
              const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
              if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                              _depExtension.string (),
                                              _depPath.string (),
                                              NULL,
                                              var_cas_inSourceFile,
                                              var_cas_lexiqueMapForUse,
                                              var_cas_semanticsComponentsMap,
                                              var_cas_syntaxComponentsMap,
                                              var_cas_grammarComponentsMap,
                                              var_cas_optionComponentsMap,
                                              var_cas_semanticContext
                                              COMMA_SOURCE_FILE_AT_LINE (243)) ;
              }
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
          }else if (fileExtension.compare ("gProject") == 0) {
          C_CompilerEx & inLexique = * commonLexique ;
          const GGS_string source (true, sourceFilesArray (i COMMA_HERE)) ;
          const GGS_location _here (inLexique) ;
          const GGS_lstring var_cas_inSourceFile (GGS_lstring::constructor_new (inLexique, source, _here COMMA_HERE)) ;
            const GGS_string var_cas_outputDirectory = function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (263)) ;
            GGS_projectComponentAST var_cas_projectComponent ;
            const GGS_string _depExtension = GGS_string ("") ;
            const GGS_string _depPath = GGS_string ("") ;
            if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
              C_Grammar_projectLL_31_grammar::_performSourceFileParsing_ (inLexique,
                                            _depExtension.string (),
                                            _depPath.string (),
                                            NULL,
                                            var_cas_inSourceFile,
                                            var_cas_projectComponent
                                            COMMA_SOURCE_FILE_AT_LINE (266)) ;
            }
            const GGS_bool cond_11877 = (var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (268)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (268))).operator_isNotEqual (var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension ()) ;
            if (cond_11877.isBuiltAndTrue ()) {
              var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (269)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the project name ('")).operator_concat (var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (270)))).operator_concat (GGS_string ("') should be the same as the source file base name ('"))).operator_concat (var_cas_inSourceFile.ggs_string ().reader_lastPathComponent ().reader_stringByDeletingPathExtension ())).operator_concat (GGS_string ("')")) COMMA_SOURCE_FILE_AT_LINE (272)) ;
            }
            const GGS_string var_cas_targetName = var_cas_projectComponent.reader_mTargetName (inLexique COMMA_SOURCE_FILE_AT_LINE (274)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ;
            const GGS_bool cond_12092 = (var_cas_targetName).operator_isEqual (GGS_string ("")) ;
            if (cond_12092.isBuiltAndTrue ()) {
              var_cas_projectComponent.reader_mTargetName (inLexique COMMA_SOURCE_FILE_AT_LINE (276)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the target name should not be empty") COMMA_SOURCE_FILE_AT_LINE (277)) ;
            }
            ::routine_updateTargets (inLexique,  var_cas_inSourceFile,  var_cas_projectComponent.reader_mProjectName (inLexique COMMA_SOURCE_FILE_AT_LINE (281)),  var_cas_targetName,  var_cas_projectComponent.reader_mGenerationFeatureList (inLexique COMMA_SOURCE_FILE_AT_LINE (283)),  var_cas_projectComponent.reader_mProjectSourceList (inLexique COMMA_SOURCE_FILE_AT_LINE (284)),  GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ()) COMMA_SOURCE_FILE_AT_LINE (279)) ;
            GGS_parsedComponentStruct var_cas_parsedComponentStruct = GGS_parsedComponentStruct::constructor_new (GGS_parsedSemanticsComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (289)), GGS_parsedLexiqueComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (290)), GGS_parsedSyntaxComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (291)), GGS_parsedOptionComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (292)), GGS_parsedGrammarComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (293)), GGS_parsedProgramComponentMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (294))) ;
            {
              GGS_projectSourceList::cEnumerator enumerator_12741 (var_cas_projectComponent.reader_mProjectSourceList (inLexique COMMA_SOURCE_FILE_AT_LINE (297)), true) ;
              const GGS_projectSourceList::cElement * operand_12741 = NULL ;
              while (((operand_12741 = enumerator_12741.nextObject ()))) {
                macroValidPointer (operand_12741) ;
                GGS_string var_cas_extension = operand_12741->mFilePath.ggs_string ().reader_pathExtension () ;
                GGS_lstring  var_cas_fullFilePath = GGS_lstring ::constructor_new (inLexique, ((var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/"))).operator_concat (operand_12741->mFilePath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (300))), operand_12741->mFilePath.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (301)) COMMA_SOURCE_FILE_AT_LINE (299)) ;
                const GGS_bool cond_13107 = (operand_12741->mSourceKind).operator_isNotEqual (GGS_sourceFileKind::constructor_externSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (303))) ;
                if (cond_13107.isBuiltAndTrue ()) {
                  inLexique.printMessage (((GGS_string ("*** Compiling '")).operator_concat (operand_12741->mFilePath)).operator_concat (GGS_string ("'\n")) COMMA_SOURCE_FILE_AT_LINE (304)) ;
                }
                switch (operand_12741->mSourceKind.enumValue ()) {
                case GGS_sourceFileKind::enum_externSourceFile:
                  {
                  }
                  break ;
                case GGS_sourceFileKind::enum_guiSourceFile:
                  {
                  const GGS_bool cond_13319 = (var_cas_extension).operator_isEqual (GGS_string ("gGui")) ;
                  if (cond_13319.isBuiltAndTrue ()) {
                    ::routine_compileGuiComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (310)) ;
                  }else if (cond_13319.isBuiltAndFalse ()) {
                    operand_12741->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a gui component should be '.gGui'.") COMMA_SOURCE_FILE_AT_LINE (313)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_lexiqueSourceFile:
                  {
                  const GGS_bool cond_13578 = (var_cas_extension).operator_isEqual (GGS_string ("gLexique")) ;
                  if (cond_13578.isBuiltAndTrue ()) {
                    ::routine_compileLexiqueComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (316)) ;
                  }else if (cond_13578.isBuiltAndFalse ()) {
                    operand_12741->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a lexique component should be '.gLexique'.") COMMA_SOURCE_FILE_AT_LINE (319)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_optionSourceFile:
                  {
                  const GGS_bool cond_13842 = (var_cas_extension).operator_isEqual (GGS_string ("gOption")) ;
                  if (cond_13842.isBuiltAndTrue ()) {
                    ::routine_compileOptionComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (322)) ;
                  }else if (cond_13842.isBuiltAndFalse ()) {
                    operand_12741->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of an option component should be '.gOption'.") COMMA_SOURCE_FILE_AT_LINE (325)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_semanticsSourceFile:
                  {
                  const GGS_bool cond_15128 = (var_cas_extension).operator_isEqual (GGS_string ("gSemantics")) ;
                  if (cond_15128.isBuiltAndTrue ()) {
                    const GGS_bool cond_14193 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
                    if (cond_14193.isBuiltAndTrue ()) {
                      ::routine_compileSemanticsComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (329)) ;
                    }else if (cond_14193.isBuiltAndFalse ()) {
                      GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (331)) ;
                      GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (332)) ;
                      GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (333)) ;
                      GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (334)) ;
                      GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (335)) ;
                      GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (337)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (339)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (340)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (341))) ;
                      const GGS_string _depExtension = GGS_string ("galgas-dep") ;
                      const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
                      if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                        C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                                      _depExtension.string (),
                                                      _depPath.string (),
                                                      NULL,
                                                      var_cas_fullFilePath,
                                                      var_cas_lexiqueMapForUse,
                                                      var_cas_semanticsComponentsMap,
                                                      var_cas_syntaxComponentsMap,
                                                      var_cas_grammarComponentsMap,
                                                      var_cas_optionComponentsMap,
                                                      var_cas_semanticContext
                                                      COMMA_SOURCE_FILE_AT_LINE (343)) ;
                      }
                    }
                  }else if (cond_15128.isBuiltAndFalse ()) {
                    operand_12741->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a semantics component should be '.gSemantics'.") COMMA_SOURCE_FILE_AT_LINE (354)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_syntaxSourceFile:
                  {
                  const GGS_bool cond_16424 = (var_cas_extension).operator_isEqual (GGS_string ("gSyntax")) ;
                  if (cond_16424.isBuiltAndTrue ()) {
                    const GGS_bool cond_15489 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
                    if (cond_15489.isBuiltAndTrue ()) {
                      ::routine_compileSyntaxComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (358)),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (358)) ;
                    }else if (cond_15489.isBuiltAndFalse ()) {
                      GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (360)) ;
                      GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (361)) ;
                      GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (362)) ;
                      GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (363)) ;
                      GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (364)) ;
                      GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (366)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (368)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (369)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (370))) ;
                      const GGS_string _depExtension = GGS_string ("galgas-dep") ;
                      const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
                      if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                        C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                                      _depExtension.string (),
                                                      _depPath.string (),
                                                      NULL,
                                                      var_cas_fullFilePath,
                                                      var_cas_lexiqueMapForUse,
                                                      var_cas_semanticsComponentsMap,
                                                      var_cas_syntaxComponentsMap,
                                                      var_cas_grammarComponentsMap,
                                                      var_cas_optionComponentsMap,
                                                      var_cas_semanticContext
                                                      COMMA_SOURCE_FILE_AT_LINE (372)) ;
                      }
                    }
                  }else if (cond_16424.isBuiltAndFalse ()) {
                    operand_12741->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a syntax component should be '.gSyntax'.") COMMA_SOURCE_FILE_AT_LINE (383)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_grammarSourceFile:
                  {
                  const GGS_bool cond_16802 = (var_cas_extension).operator_isEqual (GGS_string ("gGrammar")) ;
                  if (cond_16802.isBuiltAndTrue ()) {
                    ::routine_compileGrammarComponent (inLexique,  var_cas_fullFilePath,  function_outputDirectory (inLexique, var_cas_inSourceFile COMMA_SOURCE_FILE_AT_LINE (388)),  var_cas_inSourceFile.ggs_string ().reader_stringByDeletingLastPathComponent (),  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (386)) ;
                  }else if (cond_16802.isBuiltAndFalse ()) {
                    operand_12741->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a grammar component should be '.gGrammar'.") COMMA_SOURCE_FILE_AT_LINE (394)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::enum_programSourceFile:
                  {
                  const GGS_bool cond_18082 = (var_cas_extension).operator_isEqual (GGS_string ("gProgram")) ;
                  if (cond_18082.isBuiltAndTrue ()) {
                    const GGS_bool cond_17147 = (GGS_bool (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ())).operator_not () ;
                    if (cond_17147.isBuiltAndTrue ()) {
                      ::routine_compileProgramComponent (inLexique,  var_cas_fullFilePath,  var_cas_outputDirectory,  var_cas_parsedComponentStruct COMMA_SOURCE_FILE_AT_LINE (398)) ;
                    }else if (cond_17147.isBuiltAndFalse ()) {
                      GGS_M_lexiqueComponents  var_cas_lexiqueMapForUse = GGS_M_lexiqueComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (400)) ;
                      GGS_M_semanticsComponents  var_cas_semanticsComponentsMap = GGS_M_semanticsComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (401)) ;
                      GGS_M_syntaxComponents  var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (402)) ;
                      GGS_M_grammarComponents  var_cas_grammarComponentsMap = GGS_M_grammarComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (403)) ;
                      GGS_M_optionComponents  var_cas_optionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (404)) ;
                      GGS_EXsemanticContext var_cas_semanticContext = GGS_EXsemanticContext::constructor_new (GGS_M_filewrappersEX ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (406)), GGS_stringset ::constructor_emptySet (), GGS_EXcategoryMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (408)), GGS_EXcategoryReaderMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (409)), GGS_EXcategoryTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (410))) ;
                      const GGS_string _depExtension = GGS_string ("galgas-dep") ;
                      const GGS_string _depPath = GGS_string ("DEPENDENCIES") ;
                      if (_depExtension.isBuilt () && _depPath.isBuilt ()) {
                        C_Grammar_galgas_5F_LL_31__5F_grammar::_performSourceFileParsing_ (inLexique,
                                                      _depExtension.string (),
                                                      _depPath.string (),
                                                      NULL,
                                                      var_cas_fullFilePath,
                                                      var_cas_lexiqueMapForUse,
                                                      var_cas_semanticsComponentsMap,
                                                      var_cas_syntaxComponentsMap,
                                                      var_cas_grammarComponentsMap,
                                                      var_cas_optionComponentsMap,
                                                      var_cas_semanticContext
                                                      COMMA_SOURCE_FILE_AT_LINE (412)) ;
                      }
                    }
                  }else if (cond_18082.isBuiltAndFalse ()) {
                    operand_12741->mFilePath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("extension of a program component should be '.gProgram'.") COMMA_SOURCE_FILE_AT_LINE (423)) ;
                  }
                  }
                  break ;
                case GGS_sourceFileKind::kNotBuilt:
                  break ;
                }
              }
            }
            const GGS_bool cond_18427 = (GGS_uint ::constructor_errorCount (inLexique COMMA_SOURCE_FILE_AT_LINE (427))).operator_isEqual (GGS_uint (0U)) ;
            if (cond_18427.isBuiltAndTrue ()) {
              inLexique.printMessage (GGS_string ("*** Perform global checkings\n") COMMA_SOURCE_FILE_AT_LINE (428)) ;
              ::routine_performProjectGlobalCheckings (inLexique,  var_cas_parsedComponentStruct,  var_cas_projectComponent.reader_mEndOfSourceFile (inLexique COMMA_SOURCE_FILE_AT_LINE (429)) COMMA_SOURCE_FILE_AT_LINE (429)) ;
            }
          if (verboseOptionOn) {
            co << "Analysis of '" << sourceFilesArray (i COMMA_HERE).lastPathComponent () << "' completed. " ;
            switch (commonLexique->totalErrorCount ()) {
            case 0 :
              co << "No error, " ;
              break ;
            case 1 :
              co << "1 error, " ;
              returnCode = 1 ; // Error code
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalErrorCount ()) << " errors, " ;
              returnCode = 1 ; // Error code
              break ;
            }
            switch (commonLexique->totalWarningCount ()) {
            case 0 :
              co << "no warning" ;
              break ;
            case 1 :
              co << "1 warning" ;
              break ;
            default :
              co << cStringWithSigned (commonLexique->totalWarningCount ()) << " warnings" ;
              break ;
            }
            if (verboseOptionOn || ((commonLexique->totalErrorCount () + commonLexique->totalWarningCount ()) > 0)) {
              co << ".\n" ;
            }
          }
        }else{
          printf ("*** Error: unhandled extension for file '%s' ***\n", sourceFilesArray (i COMMA_HERE).cString (HERE)) ;
          r = 1 ;
        }
        if (r != 0) {
          returnCode = r ;
        }
      }
    //--- Error or warnings ?
      if (commonLexique->totalErrorCount () > 0) {
        returnCode = 1 ; // Error code
      }else if (commonLexique->totalWarningCount () > 0) {
        if (gOption_galgas_5F_cli_5F_options_treat_5F_warnings_5F_as_5F_error.mValue) {
          returnCode = 1 ; // Error code
          if (verboseOptionOn) {
            printf ("** Note: warnings are treated as errors. **\n") ;
          }
        }
      }
    //--- Epilogue
      galgas_prgm_v1_epilogue (* commonLexique, sourceFilesArray) ;
    }catch (const M_STD_NAMESPACE exception & e) {
      F_default_display_exception (e) ;
      returnCode = 1 ; // Error code
    }catch (...) {
      throw ;
    }
    macroReleaseObject (galgasIOptr) ;
    macroReleaseObject (commonLexique) ;
  }
  return returnCode ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


