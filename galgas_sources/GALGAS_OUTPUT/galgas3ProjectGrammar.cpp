//-----------------------------------------------------------------------------*
//                                                                             *
//                      File 'galgas3ProjectGrammar.cpp'                       *
//                         Generated by version 2.6.0                          *
//                       july 15th, 2014, at 10h42'42"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//-----------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//-----------------------------------------------------------------------------*

#include "galgas3ProjectGrammar.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//-----------------------------------------------------------------------------*
//                                                                             *
//               L L ( 1 )    P R O D U C T I O N    R U L E S                 *
//                                                                             *
//-----------------------------------------------------------------------------*

#define TERMINAL(t)     ((t)+1)
#define NONTERMINAL(nt) ((-nt)-1)
#define END_PRODUCTION  (0)

static const int16_t gProductions [] = {
// At index 0 : <project_component_start_symbol>, in file 'galgas3ProjectSyntax.ggs', line 26
  TERMINAL (C_Lexique_galgas_33_Scanner::kToken_project) // $project$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__28_) // $($
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken_unsigned_5F_literal_5F_integer) // $unsigned_literal_integer$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__3A_) // $:$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken_unsigned_5F_literal_5F_integer) // $unsigned_literal_integer$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__3A_) // $:$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken_unsigned_5F_literal_5F_integer) // $unsigned_literal_integer$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__29_) // $)$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__2D__3E_) // $->$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken_literal_5F_string) // $literal_string$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__7B_) // ${$
, NONTERMINAL (1) // <select_galgas_33_ProjectSyntax_0>
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__7D_) // $}$
, END_PRODUCTION
//---- Added productions from 'select' and 'repeat' instructions
// At index 14 : <select_galgas_33_ProjectSyntax_0>, in file 'galgas3ProjectSyntax.ggs', line 43
, END_PRODUCTION
// At index 15 : <select_galgas_33_ProjectSyntax_0>, in file 'galgas3ProjectSyntax.ggs', line 43
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken_attribute) // $attribute$
, NONTERMINAL (2) // <select_galgas_33_ProjectSyntax_1>
, NONTERMINAL (1) // <select_galgas_33_ProjectSyntax_0>
, END_PRODUCTION
// At index 19 : <select_galgas_33_ProjectSyntax_0>, in file 'galgas3ProjectSyntax.ggs', line 43
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken_literal_5F_string) // $literal_string$
, NONTERMINAL (1) // <select_galgas_33_ProjectSyntax_0>
, END_PRODUCTION
// At index 22 : <select_galgas_33_ProjectSyntax_1>, in file 'galgas3ProjectSyntax.ggs', line 46
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken__3A_) // $:$
, TERMINAL (C_Lexique_galgas_33_Scanner::kToken_literal_5F_string) // $literal_string$
, END_PRODUCTION
// At index 25 : <select_galgas_33_ProjectSyntax_1>, in file 'galgas3ProjectSyntax.ggs', line 46
, END_PRODUCTION
// At index 26 : <>, in file '.ggs', line 0
, NONTERMINAL (0) // <project_component_start_symbol>
, END_PRODUCTION
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                      P R O D U C T I O N    N A M E S                       *
//                                                                             *
//-----------------------------------------------------------------------------*

static const cProductionNameDescriptor gProductionNames [7] = {
 {"<project_component_start_symbol>", "galgas3ProjectSyntax", 0}, // at index 0
 {"<select_galgas_33_ProjectSyntax_0>", "galgas3ProjectSyntax", 14}, // at index 1
 {"<select_galgas_33_ProjectSyntax_0>", "galgas3ProjectSyntax", 15}, // at index 2
 {"<select_galgas_33_ProjectSyntax_0>", "galgas3ProjectSyntax", 19}, // at index 3
 {"<select_galgas_33_ProjectSyntax_1>", "galgas3ProjectSyntax", 22}, // at index 4
 {"<select_galgas_33_ProjectSyntax_1>", "galgas3ProjectSyntax", 25}, // at index 5
 {"<>", "", 26} // at index 6
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//             L L ( 1 )    P R O D U C T I O N    I N D E X E S               *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gProductionIndexes [7] = {
0, // index 0 : <project_component_start_symbol>, in file 'galgas3ProjectSyntax.ggs', line 26
14, // index 1 : <select_galgas_33_ProjectSyntax_0>, in file 'galgas3ProjectSyntax.ggs', line 43
15, // index 2 : <select_galgas_33_ProjectSyntax_0>, in file 'galgas3ProjectSyntax.ggs', line 43
19, // index 3 : <select_galgas_33_ProjectSyntax_0>, in file 'galgas3ProjectSyntax.ggs', line 43
22, // index 4 : <select_galgas_33_ProjectSyntax_1>, in file 'galgas3ProjectSyntax.ggs', line 46
25, // index 5 : <select_galgas_33_ProjectSyntax_1>, in file 'galgas3ProjectSyntax.ggs', line 46
26 // index 6 : <>, in file '.ggs', line 0
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//       L L ( 1 )    F I R S T    P R O D U C T I O N    I N D E X E S        *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gFirstProductionIndexes [5] = {
0, // at 0 : <project_component_start_symbol>
1, // at 1 : <select_galgas_33_ProjectSyntax_0>
4, // at 2 : <select_galgas_33_ProjectSyntax_1>
6, // at 3 : <>
0} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                L L ( 1 )    D E C I S I O N    T A B L E S                  *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gDecision [] = {
// At index 0 : <project_component_start_symbol> only one production, no choice
  -1,
//---- Added non terminal symbols from 'select' and 'repeat' instructions
// At index 1 : <select_galgas_33_ProjectSyntax_0>
C_Lexique_galgas_33_Scanner::kToken__7D_, -1, // Choice 1
C_Lexique_galgas_33_Scanner::kToken_attribute, -1, // Choice 2
C_Lexique_galgas_33_Scanner::kToken_literal_5F_string, -1, // Choice 3
  -1,
// At index 8 : <select_galgas_33_ProjectSyntax_1>
C_Lexique_galgas_33_Scanner::kToken__3A_, -1, // Choice 1
C_Lexique_galgas_33_Scanner::kToken_literal_5F_string, C_Lexique_galgas_33_Scanner::kToken_attribute, C_Lexique_galgas_33_Scanner::kToken__7D_, -1, // Choice 2
  -1,
// At index 15 : <> only one production, no choice
  -1,
0} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//        L L ( 1 )    D E C I S I O N    T A B L E S    I N D E X E S         *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gDecisionIndexes [5] = {
0, // at 0 : <project_component_start_symbol>
1, // at 1 : <select_galgas_33_ProjectSyntax_0>
8, // at 2 : <select_galgas_33_ProjectSyntax_1>
15, // at 3 : <>
0} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//        'project_component_start_symbol' non terminal implementation         *
//                                                                             *
//-----------------------------------------------------------------------------*

void cGrammar_galgas_33_ProjectGrammar::nt_project_5F_component_5F_start_5F_symbol_parse (C_Lexique_galgas_33_Scanner * inLexique) {
  rule_galgas_33_ProjectSyntax_project_5F_component_5F_start_5F_symbol_i0_parse(inLexique) ;
}

void cGrammar_galgas_33_ProjectGrammar::nt_project_5F_component_5F_start_5F_symbol_indexing (C_Lexique_galgas_33_Scanner * inLexique) {
  rule_galgas_33_ProjectSyntax_project_5F_component_5F_start_5F_symbol_i0_indexing(inLexique) ;
}

void cGrammar_galgas_33_ProjectGrammar::nt_project_5F_component_5F_start_5F_symbol_ (GALGAS_galgas_33_ProjectComponentAST & parameter_1,
                                C_Lexique_galgas_33_Scanner * inLexique) {
  rule_galgas_33_ProjectSyntax_project_5F_component_5F_start_5F_symbol_i0_(parameter_1, inLexique) ;
}

void cGrammar_galgas_33_ProjectGrammar::performIndexing (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_galgas_33_Scanner * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_galgas_33_Scanner (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  scanner->enableIndexing () ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                    gFirstProductionIndexes, gDecision, gDecisionIndexes, 26) ;
    if (ok) {
      cGrammar_galgas_33_ProjectGrammar grammar ;
      grammar.nt_project_5F_component_5F_start_5F_symbol_indexing (scanner) ;
    }
    scanner->generateIndexFile () ;
  }
  macroDetachSharedObject (scanner) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                    Grammar start symbol implementation                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void cGrammar_galgas_33_ProjectGrammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                GALGAS_lstring inFilePath,
                                GALGAS_galgas_33_ProjectComponentAST &  parameter_1
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
    C_Lexique_galgas_33_Scanner * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_galgas_33_Scanner (inCompiler, "", "", filePath COMMA_HERE)) ;
    if (scanner->sourceText () != NULL) {
      const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                      gFirstProductionIndexes, gDecision, gDecisionIndexes, 26) ;
      if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
        cGrammar_galgas_33_ProjectGrammar grammar ;
        grammar.nt_project_5F_component_5F_start_5F_symbol_ (parameter_1, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
    macroDetachSharedObject (scanner) ;
  }else{
    C_String message ;
    message << "the '" << filePath << "' file does not exist" ;
    const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
    inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*

void cGrammar_galgas_33_ProjectGrammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                GALGAS_string inSourceString,
                                GALGAS_galgas_33_ProjectComponentAST &  parameter_1
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (inSourceString.isValid ()) {
    const C_String sourceString = inSourceString.stringValue () ;
    C_Lexique_galgas_33_Scanner * scanner = NULL ;
    macroMyNew (scanner, C_Lexique_galgas_33_Scanner (inCompiler, sourceString, "" COMMA_HERE)) ;
    const bool ok = scanner->performTopDownParsing (gProductions, gProductionNames, gProductionIndexes,
                                                    gFirstProductionIndexes, gDecision, gDecisionIndexes, 26) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_galgas_33_ProjectGrammar grammar ;
      grammar.nt_project_5F_component_5F_start_5F_symbol_ (parameter_1, scanner) ;
    }
    macroDetachSharedObject (scanner) ;
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//    'select_galgas_33_ProjectSyntax_0' added non terminal implementation     *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_galgas_33_ProjectGrammar::select_galgas_33_ProjectSyntax_0 (C_Lexique_galgas_33_Scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//    'select_galgas_33_ProjectSyntax_1' added non terminal implementation     *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_galgas_33_ProjectGrammar::select_galgas_33_ProjectSyntax_1 (C_Lexique_galgas_33_Scanner * inLexique) {
  return inLexique->nextProductionIndex () ;
}

//-----------------------------------------------------------------------------*

