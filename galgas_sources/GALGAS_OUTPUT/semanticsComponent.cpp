//---------------------------------------------------------------------------*
//                                                                           *
//                      File 'semanticsComponent.cpp'                        *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 8th, 2010, at 23h31'35"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticsComponent.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticsComponent.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of production rule 'semantics_component_start_symbol'    *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticsComponent::rule_semanticsComponent_semantics_5F_component_5F_start_5F_symbol_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticsComponentAST  &var_cas_outSemanticsComponentRoot) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_semantics) COMMA_HERE) ;
  GGS_lstring  var_cas_mSemanticsComponentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mSemanticsComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mImportedComponentFileNameList = GGS_lstringlist ::constructor_emptyList () ;
  GGS_semanticDeclarationStructAST var_cas_mSemanticDeclarations = GGS_semanticDeclarationStructAST::constructor_new (GGS_semanticDeclarationListAST ::constructor_emptyList (), GGS_abstractMultiMethodListMapAST::constructor_emptyMap (), GGS_multiMethodListMapAST::constructor_emptyMap (), GGS_overridingMultiMethodListMapAST::constructor_emptyMap (), GGS_abstractMultiReaderListMapAST::constructor_emptyMap (), GGS_multiReaderListMapAST::constructor_emptyMap (), GGS_overridingMultiReaderListMapAST::constructor_emptyMap ()) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_semanticsComponent_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
          switch (select_semanticsComponent_1 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_importedComponentFileName ;
              inLexique.assignFromAttribute_tokenString (var_cas_importedComponentFileName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              var_cas_mImportedComponentFileNameList.addAssign_operation (var_cas_importedComponentFileName) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_semantics) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 3 : {
          nt_semantic_5F_declaration_ (inLexique, var_cas_mSemanticDeclarations) ;
          } break ;
        case 4 : {
          nt_obsolete_5F_declaration_ (inLexique) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  GGS_location  var_cas_endOfSourceFile = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_semantics) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outSemanticsComponentRoot = GGS_semanticsComponentAST ::constructor_new (inLexique, var_cas_mSemanticsComponentName, var_cas_mImportedComponentFileNameList, var_cas_mSemanticDeclarations, var_cas_endOfSourceFile COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

