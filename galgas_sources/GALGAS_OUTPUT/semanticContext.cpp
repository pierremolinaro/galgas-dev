//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'semanticContext.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 25th, 2010, at 21h49'35"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticContext.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticContext.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_grammarLabelMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_grammarLabelMap::e_grammarLabelMap (void) :
mLabelSignature () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@grammarLabelMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_grammarLabelMap ("grammarLabelMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_grammarLabelMap::
elementOf_GGS_grammarLabelMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_grammarLabelMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_grammarLabelMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabelSignature.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_grammarLabelMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_grammarLabelMap * ptr = dynamic_cast <const elementOf_GGS_grammarLabelMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabelSignature.operator_isEqual (ptr->mInfo.mLabelSignature)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_grammarLabelMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_grammarLabelMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_grammarLabelMap * info = (e_grammarLabelMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_grammarLabelMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_grammarLabelMap * info = (e_grammarLabelMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarLabelMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_grammarLabelMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarLabelMap::
operator_isEqual (const GGS_grammarLabelMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarLabelMap::
operator_isNotEqual (const GGS_grammarLabelMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_formalParameterSignature & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_grammarLabelMap info  ;
    info.mLabelSignature = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_formalParameterSignature   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mLabelSignature ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarLabelMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_formalParameterSignature   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarLabelMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterSignature & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_grammarLabelMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarLabelMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_grammarLabelMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_grammarLabelMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @grammarLabelMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterSignature  & GGS_grammarLabelMap::cEnumerator::_mLabelSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabelSignature ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_grammarLabelMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_grammarLabelMap * p = NULL ;
    macroMyNew (p, GGS_grammarLabelMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_grammarLabelMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_grammarLabelMap * p = dynamic_cast <const GGS_grammarLabelMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_grammarLabelMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_grammarLabelMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_grammarLabelMap ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_formalParameterSignature & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_grammarLabelMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_grammarMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_grammarMap::e_grammarMap (void) :
mLabelMap () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@grammarMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_grammarMap ("grammarMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_grammarMap::
elementOf_GGS_grammarMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_grammarMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_grammarMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabelMap.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_grammarMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_grammarMap * ptr = dynamic_cast <const elementOf_GGS_grammarMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabelMap.operator_isEqual (ptr->mInfo.mLabelMap)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_grammarMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_grammarMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_grammarMap * info = (e_grammarMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_grammarMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_grammarMap * info = (e_grammarMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_grammarMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarMap::
operator_isEqual (const GGS_grammarMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarMap::
operator_isNotEqual (const GGS_grammarMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_grammarLabelMap & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_grammarMap info  ;
    info.mLabelMap = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_grammarLabelMap   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mLabelMap ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_grammarLabelMap   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_grammarLabelMap & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_grammarMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_grammarMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_grammarMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @grammarMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_grammarLabelMap  & GGS_grammarMap::cEnumerator::_mLabelMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabelMap ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_grammarMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_grammarMap * p = NULL ;
    macroMyNew (p, GGS_grammarMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_grammarMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_grammarMap * p = dynamic_cast <const GGS_grammarMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_grammarMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_grammarMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_grammarMap ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_grammarLabelMap & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_grammarMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mRoutineSignature () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_routineMap ("routineMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_routineMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineSignature.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * ptr = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineSignature.operator_isEqual (ptr->mInfo.mRoutineSignature)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_formalParameterSignature & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_routineMap info  ;
    info.mRoutineSignature = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_formalParameterSignature   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mRoutineSignature ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_routineMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_formalParameterSignature   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_routineMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterSignature & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterSignature  & GGS_routineMap::cEnumerator::_mRoutineSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineSignature ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_routineMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_routineMap * p = NULL ;
    macroMyNew (p, GGS_routineMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_routineMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_routineMap * p = dynamic_cast <const GGS_routineMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_routineMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_routineMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_routineMap ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_formalParameterSignature & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_routineMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_functionMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_functionMap::e_functionMap (void) :
mFunctionSignature (),
mResultType () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@functionMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_functionMap ("functionMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_functionMap::
elementOf_GGS_functionMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_functionMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_functionMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFunctionSignature.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mResultType.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_functionMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_functionMap * ptr = dynamic_cast <const elementOf_GGS_functionMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFunctionSignature.operator_isEqual (ptr->mInfo.mFunctionSignature)).boolValue ()
           && (mInfo.mResultType.operator_isEqual (ptr->mInfo.mResultType)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_functionMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_functionMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_functionMap * info = (e_functionMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_functionMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_functionMap * info = (e_functionMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_functionMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_functionMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_functionMap::
operator_isEqual (const GGS_functionMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_functionMap::
operator_isNotEqual (const GGS_functionMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxyList & inParameter0,
               const GGS_unifiedTypeMapProxy & inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_functionMap info  ;
    info.mFunctionSignature = inParameter0 ;
    info.mResultType = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxyList   & outParameter0,
               GGS_unifiedTypeMapProxy   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mFunctionSignature ;
    outParameter1 = node->mInfo.mResultType ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_functionMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_functionMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxyList   & outParameter0,
                                GGS_unifiedTypeMapProxy   & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_functionMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_functionMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxyList & inParameter0,
                                const GGS_unifiedTypeMapProxy & inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_functionMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_functionMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_functionMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_functionMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @functionMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxyList  & GGS_functionMap::cEnumerator::_mFunctionSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFunctionSignature ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_functionMap::cEnumerator::_mResultType (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mResultType ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_functionMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_functionMap * p = NULL ;
    macroMyNew (p, GGS_functionMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_functionMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_functionMap * p = dynamic_cast <const GGS_functionMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_functionMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_functionMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_functionMap ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxyList & inValue0,
                                             const GGS_unifiedTypeMapProxy & inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_functionMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'e_filewrapperTemplateMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

e_filewrapperTemplateMap::e_filewrapperTemplateMap (void) :
mTemplateSignature (),
mFilewrapperTemplatePath () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class map '@filewrapperTemplateMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_filewrapperTemplateMap ("filewrapperTemplateMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_filewrapperTemplateMap::
elementOf_GGS_filewrapperTemplateMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_filewrapperTemplateMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_filewrapperTemplateMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTemplateSignature.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperTemplatePath.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_filewrapperTemplateMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_filewrapperTemplateMap * ptr = dynamic_cast <const elementOf_GGS_filewrapperTemplateMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTemplateSignature.operator_isEqual (ptr->mInfo.mTemplateSignature)).boolValue ()
           && (mInfo.mFilewrapperTemplatePath.operator_isEqual (ptr->mInfo.mFilewrapperTemplatePath)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_filewrapperTemplateMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_filewrapperTemplateMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_filewrapperTemplateMap * info = (e_filewrapperTemplateMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_filewrapperTemplateMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_filewrapperTemplateMap * info = (e_filewrapperTemplateMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_filewrapperTemplateMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperTemplateMap::
operator_isEqual (const GGS_filewrapperTemplateMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperTemplateMap::
operator_isNotEqual (const GGS_filewrapperTemplateMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxyList & inParameter0,
               const GGS_lstring & inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_filewrapperTemplateMap info  ;
    info.mTemplateSignature = inParameter0 ;
    info.mFilewrapperTemplatePath = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxyList   & outParameter0,
               GGS_lstring   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mTemplateSignature ;
    outParameter1 = node->mInfo.mFilewrapperTemplatePath ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperTemplateMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxyList   & outParameter0,
                                GGS_lstring   & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperTemplateMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxyList & inParameter0,
                                const GGS_lstring & inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_filewrapperTemplateMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_filewrapperTemplateMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_filewrapperTemplateMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @filewrapperTemplateMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxyList  & GGS_filewrapperTemplateMap::cEnumerator::_mTemplateSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTemplateSignature ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_filewrapperTemplateMap::cEnumerator::_mFilewrapperTemplatePath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperTemplatePath ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_filewrapperTemplateMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_filewrapperTemplateMap * p = NULL ;
    macroMyNew (p, GGS_filewrapperTemplateMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_filewrapperTemplateMap * p = dynamic_cast <const GGS_filewrapperTemplateMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_filewrapperTemplateMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_filewrapperTemplateMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_filewrapperTemplateMap ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxyList & inValue0,
                                             const GGS_lstring & inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_filewrapperMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_filewrapperMap::e_filewrapperMap (void) :
mFilewrapperPath (),
mFilewrapperExtensionList (),
mFilewrapperTemplateMap () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@filewrapperMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_filewrapperMap ("filewrapperMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_filewrapperMap::
elementOf_GGS_filewrapperMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_filewrapperMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_filewrapperMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperPath.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperExtensionList.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperTemplateMap.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_filewrapperMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_filewrapperMap * ptr = dynamic_cast <const elementOf_GGS_filewrapperMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFilewrapperPath.operator_isEqual (ptr->mInfo.mFilewrapperPath)).boolValue ()
           && (mInfo.mFilewrapperExtensionList.operator_isEqual (ptr->mInfo.mFilewrapperExtensionList)).boolValue ()
           && (mInfo.mFilewrapperTemplateMap.operator_isEqual (ptr->mInfo.mFilewrapperTemplateMap)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_filewrapperMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_filewrapperMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_filewrapperMap * info = (e_filewrapperMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_filewrapperMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_filewrapperMap * info = (e_filewrapperMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_filewrapperMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperMap::
operator_isEqual (const GGS_filewrapperMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperMap::
operator_isNotEqual (const GGS_filewrapperMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_lstring & inParameter0,
               const GGS_lstringlist & inParameter1,
               const GGS_filewrapperTemplateMap & inParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_filewrapperMap info  ;
    info.mFilewrapperPath = inParameter0 ;
    info.mFilewrapperExtensionList = inParameter1 ;
    info.mFilewrapperTemplateMap = inParameter2 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_lstring   & outParameter0,
               GGS_lstringlist   & outParameter1,
               GGS_filewrapperTemplateMap   & outParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mFilewrapperPath ;
    outParameter1 = node->mInfo.mFilewrapperExtensionList ;
    outParameter2 = node->mInfo.mFilewrapperTemplateMap ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0,
                                GGS_lstringlist   & outParameter1,
                                GGS_filewrapperTemplateMap   & outParameter2 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring & inParameter0,
                                const GGS_lstringlist & inParameter1,
                                const GGS_filewrapperTemplateMap & inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_filewrapperMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_filewrapperMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_filewrapperMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @filewrapperMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_filewrapperMap::cEnumerator::_mFilewrapperPath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstringlist  & GGS_filewrapperMap::cEnumerator::_mFilewrapperExtensionList (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperExtensionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_filewrapperTemplateMap  & GGS_filewrapperMap::cEnumerator::_mFilewrapperTemplateMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperTemplateMap ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_filewrapperMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_filewrapperMap * p = NULL ;
    macroMyNew (p, GGS_filewrapperMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_filewrapperMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_filewrapperMap * p = dynamic_cast <const GGS_filewrapperMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_filewrapperMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_filewrapperMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_filewrapperMap ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_lstring & inValue0,
                                             const GGS_lstringlist & inValue1,
                                             const GGS_filewrapperTemplateMap & inValue2
                                             COMMA_LOCATION_ARGS) {
  GGS_filewrapperMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        inValue2,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'e_optionComponentMapForSemanticAnalysis'               *
//                                                                           *
//---------------------------------------------------------------------------*

e_optionComponentMapForSemanticAnalysis::e_optionComponentMapForSemanticAnalysis (void) :
mBoolOptionMap (),
mUIntOptionMap (),
mStringOptionMap () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//            class map '@optionComponentMapForSemanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_optionComponentMapForSemanticAnalysis ("optionComponentMapForSemanticAnalysis", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_optionComponentMapForSemanticAnalysis::
elementOf_GGS_optionComponentMapForSemanticAnalysis (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_optionComponentMapForSemanticAnalysis & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_optionComponentMapForSemanticAnalysis::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mBoolOptionMap.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mUIntOptionMap.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mStringOptionMap.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_optionComponentMapForSemanticAnalysis::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_optionComponentMapForSemanticAnalysis * ptr = dynamic_cast <const elementOf_GGS_optionComponentMapForSemanticAnalysis *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mBoolOptionMap.operator_isEqual (ptr->mInfo.mBoolOptionMap)).boolValue ()
           && (mInfo.mUIntOptionMap.operator_isEqual (ptr->mInfo.mUIntOptionMap)).boolValue ()
           && (mInfo.mStringOptionMap.operator_isEqual (ptr->mInfo.mStringOptionMap)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_optionComponentMapForSemanticAnalysis::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_optionComponentMapForSemanticAnalysis *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_optionComponentMapForSemanticAnalysis * info = (e_optionComponentMapForSemanticAnalysis *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_optionComponentMapForSemanticAnalysis *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_optionComponentMapForSemanticAnalysis * info = (e_optionComponentMapForSemanticAnalysis *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_optionComponentMapForSemanticAnalysis info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentMapForSemanticAnalysis::
operator_isEqual (const GGS_optionComponentMapForSemanticAnalysis & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentMapForSemanticAnalysis::
operator_isNotEqual (const GGS_optionComponentMapForSemanticAnalysis & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_commandLineOptionMap & inParameter0,
               const GGS_commandLineOptionMap & inParameter1,
               const GGS_commandLineOptionMap & inParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_optionComponentMapForSemanticAnalysis info  ;
    info.mBoolOptionMap = inParameter0 ;
    info.mUIntOptionMap = inParameter1 ;
    info.mStringOptionMap = inParameter2 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_commandLineOptionMap   & outParameter0,
               GGS_commandLineOptionMap   & outParameter1,
               GGS_commandLineOptionMap   & outParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mBoolOptionMap ;
    outParameter1 = node->mInfo.mUIntOptionMap ;
    outParameter2 = node->mInfo.mStringOptionMap ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_optionComponentMapForSemanticAnalysis::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_commandLineOptionMap   & outParameter0,
                                GGS_commandLineOptionMap   & outParameter1,
                                GGS_commandLineOptionMap   & outParameter2 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_optionComponentMapForSemanticAnalysis::kInsertMessage_insertKey [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (':'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_commandLineOptionMap & inParameter0,
                                const GGS_commandLineOptionMap & inParameter1,
                                const GGS_commandLineOptionMap & inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_optionComponentMapForSemanticAnalysis & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_optionComponentMapForSemanticAnalysis result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_optionComponentMapForSemanticAnalysis::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @optionComponentMapForSemanticAnalysis " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_commandLineOptionMap  & GGS_optionComponentMapForSemanticAnalysis::cEnumerator::_mBoolOptionMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mBoolOptionMap ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_commandLineOptionMap  & GGS_optionComponentMapForSemanticAnalysis::cEnumerator::_mUIntOptionMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mUIntOptionMap ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_commandLineOptionMap  & GGS_optionComponentMapForSemanticAnalysis::cEnumerator::_mStringOptionMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mStringOptionMap ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_optionComponentMapForSemanticAnalysis::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_optionComponentMapForSemanticAnalysis * p = NULL ;
    macroMyNew (p, GGS_optionComponentMapForSemanticAnalysis (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_optionComponentMapForSemanticAnalysis * p = dynamic_cast <const GGS_optionComponentMapForSemanticAnalysis *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_optionComponentMapForSemanticAnalysis, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_optionComponentMapForSemanticAnalysis::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_optionComponentMapForSemanticAnalysis ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_commandLineOptionMap & inValue0,
                                             const GGS_commandLineOptionMap & inValue1,
                                             const GGS_commandLineOptionMap & inValue2
                                             COMMA_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        inValue2,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'semanticContext' struct                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_semanticContext ("semanticContext", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_semanticContext::GGS_semanticContext (void) :
mTypeMap (),
mRoutineMap (),
mFunctionMap (),
mFilewrapperMap (),
mGrammarMap (),
mOptionComponentMapForSemanticAnalysis () {
}

//---------------------------------------------------------------------------*

GGS_semanticContext::~GGS_semanticContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_semanticContext::drop (void) {
  mTypeMap.drop () ;
  mRoutineMap.drop () ;
  mFunctionMap.drop () ;
  mFilewrapperMap.drop () ;
  mGrammarMap.drop () ;
  mOptionComponentMapForSemanticAnalysis.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_semanticContext::isBuilt (void) const {
  return mTypeMap.isBuilt ()
    && mRoutineMap.isBuilt ()
    && mFunctionMap.isBuilt ()
    && mFilewrapperMap.isBuilt ()
    && mGrammarMap.isBuilt ()
    && mOptionComponentMapForSemanticAnalysis.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_semanticContext::
operator_isEqual (const GGS_semanticContext & inOperand) const {
  return mTypeMap.operator_isEqual (inOperand.mTypeMap)
    .operator_and (mRoutineMap.operator_isEqual (inOperand.mRoutineMap))
    .operator_and (mFunctionMap.operator_isEqual (inOperand.mFunctionMap))
    .operator_and (mFilewrapperMap.operator_isEqual (inOperand.mFilewrapperMap))
    .operator_and (mGrammarMap.operator_isEqual (inOperand.mGrammarMap))
    .operator_and (mOptionComponentMapForSemanticAnalysis.operator_isEqual (inOperand.mOptionComponentMapForSemanticAnalysis)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_semanticContext::
operator_isNotEqual (const GGS_semanticContext & inOperand) const {
  return mTypeMap.operator_isNotEqual (inOperand.mTypeMap)
    .operator_or (mRoutineMap.operator_isNotEqual (inOperand.mRoutineMap))
    .operator_or (mFunctionMap.operator_isNotEqual (inOperand.mFunctionMap))
    .operator_or (mFilewrapperMap.operator_isNotEqual (inOperand.mFilewrapperMap))
    .operator_or (mGrammarMap.operator_isNotEqual (inOperand.mGrammarMap))
    .operator_or (mOptionComponentMapForSemanticAnalysis.operator_isNotEqual (inOperand.mOptionComponentMapForSemanticAnalysis)) ;
}

//---------------------------------------------------------------------------*

GGS_semanticContext GGS_semanticContext::
constructor_new (const GGS_unifiedTypeMap & argument_0,
                 const GGS_routineMap & argument_1,
                 const GGS_functionMap & argument_2,
                 const GGS_filewrapperMap & argument_3,
                 const GGS_grammarMap & argument_4,
                 const GGS_optionComponentMapForSemanticAnalysis & argument_5) {
  GGS_semanticContext result ;
  result.mTypeMap = argument_0 ;
  result.mRoutineMap = argument_1 ;
  result.mFunctionMap = argument_2 ;
  result.mFilewrapperMap = argument_3 ;
  result.mGrammarMap = argument_4 ;
  result.mOptionComponentMapForSemanticAnalysis = argument_5 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_semanticContext::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @semanticContext" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mTypeMap " ;
    _s << mTypeMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineMap " ;
    _s << mRoutineMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mFunctionMap " ;
    _s << mFunctionMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mFilewrapperMap " ;
    _s << mFilewrapperMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mGrammarMap " ;
    _s << mGrammarMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mOptionComponentMapForSemanticAnalysis " ;
    _s << mOptionComponentMapForSemanticAnalysis.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_semanticContext::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_semanticContext * p = NULL ;
    macroMyNew (p, GGS_semanticContext (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticContext GGS_semanticContext::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_semanticContext result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_semanticContext * p = dynamic_cast <const GGS_semanticContext *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_semanticContext, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_semanticContext::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_semanticContext ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@collectedTypeMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_collectedTypeMap ("collectedTypeMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_collectedTypeMap::
elementOf_GGS_collectedTypeMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_collectedTypeMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_collectedTypeMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_collectedTypeMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_collectedTypeMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_collectedTypeMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_collectedTypeMap * info = (e_collectedTypeMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_collectedTypeMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_collectedTypeMap * info = (e_collectedTypeMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_collectedTypeMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_collectedTypeMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMap::
operator_isEqual (const GGS_collectedTypeMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMap::
operator_isNotEqual (const GGS_collectedTypeMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_collectedTypeMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_collectedTypeMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_collectedTypeMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_collectedTypeMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_collectedTypeMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_collectedTypeMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_collectedTypeMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @collectedTypeMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_collectedTypeMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_collectedTypeMap * p = NULL ;
    macroMyNew (p, GGS_collectedTypeMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_collectedTypeMap * p = dynamic_cast <const GGS_collectedTypeMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_collectedTypeMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_collectedTypeMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_collectedTypeMap ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    map index '@collectedTypeMapIndex'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_collectedTypeMapIndex ("collectedTypeMapIndex", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_collectedTypeMapIndex GGS_collectedTypeMapIndex::
constructor_null (C_Compiler & /* inLexique */
                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_collectedTypeMapIndex result ;
  result.mState = kNull ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMapIndex::
operator_isEqual (const GGS_collectedTypeMapIndex & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   (mState == inOperand.mState) && (mIndex.retrieve () == inOperand.mIndex.retrieve ())) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMapIndex::
operator_isNotEqual (const GGS_collectedTypeMapIndex & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   (mState != inOperand.mState) || (mIndex.retrieve () != inOperand.mIndex.retrieve ())) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_collectedTypeMapIndex::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<mapproxy @collectedTypeMapIndex" ;
  switch (mState) {
  case kNotBuilt:
    break ;
    s << " (not built)" ;
  case kNull:
    s << ": null" ;
    break ;
  case kRegular:
    s << ": regular (\"" << mKey << "\", " ;
    if (mIndex.retrieve () == NULL) {
      s << "deleted" ;
    }else if (mIndex.retrieve ()->mIsDefined) {
      s << "defined" ;
    }else{
      s << "unsolved" ;
    }
    s << ")" ;
    break ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMapIndex::
class_method_makeRegularProxy (C_Compiler & /* inLexique*/ ,
                               GGS_collectedTypeMap & ioMap,
                               const GGS_string & inKey,
                               GGS_collectedTypeMapIndex & outIndex
                               COMMA_UNUSED_LOCATION_ARGS) {
  outIndex.mState = kRegular ;
  outIndex.mKey = inKey ;
  ioMap.enterIndex (inKey, outIndex.mIndex) ;
  if (outIndex.mIndex.retrieve () == NULL) {
    outIndex.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMapIndex GGS_collectedTypeMapIndex::constructor_searchKey (C_Compiler & inLexique,
              const GGS_collectedTypeMap & inMap,
              const GGS_lstring & inKey
              COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMapIndex result ;
  result.mState = kRegular ;
  result.mKey = inKey.ggs_string () ;
  inMap.searchIndex (inLexique, inKey, GGS_collectedTypeMap::kSearchMessage_searchKey, result.mIndex COMMA_THERE) ;
  if (result.mIndex.retrieve () == NULL) {
    result.drop () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_collectedTypeMapIndex::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_collectedTypeMapIndex * p = NULL ;
    macroMyNew (p, GGS_collectedTypeMapIndex (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMapIndex GGS_collectedTypeMapIndex::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMapIndex result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_collectedTypeMapIndex * p = dynamic_cast <const GGS_collectedTypeMapIndex *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_collectedTypeMapIndex, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_collectedTypeMapIndex::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_collectedTypeMapIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'e_multiMethodMapForType'                       *
//                                                                           *
//---------------------------------------------------------------------------*

e_multiMethodMapForType::e_multiMethodMapForType (void) :
mFormalParameterList () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class map '@multiMethodMapForType'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_multiMethodMapForType ("multiMethodMapForType", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_multiMethodMapForType::
elementOf_GGS_multiMethodMapForType (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_multiMethodMapForType & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_multiMethodMapForType::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFormalParameterList.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_multiMethodMapForType::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_multiMethodMapForType * ptr = dynamic_cast <const elementOf_GGS_multiMethodMapForType *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFormalParameterList.operator_isEqual (ptr->mInfo.mFormalParameterList)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_multiMethodMapForType::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_multiMethodMapForType *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_multiMethodMapForType * info = (e_multiMethodMapForType *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForType::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_multiMethodMapForType *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_multiMethodMapForType * info = (e_multiMethodMapForType *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForType GGS_multiMethodMapForType::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMapForType result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForType::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_multiMethodMapForType info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMapForType::
operator_isEqual (const GGS_multiMethodMapForType & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMapForType::
operator_isNotEqual (const GGS_multiMethodMapForType & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForType::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForType::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_formalParameterListAST & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_multiMethodMapForType info  ;
    info.mFormalParameterList = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForType::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_formalParameterListAST   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mFormalParameterList ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForType GGS_multiMethodMapForType::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_multiMethodMapForType & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMapForType result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForType GGS_multiMethodMapForType::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_multiMethodMapForType result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_multiMethodMapForType::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @multiMethodMapForType " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterListAST  & GGS_multiMethodMapForType::cEnumerator::_mFormalParameterList (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFormalParameterList ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_multiMethodMapForType::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_multiMethodMapForType * p = NULL ;
    macroMyNew (p, GGS_multiMethodMapForType (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForType GGS_multiMethodMapForType::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_multiMethodMapForType result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_multiMethodMapForType * p = dynamic_cast <const GGS_multiMethodMapForType *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_multiMethodMapForType, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_multiMethodMapForType::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_multiMethodMapForType ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForType::modifier_insertOrReplace (C_Compiler & /* inLexique */,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterListAST &  inParameter0 COMMA_LOCATION_ARGS) {
  if (isBuilt () && inKey.isBuilt ()
  && inParameter0.isBuilt ()) {
    insulateMap (THERE) ;
    e_multiMethodMapForType info ;
    info.mFormalParameterList =  inParameter0 ;
    insertOrReplaceElement (inKey, (void *) & info) ;
  }
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForType GGS_multiMethodMapForType::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_formalParameterListAST & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_multiMethodMapForType result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                class 'e_multiMethodMapForBuildingContext'                 *
//                                                                           *
//---------------------------------------------------------------------------*

e_multiMethodMapForBuildingContext::e_multiMethodMapForBuildingContext (void) :
mMultiMethodMapForType () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//              class map '@multiMethodMapForBuildingContext'                *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_multiMethodMapForBuildingContext ("multiMethodMapForBuildingContext", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_multiMethodMapForBuildingContext::
elementOf_GGS_multiMethodMapForBuildingContext (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_multiMethodMapForBuildingContext & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_multiMethodMapForBuildingContext::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mMultiMethodMapForType.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_multiMethodMapForBuildingContext::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_multiMethodMapForBuildingContext * ptr = dynamic_cast <const elementOf_GGS_multiMethodMapForBuildingContext *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mMultiMethodMapForType.operator_isEqual (ptr->mInfo.mMultiMethodMapForType)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_multiMethodMapForBuildingContext::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_multiMethodMapForBuildingContext *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_multiMethodMapForBuildingContext * info = (e_multiMethodMapForBuildingContext *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForBuildingContext::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_multiMethodMapForBuildingContext *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_multiMethodMapForBuildingContext * info = (e_multiMethodMapForBuildingContext *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForBuildingContext GGS_multiMethodMapForBuildingContext::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMapForBuildingContext result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForBuildingContext::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_multiMethodMapForBuildingContext info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMapForBuildingContext::
operator_isEqual (const GGS_multiMethodMapForBuildingContext & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_multiMethodMapForBuildingContext::
operator_isNotEqual (const GGS_multiMethodMapForBuildingContext & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForBuildingContext::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForBuildingContext::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_multiMethodMapForType & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_multiMethodMapForBuildingContext info  ;
    info.mMultiMethodMapForType = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForBuildingContext::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_multiMethodMapForType   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mMultiMethodMapForType ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_multiMethodMapForBuildingContext::kSearchMessage_searchKey [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForBuildingContext::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_multiMethodMapForType   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_multiMethodMapForBuildingContext::kInsertMessage_insertKey [] = {
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('n'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_multiMethodMapForBuildingContext::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_multiMethodMapForType & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForBuildingContext GGS_multiMethodMapForBuildingContext::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_multiMethodMapForBuildingContext & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_multiMethodMapForBuildingContext result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForBuildingContext GGS_multiMethodMapForBuildingContext::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_multiMethodMapForBuildingContext result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_multiMethodMapForBuildingContext::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @multiMethodMapForBuildingContext " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_multiMethodMapForType  & GGS_multiMethodMapForBuildingContext::cEnumerator::_mMultiMethodMapForType (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mMultiMethodMapForType ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_multiMethodMapForBuildingContext::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_multiMethodMapForBuildingContext * p = NULL ;
    macroMyNew (p, GGS_multiMethodMapForBuildingContext (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForBuildingContext GGS_multiMethodMapForBuildingContext::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_multiMethodMapForBuildingContext result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_multiMethodMapForBuildingContext * p = dynamic_cast <const GGS_multiMethodMapForBuildingContext *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_multiMethodMapForBuildingContext, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_multiMethodMapForBuildingContext::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_multiMethodMapForBuildingContext ;
}

//---------------------------------------------------------------------------*

GGS_multiMethodMapForBuildingContext GGS_multiMethodMapForBuildingContext::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_multiMethodMapForType & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_multiMethodMapForBuildingContext result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "collectAttributeTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_collectAttributeTypes (C_Compiler & inLexique,
                                const GGS_attributeInCollectionListAST   var_cas_inAttributeList,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_collectAttributeTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_attributeInCollectionListAST::cEnumerator enumerator_8240 (var_cas_inAttributeList, true) ;
    const GGS_attributeInCollectionListAST::cElement * operand_8240 = NULL ;
    while (((operand_8240 = enumerator_8240.nextObject ()))) {
      macroValidPointer (operand_8240) ;
      GGS_collectedTypeMapIndex  automatic_var_8342_0 ;
      GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_8240->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (169)), automatic_var_8342_0 COMMA_SOURCE_FILE_AT_LINE (169)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_collectAttributeTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@semanticDeclarationAST.collectTypes'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__collectTypes (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_8498,
                                GGS_collectedTypeMap  & /* var_cas_ioCollectedTypeMap */,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8498 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@semanticDeclarationAST.collectTypes'  *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__collectTypes> gDispatchTableForMethod__semanticDeclarationAST__collectTypes ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__collectTypes (typeCategoryMethod__semanticDeclarationAST__collectTypes inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__collectTypes.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__collectTypes
findCategoryMethod__semanticDeclarationAST__collectTypes (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__collectTypes result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__collectTypes.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__collectTypes (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__collectTypes (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__collectTypes.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@abstracMultiMethodAST.collectTypes'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstracMultiMethodAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_abstracMultiMethodAST * operand_8773,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & var_cas_ioMultiMethodMapForBuildingContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8773 != NULL) {
    {
      GGS_formalParameterListAST::cEnumerator enumerator_8966 (operand_8773->mAbstractMultiMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_8966 = NULL ;
      while (((operand_8966 = enumerator_8966.nextObject ()))) {
        macroValidPointer (operand_8966) ;
        GGS_collectedTypeMapIndex  automatic_var_9073_0 ;
        GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_8966->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (189)), automatic_var_9073_0 COMMA_SOURCE_FILE_AT_LINE (189)) ;
      }
    }
    const GGS_bool cond_9298 = (var_cas_ioMultiMethodMapForBuildingContext.reader_hasKey (operand_8773->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (192)))).operator_not () ;
    if (cond_9298.isBuiltAndTrue ()) {
      var_cas_ioMultiMethodMapForBuildingContext.modifier_insertKey (inLexique, operand_8773->mTypeName, GGS_multiMethodMapForType ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (195)) COMMA_SOURCE_FILE_AT_LINE (193)) ;
    }
    elementOf_GGS_multiMethodMapForBuildingContext * operand_9347 = (elementOf_GGS_multiMethodMapForBuildingContext *) var_cas_ioMultiMethodMapForBuildingContext.searchForWithInstruction (inLexique, operand_8773->mTypeName, GGS_multiMethodMapForBuildingContext::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (198)) ;
    if (NULL != operand_9347) {
      operand_9347->mInfo.mMultiMethodMapForType.modifier_insertOrReplace (inLexique, operand_8773->mAbstractMultiMethodName, operand_8773->mAbstractMultiMethodFormalParameterList COMMA_SOURCE_FILE_AT_LINE (199)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@multiMethodAST.collectTypes'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__multiMethodAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_multiMethodAST * operand_9655,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & var_cas_ioMultiMethodMapForBuildingContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9655 != NULL) {
    {
      GGS_formalParameterListAST::cEnumerator enumerator_9840 (operand_9655->mMultiMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_9840 = NULL ;
      while (((operand_9840 = enumerator_9840.nextObject ()))) {
        macroValidPointer (operand_9840) ;
        GGS_collectedTypeMapIndex  automatic_var_9947_0 ;
        GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_9840->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (214)), automatic_var_9947_0 COMMA_SOURCE_FILE_AT_LINE (214)) ;
      }
    }
    const GGS_bool cond_10172 = (var_cas_ioMultiMethodMapForBuildingContext.reader_hasKey (operand_9655->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (217)))).operator_not () ;
    if (cond_10172.isBuiltAndTrue ()) {
      var_cas_ioMultiMethodMapForBuildingContext.modifier_insertKey (inLexique, operand_9655->mTypeName, GGS_multiMethodMapForType ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (220)) COMMA_SOURCE_FILE_AT_LINE (218)) ;
    }
    elementOf_GGS_multiMethodMapForBuildingContext * operand_10221 = (elementOf_GGS_multiMethodMapForBuildingContext *) var_cas_ioMultiMethodMapForBuildingContext.searchForWithInstruction (inLexique, operand_9655->mTypeName, GGS_multiMethodMapForBuildingContext::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (223)) ;
    if (NULL != operand_10221) {
      operand_10221->mInfo.mMultiMethodMapForType.modifier_insertOrReplace (inLexique, operand_9655->mMultiMethodName, operand_9655->mMultiMethodFormalParameterList COMMA_SOURCE_FILE_AT_LINE (224)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@overridingMultiMethodAST.collectTypes'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingMultiMethodAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_overridingMultiMethodAST * operand_10523,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10523 != NULL) {
    {
      GGS_formalParameterListAST::cEnumerator enumerator_10725 (operand_10523->mOverridingMultiMethodFormalParameterList, true) ;
      const GGS_formalParameterListAST::cElement * operand_10725 = NULL ;
      while (((operand_10725 = enumerator_10725.nextObject ()))) {
        macroValidPointer (operand_10725) ;
        GGS_collectedTypeMapIndex  automatic_var_10832_0 ;
        GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_10725->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (239)), automatic_var_10832_0 COMMA_SOURCE_FILE_AT_LINE (239)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@abstractMultiReaderAST.collectTypes'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__abstractMultiReaderAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_abstractMultiReaderAST * operand_10996,
                                GGS_collectedTypeMap  & /* var_cas_ioCollectedTypeMap */,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10996 != NULL) {
    operand_10996->mAbstractMultiReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("@abstractMultiReaderAST collectTypes\n") COMMA_SOURCE_FILE_AT_LINE (250)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@multiReaderAST.collectTypes'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__multiReaderAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_multiReaderAST * operand_11342,
                                GGS_collectedTypeMap  & /* var_cas_ioCollectedTypeMap */,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11342 != NULL) {
    operand_11342->mMultiReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("@multiReaderAST collectTypes\n") COMMA_SOURCE_FILE_AT_LINE (259)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@overridingMultiReaderAST.collectTypes'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__overridingMultiReaderAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_overridingMultiReaderAST * operand_11682,
                                GGS_collectedTypeMap  & /* var_cas_ioCollectedTypeMap */,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11682 != NULL) {
    operand_11682->mOverridingMultiReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("@overridingMultiReaderAST collectTypes\n") COMMA_SOURCE_FILE_AT_LINE (268)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@objectPredefinedTypeAST.collectTypes'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__objectPredefinedTypeAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_objectPredefinedTypeAST * operand_12041,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12041 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("object"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (276)) COMMA_SOURCE_FILE_AT_LINE (276)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@predefinedTypeAST.collectTypes'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_12374,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12374 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12374->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (285)) COMMA_SOURCE_FILE_AT_LINE (285)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@mapDeclarationAST.collectTypes'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_12718,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12718 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_12718->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (294)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_12718->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (295)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@mapProxyDeclarationAST.collectTypes'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_13101,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13101 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_13101->mMapProxyTypeName COMMA_SOURCE_FILE_AT_LINE (304)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@enumDeclarationAST.collectTypes'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_13422,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13422 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_13422->mEnumTypeName COMMA_SOURCE_FILE_AT_LINE (313)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@sortedListDeclarationAST.collectTypes'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_13745,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_13745 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_13745->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (322)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_13745->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (323)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@structDeclarationAST.collectTypes'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_14133,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14133 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_14133->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (332)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_14133->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (333)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@listDeclarationAST.collectTypes'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_14515,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14515 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_14515->mListTypeName COMMA_SOURCE_FILE_AT_LINE (342)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_14515->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (343)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@classDeclarationAST.collectTypes'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_14896,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14896 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_14896->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (352)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_14896->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (353)) ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_15165 (operand_14896->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_15165 = NULL ;
      while (((operand_15165 = enumerator_15165.nextObject ()))) {
        macroValidPointer (operand_15165) ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_15191 (operand_15165->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_15191 = NULL ;
          while (((operand_15191 = enumerator_15191.nextObject ()))) {
            macroValidPointer (operand_15191) ;
            GGS_collectedTypeMapIndex  automatic_var_15300_0 ;
            GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_15191->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (356)), automatic_var_15300_0 COMMA_SOURCE_FILE_AT_LINE (356)) ;
          }
        }
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_15358 (operand_14896->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_15358 = NULL ;
      while (((operand_15358 = enumerator_15358.nextObject ()))) {
        macroValidPointer (operand_15358) ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_15384 (operand_15358->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_15384 = NULL ;
          while (((operand_15384 = enumerator_15384.nextObject ()))) {
            macroValidPointer (operand_15384) ;
            GGS_collectedTypeMapIndex  automatic_var_15493_0 ;
            GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_15384->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (361)), automatic_var_15493_0 COMMA_SOURCE_FILE_AT_LINE (361)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@listmapDeclarationAST.collectTypes'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__collectTypes (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_15674,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap,
                                GGS_multiMethodMapForBuildingContext  & /* var_cas_ioMultiMethodMapForBuildingContext */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15674 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_15674->mListmapTypeName COMMA_SOURCE_FILE_AT_LINE (372)) ;
    GGS_collectedTypeMapIndex  automatic_var_15954_0 ;
    GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_15674->mAssociatedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (373)), automatic_var_15954_0 COMMA_SOURCE_FILE_AT_LINE (373)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@semanticDeclarationAST.enterType'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__enterType> gDispatchTableForMethod__semanticDeclarationAST__enterType ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__enterType (typeCategoryMethod__semanticDeclarationAST__enterType inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__enterType.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__enterType
findCategoryMethod__semanticDeclarationAST__enterType (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__enterType result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__enterType.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__enterType (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__enterType (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__enterType.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@predefinedTypeAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__enterType (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_16664,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16664 != NULL) {
    GGS_constructorMap  var_cas_constructorMap ;
    GGS_readerMap  var_cas_readerMap ;
    GGS_modifierMap  var_cas_modifierMap ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap ;
    GGS_classMethodMap  var_cas_classMethodMap ;
    GGS_predefinedTypeAST  var_cas_t = operand_16664 ;
    { typeCategoryMethod__predefinedTypeAST__getConstructorMap method = findCategoryMethod__predefinedTypeAST__getConstructorMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_constructorMap COMMA_SOURCE_FILE_AT_LINE (400)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getReaderMap method = findCategoryMethod__predefinedTypeAST__getReaderMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_readerMap COMMA_SOURCE_FILE_AT_LINE (401)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getModifierMap method = findCategoryMethod__predefinedTypeAST__getModifierMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_modifierMap COMMA_SOURCE_FILE_AT_LINE (402)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getInstanceMethodMap method = findCategoryMethod__predefinedTypeAST__getInstanceMethodMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_instanceMethodMap COMMA_SOURCE_FILE_AT_LINE (403)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getClassMethodMap method = findCategoryMethod__predefinedTypeAST__getClassMethodMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_classMethodMap COMMA_SOURCE_FILE_AT_LINE (404)) ;
      }
    }
    GGS_unifiedTypeMapProxyList  var_cas_addAssignArgumentList ;
    { typeCategoryMethod__predefinedTypeAST__getAddAssignArgumentList method = findCategoryMethod__predefinedTypeAST__getAddAssignArgumentList (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_addAssignArgumentList COMMA_SOURCE_FILE_AT_LINE (406)) ;
      }
    }
    GGS_enumerationDescriptorList  var_cas_enumerationList ;
    { typeCategoryMethod__predefinedTypeAST__getEnumerationList method = findCategoryMethod__predefinedTypeAST__getEnumerationList (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_enumerationList COMMA_SOURCE_FILE_AT_LINE (408)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_selfTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_16664->mPredefinedTypeName, var_cas_selfTypeProxy COMMA_SOURCE_FILE_AT_LINE (410)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_16664->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (412)), GGS_bool (true), GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (414)), GGS_typeKindEnum::constructor_predefinedType (inLexique COMMA_SOURCE_FILE_AT_LINE (415)), GGS_typedAttributeList ::constructor_listWithValue (var_cas_selfTypeProxy, GGS_lstring ::constructor_new (inLexique, operand_16664->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (416))), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (417)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, var_cas_classMethodMap, var_cas_enumerationList, (findCategoryReader__predefinedTypeAST__getSupportedOperatorFlags (var_cas_t (HERE)->galgasRTTI ()) (inLexique, var_cas_t.getPtr () COMMA_SOURCE_FILE_AT_LINE (425))), var_cas_addAssignArgumentList, (findCategoryReader__predefinedTypeAST__getNativeAttributeList (var_cas_t (HERE)->galgasRTTI ()) (inLexique, var_cas_t.getPtr () COMMA_SOURCE_FILE_AT_LINE (427))), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (433)) COMMA_SOURCE_FILE_AT_LINE (411)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@mapDeclarationAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_18718,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18718 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_stringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("string"), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (445)) ;
    GGS_unifiedTypeMapProxy  var_cas_lstringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("lstring"), var_cas_lstringTypeIndex COMMA_SOURCE_FILE_AT_LINE (448)) ;
    GGS_unifiedTypeMapProxy  var_cas_currentMapTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_18718->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (451)), var_cas_currentMapTypeIndex COMMA_SOURCE_FILE_AT_LINE (451)) ;
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (453)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (454)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (455)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (456)) ;
    GGS_enumerationDescriptorList  var_cas_enumerationDescriptor = GGS_enumerationDescriptorList ::constructor_listWithValue (var_cas_lstringTypeIndex, GGS_string ("lkey")) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptyMap"),  operand_18718->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (459)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (459)) ;
    ::routine_enterConstructorWithArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("mapWithMapToOverride"),  operand_18718->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (460)),  operand_18718->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (460)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (460)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("allKeys"),  GGS_string ("stringset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (462)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("allKeyList"),  GGS_string ("lstringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (463)) ;
    ::routine_enterInheritedReaderWithArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("hasKey"),  GGS_string ("string"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (464)) ;
    ::routine_enterInheritedReaderWithArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("locationForKey"),  GGS_string ("string"),  GGS_string ("location"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (465)) ;
    ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("overriddenMap"),  operand_18718->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (466)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (466)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("count"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (467)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("unsolvedProxyCount"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (468)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("unsolvedProxyKeyList"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (469)) ;
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_insertMethodFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    var_cas_insertMethodFormalArgumentList.addAssign_operation (var_cas_lstringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (473))) ;
    GGS_formalParameterSignature  var_cas_removeMethodFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    var_cas_removeMethodFormalArgumentList.addAssign_operation (var_cas_lstringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (475))) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_21362 (operand_18718->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_21362 = NULL ;
      while (((operand_21362 = enumerator_21362.nextObject ()))) {
        macroValidPointer (operand_21362) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_21362->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (478)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (478)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_21362->mAttributeName) ;
        var_cas_enumerationDescriptor.addAssign_operation (var_cas_attributeTypeIndex, operand_21362->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (480))) ;
        var_cas_insertMethodFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (481))) ;
        var_cas_removeMethodFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (482))) ;
      }
    }
    {
      GGS_insertMethodListAST::cEnumerator enumerator_21966 (operand_18718->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_21966 = NULL ;
      while (((operand_21966 = enumerator_21966.nextObject ()))) {
        macroValidPointer (operand_21966) ;
        const GGS_bool cond_22121 = var_cas_modifierMap.reader_hasKey (operand_21966->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (486))) ;
        if (cond_22121.isBuiltAndTrue ()) {
          operand_21966->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_21966->mMethodName)).operator_concat (GGS_string ("' insert method is already declared")) COMMA_SOURCE_FILE_AT_LINE (488)) ;
        }else if (cond_22121.isBuiltAndFalse ()) {
          var_cas_modifierMap.modifier_insertOrReplace (inLexique, operand_21966->mMethodName, var_cas_insertMethodFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (493)) COMMA_SOURCE_FILE_AT_LINE (489)) ;
        }
      }
    }
    {
      GGS_mapRemoveMethodListAST::cEnumerator enumerator_22365 (operand_18718->mRemoveMethodList, true) ;
      const GGS_mapRemoveMethodListAST::cElement * operand_22365 = NULL ;
      while (((operand_22365 = enumerator_22365.nextObject ()))) {
        macroValidPointer (operand_22365) ;
        const GGS_bool cond_22556 = var_cas_modifierMap.reader_hasKey (operand_22365->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (499))) ;
        if (cond_22556.isBuiltAndTrue ()) {
          operand_22365->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_22365->mMethodName)).operator_concat (GGS_string ("' method is already declared as an insert modifier or a remove modifier")) COMMA_SOURCE_FILE_AT_LINE (501)) ;
        }else if (cond_22556.isBuiltAndFalse ()) {
          var_cas_modifierMap.modifier_insertOrReplace (inLexique, operand_22365->mMethodName, var_cas_removeMethodFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (506)) COMMA_SOURCE_FILE_AT_LINE (502)) ;
        }
      }
    }
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_22798 (operand_18718->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_22798 = NULL ;
      while (((operand_22798 = enumerator_22798.nextObject ()))) {
        macroValidPointer (operand_22798) ;
        var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_22798->mMethodName, GGS_bool (false), var_cas_removeMethodFormalArgumentList, operand_22798->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (516)), GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (518)) COMMA_SOURCE_FILE_AT_LINE (512)) ;
      }
    }
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_23088 (operand_18718->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_23088 = NULL ;
      while (((operand_23088 = enumerator_23088.nextObject ()))) {
        macroValidPointer (operand_23088) ;
        const GGS_lstring  var_cas_accessorName = GGS_lstring ::constructor_new (inLexique, (operand_23088->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (523))).operator_concat (GGS_string ("ForKey")), operand_23088->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (523)) COMMA_SOURCE_FILE_AT_LINE (523)) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_23088->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (525)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (525)) ;
        var_cas_readerMap.modifier_insertOrReplace (inLexique, var_cas_accessorName, GGS_bool (false), GGS_unifiedTypeMapProxyList ::constructor_listWithValue (var_cas_stringTypeIndex), GGS_bool (true), var_cas_attributeTypeIndex, GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (532)) COMMA_SOURCE_FILE_AT_LINE (526)) ;
      }
    }
    const GGS_bool cond_24031 = (operand_18718->mInsertOrReplaceDeclarationListAST.reader_length ()).operator_supOrEqual (GGS_uint (1U)) ;
    if (cond_24031.isBuiltAndTrue ()) {
      GGS_location  var_cas_insertOrReplaceLocation ;
      if (operand_18718->mInsertOrReplaceDeclarationListAST.isBuilt ()) {
        operand_18718->mInsertOrReplaceDeclarationListAST (HERE)->method_first (inLexique, var_cas_insertOrReplaceLocation COMMA_SOURCE_FILE_AT_LINE (538)) ;
      }
      var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("insertOrReplace"), var_cas_insertOrReplaceLocation COMMA_SOURCE_FILE_AT_LINE (540)), var_cas_insertMethodFormalArgumentList, GGS_bool (false), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (543)) COMMA_SOURCE_FILE_AT_LINE (539)) ;
    }
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_24116 (operand_18718->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_24116 = NULL ;
      while (((operand_24116 = enumerator_24116.nextObject ()))) {
        macroValidPointer (operand_24116) ;
        const GGS_lstring  var_cas_accessorName = GGS_lstring ::constructor_new (inLexique, ((GGS_string ("set")).operator_concat (operand_24116->mAttributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter ())).operator_concat (GGS_string ("ForKey")), operand_24116->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (548)) COMMA_SOURCE_FILE_AT_LINE (548)) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_24116->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (550)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (550)) ;
        GGS_formalParameterSignature  var_cas_accessorFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        var_cas_accessorFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (552))) ;
        var_cas_accessorFormalArgumentList.addAssign_operation (var_cas_stringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (553))) ;
        var_cas_modifierMap.modifier_insertOrReplace (inLexique, var_cas_accessorName, var_cas_accessorFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (558)) COMMA_SOURCE_FILE_AT_LINE (554)) ;
      }
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (562)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (563)), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (563)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_25059 (operand_18718->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_25059 = NULL ;
      while (((operand_25059 = enumerator_25059.nextObject ()))) {
        macroValidPointer (operand_25059) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_25059->mMethodName, var_cas_lstringTypeIndex COMMA_SOURCE_FILE_AT_LINE (565)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("map"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (572)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_18718->mMapTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_mapType (inLexique COMMA_SOURCE_FILE_AT_LINE (577)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (579)), var_cas_typedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (585)), var_cas_enumerationDescriptor, (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (587))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (587))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), operand_18718->mSearchMethodList, GGS_mapSearchMethodListAST ::constructor_emptyList (), var_cas_withAccessorMap COMMA_SOURCE_FILE_AT_LINE (573)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@mapProxyDeclarationAST.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_26179,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26179 != NULL) {
    GGS_typedAttributeList  var_cas_mapTypedAttributeList ;
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_mapSearchMethodListAST  var_cas_searchMethodList ;
    GGS_bool automatic_var_26688_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_26688_1 ;
    GGS_typedAttributeList  automatic_var_26688_2 ;
    GGS_attributeMap  automatic_var_26688_3 ;
    GGS_constructorMap  automatic_var_26688_4 ;
    GGS_readerMap  automatic_var_26688_5 ;
    GGS_modifierMap  automatic_var_26688_6 ;
    GGS_instanceMethodMap  automatic_var_26688_7 ;
    GGS_classMethodMap  automatic_var_26688_8 ;
    GGS_enumerationDescriptorList  automatic_var_26688_9 ;
    GGS_uint  automatic_var_26688_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_26688_11 ;
    GGS_nativeAttributeList  automatic_var_26688_12 ;
    GGS_stringset  automatic_var_26688_13 ;
    GGS_lstringlist  automatic_var_26688_14 ;
    GGS_typedAttributeList  automatic_var_26688_15 ;
    GGS_mapSearchMethodListAST  automatic_var_26688_16 ;
    GGS_withAccessorMap  automatic_var_26688_17 ;
    if (var_cas_ioSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_ioSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_26179->mAssociatedMapTypeName, automatic_var_26688_0, automatic_var_26688_1, var_cas_typeKindEnum, automatic_var_26688_2, automatic_var_26688_3, var_cas_mapTypedAttributeList, automatic_var_26688_4, automatic_var_26688_5, automatic_var_26688_6, automatic_var_26688_7, automatic_var_26688_8, automatic_var_26688_9, automatic_var_26688_10, automatic_var_26688_11, automatic_var_26688_12, automatic_var_26688_13, automatic_var_26688_14, automatic_var_26688_15, var_cas_searchMethodList, automatic_var_26688_16, automatic_var_26688_17 COMMA_SOURCE_FILE_AT_LINE (610)) ;
    }
    const GGS_bool cond_26905 = (var_cas_typeKindEnum).operator_isNotEqual (GGS_typeKindEnum::constructor_mapType (inLexique COMMA_SOURCE_FILE_AT_LINE (620))) ;
    if (cond_26905.isBuiltAndTrue ()) {
      operand_26179->mAssociatedMapTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the @")).operator_concat (operand_26179->mAssociatedMapTypeName)).operator_concat (GGS_string (" should be a map type")) COMMA_SOURCE_FILE_AT_LINE (622)) ;
      var_cas_mapTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (625)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (626)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (627)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (628)) ;
    GGS_classMethodMap  var_cas_classMethodMap = GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (629)) ;
    GGS_unifiedTypeMapProxy  var_cas_associatedMapTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_26179->mAssociatedMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (632)), var_cas_associatedMapTypeIndex COMMA_SOURCE_FILE_AT_LINE (632)) ;
    GGS_unifiedTypeMapProxy  var_cas_stringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("string"), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (635)) ;
    GGS_unifiedTypeMapProxy  var_cas_lstringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("lstring"), var_cas_lstringTypeIndex COMMA_SOURCE_FILE_AT_LINE (638)) ;
    GGS_unifiedTypeMapProxy  var_cas_mapProxyTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_26179->mMapProxyTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (641)), var_cas_mapProxyTypeProxy COMMA_SOURCE_FILE_AT_LINE (641)) ;
    GGS_formalParameterSignature  var_cas_argList = GGS_formalParameterSignature ::constructor_emptyList () ;
    var_cas_argList.addAssign_operation (var_cas_associatedMapTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (644))) ;
    var_cas_argList.addAssign_operation (var_cas_stringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (645))) ;
    var_cas_argList.addAssign_operation (var_cas_mapProxyTypeProxy, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (646))) ;
    var_cas_classMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("makeRegularProxy"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (648)), var_cas_argList, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (647)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("null"),  operand_26179->mMapProxyTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (653)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (653)) ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_associatedMapTypeIndex) ;
    var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_lstringTypeIndex) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_28705 (var_cas_searchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_28705 = NULL ;
      while (((operand_28705 = enumerator_28705.nextObject ()))) {
        macroValidPointer (operand_28705) ;
        var_cas_constructorMap.modifier_insertKey (inLexique, operand_28705->mMethodName, var_cas_constructorAttributeTypeList, GGS_bool (true), var_cas_mapProxyTypeProxy COMMA_SOURCE_FILE_AT_LINE (659)) ;
      }
    }
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("isSolved"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (667)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("isNull"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (668)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("isRegular"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (669)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("lkey"),  GGS_string ("lstring"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (670)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("key"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (671)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("identifierRepresentation"),  GGS_string ("string"),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (672)) ;
    const GGS_readerMap  var_cas_inheritedReaderMap = var_cas_readerMap ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_29671 (var_cas_mapTypedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_29671 = NULL ;
      while (((operand_29671 = enumerator_29671.nextObject ()))) {
        macroValidPointer (operand_29671) ;
        const GGS_bool cond_30078 = var_cas_inheritedReaderMap.reader_hasKey (operand_29671->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (676))) ;
        if (cond_30078.isBuiltAndTrue ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_stringset::cEnumerator enumerator_29779 (var_cas_inheritedReaderMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (678)), true) ;
            if (enumerator_29779 .hasCurrentObject ()) {
              bool _foreach_loop_29779 ;
              do{
                var_cas_s.appendCString ("'") ;
                var_cas_s.dotAssign_operation (enumerator_29779._key (HERE)) ;
                var_cas_s.appendCString ("'") ;
                enumerator_29779.next () ;
                _foreach_loop_29779 = (enumerator_29779 .hasCurrentObject ()) ;
                if (_foreach_loop_29779) {
                  var_cas_s.appendCString (", ") ;
                }
              }while (_foreach_loop_29779) ;
            }
          }
          operand_29671->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the map has a associated map proxy, which has predefined readers: ")).operator_concat (var_cas_s)).operator_concat (GGS_string ("; you cannot use theses names for naming an attribute of this map")) COMMA_SOURCE_FILE_AT_LINE (684)) ;
        }else if (cond_30078.isBuiltAndFalse ()) {
          var_cas_readerMap.modifier_insertKey (inLexique, operand_29671->mAttributeName, GGS_bool (false), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_bool (true), operand_29671->mAttributeTypeIndex, GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (691)) COMMA_SOURCE_FILE_AT_LINE (685)) ;
        }
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("mapproxy"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (697)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_26179->mMapProxyTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_mapProxyType (inLexique COMMA_SOURCE_FILE_AT_LINE (702)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (704)), var_cas_mapTypedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, var_cas_classMethodMap, GGS_enumerationDescriptorList ::constructor_emptyList (), (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (712))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (712))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), var_cas_searchMethodList, GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (720)) COMMA_SOURCE_FILE_AT_LINE (698)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@enumDeclarationAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_31382,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31382 != NULL) {
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (732)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (733)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (734)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (735)) ;
    GGS_classMethodMap  var_cas_classMethodMap = GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (736)) ;
    GGS_unifiedTypeMapProxy  var_cas_currentTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_31382->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (739)), var_cas_currentTypeIndex COMMA_SOURCE_FILE_AT_LINE (739)) ;
    GGS_stringset  var_cas_constantSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_lstringlist::cEnumerator enumerator_32041 (operand_31382->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_32041 = NULL ;
      while (((operand_32041 = enumerator_32041.nextObject ()))) {
        macroValidPointer (operand_32041) ;
        var_cas_constantSet.addAssign_operation (operand_32041->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (743))) ;
        ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  operand_32041->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (744)),  operand_31382->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (744)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (744)) ;
      }
    }
    {
      GGS_enumMessageListAST::cEnumerator enumerator_32271 (operand_31382->mEnumMessageList, true) ;
      const GGS_enumMessageListAST::cElement * operand_32271 = NULL ;
      while (((operand_32271 = enumerator_32271.nextObject ()))) {
        macroValidPointer (operand_32271) ;
        ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  operand_32271->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (748)),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (748)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("enum"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (753)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_31382->mEnumTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (758)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (760)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (766)), GGS_enumerationDescriptorList ::constructor_emptyList (), (function_generateDescriptionReaderUtilityMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (768))).operator_or (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (768))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), var_cas_constantSet, operand_31382->mConstantList, GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (776)) COMMA_SOURCE_FILE_AT_LINE (754)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@filewrapperDeclarationAST.enterType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_filewrapperDeclarationAST * operand_33478,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33478 != NULL) {
    GGS_filewrapperTemplateMap  var_cas_filewrapperTemplateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (787)) ;
    {
      GGS_filewrapperTemplateListAST::cEnumerator enumerator_33750 (operand_33478->mFilewrapperTemplateList, true) ;
      const GGS_filewrapperTemplateListAST::cElement * operand_33750 = NULL ;
      while (((operand_33750 = enumerator_33750.nextObject ()))) {
        macroValidPointer (operand_33750) ;
        GGS_unifiedTypeMapProxyList  var_cas_templateSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
        {
          GGS_formalInputParameterListAST::cEnumerator enumerator_33868 (operand_33750->mFilewrapperTemplateFormalInputParameters, true) ;
          const GGS_formalInputParameterListAST::cElement * operand_33868 = NULL ;
          while (((operand_33868 = enumerator_33868.nextObject ()))) {
            macroValidPointer (operand_33868) ;
            GGS_unifiedTypeMapProxy  var_cas_parameterTypeIndex ;
            GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_33868->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (792)), var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (792)) ;
            var_cas_templateSignature.addAssign_operation (var_cas_parameterTypeIndex) ;
          }
        }
        var_cas_filewrapperTemplateMap.modifier_insertKey (inLexique, operand_33750->mFilewrapperTemplateName, var_cas_templateSignature, operand_33750->mFilewrapperTemplatePath COMMA_SOURCE_FILE_AT_LINE (795)) ;
      }
    }
    var_cas_ioSemanticContext.mFilewrapperMap.modifier_insertKey (inLexique, operand_33478->mFilewrapperName, operand_33478->mFilewrapperPath, operand_33478->mFilewrapperExtensionList, var_cas_filewrapperTemplateMap COMMA_SOURCE_FILE_AT_LINE (801)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@listDeclarationAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_34569,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34569 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_34840 (operand_34569->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_34840 = NULL ;
      while (((operand_34840 = enumerator_34840.nextObject ()))) {
        macroValidPointer (operand_34840) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_34840->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (820)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (820)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_34840->mAttributeName) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_uintType ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("uint"), var_cas_uintType COMMA_SOURCE_FILE_AT_LINE (825)) ;
    GGS_unifiedTypeMapProxy  var_cas_listTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_34569->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (828)), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (828)) ;
    GGS_enumerationDescriptorList  var_cas_enumerationDescriptor = GGS_enumerationDescriptorList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_modifierOutputFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_modifierInputFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_35757 (var_cas_typedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_35757 = NULL ;
      while (((operand_35757 = enumerator_35757.nextObject ()))) {
        macroValidPointer (operand_35757) ;
        var_cas_enumerationDescriptor.addAssign_operation (operand_35757->mAttributeTypeIndex, operand_35757->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (835))) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (operand_35757->mAttributeTypeIndex) ;
        var_cas_modifierOutputFormalArgumentList.addAssign_operation (operand_35757->mAttributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (837))) ;
        var_cas_modifierInputFormalArgumentList.addAssign_operation (operand_35757->mAttributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (838))) ;
      }
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (841)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptyList"),  operand_34569->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (842)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (842)) ;
    var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("listWithValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (844)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (843)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (850)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("length"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (851)) ;
    ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("subListFromIndex"),  GGS_string ("uint"),  operand_34569->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (852)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (852)) ;
    ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("subListWithRange"),  GGS_string ("uint"),  GGS_string ("uint"),  operand_34569->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (853)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (853)) ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_36927 (var_cas_typedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_36927 = NULL ;
      while (((operand_36927 = enumerator_36927.nextObject ()))) {
        macroValidPointer (operand_36927) ;
        var_cas_readerMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_36927->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (856))).operator_concat (GGS_string ("AtIndex")), operand_36927->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (856)) COMMA_SOURCE_FILE_AT_LINE (856)), GGS_bool (false), GGS_unifiedTypeMapProxyList ::constructor_listWithValue (var_cas_uintType), GGS_bool (true), operand_36927->mAttributeTypeIndex, GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (861)) COMMA_SOURCE_FILE_AT_LINE (855)) ;
      }
    }
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (865)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popFirst"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (867)), var_cas_modifierOutputFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (870)) COMMA_SOURCE_FILE_AT_LINE (866)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popLast"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (873)), var_cas_modifierOutputFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (876)) COMMA_SOURCE_FILE_AT_LINE (872)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("prependValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (879)), var_cas_modifierInputFormalArgumentList, GGS_bool (false), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (882)) COMMA_SOURCE_FILE_AT_LINE (878)) ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_37795 (var_cas_typedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_37795 = NULL ;
      while (((operand_37795 = enumerator_37795.nextObject ()))) {
        macroValidPointer (operand_37795) ;
        GGS_formalParameterSignature  var_cas_setterFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        var_cas_setterFormalArgumentList.addAssign_operation (operand_37795->mAttributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (886))) ;
        var_cas_setterFormalArgumentList.addAssign_operation (var_cas_uintType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (887))) ;
        var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, ((GGS_string ("set")).operator_concat (operand_37795->mAttributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter ())).operator_concat (GGS_string ("AtIndex")), operand_37795->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (889)) COMMA_SOURCE_FILE_AT_LINE (889)), var_cas_setterFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (892)) COMMA_SOURCE_FILE_AT_LINE (888)) ;
      }
    }
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (896)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("first"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (898)), GGS_bool (false), var_cas_modifierOutputFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (903)) COMMA_SOURCE_FILE_AT_LINE (897)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("last"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (906)), GGS_bool (false), var_cas_modifierOutputFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (911)) COMMA_SOURCE_FILE_AT_LINE (905)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_34569->mListTypeName, GGS_bool (true), GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (917)), GGS_typeKindEnum::constructor_listType (inLexique COMMA_SOURCE_FILE_AT_LINE (918)), var_cas_typedAttributeList, GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (920)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (926)), var_cas_enumerationDescriptor, (((function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (928))).operator_or (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (928)))).operator_or (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (928)))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (928))), var_cas_constructorAttributeTypeList, GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (936)) COMMA_SOURCE_FILE_AT_LINE (914)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@sortedListDeclarationAST.enterType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_39760,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39760 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_uintType ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("uint"), var_cas_uintType COMMA_SOURCE_FILE_AT_LINE (948)) ;
    GGS_unifiedTypeMapProxy  var_cas_listTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_39760->mSortedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (951)), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (951)) ;
    GGS_enumerationDescriptorList  var_cas_enumerationDescriptor = GGS_enumerationDescriptorList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_modifierFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_40554 (operand_39760->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_40554 = NULL ;
      while (((operand_40554 = enumerator_40554.nextObject ()))) {
        macroValidPointer (operand_40554) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_40554->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (959)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (959)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_40554->mAttributeName) ;
        var_cas_enumerationDescriptor.addAssign_operation (var_cas_attributeTypeIndex, operand_40554->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (961))) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_attributeTypeIndex) ;
        var_cas_modifierFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (963))) ;
      }
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (966)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptySortedList"),  operand_39760->mSortedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (967)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (967)) ;
    var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sortedListWithValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (969)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (968)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (975)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("length"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (976)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (978)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popGreatest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (980)), var_cas_modifierFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (983)) COMMA_SOURCE_FILE_AT_LINE (979)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popSmallest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (986)), var_cas_modifierFormalArgumentList, GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (989)) COMMA_SOURCE_FILE_AT_LINE (985)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (992)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("greatest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (994)), GGS_bool (false), var_cas_modifierFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (999)) COMMA_SOURCE_FILE_AT_LINE (993)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("smallest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1002)), GGS_bool (false), var_cas_modifierFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1007)) COMMA_SOURCE_FILE_AT_LINE (1001)) ;
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("sortedlist"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (1011)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_39760->mSortedListTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_sortedListType (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)), var_cas_typedAttributeList, GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1018)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1024)), var_cas_enumerationDescriptor, ((((function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1026))).operator_or (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (1026)))).operator_or (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1026)))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1027)))).operator_or (function_generateSortedListComparisonMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (1027))), var_cas_constructorAttributeTypeList, GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1035)) COMMA_SOURCE_FILE_AT_LINE (1012)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@structDeclarationAST.enterType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_43525,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43525 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_structTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_43525->mStructTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1048)), var_cas_structTypeIndex COMMA_SOURCE_FILE_AT_LINE (1048)) ;
    GGS_attributeMap  var_cas_attributeMap = GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1050)) ;
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_44150 (operand_43525->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_44150 = NULL ;
      while (((operand_44150 = enumerator_44150.nextObject ()))) {
        macroValidPointer (operand_44150) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_44150->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1056)) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_attributeTypeIndex) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_44150->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_44150->mAttributeName, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1059)) ;
      }
    }
    var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("new"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1062)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_structTypeIndex COMMA_SOURCE_FILE_AT_LINE (1061)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1068)) ;
    ::routine_enterBaseFinalReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("description"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1069)) ;
    ::routine_enterBaseFinalReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("object"),  GGS_string ("object"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1070)) ;
    ::routine_enterBaseFinalReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("objectDynamicType"),  GGS_string ("type"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1071)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_45081 (operand_43525->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_45081 = NULL ;
      while (((operand_45081 = enumerator_45081.nextObject ()))) {
        macroValidPointer (operand_45081) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_45081->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1074)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1074)) ;
        ::routine_enterBaseFinalReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  operand_45081->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1078)),  operand_45081->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1079)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1075)) ;
      }
    }
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1084)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1086)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_43525->mStructTypeName, GGS_bool (true), GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1091)), GGS_typeKindEnum::constructor_structType (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_attributeMap, var_cas_typedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1100)), GGS_enumerationDescriptorList ::constructor_emptyList (), (function_generateCppConstructorWithCurrentAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1102))).operator_or (function_generateDescriptionReaderUtilityMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (1103))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), var_cas_typedAttributeList, GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1111)) COMMA_SOURCE_FILE_AT_LINE (1088)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@classDeclarationAST.enterType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_46515,
                                const GGS_multiMethodMapForBuildingContext   var_cas_inMultiMethodMapForBuildingContext,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46515 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_uintType ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("uint"), var_cas_uintType COMMA_SOURCE_FILE_AT_LINE (1123)) ;
    GGS_readerMap  var_cas_readerMap ;
    GGS_modifierMap  var_cas_modifierMap ;
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    GGS_typedAttributeList  var_cas_inheritedTypedAttributeList ;
    GGS_attributeMap  var_cas_attributeMap = GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)) ;
    GGS_unifiedTypeMapProxy  var_cas_superClassIndex ;
    const GGS_bool cond_47440 = (operand_46515->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1132))).operator_isEqual (GGS_string ("")) ;
    if (cond_47440.isBuiltAndTrue ()) {
      var_cas_superClassIndex = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)) ;
      var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)) ;
      var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)) ;
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      var_cas_inheritedTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
      var_cas_attributeMap = GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1138)) ;
    }else if (cond_47440.isBuiltAndFalse ()) {
      GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_46515->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1140)), var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (1140)) ;
      GGS_typeKindEnum var_cas_typeKindEnum ;
      GGS_readerMap  var_cas_inheritedReaderMap ;
      GGS_modifierMap  var_cas_inheritedModifierMap ;
      GGS_bool automatic_var_47934_0 ;
      GGS_unifiedTypeMapProxy  automatic_var_47934_1 ;
      GGS_typedAttributeList  automatic_var_47934_2 ;
      GGS_constructorMap  automatic_var_47934_3 ;
      GGS_classMethodMap  automatic_var_47934_4 ;
      GGS_enumerationDescriptorList  automatic_var_47934_5 ;
      GGS_uint  automatic_var_47934_6 ;
      GGS_unifiedTypeMapProxyList  automatic_var_47934_7 ;
      GGS_nativeAttributeList  automatic_var_47934_8 ;
      GGS_stringset  automatic_var_47934_9 ;
      GGS_lstringlist  automatic_var_47934_10 ;
      GGS_typedAttributeList  automatic_var_47934_11 ;
      GGS_mapSearchMethodListAST  automatic_var_47934_12 ;
      GGS_mapSearchMethodListAST  automatic_var_47934_13 ;
      GGS_withAccessorMap  automatic_var_47934_14 ;
      if (var_cas_ioSemanticContext.mTypeMap.isBuilt ()) {
        var_cas_ioSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_46515->mSuperClassName, automatic_var_47934_0, automatic_var_47934_1, var_cas_typeKindEnum, var_cas_inheritedTypedAttributeList, var_cas_attributeMap, automatic_var_47934_2, automatic_var_47934_3, var_cas_inheritedReaderMap, var_cas_inheritedModifierMap, var_cas_inheritedInstanceMethodMap, automatic_var_47934_4, automatic_var_47934_5, automatic_var_47934_6, automatic_var_47934_7, automatic_var_47934_8, automatic_var_47934_9, automatic_var_47934_10, automatic_var_47934_11, automatic_var_47934_12, automatic_var_47934_13, automatic_var_47934_14 COMMA_SOURCE_FILE_AT_LINE (1144)) ;
      }
      const GGS_bool cond_48091 = (var_cas_typeKindEnum).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1157))) ;
      if (cond_48091.isBuiltAndTrue ()) {
        operand_46515->mSuperClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the @")).operator_concat (operand_46515->mSuperClassName)).operator_concat (GGS_string (" should be a class type")) COMMA_SOURCE_FILE_AT_LINE (1159)) ;
      }
      var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1161)) ;
      var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) ;
      {
        GGS_readerMap::cEnumerator enumerator_48501 (var_cas_inheritedReaderMap, true) ;
        const GGS_readerMap::cElement * operand_48501 = NULL ;
        while (((operand_48501 = enumerator_48501.nextObject ()))) {
          macroValidPointer (operand_48501) ;
          var_cas_readerMap.modifier_insertKey (inLexique, operand_48501->mKey, operand_48501->mInfo.mIsCategory, operand_48501->mInfo.mArgumentTypeList, operand_48501->mInfo.mHasCompilerArgument, operand_48501->mInfo.mReturnedType, GGS_methodQualifier::constructor_isInherited (inLexique COMMA_SOURCE_FILE_AT_LINE (1179)) COMMA_SOURCE_FILE_AT_LINE (1173)) ;
        }
      }
    }
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_48891 (var_cas_inheritedTypedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_48891 = NULL ;
      while (((operand_48891 = enumerator_48891.nextObject ()))) {
        macroValidPointer (operand_48891) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (operand_48891->mAttributeTypeIndex) ;
      }
    }
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_48994 (operand_46515->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_48994 = NULL ;
      while (((operand_48994 = enumerator_48994.nextObject ()))) {
        macroValidPointer (operand_48994) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_48994->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1190)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1190)) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_attributeTypeIndex) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_48994->mAttributeName, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1192)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_classIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_46515->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)), var_cas_classIndex COMMA_SOURCE_FILE_AT_LINE (1196)) ;
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1198)) ;
    const GGS_bool cond_49720 = (operand_46515->mIsAbstract).operator_not () ;
    if (cond_49720.isBuiltAndTrue ()) {
      var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("new"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1201)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_classIndex COMMA_SOURCE_FILE_AT_LINE (1200)) ;
    }
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1208)) ;
    {
      GGS_instanceMethodMap::cEnumerator enumerator_49851 (var_cas_inheritedInstanceMethodMap, true) ;
      const GGS_instanceMethodMap::cElement * operand_49851 = NULL ;
      while (((operand_49851 = enumerator_49851.nextObject ()))) {
        macroValidPointer (operand_49851) ;
        var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_49851->mKey, GGS_bool (false), operand_49851->mInfo.mParameterList, operand_49851->mInfo.mDeclarationLocation, operand_49851->mInfo.mHasCompilerArgument, GGS_methodQualifier::constructor_isInherited (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)) COMMA_SOURCE_FILE_AT_LINE (1210)) ;
      }
    }
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_50147 (operand_46515->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_50147 = NULL ;
      while (((operand_50147 = enumerator_50147.nextObject ()))) {
        macroValidPointer (operand_50147) ;
        GGS_formalParameterSignature  var_cas_formalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_50236 (operand_50147->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_50236 = NULL ;
          while (((operand_50236 = enumerator_50236.nextObject ()))) {
            macroValidPointer (operand_50236) ;
            GGS_unifiedTypeMapProxy  var_cas_typeIndex ;
            GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_50236->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1224)), var_cas_typeIndex COMMA_SOURCE_FILE_AT_LINE (1224)) ;
            var_cas_formalArgumentList.addAssign_operation (var_cas_typeIndex, operand_50236->mFormalArgumentPassingMode) ;
          }
        }
        elementOf_GGS_instanceMethodMap * operand_50517 = (elementOf_GGS_instanceMethodMap *) var_cas_instanceMethodMap.searchForReadWriteWithInstruction (operand_50147->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1227))) ;
        if (NULL != operand_50517) {
          operand_50517->mInfo.mQualifier = GGS_methodQualifier::constructor_isOverridingAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)) ;
        }else{
          var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_50147->mMethodName, GGS_bool (false), var_cas_formalArgumentList, operand_50147->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1234)), GGS_bool (true), GGS_methodQualifier::constructor_isAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1236)) COMMA_SOURCE_FILE_AT_LINE (1230)) ;
        }
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_50934 (operand_46515->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_50934 = NULL ;
      while (((operand_50934 = enumerator_50934.nextObject ()))) {
        macroValidPointer (operand_50934) ;
        GGS_formalParameterSignature  var_cas_formalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_51023 (operand_50934->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_51023 = NULL ;
          while (((operand_51023 = enumerator_51023.nextObject ()))) {
            macroValidPointer (operand_51023) ;
            GGS_unifiedTypeMapProxy  var_cas_typeIndex ;
            GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_51023->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1245)), var_cas_typeIndex COMMA_SOURCE_FILE_AT_LINE (1245)) ;
            var_cas_formalArgumentList.addAssign_operation (var_cas_typeIndex, operand_51023->mFormalArgumentPassingMode) ;
          }
        }
        elementOf_GGS_instanceMethodMap * operand_51304 = (elementOf_GGS_instanceMethodMap *) var_cas_instanceMethodMap.searchForReadWriteWithInstruction (operand_50934->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1248))) ;
        if (NULL != operand_51304) {
          operand_51304->mInfo.mQualifier = GGS_methodQualifier::constructor_isOverriding (inLexique COMMA_SOURCE_FILE_AT_LINE (1249)) ;
        }else{
          var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_50934->mMethodName, GGS_bool (false), var_cas_formalArgumentList, operand_50934->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1255)), GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1257)) COMMA_SOURCE_FILE_AT_LINE (1251)) ;
        }
      }
    }
    const GGS_bool cond_52520 = var_cas_inMultiMethodMapForBuildingContext.reader_hasKey (operand_46515->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1262))) ;
    if (cond_52520.isBuiltAndTrue ()) {
      GGS_multiMethodMapForType  var_cas_multiMethodMapForType ;
      if (var_cas_inMultiMethodMapForBuildingContext.isBuilt ()) {
        var_cas_inMultiMethodMapForBuildingContext (HERE)->method_searchKey (inLexique, operand_46515->mClassTypeName, var_cas_multiMethodMapForType COMMA_SOURCE_FILE_AT_LINE (1264)) ;
      }
      {
        GGS_multiMethodMapForType::cEnumerator enumerator_51939 (var_cas_multiMethodMapForType, true) ;
        const GGS_multiMethodMapForType::cElement * operand_51939 = NULL ;
        while (((operand_51939 = enumerator_51939.nextObject ()))) {
          macroValidPointer (operand_51939) ;
          GGS_formalParameterSignature  var_cas_formalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
          {
            GGS_formalParameterListAST::cEnumerator enumerator_52042 (operand_51939->mInfo.mFormalParameterList, true) ;
            const GGS_formalParameterListAST::cElement * operand_52042 = NULL ;
            while (((operand_52042 = enumerator_52042.nextObject ()))) {
              macroValidPointer (operand_52042) ;
              GGS_unifiedTypeMapProxy  var_cas_typeIndex ;
              GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_52042->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1269)), var_cas_typeIndex COMMA_SOURCE_FILE_AT_LINE (1269)) ;
              var_cas_formalArgumentList.addAssign_operation (var_cas_typeIndex, operand_52042->mFormalArgumentPassingMode) ;
            }
          }
          var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_51939->mKey, GGS_bool (true), var_cas_formalArgumentList, operand_51939->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1276)), GGS_bool (true), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1278)) COMMA_SOURCE_FILE_AT_LINE (1272)) ;
        }
      }
    }
    GGS_typedAttributeList  var_cas_currentClassTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_typedAttributeList  var_cas_allTypedAttributeList = var_cas_inheritedTypedAttributeList ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_52720 (operand_46515->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_52720 = NULL ;
      while (((operand_52720 = enumerator_52720.nextObject ()))) {
        macroValidPointer (operand_52720) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_52720->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1287)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1287)) ;
        var_cas_currentClassTypedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_52720->mAttributeName) ;
        var_cas_allTypedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_52720->mAttributeName) ;
        var_cas_readerMap.modifier_insertKey (inLexique, operand_52720->mAttributeName, GGS_bool (false), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_bool (false), var_cas_attributeTypeIndex, GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1296)) COMMA_SOURCE_FILE_AT_LINE (1290)) ;
      }
    }
    const GGS_bool cond_53754 = (operand_46515->mIsAbstract).operator_not () ;
    if (cond_53754.isBuiltAndTrue ()) {
      {
        GGS_typedAttributeList::cEnumerator enumerator_53405 (var_cas_allTypedAttributeList, true) ;
        const GGS_typedAttributeList::cElement * operand_53405 = NULL ;
        while (((operand_53405 = enumerator_53405.nextObject ()))) {
          macroValidPointer (operand_53405) ;
          var_cas_modifierMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, (GGS_string ("set")).operator_concat (operand_53405->mAttributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter ()), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1303)), GGS_formalParameterSignature ::constructor_listWithValue (operand_53405->mAttributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (1304))), GGS_bool (false), GGS_methodQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1306)) COMMA_SOURCE_FILE_AT_LINE (1302)) ;
        }
      }
    }
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_46515->mClassTypeName, (operand_46515->mIsAbstract).operator_not (), var_cas_superClassIndex, GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1315)), var_cas_allTypedAttributeList, var_cas_attributeMap, var_cas_currentClassTypedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1323)), GGS_enumerationDescriptorList ::constructor_emptyList (), (function_generateCppConstructorWithAllAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1325))).operator_or (((operand_46515->mIsAbstract).isBuiltAndTrue () ? (GGS_uint (0U)) : (function_generateDescriptionReaderUtilityMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (1325))))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), var_cas_currentClassTypedAttributeList, GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1333)) COMMA_SOURCE_FILE_AT_LINE (1311)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@externRoutineDeclarationAST.enterType'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_externRoutineDeclarationAST * operand_54734,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54734 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_55000 (operand_54734->mFormalArgumentList, true) ;
      const GGS_formalParameterListAST::cElement * operand_55000 = NULL ;
      while (((operand_55000 = enumerator_55000.nextObject ()))) {
        macroValidPointer (operand_55000) ;
        GGS_unifiedTypeMapProxy  var_cas_parameterTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_55000->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)), var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (1347)) ;
        var_cas_routineSignature.addAssign_operation (var_cas_parameterTypeIndex, operand_55000->mFormalArgumentPassingMode) ;
      }
    }
    var_cas_ioSemanticContext.mRoutineMap.modifier_insertKey (inLexique, operand_54734->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (1351)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@externFunctionDeclarationAST.enterType'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_externFunctionDeclarationAST * operand_55533,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55533 != NULL) {
    GGS_unifiedTypeMapProxyList  var_cas_functionSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_55800 (operand_55533->mFormalArgumentList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_55800 = NULL ;
      while (((operand_55800 = enumerator_55800.nextObject ()))) {
        macroValidPointer (operand_55800) ;
        GGS_unifiedTypeMapProxy  var_cas_parameterTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_55800->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1364)), var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (1364)) ;
        var_cas_functionSignature.addAssign_operation (var_cas_parameterTypeIndex) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_resultTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_55533->mResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1369)), var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1369)) ;
    var_cas_ioSemanticContext.mFunctionMap.modifier_insertKey (inLexique, operand_55533->mFunctionName, var_cas_functionSignature, var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1371)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@onceFunctionDeclarationAST.enterType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__onceFunctionDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_onceFunctionDeclarationAST * operand_56500,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56500 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_resultTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_56500->mResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1382)), var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1382)) ;
    var_cas_ioSemanticContext.mFunctionMap.modifier_insertKey (inLexique, operand_56500->mFunctionName, GGS_unifiedTypeMapProxyList ::constructor_emptyList (), var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1384)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@listmapDeclarationAST.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_57093,
                                const GGS_multiMethodMapForBuildingContext   /* var_cas_inMultiMethodMapForBuildingContext */,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57093 != NULL) {
    GGS_typedAttributeList  var_cas_listTypedAttributeList ;
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_bool automatic_var_57558_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_57558_1 ;
    GGS_attributeMap  automatic_var_57558_2 ;
    GGS_typedAttributeList  automatic_var_57558_3 ;
    GGS_constructorMap  automatic_var_57558_4 ;
    GGS_readerMap  automatic_var_57558_5 ;
    GGS_modifierMap  automatic_var_57558_6 ;
    GGS_instanceMethodMap  automatic_var_57558_7 ;
    GGS_classMethodMap  automatic_var_57558_8 ;
    GGS_enumerationDescriptorList  automatic_var_57558_9 ;
    GGS_uint  automatic_var_57558_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_57558_11 ;
    GGS_nativeAttributeList  automatic_var_57558_12 ;
    GGS_stringset  automatic_var_57558_13 ;
    GGS_lstringlist  automatic_var_57558_14 ;
    GGS_typedAttributeList  automatic_var_57558_15 ;
    GGS_mapSearchMethodListAST  automatic_var_57558_16 ;
    GGS_mapSearchMethodListAST  automatic_var_57558_17 ;
    GGS_withAccessorMap  automatic_var_57558_18 ;
    if (var_cas_ioSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_ioSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_57093->mAssociatedListTypeName, automatic_var_57558_0, automatic_var_57558_1, var_cas_typeKindEnum, var_cas_listTypedAttributeList, automatic_var_57558_2, automatic_var_57558_3, automatic_var_57558_4, automatic_var_57558_5, automatic_var_57558_6, automatic_var_57558_7, automatic_var_57558_8, automatic_var_57558_9, automatic_var_57558_10, automatic_var_57558_11, automatic_var_57558_12, automatic_var_57558_13, automatic_var_57558_14, automatic_var_57558_15, automatic_var_57558_16, automatic_var_57558_17, automatic_var_57558_18 COMMA_SOURCE_FILE_AT_LINE (1397)) ;
    }
    const GGS_bool cond_57787 = (var_cas_typeKindEnum).operator_isNotEqual (GGS_typeKindEnum::constructor_listType (inLexique COMMA_SOURCE_FILE_AT_LINE (1404))) ;
    if (cond_57787.isBuiltAndTrue ()) {
      operand_57093->mAssociatedListTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (operand_57093->mAssociatedListTypeName)).operator_concat (GGS_string ("' type should be a list type")) COMMA_SOURCE_FILE_AT_LINE (1406)) ;
      var_cas_listTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1409)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1410)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1411)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1412)) ;
    GGS_unifiedTypeMapProxy  var_cas_associatedListTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_57093->mAssociatedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1415)), var_cas_associatedListTypeIndex COMMA_SOURCE_FILE_AT_LINE (1415)) ;
    GGS_unifiedTypeMapProxy  var_cas_currentTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_57093->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1418)), var_cas_currentTypeIndex COMMA_SOURCE_FILE_AT_LINE (1418)) ;
    GGS_unifiedTypeMapProxy  var_cas_stringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("string"), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (1421)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("count"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1423)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("allKeys"),  GGS_string ("stringset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1424)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("keyList"),  GGS_string ("stringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1425)) ;
    ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("listForKey"),  GGS_string ("string"),  operand_57093->mAssociatedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1426)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1426)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptyMap"),  operand_57093->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1428)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1428)) ;
    GGS_enumerationDescriptorList  var_cas_enumeratorDescriptor = GGS_enumerationDescriptorList ::constructor_emptyList () ;
    var_cas_enumeratorDescriptor.addAssign_operation (var_cas_stringTypeIndex, GGS_string ("key")) ;
    var_cas_enumeratorDescriptor.addAssign_operation (var_cas_associatedListTypeIndex, GGS_string ("mList")) ;
    GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorDescription = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    var_cas_addAssignOperatorDescription.addAssign_operation (var_cas_stringTypeIndex) ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_59574 (var_cas_listTypedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_59574 = NULL ;
      while (((operand_59574 = enumerator_59574.nextObject ()))) {
        macroValidPointer (operand_59574) ;
        var_cas_addAssignOperatorDescription.addAssign_operation (operand_59574->mAttributeTypeIndex) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("listmap"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (1441)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_57093->mListmapTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_listMapType (inLexique COMMA_SOURCE_FILE_AT_LINE (1446)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1448)), var_cas_listTypedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1454)), var_cas_enumeratorDescriptor, (((function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (1456))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)))).operator_or (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)))).operator_or (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1456))), var_cas_addAssignOperatorDescription, GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1464)) COMMA_SOURCE_FILE_AT_LINE (1442)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Element of list '@partiallyOrderedSemanticDeclarationListAST'        *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
elementOf_GGS_partiallyOrderedSemanticDeclarationListAST (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_semanticDeclarationAST & argument_2):
mDependanceString (argument_0),
mTypeString (argument_1),
mSemanticDeclaration (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * ptr = dynamic_cast <const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mDependanceString.operator_isEqual (ptr->mDependanceString).boolValue ()
         && mTypeString.operator_isEqual (ptr->mTypeString).boolValue ()
         && mSemanticDeclaration.operator_isEqual (ptr->mSemanticDeclaration).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * operand = (const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST *) inOperand ;
  PMSInt32 result = mDependanceString.genericObjectCompare (operand->mDependanceString) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mDependanceString.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTypeString.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSemanticDeclaration.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Sorted list '@partiallyOrderedSemanticDeclarationListAST'          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_partiallyOrderedSemanticDeclarationListAST ("partiallyOrderedSemanticDeclarationListAST", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST::GGS_partiallyOrderedSemanticDeclarationListAST (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST::
GGS_partiallyOrderedSemanticDeclarationListAST (const GGS_partiallyOrderedSemanticDeclarationListAST & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_partiallyOrderedSemanticDeclarationListAST::
operator_isEqual (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_partiallyOrderedSemanticDeclarationListAST::
operator_isNotEqual (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
internalAppendValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_semanticDeclarationAST & argument_2) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
addAssign_operation (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_semanticDeclarationAST & argument_2) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST GGS_partiallyOrderedSemanticDeclarationListAST::
operator_concat (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const {
  GGS_partiallyOrderedSemanticDeclarationListAST result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
dotAssign_operation (const GGS_partiallyOrderedSemanticDeclarationListAST inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_string p_0 = p->mDependanceString ;
          GGS_string p_1 = p->mTypeString ;
          GGS_semanticDeclarationAST  p_2 = p->mSemanticDeclaration ;
          internalAppendValues (p_0, p_1, p_2) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mDependanceString,
                                ptr->mTypeString,
                                ptr->mSemanticDeclaration) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST  GGS_partiallyOrderedSemanticDeclarationListAST::
constructor_emptySortedList (void) {
  GGS_partiallyOrderedSemanticDeclarationListAST result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST  GGS_partiallyOrderedSemanticDeclarationListAST::
constructor_sortedListWithValue (const GGS_string& argument_0,
                           const GGS_string& argument_1,
                           const GGS_semanticDeclarationAST & argument_2) {
  GGS_partiallyOrderedSemanticDeclarationListAST result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_partiallyOrderedSemanticDeclarationListAST::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@partiallyOrderedSemanticDeclarationListAST", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
method_smallest (C_Compiler & inLexique,
                 GGS_string& _out_0,
                 GGS_string& _out_1,
                 GGS_semanticDeclarationAST & _out_2
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
method_greatest (C_Compiler & inLexique,
             GGS_string& _out_0,
             GGS_string& _out_1,
             GGS_semanticDeclarationAST & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_string& _out_0,
                 GGS_string& _out_1,
                 GGS_semanticDeclarationAST & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_string& _out_0,
                GGS_string& _out_1,
                GGS_semanticDeclarationAST & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator::_mDependanceString (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mDependanceString ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator::_mTypeString (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mTypeString ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_semanticDeclarationAST  & GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator::_mSemanticDeclaration (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSemanticDeclaration ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_partiallyOrderedSemanticDeclarationListAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_partiallyOrderedSemanticDeclarationListAST * p = NULL ;
    macroMyNew (p, GGS_partiallyOrderedSemanticDeclarationListAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST GGS_partiallyOrderedSemanticDeclarationListAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_partiallyOrderedSemanticDeclarationListAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_partiallyOrderedSemanticDeclarationListAST * p = dynamic_cast <const GGS_partiallyOrderedSemanticDeclarationListAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_partiallyOrderedSemanticDeclarationListAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_partiallyOrderedSemanticDeclarationListAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_partiallyOrderedSemanticDeclarationListAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.enterOrderedDeclaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_61344,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & /* var_cas_ioPartiallyOrderedDeclarationList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_61344 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.enterOrderedDeclaration'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration> gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration
findCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_predefinedTypeAST * operand_61587,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_61587 != NULL) {
    GGS_predefinedTypeAST  var_cas_t = operand_61587 ;
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), operand_61587->mPredefinedTypeName, operand_61587) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@objectPredefinedTypeAST.enterOrderedDeclaration'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__objectPredefinedTypeAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_objectPredefinedTypeAST * operand_61952,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_61952 != NULL) {
    GGS_objectPredefinedTypeAST  var_cas_t = operand_61952 ;
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), GGS_string ("object"), operand_61952) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@stringsetPredefinedTypeAST.enterOrderedDeclaration'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__stringsetPredefinedTypeAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_stringsetPredefinedTypeAST * operand_62315,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62315 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), operand_62315->mPredefinedTypeName, operand_62315) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.enterOrderedDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_62625,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62625 != NULL) {
    const GGS_string var_cas_actualSuperTypeName = operand_62625->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)) ;
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (var_cas_actualSuperTypeName, operand_62625->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)), operand_62625) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_63021,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63021 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), operand_63021->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1529)), operand_63021) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.enterOrderedDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_63335,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63335 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), operand_63335->mStructTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1537)), operand_63335) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@enumDeclarationAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_63649,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63649 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), operand_63649->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1545)), operand_63649) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.enterOrderedDeclaration'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_63967,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63967 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), operand_63967->mSortedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1553)), operand_63967) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@listmapDeclarationAST.enterOrderedDeclaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_64288,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_64288 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (operand_64288->mAssociatedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1561)), operand_64288->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1561)), operand_64288) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@mapDeclarationAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_64632,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_64632 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), operand_64632->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1569)), operand_64632) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@mapProxyDeclarationAST.enterOrderedDeclaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_64947,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_64947 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (operand_64947->mAssociatedMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)), operand_64947->mMapProxyTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)), operand_64947) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@externFunctionDeclarationAST.enterOrderedDeclaration'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_externFunctionDeclarationAST * operand_65302,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65302 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), GGS_string (""), operand_65302) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@externRoutineDeclarationAST.enterOrderedDeclaration'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_externRoutineDeclarationAST * operand_65603,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65603 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), GGS_string (""), operand_65603) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildSemanticContext"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSemanticContext (C_Compiler & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inSemanticDeclarationList,
                                const GGS_location   var_cas_inEndOfSourceFile,
                                GGS_semanticContext & var_cas_outSemanticContext
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildSemanticContext at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_collectedTypeMap  var_cas_collectedTypeMap = GGS_collectedTypeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1608)) ;
  GGS_multiMethodMapForBuildingContext  var_cas_multiMethodMapForBuildingContext = GGS_multiMethodMapForBuildingContext ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1609)) ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_66539 (var_cas_inSemanticDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_66539 = NULL ;
    while (((operand_66539 = enumerator_66539.nextObject ()))) {
      macroValidPointer (operand_66539) ;
      { typeCategoryMethod__semanticDeclarationAST__collectTypes method = findCategoryMethod__semanticDeclarationAST__collectTypes (operand_66539->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_66539->mSemanticDeclaration (HERE), var_cas_collectedTypeMap, var_cas_multiMethodMapForBuildingContext COMMA_SOURCE_FILE_AT_LINE (1611)) ;
        }
      }
    }
  }
  GGS_stringlist  var_cas_undefinedClasses = var_cas_collectedTypeMap.reader_unsolvedProxyKeyList (inLexique COMMA_SOURCE_FILE_AT_LINE (1617)) ;
  const GGS_bool cond_67051 = (var_cas_undefinedClasses.reader_length ()).operator_isEqual (GGS_uint (1U)) ;
  if (cond_67051.isBuiltAndTrue ()) {
    GGS_string var_cas_errorMessage = GGS_string ("there is 1 undefined type:") ;
    {
      GGS_stringlist::cEnumerator enumerator_66914 (var_cas_undefinedClasses, true) ;
      const GGS_stringlist::cElement * operand_66914 = NULL ;
      while (((operand_66914 = enumerator_66914.nextObject ()))) {
        macroValidPointer (operand_66914) ;
        var_cas_errorMessage.appendCString ("\n"
          "-  @") ;
        var_cas_errorMessage.dotAssign_operation (operand_66914->mValue) ;
      }
    }
    var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1624)) ;
    var_cas_outSemanticContext.drop () ;
  }else if (cond_67051.isBuiltAndFalse ()) {
    const GGS_bool cond_67353 = (var_cas_undefinedClasses.reader_length ()).operator_strictSup (GGS_uint (1U)) ;
    if (cond_67353.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = ((GGS_string ("there are ")).operator_concat (var_cas_undefinedClasses.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1625)))).operator_concat (GGS_string (" undefined types:")) ;
      {
        GGS_stringlist::cEnumerator enumerator_67217 (var_cas_undefinedClasses, true) ;
        const GGS_stringlist::cElement * operand_67217 = NULL ;
        while (((operand_67217 = enumerator_67217.nextObject ()))) {
          macroValidPointer (operand_67217) ;
          var_cas_errorMessage.appendCString ("\n"
            "-  @") ;
          var_cas_errorMessage.dotAssign_operation (operand_67217->mValue) ;
        }
      }
      var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1630)) ;
      var_cas_outSemanticContext.drop () ;
    }else if (cond_67353.isBuiltAndFalse ()) {
      GGS_partiallyOrderedSemanticDeclarationListAST  var_cas_partiallyOrderedSemanticDeclarationListAST = GGS_partiallyOrderedSemanticDeclarationListAST ::constructor_emptySortedList () ;
      {
        GGS_semanticDeclarationListAST::cEnumerator enumerator_67716 (var_cas_inSemanticDeclarationList, true) ;
        const GGS_semanticDeclarationListAST::cElement * operand_67716 = NULL ;
        while (((operand_67716 = enumerator_67716.nextObject ()))) {
          macroValidPointer (operand_67716) ;
          { typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration method = findCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (operand_67716->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_67716->mSemanticDeclaration (HERE), var_cas_partiallyOrderedSemanticDeclarationListAST COMMA_SOURCE_FILE_AT_LINE (1637)) ;
            }
          }
        }
      }
      GGS_semanticDeclarationListAST  var_cas_orderedSemanticDeclarationListAST = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
      GGS_stringset  var_cas_alreadyDefinedTypes = GGS_stringset ::constructor_emptySet () ;
      var_cas_alreadyDefinedTypes.addAssign_operation (GGS_string ("")) ;
      GGS_bool var_cas_progress = GGS_bool (true) ;
      GGS_uint _variant_68830 = var_cas_partiallyOrderedSemanticDeclarationListAST.reader_length () ;
      GGS_bool _condition_68830 (_variant_68830.isBuilt (), true) ;
      while (_condition_68830.isBuiltAndTrue ()) {
        _condition_68830 = ((var_cas_partiallyOrderedSemanticDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and (var_cas_progress) ;
        if (_condition_68830.isBuiltAndTrue ()) {
          if (_variant_68830.uintValue () == 0) {
            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1658)) ;
            _condition_68830 = GGS_bool (false) ;
          }else{
            _variant_68830.decrement_operation (inLexique COMMA_HERE) ;
            var_cas_progress = GGS_bool (false) ;
            const GGS_partiallyOrderedSemanticDeclarationListAST  var_cas_r = var_cas_partiallyOrderedSemanticDeclarationListAST ;
            var_cas_partiallyOrderedSemanticDeclarationListAST = GGS_partiallyOrderedSemanticDeclarationListAST ::constructor_emptySortedList () ;
            {
              GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator enumerator_68445 (var_cas_r, true) ;
              const GGS_partiallyOrderedSemanticDeclarationListAST::cElement * operand_68445 = NULL ;
              while (((operand_68445 = enumerator_68445.nextObject ()))) {
                macroValidPointer (operand_68445) ;
                const GGS_bool cond_68673 = var_cas_alreadyDefinedTypes.reader_hasKey (operand_68445->mDependanceString) ;
                if (cond_68673.isBuiltAndTrue ()) {
                  var_cas_orderedSemanticDeclarationListAST.addAssign_operation (operand_68445->mSemanticDeclaration) ;
                  var_cas_alreadyDefinedTypes.addAssign_operation (operand_68445->mTypeString) ;
                  var_cas_progress = GGS_bool (true) ;
                }else if (cond_68673.isBuiltAndFalse ()) {
                  var_cas_partiallyOrderedSemanticDeclarationListAST.addAssign_operation (operand_68445->mDependanceString, operand_68445->mTypeString, operand_68445->mSemanticDeclaration) ;
                }
              }
            }
          }
        }
      }
      const GGS_bool cond_69453 = (var_cas_partiallyOrderedSemanticDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_69453.isBuiltAndTrue ()) {
        GGS_string var_cas_s = GGS_string ("inheritance circularities involving the ") ;
        {
          GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator enumerator_69112 (var_cas_partiallyOrderedSemanticDeclarationListAST, true) ;
          const GGS_partiallyOrderedSemanticDeclarationListAST::cElement * operand_69112 = enumerator_69112.nextObject () ;
          if ((operand_69112 != NULL)) {
            bool _foreach_loop_69112 ;
            do{
              macroValidPointer (operand_69112) ;
              var_cas_s.appendCString ("@") ;
              var_cas_s.dotAssign_operation (operand_69112->mTypeString) ;
              operand_69112 = enumerator_69112.nextObject () ;
              _foreach_loop_69112 = ((operand_69112 != NULL)) ;
              if (_foreach_loop_69112) {
                var_cas_s.appendCString (", ") ;
              }
            }while (_foreach_loop_69112) ;
          }
        }
        var_cas_s.appendCString (" classes; detail:") ;
        {
          GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator enumerator_69285 (var_cas_partiallyOrderedSemanticDeclarationListAST, true) ;
          const GGS_partiallyOrderedSemanticDeclarationListAST::cElement * operand_69285 = NULL ;
          while (((operand_69285 = enumerator_69285.nextObject ()))) {
            macroValidPointer (operand_69285) ;
            var_cas_s.appendCString ("\n"
              "  - @") ;
            var_cas_s.dotAssign_operation (operand_69285->mTypeString) ;
            var_cas_s.appendCString (" inherits from @") ;
            var_cas_s.dotAssign_operation (operand_69285->mDependanceString) ;
          }
        }
        var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (1671)) ;
        var_cas_outSemanticContext.drop () ;
      }else if (cond_69453.isBuiltAndFalse ()) {
        var_cas_outSemanticContext = GGS_semanticContext::constructor_new (GGS_unifiedTypeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1674)), GGS_routineMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1675)), GGS_functionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1676)), GGS_filewrapperMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1677)), GGS_grammarMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1678)), GGS_optionComponentMapForSemanticAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1679))) ;
        {
          GGS_semanticDeclarationListAST::cEnumerator enumerator_69869 (var_cas_orderedSemanticDeclarationListAST, true) ;
          const GGS_semanticDeclarationListAST::cElement * operand_69869 = NULL ;
          while (((operand_69869 = enumerator_69869.nextObject ()))) {
            macroValidPointer (operand_69869) ;
            { typeCategoryMethod__semanticDeclarationAST__enterType method = findCategoryMethod__semanticDeclarationAST__enterType (operand_69869->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_69869->mSemanticDeclaration (HERE), var_cas_multiMethodMapForBuildingContext, var_cas_outSemanticContext COMMA_SOURCE_FILE_AT_LINE (1683)) ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildSemanticContext\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticContext (void) {
  enterCategoryMethod__semanticDeclarationAST__collectTypes (category_method__semanticDeclarationAST__collectTypes, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__abstracMultiMethodAST__collectTypes, gClassInfoFor__abstracMultiMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__multiMethodAST__collectTypes, gClassInfoFor__multiMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__overridingMultiMethodAST__collectTypes, gClassInfoFor__overridingMultiMethodAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__abstractMultiReaderAST__collectTypes, gClassInfoFor__abstractMultiReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__multiReaderAST__collectTypes, gClassInfoFor__multiReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__overridingMultiReaderAST__collectTypes, gClassInfoFor__overridingMultiReaderAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__objectPredefinedTypeAST__collectTypes, gClassInfoFor__objectPredefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__predefinedTypeAST__collectTypes, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__mapDeclarationAST__collectTypes, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__mapProxyDeclarationAST__collectTypes, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__enumDeclarationAST__collectTypes, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__sortedListDeclarationAST__collectTypes, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__structDeclarationAST__collectTypes, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__listDeclarationAST__collectTypes, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__classDeclarationAST__collectTypes, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectTypes ((typeCategoryMethod__semanticDeclarationAST__collectTypes) category_method__listmapDeclarationAST__collectTypes, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__predefinedTypeAST__enterType, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__mapDeclarationAST__enterType, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__mapProxyDeclarationAST__enterType, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__enumDeclarationAST__enterType, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__filewrapperDeclarationAST__enterType, gClassInfoFor__filewrapperDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__listDeclarationAST__enterType, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__sortedListDeclarationAST__enterType, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__structDeclarationAST__enterType, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__classDeclarationAST__enterType, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__externRoutineDeclarationAST__enterType, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__externFunctionDeclarationAST__enterType, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__onceFunctionDeclarationAST__enterType, gClassInfoFor__onceFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__listmapDeclarationAST__enterType, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (category_method__semanticDeclarationAST__enterOrderedDeclaration, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__predefinedTypeAST__enterOrderedDeclaration, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__objectPredefinedTypeAST__enterOrderedDeclaration, gClassInfoFor__objectPredefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__stringsetPredefinedTypeAST__enterOrderedDeclaration, gClassInfoFor__stringsetPredefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__classDeclarationAST__enterOrderedDeclaration, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__listDeclarationAST__enterOrderedDeclaration, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__structDeclarationAST__enterOrderedDeclaration, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__enumDeclarationAST__enterOrderedDeclaration, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__sortedListDeclarationAST__enterOrderedDeclaration, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__listmapDeclarationAST__enterOrderedDeclaration, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__mapDeclarationAST__enterOrderedDeclaration, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__mapProxyDeclarationAST__enterOrderedDeclaration, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__externFunctionDeclarationAST__enterOrderedDeclaration, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__externRoutineDeclarationAST__enterOrderedDeclaration, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticContext (void) {
  gDispatchTableForMethod__semanticDeclarationAST__collectTypes.free () ;
  gDispatchTableForMethod__semanticDeclarationAST__enterType.free () ;
  gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticContext (prologueRoutineFor_semanticContext, epilogueRoutineFor_semanticContext) ;

//---------------------------------------------------------------------------*

