//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'semanticContext.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 7th, 2010, at 21h33'22"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticContext.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticContext.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                        class 'e_grammarLabelMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_grammarLabelMap::e_grammarLabelMap (void) :
mLabelSignature () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@grammarLabelMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_grammarLabelMap ("grammarLabelMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_grammarLabelMap::
elementOf_GGS_grammarLabelMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_grammarLabelMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_grammarLabelMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabelSignature.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_grammarLabelMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_grammarLabelMap * ptr = dynamic_cast <const elementOf_GGS_grammarLabelMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabelSignature.operator_isEqual (ptr->mInfo.mLabelSignature)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_grammarLabelMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_grammarLabelMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_grammarLabelMap * info = (e_grammarLabelMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_grammarLabelMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_grammarLabelMap * info = (e_grammarLabelMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarLabelMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_grammarLabelMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarLabelMap::
operator_isEqual (const GGS_grammarLabelMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarLabelMap::
operator_isNotEqual (const GGS_grammarLabelMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_formalParameterSignature & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_grammarLabelMap info  ;
    info.mLabelSignature = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_formalParameterSignature   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mLabelSignature ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarLabelMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_formalParameterSignature   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarLabelMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarLabelMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterSignature & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_grammarLabelMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarLabelMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_grammarLabelMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_grammarLabelMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @grammarLabelMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterSignature  & GGS_grammarLabelMap::cEnumerator::_mLabelSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabelSignature ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_grammarLabelMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_grammarLabelMap * p = NULL ;
    macroMyNew (p, GGS_grammarLabelMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_grammarLabelMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_grammarLabelMap * p = dynamic_cast <const GGS_grammarLabelMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_grammarLabelMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_grammarLabelMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_grammarLabelMap ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelMap GGS_grammarLabelMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_formalParameterSignature & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_grammarLabelMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_grammarMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_grammarMap::e_grammarMap (void) :
mLabelMap () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@grammarMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_grammarMap ("grammarMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_grammarMap::
elementOf_GGS_grammarMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_grammarMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_grammarMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mLabelMap.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_grammarMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_grammarMap * ptr = dynamic_cast <const elementOf_GGS_grammarMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mLabelMap.operator_isEqual (ptr->mInfo.mLabelMap)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_grammarMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_grammarMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_grammarMap * info = (e_grammarMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_grammarMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_grammarMap * info = (e_grammarMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_grammarMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarMap::
operator_isEqual (const GGS_grammarMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarMap::
operator_isNotEqual (const GGS_grammarMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_grammarLabelMap & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_grammarMap info  ;
    info.mLabelMap = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_grammarLabelMap   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mLabelMap ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_grammarLabelMap   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_grammarMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('g'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_grammarMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_grammarLabelMap & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_grammarMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_grammarMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_grammarMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_grammarMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @grammarMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_grammarLabelMap  & GGS_grammarMap::cEnumerator::_mLabelMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mLabelMap ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_grammarMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_grammarMap * p = NULL ;
    macroMyNew (p, GGS_grammarMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_grammarMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_grammarMap * p = dynamic_cast <const GGS_grammarMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_grammarMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_grammarMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_grammarMap ;
}

//---------------------------------------------------------------------------*

GGS_grammarMap GGS_grammarMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_grammarLabelMap & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_grammarMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                           class 'e_routineMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_routineMap::e_routineMap (void) :
mRoutineSignature () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@routineMap'                           *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_routineMap ("routineMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_routineMap::
elementOf_GGS_routineMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_routineMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_routineMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mRoutineSignature.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_routineMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_routineMap * ptr = dynamic_cast <const elementOf_GGS_routineMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mRoutineSignature.operator_isEqual (ptr->mInfo.mRoutineSignature)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_routineMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_routineMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_routineMap * info = (e_routineMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_routineMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
operator_isEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_routineMap::
operator_isNotEqual (const GGS_routineMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_formalParameterSignature & inParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_routineMap info  ;
    info.mRoutineSignature = inParameter0 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_routineMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_formalParameterSignature   & outParameter0,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mRoutineSignature ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_routineMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_routineMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_formalParameterSignature   & outParameter0 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_routineMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_routineMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_formalParameterSignature & inParameter0 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_routineMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_routineMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_routineMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_routineMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @routineMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalParameterSignature  & GGS_routineMap::cEnumerator::_mRoutineSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mRoutineSignature ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_routineMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_routineMap * p = NULL ;
    macroMyNew (p, GGS_routineMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_routineMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_routineMap * p = dynamic_cast <const GGS_routineMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_routineMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_routineMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_routineMap ;
}

//---------------------------------------------------------------------------*

GGS_routineMap GGS_routineMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_formalParameterSignature & inValue0
                                             COMMA_LOCATION_ARGS) {
  GGS_routineMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_functionMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_functionMap::e_functionMap (void) :
mFunctionSignature (),
mResultType () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@functionMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_functionMap ("functionMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_functionMap::
elementOf_GGS_functionMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_functionMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_functionMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFunctionSignature.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mResultType.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_functionMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_functionMap * ptr = dynamic_cast <const elementOf_GGS_functionMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFunctionSignature.operator_isEqual (ptr->mInfo.mFunctionSignature)).boolValue ()
           && (mInfo.mResultType.operator_isEqual (ptr->mInfo.mResultType)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_functionMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_functionMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_functionMap * info = (e_functionMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_functionMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_functionMap * info = (e_functionMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_functionMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_functionMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_functionMap::
operator_isEqual (const GGS_functionMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_functionMap::
operator_isNotEqual (const GGS_functionMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxyList & inParameter0,
               const GGS_unifiedTypeMapProxy & inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_functionMap info  ;
    info.mFunctionSignature = inParameter0 ;
    info.mResultType = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_functionMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxyList   & outParameter0,
               GGS_unifiedTypeMapProxy   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mFunctionSignature ;
    outParameter1 = node->mInfo.mResultType ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_functionMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_functionMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxyList   & outParameter0,
                                GGS_unifiedTypeMapProxy   & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_functionMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_functionMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxyList & inParameter0,
                                const GGS_unifiedTypeMapProxy & inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_functionMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_functionMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_functionMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_functionMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @functionMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxyList  & GGS_functionMap::cEnumerator::_mFunctionSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFunctionSignature ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_functionMap::cEnumerator::_mResultType (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mResultType ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_functionMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_functionMap * p = NULL ;
    macroMyNew (p, GGS_functionMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_functionMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_functionMap * p = dynamic_cast <const GGS_functionMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_functionMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_functionMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_functionMap ;
}

//---------------------------------------------------------------------------*

GGS_functionMap GGS_functionMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxyList & inValue0,
                                             const GGS_unifiedTypeMapProxy & inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_functionMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'e_filewrapperTemplateMap'                      *
//                                                                           *
//---------------------------------------------------------------------------*

e_filewrapperTemplateMap::e_filewrapperTemplateMap (void) :
mTemplateSignature (),
mFilewrapperTemplatePath () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   class map '@filewrapperTemplateMap'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_filewrapperTemplateMap ("filewrapperTemplateMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_filewrapperTemplateMap::
elementOf_GGS_filewrapperTemplateMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_filewrapperTemplateMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_filewrapperTemplateMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTemplateSignature.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperTemplatePath.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_filewrapperTemplateMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_filewrapperTemplateMap * ptr = dynamic_cast <const elementOf_GGS_filewrapperTemplateMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTemplateSignature.operator_isEqual (ptr->mInfo.mTemplateSignature)).boolValue ()
           && (mInfo.mFilewrapperTemplatePath.operator_isEqual (ptr->mInfo.mFilewrapperTemplatePath)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_filewrapperTemplateMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_filewrapperTemplateMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_filewrapperTemplateMap * info = (e_filewrapperTemplateMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_filewrapperTemplateMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_filewrapperTemplateMap * info = (e_filewrapperTemplateMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_filewrapperTemplateMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperTemplateMap::
operator_isEqual (const GGS_filewrapperTemplateMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperTemplateMap::
operator_isNotEqual (const GGS_filewrapperTemplateMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxyList & inParameter0,
               const GGS_lstring & inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_filewrapperTemplateMap info  ;
    info.mTemplateSignature = inParameter0 ;
    info.mFilewrapperTemplatePath = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxyList   & outParameter0,
               GGS_lstring   & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mTemplateSignature ;
    outParameter1 = node->mInfo.mFilewrapperTemplatePath ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperTemplateMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxyList   & outParameter0,
                                GGS_lstring   & outParameter1 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperTemplateMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperTemplateMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxyList & inParameter0,
                                const GGS_lstring & inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_filewrapperTemplateMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_filewrapperTemplateMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_filewrapperTemplateMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @filewrapperTemplateMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxyList  & GGS_filewrapperTemplateMap::cEnumerator::_mTemplateSignature (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTemplateSignature ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_filewrapperTemplateMap::cEnumerator::_mFilewrapperTemplatePath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperTemplatePath ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_filewrapperTemplateMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_filewrapperTemplateMap * p = NULL ;
    macroMyNew (p, GGS_filewrapperTemplateMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_filewrapperTemplateMap * p = dynamic_cast <const GGS_filewrapperTemplateMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_filewrapperTemplateMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_filewrapperTemplateMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_filewrapperTemplateMap ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperTemplateMap GGS_filewrapperTemplateMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_unifiedTypeMapProxyList & inValue0,
                                             const GGS_lstring & inValue1
                                             COMMA_LOCATION_ARGS) {
  GGS_filewrapperTemplateMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class 'e_filewrapperMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

e_filewrapperMap::e_filewrapperMap (void) :
mFilewrapperPath (),
mFilewrapperExtensionList (),
mFilewrapperTemplateMap () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                       class map '@filewrapperMap'                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_filewrapperMap ("filewrapperMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_filewrapperMap::
elementOf_GGS_filewrapperMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_filewrapperMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_filewrapperMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperPath.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperExtensionList.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mFilewrapperTemplateMap.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_filewrapperMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_filewrapperMap * ptr = dynamic_cast <const elementOf_GGS_filewrapperMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mFilewrapperPath.operator_isEqual (ptr->mInfo.mFilewrapperPath)).boolValue ()
           && (mInfo.mFilewrapperExtensionList.operator_isEqual (ptr->mInfo.mFilewrapperExtensionList)).boolValue ()
           && (mInfo.mFilewrapperTemplateMap.operator_isEqual (ptr->mInfo.mFilewrapperTemplateMap)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_filewrapperMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_filewrapperMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_filewrapperMap * info = (e_filewrapperMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_filewrapperMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_filewrapperMap * info = (e_filewrapperMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_filewrapperMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperMap::
operator_isEqual (const GGS_filewrapperMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_filewrapperMap::
operator_isNotEqual (const GGS_filewrapperMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_lstring & inParameter0,
               const GGS_lstringlist & inParameter1,
               const GGS_filewrapperTemplateMap & inParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_filewrapperMap info  ;
    info.mFilewrapperPath = inParameter0 ;
    info.mFilewrapperExtensionList = inParameter1 ;
    info.mFilewrapperTemplateMap = inParameter2 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_lstring   & outParameter0,
               GGS_lstringlist   & outParameter1,
               GGS_filewrapperTemplateMap   & outParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mFilewrapperPath ;
    outParameter1 = node->mInfo.mFilewrapperExtensionList ;
    outParameter2 = node->mInfo.mFilewrapperTemplateMap ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_lstring   & outParameter0,
                                GGS_lstringlist   & outParameter1,
                                GGS_filewrapperTemplateMap   & outParameter2 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_filewrapperMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_filewrapperMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_lstring & inParameter0,
                                const GGS_lstringlist & inParameter1,
                                const GGS_filewrapperTemplateMap & inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_filewrapperMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_filewrapperMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_filewrapperMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_filewrapperMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @filewrapperMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_filewrapperMap::cEnumerator::_mFilewrapperPath (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperPath ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstringlist  & GGS_filewrapperMap::cEnumerator::_mFilewrapperExtensionList (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperExtensionList ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_filewrapperTemplateMap  & GGS_filewrapperMap::cEnumerator::_mFilewrapperTemplateMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mFilewrapperTemplateMap ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_filewrapperMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_filewrapperMap * p = NULL ;
    macroMyNew (p, GGS_filewrapperMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_filewrapperMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_filewrapperMap * p = dynamic_cast <const GGS_filewrapperMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_filewrapperMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_filewrapperMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_filewrapperMap ;
}

//---------------------------------------------------------------------------*

GGS_filewrapperMap GGS_filewrapperMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_lstring & inValue0,
                                             const GGS_lstringlist & inValue1,
                                             const GGS_filewrapperTemplateMap & inValue2
                                             COMMA_LOCATION_ARGS) {
  GGS_filewrapperMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        inValue2,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             class 'e_optionComponentMapForSemanticAnalysis'               *
//                                                                           *
//---------------------------------------------------------------------------*

e_optionComponentMapForSemanticAnalysis::e_optionComponentMapForSemanticAnalysis (void) :
mBoolOptionMap (),
mUIntOptionMap (),
mStringOptionMap () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//            class map '@optionComponentMapForSemanticAnalysis'             *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_optionComponentMapForSemanticAnalysis ("optionComponentMapForSemanticAnalysis", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_optionComponentMapForSemanticAnalysis::
elementOf_GGS_optionComponentMapForSemanticAnalysis (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_optionComponentMapForSemanticAnalysis & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_optionComponentMapForSemanticAnalysis::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mBoolOptionMap.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mUIntOptionMap.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mStringOptionMap.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_optionComponentMapForSemanticAnalysis::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_optionComponentMapForSemanticAnalysis * ptr = dynamic_cast <const elementOf_GGS_optionComponentMapForSemanticAnalysis *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mBoolOptionMap.operator_isEqual (ptr->mInfo.mBoolOptionMap)).boolValue ()
           && (mInfo.mUIntOptionMap.operator_isEqual (ptr->mInfo.mUIntOptionMap)).boolValue ()
           && (mInfo.mStringOptionMap.operator_isEqual (ptr->mInfo.mStringOptionMap)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_optionComponentMapForSemanticAnalysis::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_optionComponentMapForSemanticAnalysis *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_optionComponentMapForSemanticAnalysis * info = (e_optionComponentMapForSemanticAnalysis *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_optionComponentMapForSemanticAnalysis *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_optionComponentMapForSemanticAnalysis * info = (e_optionComponentMapForSemanticAnalysis *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_optionComponentMapForSemanticAnalysis info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentMapForSemanticAnalysis::
operator_isEqual (const GGS_optionComponentMapForSemanticAnalysis & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_optionComponentMapForSemanticAnalysis::
operator_isNotEqual (const GGS_optionComponentMapForSemanticAnalysis & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_commandLineOptionMap & inParameter0,
               const GGS_commandLineOptionMap & inParameter1,
               const GGS_commandLineOptionMap & inParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_optionComponentMapForSemanticAnalysis info  ;
    info.mBoolOptionMap = inParameter0 ;
    info.mUIntOptionMap = inParameter1 ;
    info.mStringOptionMap = inParameter2 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_commandLineOptionMap   & outParameter0,
               GGS_commandLineOptionMap   & outParameter1,
               GGS_commandLineOptionMap   & outParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    outParameter0 = node->mInfo.mBoolOptionMap ;
    outParameter1 = node->mInfo.mUIntOptionMap ;
    outParameter2 = node->mInfo.mStringOptionMap ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_optionComponentMapForSemanticAnalysis::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_commandLineOptionMap   & outParameter0,
                                GGS_commandLineOptionMap   & outParameter1,
                                GGS_commandLineOptionMap   & outParameter2 COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_optionComponentMapForSemanticAnalysis::kInsertMessage_insertKey [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('m'),
  TO_UNICODE ('p'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (':'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_optionComponentMapForSemanticAnalysis::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_commandLineOptionMap & inParameter0,
                                const GGS_commandLineOptionMap & inParameter1,
                                const GGS_commandLineOptionMap & inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_optionComponentMapForSemanticAnalysis & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_optionComponentMapForSemanticAnalysis result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_optionComponentMapForSemanticAnalysis::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @optionComponentMapForSemanticAnalysis " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_commandLineOptionMap  & GGS_optionComponentMapForSemanticAnalysis::cEnumerator::_mBoolOptionMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mBoolOptionMap ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_commandLineOptionMap  & GGS_optionComponentMapForSemanticAnalysis::cEnumerator::_mUIntOptionMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mUIntOptionMap ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_commandLineOptionMap  & GGS_optionComponentMapForSemanticAnalysis::cEnumerator::_mStringOptionMap (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mStringOptionMap ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_optionComponentMapForSemanticAnalysis::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_optionComponentMapForSemanticAnalysis * p = NULL ;
    macroMyNew (p, GGS_optionComponentMapForSemanticAnalysis (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_optionComponentMapForSemanticAnalysis * p = dynamic_cast <const GGS_optionComponentMapForSemanticAnalysis *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_optionComponentMapForSemanticAnalysis, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_optionComponentMapForSemanticAnalysis::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_optionComponentMapForSemanticAnalysis ;
}

//---------------------------------------------------------------------------*

GGS_optionComponentMapForSemanticAnalysis GGS_optionComponentMapForSemanticAnalysis::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey,
                                             const GGS_commandLineOptionMap & inValue0,
                                             const GGS_commandLineOptionMap & inValue1,
                                             const GGS_commandLineOptionMap & inValue2
                                             COMMA_LOCATION_ARGS) {
  GGS_optionComponentMapForSemanticAnalysis result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        inValue0,
                        inValue1,
                        inValue2,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'semanticContext' struct                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_semanticContext ("semanticContext", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_semanticContext::GGS_semanticContext (void) :
mTypeMap (),
mRoutineMap (),
mFunctionMap (),
mFilewrapperMap (),
mGrammarMap (),
mOptionComponentMapForSemanticAnalysis () {
}

//---------------------------------------------------------------------------*

GGS_semanticContext::~GGS_semanticContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_semanticContext::drop (void) {
  mTypeMap.drop () ;
  mRoutineMap.drop () ;
  mFunctionMap.drop () ;
  mFilewrapperMap.drop () ;
  mGrammarMap.drop () ;
  mOptionComponentMapForSemanticAnalysis.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_semanticContext::isBuilt (void) const {
  return mTypeMap.isBuilt ()
    && mRoutineMap.isBuilt ()
    && mFunctionMap.isBuilt ()
    && mFilewrapperMap.isBuilt ()
    && mGrammarMap.isBuilt ()
    && mOptionComponentMapForSemanticAnalysis.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_semanticContext::
operator_isEqual (const GGS_semanticContext & inOperand) const {
  return mTypeMap.operator_isEqual (inOperand.mTypeMap)
    .operator_and (mRoutineMap.operator_isEqual (inOperand.mRoutineMap))
    .operator_and (mFunctionMap.operator_isEqual (inOperand.mFunctionMap))
    .operator_and (mFilewrapperMap.operator_isEqual (inOperand.mFilewrapperMap))
    .operator_and (mGrammarMap.operator_isEqual (inOperand.mGrammarMap))
    .operator_and (mOptionComponentMapForSemanticAnalysis.operator_isEqual (inOperand.mOptionComponentMapForSemanticAnalysis)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_semanticContext::
operator_isNotEqual (const GGS_semanticContext & inOperand) const {
  return mTypeMap.operator_isNotEqual (inOperand.mTypeMap)
    .operator_or (mRoutineMap.operator_isNotEqual (inOperand.mRoutineMap))
    .operator_or (mFunctionMap.operator_isNotEqual (inOperand.mFunctionMap))
    .operator_or (mFilewrapperMap.operator_isNotEqual (inOperand.mFilewrapperMap))
    .operator_or (mGrammarMap.operator_isNotEqual (inOperand.mGrammarMap))
    .operator_or (mOptionComponentMapForSemanticAnalysis.operator_isNotEqual (inOperand.mOptionComponentMapForSemanticAnalysis)) ;
}

//---------------------------------------------------------------------------*

GGS_semanticContext GGS_semanticContext::
constructor_new (const GGS_unifiedTypeMap & argument_0,
                 const GGS_routineMap & argument_1,
                 const GGS_functionMap & argument_2,
                 const GGS_filewrapperMap & argument_3,
                 const GGS_grammarMap & argument_4,
                 const GGS_optionComponentMapForSemanticAnalysis & argument_5) {
  GGS_semanticContext result ;
  result.mTypeMap = argument_0 ;
  result.mRoutineMap = argument_1 ;
  result.mFunctionMap = argument_2 ;
  result.mFilewrapperMap = argument_3 ;
  result.mGrammarMap = argument_4 ;
  result.mOptionComponentMapForSemanticAnalysis = argument_5 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_semanticContext::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @semanticContext" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mTypeMap " ;
    _s << mTypeMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mRoutineMap " ;
    _s << mRoutineMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mFunctionMap " ;
    _s << mFunctionMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mFilewrapperMap " ;
    _s << mFilewrapperMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mGrammarMap " ;
    _s << mGrammarMap.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mOptionComponentMapForSemanticAnalysis " ;
    _s << mOptionComponentMapForSemanticAnalysis.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_semanticContext::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_semanticContext * p = NULL ;
    macroMyNew (p, GGS_semanticContext (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_semanticContext GGS_semanticContext::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_semanticContext result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_semanticContext * p = dynamic_cast <const GGS_semanticContext *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_semanticContext, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_semanticContext::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_semanticContext ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      class map '@collectedTypeMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_collectedTypeMap ("collectedTypeMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_collectedTypeMap::
elementOf_GGS_collectedTypeMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_collectedTypeMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_collectedTypeMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_collectedTypeMap::
isEqualToMapElement (const AC_galgas_map_element * /* inOperand */) const {
  return true ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_collectedTypeMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_collectedTypeMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_collectedTypeMap * info = (e_collectedTypeMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_collectedTypeMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_collectedTypeMap * info = (e_collectedTypeMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_collectedTypeMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_collectedTypeMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMap::
operator_isEqual (const GGS_collectedTypeMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMap::
operator_isNotEqual (const GGS_collectedTypeMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_collectedTypeMap info  ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 /* inActionIndex */,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) const {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

const utf32 GGS_collectedTypeMap::kSearchMessage_searchKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
method_searchKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) const {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchKey,
                 inKey,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_collectedTypeMap::kInsertMessage_insertKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('y'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_collectedTypeMap::
modifier_insertKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertKey,
                 inKey,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_collectedTypeMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_collectedTypeMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_collectedTypeMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_collectedTypeMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @collectedTypeMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_collectedTypeMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_collectedTypeMap * p = NULL ;
    macroMyNew (p, GGS_collectedTypeMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_collectedTypeMap * p = dynamic_cast <const GGS_collectedTypeMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_collectedTypeMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_collectedTypeMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_collectedTypeMap ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMap GGS_collectedTypeMap::constructor_mapWithKeyAndValue (C_Compiler & inLexique,
                                             const GGS_lstring & inKey
                                             COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMap result = constructor_emptyMap (inLexique COMMA_THERE) ;
  result.insertElement (inLexique,
                        0,
                        NULL,
                        inKey,
                        NULL
                        COMMA_THERE) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    map index '@collectedTypeMapIndex'                     *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_collectedTypeMapIndex ("collectedTypeMapIndex", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_collectedTypeMapIndex GGS_collectedTypeMapIndex::
constructor_null (C_Compiler & /* inLexique */
                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_collectedTypeMapIndex result ;
  result.mState = kNull ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMapIndex::
operator_isEqual (const GGS_collectedTypeMapIndex & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   (mState == inOperand.mState) && (mIndex.retrieve () == inOperand.mIndex.retrieve ())) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_collectedTypeMapIndex::
operator_isNotEqual (const GGS_collectedTypeMapIndex & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (),
                   (mState != inOperand.mState) || (mIndex.retrieve () != inOperand.mIndex.retrieve ())) ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_collectedTypeMapIndex::
reader_description (const PMSInt32 /* inIndentation */) const {
  C_String s ;
  s << "<mapproxy @collectedTypeMapIndex" ;
  switch (mState) {
  case kNotBuilt:
    break ;
    s << " (not built)" ;
  case kNull:
    s << ": null" ;
    break ;
  case kRegular:
    s << ": regular (\"" << mKey << "\", " ;
    if (mIndex.retrieve () == NULL) {
      s << "deleted" ;
    }else if (mIndex.retrieve ()->mIsDefined) {
      s << "defined" ;
    }else{
      s << "unsolved" ;
    }
    s << ")" ;
    break ;
  }
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

void GGS_collectedTypeMapIndex::
class_method_makeRegularProxy (C_Compiler & /* inLexique*/ ,
                               GGS_collectedTypeMap & ioMap,
                               const GGS_string & inKey,
                               GGS_collectedTypeMapIndex & outIndex
                               COMMA_UNUSED_LOCATION_ARGS) {
  outIndex.mState = kRegular ;
  outIndex.mKey = inKey ;
  ioMap.enterIndex (inKey, outIndex.mIndex) ;
  if (outIndex.mIndex.retrieve () == NULL) {
    outIndex.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMapIndex GGS_collectedTypeMapIndex::constructor_searchKey (C_Compiler & inLexique,
              const GGS_collectedTypeMap & inMap,
              const GGS_lstring & inKey
              COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMapIndex result ;
  result.mState = kRegular ;
  result.mKey = inKey.ggs_string () ;
  inMap.searchIndex (inLexique, inKey, GGS_collectedTypeMap::kSearchMessage_searchKey, result.mIndex COMMA_THERE) ;
  if (result.mIndex.retrieve () == NULL) {
    result.drop () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_collectedTypeMapIndex::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_collectedTypeMapIndex * p = NULL ;
    macroMyNew (p, GGS_collectedTypeMapIndex (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_collectedTypeMapIndex GGS_collectedTypeMapIndex::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_collectedTypeMapIndex result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_collectedTypeMapIndex * p = dynamic_cast <const GGS_collectedTypeMapIndex *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_collectedTypeMapIndex, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_collectedTypeMapIndex::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_collectedTypeMapIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of routine "collectAttributeTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_collectAttributeTypes (C_Compiler & inLexique,
                                const GGS_attributeInCollectionListAST   var_cas_inAttributeList,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_collectAttributeTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  {
    GGS_attributeInCollectionListAST::cEnumerator enumerator_7470 (var_cas_inAttributeList, true) ;
    const GGS_attributeInCollectionListAST::cElement * operand_7470 = NULL ;
    while (((operand_7470 = enumerator_7470.nextObject ()))) {
      macroValidPointer (operand_7470) ;
      GGS_collectedTypeMapIndex  automatic_var_7572_0 ;
      GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_7470->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (150)), automatic_var_7572_0 COMMA_SOURCE_FILE_AT_LINE (150)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_collectAttributeTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@semanticDeclarationAST.collectType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__collectType (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_7727,
                                GGS_collectedTypeMap  & /* var_cas_ioCollectedTypeMap */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7727 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Virtual Table for category method '@semanticDeclarationAST.collectType'   *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__collectType> gDispatchTableForMethod__semanticDeclarationAST__collectType ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__collectType (typeCategoryMethod__semanticDeclarationAST__collectType inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__collectType.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__collectType
findCategoryMethod__semanticDeclarationAST__collectType (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__collectType result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__collectType.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__collectType (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__collectType (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__collectType.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@genericTypeTypeAST.collectType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__genericTypeTypeAST__collectType (C_Compiler & inLexique,
                                const cPtr_genericTypeTypeAST * operand_7918,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_7918 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_7918->mTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (166)) COMMA_SOURCE_FILE_AT_LINE (166)) ;
    const GGS_bool cond_8156 = (operand_7918->mSuperTypeName).operator_isNotEqual (GGS_string ("")) ;
    if (cond_8156.isBuiltAndTrue ()) {
      GGS_collectedTypeMapIndex  automatic_var_8148_0 ;
      GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_7918->mSuperTypeName, automatic_var_8148_0 COMMA_SOURCE_FILE_AT_LINE (168)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@objectPredefinedTypeAST.collectType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__objectPredefinedTypeAST__collectType (C_Compiler & inLexique,
                                const cPtr_objectPredefinedTypeAST * operand_8307,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8307 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("object"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (177)) COMMA_SOURCE_FILE_AT_LINE (177)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@predefinedTypeAST.collectType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__collectType (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_8559,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8559 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_8559->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (185)) COMMA_SOURCE_FILE_AT_LINE (185)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@mapDeclarationAST.collectType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_8822,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_8822 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_8822->mMapTypeName COMMA_SOURCE_FILE_AT_LINE (193)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_8822->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (194)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@mapProxyDeclarationAST.collectType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_9124,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9124 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_9124->mMapProxyTypeName COMMA_SOURCE_FILE_AT_LINE (202)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@enumDeclarationAST.collectType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_9364,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9364 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_9364->mEnumTypeName COMMA_SOURCE_FILE_AT_LINE (210)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@sortedListDeclarationAST.collectType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_9606,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9606 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_9606->mSortedListTypeName COMMA_SOURCE_FILE_AT_LINE (218)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_9606->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (219)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@structDeclarationAST.collectType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_9913,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_9913 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_9913->mStructTypeName COMMA_SOURCE_FILE_AT_LINE (227)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_9913->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (228)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@listDeclarationAST.collectType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_10214,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10214 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_10214->mListTypeName COMMA_SOURCE_FILE_AT_LINE (236)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_10214->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (237)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@classDeclarationAST.collectType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_10514,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_10514 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_10514->mClassTypeName COMMA_SOURCE_FILE_AT_LINE (245)) ;
    ::routine_collectAttributeTypes (inLexique,  operand_10514->mAttributeList,  var_cas_ioCollectedTypeMap COMMA_SOURCE_FILE_AT_LINE (246)) ;
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_10703 (operand_10514->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_10703 = NULL ;
      while (((operand_10703 = enumerator_10703.nextObject ()))) {
        macroValidPointer (operand_10703) ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_10729 (operand_10703->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_10729 = NULL ;
          while (((operand_10729 = enumerator_10729.nextObject ()))) {
            macroValidPointer (operand_10729) ;
            GGS_collectedTypeMapIndex  automatic_var_10838_0 ;
            GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_10729->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (249)), automatic_var_10838_0 COMMA_SOURCE_FILE_AT_LINE (249)) ;
          }
        }
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_10896 (operand_10514->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_10896 = NULL ;
      while (((operand_10896 = enumerator_10896.nextObject ()))) {
        macroValidPointer (operand_10896) ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_10922 (operand_10896->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_10922 = NULL ;
          while (((operand_10922 = enumerator_10922.nextObject ()))) {
            macroValidPointer (operand_10922) ;
            GGS_collectedTypeMapIndex  automatic_var_11031_0 ;
            GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_10922->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (254)), automatic_var_11031_0 COMMA_SOURCE_FILE_AT_LINE (254)) ;
          }
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@listmapDeclarationAST.collectType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__collectType (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_11211,
                                GGS_collectedTypeMap  & var_cas_ioCollectedTypeMap
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_11211 != NULL) {
    var_cas_ioCollectedTypeMap.modifier_insertKey (inLexique, operand_11211->mListmapTypeName COMMA_SOURCE_FILE_AT_LINE (264)) ;
    GGS_collectedTypeMapIndex  automatic_var_11411_0 ;
    GGS_collectedTypeMapIndex::class_method_makeRegularProxy (inLexique, var_cas_ioCollectedTypeMap, operand_11211->mAssociatedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (265)), automatic_var_11411_0 COMMA_SOURCE_FILE_AT_LINE (265)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Virtual Table for category method '@semanticDeclarationAST.enterType'    *
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__enterType> gDispatchTableForMethod__semanticDeclarationAST__enterType ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__enterType (typeCategoryMethod__semanticDeclarationAST__enterType inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__enterType.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__enterType
findCategoryMethod__semanticDeclarationAST__enterType (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__enterType result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__enterType.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__enterType (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__enterType (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__enterType.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@predefinedTypeAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__enterType (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_12041,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_12041 != NULL) {
    GGS_constructorMap  var_cas_constructorMap ;
    GGS_readerMap  var_cas_readerMap ;
    GGS_modifierMap  var_cas_modifierMap ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap ;
    GGS_classMethodMap  var_cas_classMethodMap ;
    GGS_predefinedTypeAST  var_cas_t = operand_12041 ;
    { typeCategoryMethod__predefinedTypeAST__getConstructorMap method = findCategoryMethod__predefinedTypeAST__getConstructorMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_constructorMap COMMA_SOURCE_FILE_AT_LINE (290)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getReaderMap method = findCategoryMethod__predefinedTypeAST__getReaderMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_readerMap COMMA_SOURCE_FILE_AT_LINE (291)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getModifierMap method = findCategoryMethod__predefinedTypeAST__getModifierMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_modifierMap COMMA_SOURCE_FILE_AT_LINE (292)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getInstanceMethodMap method = findCategoryMethod__predefinedTypeAST__getInstanceMethodMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_instanceMethodMap COMMA_SOURCE_FILE_AT_LINE (293)) ;
      }
    }
    { typeCategoryMethod__predefinedTypeAST__getClassMethodMap method = findCategoryMethod__predefinedTypeAST__getClassMethodMap (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_classMethodMap COMMA_SOURCE_FILE_AT_LINE (294)) ;
      }
    }
    GGS_unifiedTypeMapProxyList  var_cas_addAssignArgumentList ;
    { typeCategoryMethod__predefinedTypeAST__getAddAssignArgumentList method = findCategoryMethod__predefinedTypeAST__getAddAssignArgumentList (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_addAssignArgumentList COMMA_SOURCE_FILE_AT_LINE (296)) ;
      }
    }
    GGS_enumerationDescriptorList  var_cas_enumerationList ;
    { typeCategoryMethod__predefinedTypeAST__getEnumerationList method = findCategoryMethod__predefinedTypeAST__getEnumerationList (var_cas_t.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, var_cas_t (HERE), var_cas_ioSemanticContext.mTypeMap, var_cas_enumerationList COMMA_SOURCE_FILE_AT_LINE (298)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, (findCategoryReader__predefinedTypeAST__getSuperTypeName (var_cas_t (HERE)->galgasRTTI ()) (inLexique, var_cas_t.getPtr () COMMA_SOURCE_FILE_AT_LINE (300))), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (300)) ;
    GGS_unifiedTypeMapProxy  var_cas_selfTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_12041->mPredefinedTypeName, var_cas_selfTypeProxy COMMA_SOURCE_FILE_AT_LINE (302)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_12041->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (304)), GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (307)), GGS_typedAttributeList ::constructor_listWithValue (var_cas_selfTypeProxy, GGS_lstring ::constructor_new (inLexique, operand_12041->mPredefinedTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (308))), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (309)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, var_cas_classMethodMap, var_cas_enumerationList, (findCategoryReader__predefinedTypeAST__getSupportedOperatorFlags (var_cas_t (HERE)->galgasRTTI ()) (inLexique, var_cas_t.getPtr () COMMA_SOURCE_FILE_AT_LINE (317))), var_cas_addAssignArgumentList, (findCategoryReader__predefinedTypeAST__getNativeAttributeList (var_cas_t (HERE)->galgasRTTI ()) (inLexique, var_cas_t.getPtr () COMMA_SOURCE_FILE_AT_LINE (319))), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) COMMA_SOURCE_FILE_AT_LINE (303)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@genericTypeTypeAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__genericTypeTypeAST__enterType (C_Compiler & inLexique,
                                const cPtr_genericTypeTypeAST * operand_14150,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14150 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    const GGS_bool cond_14390 = (operand_14150->mSuperTypeName).operator_isEqual (GGS_string ("")) ;
    if (cond_14390.isBuiltAndTrue ()) {
      var_cas_superTypeProxy = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (338)) ;
    }else if (cond_14390.isBuiltAndFalse ()) {
      GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_14150->mSuperTypeName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (340)) ;
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (343)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (345)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (347)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (349)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, operand_14150->mTypeName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (352)), GGS_bool (false), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_listType (inLexique COMMA_SOURCE_FILE_AT_LINE (355)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (357)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (363)), GGS_enumerationDescriptorList ::constructor_emptyList (), GGS_uint (0U), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) COMMA_SOURCE_FILE_AT_LINE (351)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@objectPredefinedTypeAST.enterType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__objectPredefinedTypeAST__enterType (C_Compiler & inLexique,
                                const cPtr_objectPredefinedTypeAST * operand_15632,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15632 != NULL) {
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (383)) ;
    GGS_readerMap  var_cas_readerMap ;
    ::routine_commonReaderMapForAllTypes (inLexique,  var_cas_ioSemanticContext.mTypeMap,  var_cas_readerMap COMMA_SOURCE_FILE_AT_LINE (386)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (388)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (390)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("object"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (393)), GGS_bool (false), GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (395)), GGS_typeKindEnum::constructor_listType (inLexique COMMA_SOURCE_FILE_AT_LINE (396)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (398)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (404)), GGS_enumerationDescriptorList ::constructor_emptyList (), GGS_uint (0U), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (414)) COMMA_SOURCE_FILE_AT_LINE (392)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Category method '@mapDeclarationAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_16863,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16863 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_stringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("string"), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (425)) ;
    GGS_unifiedTypeMapProxy  var_cas_lstringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("lstring"), var_cas_lstringTypeIndex COMMA_SOURCE_FILE_AT_LINE (428)) ;
    GGS_unifiedTypeMapProxy  var_cas_currentMapTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_16863->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (431)), var_cas_currentMapTypeIndex COMMA_SOURCE_FILE_AT_LINE (431)) ;
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (433)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (434)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (435)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (436)) ;
    GGS_enumerationDescriptorList  var_cas_enumerationDescriptor = GGS_enumerationDescriptorList ::constructor_listWithValue (var_cas_lstringTypeIndex, GGS_string ("lkey")) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptyMap"),  operand_16863->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (439)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (439)) ;
    ::routine_enterConstructorWithArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("mapWithMapToOverride"),  operand_16863->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (440)),  operand_16863->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (440)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (440)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("count"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (442)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("allKeys"),  GGS_string ("stringset"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (443)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("allKeyList"),  GGS_string ("lstringlist"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (444)) ;
    ::routine_enterInheritedReaderWithArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("hasKey"),  GGS_string ("string"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (445)) ;
    ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("overriddenMap"),  operand_16863->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (446)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (446)) ;
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_insertMethodFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    var_cas_insertMethodFormalArgumentList.addAssign_operation (var_cas_lstringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (450))) ;
    GGS_formalParameterSignature  var_cas_removeMethodFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    var_cas_removeMethodFormalArgumentList.addAssign_operation (var_cas_lstringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (452))) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_19056 (operand_16863->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_19056 = NULL ;
      while (((operand_19056 = enumerator_19056.nextObject ()))) {
        macroValidPointer (operand_19056) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_19056->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (455)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (455)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_19056->mAttributeName) ;
        var_cas_enumerationDescriptor.addAssign_operation (var_cas_attributeTypeIndex, operand_19056->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (457))) ;
        var_cas_insertMethodFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (458))) ;
        var_cas_removeMethodFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (459))) ;
      }
    }
    {
      GGS_insertMethodListAST::cEnumerator enumerator_19660 (operand_16863->mInsertMethodList, true) ;
      const GGS_insertMethodListAST::cElement * operand_19660 = NULL ;
      while (((operand_19660 = enumerator_19660.nextObject ()))) {
        macroValidPointer (operand_19660) ;
        const GGS_bool cond_19815 = var_cas_modifierMap.reader_hasKey (operand_19660->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (463))) ;
        if (cond_19815.isBuiltAndTrue ()) {
          operand_19660->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_19660->mMethodName)).operator_concat (GGS_string ("' insert method is already declared")) COMMA_SOURCE_FILE_AT_LINE (465)) ;
        }else if (cond_19815.isBuiltAndFalse ()) {
          var_cas_modifierMap.modifier_insertOrReplace (inLexique, operand_19660->mMethodName, var_cas_insertMethodFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (470)) COMMA_SOURCE_FILE_AT_LINE (466)) ;
        }
      }
    }
    {
      GGS_mapRemoveMethodListAST::cEnumerator enumerator_20059 (operand_16863->mRemoveMethodList, true) ;
      const GGS_mapRemoveMethodListAST::cElement * operand_20059 = NULL ;
      while (((operand_20059 = enumerator_20059.nextObject ()))) {
        macroValidPointer (operand_20059) ;
        const GGS_bool cond_20250 = var_cas_modifierMap.reader_hasKey (operand_20059->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (476))) ;
        if (cond_20250.isBuiltAndTrue ()) {
          operand_20059->mMethodName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_20059->mMethodName)).operator_concat (GGS_string ("' method is already declared as an insert modifier or a remove modifier")) COMMA_SOURCE_FILE_AT_LINE (478)) ;
        }else if (cond_20250.isBuiltAndFalse ()) {
          var_cas_modifierMap.modifier_insertOrReplace (inLexique, operand_20059->mMethodName, var_cas_removeMethodFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (483)) COMMA_SOURCE_FILE_AT_LINE (479)) ;
        }
      }
    }
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_20492 (operand_16863->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_20492 = NULL ;
      while (((operand_20492 = enumerator_20492.nextObject ()))) {
        macroValidPointer (operand_20492) ;
        var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_20492->mMethodName, var_cas_removeMethodFormalArgumentList, operand_20492->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (492)), GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (494)) COMMA_SOURCE_FILE_AT_LINE (489)) ;
      }
    }
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_20749 (operand_16863->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_20749 = NULL ;
      while (((operand_20749 = enumerator_20749.nextObject ()))) {
        macroValidPointer (operand_20749) ;
        const GGS_lstring  var_cas_accessorName = GGS_lstring ::constructor_new (inLexique, (operand_20749->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (499))).operator_concat (GGS_string ("ForKey")), operand_20749->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (499)) COMMA_SOURCE_FILE_AT_LINE (499)) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_20749->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (501)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (501)) ;
        var_cas_readerMap.modifier_insertOrReplace (inLexique, var_cas_accessorName, GGS_unifiedTypeMapProxyList ::constructor_listWithValue (var_cas_stringTypeIndex), GGS_bool (true), var_cas_attributeTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (507)) COMMA_SOURCE_FILE_AT_LINE (502)) ;
      }
    }
    const GGS_bool cond_21659 = (operand_16863->mInsertOrReplaceDeclarationListAST.reader_length ()).operator_supOrEqual (GGS_uint (1U)) ;
    if (cond_21659.isBuiltAndTrue ()) {
      GGS_location  var_cas_insertOrReplaceLocation ;
      if (operand_16863->mInsertOrReplaceDeclarationListAST.isBuilt ()) {
        operand_16863->mInsertOrReplaceDeclarationListAST (HERE)->method_first (inLexique, var_cas_insertOrReplaceLocation COMMA_SOURCE_FILE_AT_LINE (513)) ;
      }
      var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("insertOrReplace"), var_cas_insertOrReplaceLocation COMMA_SOURCE_FILE_AT_LINE (515)), var_cas_insertMethodFormalArgumentList, GGS_bool (false), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (518)) COMMA_SOURCE_FILE_AT_LINE (514)) ;
    }
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_21744 (operand_16863->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_21744 = NULL ;
      while (((operand_21744 = enumerator_21744.nextObject ()))) {
        macroValidPointer (operand_21744) ;
        const GGS_lstring  var_cas_accessorName = GGS_lstring ::constructor_new (inLexique, ((GGS_string ("set")).operator_concat (operand_21744->mAttributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter ())).operator_concat (GGS_string ("ForKey")), operand_21744->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (523)) COMMA_SOURCE_FILE_AT_LINE (523)) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_21744->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (525)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (525)) ;
        GGS_formalParameterSignature  var_cas_accessorFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        var_cas_accessorFormalArgumentList.addAssign_operation (var_cas_stringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (527))) ;
        var_cas_accessorFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (528))) ;
        var_cas_modifierMap.modifier_insertOrReplace (inLexique, var_cas_accessorName, var_cas_accessorFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (533)) COMMA_SOURCE_FILE_AT_LINE (529)) ;
      }
    }
    GGS_withAccessorMap  var_cas_withAccessorMap = GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (537)) ;
    var_cas_withAccessorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("hasKey"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (538)), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (538)) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_22687 (operand_16863->mSearchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_22687 = NULL ;
      while (((operand_22687 = enumerator_22687.nextObject ()))) {
        macroValidPointer (operand_22687) ;
        var_cas_withAccessorMap.modifier_insertKey (inLexique, operand_22687->mMethodName, var_cas_lstringTypeIndex COMMA_SOURCE_FILE_AT_LINE (540)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("map"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (547)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_16863->mMapTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_mapType (inLexique COMMA_SOURCE_FILE_AT_LINE (552)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (554)), var_cas_typedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (560)), var_cas_enumerationDescriptor, (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (562))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (562))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), operand_16863->mSearchMethodList, GGS_mapSearchMethodListAST ::constructor_emptyList (), var_cas_withAccessorMap COMMA_SOURCE_FILE_AT_LINE (548)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Category method '@mapProxyDeclarationAST.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_23807,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23807 != NULL) {
    GGS_typedAttributeList  var_cas_mapTypedAttributeList ;
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_mapSearchMethodListAST  var_cas_searchMethodList ;
    GGS_bool automatic_var_24236_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_24236_1 ;
    GGS_typedAttributeList  automatic_var_24236_2 ;
    GGS_attributeMap  automatic_var_24236_3 ;
    GGS_constructorMap  automatic_var_24236_4 ;
    GGS_readerMap  automatic_var_24236_5 ;
    GGS_modifierMap  automatic_var_24236_6 ;
    GGS_instanceMethodMap  automatic_var_24236_7 ;
    GGS_classMethodMap  automatic_var_24236_8 ;
    GGS_enumerationDescriptorList  automatic_var_24236_9 ;
    GGS_uint  automatic_var_24236_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_24236_11 ;
    GGS_nativeAttributeList  automatic_var_24236_12 ;
    GGS_stringset  automatic_var_24236_13 ;
    GGS_lstringlist  automatic_var_24236_14 ;
    GGS_typedAttributeList  automatic_var_24236_15 ;
    GGS_mapSearchMethodListAST  automatic_var_24236_16 ;
    GGS_withAccessorMap  automatic_var_24236_17 ;
    if (var_cas_ioSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_ioSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_23807->mAssociatedMapTypeName, automatic_var_24236_0, automatic_var_24236_1, var_cas_typeKindEnum, automatic_var_24236_2, automatic_var_24236_3, var_cas_mapTypedAttributeList, automatic_var_24236_4, automatic_var_24236_5, automatic_var_24236_6, automatic_var_24236_7, automatic_var_24236_8, automatic_var_24236_9, automatic_var_24236_10, automatic_var_24236_11, automatic_var_24236_12, automatic_var_24236_13, automatic_var_24236_14, automatic_var_24236_15, var_cas_searchMethodList, automatic_var_24236_16, automatic_var_24236_17 COMMA_SOURCE_FILE_AT_LINE (584)) ;
    }
    const GGS_bool cond_24453 = (var_cas_typeKindEnum).operator_isNotEqual (GGS_typeKindEnum::constructor_mapType (inLexique COMMA_SOURCE_FILE_AT_LINE (594))) ;
    if (cond_24453.isBuiltAndTrue ()) {
      operand_23807->mAssociatedMapTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the @")).operator_concat (operand_23807->mAssociatedMapTypeName)).operator_concat (GGS_string (" should be a map type")) COMMA_SOURCE_FILE_AT_LINE (596)) ;
      var_cas_mapTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (599)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (600)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (601)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) ;
    GGS_classMethodMap  var_cas_classMethodMap = GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (603)) ;
    GGS_unifiedTypeMapProxy  var_cas_associatedMapTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_23807->mAssociatedMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (606)), var_cas_associatedMapTypeIndex COMMA_SOURCE_FILE_AT_LINE (606)) ;
    GGS_unifiedTypeMapProxy  var_cas_stringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("string"), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (609)) ;
    GGS_unifiedTypeMapProxy  var_cas_lstringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("lstring"), var_cas_lstringTypeIndex COMMA_SOURCE_FILE_AT_LINE (612)) ;
    GGS_unifiedTypeMapProxy  var_cas_mapProxyTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_23807->mMapProxyTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (615)), var_cas_mapProxyTypeProxy COMMA_SOURCE_FILE_AT_LINE (615)) ;
    GGS_formalParameterSignature  var_cas_argList = GGS_formalParameterSignature ::constructor_emptyList () ;
    var_cas_argList.addAssign_operation (var_cas_stringTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (618))) ;
    var_cas_argList.addAssign_operation (var_cas_associatedMapTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (619))) ;
    var_cas_argList.addAssign_operation (var_cas_mapProxyTypeProxy, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (620))) ;
    var_cas_classMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("makeRegularProxy"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (622)), var_cas_argList, GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (621)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("null"),  operand_23807->mMapProxyTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (627)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (627)) ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_associatedMapTypeIndex) ;
    var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_lstringTypeIndex) ;
    {
      GGS_mapSearchMethodListAST::cEnumerator enumerator_26253 (var_cas_searchMethodList, true) ;
      const GGS_mapSearchMethodListAST::cElement * operand_26253 = NULL ;
      while (((operand_26253 = enumerator_26253.nextObject ()))) {
        macroValidPointer (operand_26253) ;
        var_cas_constructorMap.modifier_insertKey (inLexique, operand_26253->mMethodName, var_cas_constructorAttributeTypeList, GGS_bool (true), var_cas_mapProxyTypeProxy COMMA_SOURCE_FILE_AT_LINE (633)) ;
      }
    }
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("isSolved"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (641)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("isNull"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (642)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("isRegular"),  GGS_string ("bool"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (643)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("key"),  GGS_string ("lstring"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (644)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("keyString"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (645)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("identifierRepresentation"),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (646)) ;
    const GGS_readerMap  var_cas_inheritedReaderMap = var_cas_readerMap ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_27227 (var_cas_mapTypedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_27227 = NULL ;
      while (((operand_27227 = enumerator_27227.nextObject ()))) {
        macroValidPointer (operand_27227) ;
        const GGS_bool cond_27634 = var_cas_inheritedReaderMap.reader_hasKey (operand_27227->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (650))) ;
        if (cond_27634.isBuiltAndTrue ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_stringset::cEnumerator enumerator_27335 (var_cas_inheritedReaderMap.reader_allKeys (inLexique COMMA_SOURCE_FILE_AT_LINE (652)), true) ;
            if (enumerator_27335 .hasCurrentObject ()) {
              bool _foreach_loop_27335 ;
              do{
                var_cas_s.appendCString ("'") ;
                var_cas_s.dotAssign_operation (enumerator_27335._key (HERE)) ;
                var_cas_s.appendCString ("'") ;
                enumerator_27335.next () ;
                _foreach_loop_27335 = (enumerator_27335 .hasCurrentObject ()) ;
                if (_foreach_loop_27335) {
                  var_cas_s.appendCString (", ") ;
                }
              }while (_foreach_loop_27335) ;
            }
          }
          operand_27227->mAttributeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the map has a associated map proxy, which has predefined readers: ")).operator_concat (var_cas_s)).operator_concat (GGS_string ("; you cannot use theses names for naming an attribute of this map")) COMMA_SOURCE_FILE_AT_LINE (658)) ;
        }else if (cond_27634.isBuiltAndFalse ()) {
          var_cas_readerMap.modifier_insertKey (inLexique, operand_27227->mAttributeName, GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_bool (true), operand_27227->mAttributeTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (664)) COMMA_SOURCE_FILE_AT_LINE (659)) ;
        }
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("mapproxy"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (670)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_23807->mMapProxyTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_mapProxyType (inLexique COMMA_SOURCE_FILE_AT_LINE (675)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (677)), var_cas_mapTypedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, var_cas_classMethodMap, GGS_enumerationDescriptorList ::constructor_emptyList (), (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (685))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (685))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), var_cas_searchMethodList, GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (693)) COMMA_SOURCE_FILE_AT_LINE (671)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@enumDeclarationAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_28903,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28903 != NULL) {
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (704)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (705)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (707)) ;
    GGS_classMethodMap  var_cas_classMethodMap = GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (708)) ;
    GGS_unifiedTypeMapProxy  var_cas_currentTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_28903->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (711)), var_cas_currentTypeIndex COMMA_SOURCE_FILE_AT_LINE (711)) ;
    GGS_stringset  var_cas_constantSet = GGS_stringset ::constructor_emptySet () ;
    {
      GGS_lstringlist::cEnumerator enumerator_29482 (operand_28903->mConstantList, true) ;
      const GGS_lstringlist::cElement * operand_29482 = NULL ;
      while (((operand_29482 = enumerator_29482.nextObject ()))) {
        macroValidPointer (operand_29482) ;
        var_cas_constantSet.addAssign_operation (operand_29482->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (715))) ;
        ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  operand_29482->mValue.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716)),  operand_28903->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (716)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (716)) ;
      }
    }
    {
      GGS_enumMessageListAST::cEnumerator enumerator_29712 (operand_28903->mEnumMessageList, true) ;
      const GGS_enumMessageListAST::cElement * operand_29712 = NULL ;
      while (((operand_29712 = enumerator_29712.nextObject ()))) {
        macroValidPointer (operand_29712) ;
        ::routine_enterBaseReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  operand_29712->mEnumMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (720)),  GGS_string ("string"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (720)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("enum"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (725)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_28903->mEnumTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_enumType (inLexique COMMA_SOURCE_FILE_AT_LINE (730)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (732)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (738)), GGS_enumerationDescriptorList ::constructor_emptyList (), function_generateDescriptionReaderUtilityMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (740)), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), var_cas_constantSet, operand_28903->mConstantList, GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (748)) COMMA_SOURCE_FILE_AT_LINE (726)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@filewrapperDeclarationAST.enterType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_filewrapperDeclarationAST * operand_30901,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30901 != NULL) {
    GGS_filewrapperTemplateMap  var_cas_filewrapperTemplateMap = GGS_filewrapperTemplateMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (758)) ;
    {
      GGS_filewrapperTemplateListAST::cEnumerator enumerator_31093 (operand_30901->mFilewrapperTemplateList, true) ;
      const GGS_filewrapperTemplateListAST::cElement * operand_31093 = NULL ;
      while (((operand_31093 = enumerator_31093.nextObject ()))) {
        macroValidPointer (operand_31093) ;
        GGS_unifiedTypeMapProxyList  var_cas_templateSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
        {
          GGS_formalInputParameterListAST::cEnumerator enumerator_31211 (operand_31093->mFilewrapperTemplateFormalInputParameters, true) ;
          const GGS_formalInputParameterListAST::cElement * operand_31211 = NULL ;
          while (((operand_31211 = enumerator_31211.nextObject ()))) {
            macroValidPointer (operand_31211) ;
            GGS_unifiedTypeMapProxy  var_cas_parameterTypeIndex ;
            GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_31211->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (763)), var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (763)) ;
            var_cas_templateSignature.addAssign_operation (var_cas_parameterTypeIndex) ;
          }
        }
        var_cas_filewrapperTemplateMap.modifier_insertKey (inLexique, operand_31093->mFilewrapperTemplateName, var_cas_templateSignature, operand_31093->mFilewrapperTemplatePath COMMA_SOURCE_FILE_AT_LINE (766)) ;
      }
    }
    var_cas_ioSemanticContext.mFilewrapperMap.modifier_insertKey (inLexique, operand_30901->mFilewrapperName, operand_30901->mFilewrapperPath, operand_30901->mFilewrapperExtensionList, var_cas_filewrapperTemplateMap COMMA_SOURCE_FILE_AT_LINE (772)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@listDeclarationAST.enterType'               *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_31912,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31912 != NULL) {
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_32103 (operand_31912->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_32103 = NULL ;
      while (((operand_32103 = enumerator_32103.nextObject ()))) {
        macroValidPointer (operand_32103) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_32103->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (790)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (790)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_32103->mAttributeName) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_uintType ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("uint"), var_cas_uintType COMMA_SOURCE_FILE_AT_LINE (795)) ;
    GGS_unifiedTypeMapProxy  var_cas_listTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_31912->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (798)), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (798)) ;
    GGS_enumerationDescriptorList  var_cas_enumerationDescriptor = GGS_enumerationDescriptorList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_modifierOutputFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_modifierInputFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_33020 (var_cas_typedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_33020 = NULL ;
      while (((operand_33020 = enumerator_33020.nextObject ()))) {
        macroValidPointer (operand_33020) ;
        var_cas_enumerationDescriptor.addAssign_operation (operand_33020->mAttributeTypeIndex, operand_33020->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (805))) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (operand_33020->mAttributeTypeIndex) ;
        var_cas_modifierOutputFormalArgumentList.addAssign_operation (operand_33020->mAttributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (807))) ;
        var_cas_modifierInputFormalArgumentList.addAssign_operation (operand_33020->mAttributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (808))) ;
      }
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (811)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptyList"),  operand_31912->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (812)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (812)) ;
    var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("listWithValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (814)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (813)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (820)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("length"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (821)) ;
    ::routine_enterBaseReaderWithArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("subListFromIndex"),  GGS_string ("uint"),  operand_31912->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (822)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (822)) ;
    ::routine_enterBaseReaderWith2Arguments (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("subListWithRange"),  GGS_string ("uint"),  GGS_string ("uint"),  operand_31912->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (823)),  GGS_bool (true) COMMA_SOURCE_FILE_AT_LINE (823)) ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_34190 (var_cas_typedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_34190 = NULL ;
      while (((operand_34190 = enumerator_34190.nextObject ()))) {
        macroValidPointer (operand_34190) ;
        var_cas_readerMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, (operand_34190->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (826))).operator_concat (GGS_string ("AtIndex")), operand_34190->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (826)) COMMA_SOURCE_FILE_AT_LINE (826)), GGS_unifiedTypeMapProxyList ::constructor_listWithValue (var_cas_uintType), GGS_bool (true), operand_34190->mAttributeTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (830)) COMMA_SOURCE_FILE_AT_LINE (825)) ;
      }
    }
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (834)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popFirst"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (836)), var_cas_modifierOutputFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (839)) COMMA_SOURCE_FILE_AT_LINE (835)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popLast"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (842)), var_cas_modifierOutputFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (845)) COMMA_SOURCE_FILE_AT_LINE (841)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("prependValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (848)), var_cas_modifierInputFormalArgumentList, GGS_bool (false), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (851)) COMMA_SOURCE_FILE_AT_LINE (847)) ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_35025 (var_cas_typedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_35025 = NULL ;
      while (((operand_35025 = enumerator_35025.nextObject ()))) {
        macroValidPointer (operand_35025) ;
        GGS_formalParameterSignature  var_cas_setterFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        var_cas_setterFormalArgumentList.addAssign_operation (operand_35025->mAttributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (855))) ;
        var_cas_setterFormalArgumentList.addAssign_operation (var_cas_uintType, GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (856))) ;
        var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, ((GGS_string ("set")).operator_concat (operand_35025->mAttributeName.ggs_string ().reader_stringByCapitalizingFirstCharacter ())).operator_concat (GGS_string ("AtIndex")), operand_35025->mAttributeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (858)) COMMA_SOURCE_FILE_AT_LINE (858)), var_cas_setterFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (861)) COMMA_SOURCE_FILE_AT_LINE (857)) ;
      }
    }
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (865)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("first"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (867)), var_cas_modifierOutputFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (871)) COMMA_SOURCE_FILE_AT_LINE (866)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("last"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (874)), var_cas_modifierOutputFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (878)) COMMA_SOURCE_FILE_AT_LINE (873)) ;
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("list"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (882)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_31912->mListTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_listType (inLexique COMMA_SOURCE_FILE_AT_LINE (887)), var_cas_typedAttributeList, GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (889)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (895)), var_cas_enumerationDescriptor, (((function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (897))).operator_or (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_or (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (897))), var_cas_constructorAttributeTypeList, GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (905)) COMMA_SOURCE_FILE_AT_LINE (883)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Category method '@sortedListDeclarationAST.enterType'            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_37053,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37053 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_uintType ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("uint"), var_cas_uintType COMMA_SOURCE_FILE_AT_LINE (916)) ;
    GGS_unifiedTypeMapProxy  var_cas_listTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_37053->mSortedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (919)), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (919)) ;
    GGS_enumerationDescriptorList  var_cas_enumerationDescriptor = GGS_enumerationDescriptorList ::constructor_emptyList () ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_formalParameterSignature  var_cas_modifierFormalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_37767 (operand_37053->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_37767 = NULL ;
      while (((operand_37767 = enumerator_37767.nextObject ()))) {
        macroValidPointer (operand_37767) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_37767->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (927)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (927)) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_37767->mAttributeName) ;
        var_cas_enumerationDescriptor.addAssign_operation (var_cas_attributeTypeIndex, operand_37767->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (929))) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_attributeTypeIndex) ;
        var_cas_modifierFormalArgumentList.addAssign_operation (var_cas_attributeTypeIndex, GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (931))) ;
      }
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (934)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptySortedList"),  operand_37053->mSortedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (935)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (935)) ;
    var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("sortedListWithValue"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (937)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_listTypeIndex COMMA_SOURCE_FILE_AT_LINE (936)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (943)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("length"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (944)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (946)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popGreatest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (948)), var_cas_modifierFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (951)) COMMA_SOURCE_FILE_AT_LINE (947)) ;
    var_cas_modifierMap.modifier_insertOrReplace (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("popSmallest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (954)), var_cas_modifierFormalArgumentList, GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (957)) COMMA_SOURCE_FILE_AT_LINE (953)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (960)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("greatest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (962)), var_cas_modifierFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (966)) COMMA_SOURCE_FILE_AT_LINE (961)) ;
    var_cas_instanceMethodMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("smallest"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (969)), var_cas_modifierFormalArgumentList, GGS_location (inLexique), GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (973)) COMMA_SOURCE_FILE_AT_LINE (968)) ;
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("sortedlist"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (977)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_37053->mSortedListTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_sortedListType (inLexique COMMA_SOURCE_FILE_AT_LINE (982)), var_cas_typedAttributeList, GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (984)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (990)), var_cas_enumerationDescriptor, ((((function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (992))).operator_or (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (992)))).operator_or (function_dotAssignOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (992)))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (993)))).operator_or (function_generateSortedListComparisonMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (993))), var_cas_constructorAttributeTypeList, GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1001)) COMMA_SOURCE_FILE_AT_LINE (978)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@structDeclarationAST.enterType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_40676,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40676 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_structTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_40676->mStructTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1013)), var_cas_structTypeIndex COMMA_SOURCE_FILE_AT_LINE (1013)) ;
    GGS_attributeMap  var_cas_attributeMap = GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1015)) ;
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)) ;
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    GGS_typedAttributeList  var_cas_typedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_41221 (operand_40676->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_41221 = NULL ;
      while (((operand_41221 = enumerator_41221.nextObject ()))) {
        macroValidPointer (operand_41221) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_41221->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1021)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1021)) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_attributeTypeIndex) ;
        var_cas_typedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_41221->mAttributeName) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_41221->mAttributeName, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1024)) ;
      }
    }
    var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("new"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1027)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_structTypeIndex COMMA_SOURCE_FILE_AT_LINE (1026)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1033)) ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_41811 (operand_40676->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_41811 = NULL ;
      while (((operand_41811 = enumerator_41811.nextObject ()))) {
        macroValidPointer (operand_41811) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_41811->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1036)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1036)) ;
        var_cas_readerMap.modifier_insertOrReplace (inLexique, operand_41811->mAttributeName, GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_bool (false), var_cas_attributeTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)) COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      }
    }
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1046)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1048)) ;
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("struct"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (1051)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_40676->mStructTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_structType (inLexique COMMA_SOURCE_FILE_AT_LINE (1056)), GGS_typedAttributeList ::constructor_emptyList (), var_cas_attributeMap, var_cas_typedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1064)), GGS_enumerationDescriptorList ::constructor_emptyList (), ((function_generateVirtualDestructor (inLexique COMMA_SOURCE_FILE_AT_LINE (1066))).operator_or (function_generateCppConstructorWithCurrentAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)))).operator_or (function_generateDescriptionReaderUtilityMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (1068))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), var_cas_typedAttributeList, GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1076)) COMMA_SOURCE_FILE_AT_LINE (1052)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Category method '@classDeclarationAST.enterType'              *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_43409,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43409 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_uintType ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("uint"), var_cas_uintType COMMA_SOURCE_FILE_AT_LINE (1087)) ;
    GGS_readerMap  var_cas_readerMap ;
    GGS_modifierMap  var_cas_modifierMap ;
    GGS_instanceMethodMap  var_cas_inheritedInstanceMethodMap ;
    GGS_typedAttributeList  var_cas_inheritedTypedAttributeList ;
    GGS_attributeMap  var_cas_attributeMap = GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1093)) ;
    GGS_unifiedTypeMapProxy  var_cas_superClassIndex ;
    const GGS_bool cond_44310 = (operand_43409->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1096))).operator_isEqual (GGS_string ("")) ;
    if (cond_44310.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("class"), var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1098)) ;
      var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)) ;
      var_cas_inheritedInstanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1100)) ;
      var_cas_inheritedTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
      var_cas_attributeMap = GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1102)) ;
    }else if (cond_44310.isBuiltAndFalse ()) {
      GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_43409->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1104)), var_cas_superClassIndex COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      GGS_typeKindEnum var_cas_typeKindEnum ;
      GGS_readerMap  var_cas_inheritedReaderMap ;
      GGS_modifierMap  var_cas_inheritedModifierMap ;
      GGS_bool automatic_var_44804_0 ;
      GGS_unifiedTypeMapProxy  automatic_var_44804_1 ;
      GGS_typedAttributeList  automatic_var_44804_2 ;
      GGS_constructorMap  automatic_var_44804_3 ;
      GGS_classMethodMap  automatic_var_44804_4 ;
      GGS_enumerationDescriptorList  automatic_var_44804_5 ;
      GGS_uint  automatic_var_44804_6 ;
      GGS_unifiedTypeMapProxyList  automatic_var_44804_7 ;
      GGS_nativeAttributeList  automatic_var_44804_8 ;
      GGS_stringset  automatic_var_44804_9 ;
      GGS_lstringlist  automatic_var_44804_10 ;
      GGS_typedAttributeList  automatic_var_44804_11 ;
      GGS_mapSearchMethodListAST  automatic_var_44804_12 ;
      GGS_mapSearchMethodListAST  automatic_var_44804_13 ;
      GGS_withAccessorMap  automatic_var_44804_14 ;
      if (var_cas_ioSemanticContext.mTypeMap.isBuilt ()) {
        var_cas_ioSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_43409->mSuperClassName, automatic_var_44804_0, automatic_var_44804_1, var_cas_typeKindEnum, var_cas_inheritedTypedAttributeList, var_cas_attributeMap, automatic_var_44804_2, automatic_var_44804_3, var_cas_inheritedReaderMap, var_cas_inheritedModifierMap, var_cas_inheritedInstanceMethodMap, automatic_var_44804_4, automatic_var_44804_5, automatic_var_44804_6, automatic_var_44804_7, automatic_var_44804_8, automatic_var_44804_9, automatic_var_44804_10, automatic_var_44804_11, automatic_var_44804_12, automatic_var_44804_13, automatic_var_44804_14 COMMA_SOURCE_FILE_AT_LINE (1108)) ;
      }
      const GGS_bool cond_44961 = (var_cas_typeKindEnum).operator_isNotEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1121))) ;
      if (cond_44961.isBuiltAndTrue ()) {
        operand_43409->mSuperClassName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the @")).operator_concat (operand_43409->mSuperClassName)).operator_concat (GGS_string (" should be a class type")) COMMA_SOURCE_FILE_AT_LINE (1123)) ;
      }
      var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1125)) ;
      {
        GGS_modifierMap::cEnumerator enumerator_45083 (var_cas_inheritedModifierMap, true) ;
        const GGS_modifierMap::cElement * operand_45083 = NULL ;
        while (((operand_45083 = enumerator_45083.nextObject ()))) {
          macroValidPointer (operand_45083) ;
          var_cas_modifierMap.modifier_insertKey (inLexique, operand_45083->mKey, operand_45083->mInfo.mParameterList, operand_45083->mInfo.mHasCompilerArgument, GGS_readerQualifier::constructor_isInherited (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) COMMA_SOURCE_FILE_AT_LINE (1127)) ;
        }
      }
      var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)) ;
      {
        GGS_readerMap::cEnumerator enumerator_45363 (var_cas_inheritedReaderMap, true) ;
        const GGS_readerMap::cElement * operand_45363 = NULL ;
        while (((operand_45363 = enumerator_45363.nextObject ()))) {
          macroValidPointer (operand_45363) ;
          var_cas_readerMap.modifier_insertKey (inLexique, operand_45363->mKey, operand_45363->mInfo.mArgumentTypeList, operand_45363->mInfo.mHasCompilerArgument, operand_45363->mInfo.mReturnedType, GGS_readerQualifier::constructor_isInherited (inLexique COMMA_SOURCE_FILE_AT_LINE (1142)) COMMA_SOURCE_FILE_AT_LINE (1137)) ;
        }
      }
      const GGS_bool cond_45863 = ((operand_43409->mIsAbstract).operator_not ()).operator_and ((operand_43409->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1146))).operator_isNotEqual (GGS_string ("class"))) ;
      if (cond_45863.isBuiltAndTrue ()) {
        var_cas_readerMap.modifier_insertKey (inLexique, operand_43409->mSuperClassName, GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_bool (false), var_cas_superClassIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1152)) COMMA_SOURCE_FILE_AT_LINE (1147)) ;
      }
    }
    GGS_unifiedTypeMapProxyList  var_cas_constructorAttributeTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_46042 (var_cas_inheritedTypedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_46042 = NULL ;
      while (((operand_46042 = enumerator_46042.nextObject ()))) {
        macroValidPointer (operand_46042) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (operand_46042->mAttributeTypeIndex) ;
      }
    }
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_46145 (operand_43409->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_46145 = NULL ;
      while (((operand_46145 = enumerator_46145.nextObject ()))) {
        macroValidPointer (operand_46145) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_46145->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1163)) ;
        var_cas_constructorAttributeTypeList.addAssign_operation (var_cas_attributeTypeIndex) ;
        var_cas_attributeMap.modifier_insertKey (inLexique, operand_46145->mAttributeName, var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1165)) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_classIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_43409->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)), var_cas_classIndex COMMA_SOURCE_FILE_AT_LINE (1169)) ;
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1171)) ;
    const GGS_bool cond_46871 = (operand_43409->mIsAbstract).operator_not () ;
    if (cond_46871.isBuiltAndTrue ()) {
      var_cas_constructorMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("new"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1174)), var_cas_constructorAttributeTypeList, GGS_bool (false), var_cas_classIndex COMMA_SOURCE_FILE_AT_LINE (1173)) ;
    }
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1181)) ;
    {
      GGS_instanceMethodMap::cEnumerator enumerator_47002 (var_cas_inheritedInstanceMethodMap, true) ;
      const GGS_instanceMethodMap::cElement * operand_47002 = NULL ;
      while (((operand_47002 = enumerator_47002.nextObject ()))) {
        macroValidPointer (operand_47002) ;
        var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_47002->mKey, operand_47002->mInfo.mParameterList, operand_47002->mInfo.mDeclarationLocation, operand_47002->mInfo.mHasCompilerArgument, GGS_readerQualifier::constructor_isInherited (inLexique COMMA_SOURCE_FILE_AT_LINE (1188)) COMMA_SOURCE_FILE_AT_LINE (1183)) ;
      }
    }
    {
      GGS_abstractMethodDefinitionListAST::cEnumerator enumerator_47265 (operand_43409->mAbstractMethodList, true) ;
      const GGS_abstractMethodDefinitionListAST::cElement * operand_47265 = NULL ;
      while (((operand_47265 = enumerator_47265.nextObject ()))) {
        macroValidPointer (operand_47265) ;
        GGS_formalParameterSignature  var_cas_formalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_47354 (operand_47265->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_47354 = NULL ;
          while (((operand_47354 = enumerator_47354.nextObject ()))) {
            macroValidPointer (operand_47354) ;
            GGS_unifiedTypeMapProxy  var_cas_typeIndex ;
            GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_47354->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)), var_cas_typeIndex COMMA_SOURCE_FILE_AT_LINE (1196)) ;
            var_cas_formalArgumentList.addAssign_operation (var_cas_typeIndex, operand_47354->mFormalArgumentPassingMode) ;
          }
        }
        elementOf_GGS_instanceMethodMap * operand_47635 = (elementOf_GGS_instanceMethodMap *) var_cas_instanceMethodMap.searchForReadWriteWithInstruction (operand_47265->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1199))) ;
        if (NULL != operand_47635) {
          operand_47635->mInfo.mQualifier = GGS_readerQualifier::constructor_isOverridingAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1200)) ;
        }else{
          var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_47265->mMethodName, var_cas_formalArgumentList, operand_47265->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1205)), GGS_bool (true), GGS_readerQualifier::constructor_isAbstract (inLexique COMMA_SOURCE_FILE_AT_LINE (1207)) COMMA_SOURCE_FILE_AT_LINE (1202)) ;
        }
      }
    }
    {
      GGS_methodDefinitionListAST::cEnumerator enumerator_48017 (operand_43409->mMethodList, true) ;
      const GGS_methodDefinitionListAST::cElement * operand_48017 = NULL ;
      while (((operand_48017 = enumerator_48017.nextObject ()))) {
        macroValidPointer (operand_48017) ;
        GGS_formalParameterSignature  var_cas_formalArgumentList = GGS_formalParameterSignature ::constructor_emptyList () ;
        {
          GGS_formalParameterListAST::cEnumerator enumerator_48106 (operand_48017->mSignature, true) ;
          const GGS_formalParameterListAST::cElement * operand_48106 = NULL ;
          while (((operand_48106 = enumerator_48106.nextObject ()))) {
            macroValidPointer (operand_48106) ;
            GGS_unifiedTypeMapProxy  var_cas_typeIndex ;
            GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_48106->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1216)), var_cas_typeIndex COMMA_SOURCE_FILE_AT_LINE (1216)) ;
            var_cas_formalArgumentList.addAssign_operation (var_cas_typeIndex, operand_48106->mFormalArgumentPassingMode) ;
          }
        }
        elementOf_GGS_instanceMethodMap * operand_48387 = (elementOf_GGS_instanceMethodMap *) var_cas_instanceMethodMap.searchForReadWriteWithInstruction (operand_48017->mMethodName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1219))) ;
        if (NULL != operand_48387) {
          operand_48387->mInfo.mQualifier = GGS_readerQualifier::constructor_isOverriding (inLexique COMMA_SOURCE_FILE_AT_LINE (1220)) ;
        }else{
          var_cas_instanceMethodMap.modifier_insertKey (inLexique, operand_48017->mMethodName, var_cas_formalArgumentList, operand_48017->mMethodName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1225)), GGS_bool (true), GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1227)) COMMA_SOURCE_FILE_AT_LINE (1222)) ;
        }
      }
    }
    GGS_typedAttributeList  var_cas_currentClassTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    GGS_typedAttributeList  var_cas_allTypedAttributeList = var_cas_inheritedTypedAttributeList ;
    {
      GGS_attributeInCollectionListAST::cEnumerator enumerator_48886 (operand_43409->mAttributeList, true) ;
      const GGS_attributeInCollectionListAST::cElement * operand_48886 = NULL ;
      while (((operand_48886 = enumerator_48886.nextObject ()))) {
        macroValidPointer (operand_48886) ;
        GGS_unifiedTypeMapProxy  var_cas_attributeTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_48886->mAttributeTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1236)), var_cas_attributeTypeIndex COMMA_SOURCE_FILE_AT_LINE (1236)) ;
        var_cas_currentClassTypedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_48886->mAttributeName) ;
        var_cas_allTypedAttributeList.addAssign_operation (var_cas_attributeTypeIndex, operand_48886->mAttributeName) ;
        var_cas_readerMap.modifier_insertKey (inLexique, operand_48886->mAttributeName, GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_bool (false), var_cas_attributeTypeIndex, GGS_readerQualifier::constructor_isBasic (inLexique COMMA_SOURCE_FILE_AT_LINE (1244)) COMMA_SOURCE_FILE_AT_LINE (1239)) ;
      }
    }
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_43409->mClassTypeName, (operand_43409->mIsAbstract).operator_not (), var_cas_superClassIndex, GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1252)), var_cas_allTypedAttributeList, var_cas_attributeMap, var_cas_currentClassTypedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1260)), GGS_enumerationDescriptorList ::constructor_emptyList (), ((function_generateCppConstructorWithAllAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1262))).operator_or (function_generateVirtualDestructor (inLexique COMMA_SOURCE_FILE_AT_LINE (1262)))).operator_or (((operand_43409->mIsAbstract).isBuiltAndTrue () ? (GGS_uint (0U)) : (function_generateDescriptionReaderUtilityMethod (inLexique COMMA_SOURCE_FILE_AT_LINE (1262))))), GGS_unifiedTypeMapProxyList ::constructor_emptyList (), GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), var_cas_currentClassTypedAttributeList, GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1270)) COMMA_SOURCE_FILE_AT_LINE (1248)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@externRoutineDeclarationAST.enterType'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_externRoutineDeclarationAST * operand_50452,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50452 != NULL) {
    GGS_formalParameterSignature  var_cas_routineSignature = GGS_formalParameterSignature ::constructor_emptyList () ;
    {
      GGS_formalParameterListAST::cEnumerator enumerator_50638 (operand_50452->mFormalArgumentList, true) ;
      const GGS_formalParameterListAST::cElement * operand_50638 = NULL ;
      while (((operand_50638 = enumerator_50638.nextObject ()))) {
        macroValidPointer (operand_50638) ;
        GGS_unifiedTypeMapProxy  var_cas_parameterTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_50638->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1283)), var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (1283)) ;
        var_cas_routineSignature.addAssign_operation (var_cas_parameterTypeIndex, operand_50638->mFormalArgumentPassingMode) ;
      }
    }
    var_cas_ioSemanticContext.mRoutineMap.modifier_insertKey (inLexique, operand_50452->mRoutineName, var_cas_routineSignature COMMA_SOURCE_FILE_AT_LINE (1287)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Category method '@externFunctionDeclarationAST.enterType'          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_externFunctionDeclarationAST * operand_51171,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51171 != NULL) {
    GGS_unifiedTypeMapProxyList  var_cas_functionSignature = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    {
      GGS_formalInputParameterListAST::cEnumerator enumerator_51358 (operand_51171->mFormalArgumentList, true) ;
      const GGS_formalInputParameterListAST::cElement * operand_51358 = NULL ;
      while (((operand_51358 = enumerator_51358.nextObject ()))) {
        macroValidPointer (operand_51358) ;
        GGS_unifiedTypeMapProxy  var_cas_parameterTypeIndex ;
        GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_51358->mFormalArgumentTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1299)), var_cas_parameterTypeIndex COMMA_SOURCE_FILE_AT_LINE (1299)) ;
        var_cas_functionSignature.addAssign_operation (var_cas_parameterTypeIndex) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_resultTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_51171->mResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1304)), var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1304)) ;
    var_cas_ioSemanticContext.mFunctionMap.modifier_insertKey (inLexique, operand_51171->mFunctionName, var_cas_functionSignature, var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1306)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Category method '@lazyFunctionDeclarationAST.enterType'           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lazyFunctionDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_lazyFunctionDeclarationAST * operand_52058,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52058 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_resultTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_52058->mResultTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1317)), var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1317)) ;
    var_cas_ioSemanticContext.mFunctionMap.modifier_insertKey (inLexique, operand_52058->mFunctionName, GGS_unifiedTypeMapProxyList ::constructor_emptyList (), var_cas_resultTypeIndex COMMA_SOURCE_FILE_AT_LINE (1319)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Category method '@listmapDeclarationAST.enterType'             *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__enterType (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_52626,
                                GGS_semanticContext & var_cas_ioSemanticContext
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52626 != NULL) {
    GGS_typedAttributeList  var_cas_listTypedAttributeList ;
    GGS_typeKindEnum var_cas_typeKindEnum ;
    GGS_bool automatic_var_53011_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_53011_1 ;
    GGS_attributeMap  automatic_var_53011_2 ;
    GGS_typedAttributeList  automatic_var_53011_3 ;
    GGS_constructorMap  automatic_var_53011_4 ;
    GGS_readerMap  automatic_var_53011_5 ;
    GGS_modifierMap  automatic_var_53011_6 ;
    GGS_instanceMethodMap  automatic_var_53011_7 ;
    GGS_classMethodMap  automatic_var_53011_8 ;
    GGS_enumerationDescriptorList  automatic_var_53011_9 ;
    GGS_uint  automatic_var_53011_10 ;
    GGS_unifiedTypeMapProxyList  automatic_var_53011_11 ;
    GGS_nativeAttributeList  automatic_var_53011_12 ;
    GGS_stringset  automatic_var_53011_13 ;
    GGS_lstringlist  automatic_var_53011_14 ;
    GGS_typedAttributeList  automatic_var_53011_15 ;
    GGS_mapSearchMethodListAST  automatic_var_53011_16 ;
    GGS_mapSearchMethodListAST  automatic_var_53011_17 ;
    GGS_withAccessorMap  automatic_var_53011_18 ;
    if (var_cas_ioSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_ioSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_52626->mAssociatedListTypeName, automatic_var_53011_0, automatic_var_53011_1, var_cas_typeKindEnum, var_cas_listTypedAttributeList, automatic_var_53011_2, automatic_var_53011_3, automatic_var_53011_4, automatic_var_53011_5, automatic_var_53011_6, automatic_var_53011_7, automatic_var_53011_8, automatic_var_53011_9, automatic_var_53011_10, automatic_var_53011_11, automatic_var_53011_12, automatic_var_53011_13, automatic_var_53011_14, automatic_var_53011_15, automatic_var_53011_16, automatic_var_53011_17, automatic_var_53011_18 COMMA_SOURCE_FILE_AT_LINE (1331)) ;
    }
    const GGS_bool cond_53240 = (var_cas_typeKindEnum).operator_isNotEqual (GGS_typeKindEnum::constructor_listType (inLexique COMMA_SOURCE_FILE_AT_LINE (1338))) ;
    if (cond_53240.isBuiltAndTrue ()) {
      operand_52626->mAssociatedListTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (operand_52626->mAssociatedListTypeName)).operator_concat (GGS_string ("' type should be a list type")) COMMA_SOURCE_FILE_AT_LINE (1340)) ;
      var_cas_listTypedAttributeList = GGS_typedAttributeList ::constructor_emptyList () ;
    }
    GGS_constructorMap  var_cas_constructorMap = GGS_constructorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1343)) ;
    GGS_readerMap  var_cas_readerMap = GGS_readerMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) ;
    GGS_modifierMap  var_cas_modifierMap = GGS_modifierMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1345)) ;
    GGS_instanceMethodMap  var_cas_instanceMethodMap = GGS_instanceMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1346)) ;
    GGS_unifiedTypeMapProxy  var_cas_associatedListTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_52626->mAssociatedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)), var_cas_associatedListTypeIndex COMMA_SOURCE_FILE_AT_LINE (1349)) ;
    GGS_unifiedTypeMapProxy  var_cas_currentTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, operand_52626->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1352)), var_cas_currentTypeIndex COMMA_SOURCE_FILE_AT_LINE (1352)) ;
    GGS_unifiedTypeMapProxy  var_cas_stringTypeIndex ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("string"), var_cas_stringTypeIndex COMMA_SOURCE_FILE_AT_LINE (1355)) ;
    ::routine_enterInheritedReaderWithoutArgument (inLexique,  var_cas_readerMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("count"),  GGS_string ("uint"),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1357)) ;
    ::routine_enterConstructorWithoutArgument (inLexique,  var_cas_constructorMap,  var_cas_ioSemanticContext.mTypeMap,  GGS_string ("emptyMap"),  operand_52626->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1359)),  GGS_bool (false) COMMA_SOURCE_FILE_AT_LINE (1359)) ;
    GGS_enumerationDescriptorList  var_cas_enumeratorDescriptor = GGS_enumerationDescriptorList ::constructor_emptyList () ;
    var_cas_enumeratorDescriptor.addAssign_operation (var_cas_stringTypeIndex, GGS_string ("key")) ;
    var_cas_enumeratorDescriptor.addAssign_operation (var_cas_associatedListTypeIndex, GGS_string ("value")) ;
    GGS_unifiedTypeMapProxyList  var_cas_addAssignOperatorDescription = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
    var_cas_addAssignOperatorDescription.addAssign_operation (var_cas_stringTypeIndex) ;
    {
      GGS_typedAttributeList::cEnumerator enumerator_54661 (var_cas_listTypedAttributeList, true) ;
      const GGS_typedAttributeList::cElement * operand_54661 = NULL ;
      while (((operand_54661 = enumerator_54661.nextObject ()))) {
        macroValidPointer (operand_54661) ;
        var_cas_addAssignOperatorDescription.addAssign_operation (operand_54661->mAttributeTypeIndex) ;
      }
    }
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    GGS_unifiedTypeMapProxy::class_method_makeRegularProxy (inLexique, var_cas_ioSemanticContext.mTypeMap, GGS_string ("listmap"), var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (1372)) ;
    var_cas_ioSemanticContext.mTypeMap.modifier_insertKey (inLexique, operand_52626->mListmapTypeName, GGS_bool (true), var_cas_superTypeProxy, GGS_typeKindEnum::constructor_listMapType (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)), GGS_typedAttributeList ::constructor_emptyList (), GGS_attributeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)), var_cas_listTypedAttributeList, var_cas_constructorMap, var_cas_readerMap, var_cas_modifierMap, var_cas_instanceMethodMap, GGS_classMethodMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1385)), var_cas_enumeratorDescriptor, (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (1387))).operator_or (function_generateCppConstructorWithNativeAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (1387))), var_cas_addAssignOperatorDescription, GGS_nativeAttributeList ::constructor_emptyList (), GGS_stringset ::constructor_emptySet (), GGS_lstringlist ::constructor_emptyList (), GGS_typedAttributeList ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_mapSearchMethodListAST ::constructor_emptyList (), GGS_withAccessorMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1395)) COMMA_SOURCE_FILE_AT_LINE (1373)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Element of list '@partiallyOrderedSemanticDeclarationListAST'        *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
elementOf_GGS_partiallyOrderedSemanticDeclarationListAST (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_semanticDeclarationAST & argument_2):
mDependanceString (argument_0),
mTypeString (argument_1),
mSemanticDeclaration (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
isEqualToObject (const cSortedListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * ptr = dynamic_cast <const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mDependanceString.operator_isEqual (ptr->mDependanceString).boolValue ()
         && mTypeString.operator_isEqual (ptr->mTypeString).boolValue ()
         && mSemanticDeclaration.operator_isEqual (ptr->mSemanticDeclaration).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

PMSInt32 elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
compareForSorting (const cSortedListElement * inOperand) const {
  const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * operand = (const elementOf_GGS_partiallyOrderedSemanticDeclarationListAST *) inOperand ;
  PMSInt32 result = mDependanceString.genericObjectCompare (operand->mDependanceString) ;
  return result ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_partiallyOrderedSemanticDeclarationListAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mDependanceString.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTypeString.reader_description (inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mSemanticDeclaration.reader_description (inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Sorted list '@partiallyOrderedSemanticDeclarationListAST'          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_partiallyOrderedSemanticDeclarationListAST ("partiallyOrderedSemanticDeclarationListAST", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST::GGS_partiallyOrderedSemanticDeclarationListAST (void): AC_GGS_sortedlist () { // Default Constructor
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST::
GGS_partiallyOrderedSemanticDeclarationListAST (const GGS_partiallyOrderedSemanticDeclarationListAST & inSource): AC_GGS_sortedlist (inSource) {
}

//---------------------------------------------------------------------------*

GGS_bool GGS_partiallyOrderedSemanticDeclarationListAST::
operator_isEqual (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_partiallyOrderedSemanticDeclarationListAST::
operator_isNotEqual (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToList (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
internalAppendValues (const GGS_string& argument_0,
                    const GGS_string& argument_1,
                    const GGS_semanticDeclarationAST & argument_2) {
  cElement * newElement = (cElement *) NULL ;
  macroMyNew (newElement, cElement (argument_0,
                                argument_1,
                                argument_2)) ;
  internalAppendItem (newElement) ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
addAssign_operation (const GGS_string& argument_0,
                                const GGS_string& argument_1,
                                const GGS_semanticDeclarationAST & argument_2) {
  if (isBuilt ()) {
    insulateList () ;
    internalAppendValues (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST GGS_partiallyOrderedSemanticDeclarationListAST::
operator_concat (const GGS_partiallyOrderedSemanticDeclarationListAST & inOperand) const {
  GGS_partiallyOrderedSemanticDeclarationListAST result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
dotAssign_operation (const GGS_partiallyOrderedSemanticDeclarationListAST inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      *this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        insulateList () ;
        elementOf_GGS_partiallyOrderedSemanticDeclarationListAST * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_string p_0 = p->mDependanceString ;
          GGS_string p_1 = p->mTypeString ;
          GGS_semanticDeclarationAST  p_2 = p->mSemanticDeclaration ;
          internalAppendValues (p_0, p_1, p_2) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
insulateList (void) {
  if (isShared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      internalAppendValues (ptr->mDependanceString,
                                ptr->mTypeString,
                                ptr->mSemanticDeclaration) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST  GGS_partiallyOrderedSemanticDeclarationListAST::
constructor_emptySortedList (void) {
  GGS_partiallyOrderedSemanticDeclarationListAST result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST  GGS_partiallyOrderedSemanticDeclarationListAST::
constructor_sortedListWithValue (const GGS_string& argument_0,
                           const GGS_string& argument_1,
                           const GGS_semanticDeclarationAST & argument_2) {
  GGS_partiallyOrderedSemanticDeclarationListAST result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_partiallyOrderedSemanticDeclarationListAST::
reader_description (const PMSInt32 inIndentation) const {
  return performDescription ("@partiallyOrderedSemanticDeclarationListAST", inIndentation) ;
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
method_smallest (C_Compiler & inLexique,
                 GGS_string& _out_0,
                 GGS_string& _out_1,
                 GGS_semanticDeclarationAST & _out_2
                 COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
method_greatest (C_Compiler & inLexique,
             GGS_string& _out_0,
             GGS_string& _out_1,
             GGS_semanticDeclarationAST & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'greatest' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
modifier_popSmallest (C_Compiler & inLexique,
                 GGS_string& _out_0,
                 GGS_string& _out_1,
                 GGS_semanticDeclarationAST & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popSmallest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
    insulateList () ;
    _internalRemoveSmallest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_partiallyOrderedSemanticDeclarationListAST::
modifier_popGreatest (C_Compiler & inLexique,
                GGS_string& _out_0,
                GGS_string& _out_1,
                GGS_semanticDeclarationAST & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popGreatest' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mDependanceString ;
    _out_1 = ptr->mTypeString ;
    _out_2 = ptr->mSemanticDeclaration ;
    insulateList () ;
    _internalRemoveGreatest () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator::_mDependanceString (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mDependanceString ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator::_mTypeString (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mTypeString ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_semanticDeclarationAST  & GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator::_mSemanticDeclaration (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mSemanticDeclaration ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_partiallyOrderedSemanticDeclarationListAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_partiallyOrderedSemanticDeclarationListAST * p = NULL ;
    macroMyNew (p, GGS_partiallyOrderedSemanticDeclarationListAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_partiallyOrderedSemanticDeclarationListAST GGS_partiallyOrderedSemanticDeclarationListAST::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_partiallyOrderedSemanticDeclarationListAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_partiallyOrderedSemanticDeclarationListAST * p = dynamic_cast <const GGS_partiallyOrderedSemanticDeclarationListAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_partiallyOrderedSemanticDeclarationListAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_partiallyOrderedSemanticDeclarationListAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_partiallyOrderedSemanticDeclarationListAST ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@semanticDeclarationAST.enterOrderedDeclaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__semanticDeclarationAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_semanticDeclarationAST * operand_56382,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & /* var_cas_ioPartiallyOrderedDeclarationList */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56382 != NULL) {
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticDeclarationAST.enterOrderedDeclaration'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration> gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration
findCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.count ()) {
    result = gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (superClassPtr) ;
      gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@predefinedTypeAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__predefinedTypeAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_predefinedTypeAST * operand_56625,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56625 != NULL) {
    GGS_predefinedTypeAST  var_cas_t = operand_56625 ;
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation ((findCategoryReader__predefinedTypeAST__getSuperTypeName (var_cas_t (HERE)->galgasRTTI ()) (inLexique, var_cas_t.getPtr () COMMA_SOURCE_FILE_AT_LINE (1426))), operand_56625->mPredefinedTypeName, operand_56625) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@objectPredefinedTypeAST.enterOrderedDeclaration'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__objectPredefinedTypeAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_objectPredefinedTypeAST * operand_57008,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57008 != NULL) {
    GGS_objectPredefinedTypeAST  var_cas_t = operand_57008 ;
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), GGS_string ("object"), operand_57008) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@stringsetPredefinedTypeAST.enterOrderedDeclaration'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__stringsetPredefinedTypeAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_stringsetPredefinedTypeAST * operand_57371,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57371 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string ("enumerable"), operand_57371->mPredefinedTypeName, operand_57371) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@genericTypeTypeAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__genericTypeTypeAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_genericTypeTypeAST * operand_57690,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57690 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (operand_57690->mSuperTypeName, operand_57690->mTypeName, operand_57690) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@classDeclarationAST.enterOrderedDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__classDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_classDeclarationAST * operand_58002,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58002 != NULL) {
    const GGS_string var_cas_actualSuperTypeName = (((operand_58002->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1459))).operator_isEqual (GGS_string (""))).isBuiltAndTrue () ? (GGS_string ("class")) : (operand_58002->mSuperClassName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1459)))) ;
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (var_cas_actualSuperTypeName, operand_58002->mClassTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1460)), operand_58002) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@listDeclarationAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_listDeclarationAST * operand_58454,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58454 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string ("list"), operand_58454->mListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1468)), operand_58454) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@structDeclarationAST.enterOrderedDeclaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__structDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_structDeclarationAST * operand_58772,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58772 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string ("struct"), operand_58772->mStructTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1476)), operand_58772) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@enumDeclarationAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__enumDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_enumDeclarationAST * operand_59092,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59092 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string ("enum"), operand_59092->mEnumTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1484)), operand_59092) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@sortedListDeclarationAST.enterOrderedDeclaration'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__sortedListDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_sortedListDeclarationAST * operand_59414,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59414 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string ("sortedlist"), operand_59414->mSortedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1492)), operand_59414) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@listmapDeclarationAST.enterOrderedDeclaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__listmapDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_listmapDeclarationAST * operand_59745,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59745 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (operand_59745->mAssociatedListTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1500)), operand_59745->mListmapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1500)), operand_59745) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@mapDeclarationAST.enterOrderedDeclaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_mapDeclarationAST * operand_60089,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60089 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string ("map"), operand_60089->mMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1508)), operand_60089) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@mapProxyDeclarationAST.enterOrderedDeclaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__mapProxyDeclarationAST__enterOrderedDeclaration (C_Compiler & inLexique,
                                const cPtr_mapProxyDeclarationAST * operand_60407,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60407 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (operand_60407->mAssociatedMapTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1516)), operand_60407->mMapProxyTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1516)), operand_60407) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@externFunctionDeclarationAST.enterOrderedDeclaration'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externFunctionDeclarationAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_externFunctionDeclarationAST * operand_60762,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60762 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), GGS_string (""), operand_60762) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@externRoutineDeclarationAST.enterOrderedDeclaration'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__externRoutineDeclarationAST__enterOrderedDeclaration (C_Compiler &,
                                const cPtr_externRoutineDeclarationAST * operand_61063,
                                GGS_partiallyOrderedSemanticDeclarationListAST  & var_cas_ioPartiallyOrderedDeclarationList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_61063 != NULL) {
    var_cas_ioPartiallyOrderedDeclarationList.addAssign_operation (GGS_string (""), GGS_string (""), operand_61063) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "buildSemanticContext"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_buildSemanticContext (C_Compiler & inLexique,
                                const GGS_semanticDeclarationListAST   var_cas_inSemanticDeclarationList,
                                const GGS_location   var_cas_inEndOfSourceFile,
                                GGS_semanticContext & var_cas_outSemanticContext
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_buildSemanticContext at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_collectedTypeMap  var_cas_collectedTypeMap = GGS_collectedTypeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1547)) ;
  {
    GGS_semanticDeclarationListAST::cEnumerator enumerator_61917 (var_cas_inSemanticDeclarationList, true) ;
    const GGS_semanticDeclarationListAST::cElement * operand_61917 = NULL ;
    while (((operand_61917 = enumerator_61917.nextObject ()))) {
      macroValidPointer (operand_61917) ;
      { typeCategoryMethod__semanticDeclarationAST__collectType method = findCategoryMethod__semanticDeclarationAST__collectType (operand_61917->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, operand_61917->mSemanticDeclaration (HERE), var_cas_collectedTypeMap COMMA_SOURCE_FILE_AT_LINE (1549)) ;
        }
      }
    }
  }
  GGS_stringlist  var_cas_undefinedClasses = var_cas_collectedTypeMap.reader_unsolvedIndexKeyStringList (inLexique COMMA_SOURCE_FILE_AT_LINE (1552)) ;
  const GGS_bool cond_62382 = (var_cas_undefinedClasses.reader_length ()).operator_isEqual (GGS_uint (1U)) ;
  if (cond_62382.isBuiltAndTrue ()) {
    GGS_string var_cas_errorMessage = GGS_string ("there is 1 undefined type:") ;
    {
      GGS_stringlist::cEnumerator enumerator_62245 (var_cas_undefinedClasses, true) ;
      const GGS_stringlist::cElement * operand_62245 = NULL ;
      while (((operand_62245 = enumerator_62245.nextObject ()))) {
        macroValidPointer (operand_62245) ;
        var_cas_errorMessage.appendCString ("\n"
          "-  @") ;
        var_cas_errorMessage.dotAssign_operation (operand_62245->mValue) ;
      }
    }
    var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1559)) ;
    var_cas_outSemanticContext.drop () ;
  }else if (cond_62382.isBuiltAndFalse ()) {
    const GGS_bool cond_62684 = (var_cas_undefinedClasses.reader_length ()).operator_strictSup (GGS_uint (1U)) ;
    if (cond_62684.isBuiltAndTrue ()) {
      GGS_string var_cas_errorMessage = ((GGS_string ("there are ")).operator_concat (var_cas_undefinedClasses.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1560)))).operator_concat (GGS_string (" undefined types:")) ;
      {
        GGS_stringlist::cEnumerator enumerator_62548 (var_cas_undefinedClasses, true) ;
        const GGS_stringlist::cElement * operand_62548 = NULL ;
        while (((operand_62548 = enumerator_62548.nextObject ()))) {
          macroValidPointer (operand_62548) ;
          var_cas_errorMessage.appendCString ("\n"
            "-  @") ;
          var_cas_errorMessage.dotAssign_operation (operand_62548->mValue) ;
        }
      }
      var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (1565)) ;
      var_cas_outSemanticContext.drop () ;
    }else if (cond_62684.isBuiltAndFalse ()) {
      GGS_partiallyOrderedSemanticDeclarationListAST  var_cas_partiallyOrderedSemanticDeclarationListAST = GGS_partiallyOrderedSemanticDeclarationListAST ::constructor_emptySortedList () ;
      {
        GGS_semanticDeclarationListAST::cEnumerator enumerator_63047 (var_cas_inSemanticDeclarationList, true) ;
        const GGS_semanticDeclarationListAST::cElement * operand_63047 = NULL ;
        while (((operand_63047 = enumerator_63047.nextObject ()))) {
          macroValidPointer (operand_63047) ;
          { typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration method = findCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (operand_63047->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_63047->mSemanticDeclaration (HERE), var_cas_partiallyOrderedSemanticDeclarationListAST COMMA_SOURCE_FILE_AT_LINE (1572)) ;
            }
          }
        }
      }
      GGS_semanticDeclarationListAST  var_cas_orderedSemanticDeclarationListAST = GGS_semanticDeclarationListAST ::constructor_emptyList () ;
      GGS_stringset  var_cas_alreadyDefinedTypes = GGS_stringset ::constructor_emptySet () ;
      var_cas_alreadyDefinedTypes.addAssign_operation (GGS_string ("")) ;
      GGS_bool var_cas_progress = GGS_bool (true) ;
      GGS_uint _variant_64161 = var_cas_partiallyOrderedSemanticDeclarationListAST.reader_length () ;
      GGS_bool _condition_64161 (_variant_64161.isBuilt (), true) ;
      while (_condition_64161.isBuiltAndTrue ()) {
        _condition_64161 = ((var_cas_partiallyOrderedSemanticDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U))).operator_and (var_cas_progress) ;
        if (_condition_64161.isBuiltAndTrue ()) {
          if (_variant_64161.uintValue () == 0) {
            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1593)) ;
            _condition_64161 = GGS_bool (false) ;
          }else{
            _variant_64161.decrement_operation (inLexique COMMA_HERE) ;
            var_cas_progress = GGS_bool (false) ;
            const GGS_partiallyOrderedSemanticDeclarationListAST  var_cas_r = var_cas_partiallyOrderedSemanticDeclarationListAST ;
            var_cas_partiallyOrderedSemanticDeclarationListAST = GGS_partiallyOrderedSemanticDeclarationListAST ::constructor_emptySortedList () ;
            {
              GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator enumerator_63776 (var_cas_r, true) ;
              const GGS_partiallyOrderedSemanticDeclarationListAST::cElement * operand_63776 = NULL ;
              while (((operand_63776 = enumerator_63776.nextObject ()))) {
                macroValidPointer (operand_63776) ;
                const GGS_bool cond_64004 = var_cas_alreadyDefinedTypes.reader_hasKey (operand_63776->mDependanceString) ;
                if (cond_64004.isBuiltAndTrue ()) {
                  var_cas_orderedSemanticDeclarationListAST.addAssign_operation (operand_63776->mSemanticDeclaration) ;
                  var_cas_alreadyDefinedTypes.addAssign_operation (operand_63776->mTypeString) ;
                  var_cas_progress = GGS_bool (true) ;
                }else if (cond_64004.isBuiltAndFalse ()) {
                  var_cas_partiallyOrderedSemanticDeclarationListAST.addAssign_operation (operand_63776->mDependanceString, operand_63776->mTypeString, operand_63776->mSemanticDeclaration) ;
                }
              }
            }
          }
        }
      }
      const GGS_bool cond_64784 = (var_cas_partiallyOrderedSemanticDeclarationListAST.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (cond_64784.isBuiltAndTrue ()) {
        GGS_string var_cas_s = GGS_string ("inheritance circularities involving the ") ;
        {
          GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator enumerator_64443 (var_cas_partiallyOrderedSemanticDeclarationListAST, true) ;
          const GGS_partiallyOrderedSemanticDeclarationListAST::cElement * operand_64443 = enumerator_64443.nextObject () ;
          if ((operand_64443 != NULL)) {
            bool _foreach_loop_64443 ;
            do{
              macroValidPointer (operand_64443) ;
              var_cas_s.appendCString ("@") ;
              var_cas_s.dotAssign_operation (operand_64443->mTypeString) ;
              operand_64443 = enumerator_64443.nextObject () ;
              _foreach_loop_64443 = ((operand_64443 != NULL)) ;
              if (_foreach_loop_64443) {
                var_cas_s.appendCString (", ") ;
              }
            }while (_foreach_loop_64443) ;
          }
        }
        var_cas_s.appendCString (" classes; detail:") ;
        {
          GGS_partiallyOrderedSemanticDeclarationListAST::cEnumerator enumerator_64616 (var_cas_partiallyOrderedSemanticDeclarationListAST, true) ;
          const GGS_partiallyOrderedSemanticDeclarationListAST::cElement * operand_64616 = NULL ;
          while (((operand_64616 = enumerator_64616.nextObject ()))) {
            macroValidPointer (operand_64616) ;
            var_cas_s.appendCString ("\n"
              "  - @") ;
            var_cas_s.dotAssign_operation (operand_64616->mTypeString) ;
            var_cas_s.appendCString (" inherits from @") ;
            var_cas_s.dotAssign_operation (operand_64616->mDependanceString) ;
          }
        }
        var_cas_inEndOfSourceFile.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (1606)) ;
        var_cas_outSemanticContext.drop () ;
      }else if (cond_64784.isBuiltAndFalse ()) {
        var_cas_outSemanticContext = GGS_semanticContext::constructor_new (GGS_unifiedTypeMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1609)), GGS_routineMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1610)), GGS_functionMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1611)), GGS_filewrapperMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1612)), GGS_grammarMap ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1613)), GGS_optionComponentMapForSemanticAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1614))) ;
        {
          GGS_semanticDeclarationListAST::cEnumerator enumerator_65200 (var_cas_orderedSemanticDeclarationListAST, true) ;
          const GGS_semanticDeclarationListAST::cElement * operand_65200 = NULL ;
          while (((operand_65200 = enumerator_65200.nextObject ()))) {
            macroValidPointer (operand_65200) ;
            { typeCategoryMethod__semanticDeclarationAST__enterType method = findCategoryMethod__semanticDeclarationAST__enterType (operand_65200->mSemanticDeclaration.galgasObjectRunTimeInfo ()) ;
              if (method != NULL) {
                method (inLexique, operand_65200->mSemanticDeclaration (HERE), var_cas_outSemanticContext COMMA_SOURCE_FILE_AT_LINE (1618)) ;
              }
            }
          }
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_buildSemanticContext\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticContext (void) {
  enterCategoryMethod__semanticDeclarationAST__collectType (category_method__semanticDeclarationAST__collectType, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__genericTypeTypeAST__collectType, gClassInfoFor__genericTypeTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__objectPredefinedTypeAST__collectType, gClassInfoFor__objectPredefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__predefinedTypeAST__collectType, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__mapDeclarationAST__collectType, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__mapProxyDeclarationAST__collectType, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__enumDeclarationAST__collectType, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__sortedListDeclarationAST__collectType, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__structDeclarationAST__collectType, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__listDeclarationAST__collectType, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__classDeclarationAST__collectType, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__collectType ((typeCategoryMethod__semanticDeclarationAST__collectType) category_method__listmapDeclarationAST__collectType, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__predefinedTypeAST__enterType, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__genericTypeTypeAST__enterType, gClassInfoFor__genericTypeTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__objectPredefinedTypeAST__enterType, gClassInfoFor__objectPredefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__mapDeclarationAST__enterType, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__mapProxyDeclarationAST__enterType, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__enumDeclarationAST__enterType, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__filewrapperDeclarationAST__enterType, gClassInfoFor__filewrapperDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__listDeclarationAST__enterType, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__sortedListDeclarationAST__enterType, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__structDeclarationAST__enterType, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__classDeclarationAST__enterType, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__externRoutineDeclarationAST__enterType, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__externFunctionDeclarationAST__enterType, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__lazyFunctionDeclarationAST__enterType, gClassInfoFor__lazyFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterType ((typeCategoryMethod__semanticDeclarationAST__enterType) category_method__listmapDeclarationAST__enterType, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration (category_method__semanticDeclarationAST__enterOrderedDeclaration, gClassInfoFor__semanticDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__predefinedTypeAST__enterOrderedDeclaration, gClassInfoFor__predefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__objectPredefinedTypeAST__enterOrderedDeclaration, gClassInfoFor__objectPredefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__stringsetPredefinedTypeAST__enterOrderedDeclaration, gClassInfoFor__stringsetPredefinedTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__genericTypeTypeAST__enterOrderedDeclaration, gClassInfoFor__genericTypeTypeAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__classDeclarationAST__enterOrderedDeclaration, gClassInfoFor__classDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__listDeclarationAST__enterOrderedDeclaration, gClassInfoFor__listDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__structDeclarationAST__enterOrderedDeclaration, gClassInfoFor__structDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__enumDeclarationAST__enterOrderedDeclaration, gClassInfoFor__enumDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__sortedListDeclarationAST__enterOrderedDeclaration, gClassInfoFor__sortedListDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__listmapDeclarationAST__enterOrderedDeclaration, gClassInfoFor__listmapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__mapDeclarationAST__enterOrderedDeclaration, gClassInfoFor__mapDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__mapProxyDeclarationAST__enterOrderedDeclaration, gClassInfoFor__mapProxyDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__externFunctionDeclarationAST__enterOrderedDeclaration, gClassInfoFor__externFunctionDeclarationAST.slotID ()) ;
  enterCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration ((typeCategoryMethod__semanticDeclarationAST__enterOrderedDeclaration) category_method__externRoutineDeclarationAST__enterOrderedDeclaration, gClassInfoFor__externRoutineDeclarationAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticContext (void) {
  gDispatchTableForMethod__semanticDeclarationAST__collectType.free () ;
  gDispatchTableForMethod__semanticDeclarationAST__enterType.free () ;
  gDispatchTableForMethod__semanticDeclarationAST__enterOrderedDeclaration.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticContext (prologueRoutineFor_semanticContext, epilogueRoutineFor_semanticContext) ;

//---------------------------------------------------------------------------*

