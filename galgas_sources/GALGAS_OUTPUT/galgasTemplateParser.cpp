//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'galgasTemplateParser.cpp'                       *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 29th, 2008, at 17h40'28"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgasTemplateParser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgasTemplateParser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "enterTemplateString"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterTemplateString (C_Compiler & _inLexique,
                                GGS_templateInstructionList  & var_cas_outResultingInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterTemplateString at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_s ;
  var_cas_s = GGS_string::constructor_retrieveAndResetTemplateString (_inLexique COMMA_HERE) ;
  if (((var_cas_s.reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (36)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_outResultingInstructionList._addAssign_operation (GGS_templateInstructionString::constructor_new (_inLexique, var_cas_s COMMA_HERE)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterTemplateString\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'lexique_component_start_symbol'     *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateParser::
galgasTemplateParser::
pr_lexique_component_start_symbol_galgasTemplateParser_43_4_ (galgasTemplateScanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioTemplateVariableMap,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inComponentSemanticsEntitiesMap */,
                                GGS_templateInstructionList  &var_cas_outResultingInstructionList) {
  var_cas_outResultingInstructionList = GGS_templateInstructionList::constructor_emptyList (_inLexique COMMA_HERE) ;
  var_cas_ioTemplateVariableMap.prologue_verifyVariableUsing (_inLexique COMMA_SOURCE_FILE_AT_LINE (49)) ;
  ::routine_enterTemplateString (_inLexique,  var_cas_outResultingInstructionList COMMA_SOURCE_FILE_AT_LINE (49)) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_galgasTemplateParser_0 (_inLexique)) {
        case 2 : {
          GGS_lstring  var_cas_parameterName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_parameterName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
          GGS_AC_galgasType  var_cas_type ;
          GGS_typeCplusPlusName  var_cas_cppName ;
          var_cas_ioTemplateVariableMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_parameterName, var_cas_type, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (57)) ;
          GGS_typeGalgas_string  var_cas_x ;
          var_cas_x = GGS_typeGalgas_string::_castFrom (_inLexique, var_cas_type.getPtr (), true, var_cas_parameterName COMMA_SOURCE_FILE_AT_LINE (58)) ;
          var_cas_outResultingInstructionList._addAssign_operation (GGS_templateInstructionConstant::constructor_new (_inLexique, var_cas_cppName COMMA_HERE)) ;
          ::routine_enterTemplateString (_inLexique,  var_cas_outResultingInstructionList COMMA_SOURCE_FILE_AT_LINE (59)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  var_cas_ioTemplateVariableMap.epilogue_verifyVariableUsing (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (49)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                     Implementation of wrapper 'test'                      *
//                                                                           *
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

//--- File '/templateTest.ggs'

const char * gWrapperFileContent_0_test = // 72 bytes
  "Un template$PARAMETER1$premier$PARAMETER1$second$ PARAMETER1 $troisieme"
;

static const cRegularFileWrapper gWrapperFile_0_test = {
  "templateTest.ggs",
  "ggs",
  gWrapperFileContent_0_test
} ;

//---------------------------------------------------------------------------*

//--- File '/templateVide.ggs'

const char * gWrapperFileContent_1_test = // 14 bytes
  "template vide"
;

static const cRegularFileWrapper gWrapperFile_1_test = {
  "templateVide.ggs",
  "ggs",
  gWrapperFileContent_1_test
} ;

//---------------------------------------------------------------------------*

//--- All files of '' directory

static const cRegularFileWrapper * gWrapperAllFiles_test_0 [3] = {
  & gWrapperFile_0_test,
  & gWrapperFile_1_test,
  NULL
} ;

//---------------------------------------------------------------------------*

//--- All sub-directories of '' directory

static const cDirectoryWrapper * gWrapperAllDirectories_test_0 [1] = {
  NULL
} ;

//---------------------------------------------------------------------------*

//--- Directory ''

const cDirectoryWrapper gWrapperDirectory_0_test = {
  "",
  2,
  gWrapperAllFiles_test_0,
  0,
  gWrapperAllDirectories_test_0
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            Declaration of 't1' template of 'test' filewrapper             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_test_t1 (const GGS_string& var_cas_PARAMETER1) {
  C_String _result ;
  const bool _isBuilt = var_cas_PARAMETER1._isBuilt () ;
  if (_isBuilt) {
    _result << "Un template" ;
    _result << var_cas_PARAMETER1 ;
    _result << "premier" ;
    _result << var_cas_PARAMETER1 ;
    _result << "second" ;
    _result << var_cas_PARAMETER1 ;
    _result << "troisieme" ;
  }
  return GGS_string (_isBuilt, _result) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Declaration of 't2' template of 'test' filewrapper             *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string
_template_filewrapper_test_t2 (const GGS_string& var_cas_PARAMETER1) {
  C_String _result ;
  const bool _isBuilt = var_cas_PARAMETER1._isBuilt () ;
  if (_isBuilt) {
    _result << "template vide" ;
  }
  return GGS_string (_isBuilt, _result) ;
}

//---------------------------------------------------------------------------*

