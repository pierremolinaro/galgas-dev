//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'galgasTemplateParser.cpp'                       *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                        may 3rd, 2009, at 22h24'5"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgasTemplateParser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "galgasTemplateParser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "enterTemplateString34              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterTemplateString (C_Compiler & _inLexique,
                                GGS_templateInstructionList  & var_cas_outResultingInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterTemplateString at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_lstring  var_cas_s ;
  var_cas_s = GGS_lstring ::constructor_retrieveAndResetTemplateString (_inLexique COMMA_HERE) ;
  if (((var_cas_s.ggs_string ().reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (42)))._operator_strictSup (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_outResultingInstructionList._addAssign_operation (GGS_templateInstructionString ::constructor_new (_inLexique, var_cas_s.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)) COMMA_HERE)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterTemplateString\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateParser::
pr_template_instruction_galgasTemplateParser_49_27_ (galgasTemplateScanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioTemplateVariableMap,
                                const GGS_M_semanticsEntitiesForUse  /* var_cas_inComponentSemanticsEntitiesMap */,
                                GGS_templateInstructionList  &var_cas_ioResultingInstructionList) {
  GGS_lstring  var_cas_parameterName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_parameterName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgasTemplateScanner::galgasTemplateScanner_1_identifier) COMMA_HERE) ;
  GGS_AC_galgasType  var_cas_type ;
  GGS_typeCplusPlusName  var_cas_cppName ;
  var_cas_ioTemplateVariableMap.modifier_searchForReadOnlyAccess (_inLexique, var_cas_parameterName, var_cas_type, var_cas_cppName COMMA_SOURCE_FILE_AT_LINE (58)) ;
  GGS_typeGalgas_string  var_cas_x ;
  var_cas_x = GGS_typeGalgas_string::_castFrom (_inLexique, var_cas_type.getPtr (), true, var_cas_parameterName COMMA_SOURCE_FILE_AT_LINE (59)) ;
  var_cas_ioResultingInstructionList._addAssign_operation (GGS_templateInstructionConstant ::constructor_new (_inLexique, var_cas_cppName COMMA_HERE)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'lexique_component_start_symbol'     *
//                                                                           *
//---------------------------------------------------------------------------*

void galgasTemplateParser::
pr_lexique_component_start_symbol_galgasTemplateParser_65_37_ (galgasTemplateScanner & _inLexique,
                                GGS_typeVariablesMap  &var_cas_ioTemplateVariableMap,
                                const GGS_M_semanticsEntitiesForUse  var_cas_inComponentSemanticsEntitiesMap,
                                GGS_templateInstructionList  &var_cas_outResultingInstructionList) {
  var_cas_outResultingInstructionList = GGS_templateInstructionList ::constructor_emptyList () ;
  var_cas_ioTemplateVariableMap.prologue_verifyVariableUsing (_inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
  ::routine_enterTemplateString (_inLexique,  var_cas_outResultingInstructionList COMMA_SOURCE_FILE_AT_LINE (72)) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_galgasTemplateParser_0 (_inLexique)) {
        case 2 : {
          nt_template_instruction_ (_inLexique, var_cas_ioTemplateVariableMap, var_cas_inComponentSemanticsEntitiesMap, var_cas_outResultingInstructionList) ;
          ::routine_enterTemplateString (_inLexique,  var_cas_outResultingInstructionList COMMA_SOURCE_FILE_AT_LINE (80)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  var_cas_ioTemplateVariableMap.epilogue_verifyVariableUsing (_inLexique, GGS_location (_inLexique) COMMA_SOURCE_FILE_AT_LINE (71)) ;
}

//---------------------------------------------------------------------------*

