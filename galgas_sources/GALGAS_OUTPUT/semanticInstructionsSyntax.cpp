//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'semanticInstructionsSyntax.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 23th, 2010, at 16h45'33"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticInstructionsSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticInstructionsSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'semantic_instruction_list'        *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_5F_list_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionListAST  &var_cas_outInstructionsList) {
  var_cas_outInstructionsList = GGS_semanticInstructionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_semanticInstructionsSyntax_0 (inLexique)) {
        case 2 : {
          GGS_semanticInstructionAST  var_cas_instruction ;
          nt_semantic_5F_instruction_ (inLexique, var_cas_instruction) ;
          var_cas_outInstructionsList.addAssign_operation (var_cas_instruction) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_declaration_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_mRoutineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mRoutineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  var_cas_mFormalParameterList ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mFormalParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mRoutineInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mRoutineInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOfInstructionList = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_routineDeclarationAST ::constructor_new (inLexique, var_cas_mRoutineName, var_cas_mFormalParameterList, var_cas_mRoutineInstructionList, var_cas_endOfInstructionList COMMA_SOURCE_FILE_AT_LINE (92))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_declaration_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_extern) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_routine) COMMA_HERE) ;
  GGS_lstring  var_cas_mActionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mActionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  var_cas_mFormalParameterList ;
  nt_formal_5F_parameter_5F_list_ (inLexique, var_cas_mFormalParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_externRoutineDeclarationAST ::constructor_new (inLexique, var_cas_mActionName, var_cas_mFormalParameterList COMMA_SOURCE_FILE_AT_LINE (115))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_declaration_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &/* var_cas_ioSemanticDeclarations */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_routine) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalParameterListAST  automatic_var_5940_0 ;
  nt_formal_5F_parameter_5F_list_ (inLexique, automatic_var_5940_0) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_declaration_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_function) COMMA_HERE) ;
  GGS_lstring  var_cas_mRoutineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mRoutineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalInputParameterListAST  var_cas_formalInputParameterList ;
  nt_formal_5F_input_5F_parameter_5F_list_ (inLexique, var_cas_formalInputParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_resultTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_resultTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_resultVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_resultVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_functionInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_functionInstructionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOfFunctionInstructionList = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_function) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_functionDeclarationAST ::constructor_new (inLexique, var_cas_mRoutineName, var_cas_formalInputParameterList, var_cas_resultTypeName, var_cas_resultVariableName, var_cas_functionInstructionList, var_cas_endOfFunctionInstructionList COMMA_SOURCE_FILE_AT_LINE (160))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_declaration_i5_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_once) COMMA_HERE) ;
  GGS_lstring  var_cas_mRoutineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mRoutineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_resultTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_resultTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_resultVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_resultVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_semanticInstructionsSyntax_1 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
      GGS_semanticInstructionListAST  var_cas_mRoutineInstructionList ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mRoutineInstructionList) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_once) COMMA_HERE) ;
      const GGS_location  var_cas_endOfFunctionInstructionList = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      var_cas_ioSemanticDeclarations.addAssign_operation (GGS_onceFunctionDeclarationAST ::constructor_new (inLexique, var_cas_mRoutineName, var_cas_resultTypeName, var_cas_resultVariableName, var_cas_mRoutineInstructionList, var_cas_endOfFunctionInstructionList COMMA_SOURCE_FILE_AT_LINE (194))) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_declaration_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticDeclarationListAST  &var_cas_ioSemanticDeclarations) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_extern) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_function) COMMA_HERE) ;
  GGS_lstring  var_cas_mActionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mActionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_formalInputParameterListAST  var_cas_formalInputParameterList ;
  nt_formal_5F_input_5F_parameter_5F_list_ (inLexique, var_cas_formalInputParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_resultTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_resultTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_resultVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_resultVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioSemanticDeclarations.addAssign_operation (GGS_externFunctionDeclarationAST ::constructor_new (inLexique, var_cas_mActionName, var_cas_formalInputParameterList, var_cas_resultTypeName, var_cas_resultVariableName COMMA_SOURCE_FILE_AT_LINE (222))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i7_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_typeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_semanticInstructionsSyntax_2 (inLexique)) {
    case 1 : {
      var_cas_outInstruction = GGS_localVariableDeclarationAST ::constructor_new (inLexique, var_cas_typeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (240)), var_cas_typeName, var_cas_variableName COMMA_SOURCE_FILE_AT_LINE (240)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A__3D_) COMMA_HERE) ;
      GGS_semanticExpressionAST  var_cas_sourceExpression ;
      nt_expression_ (inLexique, var_cas_sourceExpression) ;
      var_cas_outInstruction = GGS_localVariableOrConstantDeclarationWithAssignmentAST ::constructor_new (inLexique, var_cas_typeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (246)), GGS_bool (false), var_cas_typeName, var_cas_variableName, var_cas_sourceExpression COMMA_SOURCE_FILE_AT_LINE (245)) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
      GGS_lstring  var_cas_constructorName ;
      inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_semanticExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outInstruction = GGS_localVariableOrConstantDeclarationWithConstructorCallAST ::constructor_new (inLexique, var_cas_typeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (259)), GGS_bool (false), var_cas_typeName, var_cas_variableName, var_cas_constructorName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (258)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_const) COMMA_HERE) ;
  GGS_lstring  var_cas_typeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_variableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  switch (select_semanticInstructionsSyntax_3 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A__3D_) COMMA_HERE) ;
      GGS_semanticExpressionAST  var_cas_sourceExpression ;
      nt_expression_ (inLexique, var_cas_sourceExpression) ;
      var_cas_outInstruction = GGS_localVariableOrConstantDeclarationWithAssignmentAST ::constructor_new (inLexique, var_cas_typeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (286)), GGS_bool (true), var_cas_typeName, var_cas_variableName, var_cas_sourceExpression COMMA_SOURCE_FILE_AT_LINE (285)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
      GGS_lstring  var_cas_constructorName ;
      inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_semanticExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outInstruction = GGS_localVariableOrConstantDeclarationWithConstructorCallAST ::constructor_new (inLexique, var_cas_typeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (299)), GGS_bool (true), var_cas_typeName, var_cas_variableName, var_cas_constructorName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (298)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mTargetVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mTargetVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mStructAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_semanticInstructionsSyntax_4 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_mStructAttributeList.addAssign_operation (var_cas_attributeName) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A__3D_) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_mSourceExpression ;
  nt_expression_ (inLexique, var_cas_mSourceExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_assignmentInstructionAST ::constructor_new (inLexique, var_cas_mTargetVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (331)), var_cas_mTargetVariableName, var_cas_mStructAttributeList, var_cas_mSourceExpression COMMA_SOURCE_FILE_AT_LINE (330)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_drop) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_lstringlist  var_cas_dropList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_lstring  var_cas_variableName ;
        inLexique.assignFromAttribute_tokenString (var_cas_variableName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        var_cas_dropList.addAssign_operation (var_cas_variableName) ;
      switch (select_semanticInstructionsSyntax_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_dropInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_dropList COMMA_SOURCE_FILE_AT_LINE (355)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mReceiverName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReceiverName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mStructAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_semanticInstructionsSyntax_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_mStructAttributeList.addAssign_operation (var_cas_attributeName) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2B__2B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_incrementInstructionAST ::constructor_new (inLexique, var_cas_mReceiverName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (375)), var_cas_mReceiverName, var_cas_mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (375)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i12_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mReceiverName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReceiverName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mStructAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_semanticInstructionsSyntax_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_mStructAttributeList.addAssign_operation (var_cas_attributeName) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__2D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_decrementInstructionAST ::constructor_new (inLexique, var_cas_mReceiverName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (395)), var_cas_mReceiverName, var_cas_mStructAttributeList COMMA_SOURCE_FILE_AT_LINE (395)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'foreach_enumerated_object'        *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_foreach_5F_enumerated_5F_object_i13_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_foreachInstructionEnumeratedObjectListAST  &var_cas_ioForeachInstructionEnumeratedObjectList) {
  GGS_bool var_cas_ascending ;
  switch (select_semanticInstructionsSyntax_8 (inLexique)) {
    case 1 : {
      var_cas_ascending = GGS_bool (true) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3C_) COMMA_HERE) ;
      var_cas_ascending = GGS_bool (true) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E_) COMMA_HERE) ;
      var_cas_ascending = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  GGS_semanticExpressionAST  var_cas_mEnumeratedExpression ;
  nt_expression_ (inLexique, var_cas_mEnumeratedExpression) ;
  const GGS_location  var_cas_endOfEnumerationExpression = GGS_location (inLexique) ;
  GGS_foreachInstructionEnumeratedObjectElementListAST  var_cas_mElementList = GGS_foreachInstructionEnumeratedObjectElementListAST ::constructor_emptyList () ;
  GGS_bool var_cas_mEndsWithEllipsis ;
  GGS_lstring  var_cas_prefix ;
  switch (select_semanticInstructionsSyntax_9 (inLexique)) {
    case 1 : {
      var_cas_mEndsWithEllipsis = GGS_bool (false) ;
      var_cas_prefix = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (431)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_prefixedby) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_prefix) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_mEndsWithEllipsis = GGS_bool (false) ;
      } break ;
    case 3 : {
      var_cas_prefix = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (437)) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
      { bool syntaxRepeat_10 = true ;
        while (syntaxRepeat_10) {
          switch (select_semanticInstructionsSyntax_10 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              var_cas_mElementList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (442)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (442))) ;
              } break ;
            case 3 : {
              GGS_luint  var_cas_count ;
              inLexique.assignFromAttribute_uint_33__32_value (var_cas_count) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_n = var_cas_count.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (447)) ;
              const GGS_bool cond_16960 = (var_cas_n).operator_isEqual (GGS_uint (0U)) ;
              if (cond_16960.isBuiltAndTrue ()) {
                var_cas_count.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this value should be > 0") COMMA_SOURCE_FILE_AT_LINE (450)) ;
              }
              GGS_uint _variant_17104 = var_cas_n ;
              GGS_bool _condition_17104 (_variant_17104.isBuilt (), true) ;
              while (_condition_17104.isBuiltAndTrue ()) {
                _condition_17104 = (var_cas_n).operator_strictSup (GGS_uint (0U)) ;
                if (_condition_17104.isBuiltAndTrue ()) {
                  if (_variant_17104.uintValue () == 0) {
                    inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (455)) ;
                    _condition_17104 = GGS_bool (false) ;
                  }else{
                    _variant_17104.decrement_operation (inLexique COMMA_HERE) ;
                    var_cas_mElementList.addAssign_operation (GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (453)), GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (453))) ;
                    var_cas_n.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (454)) ;
                  }
                }
              }
              } break ;
            case 4 : {
              GGS_lstring  var_cas_typeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              var_cas_mElementList.addAssign_operation (var_cas_typeName, var_cas_constantName) ;
              } break ;
            default :
              syntaxRepeat_10 = false ;
              break ;
          }
        }
      }
      switch (select_semanticInstructionsSyntax_11 (inLexique)) {
        case 1 : {
          var_cas_mEndsWithEllipsis = GGS_bool (false) ;
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
          var_cas_mEndsWithEllipsis = GGS_bool (true) ;
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioForeachInstructionEnumeratedObjectList.addAssign_operation (var_cas_ascending, var_cas_mEnumeratedExpression, var_cas_endOfEnumerationExpression, var_cas_mElementList, GGS_location (inLexique), var_cas_mEndsWithEllipsis, var_cas_prefix) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i14_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_foreach) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_foreachInstructionEnumeratedObjectListAST  var_cas_mEnumeratedObjectList = GGS_foreachInstructionEnumeratedObjectListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        nt_foreach_5F_enumerated_5F_object_ (inLexique, var_cas_mEnumeratedObjectList) ;
      switch (select_semanticInstructionsSyntax_12 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_mIndexVariableName ;
  switch (select_semanticInstructionsSyntax_13 (inLexique)) {
    case 1 : {
      var_cas_mIndexVariableName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (495)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_index) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_mIndexVariableName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_semanticExpressionAST  var_cas_mWhileExpression ;
  switch (select_semanticInstructionsSyntax_14 (inLexique)) {
    case 1 : {
      var_cas_mWhileExpression = GGS_trueExpressionAST ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (502)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
      nt_expression_ (inLexique, var_cas_mWhileExpression) ;
      } break ;
    default :
      break ;
  }
  GGS_semanticInstructionListAST  var_cas_mBeforeInstructionList ;
  switch (select_semanticInstructionsSyntax_15 (inLexique)) {
    case 1 : {
      var_cas_mBeforeInstructionList = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_before) COMMA_HERE) ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mBeforeInstructionList) ;
      } break ;
    default :
      break ;
  }
  const GGS_location  var_cas_endof_before_branch = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mDoInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mDoInstructionList) ;
  const GGS_location  var_cas_endof_do_branch = GGS_location (inLexique) ;
  GGS_semanticInstructionListAST  var_cas_mBetweenInstructionList ;
  switch (select_semanticInstructionsSyntax_16 (inLexique)) {
    case 1 : {
      var_cas_mBetweenInstructionList = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_between) COMMA_HERE) ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mBetweenInstructionList) ;
      } break ;
    default :
      break ;
  }
  const GGS_location  var_cas_endof_between_branch = GGS_location (inLexique) ;
  GGS_semanticInstructionListAST  var_cas_mAfterInstructionList ;
  switch (select_semanticInstructionsSyntax_17 (inLexique)) {
    case 1 : {
      var_cas_mAfterInstructionList = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_after) COMMA_HERE) ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mAfterInstructionList) ;
      } break ;
    default :
      break ;
  }
  const GGS_location  var_cas_endof_after_branch = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endof_foreach_instruction = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_foreach) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_foreachInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mEnumeratedObjectList, var_cas_mIndexVariableName, var_cas_mWhileExpression, var_cas_mBeforeInstructionList, var_cas_endof_before_branch, var_cas_mBetweenInstructionList, var_cas_endof_between_branch, var_cas_mDoInstructionList, var_cas_endof_do_branch, var_cas_mAfterInstructionList, var_cas_endof_after_branch, var_cas_endof_foreach_instruction COMMA_SOURCE_FILE_AT_LINE (539)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i15_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_send) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_expression ;
  nt_expression_ (inLexique, var_cas_expression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_sendInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (568)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'if_branch'                *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_if_5F_branch_i16_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_if_expression ;
  nt_expression_ (inLexique, var_cas_if_expression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_then) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_then_instructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_then_instructionList) ;
  const GGS_location  var_cas_endOf_then_branchLocation = GGS_location (inLexique) ;
  GGS_semanticInstructionListAST  var_cas_else_instructionList ;
  switch (select_semanticInstructionsSyntax_18 (inLexique)) {
    case 1 : {
      var_cas_else_instructionList = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_else_instructionList) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_elsif) COMMA_HERE) ;
      GGS_semanticInstructionAST  var_cas_instruction ;
      nt_if_5F_branch_ (inLexique, var_cas_instruction) ;
      var_cas_else_instructionList = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      var_cas_else_instructionList.addAssign_operation (var_cas_instruction) ;
      } break ;
    default :
      break ;
  }
  var_cas_outInstruction = GGS_ifInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_if_expression, var_cas_then_instructionList, var_cas_endOf_then_branchLocation, var_cas_else_instructionList, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (605)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i17_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
  nt_if_5F_branch_ (inLexique, var_cas_outInstruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_if) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i18_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_mReceiverExpression ;
  nt_expression_ (inLexique, var_cas_mReceiverExpression) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_methodCallInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mReceiverExpression, var_cas_mMethodName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (641)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i19_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_this) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_thisMethodCallInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mMethodName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (664)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i20_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_super) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_superMethodCallInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mMethodName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (686)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i21_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
  GGS_lstring  var_cas_mReceiverName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReceiverName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mReceiverStructAttributes = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
      switch (select_semanticInstructionsSyntax_19 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_structAttribute ;
          inLexique.assignFromAttribute_tokenString (var_cas_structAttribute) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_mReceiverStructAttributes.addAssign_operation (var_cas_structAttribute) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_mModifierName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mModifierName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_modifierCallInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mReceiverName, var_cas_mReceiverStructAttributes, var_cas_mModifierName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (716)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i22_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_this) COMMA_HERE) ;
  GGS_lstring  var_cas_mModifierName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mModifierName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_thisModifierCallInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mModifierName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (741)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i23_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_super) COMMA_HERE) ;
  GGS_lstring  var_cas_mModifierName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mModifierName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_superModifierCallInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mModifierName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (764)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i24_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_mReceiverExpression ;
  nt_expression_ (inLexique, var_cas_mReceiverExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_mErrorExpression ;
  nt_expression_ (inLexique, var_cas_mErrorExpression) ;
  GGS_lstringlist  var_cas_mBuiltVariableList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_semanticInstructionsSyntax_20 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
      { bool syntaxRepeat_21 = true ;
        while (syntaxRepeat_21) {
            GGS_lstring  var_cas_builtVariableName ;
            inLexique.assignFromAttribute_tokenString (var_cas_builtVariableName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_mBuiltVariableList.addAssign_operation (var_cas_builtVariableName) ;
          switch (select_semanticInstructionsSyntax_21 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_21 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_errorInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mReceiverExpression, var_cas_mErrorExpression, var_cas_mBuiltVariableList COMMA_SOURCE_FILE_AT_LINE (798)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i25_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_warning) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_mReceiverExpression ;
  nt_expression_ (inLexique, var_cas_mReceiverExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_mWarningExpression ;
  nt_expression_ (inLexique, var_cas_mWarningExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_warningInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mReceiverExpression, var_cas_mWarningExpression COMMA_SOURCE_FILE_AT_LINE (821)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i26_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mRoutineName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mRoutineName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_routineCallInstructionAST ::constructor_new (inLexique, var_cas_mRoutineName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (840)), var_cas_mRoutineName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (839)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i27_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
  GGS_lstring  var_cas_mTargetObjectName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mTargetObjectName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_22 = true ;
    while (syntaxRepeat_22) {
      switch (select_semanticInstructionsSyntax_22 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_mStructFieldName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mStructFieldName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_structAttributeList.addAssign_operation (var_cas_mStructFieldName) ;
          } break ;
        default :
          syntaxRepeat_22 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_mSearchMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mSearchMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_mKeyExpression ;
  nt_expression_ (inLexique, var_cas_mKeyExpression) ;
  GGS_lstring  var_cas_withPrefix ;
  switch (select_semanticInstructionsSyntax_23 (inLexique)) {
    case 1 : {
      var_cas_withPrefix = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (870)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_prefixedby) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_withPrefix) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mDoBranchInstructions ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mDoBranchInstructions) ;
  const GGS_location  var_cas_endOf_do_instructions = GGS_location (inLexique) ;
  GGS_semanticInstructionListAST  var_cas_mElseBranchInstructions ;
  switch (select_semanticInstructionsSyntax_24 (inLexique)) {
    case 1 : {
      var_cas_mElseBranchInstructions = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mElseBranchInstructions) ;
      } break ;
    default :
      break ;
  }
  const GGS_location  var_cas_endOf_else_instructions = GGS_location (inLexique) ;
  var_cas_outInstruction = GGS_readWriteAccessWithInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_withPrefix, var_cas_mTargetObjectName, var_cas_structAttributeList, var_cas_mSearchMethodName, var_cas_mKeyExpression, var_cas_mDoBranchInstructions, var_cas_endOf_do_instructions, var_cas_mElseBranchInstructions, var_cas_endOf_else_instructions COMMA_SOURCE_FILE_AT_LINE (887)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i28_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_receiverExpression ;
  nt_expression_ (inLexique, var_cas_receiverExpression) ;
  GGS_lstring  var_cas_mSearchMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mSearchMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_mKeyExpression ;
  nt_expression_ (inLexique, var_cas_mKeyExpression) ;
  GGS_lstring  var_cas_withPrefix ;
  switch (select_semanticInstructionsSyntax_25 (inLexique)) {
    case 1 : {
      var_cas_withPrefix = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (917)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_prefixedby) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_withPrefix) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mDoBranchInstructions ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mDoBranchInstructions) ;
  GGS_semanticInstructionListAST  var_cas_mElseBranchInstructions ;
  switch (select_semanticInstructionsSyntax_26 (inLexique)) {
    case 1 : {
      var_cas_mElseBranchInstructions = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mElseBranchInstructions) ;
      } break ;
    default :
      break ;
  }
  var_cas_outInstruction = GGS_readAccessWithInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_withPrefix, var_cas_receiverExpression, var_cas_mSearchMethodName, var_cas_mKeyExpression, var_cas_mDoBranchInstructions, var_cas_mElseBranchInstructions COMMA_SOURCE_FILE_AT_LINE (932)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'match_entry'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_match_5F_entry_i29_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_matchEntryListAST  &var_cas_ioMatchEntryList) {
  GGS_lstring  var_cas_enumerationConstantName ;
  inLexique.assignFromAttribute_tokenString (var_cas_enumerationConstantName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  var_cas_ioMatchEntryList.addAssign_operation (GGS_bool (false), var_cas_enumerationConstantName, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (961))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'match_entry'               *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_match_5F_entry_i30_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_matchEntryListAST  &var_cas_ioMatchEntryList) {
  GGS_lstring  var_cas_className ;
  inLexique.assignFromAttribute_tokenString (var_cas_className) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_localConstant ;
  switch (select_semanticInstructionsSyntax_27 (inLexique)) {
    case 1 : {
      var_cas_localConstant = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (971)) ;
      } break ;
    case 2 : {
      inLexique.assignFromAttribute_tokenString (var_cas_localConstant) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  switch (select_semanticInstructionsSyntax_28 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
      { bool syntaxRepeat_29 = true ;
        while (syntaxRepeat_29) {
          switch (select_semanticInstructionsSyntax_29 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_29 = false ;
              break ;
          }
        }
      }
      switch (select_semanticInstructionsSyntax_30 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
          } break ;
        default :
          break ;
      }
      const GGS_bool cond_34863 = (gOption_galgas_5F_cli_5F_options_legacyCodeGeneration.reader_value ()).operator_not () ;
      if (cond_34863.isBuiltAndTrue ()) {
        GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("old style 'match' instruction") COMMA_SOURCE_FILE_AT_LINE (993)) ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  var_cas_ioMatchEntryList.addAssign_operation (GGS_bool (true), var_cas_className, var_cas_localConstant) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'match_instruction_branch'        *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_match_5F_instruction_5F_branch_i31_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_matchInstructionBranchListAST  &var_cas_ioMatchInstructionBranchList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
  GGS_matchEntryListAST  var_cas_mMatchEntryList = GGS_matchEntryListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_31 = true ;
    while (syntaxRepeat_31) {
        nt_match_5F_entry_ (inLexique, var_cas_mMatchEntryList) ;
      switch (select_semanticInstructionsSyntax_31 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A__3A_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_31 = false ;
          break ;
      }
    }
  }
  const GGS_location  var_cas_endOfMatchEntryList = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mMatchBranchInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mMatchBranchInstructionList) ;
  var_cas_ioMatchInstructionBranchList.addAssign_operation (var_cas_mMatchEntryList, var_cas_endOfMatchEntryList, var_cas_mMatchBranchInstructionList, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i32_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_match) COMMA_HERE) ;
  GGS_semanticExpressionListAST  var_cas_matchedExpressionNameList = GGS_semanticExpressionListAST ::constructor_emptyList () ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_receiverExpression ;
  nt_expression_ (inLexique, var_cas_receiverExpression) ;
  var_cas_matchedExpressionNameList.addAssign_operation (var_cas_receiverExpression, GGS_location (inLexique)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_32 = true ;
    while (syntaxRepeat_32) {
        GGS_semanticExpressionAST  var_cas_receiverExpression ;
        nt_expression_ (inLexique, var_cas_receiverExpression) ;
        var_cas_matchedExpressionNameList.addAssign_operation (var_cas_receiverExpression, GGS_location (inLexique)) ;
      switch (select_semanticInstructionsSyntax_32 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A__3A_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_32 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_matchInstructionBranchListAST  var_cas_matchInstructionBranchList = GGS_matchInstructionBranchListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_33 = true ;
    while (syntaxRepeat_33) {
        nt_match_5F_instruction_5F_branch_ (inLexique, var_cas_matchInstructionBranchList) ;
      switch (select_semanticInstructionsSyntax_33 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_33 = false ;
          break ;
      }
    }
  }
  GGS_semanticInstructionListAST  var_cas_elseInstructionList ;
  switch (select_semanticInstructionsSyntax_34 (inLexique)) {
    case 1 : {
      var_cas_elseInstructionList = GGS_semanticInstructionListAST ::constructor_emptyList () ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
      nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_elseInstructionList) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_match) COMMA_HERE) ;
  const GGS_location  var_cas_endOf_match_instruction = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_matchInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_matchedExpressionNameList, var_cas_matchInstructionBranchList, var_cas_elseInstructionList, var_cas_endOf_match_instruction COMMA_SOURCE_FILE_AT_LINE (1064)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'cast_instruction_branch'         *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_cast_5F_instruction_5F_branch_i33_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_castInstructionBranchListAST  &var_cas_ioCastInstructionBranchList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
  GGS_bool var_cas_mUseKindOfClass ;
  switch (select_semanticInstructionsSyntax_35 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3E__3D_) COMMA_HERE) ;
      var_cas_mUseKindOfClass = GGS_bool (true) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3D__3D_) COMMA_HERE) ;
      var_cas_mUseKindOfClass = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_mTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mConstantVarName ;
  GGS_bool var_cas_mConstantVarNameIsUnused ;
  switch (select_semanticInstructionsSyntax_36 (inLexique)) {
    case 1 : {
      inLexique.assignFromAttribute_tokenString (var_cas_mConstantVarName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_mConstantVarNameIsUnused = GGS_bool (false) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_mConstantVarName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_mConstantVarNameIsUnused = GGS_bool (true) ;
      } break ;
    case 3 : {
      var_cas_mConstantVarName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      var_cas_mConstantVarNameIsUnused = GGS_bool (true) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mCastBranchInstructionList ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mCastBranchInstructionList) ;
  var_cas_ioCastInstructionBranchList.addAssign_operation (var_cas_mUseKindOfClass, var_cas_mTypeName, var_cas_mConstantVarName, var_cas_mConstantVarNameIsUnused, var_cas_mCastBranchInstructionList, GGS_location (inLexique)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'cast_else_or_default'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_cast_5F_else_5F_or_5F_default_i34_ (C_Lexique_galgas_5F_scanner & /* inLexique */,
                                GGS_semanticInstructionListAST  &var_cas_outElseOrDefault) {
  var_cas_outElseOrDefault = GGS_semanticInstructionListAST ::constructor_emptyList () ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'cast_else_or_default'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_cast_5F_else_5F_or_5F_default_i35_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionListAST  &var_cas_outElseOrDefault) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_else) COMMA_HERE) ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_outElseOrDefault) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'cast_else_or_default'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_cast_5F_else_5F_or_5F_default_i36_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionListAST  &var_cas_outElseOrDefault) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_errorLocationExpression ;
  nt_expression_ (inLexique, var_cas_errorLocationExpression) ;
  var_cas_outElseOrDefault = GGS_semanticInstructionListAST ::constructor_emptyList () ;
  var_cas_outElseOrDefault.addAssign_operation (GGS_errorInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_errorLocationExpression, GGS_literalStringExpressionAST ::constructor_new (inLexique, var_cas_instructionLocation, GGS_stringlist ::constructor_listWithValue (GGS_string ("cast instruction run-time error")) COMMA_SOURCE_FILE_AT_LINE (1151)), GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (1148))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i37_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_cast) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_mExpression ;
  nt_expression_ (inLexique, var_cas_mExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_castInstructionBranchListAST  var_cas_mCastInstructionBranchList = GGS_castInstructionBranchListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_37 = true ;
    while (syntaxRepeat_37) {
        nt_cast_5F_instruction_5F_branch_ (inLexique, var_cas_mCastInstructionBranchList) ;
      switch (select_semanticInstructionsSyntax_37 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_37 = false ;
          break ;
      }
    }
  }
  GGS_semanticInstructionListAST  var_cas_mElseOrDefault ;
  nt_cast_5F_else_5F_or_5F_default_ (inLexique, var_cas_mElseOrDefault) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_endOfInstructionLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_cast) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_structuredCastInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mExpression, var_cas_mCastInstructionBranchList, var_cas_mElseOrDefault, var_cas_endOfInstructionLocation COMMA_SOURCE_FILE_AT_LINE (1178)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i38_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mReceiverName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mReceiverName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_lstringlist  var_cas_mStructAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_38 = true ;
    while (syntaxRepeat_38) {
      switch (select_semanticInstructionsSyntax_38 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_mStructAttributeList.addAssign_operation (var_cas_attributeName) ;
          } break ;
        default :
          syntaxRepeat_38 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2B__3D_) COMMA_HERE) ;
  GGS_semanticExpressionListAST  var_cas_mExpressionList ;
  nt_output_5F_expression_5F_list_ (inLexique, var_cas_mExpressionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_addInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mReceiverName, var_cas_mStructAttributeList, var_cas_mExpressionList COMMA_SOURCE_FILE_AT_LINE (1208)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i39_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_mTargetVariableName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mTargetVariableName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_mStructAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_39 = true ;
    while (syntaxRepeat_39) {
      switch (select_semanticInstructionsSyntax_39 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_mStructAttributeList.addAssign_operation (var_cas_attributeName) ;
          } break ;
        default :
          syntaxRepeat_39 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__3D_) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_mSourceExpression ;
  nt_expression_ (inLexique, var_cas_mSourceExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_appendInstructionAST ::constructor_new (inLexique, var_cas_mTargetVariableName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1236)), var_cas_mTargetVariableName, var_cas_mStructAttributeList, var_cas_mSourceExpression COMMA_SOURCE_FILE_AT_LINE (1235)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i40_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_loop) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_mVariantExpression ;
  nt_expression_ (inLexique, var_cas_mVariantExpression) ;
  const GGS_location  var_cas_mEndOfVariantExpression = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mFirstInstructions ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mFirstInstructions) ;
  const GGS_location  var_cas_mEndOfFirstInstructions = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
  GGS_semanticExpressionAST  var_cas_mLoopExpression ;
  nt_expression_ (inLexique, var_cas_mLoopExpression) ;
  const GGS_location  var_cas_mEndOfLoopExpression = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_do) COMMA_HERE) ;
  GGS_semanticInstructionListAST  var_cas_mSecondInstructions ;
  nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_mSecondInstructions) ;
  const GGS_location  var_cas_mEndOfSecondInstructions = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  const GGS_location  var_cas_mEndOfLoopInstruction = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_loop) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_loopInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mVariantExpression, var_cas_mEndOfVariantExpression, var_cas_mFirstInstructions, var_cas_mEndOfFirstInstructions, var_cas_mLoopExpression, var_cas_mEndOfLoopExpression, var_cas_mSecondInstructions, var_cas_mEndOfSecondInstructions, var_cas_mEndOfLoopInstruction COMMA_SOURCE_FILE_AT_LINE (1271)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i41_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_mExpression ;
  nt_expression_ (inLexique, var_cas_mExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_messageInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mExpression COMMA_SOURCE_FILE_AT_LINE (1297)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i42_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_log) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_logListAST  var_cas_logList = GGS_logListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_40 = true ;
    while (syntaxRepeat_40) {
        switch (select_semanticInstructionsSyntax_41 (inLexique)) {
          case 1 : {
            GGS_lstring  var_cas_loggedVariableName ;
            inLexique.assignFromAttribute_tokenString (var_cas_loggedVariableName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_logList.addAssign_operation (var_cas_loggedVariableName, GGS_varInExpressionAST ::constructor_new (inLexique, var_cas_loggedVariableName, GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (1316))) ;
            } break ;
          case 2 : {
            GGS_lstring  var_cas_logMessage ;
            inLexique.assignFromAttribute_tokenString (var_cas_logMessage) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
            GGS_semanticExpressionAST  var_cas_logExpression ;
            nt_expression_ (inLexique, var_cas_logExpression) ;
            var_cas_logList.addAssign_operation (var_cas_logMessage, var_cas_logExpression) ;
            } break ;
          default :
            break ;
        }
      switch (select_semanticInstructionsSyntax_40 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_40 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_logInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_logList COMMA_SOURCE_FILE_AT_LINE (1328)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i43_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_lstring  var_cas_mGrammarComponentName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mGrammarComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_mLabelName ;
  switch (select_semanticInstructionsSyntax_42 (inLexique)) {
    case 1 : {
      var_cas_mLabelName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1347)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_mLabelName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_bool var_cas_sourceExpressionIsFile ;
  switch (select_semanticInstructionsSyntax_43 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
      var_cas_sourceExpressionIsFile = GGS_bool (true) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_on) COMMA_HERE) ;
      var_cas_sourceExpressionIsFile = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  GGS_semanticExpressionAST  var_cas_mSourceExpression ;
  nt_expression_ (inLexique, var_cas_mSourceExpression) ;
  const GGS_location  var_cas_endOfSourceExpression = GGS_location (inLexique) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  switch (select_semanticInstructionsSyntax_44 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_dependency) COMMA_HERE) ;
      GGS_semanticExpressionAST  automatic_var_47316_0 ;
      nt_expression_ (inLexique, automatic_var_47316_0) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
      GGS_semanticExpressionAST  automatic_var_47350_0 ;
      nt_expression_ (inLexique, automatic_var_47350_0) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_grammarInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mGrammarComponentName, var_cas_mLabelName, var_cas_mSourceExpression, var_cas_endOfSourceExpression, var_cas_sourceExpressionIsFile, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (1372)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i44_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_switch) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_semanticExpressionAST  var_cas_switchExpression ;
  nt_expression_ (inLexique, var_cas_switchExpression) ;
  const GGS_location  var_cas_endOfSwitchExpression = GGS_location (inLexique) ;
  GGS_switchBranchesAST  var_cas_switchBranches = GGS_switchBranchesAST ::constructor_emptyList () ;
  { bool syntaxRepeat_45 = true ;
    while (syntaxRepeat_45) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
        GGS_lstringlist  var_cas_constantNameList = GGS_lstringlist ::constructor_emptyList () ;
        { bool syntaxRepeat_46 = true ;
          while (syntaxRepeat_46) {
              GGS_lstring  var_cas_constantName ;
              inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              var_cas_constantNameList.addAssign_operation (var_cas_constantName) ;
            switch (select_semanticInstructionsSyntax_46 (inLexique)) {
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                } break ;
              default :
                syntaxRepeat_46 = false ;
                break ;
            }
          }
        }
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
        GGS_semanticInstructionListAST  var_cas_instructions ;
        nt_semantic_5F_instruction_5F_list_ (inLexique, var_cas_instructions) ;
        var_cas_switchBranches.addAssign_operation (var_cas_constantNameList, var_cas_instructions, GGS_location (inLexique)) ;
      switch (select_semanticInstructionsSyntax_45 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_45 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_switch) COMMA_HERE) ;
  const GGS_location  var_cas_endOfSwitchInstruction = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_switchInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_switchExpression, var_cas_endOfSwitchExpression, var_cas_switchBranches, var_cas_endOfSwitchInstruction COMMA_SOURCE_FILE_AT_LINE (1415)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'semantic_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void semanticInstructionsSyntax::rule_semanticInstructionsSyntax_semantic_5F_instruction_i45_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_semanticInstructionAST  &var_cas_outInstruction) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5B_) COMMA_HERE) ;
  const GGS_location  var_cas_instructionLocation = GGS_location (inLexique) ;
  GGS_lstring  var_cas_mTypeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mTypeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_mMethodName ;
  inLexique.assignFromAttribute_tokenString (var_cas_mMethodName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_actualParameterListAST  var_cas_mActualParameterList ;
  nt_actual_5F_parameter_5F_list_ (inLexique, var_cas_mActualParameterList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__5D_) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outInstruction = GGS_typeMethodCallInstructionAST ::constructor_new (inLexique, var_cas_instructionLocation, var_cas_mTypeName, var_cas_mMethodName, var_cas_mActualParameterList COMMA_SOURCE_FILE_AT_LINE (1439)) ;
}

//---------------------------------------------------------------------------*

