//---------------------------------------------------------------------------*
//                                                                           *
//                         File 'lexiqueSyntax.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 17th, 2010, at 19h44'2"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "lexiqueSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "lexiqueSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'lexique_component_start_symbol'     *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexique_5F_component_5F_start_5F_symbol_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexiqueComponentAST  &var_cas_outLexiqueComponentRoot) {
  GGS_lstring  var_cas_lexiqueComponentName ;
  GGS_bool var_cas_isTemplate ;
  GGS_metamodelTemplateDelimitorListAST  var_cas_templateDelimitorList = GGS_metamodelTemplateDelimitorListAST ::constructor_emptyList () ;
  GGS_templateReplacementListAST  var_cas_templateReplacementList = GGS_templateReplacementListAST ::constructor_emptyList () ;
  GGS_lexicalAttributeListAST  var_cas_lexicalAttributeList = GGS_lexicalAttributeListAST ::constructor_emptyList () ;
  GGS_lexicalStyleListAST  var_cas_lexicalStyleList = GGS_lexicalStyleListAST ::constructor_emptyList () ;
  GGS_terminalDeclarationListAST  var_cas_terminalDeclarationList = GGS_terminalDeclarationListAST ::constructor_emptyList () ;
  GGS_lexicalMessageDeclarationListAST  var_cas_lexicalMessageDeclarationList = GGS_lexicalMessageDeclarationListAST ::constructor_emptyList () ;
  GGS_lexicalListDeclarationListAST  var_cas_lexicalListDeclarationList = GGS_lexicalListDeclarationListAST ::constructor_emptyList () ;
  GGS_lexicalRuleListAST  var_cas_lexicalRuleList = GGS_lexicalRuleListAST ::constructor_emptyList () ;
  GGS_externRoutineListAST  var_cas_externRoutineList = GGS_externRoutineListAST ::constructor_emptyList () ;
  GGS_externFunctionListAST  var_cas_externFunctionList = GGS_externFunctionListAST ::constructor_emptyList () ;
  switch (select_lexiqueSyntax_0 (inLexique)) {
    case 1 : {
      var_cas_isTemplate = GGS_bool (true) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
      } break ;
    case 2 : {
      var_cas_isTemplate = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_lexiqueComponentName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_lexiqueSyntax_1 (inLexique)) {
        case 2 : {
          nt_extern_5F_routine_5F_or_5F_function_5F_declaration_ (inLexique, var_cas_externRoutineList, var_cas_externFunctionList) ;
          } break ;
        case 3 : {
          nt_template_5F_delimitor_ (inLexique, var_cas_templateDelimitorList) ;
          } break ;
        case 4 : {
          nt_template_5F_replacement_ (inLexique, var_cas_templateReplacementList) ;
          } break ;
        case 5 : {
          nt_lexical_5F_attribute_5F_declaration_ (inLexique, var_cas_lexicalAttributeList) ;
          } break ;
        case 6 : {
          nt_style_5F_declaration_ (inLexique, var_cas_lexicalStyleList) ;
          } break ;
        case 7 : {
          nt_terminal_5F_declaration_ (inLexique, var_cas_terminalDeclarationList) ;
          } break ;
        case 8 : {
          nt_lexical_5F_list_5F_declaration_ (inLexique, var_cas_lexicalListDeclarationList) ;
          } break ;
        case 9 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
          switch (select_lexiqueSyntax_2 (inLexique)) {
            case 1 : {
              nt_lexical_5F_explicit_5F_rule_ (inLexique, var_cas_lexicalRuleList) ;
              } break ;
            case 2 : {
              nt_lexical_5F_implicit_5F_rule_ (inLexique, var_cas_lexicalRuleList) ;
              } break ;
            default :
              break ;
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        case 10 : {
          nt_lexical_5F_message_5F_declaration_ (inLexique, var_cas_lexicalMessageDeclarationList) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_lexique) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_outLexiqueComponentRoot = GGS_lexiqueComponentAST ::constructor_new (inLexique, var_cas_lexiqueComponentName, var_cas_isTemplate, var_cas_templateDelimitorList, var_cas_templateReplacementList, var_cas_lexicalAttributeList, var_cas_lexicalStyleList, var_cas_terminalDeclarationList, var_cas_lexicalMessageDeclarationList, var_cas_lexicalListDeclarationList, var_cas_lexicalRuleList, var_cas_externRoutineList, var_cas_externFunctionList COMMA_SOURCE_FILE_AT_LINE (126)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'template_delimitor'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_template_5F_delimitor_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_metamodelTemplateDelimitorListAST  &var_cas_ioTemplateDelimitorList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_template) COMMA_HERE) ;
  GGS_lstring  var_cas_startString ;
  inLexique.assignFromAttribute_tokenString (var_cas_startString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstringlist  var_cas_optionList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_lexiqueSyntax_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
      { bool syntaxRepeat_4 = true ;
        while (syntaxRepeat_4) {
            GGS_lstring  var_cas_optionName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_optionList.addAssign_operation (var_cas_optionName) ;
          switch (select_lexiqueSyntax_4 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_4 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
  GGS_lstring  var_cas_endString ;
  inLexique.assignFromAttribute_tokenString (var_cas_endString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioTemplateDelimitorList.addAssign_operation (var_cas_startString, var_cas_optionList, var_cas_endString) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_replacement'          *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_template_5F_replacement_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_templateReplacementListAST  &var_cas_ioTemplateReplacement) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_replace) COMMA_HERE) ;
  GGS_lstring  var_cas_matchString ;
  inLexique.assignFromAttribute_tokenString (var_cas_matchString) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstring  var_cas_replacementString ;
  GGS_lstring  var_cas_replacementFunction ;
  switch (select_lexiqueSyntax_5 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2E__2E__2E_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_replacementString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_replacementFunction) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_replacementString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
      var_cas_replacementFunction = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (181)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioTemplateReplacement.addAssign_operation (var_cas_matchString, var_cas_replacementString, var_cas_replacementFunction) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'lexical_message_declaration'       *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_message_5F_declaration_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalMessageDeclarationListAST  &var_cas_ioLexicalMessageDeclarationList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  GGS_lstring  var_cas_messageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_messageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lstring  var_cas_messageValue ;
  inLexique.assignFromAttribute_tokenString (var_cas_messageValue) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioLexicalMessageDeclarationList.addAssign_operation (var_cas_messageName, var_cas_messageValue) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_implicit_rule'          *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_implicit_5F_rule_i4_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalRuleListAST  &var_cas_ioLexicalImplicitRuleList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  GGS_lstring  var_cas_listName ;
  inLexique.assignFromAttribute_tokenString (var_cas_listName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  var_cas_ioLexicalImplicitRuleList.addAssign_operation (GGS_lexicalImplicitRuleAST ::constructor_new (inLexique, var_cas_listName COMMA_SOURCE_FILE_AT_LINE (208))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'lexical_explicit_rule'          *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_explicit_5F_rule_i5_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalRuleListAST  &var_cas_ioLexicalExplicitRuleList) {
  GGS_lexicalExpressionAST  var_cas_lexicalRuleExpression ;
  nt_lexical_5F_expression_ (inLexique, var_cas_lexicalRuleExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lexicalInstructionListAST  var_cas_instructionList = GGS_lexicalInstructionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_lexiqueSyntax_6 (inLexique)) {
        case 2 : {
          nt_lexical_5F_instruction_ (inLexique, var_cas_instructionList) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rule) COMMA_HERE) ;
  var_cas_ioLexicalExplicitRuleList.addAssign_operation (GGS_lexicalExplicitRuleAST ::constructor_new (inLexique, var_cas_lexicalRuleExpression, var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (224))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i6_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_send) COMMA_HERE) ;
  GGS_lexicalInstructionAST  var_cas_instruction ;
  nt_lexical_5F_send_5F_instruction_ (inLexique, var_cas_instruction) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_instruction) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_send_5F_instruction_i7_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionAST  &var_cas_outInstruction) {
  GGS_lstring  var_cas_sentTerminal ;
  inLexique.assignFromAttribute_tokenString (var_cas_sentTerminal) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  var_cas_outInstruction = GGS_lexicalSimpleSendInstructionAST ::constructor_new (inLexique, var_cas_sentTerminal COMMA_SOURCE_FILE_AT_LINE (242)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_send_instruction'        *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_send_5F_instruction_i8_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionAST  &var_cas_outInstruction) {
  GGS_lexicalSendSearchListAST  var_cas_lexicalSendSearchList = GGS_lexicalSendSearchListAST ::constructor_emptyList () ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
        GGS_lstring  var_cas_attributeName ;
        inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
        GGS_lstring  var_cas_searchListName ;
        inLexique.assignFromAttribute_tokenString (var_cas_searchListName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
        var_cas_lexicalSendSearchList.addAssign_operation (var_cas_attributeName, var_cas_searchListName) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
      switch (select_lexiqueSyntax_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_search) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  GGS_lexicalSendDefaultActionAST  var_cas_lexicalSendDefaultAction ;
  switch (select_lexiqueSyntax_8 (inLexique)) {
    case 1 : {
      GGS_lstring  var_cas_defaultSentTerminal ;
      inLexique.assignFromAttribute_tokenString (var_cas_defaultSentTerminal) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
      var_cas_lexicalSendDefaultAction = GGS_lexicalSendTerminalByDefaultAST ::constructor_new (inLexique, var_cas_defaultSentTerminal COMMA_SOURCE_FILE_AT_LINE (265)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
      GGS_lstring  var_cas_defaultErrorMessageName ;
      inLexique.assignFromAttribute_tokenString (var_cas_defaultErrorMessageName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_lexicalSendDefaultAction = GGS_lexicalErrorByDefaultAST ::constructor_new (inLexique, var_cas_defaultErrorMessageName COMMA_SOURCE_FILE_AT_LINE (270)) ;
      } break ;
    default :
      break ;
  }
  var_cas_outInstruction = GGS_lexicalStructuredSendInstructionAST ::constructor_new (inLexique, var_cas_lexicalSendSearchList, var_cas_lexicalSendDefaultAction COMMA_SOURCE_FILE_AT_LINE (272)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i9_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  GGS_lexicalInstructionListAST  var_cas_repeatedInstructionList = GGS_lexicalInstructionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_lexiqueSyntax_9 (inLexique)) {
        case 2 : {
          nt_lexical_5F_instruction_ (inLexique, var_cas_repeatedInstructionList) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
  GGS_lexicalWhileBranchListAST  var_cas_lexicalWhileBranchList = GGS_lexicalWhileBranchListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
        nt_repeat_5F_while_5F_branch_ (inLexique, var_cas_lexicalWhileBranchList) ;
      switch (select_lexiqueSyntax_10 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_repeat) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lexicalInstructionAST  var_cas_i = GGS_lexicalRepeatInstructionAST ::constructor_new (inLexique, var_cas_repeatedInstructionList, var_cas_lexicalWhileBranchList COMMA_SOURCE_FILE_AT_LINE (295)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'repeat_while_branch'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_repeat_5F_while_5F_branch_i10_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalWhileBranchListAST  &var_cas_ioLexicalWhileBranchList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_while) COMMA_HERE) ;
  GGS_lexicalExpressionAST  var_cas_whileExpression ;
  nt_lexical_5F_expression_ (inLexique, var_cas_whileExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lexicalInstructionListAST  var_cas_whileInstructionList = GGS_lexicalInstructionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_11 = true ;
    while (syntaxRepeat_11) {
      switch (select_lexiqueSyntax_11 (inLexique)) {
        case 2 : {
          nt_lexical_5F_instruction_ (inLexique, var_cas_whileInstructionList) ;
          } break ;
        default :
          syntaxRepeat_11 = false ;
          break ;
      }
    }
  }
  var_cas_ioLexicalWhileBranchList.addAssign_operation (var_cas_whileExpression, var_cas_whileInstructionList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i11_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  GGS_lexicalSelectBranchListAST  var_cas_lexicalWhileBranchList = GGS_lexicalSelectBranchListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_12 = true ;
    while (syntaxRepeat_12) {
        GGS_lexicalExpressionAST  var_cas_selectExpression ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_when) COMMA_HERE) ;
        nt_lexical_5F_expression_ (inLexique, var_cas_selectExpression) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
        GGS_lexicalInstructionListAST  var_cas_selectInstructionList = GGS_lexicalInstructionListAST ::constructor_emptyList () ;
        { bool syntaxRepeat_13 = true ;
          while (syntaxRepeat_13) {
            switch (select_lexiqueSyntax_13 (inLexique)) {
              case 2 : {
                nt_lexical_5F_instruction_ (inLexique, var_cas_selectInstructionList) ;
                } break ;
              default :
                syntaxRepeat_13 = false ;
                break ;
            }
          }
        }
        var_cas_lexicalWhileBranchList.addAssign_operation (var_cas_selectExpression, var_cas_selectInstructionList) ;
      switch (select_lexiqueSyntax_12 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_12 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_default) COMMA_HERE) ;
  GGS_lexicalInstructionListAST  var_cas_defaultInstructionList = GGS_lexicalInstructionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_14 = true ;
    while (syntaxRepeat_14) {
      switch (select_lexiqueSyntax_14 (inLexique)) {
        case 2 : {
          nt_lexical_5F_instruction_ (inLexique, var_cas_defaultInstructionList) ;
          } break ;
        default :
          syntaxRepeat_14 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_select) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lexicalInstructionAST  var_cas_i = GGS_lexicalSelectInstructionAST ::constructor_new (inLexique, var_cas_lexicalWhileBranchList, var_cas_defaultInstructionList COMMA_SOURCE_FILE_AT_LINE (344)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i12_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  GGS_lstring  var_cas_actionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_actionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lexicalRoutineCallActualArgumentListAST  var_cas_actualArgumentList = GGS_lexicalRoutineCallActualArgumentListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_15 = true ;
    while (syntaxRepeat_15) {
      switch (select_lexiqueSyntax_15 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          GGS_location  var_cas_passingModeLocation = GGS_location (inLexique) ;
          GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  var_cas_arg ;
          nt_lexical_5F_output_5F_effective_5F_argument_ (inLexique, var_cas_arg) ;
          var_cas_actualArgumentList.addAssign_operation (GGS_lexicalFormalInputArgumentAST ::constructor_new (inLexique, var_cas_passingModeLocation, var_cas_arg COMMA_SOURCE_FILE_AT_LINE (363))) ;
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
          GGS_location  var_cas_passingModeLocation = GGS_location (inLexique) ;
          GGS_lstring  var_cas_attributeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_attributeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_lexicalAttributeInputOutputArgumentAST  var_cas_arg = GGS_lexicalAttributeInputOutputArgumentAST ::constructor_new (inLexique, var_cas_passingModeLocation, var_cas_attributeName COMMA_SOURCE_FILE_AT_LINE (368)) ;
          var_cas_actualArgumentList.addAssign_operation (var_cas_arg) ;
          } break ;
        default :
          syntaxRepeat_15 = false ;
          break ;
      }
    }
  }
  GGS_lstringlist  var_cas_errorMessageList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_lexiqueSyntax_16 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
      { bool syntaxRepeat_17 = true ;
        while (syntaxRepeat_17) {
            GGS_lstring  var_cas_errorMessageName ;
            inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_errorMessageList.addAssign_operation (var_cas_errorMessageName) ;
          switch (select_lexiqueSyntax_17 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_17 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_lexicalInstructionAST  var_cas_i = GGS_lexicalRoutineInstructionAST ::constructor_new (inLexique, var_cas_actionName, var_cas_actualArgumentList, var_cas_errorMessageList COMMA_SOURCE_FILE_AT_LINE (384)) ;
  var_cas_ioInstructionList.addAssign_operation (var_cas_i) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_output_effective_argument'    *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_output_5F_effective_5F_argument_i13_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  &var_cas_outEffectiveArgument) {
  GGS_lchar  var_cas_character ;
  inLexique.assignFromAttribute_charValue (var_cas_character) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  var_cas_outEffectiveArgument = GGS_lexicalCharacterInputArgumentAST ::constructor_new (inLexique, var_cas_character COMMA_SOURCE_FILE_AT_LINE (398)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_output_effective_argument'    *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_output_5F_effective_5F_argument_i14_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  &var_cas_outEffectiveArgument) {
  GGS_luint  var_cas_unsignedValue ;
  inLexique.assignFromAttribute_uint_33__32_value (var_cas_unsignedValue) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outEffectiveArgument = GGS_lexicalUnsignedInputArgumentAST ::constructor_new (inLexique, var_cas_unsignedValue COMMA_SOURCE_FILE_AT_LINE (407)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_output_effective_argument'    *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_output_5F_effective_5F_argument_i15_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  &var_cas_outEffectiveArgument) {
  GGS_location  var_cas_currentLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
  var_cas_outEffectiveArgument = GGS_lexicalCurrentCharacterInputArgumentAST ::constructor_new (inLexique, var_cas_currentLocation COMMA_SOURCE_FILE_AT_LINE (417)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Implementation of production rule 'lexical_output_effective_argument'    *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_output_5F_effective_5F_argument_i16_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  &var_cas_outEffectiveArgument) {
  GGS_lstring  var_cas_idf ;
  inLexique.assignFromAttribute_tokenString (var_cas_idf) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  nt_function_5F_call_5F_or_5F_attribute_ (inLexique, var_cas_idf, var_cas_outEffectiveArgument) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'function_call_or_attribute'       *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_function_5F_call_5F_or_5F_attribute_i17_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_lstring  var_cas_inIdf,
                                GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  &var_cas_outArgument) {
  var_cas_outArgument = GGS_lexicalAttributeInputArgumentAST ::constructor_new (inLexique, var_cas_inIdf COMMA_SOURCE_FILE_AT_LINE (432)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Implementation of production rule 'function_call_or_attribute'       *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_function_5F_call_5F_or_5F_attribute_i18_ (C_Lexique_galgas_5F_scanner & inLexique,
                                const GGS_lstring  var_cas_inIdf,
                                GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  &var_cas_outArgument) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__28_) COMMA_HERE) ;
  GGS_lexicalFunctionCallActualArgumentListAST  var_cas_functionActualArgumentList = GGS_lexicalFunctionCallActualArgumentListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_18 = true ;
    while (syntaxRepeat_18) {
      switch (select_lexiqueSyntax_18 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          GGS_lexicalRoutineOrFunctionFormalInputArgumentAST  var_cas_arg ;
          nt_lexical_5F_output_5F_effective_5F_argument_ (inLexique, var_cas_arg) ;
          var_cas_functionActualArgumentList.addAssign_operation (var_cas_arg) ;
          } break ;
        default :
          syntaxRepeat_18 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__29_) COMMA_HERE) ;
  var_cas_outArgument = GGS_lexicalFunctionInputArgumentAST ::constructor_new (inLexique, var_cas_inIdf, var_cas_functionActualArgumentList COMMA_SOURCE_FILE_AT_LINE (448)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i19_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_lexicalErrorInstructionAST ::constructor_new (inLexique, var_cas_errorMessageName COMMA_SOURCE_FILE_AT_LINE (458))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i20_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_warning) COMMA_HERE) ;
  GGS_lstring  var_cas_warningMessageName ;
  inLexique.assignFromAttribute_tokenString (var_cas_warningMessageName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_lexicalWarningInstructionAST ::constructor_new (inLexique, var_cas_warningMessageName COMMA_SOURCE_FILE_AT_LINE (467))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i21_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_drop) COMMA_HERE) ;
  GGS_lstring  var_cas_terminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_lexicalDropInstructionAST ::constructor_new (inLexique, var_cas_terminalName COMMA_SOURCE_FILE_AT_LINE (477))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i22_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_tag) COMMA_HERE) ;
  GGS_lstring  var_cas_tagName ;
  inLexique.assignFromAttribute_tokenString (var_cas_tagName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_lexicalTagInstructionAST ::constructor_new (inLexique, var_cas_tagName COMMA_SOURCE_FILE_AT_LINE (487))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i23_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_rewind) COMMA_HERE) ;
  GGS_lstring  var_cas_tagName ;
  inLexique.assignFromAttribute_tokenString (var_cas_tagName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_send) COMMA_HERE) ;
  GGS_lstring  var_cas_terminalName ;
  inLexique.assignFromAttribute_tokenString (var_cas_terminalName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_lexicalRewindInstructionAST ::constructor_new (inLexique, var_cas_tagName, var_cas_terminalName COMMA_SOURCE_FILE_AT_LINE (500))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'lexical_instruction'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_instruction_i24_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalInstructionListAST  &var_cas_ioInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_log) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioInstructionList.addAssign_operation (GGS_lexicalLogInstructionAST ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (508))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_expression'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_expression_i25_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalExpressionAST  &var_cas_outExpression) {
  nt_lexical_5F_term_ (inLexique, var_cas_outExpression) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of production rule 'lexical_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_term_i26_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalExpressionAST  &var_cas_outExpression) {
  nt_lexical_5F_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_19 = true ;
    while (syntaxRepeat_19) {
      switch (select_lexiqueSyntax_19 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7C_) COMMA_HERE) ;
          GGS_lexicalExpressionAST  var_cas_rightExpression ;
          nt_lexical_5F_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_lexicalOrExpressionAST ::constructor_new (inLexique, var_cas_outExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (526)) ;
          } break ;
        default :
          syntaxRepeat_19 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'lexical_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_factor_i27_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalExpressionAST  &var_cas_outExpression) {
  GGS_lstring  var_cas_string ;
  inLexique.assignFromAttribute_tokenString (var_cas_string) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  var_cas_outExpression = GGS_lexicalStringMatchAST ::constructor_new (inLexique, var_cas_string COMMA_SOURCE_FILE_AT_LINE (535)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'lexical_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_factor_i28_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__7E_) COMMA_HERE) ;
  GGS_lstring  var_cas_string ;
  inLexique.assignFromAttribute_tokenString (var_cas_string) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  inLexique.assignFromAttribute_tokenString (var_cas_errorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  var_cas_outExpression = GGS_lexicalStringNotMatchAST ::constructor_new (inLexique, var_cas_string, var_cas_errorMessage COMMA_SOURCE_FILE_AT_LINE (547)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'lexical_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_factor_i29_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalExpressionAST  &var_cas_outExpression) {
  GGS_lchar  var_cas_character ;
  inLexique.assignFromAttribute_charValue (var_cas_character) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
  switch (select_lexiqueSyntax_20 (inLexique)) {
    case 1 : {
      var_cas_outExpression = GGS_lexicalCharacterMatchAST ::constructor_new (inLexique, var_cas_character COMMA_SOURCE_FILE_AT_LINE (556)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      GGS_lchar  var_cas_upperBound ;
      inLexique.assignFromAttribute_charValue (var_cas_upperBound) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_char) COMMA_HERE) ;
      var_cas_outExpression = GGS_lexicalCharacterIntervalMatchAST ::constructor_new (inLexique, var_cas_character, var_cas_upperBound COMMA_SOURCE_FILE_AT_LINE (561)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'lexical_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_factor_i30_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalExpressionAST  &var_cas_outExpression) {
  GGS_lstring  var_cas_characterSet ;
  inLexique.assignFromAttribute_tokenString (var_cas_characterSet) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  var_cas_outExpression = GGS_lexicalCharacterSetMatchAST ::constructor_new (inLexique, var_cas_characterSet COMMA_SOURCE_FILE_AT_LINE (569)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Implementation of production rule 'lexical_list_declaration'        *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_list_5F_declaration_i31_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalListDeclarationListAST  &var_cas_ioLexicalListDeclarationList) {
  GGS_lstring  var_cas_name ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_list) COMMA_HERE) ;
  inLexique.assignFromAttribute_tokenString (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_lstringlist  var_cas_sentAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
      switch (select_lexiqueSyntax_21 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          GGS_lstring  var_cas_sentAttribute ;
          inLexique.assignFromAttribute_tokenString (var_cas_sentAttribute) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_sentAttributeList.addAssign_operation (var_cas_sentAttribute) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  inLexique.assignFromAttribute_tokenString (var_cas_errorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstring  var_cas_theStyle ;
  switch (select_lexiqueSyntax_22 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_theStyle) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      var_cas_theStyle = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (595)) ;
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  GGS_lexicalListEntryListAST  var_cas_entryList = GGS_lexicalListEntryListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_23 = true ;
    while (syntaxRepeat_23) {
        nt_lexical_5F_list_5F_entry_ (inLexique, var_cas_entryList) ;
      switch (select_lexiqueSyntax_23 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_23 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioLexicalListDeclarationList.addAssign_operation (var_cas_name, var_cas_theStyle, var_cas_errorMessage, var_cas_sentAttributeList, var_cas_entryList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'lexical_list_entry'           *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_list_5F_entry_i32_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalListEntryListAST  &var_cas_ioLexicalListEntryList) {
  GGS_lstring  var_cas_entrySpelling ;
  inLexique.assignFromAttribute_tokenString (var_cas_entrySpelling) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstringlist  var_cas_optionList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_lexiqueSyntax_24 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
      GGS_lstring  var_cas_optionName ;
      inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      var_cas_optionList.addAssign_operation (var_cas_optionName) ;
      } break ;
    default :
      break ;
  }
  GGS_lstring  var_cas_terminalSpelling ;
  switch (select_lexiqueSyntax_25 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_terminalSpelling) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
      } break ;
    case 2 : {
      var_cas_terminalSpelling = var_cas_entrySpelling ;
      } break ;
    default :
      break ;
  }
  var_cas_ioLexicalListEntryList.addAssign_operation (var_cas_entrySpelling, var_cas_terminalSpelling, var_cas_optionList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Implementation of production rule 'lexical_attribute_declaration'      *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_lexical_5F_attribute_5F_declaration_i33_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalAttributeListAST  &var_cas_ioLexicalAttributeList) {
  GGS_lstring  var_cas_typeName ;
  inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  inLexique.assignFromAttribute_tokenString (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioLexicalAttributeList.addAssign_operation (var_cas_typeName, var_cas_name) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'terminal_declaration'          *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_terminal_5F_declaration_i34_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_terminalDeclarationListAST  &var_cas_ioTerminalDeclarationList) {
  GGS_lstring  var_cas_name ;
  inLexique.assignFromAttribute_tokenString (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_terminal) COMMA_HERE) ;
  GGS_lstringlist  var_cas_sentAttributeList = GGS_lstringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_26 = true ;
    while (syntaxRepeat_26) {
      switch (select_lexiqueSyntax_26 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          GGS_lstring  var_cas_sentAttribute ;
          inLexique.assignFromAttribute_tokenString (var_cas_sentAttribute) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_sentAttributeList.addAssign_operation (var_cas_sentAttribute) ;
          } break ;
        default :
          syntaxRepeat_26 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_message) COMMA_HERE) ;
  GGS_lstring  var_cas_errorMessage ;
  inLexique.assignFromAttribute_tokenString (var_cas_errorMessage) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  GGS_lstring  var_cas_theStyle ;
  switch (select_lexiqueSyntax_27 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_theStyle) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    case 2 : {
      var_cas_theStyle = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (662)) ;
      } break ;
    default :
      break ;
  }
  GGS_lstringlist  var_cas_optionList = GGS_lstringlist ::constructor_emptyList () ;
  switch (select_lexiqueSyntax_28 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_feature) COMMA_HERE) ;
      { bool syntaxRepeat_29 = true ;
        while (syntaxRepeat_29) {
            GGS_lstring  var_cas_optionName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            var_cas_optionList.addAssign_operation (var_cas_optionName) ;
          switch (select_lexiqueSyntax_29 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
              } break ;
            default :
              syntaxRepeat_29 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioTerminalDeclarationList.addAssign_operation (var_cas_name, var_cas_sentAttributeList, var_cas_errorMessage, var_cas_theStyle, var_cas_optionList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'style_declaration'            *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_style_5F_declaration_i35_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_lexicalStyleListAST  &var_cas_ioLexicalStyleList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_style) COMMA_HERE) ;
  GGS_lstring  var_cas_name ;
  inLexique.assignFromAttribute_tokenString (var_cas_name) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
  GGS_lstring  var_cas_comment ;
  inLexique.assignFromAttribute_tokenString (var_cas_comment) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  var_cas_ioLexicalStyleList.addAssign_operation (var_cas_name, var_cas_comment) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Implementation of production rule 'extern_routine_or_function_declaration' *
//                                                                           *
//---------------------------------------------------------------------------*

void lexiqueSyntax::rule_lexiqueSyntax_extern_5F_routine_5F_or_5F_function_5F_declaration_i36_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_externRoutineListAST  &var_cas_ioExternRoutineList,
                                GGS_externFunctionListAST  &var_cas_ioExternFunctionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_extern) COMMA_HERE) ;
  switch (select_lexiqueSyntax_30 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_routine) COMMA_HERE) ;
      GGS_lstring  var_cas_routineName ;
      inLexique.assignFromAttribute_tokenString (var_cas_routineName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_lexicalExternRoutineFormalArgumentListAST  var_cas_lexicalRoutineFormalArgumentList = GGS_lexicalExternRoutineFormalArgumentListAST ::constructor_emptyList () ;
      { bool syntaxRepeat_31 = true ;
        while (syntaxRepeat_31) {
          switch (select_lexiqueSyntax_31 (inLexique)) {
            case 2 : {
              GGS_lexicalArgumentModeAST var_cas_lexicalArgumentMode ;
              switch (select_lexiqueSyntax_32 (inLexique)) {
                case 1 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F__21_) COMMA_HERE) ;
                  var_cas_lexicalArgumentMode = GGS_lexicalArgumentModeAST::constructor_lexicalInputOutputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (706)) ;
                  } break ;
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
                  var_cas_lexicalArgumentMode = GGS_lexicalArgumentModeAST::constructor_lexicalInputMode (inLexique COMMA_SOURCE_FILE_AT_LINE (709)) ;
                  } break ;
                default :
                  break ;
              }
              GGS_lstring  var_cas_lexicalTypeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_lexicalTypeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              GGS_lstring  var_cas_formalArgumentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_formalArgumentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              var_cas_lexicalRoutineFormalArgumentList.addAssign_operation (var_cas_lexicalArgumentMode, var_cas_lexicalTypeName, var_cas_formalArgumentName) ;
              } break ;
            default :
              syntaxRepeat_31 = false ;
              break ;
          }
        }
      }
      GGS_stringlist  var_cas_errorMessageList = GGS_stringlist ::constructor_emptyList () ;
      switch (select_lexiqueSyntax_33 (inLexique)) {
        case 1 : {
          } break ;
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_error) COMMA_HERE) ;
          { bool syntaxRepeat_34 = true ;
            while (syntaxRepeat_34) {
                GGS_lstring  var_cas_errorMessageName ;
                inLexique.assignFromAttribute_tokenString (var_cas_errorMessageName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                var_cas_errorMessageList.addAssign_operation (var_cas_errorMessageName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (721))) ;
              switch (select_lexiqueSyntax_34 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_34 = false ;
                  break ;
              }
            }
          }
          } break ;
        default :
          break ;
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      var_cas_ioExternRoutineList.addAssign_operation (var_cas_routineName, var_cas_lexicalRoutineFormalArgumentList, var_cas_errorMessageList) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_function) COMMA_HERE) ;
      GGS_lstring  var_cas_functionName ;
      inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
      GGS_lexicalExternFunctionFormalArgumentListAST  var_cas_lexicalFunctionFormalArgumentList = GGS_lexicalExternFunctionFormalArgumentListAST ::constructor_emptyList () ;
      { bool syntaxRepeat_35 = true ;
        while (syntaxRepeat_35) {
          switch (select_lexiqueSyntax_35 (inLexique)) {
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
              GGS_lstring  var_cas_lexicalTypeName ;
              inLexique.assignFromAttribute_tokenString (var_cas_lexicalTypeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              GGS_lstring  var_cas_formalArgumentName ;
              inLexique.assignFromAttribute_tokenString (var_cas_formalArgumentName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              var_cas_lexicalFunctionFormalArgumentList.addAssign_operation (var_cas_lexicalTypeName, var_cas_formalArgumentName) ;
              } break ;
            default :
              syntaxRepeat_35 = false ;
              break ;
          }
        }
      }
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
      GGS_lstring  var_cas_returnedTypeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_returnedTypeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
      var_cas_ioExternFunctionList.addAssign_operation (var_cas_functionName, var_cas_lexicalFunctionFormalArgumentList, var_cas_returnedTypeName) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*

