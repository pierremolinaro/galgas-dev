//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'semanticExpressionAnalysis.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 7th, 2010, at 23h42'45"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticExpressionAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticExpressionAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     AUTOMATON FOR '@variableMap' MAP                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_1 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_1_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_2 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_2_0 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_2 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_3 [32] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_3 [40] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_3_1 [44] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_3_3 [53] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_0 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_2 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_3 [38] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_6 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_6_0 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_3 [41] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_8 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kStateMessageForMap_variableMap_10 [82] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_10_0 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_2 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_3 [52] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_0 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_1 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_2 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_3 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_12 [83] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_12_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_0 [58] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_15 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_17_0 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_2 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_3 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_0 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_1 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_2 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_3 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonTransition kAutomaton_variableMap [19] [4] = {
  { // State 'usedLocalConstant'
    {0, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'localConstant'
    {0, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'undefinedLocalVariable'
    {2, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_2_0}, // 'readAccess' -> 'undefinedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {2, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_2_2}, // 'readWriteAccess' -> 'undefinedLocalVariable'
    {2, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_2_3}, // 'dropAccess' -> 'undefinedLocalVariable'
  },
  { // State 'definedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_3_1}, // 'writeAccess' -> 'definedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedLocalVariable'
    {5, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_3_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'usedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'droppedLocalVariable'
    {5, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_5_0}, // 'readAccess' -> 'droppedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_5_2}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_5_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'undefinedOutputFormalParameter'
    {6, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_6_0}, // 'readAccess' -> 'undefinedOutputFormalParameter'
    {7, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedOutputFormalParameter'
    {6, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_6_2}, // 'readWriteAccess' -> 'undefinedOutputFormalParameter'
    {6, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_6_3}, // 'dropAccess' -> 'undefinedOutputFormalParameter'
  },
  { // State 'definedOutputFormalParameter'
    {7, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'definedOutputFormalParameter'
    {7, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedOutputFormalParameter'
    {7, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'definedOutputFormalParameter'
    {6, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'undefinedOutputFormalParameter'
  },
  { // State 'unusedInputOutputFormalParameter'
    {9, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputOutputFormalParameter'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalParameter'
    {9, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalParameter'
    {10, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalParameter'
  },
  { // State 'usedInputOutputFormalParameter'
    {9, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputOutputFormalParameter'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalParameter'
    {9, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalParameter'
    {10, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalParameter'
  },
  { // State 'droppedInputOutputFormalParameter'
    {10, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_10_0}, // 'readAccess' -> 'droppedInputOutputFormalParameter'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalParameter'
    {10, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_10_2}, // 'readWriteAccess' -> 'droppedInputOutputFormalParameter'
    {10, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_10_3}, // 'dropAccess' -> 'droppedInputOutputFormalParameter'
  },
  { // State 'inputOutputFormalParameterDeclaredAsUnused'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_0}, // 'readAccess' -> 'usedInputOutputFormalParameter'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_1}, // 'writeAccess' -> 'usedInputOutputFormalParameter'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_2}, // 'readWriteAccess' -> 'usedInputOutputFormalParameter'
    {10, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_3}, // 'dropAccess' -> 'droppedInputOutputFormalParameter'
  },
  { // State 'constantInputFormalParameter'
    {13, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_1}, // 'writeAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_2}, // 'readWriteAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_3}, // 'dropAccess' -> 'usedConstantInputFormalParameter'
  },
  { // State 'usedConstantInputFormalParameter'
    {13, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_1}, // 'writeAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_2}, // 'readWriteAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_3}, // 'dropAccess' -> 'usedConstantInputFormalParameter'
  },
  { // State 'constantInputFormalParameterDeclaredAsUnused'
    {13, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_14_0}, // 'readAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_1}, // 'writeAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_2}, // 'readWriteAccess' -> 'usedConstantInputFormalParameter'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_3}, // 'dropAccess' -> 'usedConstantInputFormalParameter'
  },
  { // State 'inputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputFormalParameter'
    {17, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputFormalParameter'
  },
  { // State 'usedInputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputFormalParameter'
    {17, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputFormalParameter'
  },
  { // State 'droppedInputFormalParameter'
    {17, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_17_0}, // 'readAccess' -> 'droppedInputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalParameter'
    {17, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_17_2}, // 'readWriteAccess' -> 'droppedInputFormalParameter'
    {17, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_17_3}, // 'dropAccess' -> 'droppedInputFormalParameter'
  },
  { // State 'inputFormalParameterDeclaredAsUnused'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_0}, // 'readAccess' -> 'usedInputFormalParameter'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_1}, // 'writeAccess' -> 'usedInputFormalParameter'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_2}, // 'readWriteAccess' -> 'usedInputFormalParameter'
    {17, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_3}, // 'dropAccess' -> 'droppedInputFormalParameter'
  },
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonFinalIssue kFinalIssue_variableMap [19] = {
  {kMapAutomatonNoIssue, NULL}, // State 'usedLocalConstant'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_1}, // State 'localConstant'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_2}, // State 'undefinedLocalVariable'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_3}, // State 'definedLocalVariable'
  {kMapAutomatonNoIssue, NULL}, // State 'usedLocalVariable'
  {kMapAutomatonNoIssue, NULL}, // State 'droppedLocalVariable'
  {kMapAutomatonIssueError, kStateMessageForMap_variableMap_6}, // State 'undefinedOutputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'definedOutputFormalParameter'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_8}, // State 'unusedInputOutputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'usedInputOutputFormalParameter'
  {kMapAutomatonIssueError, kStateMessageForMap_variableMap_10}, // State 'droppedInputOutputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'inputOutputFormalParameterDeclaredAsUnused'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_12}, // State 'constantInputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'usedConstantInputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'constantInputFormalParameterDeclaredAsUnused'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_15}, // State 'inputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'usedInputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'droppedInputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'inputFormalParameterDeclaredAsUnused'
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_variableMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_variableMap::e_variableMap (void) :
mTypeProxy (),
mCppName () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@variableMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_variableMap ("variableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_variableMap::
elementOf_GGS_variableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_variableMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_variableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTypeProxy.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mCppName.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_variableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_variableMap * ptr = dynamic_cast <const elementOf_GGS_variableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTypeProxy.operator_isEqual (ptr->mInfo.mTypeProxy)).boolValue ()
           && (mInfo.mCppName.operator_isEqual (ptr->mInfo.mCppName)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_variableMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_variableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isNotEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               const GGS_string& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_variableMap info  ;
    info.mTypeProxy = inParameter0 ;
    info.mCppName = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 inActionIndex,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_string  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    node->performTransition (inLexique, inKey, kAutomaton_variableMap [node->mCurrentState][inActionIndex] COMMA_THERE) ;
    outParameter0 = node->mInfo.mTypeProxy ;
    outParameter1 = node->mInfo.mCppName ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::method_checkAutomatonStates (C_Compiler & inLexique,
                                             const GGS_location & inErrorLocation
                                             COMMA_LOCATION_ARGS) const {
  checkAutomatonStates (inLexique, inErrorLocation, kFinalIssue_variableMap COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForDropAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchForReadAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 1,
                 kSearchMessage_searchForWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 2,
                 kSearchMessage_searchForReadWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForDropAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 3,
                 kSearchMessage_searchForDropAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertLocalVariable [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertUsedLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 2,
                 kInsertMessage_insertLocalVariable,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertLocalConstant (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 1,
                 kInsertMessage_insertLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertUsedLocalConstant (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertUsedLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 15,
                 kInsertMessage_insertInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 18,
                 kInsertMessage_insertInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 12,
                 kInsertMessage_insertConstantInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 14,
                 kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertOutputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 6,
                 kInsertMessage_insertOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 8,
                 kInsertMessage_insertInputOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 11,
                 kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_variableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_variableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_variableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @variableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_variableMap::cEnumerator::_mTypeProxy (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTypeProxy ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_variableMap::cEnumerator::_mCppName (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_variableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_variableMap * p = NULL ;
    macroMyNew (p, GGS_variableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_variableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_variableMap * p = dynamic_cast <const GGS_variableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_variableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_variableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_variableMap ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalConstantState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (0) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfLocalConstantState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (1) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (2) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (3) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (4) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (5) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedOutputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (6) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedOutputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (7) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUnusedInputOutputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (8) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputOutputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (9) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputOutputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (10) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputOutputFormalParameterDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (11) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (12) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedConstantInputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (13) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalParameterDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (14) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (15) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (16) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (17) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalParameterDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (18) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkAssignmentTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkAssignmentTypes (C_Compiler & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inTargetType,
                                const GGS_unifiedTypeMapProxy   var_cas_inSourceType,
                                const GGS_location   var_cas_inErrorLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkAssignmentTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapProxy  var_cas_sourceType = var_cas_inSourceType ;
  GGS_bool var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_inSourceType) ;
  GGS_uint _variant_12293 = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (197)) ;
  GGS_bool _condition_12293 (_variant_12293.isBuilt (), true) ;
  while (_condition_12293.isBuiltAndTrue ()) {
    _condition_12293 = ((var_cas_ok).operator_not ()).operator_and ((var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (197)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (197))).operator_not ()) ;
    if (_condition_12293.isBuiltAndTrue ()) {
      if (_variant_12293.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (200)) ;
        _condition_12293 = GGS_bool (false) ;
      }else{
        _variant_12293.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_sourceType = var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (198)) ;
        var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_inSourceType) ;
      }
    }
  }
  const GGS_bool cond_12473 = (var_cas_ok).operator_not () ;
  if (cond_12473.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("target object type is '@")).operator_concat (var_cas_inTargetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (202)))).operator_concat (GGS_string ("' and cannot be assigned by an '@"))).operator_concat (var_cas_inSourceType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (202)))).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (203)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkAssignmentTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'predefinedTypes' struct                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_predefinedTypes ("predefinedTypes", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_predefinedTypes::GGS_predefinedTypes (void) :
mLocationType (),
mBoolType (),
mCharType (),
mStringType (),
mUIntType (),
mSIntType (),
mUInt64Type (),
mSInt64Type (),
mDoubleType () {
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes::~GGS_predefinedTypes (void) {
}

//---------------------------------------------------------------------------*

void GGS_predefinedTypes::drop (void) {
  mLocationType.drop () ;
  mBoolType.drop () ;
  mCharType.drop () ;
  mStringType.drop () ;
  mUIntType.drop () ;
  mSIntType.drop () ;
  mUInt64Type.drop () ;
  mSInt64Type.drop () ;
  mDoubleType.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_predefinedTypes::isBuilt (void) const {
  return mLocationType.isBuilt ()
    && mBoolType.isBuilt ()
    && mCharType.isBuilt ()
    && mStringType.isBuilt ()
    && mUIntType.isBuilt ()
    && mSIntType.isBuilt ()
    && mUInt64Type.isBuilt ()
    && mSInt64Type.isBuilt ()
    && mDoubleType.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isEqual (inOperand.mLocationType)
    .operator_and (mBoolType.operator_isEqual (inOperand.mBoolType))
    .operator_and (mCharType.operator_isEqual (inOperand.mCharType))
    .operator_and (mStringType.operator_isEqual (inOperand.mStringType))
    .operator_and (mUIntType.operator_isEqual (inOperand.mUIntType))
    .operator_and (mSIntType.operator_isEqual (inOperand.mSIntType))
    .operator_and (mUInt64Type.operator_isEqual (inOperand.mUInt64Type))
    .operator_and (mSInt64Type.operator_isEqual (inOperand.mSInt64Type))
    .operator_and (mDoubleType.operator_isEqual (inOperand.mDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isNotEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isNotEqual (inOperand.mLocationType)
    .operator_or (mBoolType.operator_isNotEqual (inOperand.mBoolType))
    .operator_or (mCharType.operator_isNotEqual (inOperand.mCharType))
    .operator_or (mStringType.operator_isNotEqual (inOperand.mStringType))
    .operator_or (mUIntType.operator_isNotEqual (inOperand.mUIntType))
    .operator_or (mSIntType.operator_isNotEqual (inOperand.mSIntType))
    .operator_or (mUInt64Type.operator_isNotEqual (inOperand.mUInt64Type))
    .operator_or (mSInt64Type.operator_isNotEqual (inOperand.mSInt64Type))
    .operator_or (mDoubleType.operator_isNotEqual (inOperand.mDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::
constructor_new (const GGS_unifiedTypeMapProxy & argument_0,
                 const GGS_unifiedTypeMapProxy & argument_1,
                 const GGS_unifiedTypeMapProxy & argument_2,
                 const GGS_unifiedTypeMapProxy & argument_3,
                 const GGS_unifiedTypeMapProxy & argument_4,
                 const GGS_unifiedTypeMapProxy & argument_5,
                 const GGS_unifiedTypeMapProxy & argument_6,
                 const GGS_unifiedTypeMapProxy & argument_7,
                 const GGS_unifiedTypeMapProxy & argument_8) {
  GGS_predefinedTypes result ;
  result.mLocationType = argument_0 ;
  result.mBoolType = argument_1 ;
  result.mCharType = argument_2 ;
  result.mStringType = argument_3 ;
  result.mUIntType = argument_4 ;
  result.mSIntType = argument_5 ;
  result.mUInt64Type = argument_6 ;
  result.mSInt64Type = argument_7 ;
  result.mDoubleType = argument_8 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_predefinedTypes::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @predefinedTypes" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLocationType " ;
    _s << mLocationType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mBoolType " ;
    _s << mBoolType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCharType " ;
    _s << mCharType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mStringType " ;
    _s << mStringType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUIntType " ;
    _s << mUIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSIntType " ;
    _s << mSIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUInt64Type " ;
    _s << mUInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSInt64Type " ;
    _s << mSInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mDoubleType " ;
    _s << mDoubleType.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_predefinedTypes::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_predefinedTypes * p = NULL ;
    macroMyNew (p, GGS_predefinedTypes (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_predefinedTypes result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_predefinedTypes * p = dynamic_cast <const GGS_predefinedTypes *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_predefinedTypes, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_predefinedTypes::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_predefinedTypes ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression> gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression
findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.count ()) {
    result = gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (superClassPtr) ;
      gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@selfInExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selfInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_selfInExpressionAST * operand_14000,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14000 != NULL) {
    const GGS_bool cond_14465 = var_cas_ioVariableMap.reader_hasKey (GGS_string ("self")) ;
    if (cond_14465.isBuiltAndTrue ()) {
      GGS_string var_cas_selfCppName ;
      GGS_unifiedTypeMapProxy  var_cas_selfType ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (248)), var_cas_selfType, var_cas_selfCppName COMMA_SOURCE_FILE_AT_LINE (248)) ;
      var_cas_outExpression = GGS_selfInExpressionForGeneration ::constructor_new (inLexique, var_cas_selfType, var_cas_selfCppName COMMA_SOURCE_FILE_AT_LINE (249)) ;
    }else if (cond_14465.isBuiltAndFalse ()) {
      operand_14000->mSelfLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (252)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@hereExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__hereExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_hereExpressionAST * operand_14713,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_14713 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mLocationType COMMA_SOURCE_FILE_AT_LINE (263)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@trueExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__trueExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_trueExpressionAST * operand_15132,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15132 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (274)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@falseExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__falseExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_falseExpressionAST * operand_15548,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15548 != NULL) {
    var_cas_outExpression = GGS_falseExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (285)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalCharExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalCharExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalCharExpressionAST * operand_15971,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_15971 != NULL) {
    var_cas_outExpression = GGS_literalCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mCharType, operand_15971->mCharacter COMMA_SOURCE_FILE_AT_LINE (296)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalStringExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalStringExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalStringExpressionAST * operand_16414,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16414 != NULL) {
    var_cas_outExpression = GGS_literalStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_16414->mStringSequence COMMA_SOURCE_FILE_AT_LINE (307)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalDoubleExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalDoubleExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalDoubleExpressionAST * operand_16866,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_16866 != NULL) {
    var_cas_outExpression = GGS_literalDoubleExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mDoubleType, operand_16866->mValue COMMA_SOURCE_FILE_AT_LINE (318)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalUIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUIntExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalUIntExpressionAST * operand_17307,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17307 != NULL) {
    var_cas_outExpression = GGS_literalUIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mDoubleType, operand_17307->mValue COMMA_SOURCE_FILE_AT_LINE (329)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalUInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUInt64ExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalUInt64ExpressionAST * operand_17748,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_17748 != NULL) {
    var_cas_outExpression = GGS_literalUInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mUInt64Type, operand_17748->mValue COMMA_SOURCE_FILE_AT_LINE (340)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalSIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSIntExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalSIntExpressionAST * operand_18189,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18189 != NULL) {
    var_cas_outExpression = GGS_literalSIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mSIntType, operand_18189->mValue COMMA_SOURCE_FILE_AT_LINE (351)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalSInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSInt64ExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalSInt64ExpressionAST * operand_18628,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_18628 != NULL) {
    var_cas_outExpression = GGS_literalSInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mSInt64Type, operand_18628->mValue COMMA_SOURCE_FILE_AT_LINE (362)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@constructorExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__constructorExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_constructorExpressionAST * operand_19069,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_19069 != NULL) {
    GGS_constructorMap  var_cas_constructorMap ;
    GGS_bool automatic_var_19382_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_19382_1 ;
    GGS_typeKindEnum automatic_var_19382_2 ;
    GGS_typedAttributeList  automatic_var_19382_3 ;
    GGS_attributeMap  automatic_var_19382_4 ;
    GGS_typedAttributeList  automatic_var_19382_5 ;
    GGS_readerMap  automatic_var_19382_6 ;
    GGS_modifierMap  automatic_var_19382_7 ;
    GGS_instanceMethodMap  automatic_var_19382_8 ;
    GGS_classMethodMap  automatic_var_19382_9 ;
    GGS_enumerationDescriptorList  automatic_var_19382_10 ;
    GGS_uint  automatic_var_19382_11 ;
    GGS_unifiedTypeMapProxyList  automatic_var_19382_12 ;
    GGS_unifiedTypeMapProxyList  automatic_var_19382_13 ;
    GGS_nativeAttributeList  automatic_var_19382_14 ;
    GGS_lstringlist  automatic_var_19382_15 ;
    GGS_typedAttributeList  automatic_var_19382_16 ;
    GGS_mapSearchMethodListAST  automatic_var_19382_17 ;
    GGS_mapSearchMethodListAST  automatic_var_19382_18 ;
    if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_19069->mTypeName, automatic_var_19382_0, automatic_var_19382_1, automatic_var_19382_2, automatic_var_19382_3, automatic_var_19382_4, automatic_var_19382_5, var_cas_constructorMap, automatic_var_19382_6, automatic_var_19382_7, automatic_var_19382_8, automatic_var_19382_9, automatic_var_19382_10, automatic_var_19382_11, automatic_var_19382_12, automatic_var_19382_13, automatic_var_19382_14, automatic_var_19382_15, automatic_var_19382_16, automatic_var_19382_17, automatic_var_19382_18 COMMA_SOURCE_FILE_AT_LINE (375)) ;
    }
    GGS_unifiedTypeMapProxyList  var_cas_constructorFormalArgumentTypeList ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    elementOf_GGS_constructorMap * operand_19560 = (elementOf_GGS_constructorMap *) var_cas_constructorMap.searchForReadWithInstruction (operand_19069->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (380))) ;
    if (NULL != operand_19560) {
      var_cas_constructorFormalArgumentTypeList = operand_19560->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_19560->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_19560->mInfo.mReturnedType ;
    }else{
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_constructorMap::cEnumerator enumerator_19800 (var_cas_constructorMap, true) ;
        const GGS_constructorMap::cElement * operand_19800 = NULL ;
        while (((operand_19800 = enumerator_19800.nextObject ()))) {
          macroValidPointer (operand_19800) ;
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (operand_19800->mKey) ;
          {
            GGS_unifiedTypeMapProxyList::cEnumerator enumerator_19863 (operand_19800->mInfo.mArgumentTypeList, true) ;
            const GGS_unifiedTypeMapProxyList::cElement * operand_19863 = NULL ;
            while (((operand_19863 = enumerator_19863.nextObject ()))) {
              macroValidPointer (operand_19863) ;
              var_cas_s.appendCString (" \?@") ;
              var_cas_s.dotAssign_operation (operand_19863->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (389))) ;
            }
          }
          var_cas_s.appendCString (" -> @") ;
          var_cas_s.dotAssign_operation (operand_19800->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (391))) ;
        }
      }
      operand_19069->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '@")).operator_concat (operand_19069->mTypeName)).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_19069->mConstructorName)).operator_concat (GGS_string ("' constructor; available constructors are:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (397)) ;
      var_cas_constructorFormalArgumentTypeList.drop () ;
      var_cas_hasCompilerArgument.drop () ;
      var_cas_returnedType.drop () ;
    }
    const GGS_bool cond_20627 = (operand_19069->mExpressions.reader_length ()).operator_isNotEqual (var_cas_constructorFormalArgumentTypeList.reader_length ()) ;
    if (cond_20627.isBuiltAndTrue ()) {
      operand_19069->mConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_19069->mConstructorName)).operator_concat (GGS_string ("' constructor of '@"))).operator_concat (operand_19069->mTypeName)).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_constructorFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (401)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_19069->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (402)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (403)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_20627.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_20741 (operand_19069->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_20741 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_20776 (var_cas_constructorFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_20776 = NULL ;
        while (((operand_20741 = enumerator_20741.nextObject ()))
            && ((operand_20776 = enumerator_20776.nextObject ()))) {
          macroValidPointer (operand_20741) ;
          macroValidPointer (operand_20776) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_20741->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_20741->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (407)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_20776->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (408)),  operand_20741->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (408)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_constructorExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_19069->mConstructorName, var_cas_constructorEffectiveParameterList COMMA_SOURCE_FILE_AT_LINE (411)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@readerCallExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readerCallExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_readerCallExpressionAST * operand_21377,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21377 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_21377->mReceiver.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_21377->mReceiver (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (425)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (426)) ;
    const GGS_readerMap  var_cas_readerMap = var_cas_receiverType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (428)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_string var_cas_implicitConversionReader ;
    elementOf_GGS_readerMap * operand_22092 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_21377->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (434))) ;
    if (NULL != operand_22092) {
      var_cas_readerFormalArgumentTypeList = operand_22092->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_22092->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_22092->mInfo.mReturnedType ;
      var_cas_implicitConversionReader = operand_22092->mInfo.mImplicitConversionReader ;
    }else{
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_readerMap::cEnumerator enumerator_22377 (var_cas_readerMap, true) ;
        const GGS_readerMap::cElement * operand_22377 = NULL ;
        while (((operand_22377 = enumerator_22377.nextObject ()))) {
          macroValidPointer (operand_22377) ;
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (operand_22377->mKey) ;
          {
            GGS_unifiedTypeMapProxyList::cEnumerator enumerator_22440 (operand_22377->mInfo.mArgumentTypeList, true) ;
            const GGS_unifiedTypeMapProxyList::cElement * operand_22440 = NULL ;
            while (((operand_22440 = enumerator_22440.nextObject ()))) {
              macroValidPointer (operand_22440) ;
              var_cas_s.appendCString (" \?@") ;
              var_cas_s.dotAssign_operation (operand_22440->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (444))) ;
            }
          }
          var_cas_s.appendCString (" -> @") ;
          var_cas_s.dotAssign_operation (operand_22377->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (446))) ;
        }
      }
      operand_21377->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (449)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_21377->mReaderName)).operator_concat (GGS_string ("' reader; available readers are:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (452)) ;
      var_cas_readerFormalArgumentTypeList.drop () ;
      var_cas_hasCompilerArgument.drop () ;
      var_cas_returnedType.drop () ;
      var_cas_implicitConversionReader.drop () ;
    }
    const GGS_bool cond_23198 = (operand_21377->mExpressions.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_23198.isBuiltAndTrue ()) {
      operand_21377->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_21377->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (455)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (456)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_21377->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (457)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (458)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_23198.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_23312 (operand_21377->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_23312 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_23342 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_23342 = NULL ;
        while (((operand_23312 = enumerator_23312.nextObject ()))
            && ((operand_23342 = enumerator_23342.nextObject ()))) {
          macroValidPointer (operand_23312) ;
          macroValidPointer (operand_23342) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_23312->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_23312->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (462)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_23342->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (463)),  operand_23312->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (463)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (467)), var_cas_receiverExpression, operand_21377->mReaderName, var_cas_constructorEffectiveParameterList, var_cas_returnedType, var_cas_implicitConversionReader COMMA_SOURCE_FILE_AT_LINE (466)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@optionExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__optionExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_optionExpressionAST * operand_24048,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24048 != NULL) {
    GGS_commandLineOptionMap  var_cas_boolOptionMap ;
    GGS_commandLineOptionMap  var_cas_uintOptionMap ;
    GGS_commandLineOptionMap  var_cas_stringOptionMap ;
    if (var_cas_inSemanticContext.mOptionComponentMapForSemanticAnalysis.isBuilt ()) {
      var_cas_inSemanticContext.mOptionComponentMapForSemanticAnalysis (HERE)->method_searchKey (inLexique, operand_24048->mOptionComponentName, var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap COMMA_SOURCE_FILE_AT_LINE (488)) ;
    }
    GGS_bool var_cas_found = var_cas_boolOptionMap.reader_hasKey (operand_24048->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (494))) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType = var_cas_inPredefinedTypes.mBoolType ;
    const GGS_bool cond_24781 = (var_cas_found).operator_not () ;
    if (cond_24781.isBuiltAndTrue ()) {
      var_cas_found = var_cas_uintOptionMap.reader_hasKey (operand_24048->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (497))) ;
      var_cas_returnedType = var_cas_inPredefinedTypes.mUIntType ;
    }
    const GGS_bool cond_24932 = (var_cas_found).operator_not () ;
    if (cond_24932.isBuiltAndTrue ()) {
      var_cas_found = var_cas_stringOptionMap.reader_hasKey (operand_24048->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (501))) ;
      var_cas_returnedType = var_cas_inPredefinedTypes.mStringType ;
    }
    const GGS_bool cond_25987 = var_cas_found ;
    if (cond_25987.isBuiltAndTrue ()) {
      const GGS_bool cond_25165 = (operand_24048->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (505))).operator_isEqual (GGS_string ("value")) ;
      if (cond_25165.isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_optionValueExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_24048->mOptionComponentName, operand_24048->mOptionEntryName COMMA_SOURCE_FILE_AT_LINE (506)) ;
      }else if (cond_25165.isBuiltAndFalse ()) {
        const GGS_bool cond_25384 = (operand_24048->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (511))).operator_isEqual (GGS_string ("char")) ;
        if (cond_25384.isBuiltAndTrue ()) {
          var_cas_outExpression = GGS_optionCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mCharType, operand_24048->mOptionComponentName, operand_24048->mOptionEntryName COMMA_SOURCE_FILE_AT_LINE (512)) ;
        }else if (cond_25384.isBuiltAndFalse ()) {
          const GGS_bool cond_25609 = (operand_24048->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (517))).operator_isEqual (GGS_string ("string")) ;
          if (cond_25609.isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_optionStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_24048->mOptionComponentName, operand_24048->mOptionEntryName COMMA_SOURCE_FILE_AT_LINE (518)) ;
          }else if (cond_25609.isBuiltAndFalse ()) {
            const GGS_bool cond_25835 = (operand_24048->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (523))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_25835.isBuiltAndTrue ()) {
              var_cas_outExpression = GGS_optionCommentExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_24048->mOptionComponentName, operand_24048->mOptionEntryName COMMA_SOURCE_FILE_AT_LINE (524)) ;
            }else if (cond_25835.isBuiltAndFalse ()) {
              operand_24048->mOptionReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined for an option") COMMA_SOURCE_FILE_AT_LINE (531)) ;
              var_cas_outExpression.drop () ;
            }
          }
        }
      }
    }else if (cond_25987.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_26035 (var_cas_boolOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_26035 = NULL ;
        while (((operand_26035 = enumerator_26035.nextObject ()))) {
          macroValidPointer (operand_26035) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_26035->mKey) ;
          var_cas_s.appendCString ("' @bool option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_26130 (var_cas_uintOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_26130 = NULL ;
        while (((operand_26130 = enumerator_26130.nextObject ()))) {
          macroValidPointer (operand_26130) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_26130->mKey) ;
          var_cas_s.appendCString ("' @uint option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_26227 (var_cas_stringOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_26227 = NULL ;
        while (((operand_26227 = enumerator_26227.nextObject ()))) {
          macroValidPointer (operand_26227) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_26227->mKey) ;
          var_cas_s.appendCString ("' @string option;") ;
        }
      }
      operand_24048->mOptionEntryName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_24048->mOptionComponentName)).operator_concat (GGS_string ("' option component does not define the '"))).operator_concat (operand_24048->mOptionEntryName)).operator_concat (GGS_string ("' option; available options:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (547)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkDiadicOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkDiadicOperator (C_Compiler & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inLeftType,
                                const GGS_unifiedTypeMapProxy   var_cas_inRightType,
                                const GGS_bool  var_cas_inOperandIsHandled,
                                const GGS_string  var_cas_inOperatorNameForErrorMessage,
                                const GGS_location   var_cas_inErrorLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkDiadicOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_27048 = (var_cas_inOperandIsHandled).operator_not () ;
  if (cond_27048.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("left operand type is '@")).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (561)))).operator_concat (GGS_string ("' and does not accept '"))).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator (right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (561)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (563)) ;
  }else if (cond_27048.isBuiltAndFalse ()) {
    const GGS_bool cond_27303 = (var_cas_inLeftType).operator_isNotEqual (var_cas_inRightType) ;
    if (cond_27303.isBuiltAndTrue ()) {
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("left operand type of '")).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator is '@"))).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (565)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (565)))).operator_concat (GGS_string ("'; they should be the same")) COMMA_SOURCE_FILE_AT_LINE (567)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkDiadicOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@concatExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__concatExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_concatExpressionAST * operand_27465,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27465 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_27465->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_27465->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (580)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_27465->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_27465->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (583)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (585)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (588)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (589))).operator_and (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (589)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("."),  operand_27465->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (586)) ;
    var_cas_outExpression = GGS_concatExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_27465->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (594)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@orExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__orExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_orExpressionAST * operand_28619,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28619 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_28619->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_28619->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (612)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_28619->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_28619->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (615)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (617)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (620)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (621))).operator_and (function_binaryOrOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (621)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("|"),  operand_28619->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (618)) ;
    var_cas_outExpression = GGS_orExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_28619->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (626)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@andExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_andExpressionAST * operand_29766,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29766 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_29766->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29766->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (644)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_29766->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29766->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (647)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (649)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (652)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (653))).operator_and (function_binaryAndOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (653)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("&"),  operand_29766->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (650)) ;
    var_cas_outExpression = GGS_andExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_29766->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (658)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@xorExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__xorExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_xorExpressionAST * operand_30915,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30915 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_30915->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_30915->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (676)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_30915->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_30915->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (679)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (681)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (684)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (685))).operator_and (function_binaryXorOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (685)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("^"),  operand_30915->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (682)) ;
    var_cas_outExpression = GGS_xorExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_30915->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (690)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@equalExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__equalExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_equalExpressionAST * operand_32066,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32066 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_32066->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32066->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (708)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_32066->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_32066->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (711)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (713)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) ;
    const GGS_bool cond_33072 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (715)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (715))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (715)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (715))) ;
    if (cond_33072.isBuiltAndTrue ()) {
      operand_32066->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (717)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (717)))).operator_concat (GGS_string ("': '==' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (720)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_33072.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_equalExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_32066->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (722)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@notEqualExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_notEqualExpressionAST * operand_33438,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33438 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_33438->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_33438->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (741)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_33438->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_33438->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (744)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (746)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (747)) ;
    const GGS_bool cond_34444 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (748)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (748))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (748)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (748))) ;
    if (cond_34444.isBuiltAndTrue ()) {
      operand_33438->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (750)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (750)))).operator_concat (GGS_string ("': '!=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (753)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_34444.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_33438->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (755)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lowerOrEqualExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_lowerOrEqualExpressionAST * operand_34817,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34817 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_34817->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_34817->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (774)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_34817->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_34817->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (777)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (779)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (780)) ;
    const GGS_bool cond_35788 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (781))).operator_and (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (781)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_35788.isBuiltAndTrue ()) {
      operand_34817->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (783)))).operator_concat (GGS_string ("' and does not support the '<=' operator")) COMMA_SOURCE_FILE_AT_LINE (786)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_35788.isBuiltAndFalse ()) {
      const GGS_bool cond_36057 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (786)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (786))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (786)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (786))) ;
      if (cond_36057.isBuiltAndTrue ()) {
        operand_34817->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (788)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (788)))).operator_concat (GGS_string ("': '<=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (791)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_36057.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_lowerOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_34817->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (793)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@greaterOrEqualExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_greaterOrEqualExpressionAST * operand_36436,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36436 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36436->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_36436->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (812)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36436->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_36436->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (815)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (817)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (818)) ;
    const GGS_bool cond_37407 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (819))).operator_and (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (819)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_37407.isBuiltAndTrue ()) {
      operand_36436->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (821)))).operator_concat (GGS_string ("' and does not support the '>=' operator")) COMMA_SOURCE_FILE_AT_LINE (824)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_37407.isBuiltAndFalse ()) {
      const GGS_bool cond_37676 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (824)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (824))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (824)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (824))) ;
      if (cond_37676.isBuiltAndTrue ()) {
        operand_36436->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (826)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (826)))).operator_concat (GGS_string ("': '>=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (829)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_37676.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_greaterOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_36436->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (831)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@strictGreaterExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictGreaterExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_strictGreaterExpressionAST * operand_38056,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38056 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_38056->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38056->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (850)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_38056->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38056->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (853)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (855)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (856)) ;
    const GGS_bool cond_39026 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (857))).operator_and (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (857)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_39026.isBuiltAndTrue ()) {
      operand_38056->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (859)))).operator_concat (GGS_string ("' and does not support the '>' operator")) COMMA_SOURCE_FILE_AT_LINE (862)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_39026.isBuiltAndFalse ()) {
      const GGS_bool cond_39294 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (862)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (862))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (862)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (862))) ;
      if (cond_39294.isBuiltAndTrue ()) {
        operand_38056->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (864)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (864)))).operator_concat (GGS_string ("': '>' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (867)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_39294.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictGreaterExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_38056->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (869)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@strictLowerExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictLowerExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_strictLowerExpressionAST * operand_39671,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39671 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_39671->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39671->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (888)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_39671->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39671->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (891)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (893)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (894)) ;
    const GGS_bool cond_40641 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (895))).operator_and (function_doNotGenererateObjectCompare (inLexique COMMA_SOURCE_FILE_AT_LINE (895)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_40641.isBuiltAndTrue ()) {
      operand_39671->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (897)))).operator_concat (GGS_string ("' and does not support the '<' operator")) COMMA_SOURCE_FILE_AT_LINE (900)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_40641.isBuiltAndFalse ()) {
      const GGS_bool cond_40909 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (900)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (900))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (900)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (900))) ;
      if (cond_40909.isBuiltAndTrue ()) {
        operand_39671->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (902)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (902)))).operator_concat (GGS_string ("': '<' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (905)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_40909.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictLowerExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_39671->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (907)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@rightShiftExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__rightShiftExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_rightShiftExpressionAST * operand_41283,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41283 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41283->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41283->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (926)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41283->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41283->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (929)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (931)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (932)) ;
    const GGS_bool cond_42244 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (933))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (933)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_42244.isBuiltAndTrue ()) {
      operand_41283->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (935)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (938)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_42244.isBuiltAndFalse ()) {
      const GGS_bool cond_42445 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (938)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (938))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_42445.isBuiltAndTrue ()) {
        operand_41283->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (940)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (943)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_42445.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_41283->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (945)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@leftShiftExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__leftShiftExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_leftShiftExpressionAST * operand_42797,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42797 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42797->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42797->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (964)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42797->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42797->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (967)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (969)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (970)) ;
    const GGS_bool cond_43758 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (971))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (971)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_43758.isBuiltAndTrue ()) {
      operand_42797->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (973)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (976)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_43758.isBuiltAndFalse ()) {
      const GGS_bool cond_43959 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (976)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (976))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_43959.isBuiltAndTrue ()) {
        operand_42797->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (978)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (981)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_43959.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_42797->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (983)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@addExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_addExpressionAST * operand_44305,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44305 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44305->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44305->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1002)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44305->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44305->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1005)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1007)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1010)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1011))).operator_and (function_binaryAddOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1011)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("+"),  operand_44305->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1008)) ;
    var_cas_outExpression = GGS_addExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_44305->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1016)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@subExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__subExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_subExpressionAST * operand_45454,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45454 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_45454->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45454->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1034)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_45454->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45454->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1037)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1042)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1043))).operator_and (function_binarySubOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1043)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("-"),  operand_45454->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1040)) ;
    var_cas_outExpression = GGS_subExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_45454->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1048)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@multiplicationExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__multiplicationExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_multiplicationExpressionAST * operand_46614,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46614 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46614->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46614->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1066)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46614->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46614->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1069)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1074)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1075))).operator_and (function_binaryMulOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1075)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("*"),  operand_46614->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1072)) ;
    var_cas_outExpression = GGS_multiplicationExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_46614->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1080)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@divisionExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__divisionExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_divisionExpressionAST * operand_47779,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47779 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47779->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47779->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1098)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47779->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47779->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1101)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1106)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1107))).operator_and (function_binaryDivOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1107)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("/"),  operand_47779->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1104)) ;
    var_cas_outExpression = GGS_divisionExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_47779->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1112)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@moduloExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__moduloExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_moduloExpressionAST * operand_48936,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48936 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48936->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48936->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1130)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48936->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48936->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1133)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1138)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1139))).operator_and (function_binaryModOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1139)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("mod"),  operand_48936->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1136)) ;
    var_cas_outExpression = GGS_moduloExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_48936->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1144)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@unaryMinusExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__unaryMinusExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_unaryMinusExpressionAST * operand_50097,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50097 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_50097->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_50097->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1162)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)) ;
    const GGS_bool cond_50754 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1165))).operator_and (function_unaryMinusOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_50754.isBuiltAndTrue ()) {
      operand_50097->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)))).operator_concat (GGS_string ("' and does not support the unary minus operator")) COMMA_SOURCE_FILE_AT_LINE (1170)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_50754.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_unaryMinusExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_50097->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1172)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@notExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_notExpressionAST * operand_51069,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51069 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_51069->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_51069->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1192)) ;
    const GGS_bool cond_51718 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1193))).operator_and (function_unaryNotOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1193)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_51718.isBuiltAndTrue ()) {
      operand_51069->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1195)))).operator_concat (GGS_string ("' and does not support the 'not' operator")) COMMA_SOURCE_FILE_AT_LINE (1198)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_51718.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_51069->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1200)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@complementExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__complementExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_complementExpressionAST * operand_52033,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52033 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52033->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52033->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1218)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1220)) ;
    const GGS_bool cond_52682 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1221))).operator_and (function_unaryTildeOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1221)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_52682.isBuiltAndTrue ()) {
      operand_52033->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1223)))).operator_concat (GGS_string ("' and does not support the '~' operator")) COMMA_SOURCE_FILE_AT_LINE (1226)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_52682.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_complementExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_52033->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1228)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ifExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_ifExpressionAST * operand_52996,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52996 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52996->mIfExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52996->mIfExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (1246)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_then_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52996->mThenExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52996->mThenExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_then_expression COMMA_SOURCE_FILE_AT_LINE (1249)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_else_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52996->mElseExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52996->mElseExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (1252)) ;
      }
    }
    const GGS_bool cond_54013 = (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1254)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1254)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1254))).operator_isNotEqual (GGS_string ("bool")) ;
    if (cond_54013.isBuiltAndTrue ()) {
      operand_52996->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the test expression type is '@")).operator_concat (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1256)))).operator_concat (GGS_string ("', it should be '@bool'")) COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_54013.isBuiltAndFalse ()) {
      const GGS_bool cond_54275 = (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1259))).operator_isNotEqual (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1259))) ;
      if (cond_54275.isBuiltAndTrue ()) {
        operand_52996->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand expression types are '@")).operator_concat (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)))).operator_concat (GGS_string ("' and '@"))).operator_concat (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)))).operator_concat (GGS_string ("': they should be the same")) COMMA_SOURCE_FILE_AT_LINE (1264)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_54275.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_ifExpressionForGeneration ::constructor_new (inLexique, var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1267)), operand_52996->mOperatorLocation, var_cas_if_expression, var_cas_then_expression, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (1266)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@functionCallExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionCallExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_functionCallExpressionAST * operand_54659,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54659 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (1284)) ;
    inLexique.printMessage (GGS_string ("@functionCallExpressionAST analyzeSemanticExpression\n") COMMA_SOURCE_FILE_AT_LINE (1285)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@varInExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__varInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_varInExpressionAST * operand_55144,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55144 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (1296)) ;
    inLexique.printMessage (GGS_string ("@varInExpressionAST analyzeSemanticExpression\n") COMMA_SOURCE_FILE_AT_LINE (1297)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalTypeInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalTypeInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalTypeInExpressionAST * operand_55630,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55630 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (1308)) ;
    inLexique.printMessage (GGS_string ("@literalTypeInExpressionAST analyzeSemanticExpression\n") COMMA_SOURCE_FILE_AT_LINE (1309)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_castInExpressionAST * operand_56117,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56117 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (1320)) ;
    inLexique.printMessage (GGS_string ("@castInExpressionAST analyzeSemanticExpression\n") COMMA_SOURCE_FILE_AT_LINE (1321)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperObjectInstanciationInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperObjectInstanciationInExpressionAST * operand_56623,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56623 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (1332)) ;
    inLexique.printMessage (GGS_string ("@filewrapperObjectInstanciationInExpressionAST analyzeSemanticExpression\n") COMMA_SOURCE_FILE_AT_LINE (1333)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@filewrapperInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperInExpressionAST * operand_57136,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57136 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (1344)) ;
    inLexique.printMessage (GGS_string ("@filewrapperInExpressionAST analyzeSemanticExpression\n") COMMA_SOURCE_FILE_AT_LINE (1345)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperTemplateInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperTemplateInExpressionAST * operand_57638,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57638 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType COMMA_SOURCE_FILE_AT_LINE (1356)) ;
    inLexique.printMessage (GGS_string ("@filewrapperTemplateInExpressionAST analyzeSemanticExpression\n") COMMA_SOURCE_FILE_AT_LINE (1357)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticExpressionAnalysis (void) {
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__selfInExpressionAST__analyzeSemanticExpression, gClassInfoFor__selfInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__hereExpressionAST__analyzeSemanticExpression, gClassInfoFor__hereExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__trueExpressionAST__analyzeSemanticExpression, gClassInfoFor__trueExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__falseExpressionAST__analyzeSemanticExpression, gClassInfoFor__falseExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalCharExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalCharExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalStringExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalStringExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalDoubleExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalDoubleExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__constructorExpressionAST__analyzeSemanticExpression, gClassInfoFor__constructorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__readerCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__readerCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__optionExpressionAST__analyzeSemanticExpression, gClassInfoFor__optionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__concatExpressionAST__analyzeSemanticExpression, gClassInfoFor__concatExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__orExpressionAST__analyzeSemanticExpression, gClassInfoFor__orExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__andExpressionAST__analyzeSemanticExpression, gClassInfoFor__andExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__xorExpressionAST__analyzeSemanticExpression, gClassInfoFor__xorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__equalExpressionAST__analyzeSemanticExpression, gClassInfoFor__equalExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__notEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__lowerOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__greaterOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictGreaterExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictGreaterExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictLowerExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictLowerExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__rightShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__rightShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__leftShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__leftShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__addExpressionAST__analyzeSemanticExpression, gClassInfoFor__addExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__subExpressionAST__analyzeSemanticExpression, gClassInfoFor__subExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__multiplicationExpressionAST__analyzeSemanticExpression, gClassInfoFor__multiplicationExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__divisionExpressionAST__analyzeSemanticExpression, gClassInfoFor__divisionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__moduloExpressionAST__analyzeSemanticExpression, gClassInfoFor__moduloExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__unaryMinusExpressionAST__analyzeSemanticExpression, gClassInfoFor__unaryMinusExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notExpressionAST__analyzeSemanticExpression, gClassInfoFor__notExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__complementExpressionAST__analyzeSemanticExpression, gClassInfoFor__complementExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__ifExpressionAST__analyzeSemanticExpression, gClassInfoFor__ifExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__functionCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__functionCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__varInExpressionAST__analyzeSemanticExpression, gClassInfoFor__varInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalTypeInExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalTypeInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__castInExpressionAST__analyzeSemanticExpression, gClassInfoFor__castInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperObjectInstanciationInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperTemplateInExpressionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticExpressionAnalysis (void) {
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticExpressionAnalysis (prologueRoutineFor_semanticExpressionAnalysis, epilogueRoutineFor_semanticExpressionAnalysis) ;

//---------------------------------------------------------------------------*

