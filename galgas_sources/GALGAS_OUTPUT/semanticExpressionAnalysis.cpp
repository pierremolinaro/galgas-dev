//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'semanticExpressionAnalysis.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 13th, 2010, at 13h2'22"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "semanticExpressionAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticExpressionAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of once function "selfMarkName"               *
//                                                                           *
//---------------------------------------------------------------------------*

static GGS_string gCachedResultForOnceFunction_selfMarkName ;
static bool gCacheFlagForOnceFunction_selfMarkName = false ;

//---------------------------------------------------------------------------*

GGS_string function_selfMarkName (C_CompilerEx & COMMA_UNUSED_LOCATION_ARGS) {
  if (! gCacheFlagForOnceFunction_selfMarkName) {
    #ifdef DEBUG_TRACE_ENABLED
      printf ("ENTER function_selfMarkName at %s:%d\n", __FILE__, __LINE__) ;
    #endif
  GGS_string var_cas_outCompilerCppName ;
    var_cas_outCompilerCppName = GGS_string ("-self-") ;
    #ifdef DEBUG_TRACE_ENABLED
      printf ("LEAVE function_selfMarkName\n") ;
    #endif
    gCacheFlagForOnceFunction_selfMarkName = true ;
    gCachedResultForOnceFunction_selfMarkName = var_cas_outCompilerCppName ;
  }
  return gCachedResultForOnceFunction_selfMarkName ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_selfMarkName (C_CompilerEx & inLexique,
                           const GGS_objectlist & /* inEffectiveParameterArray */,
                           const GGS_location & /* inErrorLocation */
                           COMMA_LOCATION_ARGS) {
  const GGS_string result = function_selfMarkName (inLexique
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

const C_galgas_function_descriptorEX kFunction_descriptor_selfMarkName ("selfMarkName",
                              functionForGenericCall_selfMarkName,
                              & kTypeDescriptor_GGS_string,
                              0,
                              NULL) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     AUTOMATON FOR '@variableMap' MAP                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_1 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_1_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_2 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_2_0 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_2 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_3 [32] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_3_3 [53] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_0 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_2 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_3 [38] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_6 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_6_0 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_3 [41] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_8 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kStateMessageForMap_variableMap_10 [82] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_10_0 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_2 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_3 [52] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_0 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_1 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_2 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_3 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_12 [83] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_12_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_0 [58] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_15 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_17_0 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_2 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_3 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_0 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_1 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_2 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_3 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_1 [31] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_2 [32] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_3 [31] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonTransitionEx kAutomaton_variableMap [20] [4] = {
  { // State 'usedLocalConstant'
    {0, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_0_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_0_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_0_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'localConstant'
    {0, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_1_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_1_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_1_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'undefinedLocalVariable'
    {2, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_2_0}, // 'readAccess' -> 'undefinedLocalVariable'
    {3, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {2, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_2_2}, // 'readWriteAccess' -> 'undefinedLocalVariable'
    {2, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_2_3}, // 'dropAccess' -> 'undefinedLocalVariable'
  },
  { // State 'definedLocalVariable'
    {4, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {4, kMapAutomatonNoIssueEx, NULL}, // 'readWriteAccess' -> 'usedLocalVariable'
    {5, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_3_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'usedLocalVariable'
    {4, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonNoIssueEx, NULL}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonNoIssueEx, NULL}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'droppedLocalVariable'
    {5, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_5_0}, // 'readAccess' -> 'droppedLocalVariable'
    {3, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_5_2}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_5_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'undefinedOutputFormalArgument'
    {6, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_6_0}, // 'readAccess' -> 'undefinedOutputFormalArgument'
    {7, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'definedOutputFormalArgument'
    {6, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_6_2}, // 'readWriteAccess' -> 'undefinedOutputFormalArgument'
    {6, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_6_3}, // 'dropAccess' -> 'undefinedOutputFormalArgument'
  },
  { // State 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssueEx, NULL}, // 'readWriteAccess' -> 'definedOutputFormalArgument'
    {6, kMapAutomatonNoIssueEx, NULL}, // 'dropAccess' -> 'undefinedOutputFormalArgument'
  },
  { // State 'unusedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssueEx, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonNoIssueEx, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssueEx, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonNoIssueEx, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'droppedInputOutputFormalArgument'
    {10, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_10_0}, // 'readAccess' -> 'droppedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_10_2}, // 'readWriteAccess' -> 'droppedInputOutputFormalArgument'
    {10, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_10_3}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'inputOutputFormalArgumentDeclaredAsUnused'
    {9, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_11_0}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_11_1}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_11_2}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_11_3}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'constantInputFormalArgument'
    {13, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_12_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_12_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_12_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'usedConstantInputFormalArgument'
    {13, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_13_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_13_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_13_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'constantInputFormalArgumentDeclaredAsUnused'
    {13, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_14_0}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_14_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_14_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_14_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'inputFormalParameter'
    {16, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssueEx, NULL}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonNoIssueEx, NULL}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssueEx, NULL}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonNoIssueEx, NULL}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'droppedInputFormalArgument'
    {17, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_17_0}, // 'readAccess' -> 'droppedInputFormalArgument'
    {16, kMapAutomatonNoIssueEx, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_17_2}, // 'readWriteAccess' -> 'droppedInputFormalArgument'
    {17, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_17_3}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'inputFormalArgumentDeclaredAsUnused'
    {16, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_18_0}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_18_1}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_18_2}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonIssueWarningEx, kIssueMessageForMap_variableMap_18_3}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'currentInstanceAttribute'
    {19, kMapAutomatonNoIssueEx, NULL}, // 'readAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_19_1}, // 'writeAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_19_2}, // 'readWriteAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueErrorEx, kIssueMessageForMap_variableMap_19_3}, // 'dropAccess' -> 'currentInstanceAttribute'
  },
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonFinalIssueEx kFinalIssue_variableMap [20] = {
  {kMapAutomatonNoIssueEx, NULL}, // State 'usedLocalConstant'
  {kMapAutomatonIssueWarningEx, kStateMessageForMap_variableMap_1}, // State 'localConstant'
  {kMapAutomatonIssueWarningEx, kStateMessageForMap_variableMap_2}, // State 'undefinedLocalVariable'
  {kMapAutomatonNoIssueEx, NULL}, // State 'definedLocalVariable'
  {kMapAutomatonNoIssueEx, NULL}, // State 'usedLocalVariable'
  {kMapAutomatonNoIssueEx, NULL}, // State 'droppedLocalVariable'
  {kMapAutomatonIssueErrorEx, kStateMessageForMap_variableMap_6}, // State 'undefinedOutputFormalArgument'
  {kMapAutomatonNoIssueEx, NULL}, // State 'definedOutputFormalArgument'
  {kMapAutomatonIssueWarningEx, kStateMessageForMap_variableMap_8}, // State 'unusedInputOutputFormalArgument'
  {kMapAutomatonNoIssueEx, NULL}, // State 'usedInputOutputFormalArgument'
  {kMapAutomatonIssueErrorEx, kStateMessageForMap_variableMap_10}, // State 'droppedInputOutputFormalArgument'
  {kMapAutomatonNoIssueEx, NULL}, // State 'inputOutputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonIssueWarningEx, kStateMessageForMap_variableMap_12}, // State 'constantInputFormalArgument'
  {kMapAutomatonNoIssueEx, NULL}, // State 'usedConstantInputFormalArgument'
  {kMapAutomatonNoIssueEx, NULL}, // State 'constantInputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonIssueWarningEx, kStateMessageForMap_variableMap_15}, // State 'inputFormalParameter'
  {kMapAutomatonNoIssueEx, NULL}, // State 'usedInputFormalArgument'
  {kMapAutomatonNoIssueEx, NULL}, // State 'droppedInputFormalArgument'
  {kMapAutomatonNoIssueEx, NULL}, // State 'inputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonNoIssueEx, NULL}, // State 'currentInstanceAttribute'
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_variableMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_variableMap::e_variableMap (void) :
mTypeProxy (),
mCppName (),
mNameForCheckingFormalParameterUsing () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@variableMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_variableMap ("variableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_variableMap::
elementOf_GGS_variableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_variableMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_variableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTypeProxy.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mCppName.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mNameForCheckingFormalParameterUsing.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_variableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_variableMap * ptr = dynamic_cast <const elementOf_GGS_variableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTypeProxy.operator_isEqual (ptr->mInfo.mTypeProxy)).boolValue ()
           && (mInfo.mCppName.operator_isEqual (ptr->mInfo.mCppName)).boolValue ()
           && (mInfo.mNameForCheckingFormalParameterUsing.operator_isEqual (ptr->mInfo.mNameForCheckingFormalParameterUsing)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_variableMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_emptyMap (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_variableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_insertFakeKey (C_CompilerEx & inCompiler,
                         const GGS_string & inKey,
                         const GGS_location & inHelperMessageErrorLocation,
                         const GGS_string & inHelperMessage
                         COMMA_LOCATION_ARGS) {
  e_variableMap info  ;
  internal_insertFakeKey (inCompiler,
                          (void *) & info,
                          inKey,
                          inHelperMessageErrorLocation,
                          inHelperMessage
                          COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isNotEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
insertElement (C_CompilerEx & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               const GGS_string& inParameter1,
               const GGS_string& inParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inParameter2.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_variableMap info  ;
    info.mTypeProxy = inParameter0 ;
    info.mCppName = inParameter1 ;
    info.mNameForCheckingFormalParameterUsing = inParameter2 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
searchElement (C_CompilerEx & inLexique,
               const PMUInt32 inActionIndex,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_string  & outParameter1,
               GGS_string  & outParameter2,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    AC_galgas_map_element * p = internal_search (inLexique, inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    outParameter2.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    node->performTransition (inLexique, inKey, kAutomaton_variableMap [node->mCurrentState][inActionIndex] COMMA_THERE) ;
    outParameter0 = node->mInfo.mTypeProxy ;
    outParameter1 = node->mInfo.mCppName ;
    outParameter2 = node->mInfo.mNameForCheckingFormalParameterUsing ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::method_checkAutomatonStates (C_CompilerEx & inLexique,
                                             const GGS_location & inErrorLocation
                                             COMMA_LOCATION_ARGS) const {
  checkAutomatonStates (inLexique, inErrorLocation, kFinalIssue_variableMap COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForDropAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadAccess (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1,
                                GGS_string  & outParameter2 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchForReadAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForWriteAccess (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1,
                                GGS_string  & outParameter2 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 1,
                 kSearchMessage_searchForWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadWriteAccess (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1,
                                GGS_string  & outParameter2 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 2,
                 kSearchMessage_searchForReadWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForDropAccess (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1,
                                GGS_string  & outParameter2 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 3,
                 kSearchMessage_searchForDropAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 outParameter2,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertNonMutableAttribute [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertUndefinedLocalVariable [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertDefinedLocalVariable [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertUsedLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertNonMutableAttribute (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 19,
                 kInsertMessage_insertNonMutableAttribute,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertUndefinedLocalVariable (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 2,
                 kInsertMessage_insertUndefinedLocalVariable,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertDefinedLocalVariable (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 3,
                 kInsertMessage_insertDefinedLocalVariable,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertLocalConstant (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 1,
                 kInsertMessage_insertLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertUsedLocalConstant (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertUsedLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgument (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 15,
                 kInsertMessage_insertInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgumentDeclaredAsUnused (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 18,
                 kInsertMessage_insertInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgument (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 12,
                 kInsertMessage_insertConstantInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgumentDeclaredAsUnused (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 14,
                 kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertOutputFormalArgument (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 6,
                 kInsertMessage_insertOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgument (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 8,
                 kInsertMessage_insertInputOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgumentDeclaredAsUnused (C_CompilerEx & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1,
                                const GGS_string& inParameter2 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 11,
                 kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                 inParameter2,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_mapWithMapToOverride (C_CompilerEx & /* inLexique */,
                                  const GGS_variableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
reader_overriddenMap (C_CompilerEx & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_variableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_variableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @variableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_variableMap::cEnumerator::_mTypeProxy (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTypeProxy ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_variableMap::cEnumerator::_mCppName (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mCppName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_variableMap::cEnumerator::_mNameForCheckingFormalParameterUsing (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mNameForCheckingFormalParameterUsing ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_variableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_variableMap * p = NULL ;
    macroMyNew (p, GGS_variableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_variableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_variableMap * p = dynamic_cast <const GGS_variableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_variableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_variableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_variableMap ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalConstantState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (0) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfLocalConstantState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (1) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedLocalVariableState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (2) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedLocalVariableState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (3) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalVariableState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (4) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedLocalVariableState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (5) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedOutputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (6) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedOutputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (7) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUnusedInputOutputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (8) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputOutputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (9) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputOutputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (10) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputOutputFormalArgumentDeclaredAsUnusedState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (11) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (12) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedConstantInputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (13) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalArgumentDeclaredAsUnusedState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (14) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalParameterState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (15) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (16) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputFormalArgumentState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (17) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalArgumentDeclaredAsUnusedState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (18) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfCurrentInstanceAttributeState (C_CompilerEx & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (19) ;
}

//---------------------------------------------------------------------------*

// Override 'selectBlock'
//---------------------------------------------------------------------------*

static const cBranchOverrideTransformationDescriptorEx kBranchBehaviourForOverride_selectBlock_forMap_variableMap [26] = {
  {1, 0, 0, kMapAutomatonNoIssueEx, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 3, kMapAutomatonNoIssueEx, NULL}, // undefinedLocalVariable, definedLocalVariable, definedLocalVariable
  {2, 4, 4, kMapAutomatonNoIssueEx, NULL}, // undefinedLocalVariable, usedLocalVariable, usedLocalVariable
  {2, 5, 5, kMapAutomatonNoIssueEx, NULL}, // undefinedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssueEx, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 5, kMapAutomatonNoIssueEx, NULL}, // definedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {4, 3, 3, kMapAutomatonNoIssueEx, NULL}, // usedLocalVariable, definedLocalVariable, definedLocalVariable
  {4, 5, 5, kMapAutomatonNoIssueEx, NULL}, // usedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {5, 3, 3, kMapAutomatonNoIssueEx, NULL}, // droppedLocalVariable, definedLocalVariable, definedLocalVariable
  {5, 4, 4, kMapAutomatonNoIssueEx, NULL}, // droppedLocalVariable, usedLocalVariable, usedLocalVariable
  {6, 7, 7, kMapAutomatonNoIssueEx, NULL}, // undefinedOutputFormalArgument, definedOutputFormalArgument, definedOutputFormalArgument
  {7, 6, 6, kMapAutomatonNoIssueEx, NULL}, // definedOutputFormalArgument, undefinedOutputFormalArgument, undefinedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssueEx, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 10, kMapAutomatonNoIssueEx, NULL}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {9, 10, 10, kMapAutomatonNoIssueEx, NULL}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {10, 9, 9, kMapAutomatonNoIssueEx, NULL}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 9, 9, kMapAutomatonNoIssueEx, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 10, 10, kMapAutomatonNoIssueEx, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {12, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 17, kMapAutomatonNoIssueEx, NULL}, // inputFormalParameter, droppedInputFormalArgument, droppedInputFormalArgument
  {16, 17, 17, kMapAutomatonNoIssueEx, NULL}, // usedInputFormalArgument, droppedInputFormalArgument, droppedInputFormalArgument
  {17, 16, 16, kMapAutomatonNoIssueEx, NULL}, // droppedInputFormalArgument, usedInputFormalArgument, usedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 17, kMapAutomatonNoIssueEx, NULL}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, droppedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

// Override 'selectBlock'
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_3 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_4 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_2 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_5 [72] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_2 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_5 [72] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_3 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_4 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_6_7 [90] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_7_6 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_8_10 [94] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_9_10 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_8 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_9 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_11 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_11_10 [93] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_15_17 [80] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_16_17 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_15 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_16 [87] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptorEx kBranchCombinationForOverride_selectBlock_forMap_variableMap [40] = {
  {0, 1, 0, kMapAutomatonNoIssueEx, NULL}, // usedLocalConstant, localConstant, usedLocalConstant
  {1, 0, 0, kMapAutomatonNoIssueEx, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 3, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_3}, // undefinedLocalVariable, definedLocalVariable, definedLocalVariable
  {2, 4, 2, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_4}, // undefinedLocalVariable, usedLocalVariable, undefinedLocalVariable
  {2, 5, 5, kMapAutomatonNoIssueEx, NULL}, // undefinedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {3, 2, 3, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_2}, // definedLocalVariable, undefinedLocalVariable, definedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssueEx, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 3, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_5}, // definedLocalVariable, droppedLocalVariable, definedLocalVariable
  {4, 2, 4, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_2}, // usedLocalVariable, undefinedLocalVariable, usedLocalVariable
  {4, 3, 4, kMapAutomatonNoIssueEx, NULL}, // usedLocalVariable, definedLocalVariable, usedLocalVariable
  {4, 5, 4, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_5}, // usedLocalVariable, droppedLocalVariable, usedLocalVariable
  {5, 2, 5, kMapAutomatonNoIssueEx, NULL}, // droppedLocalVariable, undefinedLocalVariable, droppedLocalVariable
  {5, 3, 5, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_3}, // droppedLocalVariable, definedLocalVariable, droppedLocalVariable
  {5, 4, 5, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_4}, // droppedLocalVariable, usedLocalVariable, droppedLocalVariable
  {6, 7, 7, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_6_7}, // undefinedOutputFormalArgument, definedOutputFormalArgument, definedOutputFormalArgument
  {7, 6, 7, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_7_6}, // definedOutputFormalArgument, undefinedOutputFormalArgument, definedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssueEx, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 8, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_8_10}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {9, 8, 9, kMapAutomatonNoIssueEx, NULL}, // usedInputOutputFormalArgument, unusedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 10, 9, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_9_10}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 11, 11, kMapAutomatonNoIssueEx, NULL}, // usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, inputOutputFormalArgumentDeclaredAsUnused
  {10, 8, 8, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_8}, // droppedInputOutputFormalArgument, unusedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {10, 9, 9, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_9}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {10, 11, 11, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_11}, // droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, inputOutputFormalArgumentDeclaredAsUnused
  {11, 9, 11, kMapAutomatonNoIssueEx, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {11, 10, 11, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_11_10}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {12, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {13, 12, 13, kMapAutomatonNoIssueEx, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgument, usedConstantInputFormalArgument
  {13, 14, 13, kMapAutomatonNoIssueEx, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 15, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_15_17}, // inputFormalParameter, droppedInputFormalArgument, inputFormalParameter
  {16, 15, 16, kMapAutomatonNoIssueEx, NULL}, // usedInputFormalArgument, inputFormalParameter, usedInputFormalArgument
  {16, 17, 16, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_16_17}, // usedInputFormalArgument, droppedInputFormalArgument, usedInputFormalArgument
  {16, 18, 16, kMapAutomatonNoIssueEx, NULL}, // usedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument
  {17, 15, 17, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_15}, // droppedInputFormalArgument, inputFormalParameter, droppedInputFormalArgument
  {17, 16, 16, kMapAutomatonIssueErrorEx, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_16}, // droppedInputFormalArgument, usedInputFormalArgument, usedInputFormalArgument
  {17, 18, 17, kMapAutomatonNoIssueEx, NULL}, // droppedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 17, kMapAutomatonNoIssueEx, NULL}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, droppedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_openOverrideForSelectBlock (C_CompilerEx & inLexique
                                COMMA_LOCATION_ARGS) {
  if (isBuilt ()) {
    beginOverride (kBranchBehaviourForOverride_selectBlock_forMap_variableMap, 26,
                   kBranchCombinationForOverride_selectBlock_forMap_variableMap, 40,
                   "selectBlock",
                   inLexique COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*

// Override 'repeatBlock'
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_2_3 [56] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_2_4 [56] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_3_5 [54] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_4_5 [54] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_5_3 [54] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_5_4 [64] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_6_7 [70] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_7_6 [68] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_8_10 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_9_10 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_10_9 [65] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_11_10 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_15_17 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_16_17 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_17_16 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_18_17 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

static const cBranchOverrideTransformationDescriptorEx kBranchBehaviourForOverride_repeatBlock_forMap_variableMap [26] = {
  {1, 0, 0, kMapAutomatonNoIssueEx, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 2, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_2_3}, // undefinedLocalVariable, definedLocalVariable, undefinedLocalVariable
  {2, 4, 2, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_2_4}, // undefinedLocalVariable, usedLocalVariable, undefinedLocalVariable
  {2, 5, 5, kMapAutomatonNoIssueEx, NULL}, // undefinedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssueEx, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 3, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_3_5}, // definedLocalVariable, droppedLocalVariable, definedLocalVariable
  {4, 3, 3, kMapAutomatonNoIssueEx, NULL}, // usedLocalVariable, definedLocalVariable, definedLocalVariable
  {4, 5, 4, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_4_5}, // usedLocalVariable, droppedLocalVariable, usedLocalVariable
  {5, 3, 5, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_5_3}, // droppedLocalVariable, definedLocalVariable, droppedLocalVariable
  {5, 4, 5, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_5_4}, // droppedLocalVariable, usedLocalVariable, droppedLocalVariable
  {6, 7, 6, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_6_7}, // undefinedOutputFormalArgument, definedOutputFormalArgument, undefinedOutputFormalArgument
  {7, 6, 7, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_7_6}, // definedOutputFormalArgument, undefinedOutputFormalArgument, definedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssueEx, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 8, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_8_10}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {9, 10, 9, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_9_10}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, usedInputOutputFormalArgument
  {10, 9, 10, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_10_9}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {11, 9, 9, kMapAutomatonNoIssueEx, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 10, 11, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_11_10}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {12, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 15, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_15_17}, // inputFormalParameter, droppedInputFormalArgument, inputFormalParameter
  {16, 17, 16, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_16_17}, // usedInputFormalArgument, droppedInputFormalArgument, usedInputFormalArgument
  {17, 16, 17, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_17_16}, // droppedInputFormalArgument, usedInputFormalArgument, droppedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 18, kMapAutomatonIssueErrorEx, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_18_17}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, inputFormalArgumentDeclaredAsUnused
} ;

//---------------------------------------------------------------------------*

// Override 'repeatBlock'
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptorEx kBranchCombinationForOverride_repeatBlock_forMap_variableMap [18] = {
  {0, 1, 0, kMapAutomatonNoIssueEx, NULL}, // usedLocalConstant, localConstant, usedLocalConstant
  {1, 0, 0, kMapAutomatonNoIssueEx, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 5, 5, kMapAutomatonNoIssueEx, NULL}, // undefinedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssueEx, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {4, 3, 4, kMapAutomatonNoIssueEx, NULL}, // usedLocalVariable, definedLocalVariable, usedLocalVariable
  {5, 2, 5, kMapAutomatonNoIssueEx, NULL}, // droppedLocalVariable, undefinedLocalVariable, droppedLocalVariable
  {8, 9, 9, kMapAutomatonNoIssueEx, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 8, 9, kMapAutomatonNoIssueEx, NULL}, // usedInputOutputFormalArgument, unusedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 11, 9, kMapAutomatonNoIssueEx, NULL}, // usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument
  {11, 9, 9, kMapAutomatonNoIssueEx, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {12, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {13, 12, 13, kMapAutomatonNoIssueEx, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgument, usedConstantInputFormalArgument
  {13, 14, 13, kMapAutomatonNoIssueEx, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssueEx, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {16, 15, 16, kMapAutomatonNoIssueEx, NULL}, // usedInputFormalArgument, inputFormalParameter, usedInputFormalArgument
  {16, 18, 16, kMapAutomatonNoIssueEx, NULL}, // usedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssueEx, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_openOverrideForRepeatBlock (C_CompilerEx & inLexique
                                COMMA_LOCATION_ARGS) {
  if (isBuilt ()) {
    beginOverride (kBranchBehaviourForOverride_repeatBlock_forMap_variableMap, 26,
                   kBranchCombinationForOverride_repeatBlock_forMap_variableMap, 18,
                   "repeatBlock",
                   inLexique COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_closeBranch (C_CompilerEx & inCompiler,
                       const GGS_location & inErrorLocation
                       COMMA_LOCATION_ARGS) {
  internalEndBranch (inCompiler, inErrorLocation, kFinalIssue_variableMap COMMA_THERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkAssignmentTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkAssignmentTypes (C_CompilerEx & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inTargetType,
                                const GGS_unifiedTypeMapProxy   var_cas_inSourceType,
                                const GGS_location   var_cas_inErrorLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkAssignmentTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapProxy  var_cas_sourceType = var_cas_inSourceType ;
  GGS_bool var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_inSourceType) ;
  GGS_uint _variant_24360 = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (314)) ;
  GGS_bool _condition_24360 (_variant_24360.isBuilt (), true) ;
  while (_condition_24360.isBuiltAndTrue ()) {
    _condition_24360 = ((var_cas_ok).operator_not ()).operator_and ((var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (314)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (314))).operator_not ()) ;
    if (_condition_24360.isBuiltAndTrue ()) {
      if (_variant_24360.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (317)) ;
        _condition_24360 = GGS_bool (false) ;
      }else{
        _variant_24360.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_sourceType = var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (315)) ;
        var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_sourceType) ;
      }
    }
  }
  const GGS_bool cond_24540 = (var_cas_ok).operator_not () ;
  if (cond_24540.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("target object type is '@")).operator_concat (var_cas_inTargetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (319)))).operator_concat (GGS_string ("' and cannot be assigned by an '@"))).operator_concat (var_cas_inSourceType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (319)))).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (320)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkAssignmentTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'predefinedTypes' struct                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_predefinedTypes ("predefinedTypes", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_predefinedTypes::GGS_predefinedTypes (void) :
mLocationType (),
mBoolType (),
mCharType (),
mStringType (),
mUIntType (),
mSIntType (),
mUInt64Type (),
mSInt64Type (),
mDoubleType (),
mLBoolType (),
mLCharType (),
mLStringType (),
mLUIntType (),
mLSIntType (),
mLUInt64Type (),
mLSInt64Type (),
mLDoubleType () {
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes::~GGS_predefinedTypes (void) {
}

//---------------------------------------------------------------------------*

void GGS_predefinedTypes::drop (void) {
  mLocationType.drop () ;
  mBoolType.drop () ;
  mCharType.drop () ;
  mStringType.drop () ;
  mUIntType.drop () ;
  mSIntType.drop () ;
  mUInt64Type.drop () ;
  mSInt64Type.drop () ;
  mDoubleType.drop () ;
  mLBoolType.drop () ;
  mLCharType.drop () ;
  mLStringType.drop () ;
  mLUIntType.drop () ;
  mLSIntType.drop () ;
  mLUInt64Type.drop () ;
  mLSInt64Type.drop () ;
  mLDoubleType.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_predefinedTypes::isBuilt (void) const {
  return mLocationType.isBuilt ()
    && mBoolType.isBuilt ()
    && mCharType.isBuilt ()
    && mStringType.isBuilt ()
    && mUIntType.isBuilt ()
    && mSIntType.isBuilt ()
    && mUInt64Type.isBuilt ()
    && mSInt64Type.isBuilt ()
    && mDoubleType.isBuilt ()
    && mLBoolType.isBuilt ()
    && mLCharType.isBuilt ()
    && mLStringType.isBuilt ()
    && mLUIntType.isBuilt ()
    && mLSIntType.isBuilt ()
    && mLUInt64Type.isBuilt ()
    && mLSInt64Type.isBuilt ()
    && mLDoubleType.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isEqual (inOperand.mLocationType)
    .operator_and (mBoolType.operator_isEqual (inOperand.mBoolType))
    .operator_and (mCharType.operator_isEqual (inOperand.mCharType))
    .operator_and (mStringType.operator_isEqual (inOperand.mStringType))
    .operator_and (mUIntType.operator_isEqual (inOperand.mUIntType))
    .operator_and (mSIntType.operator_isEqual (inOperand.mSIntType))
    .operator_and (mUInt64Type.operator_isEqual (inOperand.mUInt64Type))
    .operator_and (mSInt64Type.operator_isEqual (inOperand.mSInt64Type))
    .operator_and (mDoubleType.operator_isEqual (inOperand.mDoubleType))
    .operator_and (mLBoolType.operator_isEqual (inOperand.mLBoolType))
    .operator_and (mLCharType.operator_isEqual (inOperand.mLCharType))
    .operator_and (mLStringType.operator_isEqual (inOperand.mLStringType))
    .operator_and (mLUIntType.operator_isEqual (inOperand.mLUIntType))
    .operator_and (mLSIntType.operator_isEqual (inOperand.mLSIntType))
    .operator_and (mLUInt64Type.operator_isEqual (inOperand.mLUInt64Type))
    .operator_and (mLSInt64Type.operator_isEqual (inOperand.mLSInt64Type))
    .operator_and (mLDoubleType.operator_isEqual (inOperand.mLDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isNotEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isNotEqual (inOperand.mLocationType)
    .operator_or (mBoolType.operator_isNotEqual (inOperand.mBoolType))
    .operator_or (mCharType.operator_isNotEqual (inOperand.mCharType))
    .operator_or (mStringType.operator_isNotEqual (inOperand.mStringType))
    .operator_or (mUIntType.operator_isNotEqual (inOperand.mUIntType))
    .operator_or (mSIntType.operator_isNotEqual (inOperand.mSIntType))
    .operator_or (mUInt64Type.operator_isNotEqual (inOperand.mUInt64Type))
    .operator_or (mSInt64Type.operator_isNotEqual (inOperand.mSInt64Type))
    .operator_or (mDoubleType.operator_isNotEqual (inOperand.mDoubleType))
    .operator_or (mLBoolType.operator_isNotEqual (inOperand.mLBoolType))
    .operator_or (mLCharType.operator_isNotEqual (inOperand.mLCharType))
    .operator_or (mLStringType.operator_isNotEqual (inOperand.mLStringType))
    .operator_or (mLUIntType.operator_isNotEqual (inOperand.mLUIntType))
    .operator_or (mLSIntType.operator_isNotEqual (inOperand.mLSIntType))
    .operator_or (mLUInt64Type.operator_isNotEqual (inOperand.mLUInt64Type))
    .operator_or (mLSInt64Type.operator_isNotEqual (inOperand.mLSInt64Type))
    .operator_or (mLDoubleType.operator_isNotEqual (inOperand.mLDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::
constructor_new (const GGS_unifiedTypeMapProxy & argument_0,
                 const GGS_unifiedTypeMapProxy & argument_1,
                 const GGS_unifiedTypeMapProxy & argument_2,
                 const GGS_unifiedTypeMapProxy & argument_3,
                 const GGS_unifiedTypeMapProxy & argument_4,
                 const GGS_unifiedTypeMapProxy & argument_5,
                 const GGS_unifiedTypeMapProxy & argument_6,
                 const GGS_unifiedTypeMapProxy & argument_7,
                 const GGS_unifiedTypeMapProxy & argument_8,
                 const GGS_unifiedTypeMapProxy & argument_9,
                 const GGS_unifiedTypeMapProxy & argument_10,
                 const GGS_unifiedTypeMapProxy & argument_11,
                 const GGS_unifiedTypeMapProxy & argument_12,
                 const GGS_unifiedTypeMapProxy & argument_13,
                 const GGS_unifiedTypeMapProxy & argument_14,
                 const GGS_unifiedTypeMapProxy & argument_15,
                 const GGS_unifiedTypeMapProxy & argument_16) {
  GGS_predefinedTypes result ;
  result.mLocationType = argument_0 ;
  result.mBoolType = argument_1 ;
  result.mCharType = argument_2 ;
  result.mStringType = argument_3 ;
  result.mUIntType = argument_4 ;
  result.mSIntType = argument_5 ;
  result.mUInt64Type = argument_6 ;
  result.mSInt64Type = argument_7 ;
  result.mDoubleType = argument_8 ;
  result.mLBoolType = argument_9 ;
  result.mLCharType = argument_10 ;
  result.mLStringType = argument_11 ;
  result.mLUIntType = argument_12 ;
  result.mLSIntType = argument_13 ;
  result.mLUInt64Type = argument_14 ;
  result.mLSInt64Type = argument_15 ;
  result.mLDoubleType = argument_16 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_predefinedTypes::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @predefinedTypes" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLocationType " ;
    _s << mLocationType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mBoolType " ;
    _s << mBoolType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCharType " ;
    _s << mCharType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mStringType " ;
    _s << mStringType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUIntType " ;
    _s << mUIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSIntType " ;
    _s << mSIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUInt64Type " ;
    _s << mUInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSInt64Type " ;
    _s << mSInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mDoubleType " ;
    _s << mDoubleType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLBoolType " ;
    _s << mLBoolType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLCharType " ;
    _s << mLCharType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLStringType " ;
    _s << mLStringType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLUIntType " ;
    _s << mLUIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLSIntType " ;
    _s << mLSIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLUInt64Type " ;
    _s << mLUInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLSInt64Type " ;
    _s << mLSInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLDoubleType " ;
    _s << mLDoubleType.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_predefinedTypes::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_predefinedTypes * p = NULL ;
    macroMyNew (p, GGS_predefinedTypes (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_predefinedTypes result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_predefinedTypes * p = dynamic_cast <const GGS_predefinedTypes *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_predefinedTypes, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_predefinedTypes::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_predefinedTypes ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'analysisContext' struct                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_analysisContext ("analysisContext", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_analysisContext::GGS_analysisContext (void) :
mSemanticContext (),
mPredefinedTypes (),
mSelfTypeProxy (),
mSelfObjectCppPointer () {
}

//---------------------------------------------------------------------------*

GGS_analysisContext::~GGS_analysisContext (void) {
}

//---------------------------------------------------------------------------*

void GGS_analysisContext::drop (void) {
  mSemanticContext.drop () ;
  mPredefinedTypes.drop () ;
  mSelfTypeProxy.drop () ;
  mSelfObjectCppPointer.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_analysisContext::isBuilt (void) const {
  return mSemanticContext.isBuilt ()
    && mPredefinedTypes.isBuilt ()
    && mSelfTypeProxy.isBuilt ()
    && mSelfObjectCppPointer.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_analysisContext::
operator_isEqual (const GGS_analysisContext & inOperand) const {
  return mSemanticContext.operator_isEqual (inOperand.mSemanticContext)
    .operator_and (mPredefinedTypes.operator_isEqual (inOperand.mPredefinedTypes))
    .operator_and (mSelfTypeProxy.operator_isEqual (inOperand.mSelfTypeProxy))
    .operator_and (mSelfObjectCppPointer.operator_isEqual (inOperand.mSelfObjectCppPointer)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_analysisContext::
operator_isNotEqual (const GGS_analysisContext & inOperand) const {
  return mSemanticContext.operator_isNotEqual (inOperand.mSemanticContext)
    .operator_or (mPredefinedTypes.operator_isNotEqual (inOperand.mPredefinedTypes))
    .operator_or (mSelfTypeProxy.operator_isNotEqual (inOperand.mSelfTypeProxy))
    .operator_or (mSelfObjectCppPointer.operator_isNotEqual (inOperand.mSelfObjectCppPointer)) ;
}

//---------------------------------------------------------------------------*

GGS_analysisContext GGS_analysisContext::
constructor_new (const GGS_semanticContext& argument_0,
                 const GGS_predefinedTypes& argument_1,
                 const GGS_unifiedTypeMapProxy & argument_2,
                 const GGS_string& argument_3) {
  GGS_analysisContext result ;
  result.mSemanticContext = argument_0 ;
  result.mPredefinedTypes = argument_1 ;
  result.mSelfTypeProxy = argument_2 ;
  result.mSelfObjectCppPointer = argument_3 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_analysisContext::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @analysisContext" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSemanticContext " ;
    _s << mSemanticContext.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mPredefinedTypes " ;
    _s << mPredefinedTypes.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSelfTypeProxy " ;
    _s << mSelfTypeProxy.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSelfObjectCppPointer " ;
    _s << mSelfObjectCppPointer.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_analysisContext::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_analysisContext * p = NULL ;
    macroMyNew (p, GGS_analysisContext (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_analysisContext GGS_analysisContext::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_analysisContext result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_analysisContext * p = dynamic_cast <const GGS_analysisContext *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_analysisContext, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_analysisContext::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_analysisContext ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression> gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression
findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression result = NULL ;
  if (NULL != inClassPtr) {
    if (inClassPtr->slotID () < gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.count ()) {
      result = gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression (inClassPtr->slotID () COMMA_HERE) ;
    }
    if (NULL == result) {
      AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
      if (superClassPtr != NULL) {
        result = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (superClassPtr) ;
        gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@selfCopyInExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selfCopyInExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_selfCopyInExpressionAST * operand_27006,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27006 != NULL) {
    const GGS_bool cond_27282 = var_cas_inAnalysisContext.mSelfTypeProxy.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (381)) ;
    if (cond_27282.isBuiltAndTrue ()) {
      operand_27006->mSelfLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'selfcopy' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (383)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_27282.isBuiltAndFalse ()) {
      const GGS_string var_cas_selfCppName = var_cas_inAnalysisContext.mSelfObjectCppPointer ;
      var_cas_outExpression = GGS_selfCopyInExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mSelfTypeProxy, operand_27006->mSelfLocation, var_cas_selfCppName COMMA_SOURCE_FILE_AT_LINE (386)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@hereExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__hereExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_hereExpressionAST * operand_27815,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27815 != NULL) {
    var_cas_outExpression = GGS_hereExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mLocationType, operand_27815->mLocation COMMA_SOURCE_FILE_AT_LINE (397)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@trueExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__trueExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_trueExpressionAST * operand_28217,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28217 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_28217->mLocation COMMA_SOURCE_FILE_AT_LINE (407)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@falseExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__falseExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_falseExpressionAST * operand_28616,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28616 != NULL) {
    var_cas_outExpression = GGS_falseExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_28616->mLocation COMMA_SOURCE_FILE_AT_LINE (417)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalCharExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalCharExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalCharExpressionAST * operand_29022,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29022 != NULL) {
    var_cas_outExpression = GGS_literalCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mCharType, operand_29022->mCharacter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (427)), operand_29022->mCharacter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (427)) COMMA_SOURCE_FILE_AT_LINE (427)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalStringExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalStringExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalStringExpressionAST * operand_29467,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29467 != NULL) {
    GGS_string var_cas_s = GGS_string ("") ;
    {
      GGS_stringlist::cEnumerator enumerator_29642 (operand_29467->mStringSequence, true) ;
      const GGS_stringlist::cElement * operand_29642 = NULL ;
      while (((operand_29642 = enumerator_29642.nextObject ()))) {
        macroValidPointer (operand_29642) ;
        var_cas_s.dotAssign_operation (operand_29642->mValue) ;
      }
    }
    var_cas_outExpression = GGS_literalStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_29467->mLocation, var_cas_s COMMA_SOURCE_FILE_AT_LINE (441)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalDoubleExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalDoubleExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalDoubleExpressionAST * operand_29971,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29971 != NULL) {
    var_cas_outExpression = GGS_literalDoubleExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mDoubleType, operand_29971->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (451)), operand_29971->mValue.reader_double (inLexique COMMA_SOURCE_FILE_AT_LINE (451)) COMMA_SOURCE_FILE_AT_LINE (451)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalUIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUIntExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalUIntExpressionAST * operand_30412,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30412 != NULL) {
    var_cas_outExpression = GGS_literalUIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mUIntType, operand_30412->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (461)), operand_30412->mValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (461)) COMMA_SOURCE_FILE_AT_LINE (461)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalUInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUInt64ExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalUInt64ExpressionAST * operand_30849,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_30849 != NULL) {
    var_cas_outExpression = GGS_literalUInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mUInt64Type, operand_30849->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (471)), operand_30849->mValue.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (471)) COMMA_SOURCE_FILE_AT_LINE (471)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalSIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSIntExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalSIntExpressionAST * operand_31290,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31290 != NULL) {
    var_cas_outExpression = GGS_literalSIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mSIntType, operand_31290->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (481)), operand_31290->mValue.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (481)) COMMA_SOURCE_FILE_AT_LINE (481)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalSInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSInt64ExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalSInt64ExpressionAST * operand_31727,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_31727 != NULL) {
    var_cas_outExpression = GGS_literalSInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mSInt64Type, operand_31727->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (491)), operand_31727->mValue.reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (491)) COMMA_SOURCE_FILE_AT_LINE (491)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "analyzeConstructorInvocation"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeConstructorInvocation (C_CompilerEx & inLexique,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                const GGS_lstring   var_cas_inTypeName,
                                const GGS_lstring   var_cas_inConstructorName,
                                const GGS_semanticExpressionListAST   var_cas_inConstuctorEffectiveParameterExpressions,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_unifiedTypeMapProxy  & var_cas_outConstructorType,
                                GGS_semanticExpressionListForGeneration  & var_cas_outConstructorEffectiveParameterList,
                                GGS_bool & var_cas_outHasCompilerArgument
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeConstructorInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outConstructorType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, var_cas_inTypeName COMMA_SOURCE_FILE_AT_LINE (507)) ;
  const GGS_constructorMap  var_cas_constructorMap = var_cas_outConstructorType.reader_mConstructorMap (inLexique COMMA_SOURCE_FILE_AT_LINE (509)) ;
  GGS_unifiedTypeMapProxyList  var_cas_constructorFormalArgumentTypeList ;
  elementOf_GGS_constructorMap * operand_32875 = (elementOf_GGS_constructorMap *) var_cas_constructorMap.searchForReadWithInstruction (var_cas_inConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (512))) ;
  if (NULL != operand_32875) {
    var_cas_constructorFormalArgumentTypeList = operand_32875->mInfo.mArgumentTypeList ;
    var_cas_outHasCompilerArgument = operand_32875->mInfo.mHasCompilerArgument ;
    var_cas_outReturnedType = operand_32875->mInfo.mReturnedType ;
  }else{
    const GGS_bool cond_33315 = (var_cas_constructorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_33315.isBuiltAndTrue ()) {
      var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' type does not define any constructor")) COMMA_SOURCE_FILE_AT_LINE (522)) ;
      var_cas_constructorFormalArgumentTypeList.drop () ;
      var_cas_outHasCompilerArgument.drop () ;
      var_cas_outReturnedType.drop () ;
    }else if (cond_33315.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_constructorMap::cEnumerator enumerator_33368 (var_cas_constructorMap, true) ;
        const GGS_constructorMap::cElement * operand_33368 = NULL ;
        while (((operand_33368 = enumerator_33368.nextObject ()))) {
          macroValidPointer (operand_33368) ;
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (operand_33368->mKey) ;
          {
            GGS_unifiedTypeMapProxyList::cEnumerator enumerator_33436 (operand_33368->mInfo.mArgumentTypeList, true) ;
            const GGS_unifiedTypeMapProxyList::cElement * operand_33436 = NULL ;
            while (((operand_33436 = enumerator_33436.nextObject ()))) {
              macroValidPointer (operand_33436) ;
              var_cas_s.appendCString (" \?@") ;
              var_cas_s.dotAssign_operation (operand_33436->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (527))) ;
            }
          }
          var_cas_s.appendCString (" -> @") ;
          var_cas_s.dotAssign_operation (operand_33368->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (529))) ;
        }
      }
      var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (var_cas_inConstructorName)).operator_concat (GGS_string ("' constructor; "))).operator_concat ((((var_cas_constructorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("available constructors are")) : (GGS_string ("available constructor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (537)) ;
      var_cas_constructorFormalArgumentTypeList.drop () ;
      var_cas_outHasCompilerArgument.drop () ;
      var_cas_outReturnedType.drop () ;
    }
  }
  const GGS_bool cond_34425 = (var_cas_inConstuctorEffectiveParameterExpressions.reader_length ()).operator_isNotEqual (var_cas_constructorFormalArgumentTypeList.reader_length ()) ;
  if (cond_34425.isBuiltAndTrue ()) {
    var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (var_cas_inConstructorName)).operator_concat (GGS_string ("' constructor of '@"))).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_constructorFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (543)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_inConstuctorEffectiveParameterExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (544)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (546)) ;
    var_cas_outConstructorEffectiveParameterList.drop () ;
  }else if (cond_34425.isBuiltAndFalse ()) {
    var_cas_outConstructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
    {
      GGS_semanticExpressionListAST::cEnumerator enumerator_34574 (var_cas_inConstuctorEffectiveParameterExpressions, true) ;
      const GGS_semanticExpressionListAST::cElement * operand_34574 = NULL ;
      GGS_unifiedTypeMapProxyList::cEnumerator enumerator_34609 (var_cas_constructorFormalArgumentTypeList, true) ;
      const GGS_unifiedTypeMapProxyList::cElement * operand_34609 = NULL ;
      while (((operand_34574 = enumerator_34574.nextObject ()))
          && ((operand_34609 = enumerator_34609.nextObject ()))) {
        macroValidPointer (operand_34574) ;
        macroValidPointer (operand_34609) ;
        GGS_semanticExpressionForGeneration  var_cas_exp ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_34574->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_34574->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (550)) ;
          }
        }
        ::routine_checkAssignmentTypes (inLexique,  operand_34609->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (551)),  operand_34574->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (551)) ;
        var_cas_outConstructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeConstructorInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@constructorExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__constructorExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_constructorExpressionAST * operand_35064,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_35064 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_unifiedTypeMapProxy  var_cas_constructorType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inAnalysisContext,  var_cas_ioVariableMap,  operand_35064->mTypeName,  operand_35064->mConstructorName,  operand_35064->mExpressions,  var_cas_returnedType,  var_cas_constructorType,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (568)) ;
    var_cas_outExpression = GGS_constructorExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_35064->mConstructorName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (582)), var_cas_constructorType, operand_35064->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (584)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (580)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@readerCallExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readerCallExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_readerCallExpressionAST * operand_36004,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36004 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36004->mReceiver.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_36004->mReceiver (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (599)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (600)) ;
    const GGS_readerMap  var_cas_readerMap = var_cas_receiverType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (602)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_isCategory ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_stringlist  var_cas_fieldList = GGS_stringlist ::constructor_emptyList () ;
    elementOf_GGS_readerMap * operand_36679 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_36004->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (609))) ;
    if (NULL != operand_36679) {
      var_cas_readerFormalArgumentTypeList = operand_36679->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_36679->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_36679->mInfo.mReturnedType ;
      var_cas_isCategory = operand_36679->mInfo.mIsCategory ;
    }else{
      GGS_uint  var_cas_matchingReaderCount = GGS_uint (0U) ;
      const GGS_bool cond_38791 = (var_cas_receiverType.reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (616))).operator_isEqual (GGS_typeKindEnum::constructor_structType (inLexique COMMA_SOURCE_FILE_AT_LINE (616))) ;
      if (cond_38791.isBuiltAndTrue ()) {
        var_cas_readerFormalArgumentTypeList = GGS_unifiedTypeMapProxyList ::constructor_emptyList () ;
        var_cas_hasCompilerArgument = GGS_bool (true) ;
        var_cas_returnedType = GGS_unifiedTypeMapProxy ::constructor_null (inLexique COMMA_SOURCE_FILE_AT_LINE (619)) ;
        var_cas_isCategory = GGS_bool (true) ;
        {
          GGS_typedAttributeList::cEnumerator enumerator_37208 (var_cas_receiverType.reader_mCurrentTypedAttributeList (inLexique COMMA_SOURCE_FILE_AT_LINE (621)), true) ;
          const GGS_typedAttributeList::cElement * operand_37208 = NULL ;
          while (((operand_37208 = enumerator_37208.nextObject ()))) {
            macroValidPointer (operand_37208) ;
            const GGS_unifiedTypeMapProxy  var_cas_attributeType = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, operand_37208->mAttributeTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (622)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (622)) COMMA_SOURCE_FILE_AT_LINE (622)) ;
            const GGS_readerMap  var_cas_aMap = var_cas_attributeType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (623)) ;
            elementOf_GGS_readerMap * operand_37591 = (elementOf_GGS_readerMap *) var_cas_aMap.searchForReadWithInstruction (operand_36004->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (625))) ;
            if (NULL != operand_37591) {
              var_cas_matchingReaderCount.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (626)) ;
              var_cas_readerFormalArgumentTypeList = operand_37591->mInfo.mArgumentTypeList ;
              var_cas_hasCompilerArgument = operand_37591->mInfo.mHasCompilerArgument ;
              var_cas_returnedType = operand_37591->mInfo.mReturnedType ;
              var_cas_isCategory = operand_37591->mInfo.mIsCategory ;
              var_cas_fieldList.addAssign_operation (operand_37208->mAttributeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (631))) ;
            }
          }
        }
        const GGS_bool cond_38276 = (var_cas_matchingReaderCount).operator_isEqual (GGS_uint (0U)) ;
        if (cond_38276.isBuiltAndTrue ()) {
          operand_36004->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (636)))).operator_concat (GGS_string ("' struct type does not define the '"))).operator_concat (operand_36004->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (636)))).operator_concat (GGS_string ("' reader, and none of its fields defines it")) COMMA_SOURCE_FILE_AT_LINE (640)) ;
          var_cas_readerFormalArgumentTypeList.drop () ;
          var_cas_hasCompilerArgument.drop () ;
          var_cas_returnedType.drop () ;
          var_cas_isCategory.drop () ;
        }else if (cond_38276.isBuiltAndFalse ()) {
          const GGS_bool cond_38776 = (var_cas_matchingReaderCount).operator_strictSup (GGS_uint (1U)) ;
          if (cond_38776.isBuiltAndTrue ()) {
            GGS_string var_cas_s = GGS_string ("") ;
            {
              GGS_stringlist::cEnumerator enumerator_38357 (var_cas_fieldList, true) ;
              const GGS_stringlist::cElement * operand_38357 = enumerator_38357.nextObject () ;
              if ((operand_38357 != NULL)) {
                bool _foreach_loop_38357 ;
                do{
                  macroValidPointer (operand_38357) ;
                  var_cas_s.dotAssign_operation (operand_38357->mValue) ;
                  operand_38357 = enumerator_38357.nextObject () ;
                  _foreach_loop_38357 = ((operand_38357 != NULL)) ;
                  if (_foreach_loop_38357) {
                    var_cas_s.appendCString (", ") ;
                  }
                }while (_foreach_loop_38357) ;
              }
            }
            operand_36004->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (647)))).operator_concat (GGS_string ("' struct type does not define the '"))).operator_concat (operand_36004->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (647)))).operator_concat (GGS_string ("' reader, and several of its fields defines it:"))).operator_concat (var_cas_s)).operator_concat (GGS_string (" (exactly one field should define it)")) COMMA_SOURCE_FILE_AT_LINE (651)) ;
            var_cas_readerFormalArgumentTypeList.drop () ;
            var_cas_hasCompilerArgument.drop () ;
            var_cas_returnedType.drop () ;
            var_cas_isCategory.drop () ;
          }
        }
      }else if (cond_38791.isBuiltAndFalse ()) {
        const GGS_bool cond_39019 = (var_cas_readerMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
        if (cond_39019.isBuiltAndTrue ()) {
          operand_36004->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (654)))).operator_concat (GGS_string ("' type does not define any reader")) COMMA_SOURCE_FILE_AT_LINE (657)) ;
          var_cas_readerFormalArgumentTypeList.drop () ;
          var_cas_hasCompilerArgument.drop () ;
          var_cas_returnedType.drop () ;
          var_cas_isCategory.drop () ;
        }else if (cond_39019.isBuiltAndFalse ()) {
          GGS_string var_cas_s = GGS_string ("") ;
          {
            GGS_readerMap::cEnumerator enumerator_39067 (var_cas_readerMap, true) ;
            const GGS_readerMap::cElement * operand_39067 = NULL ;
            while (((operand_39067 = enumerator_39067.nextObject ()))) {
              macroValidPointer (operand_39067) ;
              var_cas_s.appendCString ("\n"
                "  - ") ;
              var_cas_s.dotAssign_operation (operand_39067->mKey) ;
              {
                GGS_unifiedTypeMapProxyList::cEnumerator enumerator_39135 (operand_39067->mInfo.mArgumentTypeList, true) ;
                const GGS_unifiedTypeMapProxyList::cElement * operand_39135 = NULL ;
                while (((operand_39135 = enumerator_39135.nextObject ()))) {
                  macroValidPointer (operand_39135) ;
                  var_cas_s.appendCString (" \?@") ;
                  var_cas_s.dotAssign_operation (operand_39135->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (662))) ;
                }
              }
              var_cas_s.appendCString (" -> @") ;
              var_cas_s.dotAssign_operation (operand_39067->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (664))) ;
            }
          }
          operand_36004->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (667)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_36004->mReaderName)).operator_concat (GGS_string ("' reader; available "))).operator_concat ((((var_cas_readerMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("readers are")) : (GGS_string ("reader is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (672)) ;
          var_cas_readerFormalArgumentTypeList.drop () ;
          var_cas_hasCompilerArgument.drop () ;
          var_cas_returnedType.drop () ;
          var_cas_isCategory.drop () ;
        }
      }
    }
    const GGS_bool cond_39981 = (operand_36004->mExpressions.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_39981.isBuiltAndTrue ()) {
      operand_36004->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_36004->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (676)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_36004->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (678)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (679)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_39981.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_40095 (operand_36004->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_40095 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_40125 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_40125 = NULL ;
        while (((operand_40095 = enumerator_40095.nextObject ()))
            && ((operand_40125 = enumerator_40125.nextObject ()))) {
          macroValidPointer (operand_40095) ;
          macroValidPointer (operand_40125) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_40095->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_40095->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (683)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_40125->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (684)),  operand_40095->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (684)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_36004->mReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (689)), var_cas_isCategory, var_cas_receiverExpression, var_cas_fieldList, operand_36004->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (693)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (687)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@thisReaderCallExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__thisReaderCallExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_thisReaderCallExpressionAST * operand_40855,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_40855 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
    const GGS_bool cond_41219 = var_cas_ioVariableMap.reader_hasKey (function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (709))) ;
    if (cond_41219.isBuiltAndTrue ()) {
      GGS_string automatic_var_41210_0 ;
      GGS_string automatic_var_41210_1 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (710)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (710)), var_cas_thisTypeProxy, automatic_var_41210_0, automatic_var_41210_1 COMMA_SOURCE_FILE_AT_LINE (710)) ;
    }else if (cond_41219.isBuiltAndFalse ()) {
      operand_40855->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'this' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (713)) ;
      var_cas_thisTypeProxy.drop () ;
    }
    const GGS_readerMap  var_cas_readerMap = var_cas_thisTypeProxy.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (715)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_isCategory ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    elementOf_GGS_readerMap * operand_41591 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_40855->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (721))) ;
    if (NULL != operand_41591) {
      var_cas_readerFormalArgumentTypeList = operand_41591->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_41591->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_41591->mInfo.mReturnedType ;
      var_cas_isCategory = operand_41591->mInfo.mIsCategory ;
    }else{
      const GGS_bool cond_42040 = (var_cas_readerMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_42040.isBuiltAndTrue ()) {
        operand_40855->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_thisTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (729)))).operator_concat (GGS_string ("' type does not define any reader")) COMMA_SOURCE_FILE_AT_LINE (732)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_isCategory.drop () ;
      }else if (cond_42040.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_readerMap::cEnumerator enumerator_42088 (var_cas_readerMap, true) ;
          const GGS_readerMap::cElement * operand_42088 = NULL ;
          while (((operand_42088 = enumerator_42088.nextObject ()))) {
            macroValidPointer (operand_42088) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_42088->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_42156 (operand_42088->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_42156 = NULL ;
              while (((operand_42156 = enumerator_42156.nextObject ()))) {
                macroValidPointer (operand_42156) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_42156->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (737))) ;
              }
            }
            var_cas_s.appendCString (" -> @") ;
            var_cas_s.dotAssign_operation (operand_42088->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (739))) ;
          }
        }
        operand_40855->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_thisTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (742)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_40855->mReaderName)).operator_concat (GGS_string ("' reader; available "))).operator_concat ((((var_cas_readerMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("readers are")) : (GGS_string ("reader is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (747)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_isCategory.drop () ;
      }
    }
    const GGS_bool cond_43004 = (operand_40855->mExpressions.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_43004.isBuiltAndTrue ()) {
      operand_40855->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_40855->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_thisTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (751)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (752)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_40855->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (753)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (754)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_43004.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_43118 (operand_40855->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_43118 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_43148 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_43148 = NULL ;
        while (((operand_43118 = enumerator_43118.nextObject ()))
            && ((operand_43148 = enumerator_43148.nextObject ()))) {
          macroValidPointer (operand_43118) ;
          macroValidPointer (operand_43148) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43118->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_43118->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (758)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_43148->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (759)),  operand_43118->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (759)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_thisReaderCallExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_40855->mReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (764)), var_cas_isCategory, operand_40855->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (766)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (762)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Implementation of function "checkReaderImplementationInSuperClasses"    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_string function_checkReaderImplementationInSuperClasses (C_CompilerEx & inLexique,
                                const GGS_lstring   var_cas_inReaderName,
                                const GGS_unifiedTypeMapProxy   var_cas_inSuperClass COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER function_checkReaderImplementationInSuperClasses at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_string var_cas_outResult ;
  const GGS_bool cond_43967 = var_cas_inSuperClass.reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (780)) ;
  if (cond_43967.isBuiltAndTrue ()) {
    var_cas_outResult = GGS_string ("") ;
  }else if (cond_43967.isBuiltAndFalse ()) {
    GGS_methodQualifier var_cas_qualifier ;
    GGS_formalParameterSignature  automatic_var_44075_0 ;
    GGS_bool automatic_var_44075_1 ;
    const GGS_modifierMap  temp_44043 = var_cas_inSuperClass.reader_mModifierMap (inLexique COMMA_SOURCE_FILE_AT_LINE (784)) ;
    if (temp_44043.isBuilt ()) {
      temp_44043 (HERE)->method_searchKey (inLexique, var_cas_inReaderName, automatic_var_44075_0, automatic_var_44075_1, var_cas_qualifier COMMA_SOURCE_FILE_AT_LINE (784)) ;
    }
    switch (var_cas_qualifier.enumValue ()) {
    case GGS_methodQualifier::enum_isAbstract:
      {
      var_cas_outResult = GGS_string ("") ;
      }
      break ;
    case GGS_methodQualifier::enum_isBasic:
    case GGS_methodQualifier::enum_isBasicFinal:
    case GGS_methodQualifier::enum_isOverriding:
      {
      var_cas_outResult = var_cas_inSuperClass.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (789)) ;
      }
      break ;
    case GGS_methodQualifier::enum_isInherited:
    case GGS_methodQualifier::enum_isOverridingAbstract:
      {
      var_cas_outResult = function_checkReaderImplementationInSuperClasses (inLexique, var_cas_inReaderName, var_cas_inSuperClass.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (791)) COMMA_SOURCE_FILE_AT_LINE (791)) ;
      }
      break ;
    case GGS_methodQualifier::kNotBuilt:
      break ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE function_checkReaderImplementationInSuperClasses\n") ;
  #endif
  return var_cas_outResult ;
}

//---------------------------------------------------------------------------*

static GGS_object functionForGenericCall_checkReaderImplementationInSuperClasses (C_CompilerEx & inLexique,
                           const GGS_objectlist & inEffectiveParameterArray,
                           const GGS_location & inErrorLocation
                           COMMA_LOCATION_ARGS) {
  const GGS_lstring  arg_0 = GGS_lstring ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (0) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_unifiedTypeMapProxy  arg_1 = GGS_unifiedTypeMapProxy ::castFromObject (inLexique, inEffectiveParameterArray.reader_mValueAtIndex (inLexique, GGS_uint (1) COMMA_THERE), inErrorLocation COMMA_THERE) ;
  const GGS_string result = function_checkReaderImplementationInSuperClasses (inLexique,
                            arg_0,
                            arg_1
                            COMMA_THERE) ;
  return result.reader_object () ;
}

//---------------------------------------------------------------------------*

static const C_galgas_type_descriptorEX *
kArgumentTypeList_checkReaderImplementationInSuperClasses [2] = {& kTypeDescriptor_GGS_lstring ,
                              & kTypeDescriptor_GGS_unifiedTypeMapProxy } ;

const C_galgas_function_descriptorEX
kFunction_descriptor_checkReaderImplementationInSuperClasses ("checkReaderImplementationInSuperClasses",
                              functionForGenericCall_checkReaderImplementationInSuperClasses,
                              & kTypeDescriptor_GGS_string,
                              2,
                              kArgumentTypeList_checkReaderImplementationInSuperClasses) ;

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@superReaderCallExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__superReaderCallExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_superReaderCallExpressionAST * operand_44580,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44580 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_superTypeProxy ;
    const GGS_bool cond_45209 = var_cas_ioVariableMap.reader_hasKey (function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (805))) ;
    if (cond_45209.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy  var_cas_thisTypeProxy ;
      GGS_string automatic_var_44978_0 ;
      GGS_string automatic_var_44978_1 ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, function_selfMarkName (inLexique COMMA_SOURCE_FILE_AT_LINE (807)), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (807)), var_cas_thisTypeProxy, automatic_var_44978_0, automatic_var_44978_1 COMMA_SOURCE_FILE_AT_LINE (807)) ;
      const GGS_bool cond_45136 = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (808)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (808)) ;
      if (cond_45136.isBuiltAndTrue ()) {
        operand_44580->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' cannot be used, current class has no super class") COMMA_SOURCE_FILE_AT_LINE (810)) ;
        var_cas_superTypeProxy.drop () ;
      }else if (cond_45136.isBuiltAndFalse ()) {
        var_cas_superTypeProxy = var_cas_thisTypeProxy.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (811)) ;
      }
    }else if (cond_45209.isBuiltAndFalse ()) {
      operand_44580->mLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'super' can be used only in methods, modifiers and readers") COMMA_SOURCE_FILE_AT_LINE (815)) ;
      var_cas_superTypeProxy.drop () ;
    }
    const GGS_readerMap  var_cas_readerMap = var_cas_superTypeProxy.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (817)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_isCategory ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_string var_cas_superClassThatImplementsReader ;
    elementOf_GGS_readerMap * operand_45628 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_44580->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (824))) ;
    if (NULL != operand_45628) {
      var_cas_readerFormalArgumentTypeList = operand_45628->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_45628->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_45628->mInfo.mReturnedType ;
      var_cas_isCategory = operand_45628->mInfo.mIsCategory ;
      var_cas_superClassThatImplementsReader = function_checkReaderImplementationInSuperClasses (inLexique, operand_44580->mReaderName, var_cas_superTypeProxy COMMA_SOURCE_FILE_AT_LINE (829)) ;
      const GGS_bool cond_46102 = (var_cas_superClassThatImplementsReader).operator_isEqual (GGS_string ("")) ;
      if (cond_46102.isBuiltAndTrue ()) {
        operand_44580->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '")).operator_concat (operand_44580->mReaderName)).operator_concat (GGS_string ("' reader is not implemented by super class(es)")) COMMA_SOURCE_FILE_AT_LINE (832)) ;
      }
    }else{
      const GGS_bool cond_46383 = (var_cas_readerMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_46383.isBuiltAndTrue ()) {
        operand_44580->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_superTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (836)))).operator_concat (GGS_string ("' type does not define any reader")) COMMA_SOURCE_FILE_AT_LINE (839)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_isCategory.drop () ;
        var_cas_superClassThatImplementsReader.drop () ;
      }else if (cond_46383.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_readerMap::cEnumerator enumerator_46431 (var_cas_readerMap, true) ;
          const GGS_readerMap::cElement * operand_46431 = NULL ;
          while (((operand_46431 = enumerator_46431.nextObject ()))) {
            macroValidPointer (operand_46431) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_46431->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_46499 (operand_46431->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_46499 = NULL ;
              while (((operand_46499 = enumerator_46499.nextObject ()))) {
                macroValidPointer (operand_46499) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_46499->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (844))) ;
              }
            }
            var_cas_s.appendCString (" -> @") ;
            var_cas_s.dotAssign_operation (operand_46431->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (846))) ;
          }
        }
        operand_44580->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_superTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (849)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_44580->mReaderName)).operator_concat (GGS_string ("' reader; available "))).operator_concat ((((var_cas_readerMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("readers are")) : (GGS_string ("reader is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (854)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_isCategory.drop () ;
        var_cas_superClassThatImplementsReader.drop () ;
      }
    }
    const GGS_bool cond_47381 = (operand_44580->mExpressions.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_47381.isBuiltAndTrue ()) {
      operand_44580->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_44580->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_superTypeProxy.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (858)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (859)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_44580->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (860)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (861)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_47381.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_47495 (operand_44580->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_47495 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_47525 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_47525 = NULL ;
        while (((operand_47495 = enumerator_47495.nextObject ()))
            && ((operand_47525 = enumerator_47525.nextObject ()))) {
          macroValidPointer (operand_47495) ;
          macroValidPointer (operand_47525) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47495->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_47495->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (865)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_47525->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (866)),  operand_47495->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (866)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_superReaderCallExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_44580->mReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (871)), var_cas_isCategory, var_cas_superClassThatImplementsReader, operand_44580->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (869)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@optionExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__optionExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_optionExpressionAST * operand_48247,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48247 != NULL) {
    GGS_commandLineOptionMap  var_cas_boolOptionMap ;
    GGS_commandLineOptionMap  var_cas_uintOptionMap ;
    GGS_commandLineOptionMap  var_cas_stringOptionMap ;
    if (var_cas_inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mOptionComponentMapForSemanticAnalysis (HERE)->method_searchKey (inLexique, operand_48247->mOptionComponentName, var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap COMMA_SOURCE_FILE_AT_LINE (891)) ;
    }
    GGS_bool var_cas_found = var_cas_boolOptionMap.reader_hasKey (operand_48247->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (897))) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mBoolType ;
    const GGS_bool cond_48994 = (var_cas_found).operator_not () ;
    if (cond_48994.isBuiltAndTrue ()) {
      var_cas_found = var_cas_uintOptionMap.reader_hasKey (operand_48247->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (900))) ;
      var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mUIntType ;
    }
    const GGS_bool cond_49163 = (var_cas_found).operator_not () ;
    if (cond_49163.isBuiltAndTrue ()) {
      var_cas_found = var_cas_stringOptionMap.reader_hasKey (operand_48247->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (904))) ;
      var_cas_returnedType = var_cas_inAnalysisContext.mPredefinedTypes.mStringType ;
    }
    const GGS_bool cond_50508 = var_cas_found ;
    if (cond_50508.isBuiltAndTrue ()) {
      const GGS_bool cond_49455 = (operand_48247->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (908))).operator_isEqual (GGS_string ("value")) ;
      if (cond_49455.isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_optionValueExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_48247->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (911)), operand_48247->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (912)), operand_48247->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (913)) COMMA_SOURCE_FILE_AT_LINE (909)) ;
      }else if (cond_49455.isBuiltAndFalse ()) {
        const GGS_bool cond_49751 = (operand_48247->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (915))).operator_isEqual (GGS_string ("char")) ;
        if (cond_49751.isBuiltAndTrue ()) {
          var_cas_outExpression = GGS_optionCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mCharType, operand_48247->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (918)), operand_48247->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (919)), operand_48247->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (920)) COMMA_SOURCE_FILE_AT_LINE (916)) ;
        }else if (cond_49751.isBuiltAndFalse ()) {
          const GGS_bool cond_50053 = (operand_48247->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (922))).operator_isEqual (GGS_string ("string")) ;
          if (cond_50053.isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_optionStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_48247->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (925)), operand_48247->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (926)), operand_48247->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (927)) COMMA_SOURCE_FILE_AT_LINE (923)) ;
          }else if (cond_50053.isBuiltAndFalse ()) {
            const GGS_bool cond_50356 = (operand_48247->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (929))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_50356.isBuiltAndTrue ()) {
              var_cas_outExpression = GGS_optionCommentExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_48247->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (932)), operand_48247->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (933)), operand_48247->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (934)) COMMA_SOURCE_FILE_AT_LINE (930)) ;
            }else if (cond_50356.isBuiltAndFalse ()) {
              operand_48247->mOptionReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined for an option") COMMA_SOURCE_FILE_AT_LINE (938)) ;
              var_cas_outExpression.drop () ;
            }
          }
        }
      }
    }else if (cond_50508.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_50556 (var_cas_boolOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_50556 = NULL ;
        while (((operand_50556 = enumerator_50556.nextObject ()))) {
          macroValidPointer (operand_50556) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_50556->mKey) ;
          var_cas_s.appendCString ("' @bool option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_50652 (var_cas_uintOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_50652 = NULL ;
        while (((operand_50652 = enumerator_50652.nextObject ()))) {
          macroValidPointer (operand_50652) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_50652->mKey) ;
          var_cas_s.appendCString ("' @uint option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_50750 (var_cas_stringOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_50750 = NULL ;
        while (((operand_50750 = enumerator_50750.nextObject ()))) {
          macroValidPointer (operand_50750) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_50750->mKey) ;
          var_cas_s.appendCString ("' @string option;") ;
        }
      }
      operand_48247->mOptionEntryName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_48247->mOptionComponentName)).operator_concat (GGS_string ("' option component does not define the '"))).operator_concat (operand_48247->mOptionEntryName)).operator_concat (GGS_string ("' option; available options:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (954)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkDiadicOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkDiadicOperator (C_CompilerEx & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inLeftType,
                                const GGS_unifiedTypeMapProxy   var_cas_inRightType,
                                const GGS_bool  var_cas_inOperandIsHandled,
                                const GGS_string  var_cas_inOperatorNameForErrorMessage,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_semanticExpressionForGeneration  & var_cas_ioRightExpression
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkDiadicOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_51626 = (var_cas_inOperandIsHandled).operator_not () ;
  if (cond_51626.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("left operand type is '@")).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (969)))).operator_concat (GGS_string ("' and does not accept '"))).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator (right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (969)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (971)) ;
  }else if (cond_51626.isBuiltAndFalse ()) {
    GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_inRightType ;
    GGS_bool var_cas_ok = (var_cas_inLeftType).operator_isEqual (var_cas_rightType) ;
    GGS_uint _variant_51891 = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (974)) ;
    GGS_bool _condition_51891 (_variant_51891.isBuilt (), true) ;
    while (_condition_51891.isBuiltAndTrue ()) {
      _condition_51891 = ((var_cas_ok).operator_not ()).operator_and ((var_cas_rightType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (974)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (974))).operator_not ()) ;
      if (_condition_51891.isBuiltAndTrue ()) {
        if (_variant_51891.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (977)) ;
          _condition_51891 = GGS_bool (false) ;
        }else{
          _variant_51891.decrement_operation (inLexique COMMA_HERE) ;
          var_cas_rightType = var_cas_rightType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (975)) ;
          var_cas_ok = (var_cas_inLeftType).operator_isEqual (var_cas_rightType) ;
        }
      }
    }
    const GGS_bool cond_53423 = (var_cas_ok).operator_not () ;
    if (cond_53423.isBuiltAndTrue ()) {
      const GGS_bool cond_52959 = var_cas_inRightType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (981)).reader_hasKey (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (981))) ;
      if (cond_52959.isBuiltAndTrue ()) {
        GGS_unifiedTypeMapProxyList  var_cas_argumentTypeList ;
        GGS_bool var_cas_hasCompilerArgument ;
        GGS_unifiedTypeMapProxy  var_cas_returnedType ;
        GGS_bool var_cas_isCategory ;
        GGS_location  automatic_var_52408_0 ;
        GGS_methodQualifier automatic_var_52408_1 ;
        const GGS_readerMap  temp_52238 = var_cas_inRightType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (986)) ;
        if (temp_52238.isBuilt ()) {
          temp_52238 (HERE)->method_searchKey (inLexique, var_cas_inLeftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (987)), var_cas_isCategory, var_cas_argumentTypeList, automatic_var_52408_0, var_cas_hasCompilerArgument, var_cas_returnedType, automatic_var_52408_1 COMMA_SOURCE_FILE_AT_LINE (986)) ;
        }
        var_cas_ok = ((var_cas_argumentTypeList.reader_length ()).operator_isEqual (GGS_uint (0U))).operator_and ((var_cas_returnedType).operator_isEqual (var_cas_inLeftType)) ;
        GGS_semanticExpressionForGeneration  var_cas_conversionExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_inLeftType, var_cas_inErrorLocation, var_cas_isCategory, var_cas_ioRightExpression, GGS_stringlist ::constructor_emptyList (), var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1003)), GGS_semanticExpressionListForGeneration ::constructor_emptyList (), var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (997)) ;
        var_cas_ioRightExpression = var_cas_conversionExpression ;
      }
      const GGS_bool cond_53410 = (var_cas_ok).operator_not () ;
      if (cond_53410.isBuiltAndTrue ()) {
        var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((((GGS_string ("left operand type of '")).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator is '@"))).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1011)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1012)))).operator_concat (GGS_string ("', it should be either the same, either inherits from left operand type, either have a '"))).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)))).operator_concat (GGS_string ("' reader without argument that returns a '@"))).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)))).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (1016)) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkDiadicOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@concatExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__concatExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_concatExpressionAST * operand_53596,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53596 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_53596->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53596->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1030)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_53596->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53596->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1033)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1035)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1038)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1039))).operator_and (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1039)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("."),  operand_53596->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1036)) ;
    var_cas_outExpression = GGS_concatExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_53596->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1045)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@orExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__orExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_orExpressionAST * operand_54695,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54695 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54695->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54695->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1062)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54695->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54695->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1065)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1067)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1070)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1071))).operator_and (function_binaryOrOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1071)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("|"),  operand_54695->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1068)) ;
    var_cas_outExpression = GGS_orExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_54695->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1077)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@andExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_andExpressionAST * operand_55787,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55787 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_55787->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_55787->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1094)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_55787->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_55787->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1102)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1103))).operator_and (function_binaryAndOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1103)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("&"),  operand_55787->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1100)) ;
    var_cas_outExpression = GGS_andExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_55787->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1109)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@xorExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__xorExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_xorExpressionAST * operand_56881,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56881 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_56881->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_56881->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1126)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_56881->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_56881->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1129)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1134)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1135))).operator_and (function_binaryXorOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1135)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("^"),  operand_56881->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1132)) ;
    var_cas_outExpression = GGS_xorExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_56881->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1141)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@equalExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__equalExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_equalExpressionAST * operand_57977,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57977 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57977->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57977->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1158)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57977->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57977->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1161)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1163)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1164)) ;
    const GGS_bool cond_58910 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1165))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1165))) ;
    if (cond_58910.isBuiltAndTrue ()) {
      operand_57977->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1167)))).operator_concat (GGS_string ("': '==' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1170)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_58910.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_equalExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_57977->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1172)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@notEqualExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notEqualExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_notEqualExpressionAST * operand_59294,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59294 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_59294->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_59294->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1190)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_59294->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_59294->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1193)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1195)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1196)) ;
    const GGS_bool cond_60225 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1197))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1197))) ;
    if (cond_60225.isBuiltAndTrue ()) {
      operand_59294->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1199)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1199)))).operator_concat (GGS_string ("': '!=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1202)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_60225.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_59294->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1204)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lowerOrEqualExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_lowerOrEqualExpressionAST * operand_60616,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60616 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_60616->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_60616->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1222)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_60616->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_60616->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1225)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1227)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1228)) ;
    const GGS_bool cond_61494 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1229))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1229)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_61494.isBuiltAndTrue ()) {
      operand_60616->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1231)))).operator_concat (GGS_string ("' and does not support the '<=' operator")) COMMA_SOURCE_FILE_AT_LINE (1234)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_61494.isBuiltAndFalse ()) {
      const GGS_bool cond_61745 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1234))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1234))) ;
      if (cond_61745.isBuiltAndTrue ()) {
        operand_60616->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1236)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1236)))).operator_concat (GGS_string ("': '<=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1239)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_61745.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_lowerOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_60616->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1241)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@greaterOrEqualExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_greaterOrEqualExpressionAST * operand_62142,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62142 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_62142->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_62142->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_62142->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_62142->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1262)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1264)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1265)) ;
    const GGS_bool cond_63020 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1266))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1266)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_63020.isBuiltAndTrue ()) {
      operand_62142->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1268)))).operator_concat (GGS_string ("' and does not support the '>=' operator")) COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_63020.isBuiltAndFalse ()) {
      const GGS_bool cond_63271 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1271))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1271))) ;
      if (cond_63271.isBuiltAndTrue ()) {
        operand_62142->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1273)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1273)))).operator_concat (GGS_string ("': '>=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1276)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_63271.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_greaterOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_62142->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1278)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@strictGreaterExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictGreaterExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_strictGreaterExpressionAST * operand_63669,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63669 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_63669->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_63669->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1296)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_63669->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_63669->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1299)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1301)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1302)) ;
    const GGS_bool cond_64546 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1303))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1303)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_64546.isBuiltAndTrue ()) {
      operand_63669->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1305)))).operator_concat (GGS_string ("' and does not support the '>' operator")) COMMA_SOURCE_FILE_AT_LINE (1308)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_64546.isBuiltAndFalse ()) {
      const GGS_bool cond_64796 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1308))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1308))) ;
      if (cond_64796.isBuiltAndTrue ()) {
        operand_63669->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1310)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1310)))).operator_concat (GGS_string ("': '>' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1313)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_64796.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictGreaterExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_63669->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1315)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@strictLowerExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictLowerExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_strictLowerExpressionAST * operand_65191,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65191 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_65191->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_65191->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1333)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_65191->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_65191->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1336)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1338)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1339)) ;
    const GGS_bool cond_66068 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1340))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1340)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_66068.isBuiltAndTrue ()) {
      operand_65191->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1342)))).operator_concat (GGS_string ("' and does not support the '<' operator")) COMMA_SOURCE_FILE_AT_LINE (1345)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_66068.isBuiltAndFalse ()) {
      const GGS_bool cond_66318 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1345))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1345))) ;
      if (cond_66318.isBuiltAndTrue ()) {
        operand_65191->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)))).operator_concat (GGS_string ("': '<' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1350)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_66318.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictLowerExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mBoolType, operand_65191->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@rightShiftExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__rightShiftExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_rightShiftExpressionAST * operand_66710,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_66710 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_66710->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_66710->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1370)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_66710->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_66710->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1373)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1375)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1376)) ;
    const GGS_bool cond_67594 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1377))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_67594.isBuiltAndTrue ()) {
      operand_66710->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1379)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1382)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_67594.isBuiltAndFalse ()) {
      const GGS_bool cond_67786 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1382))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_67786.isBuiltAndTrue ()) {
        operand_66710->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1384)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1387)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_67786.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_66710->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1389)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@leftShiftExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__leftShiftExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_leftShiftExpressionAST * operand_68138,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_68138 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_68138->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_68138->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1407)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_68138->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_68138->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1410)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1412)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1413)) ;
    const GGS_bool cond_69022 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1414))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1414)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_69022.isBuiltAndTrue ()) {
      operand_68138->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1416)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1419)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_69022.isBuiltAndFalse ()) {
      const GGS_bool cond_69214 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1419))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_69214.isBuiltAndTrue ()) {
        operand_68138->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1421)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1424)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_69214.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_leftShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_68138->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1426)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@addExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_addExpressionAST * operand_69559,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_69559 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_69559->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_69559->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1444)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_69559->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_69559->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1447)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1449)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1452)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1453))).operator_and (function_binaryAddOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1453)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("+"),  operand_69559->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1450)) ;
    var_cas_outExpression = GGS_addExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_69559->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1459)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@subExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__subExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_subExpressionAST * operand_70653,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_70653 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_70653->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_70653->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1476)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_70653->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_70653->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1479)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1481)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1484)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1485))).operator_and (function_binarySubOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1485)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("-"),  operand_70653->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1482)) ;
    var_cas_outExpression = GGS_subExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_70653->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1491)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@multiplicationExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__multiplicationExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_multiplicationExpressionAST * operand_71758,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_71758 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_71758->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_71758->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1508)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_71758->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_71758->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1511)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1513)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1516)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1517))).operator_and (function_binaryMulOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1517)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("*"),  operand_71758->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1514)) ;
    var_cas_outExpression = GGS_multiplicationExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_71758->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1523)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@divisionExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__divisionExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_divisionExpressionAST * operand_72868,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_72868 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_72868->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_72868->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1540)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_72868->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_72868->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1543)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1545)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1548)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1549))).operator_and (function_binaryDivOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1549)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("/"),  operand_72868->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1546)) ;
    var_cas_outExpression = GGS_divisionExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_72868->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1555)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@moduloExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__moduloExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_moduloExpressionAST * operand_73970,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_73970 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_73970->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_73970->mLeftExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1572)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_73970->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_73970->mRightExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1575)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1577)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1580)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1581))).operator_and (function_binaryModOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1581)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("mod"),  operand_73970->mOperatorLocation,  var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1578)) ;
    var_cas_outExpression = GGS_moduloExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_73970->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1587)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@unaryMinusExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__unaryMinusExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_unaryMinusExpressionAST * operand_75076,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_75076 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_75076->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_75076->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1604)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1606)) ;
    const GGS_bool cond_75675 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1607))).operator_and (function_unaryMinusOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1607)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_75675.isBuiltAndTrue ()) {
      operand_75076->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1609)))).operator_concat (GGS_string ("' and does not support the unary minus operator")) COMMA_SOURCE_FILE_AT_LINE (1612)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_75675.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_unaryMinusExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_75076->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1614)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@notExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_notExpressionAST * operand_75990,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_75990 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_75990->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_75990->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1631)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1633)) ;
    const GGS_bool cond_76581 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1634))).operator_and (function_unaryNotOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1634)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_76581.isBuiltAndTrue ()) {
      operand_75990->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1636)))).operator_concat (GGS_string ("' and does not support the 'not' operator")) COMMA_SOURCE_FILE_AT_LINE (1639)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_76581.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_75990->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1641)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@complementExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__complementExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_complementExpressionAST * operand_76896,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_76896 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_76896->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_76896->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1658)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1660)) ;
    const GGS_bool cond_77487 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1661))).operator_and (function_unaryTildeOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1661)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_77487.isBuiltAndTrue ()) {
      operand_76896->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1663)))).operator_concat (GGS_string ("' and does not support the '~' operator")) COMMA_SOURCE_FILE_AT_LINE (1666)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_77487.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_tildeExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_76896->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1668)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ifExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_ifExpressionAST * operand_77796,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_77796 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_77796->mIfExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_77796->mIfExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (1685)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_then_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_77796->mThenExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_77796->mThenExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_then_expression COMMA_SOURCE_FILE_AT_LINE (1688)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_else_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_77796->mElseExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_77796->mElseExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (1691)) ;
      }
    }
    const GGS_bool cond_78708 = (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1693)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1693))).operator_isNotEqual (GGS_string ("bool")) ;
    if (cond_78708.isBuiltAndTrue ()) {
      operand_77796->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the test expression type is '@")).operator_concat (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1695)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1695)))).operator_concat (GGS_string ("', it should be '@bool'")) COMMA_SOURCE_FILE_AT_LINE (1698)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_78708.isBuiltAndFalse ()) {
      const GGS_bool cond_78970 = (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1698))).operator_isNotEqual (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1698))) ;
      if (cond_78970.isBuiltAndTrue ()) {
        operand_77796->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand expression types are '@")).operator_concat (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)))).operator_concat (GGS_string ("' and '@"))).operator_concat (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1700)))).operator_concat (GGS_string ("': they should be the same")) COMMA_SOURCE_FILE_AT_LINE (1703)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_78970.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_ifExpressionForGeneration ::constructor_new (inLexique, var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1706)), operand_77796->mOperatorLocation, var_cas_if_expression, var_cas_then_expression, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (1705)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@functionCallExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionCallExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_functionCallExpressionAST * operand_79354,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_79354 != NULL) {
    GGS_unifiedTypeMapProxyList  var_cas_functionSignature ;
    GGS_unifiedTypeMapProxy  var_cas_resultType ;
    if (var_cas_inAnalysisContext.mSemanticContext.mFunctionMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mFunctionMap (HERE)->method_searchKey (inLexique, operand_79354->mFunctionName, var_cas_functionSignature, var_cas_resultType COMMA_SOURCE_FILE_AT_LINE (1725)) ;
    }
    const GGS_bool cond_80083 = (var_cas_functionSignature.reader_length ()).operator_isNotEqual (operand_79354->mExpressions.reader_length ()) ;
    if (cond_80083.isBuiltAndTrue ()) {
      operand_79354->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_79354->mFunctionName)).operator_concat (GGS_string ("' function header declares "))).operator_concat (var_cas_functionSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1729)))).operator_concat (GGS_string (" formal parameter(s), but this function call names "))).operator_concat (operand_79354->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1730)))).operator_concat (GGS_string (" effective argument(s)")) COMMA_SOURCE_FILE_AT_LINE (1734)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_80083.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_semanticExpressionListForGeneration = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_80204 (var_cas_functionSignature, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_80204 = NULL ;
        GGS_semanticExpressionListAST::cEnumerator enumerator_80218 (operand_79354->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_80218 = NULL ;
        while (((operand_80204 = enumerator_80204.nextObject ()))
            && ((operand_80218 = enumerator_80218.nextObject ()))) {
          macroValidPointer (operand_80204) ;
          macroValidPointer (operand_80218) ;
          GGS_semanticExpressionForGeneration  var_cas_expression ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_80218->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_80218->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1738)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_80204->mType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1739)),  operand_80218->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (1739)) ;
          var_cas_semanticExpressionListForGeneration.addAssign_operation (var_cas_expression) ;
        }
      }
      var_cas_outExpression = GGS_functionCallExpressionForGeneration ::constructor_new (inLexique, var_cas_resultType, operand_79354->mFunctionName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1744)), operand_79354->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1745)), var_cas_semanticExpressionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1742)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@varInExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__varInExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_varInExpressionAST * operand_80887,
                                const GGS_analysisContext  /* var_cas_inAnalysisContext */,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_80887 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_type ;
    GGS_string var_cas_sourceVariableCppName ;
    GGS_string var_cas_nameForCheckingFormalParameterUsing ;
    var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, operand_80887->mVarName, var_cas_type, var_cas_sourceVariableCppName, var_cas_nameForCheckingFormalParameterUsing COMMA_SOURCE_FILE_AT_LINE (1761)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_81273 (operand_80887->mStructFieldList, true) ;
      const GGS_lstringlist::cElement * operand_81273 = NULL ;
      while (((operand_81273 = enumerator_81273.nextObject ()))) {
        macroValidPointer (operand_81273) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_type.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1763)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_81273->mValue, var_cas_type COMMA_SOURCE_FILE_AT_LINE (1764)) ;
        }
      }
    }
    var_cas_outExpression = GGS_varInExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_80887->mVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1768)), var_cas_sourceVariableCppName, var_cas_nameForCheckingFormalParameterUsing, operand_80887->mStructFieldList COMMA_SOURCE_FILE_AT_LINE (1766)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalTypeInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalTypeInExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_literalTypeInExpressionAST * operand_81748,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_81748 != NULL) {
    GGS_bool automatic_var_81999_0 ;
    GGS_unifiedTypeMapProxy  automatic_var_81999_1 ;
    GGS_typeKindEnum automatic_var_81999_2 ;
    GGS_typedAttributeList  automatic_var_81999_3 ;
    GGS_attributeMap  automatic_var_81999_4 ;
    GGS_typedAttributeList  automatic_var_81999_5 ;
    GGS_constructorMap  automatic_var_81999_6 ;
    GGS_readerMap  automatic_var_81999_7 ;
    GGS_modifierMap  automatic_var_81999_8 ;
    GGS_instanceMethodMap  automatic_var_81999_9 ;
    GGS_classMethodMap  automatic_var_81999_10 ;
    GGS_enumerationDescriptorList  automatic_var_81999_11 ;
    GGS_uint  automatic_var_81999_12 ;
    GGS_unifiedTypeMapProxyList  automatic_var_81999_13 ;
    GGS_nativeAttributeList  automatic_var_81999_14 ;
    GGS_stringset  automatic_var_81999_15 ;
    GGS_lstringlist  automatic_var_81999_16 ;
    GGS_typedAttributeList  automatic_var_81999_17 ;
    GGS_mapSearchMethodListAST  automatic_var_81999_18 ;
    GGS_mapSearchMethodListAST  automatic_var_81999_19 ;
    GGS_withAccessorMap  automatic_var_81999_20 ;
    GGS_bool automatic_var_81999_21 ;
    if (var_cas_inAnalysisContext.mSemanticContext.mTypeMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, operand_81748->mLiteralTypeName, automatic_var_81999_0, automatic_var_81999_1, automatic_var_81999_2, automatic_var_81999_3, automatic_var_81999_4, automatic_var_81999_5, automatic_var_81999_6, automatic_var_81999_7, automatic_var_81999_8, automatic_var_81999_9, automatic_var_81999_10, automatic_var_81999_11, automatic_var_81999_12, automatic_var_81999_13, automatic_var_81999_14, automatic_var_81999_15, automatic_var_81999_16, automatic_var_81999_17, automatic_var_81999_18, automatic_var_81999_19, automatic_var_81999_20, automatic_var_81999_21 COMMA_SOURCE_FILE_AT_LINE (1783)) ;
    }
    var_cas_outExpression = GGS_literalTypeInExpressionForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("type"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1786)) COMMA_SOURCE_FILE_AT_LINE (1786)), operand_81748->mLiteralTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1787)), operand_81748->mLiteralTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1788)) COMMA_SOURCE_FILE_AT_LINE (1785)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_castInExpressionAST * operand_82409,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_82409 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_82409->mReceiverExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_82409->mReceiverExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1801)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, operand_82409->mTypeName COMMA_SOURCE_FILE_AT_LINE (1803)) ;
    const GGS_bool cond_83519 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1805)).reader_mTypeKindEnum (inLexique COMMA_SOURCE_FILE_AT_LINE (1805))).operator_isEqual (GGS_typeKindEnum::constructor_classType (inLexique COMMA_SOURCE_FILE_AT_LINE (1805))) ;
    if (cond_83519.isBuiltAndTrue ()) {
      GGS_unifiedTypeMapProxy  var_cas_t = var_cas_type ;
      GGS_bool var_cas_found = (var_cas_t).operator_isEqual (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1808))) ;
      GGS_uint _variant_83314 = var_cas_inAnalysisContext.mSemanticContext.mTypeMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1809)) ;
      GGS_bool _condition_83314 (_variant_83314.isBuilt (), true) ;
      while (_condition_83314.isBuiltAndTrue ()) {
        _condition_83314 = ((var_cas_found).operator_not ()).operator_and ((var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1810)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (1810))).operator_not ()) ;
        if (_condition_83314.isBuiltAndTrue ()) {
          if (_variant_83314.uintValue () == 0) {
            inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1813)) ;
            _condition_83314 = GGS_bool (false) ;
          }else{
            _variant_83314.decrement_operation (inLexique COMMA_HERE) ;
            var_cas_t = var_cas_t.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (1811)) ;
            var_cas_found = (var_cas_t).operator_isEqual (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1812))) ;
          }
        }
      }
      const GGS_bool cond_83506 = (var_cas_found).operator_not () ;
      if (cond_83506.isBuiltAndTrue ()) {
        operand_82409->mTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '@")).operator_concat (operand_82409->mTypeName)).operator_concat (GGS_string ("' is not a descendant of the '@"))).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1816)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1816)))).operator_concat (GGS_string ("' type of the cast expression")) COMMA_SOURCE_FILE_AT_LINE (1818)) ;
      }
    }else if (cond_83519.isBuiltAndFalse ()) {
      const GGS_bool cond_83721 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1819)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1819))).operator_isNotEqual (GGS_string ("object")) ;
      if (cond_83721.isBuiltAndTrue ()) {
        var_cas_expression.reader_mLocation (inLexique COMMA_SOURCE_FILE_AT_LINE (1820)).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("cast expression should be an @object or a class instance: it is an @")).operator_concat (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1821)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1821)))).operator_concat (GGS_string (" instance")) COMMA_SOURCE_FILE_AT_LINE (1822)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_errorLocationExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_82409->mErrorLocationExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_82409->mErrorLocationExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_errorLocationExpression COMMA_SOURCE_FILE_AT_LINE (1825)) ;
      }
    }
    const GGS_bool var_cas_useLocationReader = (var_cas_errorLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1827))).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLocationType) ;
    const GGS_bool cond_85912 = var_cas_useLocationReader ;
    if (cond_85912.isBuiltAndTrue ()) {
      const GGS_readerMap  var_cas_readerMap = var_cas_errorLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1829)).reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1829)) ;
      elementOf_GGS_readerMap * operand_84279 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (GGS_string ("location")) ;
      if (NULL != operand_84279) {
        const GGS_bool cond_84705 = (operand_84279->mInfo.mArgumentTypeList.reader_length ()).operator_isNotEqual (GGS_uint (0U)) ;
        if (cond_84705.isBuiltAndTrue ()) {
          operand_82409->mEndOfErrorLocationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the error location expression type is '@")).operator_concat (var_cas_errorLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1833)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1833)))).operator_concat (GGS_string ("' and defines a 'location' reader with arguments; it should be either of the '@location' type, either defines a 'location' reader without argument that"
            " returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (1836)) ;
        }else if (cond_84705.isBuiltAndFalse ()) {
          const GGS_bool cond_85181 = (operand_84279->mInfo.mReturnedType).operator_isNotEqual (var_cas_inAnalysisContext.mPredefinedTypes.mLocationType) ;
          if (cond_85181.isBuiltAndTrue ()) {
            operand_82409->mEndOfErrorLocationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the error location expression type is '@")).operator_concat (var_cas_errorLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1838)))).operator_concat (GGS_string ("' and defines a 'location' reader that returns an '@"))).operator_concat (operand_84279->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1839)))).operator_concat (GGS_string ("' object; it should be either of the '@location' type, either defines a 'location' reader without argument that returns an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (1842)) ;
          }
        }
        var_cas_errorLocationExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mLocationType, operand_82409->mEndOfErrorLocationExpression, GGS_bool (false), var_cas_errorLocationExpression, GGS_stringlist ::constructor_emptyList (), GGS_string ("location"), GGS_semanticExpressionListForGeneration ::constructor_emptyList (), operand_84279->mInfo.mHasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1843)) ;
      }else{
        operand_82409->mEndOfErrorLocationExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the error location expression type is '@")).operator_concat (var_cas_errorLocationExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1855)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1855)))).operator_concat (GGS_string ("' and does not define a 'location' reader; it should be either of the '@location' type, either defines a 'location' reader without argument that return"
          "s an '@location' object")) COMMA_SOURCE_FILE_AT_LINE (1858)) ;
      }
    }
    const GGS_bool cond_86189 = (var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1861)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1861))).operator_isEqual (GGS_string ("object")) ;
    if (cond_86189.isBuiltAndTrue ()) {
      var_cas_outExpression = GGS_extractObjectInExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_82409->mEndOfReceiverExpression, var_cas_expression, operand_82409->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1866)), var_cas_errorLocationExpression COMMA_SOURCE_FILE_AT_LINE (1862)) ;
    }else if (cond_86189.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_castInExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_82409->mTypeName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1872)), var_cas_expression, operand_82409->mUseKindOfClass, operand_82409->mTypeName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1875)), var_cas_errorLocationExpression COMMA_SOURCE_FILE_AT_LINE (1870)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperObjectInstanciationInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_filewrapperObjectInstanciationInExpressionAST * operand_86585,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_86585 != NULL) {
    GGS_lstring  var_cas_filewrapperPath ;
    GGS_lstringlist  automatic_var_86909_0 ;
    GGS_wrapperFileMap  automatic_var_86909_1 ;
    GGS_wrapperDirectoryMap  automatic_var_86909_2 ;
    GGS_filewrapperTemplateMap  automatic_var_86909_3 ;
    if (var_cas_inAnalysisContext.mSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_86585->mFilewrapperName, var_cas_filewrapperPath, automatic_var_86909_0, automatic_var_86909_1, automatic_var_86909_2, automatic_var_86909_3 COMMA_SOURCE_FILE_AT_LINE (1890)) ;
    }
    var_cas_outExpression = GGS_filewrapperInExpressionForGeneration ::constructor_new (inLexique, GGS_unifiedTypeMapProxy ::constructor_searchKey (inLexique, var_cas_inAnalysisContext.mSemanticContext.mTypeMap, GGS_lstring ::constructor_new (inLexique, GGS_string ("filewrapper"), operand_86585->mFilewrapperName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1893)) COMMA_SOURCE_FILE_AT_LINE (1893)) COMMA_SOURCE_FILE_AT_LINE (1893)), operand_86585->mFilewrapperName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1894)), operand_86585->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1895)), var_cas_filewrapperPath.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1896)) COMMA_SOURCE_FILE_AT_LINE (1892)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperTemplateInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_filewrapperTemplateInExpressionAST * operand_87394,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_87394 != NULL) {
    GGS_filewrapperTemplateMap  var_cas_filewrapperTemplateMap ;
    GGS_lstring  automatic_var_87693_0 ;
    GGS_lstringlist  automatic_var_87693_1 ;
    GGS_wrapperFileMap  automatic_var_87693_2 ;
    GGS_wrapperDirectoryMap  automatic_var_87693_3 ;
    if (var_cas_inAnalysisContext.mSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_87394->mFilewrapperName, automatic_var_87693_0, automatic_var_87693_1, automatic_var_87693_2, automatic_var_87693_3, var_cas_filewrapperTemplateMap COMMA_SOURCE_FILE_AT_LINE (1909)) ;
    }
    GGS_unifiedTypeMapProxyList  var_cas_templateSignature ;
    GGS_lstring  automatic_var_87832_0 ;
    if (var_cas_filewrapperTemplateMap.isBuilt ()) {
      var_cas_filewrapperTemplateMap (HERE)->method_searchKey (inLexique, operand_87394->mFilewrapperTemplateName, var_cas_templateSignature, automatic_var_87832_0 COMMA_SOURCE_FILE_AT_LINE (1912)) ;
    }
    GGS_semanticExpressionListForGeneration  var_cas_effectiveParameterList ;
    const GGS_bool cond_88311 = (operand_87394->mExpressions.reader_length ()).operator_isNotEqual (var_cas_templateSignature.reader_length ()) ;
    if (cond_88311.isBuiltAndTrue ()) {
      operand_87394->mFilewrapperTemplateName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_87394->mFilewrapperTemplateName)).operator_concat (GGS_string ("' template of '"))).operator_concat (operand_87394->mFilewrapperName)).operator_concat (GGS_string ("' filewrapper requires "))).operator_concat (var_cas_templateSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1918)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_87394->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1919)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (1921)) ;
      var_cas_effectiveParameterList.drop () ;
    }else if (cond_88311.isBuiltAndFalse ()) {
      var_cas_effectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_88417 (operand_87394->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_88417 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_88436 (var_cas_templateSignature, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_88436 = NULL ;
        while (((operand_88417 = enumerator_88417.nextObject ()))
            && ((operand_88436 = enumerator_88436.nextObject ()))) {
          macroValidPointer (operand_88417) ;
          macroValidPointer (operand_88436) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_88417->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_88417->mExpression (HERE), var_cas_inAnalysisContext, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (1925)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_88436->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1926)),  operand_88417->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (1926)) ;
          var_cas_effectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
    }
    var_cas_outExpression = GGS_filewrapperTemplateInExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_87394->mFilewrapperName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1933)), operand_87394->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1934)), operand_87394->mFilewrapperTemplateName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1935)), var_cas_effectiveParameterList COMMA_SOURCE_FILE_AT_LINE (1931)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@filewrapperInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperInExpressionAST__analyzeSemanticExpression (C_CompilerEx & inLexique,
                                const cPtr_filewrapperInExpressionAST * operand_89144,
                                const GGS_analysisContext  var_cas_inAnalysisContext,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_89144 != NULL) {
    GGS_stringlist  var_cas_directoryList ;
    GGS_string var_cas_fileName ;
    const GGS_bool cond_89474 = (operand_89144->mFilewrapperPath.ggs_string ().reader_length ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_89474.isBuiltAndTrue ()) {
      operand_89144->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("path is empty") COMMA_SOURCE_FILE_AT_LINE (1952)) ;
      var_cas_directoryList.drop () ;
      var_cas_fileName.drop () ;
    }else if (cond_89474.isBuiltAndFalse ()) {
      const GGS_bool cond_89626 = (operand_89144->mFilewrapperPath.ggs_string ().reader_firstCharacterOrNul ()).operator_isEqual (GGS_char (TO_UNICODE ('/'))) ;
      if (cond_89626.isBuiltAndTrue ()) {
        operand_89144->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the path should not begin with '/'") COMMA_SOURCE_FILE_AT_LINE (1954)) ;
        var_cas_directoryList.drop () ;
        var_cas_fileName.drop () ;
      }else if (cond_89626.isBuiltAndFalse ()) {
        var_cas_directoryList = operand_89144->mFilewrapperPath.ggs_string ().reader_componentsSeparatedByString (GGS_string ("/")) ;
        var_cas_directoryList.modifier_popLast (inLexique, var_cas_fileName COMMA_SOURCE_FILE_AT_LINE (1956)) ;
      }
    }
    GGS_wrapperFileMap  var_cas_filewrapperFileMap ;
    GGS_wrapperDirectoryMap  var_cas_filewrapperDirectoryMap ;
    GGS_lstring  automatic_var_90011_0 ;
    GGS_lstringlist  automatic_var_90011_1 ;
    GGS_filewrapperTemplateMap  automatic_var_90011_2 ;
    if (var_cas_inAnalysisContext.mSemanticContext.mFilewrapperMap.isBuilt ()) {
      var_cas_inAnalysisContext.mSemanticContext.mFilewrapperMap (HERE)->method_searchKey (inLexique, operand_89144->mFilewrapperName, automatic_var_90011_0, automatic_var_90011_1, var_cas_filewrapperFileMap, var_cas_filewrapperDirectoryMap, automatic_var_90011_2 COMMA_SOURCE_FILE_AT_LINE (1961)) ;
    }
    GGS_string var_cas_builtPath = GGS_string ("") ;
    GGS_uint _variant_90733 = var_cas_filewrapperDirectoryMap.reader_count ().add_operation (inLexique, GGS_uint (1U) COMMA_SOURCE_FILE_AT_LINE (1964)) ;
    GGS_bool _condition_90733 (_variant_90733.isBuilt (), true) ;
    while (_condition_90733.isBuiltAndTrue ()) {
      _condition_90733 = (var_cas_directoryList.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
      if (_condition_90733.isBuiltAndTrue ()) {
        if (_variant_90733.uintValue () == 0) {
          inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (1980)) ;
          _condition_90733 = GGS_bool (false) ;
        }else{
          _variant_90733.decrement_operation (inLexique COMMA_HERE) ;
          GGS_string var_cas_directoryName ;
          var_cas_directoryList.modifier_popFirst (inLexique, var_cas_directoryName COMMA_SOURCE_FILE_AT_LINE (1967)) ;
          var_cas_builtPath.dotAssign_operation (var_cas_directoryName) ;
          var_cas_builtPath.appendCString ("/") ;
          const GGS_bool cond_90497 = var_cas_filewrapperDirectoryMap.reader_hasKey (var_cas_directoryName) ;
          if (cond_90497.isBuiltAndTrue ()) {
            GGS_uint  automatic_var_90486_0 ;
            if (var_cas_filewrapperDirectoryMap.isBuilt ()) {
              var_cas_filewrapperDirectoryMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_directoryName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1971)), var_cas_filewrapperFileMap, var_cas_filewrapperDirectoryMap, automatic_var_90486_0 COMMA_SOURCE_FILE_AT_LINE (1970)) ;
            }
          }else if (cond_90497.isBuiltAndFalse ()) {
            operand_89144->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("the '")).operator_concat (var_cas_builtPath)).operator_concat (GGS_string ("' path does not exists for the '"))).operator_concat (operand_89144->mFilewrapperName)).operator_concat (GGS_string ("' filewrapper")) COMMA_SOURCE_FILE_AT_LINE (1978)) ;
            var_cas_filewrapperFileMap.drop () ;
            var_cas_directoryList = GGS_stringlist ::constructor_emptyList () ;
          }
        }
      }
    }
    GGS_uint  var_cas_fileIndex ;
    const GGS_bool cond_90901 = var_cas_filewrapperFileMap.reader_hasKey (var_cas_fileName) ;
    if (cond_90901.isBuiltAndTrue ()) {
      GGS_string automatic_var_90892_0 ;
      GGS_uint  automatic_var_90892_1 ;
      if (var_cas_filewrapperFileMap.isBuilt ()) {
        var_cas_filewrapperFileMap (HERE)->method_searchKey (inLexique, GGS_lstring ::constructor_new (inLexique, var_cas_fileName, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (1983)), automatic_var_90892_0, automatic_var_90892_1, var_cas_fileIndex COMMA_SOURCE_FILE_AT_LINE (1983)) ;
      }
    }else if (cond_90901.isBuiltAndFalse ()) {
      operand_89144->mFilewrapperPath.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (var_cas_fileName)).operator_concat (GGS_string ("' file does not exist in the '"))).operator_concat (var_cas_builtPath)).operator_concat (GGS_string ("' directory of '"))).operator_concat (operand_89144->mFilewrapperName)).operator_concat (GGS_string ("' filewrapper")) COMMA_SOURCE_FILE_AT_LINE (1989)) ;
      var_cas_fileIndex.drop () ;
    }
    var_cas_outExpression = GGS_filewrapperStaticPathInExpressionForGeneration ::constructor_new (inLexique, var_cas_inAnalysisContext.mPredefinedTypes.mStringType, operand_89144->mFilewrapperName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1993)), operand_89144->mFilewrapperName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1994)), var_cas_fileIndex COMMA_SOURCE_FILE_AT_LINE (1991)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticExpressionAnalysis (void) {
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__selfCopyInExpressionAST__analyzeSemanticExpression, gClassInfoFor__selfCopyInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__hereExpressionAST__analyzeSemanticExpression, gClassInfoFor__hereExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__trueExpressionAST__analyzeSemanticExpression, gClassInfoFor__trueExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__falseExpressionAST__analyzeSemanticExpression, gClassInfoFor__falseExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalCharExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalCharExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalStringExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalStringExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalDoubleExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalDoubleExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__constructorExpressionAST__analyzeSemanticExpression, gClassInfoFor__constructorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__readerCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__readerCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__thisReaderCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__thisReaderCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__superReaderCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__superReaderCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__optionExpressionAST__analyzeSemanticExpression, gClassInfoFor__optionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__concatExpressionAST__analyzeSemanticExpression, gClassInfoFor__concatExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__orExpressionAST__analyzeSemanticExpression, gClassInfoFor__orExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__andExpressionAST__analyzeSemanticExpression, gClassInfoFor__andExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__xorExpressionAST__analyzeSemanticExpression, gClassInfoFor__xorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__equalExpressionAST__analyzeSemanticExpression, gClassInfoFor__equalExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__notEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__lowerOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__greaterOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictGreaterExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictGreaterExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictLowerExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictLowerExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__rightShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__rightShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__leftShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__leftShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__addExpressionAST__analyzeSemanticExpression, gClassInfoFor__addExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__subExpressionAST__analyzeSemanticExpression, gClassInfoFor__subExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__multiplicationExpressionAST__analyzeSemanticExpression, gClassInfoFor__multiplicationExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__divisionExpressionAST__analyzeSemanticExpression, gClassInfoFor__divisionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__moduloExpressionAST__analyzeSemanticExpression, gClassInfoFor__moduloExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__unaryMinusExpressionAST__analyzeSemanticExpression, gClassInfoFor__unaryMinusExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notExpressionAST__analyzeSemanticExpression, gClassInfoFor__notExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__complementExpressionAST__analyzeSemanticExpression, gClassInfoFor__complementExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__ifExpressionAST__analyzeSemanticExpression, gClassInfoFor__ifExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__functionCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__functionCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__varInExpressionAST__analyzeSemanticExpression, gClassInfoFor__varInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalTypeInExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalTypeInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__castInExpressionAST__analyzeSemanticExpression, gClassInfoFor__castInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperObjectInstanciationInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperTemplateInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperInExpressionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticExpressionAnalysis (void) {
  gCachedResultForOnceFunction_selfMarkName.drop () ;
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticExpressionAnalysis (prologueRoutineFor_semanticExpressionAnalysis, epilogueRoutineFor_semanticExpressionAnalysis) ;

//---------------------------------------------------------------------------*

