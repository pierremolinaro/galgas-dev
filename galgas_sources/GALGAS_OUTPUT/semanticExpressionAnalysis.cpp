//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'semanticExpressionAnalysis.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       may 15th, 2010, at 18h1'59"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticExpressionAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticExpressionAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     AUTOMATON FOR '@variableMap' MAP                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_1 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_1_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_2 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_2_0 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_2 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_3 [32] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_3 [40] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_3_1 [44] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_3_3 [53] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_0 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_2 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_3 [38] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_6 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_6_0 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_3 [41] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_8 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kStateMessageForMap_variableMap_10 [82] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_10_0 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_2 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_3 [52] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_0 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_1 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_2 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_3 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_12 [83] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_12_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_0 [58] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_15 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_17_0 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_2 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_3 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_0 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_1 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_2 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_3 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_1 [31] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_2 [32] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_3 [31] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonTransition kAutomaton_variableMap [20] [4] = {
  { // State 'usedLocalConstant'
    {0, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'localConstant'
    {0, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'undefinedLocalVariable'
    {2, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_2_0}, // 'readAccess' -> 'undefinedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {2, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_2_2}, // 'readWriteAccess' -> 'undefinedLocalVariable'
    {2, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_2_3}, // 'dropAccess' -> 'undefinedLocalVariable'
  },
  { // State 'definedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_3_1}, // 'writeAccess' -> 'definedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedLocalVariable'
    {5, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_3_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'usedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'droppedLocalVariable'
    {5, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_5_0}, // 'readAccess' -> 'droppedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_5_2}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_5_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'undefinedOutputFormalArgument'
    {6, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_6_0}, // 'readAccess' -> 'undefinedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedOutputFormalArgument'
    {6, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_6_2}, // 'readWriteAccess' -> 'undefinedOutputFormalArgument'
    {6, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_6_3}, // 'dropAccess' -> 'undefinedOutputFormalArgument'
  },
  { // State 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'definedOutputFormalArgument'
    {6, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'undefinedOutputFormalArgument'
  },
  { // State 'unusedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'droppedInputOutputFormalArgument'
    {10, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_10_0}, // 'readAccess' -> 'droppedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_10_2}, // 'readWriteAccess' -> 'droppedInputOutputFormalArgument'
    {10, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_10_3}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'inputOutputFormalArgumentDeclaredAsUnused'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_0}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_1}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_2}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_3}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'constantInputFormalArgument'
    {13, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'usedConstantInputFormalArgument'
    {13, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'constantInputFormalArgumentDeclaredAsUnused'
    {13, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_14_0}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'inputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'droppedInputFormalArgument'
    {17, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_17_0}, // 'readAccess' -> 'droppedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_17_2}, // 'readWriteAccess' -> 'droppedInputFormalArgument'
    {17, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_17_3}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'inputFormalArgumentDeclaredAsUnused'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_0}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_1}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_2}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_3}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'currentInstanceAttribute'
    {19, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_19_1}, // 'writeAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_19_2}, // 'readWriteAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_19_3}, // 'dropAccess' -> 'currentInstanceAttribute'
  },
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonFinalIssue kFinalIssue_variableMap [20] = {
  {kMapAutomatonNoIssue, NULL}, // State 'usedLocalConstant'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_1}, // State 'localConstant'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_2}, // State 'undefinedLocalVariable'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_3}, // State 'definedLocalVariable'
  {kMapAutomatonNoIssue, NULL}, // State 'usedLocalVariable'
  {kMapAutomatonNoIssue, NULL}, // State 'droppedLocalVariable'
  {kMapAutomatonIssueError, kStateMessageForMap_variableMap_6}, // State 'undefinedOutputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'definedOutputFormalArgument'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_8}, // State 'unusedInputOutputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'usedInputOutputFormalArgument'
  {kMapAutomatonIssueError, kStateMessageForMap_variableMap_10}, // State 'droppedInputOutputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'inputOutputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_12}, // State 'constantInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'usedConstantInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'constantInputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_15}, // State 'inputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'usedInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'droppedInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'inputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonNoIssue, NULL}, // State 'currentInstanceAttribute'
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_variableMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_variableMap::e_variableMap (void) :
mTypeProxy (),
mCppName () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@variableMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_variableMap ("variableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_variableMap::
elementOf_GGS_variableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_variableMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_variableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTypeProxy.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mCppName.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_variableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_variableMap * ptr = dynamic_cast <const elementOf_GGS_variableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTypeProxy.operator_isEqual (ptr->mInfo.mTypeProxy)).boolValue ()
           && (mInfo.mCppName.operator_isEqual (ptr->mInfo.mCppName)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_variableMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_variableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isNotEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               const GGS_string& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_variableMap info  ;
    info.mTypeProxy = inParameter0 ;
    info.mCppName = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 inActionIndex,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_string  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    node->performTransition (inLexique, inKey, kAutomaton_variableMap [node->mCurrentState][inActionIndex] COMMA_THERE) ;
    outParameter0 = node->mInfo.mTypeProxy ;
    outParameter1 = node->mInfo.mCppName ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::method_checkAutomatonStates (C_Compiler & inLexique,
                                             const GGS_location & inErrorLocation
                                             COMMA_LOCATION_ARGS) const {
  checkAutomatonStates (inLexique, inErrorLocation, kFinalIssue_variableMap COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForDropAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchForReadAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 1,
                 kSearchMessage_searchForWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 2,
                 kSearchMessage_searchForReadWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForDropAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 3,
                 kSearchMessage_searchForDropAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertNonMutableAttribute [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertUndefinedLocalVariable [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertDefinedLocalVariable [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertUsedLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertNonMutableAttribute (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 19,
                 kInsertMessage_insertNonMutableAttribute,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertUndefinedLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 2,
                 kInsertMessage_insertUndefinedLocalVariable,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertDefinedLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 3,
                 kInsertMessage_insertDefinedLocalVariable,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertLocalConstant (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 1,
                 kInsertMessage_insertLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertUsedLocalConstant (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertUsedLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 15,
                 kInsertMessage_insertInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 18,
                 kInsertMessage_insertInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 12,
                 kInsertMessage_insertConstantInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 14,
                 kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertOutputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 6,
                 kInsertMessage_insertOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 8,
                 kInsertMessage_insertInputOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 11,
                 kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_variableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_variableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_variableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @variableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_variableMap::cEnumerator::_mTypeProxy (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTypeProxy ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_variableMap::cEnumerator::_mCppName (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_variableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_variableMap * p = NULL ;
    macroMyNew (p, GGS_variableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_variableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_variableMap * p = dynamic_cast <const GGS_variableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_variableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_variableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_variableMap ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalConstantState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (0) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfLocalConstantState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (1) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (2) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (3) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (4) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (5) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (6) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (7) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUnusedInputOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (8) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (9) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (10) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputOutputFormalArgumentDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (11) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (12) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedConstantInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (13) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalArgumentDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (14) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (15) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (16) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (17) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalArgumentDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (18) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfCurrentInstanceAttributeState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (19) ;
}

//---------------------------------------------------------------------------*

// Override 'selectBlock'
//---------------------------------------------------------------------------*

static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_selectBlock_forMap_variableMap [23] = {
  {1, 0, 0, kMapAutomatonNoIssue, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 3, kMapAutomatonNoIssue, NULL}, // undefinedLocalVariable, definedLocalVariable, definedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 5, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {4, 3, 3, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, definedLocalVariable, definedLocalVariable
  {4, 5, 5, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {5, 3, 3, kMapAutomatonNoIssue, NULL}, // droppedLocalVariable, definedLocalVariable, definedLocalVariable
  {6, 7, 7, kMapAutomatonNoIssue, NULL}, // undefinedOutputFormalArgument, definedOutputFormalArgument, definedOutputFormalArgument
  {7, 6, 6, kMapAutomatonNoIssue, NULL}, // definedOutputFormalArgument, undefinedOutputFormalArgument, undefinedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 10, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {9, 10, 10, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {10, 9, 9, kMapAutomatonNoIssue, NULL}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 9, 9, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 10, 10, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {12, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 17, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, droppedInputFormalArgument, droppedInputFormalArgument
  {16, 17, 17, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, droppedInputFormalArgument, droppedInputFormalArgument
  {17, 16, 16, kMapAutomatonNoIssue, NULL}, // droppedInputFormalArgument, usedInputFormalArgument, usedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 17, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, droppedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

// Override 'selectBlock'
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_3 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_2 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_5 [72] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_5 [72] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_3 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_4 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_6_7 [90] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_7_6 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_8_10 [94] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_9_10 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_8 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_9 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_11 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_11_10 [93] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_15_17 [80] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_16_17 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_15 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_16 [87] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_selectBlock_forMap_variableMap [36] = {
  {0, 1, 0, kMapAutomatonNoIssue, NULL}, // usedLocalConstant, localConstant, usedLocalConstant
  {1, 0, 0, kMapAutomatonNoIssue, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 3, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_3}, // undefinedLocalVariable, definedLocalVariable, definedLocalVariable
  {3, 2, 3, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_2}, // definedLocalVariable, undefinedLocalVariable, definedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 3, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_5}, // definedLocalVariable, droppedLocalVariable, definedLocalVariable
  {4, 3, 4, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, definedLocalVariable, usedLocalVariable
  {4, 5, 4, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_5}, // usedLocalVariable, droppedLocalVariable, usedLocalVariable
  {5, 3, 5, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_3}, // droppedLocalVariable, definedLocalVariable, droppedLocalVariable
  {5, 4, 5, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_4}, // droppedLocalVariable, usedLocalVariable, droppedLocalVariable
  {6, 7, 7, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_6_7}, // undefinedOutputFormalArgument, definedOutputFormalArgument, definedOutputFormalArgument
  {7, 6, 7, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_7_6}, // definedOutputFormalArgument, undefinedOutputFormalArgument, definedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 8, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_8_10}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {9, 8, 9, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, unusedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 10, 9, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_9_10}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 11, 11, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, inputOutputFormalArgumentDeclaredAsUnused
  {10, 8, 8, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_8}, // droppedInputOutputFormalArgument, unusedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {10, 9, 9, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_9}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {10, 11, 11, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_11}, // droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, inputOutputFormalArgumentDeclaredAsUnused
  {11, 9, 11, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {11, 10, 11, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_11_10}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {12, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {13, 12, 13, kMapAutomatonNoIssue, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgument, usedConstantInputFormalArgument
  {13, 14, 13, kMapAutomatonNoIssue, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 15, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_15_17}, // inputFormalParameter, droppedInputFormalArgument, inputFormalParameter
  {16, 15, 16, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, inputFormalParameter, usedInputFormalArgument
  {16, 17, 16, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_16_17}, // usedInputFormalArgument, droppedInputFormalArgument, usedInputFormalArgument
  {16, 18, 16, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument
  {17, 15, 17, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_15}, // droppedInputFormalArgument, inputFormalParameter, droppedInputFormalArgument
  {17, 16, 16, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_16}, // droppedInputFormalArgument, usedInputFormalArgument, usedInputFormalArgument
  {17, 18, 17, kMapAutomatonNoIssue, NULL}, // droppedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 17, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, droppedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_beginOverrideForSelectBlock (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) {
  if (isBuilt ()) {
    beginOverride (kBranchBehaviourForOverride_selectBlock_forMap_variableMap, 23,
                   kBranchCombinationForOverride_selectBlock_forMap_variableMap, 36,
                   "selectBlock",
                   inLexique COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_endBranch (C_Compiler & inCompiler,
                       const GGS_location & inErrorLocation
                       COMMA_LOCATION_ARGS) {
  internalEndBranch (inCompiler, inErrorLocation, kFinalIssue_variableMap COMMA_THERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkAssignmentTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkAssignmentTypes (C_Compiler & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inTargetType,
                                const GGS_unifiedTypeMapProxy   var_cas_inSourceType,
                                const GGS_location   var_cas_inErrorLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkAssignmentTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapProxy  var_cas_sourceType = var_cas_inSourceType ;
  GGS_bool var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_inSourceType) ;
  GGS_uint _variant_19001 = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (261)) ;
  GGS_bool _condition_19001 (_variant_19001.isBuilt (), true) ;
  while (_condition_19001.isBuiltAndTrue ()) {
    _condition_19001 = ((var_cas_ok).operator_not ()).operator_and ((var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (261)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (261))).operator_not ()) ;
    if (_condition_19001.isBuiltAndTrue ()) {
      if (_variant_19001.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (264)) ;
        _condition_19001 = GGS_bool (false) ;
      }else{
        _variant_19001.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_sourceType = var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (262)) ;
        var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_inSourceType) ;
      }
    }
  }
  const GGS_bool cond_19181 = (var_cas_ok).operator_not () ;
  if (cond_19181.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("target object type is '@")).operator_concat (var_cas_inTargetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_concat (GGS_string ("' and cannot be assigned by an '@"))).operator_concat (var_cas_inSourceType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (266)))).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (267)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkAssignmentTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'predefinedTypes' struct                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_predefinedTypes ("predefinedTypes", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_predefinedTypes::GGS_predefinedTypes (void) :
mLocationType (),
mBoolType (),
mCharType (),
mStringType (),
mUIntType (),
mSIntType (),
mUInt64Type (),
mSInt64Type (),
mDoubleType () {
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes::~GGS_predefinedTypes (void) {
}

//---------------------------------------------------------------------------*

void GGS_predefinedTypes::drop (void) {
  mLocationType.drop () ;
  mBoolType.drop () ;
  mCharType.drop () ;
  mStringType.drop () ;
  mUIntType.drop () ;
  mSIntType.drop () ;
  mUInt64Type.drop () ;
  mSInt64Type.drop () ;
  mDoubleType.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_predefinedTypes::isBuilt (void) const {
  return mLocationType.isBuilt ()
    && mBoolType.isBuilt ()
    && mCharType.isBuilt ()
    && mStringType.isBuilt ()
    && mUIntType.isBuilt ()
    && mSIntType.isBuilt ()
    && mUInt64Type.isBuilt ()
    && mSInt64Type.isBuilt ()
    && mDoubleType.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isEqual (inOperand.mLocationType)
    .operator_and (mBoolType.operator_isEqual (inOperand.mBoolType))
    .operator_and (mCharType.operator_isEqual (inOperand.mCharType))
    .operator_and (mStringType.operator_isEqual (inOperand.mStringType))
    .operator_and (mUIntType.operator_isEqual (inOperand.mUIntType))
    .operator_and (mSIntType.operator_isEqual (inOperand.mSIntType))
    .operator_and (mUInt64Type.operator_isEqual (inOperand.mUInt64Type))
    .operator_and (mSInt64Type.operator_isEqual (inOperand.mSInt64Type))
    .operator_and (mDoubleType.operator_isEqual (inOperand.mDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isNotEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isNotEqual (inOperand.mLocationType)
    .operator_or (mBoolType.operator_isNotEqual (inOperand.mBoolType))
    .operator_or (mCharType.operator_isNotEqual (inOperand.mCharType))
    .operator_or (mStringType.operator_isNotEqual (inOperand.mStringType))
    .operator_or (mUIntType.operator_isNotEqual (inOperand.mUIntType))
    .operator_or (mSIntType.operator_isNotEqual (inOperand.mSIntType))
    .operator_or (mUInt64Type.operator_isNotEqual (inOperand.mUInt64Type))
    .operator_or (mSInt64Type.operator_isNotEqual (inOperand.mSInt64Type))
    .operator_or (mDoubleType.operator_isNotEqual (inOperand.mDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::
constructor_new (const GGS_unifiedTypeMapProxy & argument_0,
                 const GGS_unifiedTypeMapProxy & argument_1,
                 const GGS_unifiedTypeMapProxy & argument_2,
                 const GGS_unifiedTypeMapProxy & argument_3,
                 const GGS_unifiedTypeMapProxy & argument_4,
                 const GGS_unifiedTypeMapProxy & argument_5,
                 const GGS_unifiedTypeMapProxy & argument_6,
                 const GGS_unifiedTypeMapProxy & argument_7,
                 const GGS_unifiedTypeMapProxy & argument_8) {
  GGS_predefinedTypes result ;
  result.mLocationType = argument_0 ;
  result.mBoolType = argument_1 ;
  result.mCharType = argument_2 ;
  result.mStringType = argument_3 ;
  result.mUIntType = argument_4 ;
  result.mSIntType = argument_5 ;
  result.mUInt64Type = argument_6 ;
  result.mSInt64Type = argument_7 ;
  result.mDoubleType = argument_8 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_predefinedTypes::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @predefinedTypes" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLocationType " ;
    _s << mLocationType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mBoolType " ;
    _s << mBoolType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCharType " ;
    _s << mCharType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mStringType " ;
    _s << mStringType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUIntType " ;
    _s << mUIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSIntType " ;
    _s << mSIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUInt64Type " ;
    _s << mUInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSInt64Type " ;
    _s << mSInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mDoubleType " ;
    _s << mDoubleType.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_predefinedTypes::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_predefinedTypes * p = NULL ;
    macroMyNew (p, GGS_predefinedTypes (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_predefinedTypes result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_predefinedTypes * p = dynamic_cast <const GGS_predefinedTypes *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_predefinedTypes, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_predefinedTypes::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_predefinedTypes ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression> gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression
findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.count ()) {
    result = gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (superClassPtr) ;
      gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@selfInExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selfInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_selfInExpressionAST * operand_20708,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_20708 != NULL) {
    const GGS_bool cond_21188 = var_cas_ioVariableMap.reader_hasKey (GGS_string ("self")) ;
    if (cond_21188.isBuiltAndTrue ()) {
      GGS_string var_cas_selfCppName ;
      GGS_unifiedTypeMapProxy  var_cas_selfType ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (312)), var_cas_selfType, var_cas_selfCppName COMMA_SOURCE_FILE_AT_LINE (312)) ;
      var_cas_outExpression = GGS_selfInExpressionForGeneration ::constructor_new (inLexique, var_cas_selfType, operand_20708->mSelfLocation, var_cas_selfCppName COMMA_SOURCE_FILE_AT_LINE (313)) ;
    }else if (cond_21188.isBuiltAndFalse ()) {
      operand_20708->mSelfLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (316)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@hereExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__hereExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_hereExpressionAST * operand_21436,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21436 != NULL) {
    var_cas_outExpression = GGS_hereExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mLocationType, operand_21436->mLocation COMMA_SOURCE_FILE_AT_LINE (327)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@trueExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__trueExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_trueExpressionAST * operand_21866,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_21866 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_21866->mLocation COMMA_SOURCE_FILE_AT_LINE (338)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@falseExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__falseExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_falseExpressionAST * operand_22293,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22293 != NULL) {
    var_cas_outExpression = GGS_falseExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_22293->mLocation COMMA_SOURCE_FILE_AT_LINE (349)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalCharExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalCharExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalCharExpressionAST * operand_22727,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_22727 != NULL) {
    var_cas_outExpression = GGS_literalCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mCharType, operand_22727->mCharacter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (360)), operand_22727->mCharacter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (360)) COMMA_SOURCE_FILE_AT_LINE (360)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalStringExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalStringExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalStringExpressionAST * operand_23200,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23200 != NULL) {
    GGS_string var_cas_s = GGS_string ("") ;
    {
      GGS_stringlist::cEnumerator enumerator_23421 (operand_23200->mStringSequence, true) ;
      const GGS_stringlist::cElement * operand_23421 = NULL ;
      while (((operand_23421 = enumerator_23421.nextObject ()))) {
        macroValidPointer (operand_23421) ;
        var_cas_s.dotAssign_operation (operand_23421->mValue) ;
      }
    }
    var_cas_outExpression = GGS_literalStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_23200->mLocation, var_cas_s COMMA_SOURCE_FILE_AT_LINE (375)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalDoubleExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalDoubleExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalDoubleExpressionAST * operand_23732,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_23732 != NULL) {
    var_cas_outExpression = GGS_literalDoubleExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mDoubleType, operand_23732->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (386)), operand_23732->mValue.reader_double (inLexique COMMA_SOURCE_FILE_AT_LINE (386)) COMMA_SOURCE_FILE_AT_LINE (386)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalUIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUIntExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalUIntExpressionAST * operand_24201,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24201 != NULL) {
    var_cas_outExpression = GGS_literalUIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mUIntType, operand_24201->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (397)), operand_24201->mValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (397)) COMMA_SOURCE_FILE_AT_LINE (397)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalUInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUInt64ExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalUInt64ExpressionAST * operand_24666,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24666 != NULL) {
    var_cas_outExpression = GGS_literalUInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mUInt64Type, operand_24666->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (408)), operand_24666->mValue.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (408)) COMMA_SOURCE_FILE_AT_LINE (408)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalSIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSIntExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalSIntExpressionAST * operand_25135,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25135 != NULL) {
    var_cas_outExpression = GGS_literalSIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mSIntType, operand_25135->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (419)), operand_25135->mValue.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (419)) COMMA_SOURCE_FILE_AT_LINE (419)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalSInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSInt64ExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalSInt64ExpressionAST * operand_25600,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25600 != NULL) {
    var_cas_outExpression = GGS_literalSInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mSInt64Type, operand_25600->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (430)), operand_25600->mValue.reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (430)) COMMA_SOURCE_FILE_AT_LINE (430)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "analyzeConstructorInvocation"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeConstructorInvocation (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                const GGS_lstring   var_cas_inTypeName,
                                const GGS_lstring   var_cas_inConstructorName,
                                const GGS_semanticExpressionListAST   var_cas_inConstuctorEffectiveParameterExpressions,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_semanticExpressionListForGeneration  & var_cas_outConstructorEffectiveParameterList,
                                GGS_bool & var_cas_outHasCompilerArgument
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeConstructorInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_constructorMap  var_cas_constructorMap ;
  GGS_bool automatic_var_26579_0 ;
  GGS_unifiedTypeMapProxy  automatic_var_26579_1 ;
  GGS_typeKindEnum automatic_var_26579_2 ;
  GGS_typedAttributeList  automatic_var_26579_3 ;
  GGS_attributeMap  automatic_var_26579_4 ;
  GGS_typedAttributeList  automatic_var_26579_5 ;
  GGS_readerMap  automatic_var_26579_6 ;
  GGS_modifierMap  automatic_var_26579_7 ;
  GGS_instanceMethodMap  automatic_var_26579_8 ;
  GGS_classMethodMap  automatic_var_26579_9 ;
  GGS_enumerationDescriptorList  automatic_var_26579_10 ;
  GGS_uint  automatic_var_26579_11 ;
  GGS_unifiedTypeMapProxyList  automatic_var_26579_12 ;
  GGS_nativeAttributeList  automatic_var_26579_13 ;
  GGS_lstringlist  automatic_var_26579_14 ;
  GGS_typedAttributeList  automatic_var_26579_15 ;
  GGS_mapSearchMethodListAST  automatic_var_26579_16 ;
  GGS_mapSearchMethodListAST  automatic_var_26579_17 ;
  if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
    var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, var_cas_inTypeName, automatic_var_26579_0, automatic_var_26579_1, automatic_var_26579_2, automatic_var_26579_3, automatic_var_26579_4, automatic_var_26579_5, var_cas_constructorMap, automatic_var_26579_6, automatic_var_26579_7, automatic_var_26579_8, automatic_var_26579_9, automatic_var_26579_10, automatic_var_26579_11, automatic_var_26579_12, automatic_var_26579_13, automatic_var_26579_14, automatic_var_26579_15, automatic_var_26579_16, automatic_var_26579_17 COMMA_SOURCE_FILE_AT_LINE (448)) ;
  }
  GGS_unifiedTypeMapProxyList  var_cas_constructorFormalArgumentTypeList ;
  elementOf_GGS_constructorMap * operand_26689 = (elementOf_GGS_constructorMap *) var_cas_constructorMap.searchForReadWithInstruction (var_cas_inConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (451))) ;
  if (NULL != operand_26689) {
    var_cas_constructorFormalArgumentTypeList = operand_26689->mInfo.mArgumentTypeList ;
    var_cas_outHasCompilerArgument = operand_26689->mInfo.mHasCompilerArgument ;
    var_cas_outReturnedType = operand_26689->mInfo.mReturnedType ;
  }else{
    const GGS_bool cond_27129 = (var_cas_constructorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_27129.isBuiltAndTrue ()) {
      var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' type does not define any constructor")) COMMA_SOURCE_FILE_AT_LINE (461)) ;
      var_cas_constructorFormalArgumentTypeList.drop () ;
      var_cas_outHasCompilerArgument.drop () ;
      var_cas_outReturnedType.drop () ;
    }else if (cond_27129.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_constructorMap::cEnumerator enumerator_27182 (var_cas_constructorMap, true) ;
        const GGS_constructorMap::cElement * operand_27182 = NULL ;
        while (((operand_27182 = enumerator_27182.nextObject ()))) {
          macroValidPointer (operand_27182) ;
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (operand_27182->mKey) ;
          {
            GGS_unifiedTypeMapProxyList::cEnumerator enumerator_27250 (operand_27182->mInfo.mArgumentTypeList, true) ;
            const GGS_unifiedTypeMapProxyList::cElement * operand_27250 = NULL ;
            while (((operand_27250 = enumerator_27250.nextObject ()))) {
              macroValidPointer (operand_27250) ;
              var_cas_s.appendCString (" \?@") ;
              var_cas_s.dotAssign_operation (operand_27250->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (466))) ;
            }
          }
          var_cas_s.appendCString (" -> @") ;
          var_cas_s.dotAssign_operation (operand_27182->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (468))) ;
        }
      }
      var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (var_cas_inConstructorName)).operator_concat (GGS_string ("' constructor; "))).operator_concat ((((var_cas_constructorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("available constructors are")) : (GGS_string ("available constructor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (476)) ;
      var_cas_constructorFormalArgumentTypeList.drop () ;
      var_cas_outHasCompilerArgument.drop () ;
      var_cas_outReturnedType.drop () ;
    }
  }
  const GGS_bool cond_28239 = (var_cas_inConstuctorEffectiveParameterExpressions.reader_length ()).operator_isNotEqual (var_cas_constructorFormalArgumentTypeList.reader_length ()) ;
  if (cond_28239.isBuiltAndTrue ()) {
    var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (var_cas_inConstructorName)).operator_concat (GGS_string ("' constructor of '@"))).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_constructorFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (482)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_inConstuctorEffectiveParameterExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (483)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (485)) ;
    var_cas_outConstructorEffectiveParameterList.drop () ;
  }else if (cond_28239.isBuiltAndFalse ()) {
    var_cas_outConstructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
    {
      GGS_semanticExpressionListAST::cEnumerator enumerator_28388 (var_cas_inConstuctorEffectiveParameterExpressions, true) ;
      const GGS_semanticExpressionListAST::cElement * operand_28388 = NULL ;
      GGS_unifiedTypeMapProxyList::cEnumerator enumerator_28423 (var_cas_constructorFormalArgumentTypeList, true) ;
      const GGS_unifiedTypeMapProxyList::cElement * operand_28423 = NULL ;
      while (((operand_28388 = enumerator_28388.nextObject ()))
          && ((operand_28423 = enumerator_28423.nextObject ()))) {
        macroValidPointer (operand_28388) ;
        macroValidPointer (operand_28423) ;
        GGS_semanticExpressionForGeneration  var_cas_exp ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_28388->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_28388->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (489)) ;
          }
        }
        ::routine_checkAssignmentTypes (inLexique,  operand_28423->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (490)),  operand_28388->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (490)) ;
        var_cas_outConstructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeConstructorInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@constructorExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__constructorExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_constructorExpressionAST * operand_28897,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28897 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_28897->mTypeName,  operand_28897->mConstructorName,  operand_28897->mExpressions,  var_cas_returnedType,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (507)) ;
    var_cas_outExpression = GGS_constructorExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_28897->mConstructorName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (521)), operand_28897->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (522)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (519)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@readerCallExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readerCallExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_readerCallExpressionAST * operand_29815,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29815 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_29815->mReceiver.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_29815->mReceiver (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression COMMA_SOURCE_FILE_AT_LINE (538)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (539)) ;
    const GGS_readerMap  var_cas_readerMap = var_cas_receiverType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (541)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_string var_cas_implicitConversionReader ;
    elementOf_GGS_readerMap * operand_30530 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_29815->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (547))) ;
    if (NULL != operand_30530) {
      var_cas_readerFormalArgumentTypeList = operand_30530->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_30530->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_30530->mInfo.mReturnedType ;
      var_cas_implicitConversionReader = operand_30530->mInfo.mImplicitConversionReader ;
    }else{
      const GGS_bool cond_31020 = (var_cas_readerMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_31020.isBuiltAndTrue ()) {
        operand_29815->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (555)))).operator_concat (GGS_string ("' type does not define any reader")) COMMA_SOURCE_FILE_AT_LINE (558)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_implicitConversionReader.drop () ;
      }else if (cond_31020.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_readerMap::cEnumerator enumerator_31068 (var_cas_readerMap, true) ;
          const GGS_readerMap::cElement * operand_31068 = NULL ;
          while (((operand_31068 = enumerator_31068.nextObject ()))) {
            macroValidPointer (operand_31068) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_31068->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_31136 (operand_31068->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_31136 = NULL ;
              while (((operand_31136 = enumerator_31136.nextObject ()))) {
                macroValidPointer (operand_31136) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_31136->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (563))) ;
              }
            }
            var_cas_s.appendCString (" -> @") ;
            var_cas_s.dotAssign_operation (operand_31068->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (565))) ;
          }
        }
        operand_29815->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (568)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_29815->mReaderName)).operator_concat (GGS_string ("' reader; available "))).operator_concat ((((var_cas_readerMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("readers are")) : (GGS_string ("reader is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (573)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_implicitConversionReader.drop () ;
      }
    }
    const GGS_bool cond_31996 = (operand_29815->mExpressions.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_31996.isBuiltAndTrue ()) {
      operand_29815->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_29815->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (577)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (578)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_29815->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (579)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (580)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_31996.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_32110 (operand_29815->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_32110 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_32140 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_32140 = NULL ;
        while (((operand_32110 = enumerator_32110.nextObject ()))
            && ((operand_32140 = enumerator_32140.nextObject ()))) {
          macroValidPointer (operand_32110) ;
          macroValidPointer (operand_32140) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_32110->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_32110->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp COMMA_SOURCE_FILE_AT_LINE (584)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_32140->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (585)),  operand_32110->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (585)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_29815->mReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (590)), var_cas_receiverExpression, operand_29815->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (592)), var_cas_constructorEffectiveParameterList, var_cas_implicitConversionReader COMMA_SOURCE_FILE_AT_LINE (588)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@optionExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__optionExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_optionExpressionAST * operand_32851,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_32851 != NULL) {
    GGS_commandLineOptionMap  var_cas_boolOptionMap ;
    GGS_commandLineOptionMap  var_cas_uintOptionMap ;
    GGS_commandLineOptionMap  var_cas_stringOptionMap ;
    if (var_cas_inSemanticContext.mOptionComponentMapForSemanticAnalysis.isBuilt ()) {
      var_cas_inSemanticContext.mOptionComponentMapForSemanticAnalysis (HERE)->method_searchKey (inLexique, operand_32851->mOptionComponentName, var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap COMMA_SOURCE_FILE_AT_LINE (610)) ;
    }
    GGS_bool var_cas_found = var_cas_boolOptionMap.reader_hasKey (operand_32851->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (616))) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType = var_cas_inPredefinedTypes.mBoolType ;
    const GGS_bool cond_33584 = (var_cas_found).operator_not () ;
    if (cond_33584.isBuiltAndTrue ()) {
      var_cas_found = var_cas_uintOptionMap.reader_hasKey (operand_32851->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (619))) ;
      var_cas_returnedType = var_cas_inPredefinedTypes.mUIntType ;
    }
    const GGS_bool cond_33735 = (var_cas_found).operator_not () ;
    if (cond_33735.isBuiltAndTrue ()) {
      var_cas_found = var_cas_stringOptionMap.reader_hasKey (operand_32851->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (623))) ;
      var_cas_returnedType = var_cas_inPredefinedTypes.mStringType ;
    }
    const GGS_bool cond_35026 = var_cas_found ;
    if (cond_35026.isBuiltAndTrue ()) {
      const GGS_bool cond_34027 = (operand_32851->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (627))).operator_isEqual (GGS_string ("value")) ;
      if (cond_34027.isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_optionValueExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_32851->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (630)), operand_32851->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (631)), operand_32851->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (632)) COMMA_SOURCE_FILE_AT_LINE (628)) ;
      }else if (cond_34027.isBuiltAndFalse ()) {
        const GGS_bool cond_34305 = (operand_32851->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (634))).operator_isEqual (GGS_string ("char")) ;
        if (cond_34305.isBuiltAndTrue ()) {
          var_cas_outExpression = GGS_optionCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mCharType, operand_32851->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (637)), operand_32851->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (638)), operand_32851->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (639)) COMMA_SOURCE_FILE_AT_LINE (635)) ;
        }else if (cond_34305.isBuiltAndFalse ()) {
          const GGS_bool cond_34589 = (operand_32851->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (641))).operator_isEqual (GGS_string ("string")) ;
          if (cond_34589.isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_optionStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_32851->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (644)), operand_32851->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (645)), operand_32851->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (646)) COMMA_SOURCE_FILE_AT_LINE (642)) ;
          }else if (cond_34589.isBuiltAndFalse ()) {
            const GGS_bool cond_34874 = (operand_32851->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (648))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_34874.isBuiltAndTrue ()) {
              var_cas_outExpression = GGS_optionCommentExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_32851->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (651)), operand_32851->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (652)), operand_32851->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (653)) COMMA_SOURCE_FILE_AT_LINE (649)) ;
            }else if (cond_34874.isBuiltAndFalse ()) {
              operand_32851->mOptionReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined for an option") COMMA_SOURCE_FILE_AT_LINE (657)) ;
              var_cas_outExpression.drop () ;
            }
          }
        }
      }
    }else if (cond_35026.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_35074 (var_cas_boolOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_35074 = NULL ;
        while (((operand_35074 = enumerator_35074.nextObject ()))) {
          macroValidPointer (operand_35074) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_35074->mKey) ;
          var_cas_s.appendCString ("' @bool option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_35170 (var_cas_uintOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_35170 = NULL ;
        while (((operand_35170 = enumerator_35170.nextObject ()))) {
          macroValidPointer (operand_35170) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_35170->mKey) ;
          var_cas_s.appendCString ("' @uint option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_35268 (var_cas_stringOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_35268 = NULL ;
        while (((operand_35268 = enumerator_35268.nextObject ()))) {
          macroValidPointer (operand_35268) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_35268->mKey) ;
          var_cas_s.appendCString ("' @string option;") ;
        }
      }
      operand_32851->mOptionEntryName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_32851->mOptionComponentName)).operator_concat (GGS_string ("' option component does not define the '"))).operator_concat (operand_32851->mOptionEntryName)).operator_concat (GGS_string ("' option; available options:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (673)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkDiadicOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkDiadicOperator (C_Compiler & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inLeftType,
                                const GGS_unifiedTypeMapProxy   var_cas_inRightType,
                                const GGS_bool  var_cas_inOperandIsHandled,
                                const GGS_string  var_cas_inOperatorNameForErrorMessage,
                                const GGS_location   var_cas_inErrorLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkDiadicOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_36090 = (var_cas_inOperandIsHandled).operator_not () ;
  if (cond_36090.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("left operand type is '@")).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (687)))).operator_concat (GGS_string ("' and does not accept '"))).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator (right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (687)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (689)) ;
  }else if (cond_36090.isBuiltAndFalse ()) {
    const GGS_bool cond_36345 = (var_cas_inLeftType).operator_isNotEqual (var_cas_inRightType) ;
    if (cond_36345.isBuiltAndTrue ()) {
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("left operand type of '")).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator is '@"))).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (691)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (691)))).operator_concat (GGS_string ("'; they should be the same")) COMMA_SOURCE_FILE_AT_LINE (693)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkDiadicOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@concatExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__concatExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_concatExpressionAST * operand_36507,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_36507 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36507->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_36507->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (706)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36507->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_36507->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (709)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (711)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (714)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (715))).operator_and (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (715)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("."),  operand_36507->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (712)) ;
    var_cas_outExpression = GGS_concatExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_36507->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (720)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@orExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__orExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_orExpressionAST * operand_37661,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37661 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_37661->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37661->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (738)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_37661->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_37661->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (741)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (743)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (746)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (747))).operator_and (function_binaryOrOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (747)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("|"),  operand_37661->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (744)) ;
    var_cas_outExpression = GGS_orExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_37661->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (752)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@andExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_andExpressionAST * operand_38808,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_38808 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_38808->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38808->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (770)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_38808->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_38808->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (773)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (775)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (778)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (779))).operator_and (function_binaryAndOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (779)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("&"),  operand_38808->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (776)) ;
    var_cas_outExpression = GGS_andExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_38808->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (784)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@xorExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__xorExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_xorExpressionAST * operand_39957,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_39957 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_39957->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39957->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (802)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_39957->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_39957->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (805)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (807)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (810)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (811))).operator_and (function_binaryXorOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (811)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("^"),  operand_39957->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (808)) ;
    var_cas_outExpression = GGS_xorExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_39957->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (816)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@equalExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__equalExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_equalExpressionAST * operand_41108,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41108 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41108->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41108->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (834)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41108->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41108->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (837)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (839)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (840)) ;
    const GGS_bool cond_42118 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (841)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (841))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (841)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (841))) ;
    if (cond_42118.isBuiltAndTrue ()) {
      operand_41108->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (843)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (843)))).operator_concat (GGS_string ("': '==' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (846)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_42118.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_equalExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_41108->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (848)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@notEqualExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_notEqualExpressionAST * operand_42484,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42484 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42484->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42484->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (867)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42484->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42484->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (870)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (872)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (873)) ;
    const GGS_bool cond_43492 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (874)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (874)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (874))) ;
    if (cond_43492.isBuiltAndTrue ()) {
      operand_42484->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (876)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (876)))).operator_concat (GGS_string ("': '!=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (879)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_43492.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_42484->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (881)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lowerOrEqualExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_lowerOrEqualExpressionAST * operand_43865,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43865 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43865->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43865->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (900)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43865->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43865->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (903)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (905)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (906)) ;
    const GGS_bool cond_44820 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (907))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (907)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_44820.isBuiltAndTrue ()) {
      operand_43865->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (909)))).operator_concat (GGS_string ("' and does not support the '<=' operator")) COMMA_SOURCE_FILE_AT_LINE (912)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_44820.isBuiltAndFalse ()) {
      const GGS_bool cond_45071 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (912))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (912))) ;
      if (cond_45071.isBuiltAndTrue ()) {
        operand_43865->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (914)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (914)))).operator_concat (GGS_string ("': '<=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (917)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_45071.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_lowerOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_43865->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (919)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@greaterOrEqualExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_greaterOrEqualExpressionAST * operand_45450,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_45450 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_45450->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45450->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (938)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_45450->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_45450->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (941)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (943)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (944)) ;
    const GGS_bool cond_46405 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (945))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (945)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_46405.isBuiltAndTrue ()) {
      operand_45450->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (947)))).operator_concat (GGS_string ("' and does not support the '>=' operator")) COMMA_SOURCE_FILE_AT_LINE (950)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_46405.isBuiltAndFalse ()) {
      const GGS_bool cond_46656 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (950))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (950))) ;
      if (cond_46656.isBuiltAndTrue ()) {
        operand_45450->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (952)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (952)))).operator_concat (GGS_string ("': '>=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (955)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_46656.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_greaterOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_45450->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (957)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@strictGreaterExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictGreaterExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_strictGreaterExpressionAST * operand_47036,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47036 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47036->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47036->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (976)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47036->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47036->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (979)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (981)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (982)) ;
    const GGS_bool cond_47990 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (983))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (983)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_47990.isBuiltAndTrue ()) {
      operand_47036->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (985)))).operator_concat (GGS_string ("' and does not support the '>' operator")) COMMA_SOURCE_FILE_AT_LINE (988)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_47990.isBuiltAndFalse ()) {
      const GGS_bool cond_48240 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (988))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (988))) ;
      if (cond_48240.isBuiltAndTrue ()) {
        operand_47036->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (990)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (990)))).operator_concat (GGS_string ("': '>' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (993)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_48240.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictGreaterExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_47036->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (995)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@strictLowerExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictLowerExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_strictLowerExpressionAST * operand_48617,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_48617 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48617->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48617->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1014)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_48617->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_48617->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1017)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1019)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1020)) ;
    const GGS_bool cond_49571 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1021))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1021)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_49571.isBuiltAndTrue ()) {
      operand_48617->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1023)))).operator_concat (GGS_string ("' and does not support the '<' operator")) COMMA_SOURCE_FILE_AT_LINE (1026)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_49571.isBuiltAndFalse ()) {
      const GGS_bool cond_49821 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1026))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1026))) ;
      if (cond_49821.isBuiltAndTrue ()) {
        operand_48617->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1028)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1028)))).operator_concat (GGS_string ("': '<' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1031)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_49821.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictLowerExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_48617->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1033)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@rightShiftExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__rightShiftExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_rightShiftExpressionAST * operand_50195,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50195 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_50195->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_50195->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1052)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_50195->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_50195->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1055)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1057)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1058)) ;
    const GGS_bool cond_51156 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1059))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1059)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_51156.isBuiltAndTrue ()) {
      operand_50195->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1061)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1064)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_51156.isBuiltAndFalse ()) {
      const GGS_bool cond_51348 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1064))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_51348.isBuiltAndTrue ()) {
        operand_50195->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1066)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1069)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_51348.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_50195->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1071)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@leftShiftExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__leftShiftExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_leftShiftExpressionAST * operand_51700,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_51700 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_51700->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_51700->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1090)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_51700->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_51700->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1093)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1095)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1096)) ;
    const GGS_bool cond_52661 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1097))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1097)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_52661.isBuiltAndTrue ()) {
      operand_51700->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1102)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_52661.isBuiltAndFalse ()) {
      const GGS_bool cond_52853 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1102))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_52853.isBuiltAndTrue ()) {
        operand_51700->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1104)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1107)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_52853.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_51700->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1109)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@addExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_addExpressionAST * operand_53199,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_53199 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_53199->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53199->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1128)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_53199->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_53199->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1131)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1136)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1137))).operator_and (function_binaryAddOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1137)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("+"),  operand_53199->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1134)) ;
    var_cas_outExpression = GGS_addExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_53199->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1142)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@subExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__subExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_subExpressionAST * operand_54348,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54348 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54348->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54348->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1160)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54348->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54348->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1165)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1168)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1169))).operator_and (function_binarySubOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("-"),  operand_54348->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1166)) ;
    var_cas_outExpression = GGS_subExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_54348->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1174)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@multiplicationExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__multiplicationExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_multiplicationExpressionAST * operand_55508,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55508 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_55508->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_55508->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1192)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_55508->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_55508->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1195)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1197)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1200)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1201))).operator_and (function_binaryMulOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1201)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("*"),  operand_55508->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1198)) ;
    var_cas_outExpression = GGS_multiplicationExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_55508->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1206)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@divisionExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__divisionExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_divisionExpressionAST * operand_56673,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_56673 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_56673->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_56673->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1224)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_56673->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_56673->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1227)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1229)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1232)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1233))).operator_and (function_binaryDivOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1233)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("/"),  operand_56673->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1230)) ;
    var_cas_outExpression = GGS_divisionExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_56673->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1238)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@moduloExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__moduloExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_moduloExpressionAST * operand_57830,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57830 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57830->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57830->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression COMMA_SOURCE_FILE_AT_LINE (1256)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57830->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57830->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1259)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1261)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1264)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1265))).operator_and (function_binaryModOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1265)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("mod"),  operand_57830->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1262)) ;
    var_cas_outExpression = GGS_moduloExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_57830->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1270)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@unaryMinusExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__unaryMinusExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_unaryMinusExpressionAST * operand_58991,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58991 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_58991->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_58991->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1288)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1290)) ;
    const GGS_bool cond_59648 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1291))).operator_and (function_unaryMinusOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1291)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_59648.isBuiltAndTrue ()) {
      operand_58991->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1293)))).operator_concat (GGS_string ("' and does not support the unary minus operator")) COMMA_SOURCE_FILE_AT_LINE (1296)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_59648.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_unaryMinusExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_58991->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1298)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@notExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_notExpressionAST * operand_59963,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_59963 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_59963->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_59963->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1316)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1318)) ;
    const GGS_bool cond_60612 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1319))).operator_and (function_unaryNotOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1319)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_60612.isBuiltAndTrue ()) {
      operand_59963->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1321)))).operator_concat (GGS_string ("' and does not support the 'not' operator")) COMMA_SOURCE_FILE_AT_LINE (1324)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_60612.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_59963->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1326)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@complementExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__complementExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_complementExpressionAST * operand_60927,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60927 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_60927->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_60927->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1344)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1346)) ;
    const GGS_bool cond_61576 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1347))).operator_and (function_unaryTildeOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)))).operator_isNotEqual (GGS_uint (0U)) ;
    if (cond_61576.isBuiltAndTrue ()) {
      operand_60927->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1349)))).operator_concat (GGS_string ("' and does not support the '~' operator")) COMMA_SOURCE_FILE_AT_LINE (1352)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_61576.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_complementExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_60927->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1354)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ifExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_ifExpressionAST * operand_61890,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_61890 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_61890->mIfExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_61890->mIfExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_if_expression COMMA_SOURCE_FILE_AT_LINE (1372)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_then_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_61890->mThenExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_61890->mThenExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_then_expression COMMA_SOURCE_FILE_AT_LINE (1375)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_else_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_61890->mElseExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_61890->mElseExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (1378)) ;
      }
    }
    const GGS_bool cond_62898 = (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1380)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1380))).operator_isNotEqual (GGS_string ("bool")) ;
    if (cond_62898.isBuiltAndTrue ()) {
      operand_61890->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the test expression type is '@")).operator_concat (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1382)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1382)))).operator_concat (GGS_string ("', it should be '@bool'")) COMMA_SOURCE_FILE_AT_LINE (1385)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_62898.isBuiltAndFalse ()) {
      const GGS_bool cond_63160 = (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1385))).operator_isNotEqual (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1385))) ;
      if (cond_63160.isBuiltAndTrue ()) {
        operand_61890->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand expression types are '@")).operator_concat (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)))).operator_concat (GGS_string ("' and '@"))).operator_concat (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1387)))).operator_concat (GGS_string ("': they should be the same")) COMMA_SOURCE_FILE_AT_LINE (1390)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_63160.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_ifExpressionForGeneration ::constructor_new (inLexique, var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1393)), operand_61890->mOperatorLocation, var_cas_if_expression, var_cas_then_expression, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (1392)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@functionCallExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionCallExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_functionCallExpressionAST * operand_63544,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_63544 != NULL) {
    GGS_unifiedTypeMapProxyList  var_cas_functionSignature ;
    GGS_unifiedTypeMapProxy  var_cas_resultType ;
    if (var_cas_inSemanticContext.mFunctionMap.isBuilt ()) {
      var_cas_inSemanticContext.mFunctionMap (HERE)->method_searchKey (inLexique, operand_63544->mFunctionName, var_cas_functionSignature, var_cas_resultType COMMA_SOURCE_FILE_AT_LINE (1413)) ;
    }
    const GGS_bool cond_64294 = (var_cas_functionSignature.reader_length ()).operator_isNotEqual (operand_63544->mExpressions.reader_length ()) ;
    if (cond_64294.isBuiltAndTrue ()) {
      operand_63544->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_63544->mFunctionName)).operator_concat (GGS_string ("' function header declares "))).operator_concat (var_cas_functionSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1417)))).operator_concat (GGS_string (" formal parameter(s), but this function call names "))).operator_concat (operand_63544->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1418)))).operator_concat (GGS_string (" effective argument(s)")) COMMA_SOURCE_FILE_AT_LINE (1422)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_64294.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_semanticExpressionListForGeneration = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_64415 (var_cas_functionSignature, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_64415 = NULL ;
        GGS_semanticExpressionListAST::cEnumerator enumerator_64429 (operand_63544->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_64429 = NULL ;
        while (((operand_64415 = enumerator_64415.nextObject ()))
            && ((operand_64429 = enumerator_64429.nextObject ()))) {
          macroValidPointer (operand_64415) ;
          macroValidPointer (operand_64429) ;
          GGS_semanticExpressionForGeneration  var_cas_expression ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_64429->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_64429->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1426)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_64415->mType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1427)),  operand_64429->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (1427)) ;
          var_cas_semanticExpressionListForGeneration.addAssign_operation (var_cas_expression) ;
        }
      }
      var_cas_outExpression = GGS_functionCallExpressionForGeneration ::constructor_new (inLexique, var_cas_resultType, operand_63544->mFunctionName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1432)), operand_63544->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)), var_cas_semanticExpressionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1430)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@varInExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__varInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_varInExpressionAST * operand_65117,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65117 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_type ;
    GGS_string var_cas_sourceVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, operand_65117->mVarName, var_cas_type, var_cas_sourceVariableCppName COMMA_SOURCE_FILE_AT_LINE (1449)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_65464 (operand_65117->mStructFieldList, true) ;
      const GGS_lstringlist::cElement * operand_65464 = NULL ;
      while (((operand_65464 = enumerator_65464.nextObject ()))) {
        macroValidPointer (operand_65464) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_type.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1451)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_65464->mValue, var_cas_type COMMA_SOURCE_FILE_AT_LINE (1452)) ;
        }
      }
    }
    var_cas_outExpression = GGS_varInExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_65117->mVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1456)), var_cas_sourceVariableCppName, operand_65117->mStructFieldList COMMA_SOURCE_FILE_AT_LINE (1454)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalTypeInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalTypeInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalTypeInExpressionAST * operand_65898,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65898 != NULL) {
    operand_65898->mLiteralTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled expression") COMMA_SOURCE_FILE_AT_LINE (1474)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_castInExpressionAST * operand_66310,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_66310 != NULL) {
    operand_66310->mEndOfReceiverExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled expression") COMMA_SOURCE_FILE_AT_LINE (1488)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperObjectInstanciationInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperObjectInstanciationInExpressionAST * operand_66756,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_66756 != NULL) {
    operand_66756->mFilewrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled expression") COMMA_SOURCE_FILE_AT_LINE (1502)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@filewrapperInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperInExpressionAST * operand_67176,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_67176 != NULL) {
    operand_67176->mFilewrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled expression") COMMA_SOURCE_FILE_AT_LINE (1516)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperTemplateInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperTemplateInExpressionAST * operand_67603,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_67603 != NULL) {
    operand_67603->mFilewrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled expression") COMMA_SOURCE_FILE_AT_LINE (1530)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticExpressionAnalysis (void) {
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__selfInExpressionAST__analyzeSemanticExpression, gClassInfoFor__selfInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__hereExpressionAST__analyzeSemanticExpression, gClassInfoFor__hereExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__trueExpressionAST__analyzeSemanticExpression, gClassInfoFor__trueExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__falseExpressionAST__analyzeSemanticExpression, gClassInfoFor__falseExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalCharExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalCharExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalStringExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalStringExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalDoubleExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalDoubleExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__constructorExpressionAST__analyzeSemanticExpression, gClassInfoFor__constructorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__readerCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__readerCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__optionExpressionAST__analyzeSemanticExpression, gClassInfoFor__optionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__concatExpressionAST__analyzeSemanticExpression, gClassInfoFor__concatExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__orExpressionAST__analyzeSemanticExpression, gClassInfoFor__orExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__andExpressionAST__analyzeSemanticExpression, gClassInfoFor__andExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__xorExpressionAST__analyzeSemanticExpression, gClassInfoFor__xorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__equalExpressionAST__analyzeSemanticExpression, gClassInfoFor__equalExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__notEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__lowerOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__greaterOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictGreaterExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictGreaterExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictLowerExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictLowerExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__rightShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__rightShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__leftShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__leftShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__addExpressionAST__analyzeSemanticExpression, gClassInfoFor__addExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__subExpressionAST__analyzeSemanticExpression, gClassInfoFor__subExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__multiplicationExpressionAST__analyzeSemanticExpression, gClassInfoFor__multiplicationExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__divisionExpressionAST__analyzeSemanticExpression, gClassInfoFor__divisionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__moduloExpressionAST__analyzeSemanticExpression, gClassInfoFor__moduloExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__unaryMinusExpressionAST__analyzeSemanticExpression, gClassInfoFor__unaryMinusExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notExpressionAST__analyzeSemanticExpression, gClassInfoFor__notExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__complementExpressionAST__analyzeSemanticExpression, gClassInfoFor__complementExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__ifExpressionAST__analyzeSemanticExpression, gClassInfoFor__ifExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__functionCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__functionCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__varInExpressionAST__analyzeSemanticExpression, gClassInfoFor__varInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalTypeInExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalTypeInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__castInExpressionAST__analyzeSemanticExpression, gClassInfoFor__castInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperObjectInstanciationInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperTemplateInExpressionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticExpressionAnalysis (void) {
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticExpressionAnalysis (prologueRoutineFor_semanticExpressionAnalysis, epilogueRoutineFor_semanticExpressionAnalysis) ;

//---------------------------------------------------------------------------*

