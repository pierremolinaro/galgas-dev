//---------------------------------------------------------------------------*
//                                                                           *
//                  File 'semanticExpressionAnalysis.cpp'                    *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                        may 16th, 2010, at 20h2'0"                         *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "semanticExpressionAnalysis.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "semanticExpressionAnalysis.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     AUTOMATON FOR '@variableMap' MAP                      *
//                                                                           *
//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_0_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_1 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_1_1 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_2 [29] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_1_3 [26] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_2 [34] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_2_0 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_2 [43] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_2_3 [32] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_3 [40] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_3_1 [44] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('g'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_3_3 [53] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_0 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_2 [40] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_5_3 [38] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('o'),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_6 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_6_0 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_6_3 [41] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_8 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kStateMessageForMap_variableMap_10 [82] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('u'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_10_0 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_2 [54] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_10_3 [52] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_0 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_1 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_2 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_11_3 [62] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('h'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_12 [83] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_12_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_12_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_13_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_0 [58] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_1 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_2 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_14_3 [52] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('s'),
  TO_UNICODE ('t'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kStateMessageForMap_variableMap_15 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

static const utf32 kIssueMessageForMap_variableMap_17_0 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_2 [48] = {
  TO_UNICODE ('a'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_17_3 [46] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('d'),
  TO_UNICODE ('y'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_0 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_1 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_2 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_18_3 [49] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('r'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_1 [31] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_2 [32] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('m'),
  TO_UNICODE ('o'),
  TO_UNICODE ('d'),
  TO_UNICODE ('i'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueMessageForMap_variableMap_19_3 [31] = {
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('c'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonTransition kAutomaton_variableMap [20] [4] = {
  { // State 'usedLocalConstant'
    {0, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_0_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'localConstant'
    {0, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_1}, // 'writeAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_2}, // 'readWriteAccess' -> 'usedLocalConstant'
    {0, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_1_3}, // 'dropAccess' -> 'usedLocalConstant'
  },
  { // State 'undefinedLocalVariable'
    {2, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_2_0}, // 'readAccess' -> 'undefinedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {2, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_2_2}, // 'readWriteAccess' -> 'undefinedLocalVariable'
    {2, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_2_3}, // 'dropAccess' -> 'undefinedLocalVariable'
  },
  { // State 'definedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_3_1}, // 'writeAccess' -> 'definedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedLocalVariable'
    {5, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_3_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'usedLocalVariable'
    {4, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'droppedLocalVariable'
    {5, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_5_0}, // 'readAccess' -> 'droppedLocalVariable'
    {3, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedLocalVariable'
    {3, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_5_2}, // 'readWriteAccess' -> 'definedLocalVariable'
    {5, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_5_3}, // 'dropAccess' -> 'droppedLocalVariable'
  },
  { // State 'undefinedOutputFormalArgument'
    {6, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_6_0}, // 'readAccess' -> 'undefinedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedOutputFormalArgument'
    {6, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_6_2}, // 'readWriteAccess' -> 'undefinedOutputFormalArgument'
    {6, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_6_3}, // 'dropAccess' -> 'undefinedOutputFormalArgument'
  },
  { // State 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'definedOutputFormalArgument'
    {7, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'definedOutputFormalArgument'
    {6, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'undefinedOutputFormalArgument'
  },
  { // State 'unusedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'droppedInputOutputFormalArgument'
    {10, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_10_0}, // 'readAccess' -> 'droppedInputOutputFormalArgument'
    {9, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_10_2}, // 'readWriteAccess' -> 'droppedInputOutputFormalArgument'
    {10, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_10_3}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'inputOutputFormalArgumentDeclaredAsUnused'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_0}, // 'readAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_1}, // 'writeAccess' -> 'usedInputOutputFormalArgument'
    {9, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_2}, // 'readWriteAccess' -> 'usedInputOutputFormalArgument'
    {10, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_11_3}, // 'dropAccess' -> 'droppedInputOutputFormalArgument'
  },
  { // State 'constantInputFormalArgument'
    {13, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_12_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'usedConstantInputFormalArgument'
    {13, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_13_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'constantInputFormalArgumentDeclaredAsUnused'
    {13, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_14_0}, // 'readAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_1}, // 'writeAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_2}, // 'readWriteAccess' -> 'usedConstantInputFormalArgument'
    {13, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_14_3}, // 'dropAccess' -> 'usedConstantInputFormalArgument'
  },
  { // State 'inputFormalParameter'
    {16, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonNoIssue, NULL}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'droppedInputFormalArgument'
    {17, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_17_0}, // 'readAccess' -> 'droppedInputFormalArgument'
    {16, kMapAutomatonNoIssue, NULL}, // 'writeAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_17_2}, // 'readWriteAccess' -> 'droppedInputFormalArgument'
    {17, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_17_3}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'inputFormalArgumentDeclaredAsUnused'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_0}, // 'readAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_1}, // 'writeAccess' -> 'usedInputFormalArgument'
    {16, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_2}, // 'readWriteAccess' -> 'usedInputFormalArgument'
    {17, kMapAutomatonIssueWarning, kIssueMessageForMap_variableMap_18_3}, // 'dropAccess' -> 'droppedInputFormalArgument'
  },
  { // State 'currentInstanceAttribute'
    {19, kMapAutomatonNoIssue, NULL}, // 'readAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_19_1}, // 'writeAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_19_2}, // 'readWriteAccess' -> 'currentInstanceAttribute'
    {19, kMapAutomatonIssueError, kIssueMessageForMap_variableMap_19_3}, // 'dropAccess' -> 'currentInstanceAttribute'
  },
} ;

//---------------------------------------------------------------------------*

static const cMapAutomatonFinalIssue kFinalIssue_variableMap [20] = {
  {kMapAutomatonNoIssue, NULL}, // State 'usedLocalConstant'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_1}, // State 'localConstant'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_2}, // State 'undefinedLocalVariable'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_3}, // State 'definedLocalVariable'
  {kMapAutomatonNoIssue, NULL}, // State 'usedLocalVariable'
  {kMapAutomatonNoIssue, NULL}, // State 'droppedLocalVariable'
  {kMapAutomatonIssueError, kStateMessageForMap_variableMap_6}, // State 'undefinedOutputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'definedOutputFormalArgument'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_8}, // State 'unusedInputOutputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'usedInputOutputFormalArgument'
  {kMapAutomatonIssueError, kStateMessageForMap_variableMap_10}, // State 'droppedInputOutputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'inputOutputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_12}, // State 'constantInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'usedConstantInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'constantInputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonIssueWarning, kStateMessageForMap_variableMap_15}, // State 'inputFormalParameter'
  {kMapAutomatonNoIssue, NULL}, // State 'usedInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'droppedInputFormalArgument'
  {kMapAutomatonNoIssue, NULL}, // State 'inputFormalArgumentDeclaredAsUnused'
  {kMapAutomatonNoIssue, NULL}, // State 'currentInstanceAttribute'
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                          class 'e_variableMap'                            *
//                                                                           *
//---------------------------------------------------------------------------*

e_variableMap::e_variableMap (void) :
mTypeProxy (),
mCppName () {
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         class map '@variableMap'                          *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_variableMap ("variableMap", false, NULL) ;

//---------------------------------------------------------------------------*

elementOf_GGS_variableMap::
elementOf_GGS_variableMap (const GGS_lstring & inKey,
              const PMSInt32 inIndex,
              const e_variableMap & inInfo,
              const PMUInt32 inInitialState) :
AC_galgas_map_element (inKey, inIndex, inInitialState),
mInfo (inInfo) {
}

//---------------------------------------------------------------------------*

void elementOf_GGS_variableMap::
appendForMapDescription (const PMSInt32 inElementIndex,
                         C_String & ioString,
                         const PMSInt32 inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-key " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mKey.reader_description (inIndentation + 1) ;
  ioString << (mIsDefined ? "" : "(not solved)") ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mTypeProxy.reader_description (inIndentation + 1) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-value " ;
  ioString.appendSigned (inElementIndex) ;
  ioString << ":" << mInfo.mCppName.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_variableMap::
isEqualToMapElement (const AC_galgas_map_element * inOperand) const {
  const elementOf_GGS_variableMap * ptr = dynamic_cast <const elementOf_GGS_variableMap *> (inOperand) ;
  macroValidPointer (ptr) ;
  return (mInfo.mTypeProxy.operator_isEqual (ptr->mInfo.mTypeProxy)).boolValue ()
           && (mInfo.mCppName.operator_isEqual (ptr->mInfo.mCppName)).boolValue () ;
}

//---------------------------------------------------------------------------*

AC_galgas_map_element * GGS_variableMap::
new_element (const GGS_lstring & inKey, void * inInfo, const PMUInt32 inInitialState) {
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  AC_galgas_map_element * p = NULL ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  macroMyNew (p, cElement (inKey, nextIndex (), * info, inInitialState)) ;
  return p ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
assignInfo (AC_galgas_map_element * inPtr, void * inInfo) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  MF_Assert (reinterpret_cast <e_variableMap *> (inInfo) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  e_variableMap * info = (e_variableMap *) inInfo ;
  p->mInfo = * info ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_emptyMap (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ;
  macroMyNew (result.mSharedMapRoot, cMapRoot) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
enterIndex (const GGS_string & inKey,
            AC_galgas_index_core & outIndex) {
  e_variableMap info  ;
  internalEnterIndex (inKey,
                      (void *) & info,
                      outIndex) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_variableMap::
operator_isNotEqual (const GGS_variableMap & inOperand) const {
  return GGS_bool (isBuilt () && inOperand.isBuilt (), ! isEqualToMap (inOperand)) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
internalInsertForDuplication (AC_galgas_map_element * inPtr) {
  MF_Assert (reinterpret_cast <cElement *> (inPtr) != NULL, "Dynamic cast error", 0, 0) ;
  cElement * p = (cElement *) inPtr ;
  PMSInt32 attributeIndex = -1 ; // Unused here
  GGS_location existingKeyLocation ; // Unused here
  internalInsert (p->mKey, (void *) & p->mInfo, attributeIndex, existingKeyLocation, p->mIsDefined, p->mCurrentState) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
removeElement (C_Compiler & inLexique,
                const utf32 * inErrorMessage,
                const GGS_lstring & inKey,
                GGS_unifiedTypeMapProxy & outParameter0,
                GGS_string& outParameter1,
                GGS_luint * outIndex
                COMMA_LOCATION_ARGS) {
  AC_galgas_map_element * removedElement = NULL ;
  PMSInt32 elementID = - 1 ;
  if (isBuilt () && inKey.isBuilt ()) {
    removedElement = internalRemove (inKey) ;
    if (removedElement == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
      outParameter0.drop () ;
      outParameter1.drop () ;
    }else{
      cElement * ptr = (cElement *) removedElement ;
      elementID = ptr->mID ;
      outParameter0 = ptr->mInfo.mTypeProxy ;
      outParameter1 = ptr->mInfo.mCppName ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
  macroMyDelete (removedElement) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
insertElement (C_Compiler & inLexique,
               const PMUInt32 inInitialState,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               const GGS_unifiedTypeMapProxy & inParameter0,
               const GGS_string& inParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  PMSInt32 elementID = - 1 ;
  if (isBuilt ()
   && inParameter0.isBuilt ()
   && inParameter1.isBuilt ()
   && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    e_variableMap info  ;
    info.mTypeProxy = inParameter0 ;
    info.mCppName = inParameter1 ;
    GGS_location existingKeyLocation ;
    internalInsert (inKey, (void *) & info, elementID, existingKeyLocation, true, inInitialState) ;
    if (elementID < 0) {
      emitInsertMapSemanticErrorMessage (inLexique, inKey, inErrorMessage, existingKeyLocation COMMA_THERE) ;
    }
  }
  if (outIndex != NULL) {
    * outIndex = GGS_luint (GGS_uint (elementID >= 0, (PMUInt32) elementID), inKey) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
searchElement (C_Compiler & inLexique,
               const PMUInt32 inActionIndex,
               const utf32 * inErrorMessage,
               const GGS_lstring & inKey,
               GGS_unifiedTypeMapProxy   & outParameter0,
               GGS_string  & outParameter1,
               GGS_luint * outIndex
               COMMA_LOCATION_ARGS) {
  cElement * node = NULL  ;
  if (isBuilt () && inKey.isBuilt ()) {
    insulateMap (THERE) ;
    AC_galgas_map_element * p = internal_search (inKey.string ()) ;
    MF_Assert ((p == NULL) || (reinterpret_cast <cElement *> (p) != NULL), "Dynamic cast error", 0, 0) ;
    node = (cElement *) p ;
    if (node == NULL) {
      inLexique.semanticErrorUsingPerCentK (inKey.string (), inKey, inErrorMessage COMMA_THERE) ;
    }
  }
  if (node == NULL) {
    outParameter0.drop () ;
    outParameter1.drop () ;
    if (outIndex != NULL) {
      outIndex->drop () ;
    }
  }else{
    node->performTransition (inLexique, inKey, kAutomaton_variableMap [node->mCurrentState][inActionIndex] COMMA_THERE) ;
    outParameter0 = node->mInfo.mTypeProxy ;
    outParameter1 = node->mInfo.mCppName ;
    if (outIndex != NULL) {
      * outIndex = GGS_luint (GGS_uint (true, (PMUInt32) node->mID), inKey) ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::method_checkAutomatonStates (C_Compiler & inLexique,
                                             const GGS_location & inErrorLocation
                                             COMMA_LOCATION_ARGS) const {
  checkAutomatonStates (inLexique, inErrorLocation, kFinalIssue_variableMap COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForReadWriteAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kSearchMessage_searchForDropAccess [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 0,
                 kSearchMessage_searchForReadAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 1,
                 kSearchMessage_searchForWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForReadWriteAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 2,
                 kSearchMessage_searchForReadWriteAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_searchForDropAccess (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy   & outParameter0,
                                GGS_string  & outParameter1 COMMA_LOCATION_ARGS) {
  searchElement (inLexique,
                 3,
                 kSearchMessage_searchForDropAccess,
                 inKey,
                 outParameter0,
                 outParameter1,
                 NULL
                 COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kRemoveMessage_removeKey [] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_removeKey (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                GGS_unifiedTypeMapProxy & outParameter0,
                                GGS_string& outParameter1 COMMA_LOCATION_ARGS) {
  removeElement (inLexique,
                  kRemoveMessage_removeKey,
                  inKey,
                  outParameter0,
                  outParameter1,
                  NULL
                  COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertNonMutableAttribute [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('t'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('b'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertUndefinedLocalVariable [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertDefinedLocalVariable [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertUsedLocalConstant [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgument [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

const utf32 GGS_variableMap::kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused [] = {
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('f'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('('),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('c'),
  TO_UNICODE ('l'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('a'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE (' '),
  TO_UNICODE ('%'),
  TO_UNICODE ('L'),
  TO_UNICODE (')'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertNonMutableAttribute (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 19,
                 kInsertMessage_insertNonMutableAttribute,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertUndefinedLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 2,
                 kInsertMessage_insertUndefinedLocalVariable,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertDefinedLocalVariable (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 3,
                 kInsertMessage_insertDefinedLocalVariable,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertLocalConstant (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 1,
                 kInsertMessage_insertLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertUsedLocalConstant (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 0,
                 kInsertMessage_insertUsedLocalConstant,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 15,
                 kInsertMessage_insertInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 18,
                 kInsertMessage_insertInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 12,
                 kInsertMessage_insertConstantInputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertConstantInputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 14,
                 kInsertMessage_insertConstantInputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertOutputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 6,
                 kInsertMessage_insertOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgument (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 8,
                 kInsertMessage_insertInputOutputFormalArgument,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_variableMap::
modifier_insertInputOutputFormalArgumentDeclaredAsUnused (C_Compiler & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_unifiedTypeMapProxy & inParameter0,
                                const GGS_string& inParameter1 COMMA_LOCATION_ARGS) {
  insertElement (inLexique,
                 11,
                 kInsertMessage_insertInputOutputFormalArgumentDeclaredAsUnused,
                 inKey,
                 inParameter0,
                 inParameter1,
                NULL
                COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
constructor_mapWithMapToOverride (C_Compiler & /* inLexique */,
                                  const GGS_variableMap & inMapToOverride
                                  COMMA_UNUSED_LOCATION_ARGS) {
  GGS_variableMap result ; // Not Built
  if (inMapToOverride.mSharedMapRoot != NULL) {
    macroValidPointer (inMapToOverride.mSharedMapRoot) ;
    macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    result.mSharedMapRoot->mNextMap = inMapToOverride.mSharedMapRoot ;
    inMapToOverride.mSharedMapRoot->mReferenceCount ++ ;
    result.mSharedMapRoot->mSequenceNumber = inMapToOverride.mSharedMapRoot->mSequenceNumber ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::
reader_overriddenMap (C_Compiler & /* inLexique */
                      COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_variableMap result ; // Not Built
  if (mSharedMapRoot != NULL) {
    macroValidPointer (mSharedMapRoot) ;
    result.mSharedMapRoot = mSharedMapRoot->mNextMap ;
    if (result.mSharedMapRoot != NULL) {
      macroValidPointer (result.mSharedMapRoot) ;
      result.mSharedMapRoot->mReferenceCount ++ ;
    }else{
      macroMyNew (result.mSharedMapRoot, cMapRoot) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_variableMap::
reader_description (const PMSInt32 inIndentation) const {
  C_String s ;
  s << "<map @variableMap " ;
  if (isBuilt ()) {
    s.appendSigned (count ()) ;
    s << " object" << ((count () > 1) ? "s " : " ") ;
    cMapRoot * mapRoot = mSharedMapRoot ;
    PMSInt32 level = 0 ;
    while (mapRoot != NULL) {
      if (level > 0) {
        s << "\n" ;
        s.writeStringMultiple ("| ", inIndentation) ;
        s << "------- level " << cStringWithSigned (level) ;
      }
      macroValidPointer (mapRoot) ;
      cElement * p = (cElement *) mapRoot->mFirstItem ;
      PMSInt32 elementID = 0 ;
      while (p != NULL) {
        macroValidPointer (p) ;
        p->appendForMapDescription (elementID, s, inIndentation) ;
        p = p->nextObject () ;
        elementID ++ ;
      }
      mapRoot = mapRoot->mNextMap ;
      level ++ ;
    }
  }else{
    s << "not built" ;
  }
  s << "\n" ;
  s.writeStringMultiple ("| ", inIndentation) ;
  s << ">" ;
  return GGS_string (true, s) ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_unifiedTypeMapProxy  & GGS_variableMap::cEnumerator::_mTypeProxy (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mTypeProxy ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_string & GGS_variableMap::cEnumerator::_mCppName (LOCATION_ARGS) const {
  return ((cElement *) mObjectArray (mCurrentIndex COMMA_THERE))->mInfo.mCppName ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_variableMap::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_variableMap * p = NULL ;
    macroMyNew (p, GGS_variableMap (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_variableMap GGS_variableMap::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_variableMap result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_variableMap * p = dynamic_cast <const GGS_variableMap *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_variableMap, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_variableMap::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_variableMap ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalConstantState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (0) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfLocalConstantState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (1) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (2) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (3) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (4) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedLocalVariableState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (5) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUndefinedOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (6) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDefinedOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (7) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUnusedInputOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (8) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (9) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputOutputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (10) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputOutputFormalArgumentDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (11) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (12) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedConstantInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (13) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfConstantInputFormalArgumentDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (14) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalParameterState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (15) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfUsedInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (16) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfDroppedInputFormalArgumentState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (17) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfInputFormalArgumentDeclaredAsUnusedState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (18) ;
}

//---------------------------------------------------------------------------*

GGS_stringset GGS_variableMap::reader_stringSetWithKeysOfCurrentInstanceAttributeState (C_Compiler & /* inLexique */
                                                          COMMA_UNUSED_LOCATION_ARGS) const {
  return stringSetWithKeysOfState (19) ;
}

//---------------------------------------------------------------------------*

// Override 'selectBlock'
//---------------------------------------------------------------------------*

static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_selectBlock_forMap_variableMap [23] = {
  {1, 0, 0, kMapAutomatonNoIssue, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 3, kMapAutomatonNoIssue, NULL}, // undefinedLocalVariable, definedLocalVariable, definedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 5, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {4, 3, 3, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, definedLocalVariable, definedLocalVariable
  {4, 5, 5, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, droppedLocalVariable, droppedLocalVariable
  {5, 3, 3, kMapAutomatonNoIssue, NULL}, // droppedLocalVariable, definedLocalVariable, definedLocalVariable
  {6, 7, 7, kMapAutomatonNoIssue, NULL}, // undefinedOutputFormalArgument, definedOutputFormalArgument, definedOutputFormalArgument
  {7, 6, 6, kMapAutomatonNoIssue, NULL}, // definedOutputFormalArgument, undefinedOutputFormalArgument, undefinedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 10, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {9, 10, 10, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {10, 9, 9, kMapAutomatonNoIssue, NULL}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 9, 9, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 10, 10, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {12, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 17, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, droppedInputFormalArgument, droppedInputFormalArgument
  {16, 17, 17, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, droppedInputFormalArgument, droppedInputFormalArgument
  {17, 16, 16, kMapAutomatonNoIssue, NULL}, // droppedInputFormalArgument, usedInputFormalArgument, usedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 17, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, droppedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

// Override 'selectBlock'
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_3 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_2 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_5 [72] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_5 [72] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_3 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_4 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_6_7 [90] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_7_6 [76] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_8_10 [94] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('u'),
  TO_UNICODE ('n'),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_9_10 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_8 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_9 [92] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_11 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_11_10 [93] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_15_17 [80] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_16_17 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_15 [85] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_16 [87] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (','),
  TO_UNICODE (' '),
  TO_UNICODE ('w'),
  TO_UNICODE ('h'),
  TO_UNICODE ('i'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('p'),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('v'),
  TO_UNICODE ('i'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE ('s'),
  TO_UNICODE (' '),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_selectBlock_forMap_variableMap [36] = {
  {0, 1, 0, kMapAutomatonNoIssue, NULL}, // usedLocalConstant, localConstant, usedLocalConstant
  {1, 0, 0, kMapAutomatonNoIssue, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 3, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_2_3}, // undefinedLocalVariable, definedLocalVariable, definedLocalVariable
  {3, 2, 3, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_2}, // definedLocalVariable, undefinedLocalVariable, definedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 3, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_3_5}, // definedLocalVariable, droppedLocalVariable, definedLocalVariable
  {4, 3, 4, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, definedLocalVariable, usedLocalVariable
  {4, 5, 4, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_4_5}, // usedLocalVariable, droppedLocalVariable, usedLocalVariable
  {5, 3, 5, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_3}, // droppedLocalVariable, definedLocalVariable, droppedLocalVariable
  {5, 4, 5, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_5_4}, // droppedLocalVariable, usedLocalVariable, droppedLocalVariable
  {6, 7, 7, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_6_7}, // undefinedOutputFormalArgument, definedOutputFormalArgument, definedOutputFormalArgument
  {7, 6, 7, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_7_6}, // definedOutputFormalArgument, undefinedOutputFormalArgument, definedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 8, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_8_10}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {9, 8, 9, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, unusedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 10, 9, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_9_10}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 11, 11, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, inputOutputFormalArgumentDeclaredAsUnused
  {10, 8, 8, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_8}, // droppedInputOutputFormalArgument, unusedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {10, 9, 9, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_9}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {10, 11, 11, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_10_11}, // droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, inputOutputFormalArgumentDeclaredAsUnused
  {11, 9, 11, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {11, 10, 11, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_11_10}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {12, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {13, 12, 13, kMapAutomatonNoIssue, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgument, usedConstantInputFormalArgument
  {13, 14, 13, kMapAutomatonNoIssue, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 15, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_15_17}, // inputFormalParameter, droppedInputFormalArgument, inputFormalParameter
  {16, 15, 16, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, inputFormalParameter, usedInputFormalArgument
  {16, 17, 16, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_16_17}, // usedInputFormalArgument, droppedInputFormalArgument, usedInputFormalArgument
  {16, 18, 16, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument
  {17, 15, 17, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_15}, // droppedInputFormalArgument, inputFormalParameter, droppedInputFormalArgument
  {17, 16, 16, kMapAutomatonIssueError, kIssueBranchCombinationMessage_selectBlock_forMap_variableMap_17_16}, // droppedInputFormalArgument, usedInputFormalArgument, usedInputFormalArgument
  {17, 18, 17, kMapAutomatonNoIssue, NULL}, // droppedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 17, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, droppedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_beginOverrideForSelectBlock (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) {
  if (isBuilt ()) {
    beginOverride (kBranchBehaviourForOverride_selectBlock_forMap_variableMap, 23,
                   kBranchCombinationForOverride_selectBlock_forMap_variableMap, 36,
                   "selectBlock",
                   inLexique COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*

// Override 'repeatBlock'
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_2_3 [56] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_3_5 [54] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_4_5 [54] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_5_3 [54] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('v'),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('i'),
  TO_UNICODE ('a'),
  TO_UNICODE ('b'),
  TO_UNICODE ('l'),
  TO_UNICODE ('e'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_6_7 [70] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_7_6 [68] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_8_10 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_9_10 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_10_9 [65] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('e'),
  TO_UNICODE ('f'),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_11_10 [74] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('/'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_15_17 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_16_17 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_17_16 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

//---------------------------------------------------------------------------*

static const utf32 kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_18_17 [67] = {
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('r'),
  TO_UNICODE ('e'),
  TO_UNICODE ('p'),
  TO_UNICODE ('e'),
  TO_UNICODE ('a'),
  TO_UNICODE ('t'),
  TO_UNICODE ('e'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('b'),
  TO_UNICODE ('r'),
  TO_UNICODE ('a'),
  TO_UNICODE ('n'),
  TO_UNICODE ('c'),
  TO_UNICODE ('h'),
  TO_UNICODE (' '),
  TO_UNICODE ('s'),
  TO_UNICODE ('h'),
  TO_UNICODE ('o'),
  TO_UNICODE ('u'),
  TO_UNICODE ('l'),
  TO_UNICODE ('d'),
  TO_UNICODE (' '),
  TO_UNICODE ('n'),
  TO_UNICODE ('o'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('d'),
  TO_UNICODE ('r'),
  TO_UNICODE ('o'),
  TO_UNICODE ('p'),
  TO_UNICODE (' '),
  TO_UNICODE ('t'),
  TO_UNICODE ('h'),
  TO_UNICODE ('e'),
  TO_UNICODE (' '),
  TO_UNICODE ('\''),
  TO_UNICODE ('%'),
  TO_UNICODE ('K'),
  TO_UNICODE ('\''),
  TO_UNICODE (' '),
  TO_UNICODE ('i'),
  TO_UNICODE ('n'),
  TO_UNICODE ('p'),
  TO_UNICODE ('u'),
  TO_UNICODE ('t'),
  TO_UNICODE (' '),
  TO_UNICODE ('f'),
  TO_UNICODE ('o'),
  TO_UNICODE ('r'),
  TO_UNICODE ('m'),
  TO_UNICODE ('a'),
  TO_UNICODE ('l'),
  TO_UNICODE (' '),
  TO_UNICODE ('a'),
  TO_UNICODE ('r'),
  TO_UNICODE ('g'),
  TO_UNICODE ('u'),
  TO_UNICODE ('m'),
  TO_UNICODE ('e'),
  TO_UNICODE ('n'),
  TO_UNICODE ('t'),
  TO_UNICODE (0)
} ;

static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_repeatBlock_forMap_variableMap [23] = {
  {1, 0, 0, kMapAutomatonNoIssue, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {2, 3, 2, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_2_3}, // undefinedLocalVariable, definedLocalVariable, undefinedLocalVariable
  {3, 4, 4, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {3, 5, 3, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_3_5}, // definedLocalVariable, droppedLocalVariable, definedLocalVariable
  {4, 3, 3, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, definedLocalVariable, definedLocalVariable
  {4, 5, 4, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_4_5}, // usedLocalVariable, droppedLocalVariable, usedLocalVariable
  {5, 3, 5, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_5_3}, // droppedLocalVariable, definedLocalVariable, droppedLocalVariable
  {6, 7, 6, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_6_7}, // undefinedOutputFormalArgument, definedOutputFormalArgument, undefinedOutputFormalArgument
  {7, 6, 7, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_7_6}, // definedOutputFormalArgument, undefinedOutputFormalArgument, definedOutputFormalArgument
  {8, 9, 9, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {8, 10, 8, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_8_10}, // unusedInputOutputFormalArgument, droppedInputOutputFormalArgument, unusedInputOutputFormalArgument
  {9, 10, 9, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_9_10}, // usedInputOutputFormalArgument, droppedInputOutputFormalArgument, usedInputOutputFormalArgument
  {10, 9, 10, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_10_9}, // droppedInputOutputFormalArgument, usedInputOutputFormalArgument, droppedInputOutputFormalArgument
  {11, 9, 9, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {11, 10, 11, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_11_10}, // inputOutputFormalArgumentDeclaredAsUnused, droppedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused
  {12, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {15, 17, 15, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_15_17}, // inputFormalParameter, droppedInputFormalArgument, inputFormalParameter
  {16, 17, 16, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_16_17}, // usedInputFormalArgument, droppedInputFormalArgument, usedInputFormalArgument
  {17, 16, 17, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_17_16}, // droppedInputFormalArgument, usedInputFormalArgument, droppedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
  {18, 17, 18, kMapAutomatonIssueError, kIssueBranchOverrideMessage_repeatBlock_forMap_variableMap_18_17}, // inputFormalArgumentDeclaredAsUnused, droppedInputFormalArgument, inputFormalArgumentDeclaredAsUnused
} ;

//---------------------------------------------------------------------------*

// Override 'repeatBlock'
//---------------------------------------------------------------------------*

//---------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_repeatBlock_forMap_variableMap [16] = {
  {0, 1, 0, kMapAutomatonNoIssue, NULL}, // usedLocalConstant, localConstant, usedLocalConstant
  {1, 0, 0, kMapAutomatonNoIssue, NULL}, // localConstant, usedLocalConstant, usedLocalConstant
  {3, 4, 4, kMapAutomatonNoIssue, NULL}, // definedLocalVariable, usedLocalVariable, usedLocalVariable
  {4, 3, 4, kMapAutomatonNoIssue, NULL}, // usedLocalVariable, definedLocalVariable, usedLocalVariable
  {8, 9, 9, kMapAutomatonNoIssue, NULL}, // unusedInputOutputFormalArgument, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 8, 9, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, unusedInputOutputFormalArgument, usedInputOutputFormalArgument
  {9, 11, 9, kMapAutomatonNoIssue, NULL}, // usedInputOutputFormalArgument, inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument
  {11, 9, 9, kMapAutomatonNoIssue, NULL}, // inputOutputFormalArgumentDeclaredAsUnused, usedInputOutputFormalArgument, usedInputOutputFormalArgument
  {12, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgument, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {13, 12, 13, kMapAutomatonNoIssue, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgument, usedConstantInputFormalArgument
  {13, 14, 13, kMapAutomatonNoIssue, NULL}, // usedConstantInputFormalArgument, constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument
  {14, 13, 13, kMapAutomatonNoIssue, NULL}, // constantInputFormalArgumentDeclaredAsUnused, usedConstantInputFormalArgument, usedConstantInputFormalArgument
  {15, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalParameter, usedInputFormalArgument, usedInputFormalArgument
  {16, 15, 16, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, inputFormalParameter, usedInputFormalArgument
  {16, 18, 16, kMapAutomatonNoIssue, NULL}, // usedInputFormalArgument, inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument
  {18, 16, 16, kMapAutomatonNoIssue, NULL}, // inputFormalArgumentDeclaredAsUnused, usedInputFormalArgument, usedInputFormalArgument
} ;

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_beginOverrideForRepeatBlock (C_Compiler & inLexique
                                COMMA_LOCATION_ARGS) {
  if (isBuilt ()) {
    beginOverride (kBranchBehaviourForOverride_repeatBlock_forMap_variableMap, 23,
                   kBranchCombinationForOverride_repeatBlock_forMap_variableMap, 16,
                   "repeatBlock",
                   inLexique COMMA_THERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_variableMap::modifier_endBranch (C_Compiler & inCompiler,
                       const GGS_location & inErrorLocation
                       COMMA_LOCATION_ARGS) {
  internalEndBranch (inCompiler, inErrorLocation, kFinalIssue_variableMap COMMA_THERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkAssignmentTypes"              *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkAssignmentTypes (C_Compiler & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inTargetType,
                                const GGS_unifiedTypeMapProxy   var_cas_inSourceType,
                                const GGS_location   var_cas_inErrorLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkAssignmentTypes at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_unifiedTypeMapProxy  var_cas_sourceType = var_cas_inSourceType ;
  GGS_bool var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_inSourceType) ;
  GGS_uint _variant_22938 = GGS_uint ::constructor_max (inLexique COMMA_SOURCE_FILE_AT_LINE (300)) ;
  GGS_bool _condition_22938 (_variant_22938.isBuilt (), true) ;
  while (_condition_22938.isBuiltAndTrue ()) {
    _condition_22938 = ((var_cas_ok).operator_not ()).operator_and ((var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (300)).reader_isNull (inLexique COMMA_SOURCE_FILE_AT_LINE (300))).operator_not ()) ;
    if (_condition_22938.isBuiltAndTrue ()) {
      if (_variant_22938.uintValue () == 0) {
        inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (303)) ;
        _condition_22938 = GGS_bool (false) ;
      }else{
        _variant_22938.decrement_operation (inLexique COMMA_HERE) ;
        var_cas_sourceType = var_cas_sourceType.reader_mSuperType (inLexique COMMA_SOURCE_FILE_AT_LINE (301)) ;
        var_cas_ok = (var_cas_inTargetType).operator_isEqual (var_cas_inSourceType) ;
      }
    }
  }
  const GGS_bool cond_23118 = (var_cas_ok).operator_not () ;
  if (cond_23118.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("target object type is '@")).operator_concat (var_cas_inTargetType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (305)))).operator_concat (GGS_string ("' and cannot be assigned by an '@"))).operator_concat (var_cas_inSourceType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (305)))).operator_concat (GGS_string ("' object")) COMMA_SOURCE_FILE_AT_LINE (306)) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkAssignmentTypes\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of 'predefinedTypes' struct                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_predefinedTypes ("predefinedTypes", false, NULL) ;

//---------------------------------------------------------------------------*

GGS_predefinedTypes::GGS_predefinedTypes (void) :
mLocationType (),
mBoolType (),
mCharType (),
mStringType (),
mUIntType (),
mSIntType (),
mUInt64Type (),
mSInt64Type (),
mDoubleType () {
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes::~GGS_predefinedTypes (void) {
}

//---------------------------------------------------------------------------*

void GGS_predefinedTypes::drop (void) {
  mLocationType.drop () ;
  mBoolType.drop () ;
  mCharType.drop () ;
  mStringType.drop () ;
  mUIntType.drop () ;
  mSIntType.drop () ;
  mUInt64Type.drop () ;
  mSInt64Type.drop () ;
  mDoubleType.drop () ;
}

//---------------------------------------------------------------------------*

bool GGS_predefinedTypes::isBuilt (void) const {
  return mLocationType.isBuilt ()
    && mBoolType.isBuilt ()
    && mCharType.isBuilt ()
    && mStringType.isBuilt ()
    && mUIntType.isBuilt ()
    && mSIntType.isBuilt ()
    && mUInt64Type.isBuilt ()
    && mSInt64Type.isBuilt ()
    && mDoubleType.isBuilt () ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isEqual (inOperand.mLocationType)
    .operator_and (mBoolType.operator_isEqual (inOperand.mBoolType))
    .operator_and (mCharType.operator_isEqual (inOperand.mCharType))
    .operator_and (mStringType.operator_isEqual (inOperand.mStringType))
    .operator_and (mUIntType.operator_isEqual (inOperand.mUIntType))
    .operator_and (mSIntType.operator_isEqual (inOperand.mSIntType))
    .operator_and (mUInt64Type.operator_isEqual (inOperand.mUInt64Type))
    .operator_and (mSInt64Type.operator_isEqual (inOperand.mSInt64Type))
    .operator_and (mDoubleType.operator_isEqual (inOperand.mDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_predefinedTypes::
operator_isNotEqual (const GGS_predefinedTypes & inOperand) const {
  return mLocationType.operator_isNotEqual (inOperand.mLocationType)
    .operator_or (mBoolType.operator_isNotEqual (inOperand.mBoolType))
    .operator_or (mCharType.operator_isNotEqual (inOperand.mCharType))
    .operator_or (mStringType.operator_isNotEqual (inOperand.mStringType))
    .operator_or (mUIntType.operator_isNotEqual (inOperand.mUIntType))
    .operator_or (mSIntType.operator_isNotEqual (inOperand.mSIntType))
    .operator_or (mUInt64Type.operator_isNotEqual (inOperand.mUInt64Type))
    .operator_or (mSInt64Type.operator_isNotEqual (inOperand.mSInt64Type))
    .operator_or (mDoubleType.operator_isNotEqual (inOperand.mDoubleType)) ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::
constructor_new (const GGS_unifiedTypeMapProxy & argument_0,
                 const GGS_unifiedTypeMapProxy & argument_1,
                 const GGS_unifiedTypeMapProxy & argument_2,
                 const GGS_unifiedTypeMapProxy & argument_3,
                 const GGS_unifiedTypeMapProxy & argument_4,
                 const GGS_unifiedTypeMapProxy & argument_5,
                 const GGS_unifiedTypeMapProxy & argument_6,
                 const GGS_unifiedTypeMapProxy & argument_7,
                 const GGS_unifiedTypeMapProxy & argument_8) {
  GGS_predefinedTypes result ;
  result.mLocationType = argument_0 ;
  result.mBoolType = argument_1 ;
  result.mCharType = argument_2 ;
  result.mStringType = argument_3 ;
  result.mUIntType = argument_4 ;
  result.mSIntType = argument_5 ;
  result.mUInt64Type = argument_6 ;
  result.mSInt64Type = argument_7 ;
  result.mDoubleType = argument_8 ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_predefinedTypes::
reader_description (const PMSInt32 inIndentation) const {
  C_String _s ;
  _s << "<struct @predefinedTypes" ;
  if (isBuilt ()) {
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mLocationType " ;
    _s << mLocationType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mBoolType " ;
    _s << mBoolType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mCharType " ;
    _s << mCharType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mStringType " ;
    _s << mStringType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUIntType " ;
    _s << mUIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSIntType " ;
    _s << mSIntType.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mUInt64Type " ;
    _s << mUInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mSInt64Type " ;
    _s << mSInt64Type.reader_description (inIndentation + 1) ;
    _s << "\n" ;
    _s.writeStringMultiple ("| ", inIndentation + 1) ;
    _s << "mDoubleType " ;
    _s << mDoubleType.reader_description (inIndentation + 1) ;
  }else{
    _s << "not built" ;
  }
  _s << "\n" ;
  _s.writeStringMultiple ("| ", inIndentation) ;
  _s << ">" ;
  return GGS_string (true, _s) ;
}

//---------------------------------------------------------------------------*

GGS_object GGS_predefinedTypes::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_predefinedTypes * p = NULL ;
    macroMyNew (p, GGS_predefinedTypes (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_predefinedTypes GGS_predefinedTypes::castFromObject (C_Compiler & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_predefinedTypes result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_predefinedTypes * p = dynamic_cast <const GGS_predefinedTypes *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_predefinedTypes, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_predefinedTypes::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_predefinedTypes ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@semanticExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression> gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression
findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.count ()) {
    result = gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (superClassPtr) ;
      gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@selfInExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selfInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_selfInExpressionAST * operand_24678,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_24678 != NULL) {
    const GGS_bool cond_25198 = var_cas_ioVariableMap.reader_hasKey (GGS_string ("self")) ;
    if (cond_25198.isBuiltAndTrue ()) {
      GGS_string var_cas_selfCppName ;
      GGS_unifiedTypeMapProxy  var_cas_selfType ;
      var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("self"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (353)), var_cas_selfType, var_cas_selfCppName COMMA_SOURCE_FILE_AT_LINE (353)) ;
      var_cas_outExpression = GGS_selfInExpressionForGeneration ::constructor_new (inLexique, var_cas_selfType, operand_24678->mSelfLocation, var_cas_selfCppName COMMA_SOURCE_FILE_AT_LINE (354)) ;
    }else if (cond_25198.isBuiltAndFalse ()) {
      operand_24678->mSelfLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'self' cannot be used in this context") COMMA_SOURCE_FILE_AT_LINE (357)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@hereExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__hereExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_hereExpressionAST * operand_25446,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25446 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    var_cas_outExpression = GGS_hereExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mLocationType, operand_25446->mLocation COMMA_SOURCE_FILE_AT_LINE (370)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@trueExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__trueExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_trueExpressionAST * operand_25944,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_25944 != NULL) {
    var_cas_outExpression = GGS_trueExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_25944->mLocation COMMA_SOURCE_FILE_AT_LINE (382)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@falseExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__falseExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_falseExpressionAST * operand_26411,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26411 != NULL) {
    var_cas_outExpression = GGS_falseExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_26411->mLocation COMMA_SOURCE_FILE_AT_LINE (394)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalCharExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalCharExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalCharExpressionAST * operand_26885,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_26885 != NULL) {
    var_cas_outExpression = GGS_literalCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mCharType, operand_26885->mCharacter.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (406)), operand_26885->mCharacter.reader_char (inLexique COMMA_SOURCE_FILE_AT_LINE (406)) COMMA_SOURCE_FILE_AT_LINE (406)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalStringExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalStringExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalStringExpressionAST * operand_27398,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27398 != NULL) {
    GGS_string var_cas_s = GGS_string ("") ;
    {
      GGS_stringlist::cEnumerator enumerator_27659 (operand_27398->mStringSequence, true) ;
      const GGS_stringlist::cElement * operand_27659 = NULL ;
      while (((operand_27659 = enumerator_27659.nextObject ()))) {
        macroValidPointer (operand_27659) ;
        var_cas_s.dotAssign_operation (operand_27659->mValue) ;
      }
    }
    var_cas_outExpression = GGS_literalStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_27398->mLocation, var_cas_s COMMA_SOURCE_FILE_AT_LINE (422)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalDoubleExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalDoubleExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalDoubleExpressionAST * operand_27970,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_27970 != NULL) {
    var_cas_outExpression = GGS_literalDoubleExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mDoubleType, operand_27970->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (434)), operand_27970->mValue.reader_double (inLexique COMMA_SOURCE_FILE_AT_LINE (434)) COMMA_SOURCE_FILE_AT_LINE (434)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalUIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUIntExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalUIntExpressionAST * operand_28479,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28479 != NULL) {
    var_cas_outExpression = GGS_literalUIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mUIntType, operand_28479->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (446)), operand_28479->mValue.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (446)) COMMA_SOURCE_FILE_AT_LINE (446)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalUInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalUInt64ExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalUInt64ExpressionAST * operand_28984,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_28984 != NULL) {
    var_cas_outExpression = GGS_literalUInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mUInt64Type, operand_28984->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (458)), operand_28984->mValue.reader_uint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (458)) COMMA_SOURCE_FILE_AT_LINE (458)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@literalSIntExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSIntExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalSIntExpressionAST * operand_29493,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29493 != NULL) {
    var_cas_outExpression = GGS_literalSIntExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mSIntType, operand_29493->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (470)), operand_29493->mValue.reader_sint (inLexique COMMA_SOURCE_FILE_AT_LINE (470)) COMMA_SOURCE_FILE_AT_LINE (470)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalSInt64ExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalSInt64ExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalSInt64ExpressionAST * operand_29998,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_29998 != NULL) {
    var_cas_outExpression = GGS_literalSInt64ExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mSInt64Type, operand_29998->mValue.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (482)), operand_29998->mValue.reader_sint64 (inLexique COMMA_SOURCE_FILE_AT_LINE (482)) COMMA_SOURCE_FILE_AT_LINE (482)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "analyzeConstructorInvocation"          *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_analyzeConstructorInvocation (C_Compiler & inLexique,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                const GGS_lstring   var_cas_inTypeName,
                                const GGS_lstring   var_cas_inConstructorName,
                                const GGS_semanticExpressionListAST   var_cas_inConstuctorEffectiveParameterExpressions,
                                GGS_unifiedTypeMapProxy  & var_cas_outReturnedType,
                                GGS_semanticExpressionListForGeneration  & var_cas_outConstructorEffectiveParameterList,
                                GGS_bool & var_cas_outHasCompilerArgument,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_analyzeConstructorInvocation at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  GGS_constructorMap  var_cas_constructorMap ;
  GGS_bool automatic_var_31050_0 ;
  GGS_unifiedTypeMapProxy  automatic_var_31050_1 ;
  GGS_typeKindEnum automatic_var_31050_2 ;
  GGS_typedAttributeList  automatic_var_31050_3 ;
  GGS_attributeMap  automatic_var_31050_4 ;
  GGS_typedAttributeList  automatic_var_31050_5 ;
  GGS_readerMap  automatic_var_31050_6 ;
  GGS_modifierMap  automatic_var_31050_7 ;
  GGS_instanceMethodMap  automatic_var_31050_8 ;
  GGS_classMethodMap  automatic_var_31050_9 ;
  GGS_enumerationDescriptorList  automatic_var_31050_10 ;
  GGS_uint  automatic_var_31050_11 ;
  GGS_unifiedTypeMapProxyList  automatic_var_31050_12 ;
  GGS_nativeAttributeList  automatic_var_31050_13 ;
  GGS_lstringlist  automatic_var_31050_14 ;
  GGS_typedAttributeList  automatic_var_31050_15 ;
  GGS_mapSearchMethodListAST  automatic_var_31050_16 ;
  GGS_mapSearchMethodListAST  automatic_var_31050_17 ;
  if (var_cas_inSemanticContext.mTypeMap.isBuilt ()) {
    var_cas_inSemanticContext.mTypeMap (HERE)->method_searchKey (inLexique, var_cas_inTypeName, automatic_var_31050_0, automatic_var_31050_1, automatic_var_31050_2, automatic_var_31050_3, automatic_var_31050_4, automatic_var_31050_5, var_cas_constructorMap, automatic_var_31050_6, automatic_var_31050_7, automatic_var_31050_8, automatic_var_31050_9, automatic_var_31050_10, automatic_var_31050_11, automatic_var_31050_12, automatic_var_31050_13, automatic_var_31050_14, automatic_var_31050_15, automatic_var_31050_16, automatic_var_31050_17 COMMA_SOURCE_FILE_AT_LINE (501)) ;
  }
  GGS_unifiedTypeMapProxyList  var_cas_constructorFormalArgumentTypeList ;
  elementOf_GGS_constructorMap * operand_31160 = (elementOf_GGS_constructorMap *) var_cas_constructorMap.searchForReadWithInstruction (var_cas_inConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (504))) ;
  if (NULL != operand_31160) {
    var_cas_constructorFormalArgumentTypeList = operand_31160->mInfo.mArgumentTypeList ;
    var_cas_outHasCompilerArgument = operand_31160->mInfo.mHasCompilerArgument ;
    var_cas_outReturnedType = operand_31160->mInfo.mReturnedType ;
  }else{
    const GGS_bool cond_31600 = (var_cas_constructorMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
    if (cond_31600.isBuiltAndTrue ()) {
      var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' type does not define any constructor")) COMMA_SOURCE_FILE_AT_LINE (514)) ;
      var_cas_constructorFormalArgumentTypeList.drop () ;
      var_cas_outHasCompilerArgument.drop () ;
      var_cas_outReturnedType.drop () ;
    }else if (cond_31600.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_constructorMap::cEnumerator enumerator_31653 (var_cas_constructorMap, true) ;
        const GGS_constructorMap::cElement * operand_31653 = NULL ;
        while (((operand_31653 = enumerator_31653.nextObject ()))) {
          macroValidPointer (operand_31653) ;
          var_cas_s.appendCString ("\n"
            "  - ") ;
          var_cas_s.dotAssign_operation (operand_31653->mKey) ;
          {
            GGS_unifiedTypeMapProxyList::cEnumerator enumerator_31721 (operand_31653->mInfo.mArgumentTypeList, true) ;
            const GGS_unifiedTypeMapProxyList::cElement * operand_31721 = NULL ;
            while (((operand_31721 = enumerator_31721.nextObject ()))) {
              macroValidPointer (operand_31721) ;
              var_cas_s.appendCString (" \?@") ;
              var_cas_s.dotAssign_operation (operand_31721->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (519))) ;
            }
          }
          var_cas_s.appendCString (" -> @") ;
          var_cas_s.dotAssign_operation (operand_31653->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (521))) ;
        }
      }
      var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (var_cas_inConstructorName)).operator_concat (GGS_string ("' constructor; "))).operator_concat ((((var_cas_constructorMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("available constructors are")) : (GGS_string ("available constructor is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (529)) ;
      var_cas_constructorFormalArgumentTypeList.drop () ;
      var_cas_outHasCompilerArgument.drop () ;
      var_cas_outReturnedType.drop () ;
    }
  }
  const GGS_bool cond_32710 = (var_cas_inConstuctorEffectiveParameterExpressions.reader_length ()).operator_isNotEqual (var_cas_constructorFormalArgumentTypeList.reader_length ()) ;
  if (cond_32710.isBuiltAndTrue ()) {
    var_cas_inConstructorName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (var_cas_inConstructorName)).operator_concat (GGS_string ("' constructor of '@"))).operator_concat (var_cas_inTypeName)).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_constructorFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (535)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (var_cas_inConstuctorEffectiveParameterExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (536)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (538)) ;
    var_cas_outConstructorEffectiveParameterList.drop () ;
  }else if (cond_32710.isBuiltAndFalse ()) {
    var_cas_outConstructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
    {
      GGS_semanticExpressionListAST::cEnumerator enumerator_32859 (var_cas_inConstuctorEffectiveParameterExpressions, true) ;
      const GGS_semanticExpressionListAST::cElement * operand_32859 = NULL ;
      GGS_unifiedTypeMapProxyList::cEnumerator enumerator_32894 (var_cas_constructorFormalArgumentTypeList, true) ;
      const GGS_unifiedTypeMapProxyList::cElement * operand_32894 = NULL ;
      while (((operand_32859 = enumerator_32859.nextObject ()))
          && ((operand_32894 = enumerator_32894.nextObject ()))) {
        macroValidPointer (operand_32859) ;
        macroValidPointer (operand_32894) ;
        GGS_semanticExpressionForGeneration  var_cas_exp ;
        { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_32859->mExpression.galgasObjectRunTimeInfo ()) ;
          if (method != NULL) {
            method (inLexique, operand_32859->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (542)) ;
          }
        }
        ::routine_checkAssignmentTypes (inLexique,  operand_32894->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (543)),  operand_32859->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (543)) ;
        var_cas_outConstructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_analyzeConstructorInvocation\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@constructorExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__constructorExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_constructorExpressionAST * operand_33393,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_33393 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList ;
    GGS_bool var_cas_hasCompilerArgument ;
    ::routine_analyzeConstructorInvocation (inLexique,  var_cas_inSemanticContext,  var_cas_inPredefinedTypes,  var_cas_ioVariableMap,  operand_33393->mTypeName,  operand_33393->mConstructorName,  operand_33393->mExpressions,  var_cas_returnedType,  var_cas_constructorEffectiveParameterList,  var_cas_hasCompilerArgument,  var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (561)) ;
    const GGS_bool cond_34075 = var_cas_hasCompilerArgument ;
    if (cond_34075.isBuiltAndTrue ()) {
      var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    }
    var_cas_outExpression = GGS_constructorExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_33393->mConstructorName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (580)), operand_33393->mConstructorName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (581)), var_cas_constructorEffectiveParameterList, var_cas_hasCompilerArgument COMMA_SOURCE_FILE_AT_LINE (578)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@readerCallExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__readerCallExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_readerCallExpressionAST * operand_34457,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_34457 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_receiverExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_34457->mReceiver.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_34457->mReceiver (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_receiverExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (598)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_receiverType = var_cas_receiverExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (599)) ;
    const GGS_readerMap  var_cas_readerMap = var_cas_receiverType.reader_mReaderMap (inLexique COMMA_SOURCE_FILE_AT_LINE (601)) ;
    GGS_unifiedTypeMapProxyList  var_cas_readerFormalArgumentTypeList ;
    GGS_bool var_cas_hasCompilerArgument ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType ;
    GGS_string var_cas_implicitConversionReader ;
    elementOf_GGS_readerMap * operand_35230 = (elementOf_GGS_readerMap *) var_cas_readerMap.searchForReadWithInstruction (operand_34457->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (607))) ;
    if (NULL != operand_35230) {
      var_cas_readerFormalArgumentTypeList = operand_35230->mInfo.mArgumentTypeList ;
      var_cas_hasCompilerArgument = operand_35230->mInfo.mHasCompilerArgument ;
      var_cas_returnedType = operand_35230->mInfo.mReturnedType ;
      var_cas_implicitConversionReader = operand_35230->mInfo.mImplicitConversionReader ;
    }else{
      const GGS_bool cond_35720 = (var_cas_readerMap.reader_count ()).operator_isEqual (GGS_uint (0U)) ;
      if (cond_35720.isBuiltAndTrue ()) {
        operand_34457->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (615)))).operator_concat (GGS_string ("' type does not define any reader")) COMMA_SOURCE_FILE_AT_LINE (618)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_implicitConversionReader.drop () ;
      }else if (cond_35720.isBuiltAndFalse ()) {
        GGS_string var_cas_s = GGS_string ("") ;
        {
          GGS_readerMap::cEnumerator enumerator_35768 (var_cas_readerMap, true) ;
          const GGS_readerMap::cElement * operand_35768 = NULL ;
          while (((operand_35768 = enumerator_35768.nextObject ()))) {
            macroValidPointer (operand_35768) ;
            var_cas_s.appendCString ("\n"
              "  - ") ;
            var_cas_s.dotAssign_operation (operand_35768->mKey) ;
            {
              GGS_unifiedTypeMapProxyList::cEnumerator enumerator_35836 (operand_35768->mInfo.mArgumentTypeList, true) ;
              const GGS_unifiedTypeMapProxyList::cElement * operand_35836 = NULL ;
              while (((operand_35836 = enumerator_35836.nextObject ()))) {
                macroValidPointer (operand_35836) ;
                var_cas_s.appendCString (" \?@") ;
                var_cas_s.dotAssign_operation (operand_35836->mType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (623))) ;
              }
            }
            var_cas_s.appendCString (" -> @") ;
            var_cas_s.dotAssign_operation (operand_35768->mInfo.mReturnedType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (625))) ;
          }
        }
        operand_34457->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((((GGS_string ("the '@")).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (628)))).operator_concat (GGS_string ("' type does not define the '"))).operator_concat (operand_34457->mReaderName)).operator_concat (GGS_string ("' reader; available "))).operator_concat ((((var_cas_readerMap.reader_count ()).operator_strictSup (GGS_uint (1U))).isBuiltAndTrue () ? (GGS_string ("readers are")) : (GGS_string ("reader is"))))).operator_concat (GGS_string (":"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (633)) ;
        var_cas_readerFormalArgumentTypeList.drop () ;
        var_cas_hasCompilerArgument.drop () ;
        var_cas_returnedType.drop () ;
        var_cas_implicitConversionReader.drop () ;
      }
    }
    const GGS_bool cond_36696 = (operand_34457->mExpressions.reader_length ()).operator_isNotEqual (var_cas_readerFormalArgumentTypeList.reader_length ()) ;
    if (cond_36696.isBuiltAndTrue ()) {
      operand_34457->mReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((((GGS_string ("calling the '")).operator_concat (operand_34457->mReaderName)).operator_concat (GGS_string ("' reader of '@"))).operator_concat (var_cas_receiverType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (637)))).operator_concat (GGS_string ("' requires "))).operator_concat (var_cas_readerFormalArgumentTypeList.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (638)))).operator_concat (GGS_string (" parameter(s), while this call has "))).operator_concat (operand_34457->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (639)))).operator_concat (GGS_string (" parameter(s)")) COMMA_SOURCE_FILE_AT_LINE (640)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_36696.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_constructorEffectiveParameterList = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_semanticExpressionListAST::cEnumerator enumerator_36810 (operand_34457->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_36810 = NULL ;
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_36840 (var_cas_readerFormalArgumentTypeList, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_36840 = NULL ;
        while (((operand_36810 = enumerator_36810.nextObject ()))
            && ((operand_36840 = enumerator_36840.nextObject ()))) {
          macroValidPointer (operand_36810) ;
          macroValidPointer (operand_36840) ;
          GGS_semanticExpressionForGeneration  var_cas_exp ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_36810->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_36810->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_exp, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (644)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_36840->mType,  var_cas_exp.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (645)),  operand_36810->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (645)) ;
          var_cas_constructorEffectiveParameterList.addAssign_operation (var_cas_exp) ;
        }
      }
      var_cas_outExpression = GGS_readerCallExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_34457->mReaderName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (650)), var_cas_receiverExpression, operand_34457->mReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (652)), var_cas_constructorEffectiveParameterList, var_cas_implicitConversionReader COMMA_SOURCE_FILE_AT_LINE (648)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@optionExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__optionExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_optionExpressionAST * operand_37576,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_37576 != NULL) {
    GGS_commandLineOptionMap  var_cas_boolOptionMap ;
    GGS_commandLineOptionMap  var_cas_uintOptionMap ;
    GGS_commandLineOptionMap  var_cas_stringOptionMap ;
    if (var_cas_inSemanticContext.mOptionComponentMapForSemanticAnalysis.isBuilt ()) {
      var_cas_inSemanticContext.mOptionComponentMapForSemanticAnalysis (HERE)->method_searchKey (inLexique, operand_37576->mOptionComponentName, var_cas_boolOptionMap, var_cas_uintOptionMap, var_cas_stringOptionMap COMMA_SOURCE_FILE_AT_LINE (671)) ;
    }
    GGS_bool var_cas_found = var_cas_boolOptionMap.reader_hasKey (operand_37576->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (677))) ;
    GGS_unifiedTypeMapProxy  var_cas_returnedType = var_cas_inPredefinedTypes.mBoolType ;
    const GGS_bool cond_38349 = (var_cas_found).operator_not () ;
    if (cond_38349.isBuiltAndTrue ()) {
      var_cas_found = var_cas_uintOptionMap.reader_hasKey (operand_37576->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (680))) ;
      var_cas_returnedType = var_cas_inPredefinedTypes.mUIntType ;
    }
    const GGS_bool cond_38500 = (var_cas_found).operator_not () ;
    if (cond_38500.isBuiltAndTrue ()) {
      var_cas_found = var_cas_stringOptionMap.reader_hasKey (operand_37576->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (684))) ;
      var_cas_returnedType = var_cas_inPredefinedTypes.mStringType ;
    }
    const GGS_bool cond_39791 = var_cas_found ;
    if (cond_39791.isBuiltAndTrue ()) {
      const GGS_bool cond_38792 = (operand_37576->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (688))).operator_isEqual (GGS_string ("value")) ;
      if (cond_38792.isBuiltAndTrue ()) {
        var_cas_outExpression = GGS_optionValueExpressionForGeneration ::constructor_new (inLexique, var_cas_returnedType, operand_37576->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (691)), operand_37576->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (692)), operand_37576->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (693)) COMMA_SOURCE_FILE_AT_LINE (689)) ;
      }else if (cond_38792.isBuiltAndFalse ()) {
        const GGS_bool cond_39070 = (operand_37576->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (695))).operator_isEqual (GGS_string ("char")) ;
        if (cond_39070.isBuiltAndTrue ()) {
          var_cas_outExpression = GGS_optionCharExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mCharType, operand_37576->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (698)), operand_37576->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (699)), operand_37576->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (700)) COMMA_SOURCE_FILE_AT_LINE (696)) ;
        }else if (cond_39070.isBuiltAndFalse ()) {
          const GGS_bool cond_39354 = (operand_37576->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (702))).operator_isEqual (GGS_string ("string")) ;
          if (cond_39354.isBuiltAndTrue ()) {
            var_cas_outExpression = GGS_optionStringExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_37576->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (705)), operand_37576->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (706)), operand_37576->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (707)) COMMA_SOURCE_FILE_AT_LINE (703)) ;
          }else if (cond_39354.isBuiltAndFalse ()) {
            const GGS_bool cond_39639 = (operand_37576->mOptionReaderName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (709))).operator_isEqual (GGS_string ("comment")) ;
            if (cond_39639.isBuiltAndTrue ()) {
              var_cas_outExpression = GGS_optionCommentExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mStringType, operand_37576->mOptionComponentName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (712)), operand_37576->mOptionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (713)), operand_37576->mOptionEntryName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (714)) COMMA_SOURCE_FILE_AT_LINE (710)) ;
            }else if (cond_39639.isBuiltAndFalse ()) {
              operand_37576->mOptionReaderName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined for an option") COMMA_SOURCE_FILE_AT_LINE (718)) ;
              var_cas_outExpression.drop () ;
            }
          }
        }
      }
    }else if (cond_39791.isBuiltAndFalse ()) {
      GGS_string var_cas_s = GGS_string ("") ;
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_39839 (var_cas_boolOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_39839 = NULL ;
        while (((operand_39839 = enumerator_39839.nextObject ()))) {
          macroValidPointer (operand_39839) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_39839->mKey) ;
          var_cas_s.appendCString ("' @bool option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_39935 (var_cas_uintOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_39935 = NULL ;
        while (((operand_39935 = enumerator_39935.nextObject ()))) {
          macroValidPointer (operand_39935) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_39935->mKey) ;
          var_cas_s.appendCString ("' @uint option;") ;
        }
      }
      {
        GGS_commandLineOptionMap::cEnumerator enumerator_40033 (var_cas_stringOptionMap, true) ;
        const GGS_commandLineOptionMap::cElement * operand_40033 = NULL ;
        while (((operand_40033 = enumerator_40033.nextObject ()))) {
          macroValidPointer (operand_40033) ;
          var_cas_s.appendCString ("\n"
            "-  '") ;
          var_cas_s.dotAssign_operation (operand_40033->mKey) ;
          var_cas_s.appendCString ("' @string option;") ;
        }
      }
      operand_37576->mOptionEntryName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, (((((GGS_string ("the '")).operator_concat (operand_37576->mOptionComponentName)).operator_concat (GGS_string ("' option component does not define the '"))).operator_concat (operand_37576->mOptionEntryName)).operator_concat (GGS_string ("' option; available options:"))).operator_concat (var_cas_s) COMMA_SOURCE_FILE_AT_LINE (734)) ;
      var_cas_outExpression.drop () ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "checkDiadicOperator"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_checkDiadicOperator (C_Compiler & inLexique,
                                const GGS_unifiedTypeMapProxy   var_cas_inLeftType,
                                const GGS_unifiedTypeMapProxy   var_cas_inRightType,
                                const GGS_bool  var_cas_inOperandIsHandled,
                                const GGS_string  var_cas_inOperatorNameForErrorMessage,
                                const GGS_location   var_cas_inErrorLocation
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_checkDiadicOperator at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_bool cond_40855 = (var_cas_inOperandIsHandled).operator_not () ;
  if (cond_40855.isBuiltAndTrue ()) {
    var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("left operand type is '@")).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (748)))).operator_concat (GGS_string ("' and does not accept '"))).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator (right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (748)))).operator_concat (GGS_string (")")) COMMA_SOURCE_FILE_AT_LINE (750)) ;
  }else if (cond_40855.isBuiltAndFalse ()) {
    const GGS_bool cond_41110 = (var_cas_inLeftType).operator_isNotEqual (var_cas_inRightType) ;
    if (cond_41110.isBuiltAndTrue ()) {
      var_cas_inErrorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("left operand type of '")).operator_concat (var_cas_inOperatorNameForErrorMessage)).operator_concat (GGS_string ("' operator is '@"))).operator_concat (var_cas_inLeftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (752)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_inRightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (752)))).operator_concat (GGS_string ("'; they should be the same")) COMMA_SOURCE_FILE_AT_LINE (754)) ;
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_checkDiadicOperator\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@concatExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__concatExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_concatExpressionAST * operand_41272,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_41272 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41272->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41272->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (768)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_41272->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_41272->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (771)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (773)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (776)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (777))).operator_and (function_binaryConcatOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (777)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("."),  operand_41272->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (774)) ;
    var_cas_outExpression = GGS_concatExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_41272->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (782)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@orExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__orExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_orExpressionAST * operand_42509,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_42509 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42509->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42509->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (801)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_42509->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_42509->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (804)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (806)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (809)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (810))).operator_and (function_binaryOrOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (810)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("|"),  operand_42509->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (807)) ;
    var_cas_outExpression = GGS_orExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_42509->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (815)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@andExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__andExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_andExpressionAST * operand_43739,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_43739 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43739->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43739->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (834)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_43739->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_43739->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (837)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (839)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (842)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (843))).operator_and (function_binaryAndOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (843)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("&"),  operand_43739->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (840)) ;
    var_cas_outExpression = GGS_andExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_43739->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (848)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@xorExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__xorExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_xorExpressionAST * operand_44971,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_44971 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44971->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44971->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (867)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_44971->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_44971->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (870)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (872)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (875)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (876))).operator_and (function_binaryXorOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (876)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("^"),  operand_44971->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (873)) ;
    var_cas_outExpression = GGS_xorExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_44971->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (881)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@equalExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__equalExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_equalExpressionAST * operand_46205,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_46205 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46205->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46205->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (900)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_46205->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_46205->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (903)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (905)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (906)) ;
    const GGS_bool cond_47298 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (907)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (907))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (907)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (907))) ;
    if (cond_47298.isBuiltAndTrue ()) {
      operand_46205->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (909)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (909)))).operator_concat (GGS_string ("': '==' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (912)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_47298.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_equalExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_46205->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (914)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@notEqualExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_notEqualExpressionAST * operand_47664,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_47664 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47664->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47664->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (934)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_47664->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_47664->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (937)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (939)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (940)) ;
    const GGS_bool cond_48755 = (var_cas_leftType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (941)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))).operator_isNotEqual (var_cas_rightType.reader_lkey (inLexique COMMA_SOURCE_FILE_AT_LINE (941)).reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (941))) ;
    if (cond_48755.isBuiltAndTrue ()) {
      operand_47664->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (943)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (943)))).operator_concat (GGS_string ("': '!=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (946)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_48755.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_47664->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (948)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@lowerOrEqualExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_lowerOrEqualExpressionAST * operand_49128,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_49128 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_49128->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_49128->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (968)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_49128->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_49128->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (971)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (973)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (974)) ;
    const GGS_bool cond_50166 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (975))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (975)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_50166.isBuiltAndTrue ()) {
      operand_49128->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (977)))).operator_concat (GGS_string ("' and does not support the '<=' operator")) COMMA_SOURCE_FILE_AT_LINE (980)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_50166.isBuiltAndFalse ()) {
      const GGS_bool cond_50417 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (980))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (980))) ;
      if (cond_50417.isBuiltAndTrue ()) {
        operand_49128->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (982)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (982)))).operator_concat (GGS_string ("': '<=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (985)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_50417.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_lowerOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_49128->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (987)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@greaterOrEqualExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_greaterOrEqualExpressionAST * operand_50796,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_50796 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_50796->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_50796->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1007)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_50796->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_50796->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1010)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1012)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1013)) ;
    const GGS_bool cond_51834 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1014))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1014)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_51834.isBuiltAndTrue ()) {
      operand_50796->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1016)))).operator_concat (GGS_string ("' and does not support the '>=' operator")) COMMA_SOURCE_FILE_AT_LINE (1019)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_51834.isBuiltAndFalse ()) {
      const GGS_bool cond_52085 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1019))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1019))) ;
      if (cond_52085.isBuiltAndTrue ()) {
        operand_50796->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1021)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1021)))).operator_concat (GGS_string ("': '>=' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1024)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_52085.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_greaterOrEqualExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_50796->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1026)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@strictGreaterExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictGreaterExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_strictGreaterExpressionAST * operand_52465,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_52465 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52465->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52465->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1046)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_52465->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_52465->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1049)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1051)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1052)) ;
    const GGS_bool cond_53502 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1053))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1053)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_53502.isBuiltAndTrue ()) {
      operand_52465->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1055)))).operator_concat (GGS_string ("' and does not support the '>' operator")) COMMA_SOURCE_FILE_AT_LINE (1058)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_53502.isBuiltAndFalse ()) {
      const GGS_bool cond_53752 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1058))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1058))) ;
      if (cond_53752.isBuiltAndTrue ()) {
        operand_52465->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1060)))).operator_concat (GGS_string ("': '>' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1063)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_53752.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictGreaterExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_52465->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1065)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@strictLowerExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__strictLowerExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_strictLowerExpressionAST * operand_54129,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_54129 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54129->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54129->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1085)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_54129->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_54129->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1088)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1090)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1091)) ;
    const GGS_bool cond_55166 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1092))).operator_and (function_isComparable (inLexique COMMA_SOURCE_FILE_AT_LINE (1092)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_55166.isBuiltAndTrue ()) {
      operand_54129->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1094)))).operator_concat (GGS_string ("' and does not support the '<' operator")) COMMA_SOURCE_FILE_AT_LINE (1097)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_55166.isBuiltAndFalse ()) {
      const GGS_bool cond_55416 = (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1097))).operator_isNotEqual (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1097))) ;
      if (cond_55416.isBuiltAndTrue ()) {
        operand_54129->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)))).operator_concat (GGS_string ("', right operand type is '@"))).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1099)))).operator_concat (GGS_string ("': '<' operator requires the types are the same")) COMMA_SOURCE_FILE_AT_LINE (1102)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_55416.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_strictLowerExpressionForGeneration ::constructor_new (inLexique, var_cas_inPredefinedTypes.mBoolType, operand_54129->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1104)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@rightShiftExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__rightShiftExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_rightShiftExpressionAST * operand_55790,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_55790 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_55790->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_55790->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1124)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_55790->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_55790->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1127)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1129)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1130)) ;
    const GGS_bool cond_56834 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1131))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1131)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_56834.isBuiltAndTrue ()) {
      operand_55790->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1133)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1136)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_56834.isBuiltAndFalse ()) {
      const GGS_bool cond_57026 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1136))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_57026.isBuiltAndTrue ()) {
        operand_55790->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1138)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1141)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_57026.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_55790->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1143)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@leftShiftExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__leftShiftExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_leftShiftExpressionAST * operand_57378,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_57378 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57378->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57378->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1163)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_57378->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_57378->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1166)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1168)) ;
    const GGS_unifiedTypeMapProxy  var_cas_rightType = var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1169)) ;
    const GGS_bool cond_58422 = ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1170))).operator_and (function_binaryShiftOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1170)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_58422.isBuiltAndTrue ()) {
      operand_57378->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("left operand type is '@")).operator_concat (var_cas_leftType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1172)))).operator_concat (GGS_string ("' and does not support a shift operator")) COMMA_SOURCE_FILE_AT_LINE (1175)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_58422.isBuiltAndFalse ()) {
      const GGS_bool cond_58614 = (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1175))).operator_isNotEqual (GGS_string ("uint")) ;
      if (cond_58614.isBuiltAndTrue ()) {
        operand_57378->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("for a shift operator, right operand type should be '@uint': it is '@")).operator_concat (var_cas_rightType.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1177)))).operator_concat (GGS_string ("'")) COMMA_SOURCE_FILE_AT_LINE (1180)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_58614.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_rightShiftExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_57378->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1182)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@addExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__addExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_addExpressionAST * operand_58960,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_58960 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_58960->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_58960->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1203)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_58960->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_58960->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1206)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1208)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1211)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1212))).operator_and (function_binaryAddOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1212)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("+"),  operand_58960->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1209)) ;
    var_cas_outExpression = GGS_addExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_58960->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1217)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@subExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__subExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_subExpressionAST * operand_60227,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_60227 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_60227->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_60227->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1237)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_60227->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_60227->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1240)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1242)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1245)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1246))).operator_and (function_binarySubOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1246)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("-"),  operand_60227->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1243)) ;
    var_cas_outExpression = GGS_subExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_60227->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1251)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@multiplicationExpressionAST.analyzeSemanticExpression'  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__multiplicationExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_multiplicationExpressionAST * operand_61505,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_61505 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_61505->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_61505->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1271)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_61505->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_61505->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1274)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1276)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1279)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1280))).operator_and (function_binaryMulOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1280)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("*"),  operand_61505->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1277)) ;
    var_cas_outExpression = GGS_multiplicationExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_61505->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1285)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//    Category method '@divisionExpressionAST.analyzeSemanticExpression'     *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__divisionExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_divisionExpressionAST * operand_62788,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_62788 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_62788->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_62788->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1305)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_62788->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_62788->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1308)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1310)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1313)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1314))).operator_and (function_binaryDivOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1314)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("/"),  operand_62788->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1311)) ;
    var_cas_outExpression = GGS_divisionExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_62788->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1319)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@moduloExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__moduloExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_moduloExpressionAST * operand_64063,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_64063 != NULL) {
    var_cas_ioUsesCompilerArgument = GGS_bool (true) ;
    GGS_semanticExpressionForGeneration  var_cas_leftExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_64063->mLeftExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_64063->mLeftExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_leftExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1339)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_rightExpression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_64063->mRightExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_64063->mRightExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_rightExpression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1342)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_leftType = var_cas_leftExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1344)) ;
    ::routine_checkDiadicOperator (inLexique,  var_cas_leftType,  var_cas_rightExpression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1347)),  ((var_cas_leftType.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1348))).operator_and (function_binaryModOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1348)))).operator_isNotEqual (GGS_uint (0U)),  GGS_string ("mod"),  operand_64063->mOperatorLocation COMMA_SOURCE_FILE_AT_LINE (1345)) ;
    var_cas_outExpression = GGS_moduloExpressionForGeneration ::constructor_new (inLexique, var_cas_leftType, operand_64063->mOperatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (1353)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@unaryMinusExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__unaryMinusExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_unaryMinusExpressionAST * operand_65342,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_65342 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_65342->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_65342->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1372)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1374)) ;
    const GGS_bool cond_66057 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1375))).operator_and (function_unaryMinusOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1375)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_66057.isBuiltAndTrue ()) {
      operand_65342->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1377)))).operator_concat (GGS_string ("' and does not support the unary minus operator")) COMMA_SOURCE_FILE_AT_LINE (1380)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_66057.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_unaryMinusExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_65342->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1382)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//      Category method '@notExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__notExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_notExpressionAST * operand_66372,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_66372 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_66372->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_66372->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1401)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1403)) ;
    const GGS_bool cond_67079 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1404))).operator_and (function_unaryNotOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1404)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_67079.isBuiltAndTrue ()) {
      operand_66372->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1406)))).operator_concat (GGS_string ("' and does not support the 'not' operator")) COMMA_SOURCE_FILE_AT_LINE (1409)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_67079.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_notExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_66372->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1411)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//   Category method '@complementExpressionAST.analyzeSemanticExpression'    *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__complementExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_complementExpressionAST * operand_67394,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_67394 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_67394->mExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_67394->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1430)) ;
      }
    }
    const GGS_unifiedTypeMapProxy  var_cas_type = var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1432)) ;
    const GGS_bool cond_68101 = ((var_cas_type.reader_mHandledOperatorFlags (inLexique COMMA_SOURCE_FILE_AT_LINE (1433))).operator_and (function_unaryTildeOperator (inLexique COMMA_SOURCE_FILE_AT_LINE (1433)))).operator_isEqual (GGS_uint (0U)) ;
    if (cond_68101.isBuiltAndTrue ()) {
      operand_67394->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("operand type is '@")).operator_concat (var_cas_type.reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1435)))).operator_concat (GGS_string ("' and does not support the '~' operator")) COMMA_SOURCE_FILE_AT_LINE (1438)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_68101.isBuiltAndFalse ()) {
      var_cas_outExpression = GGS_complementExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_67394->mOperatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (1440)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//       Category method '@ifExpressionAST.analyzeSemanticExpression'        *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__ifExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_ifExpressionAST * operand_68415,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_68415 != NULL) {
    GGS_semanticExpressionForGeneration  var_cas_if_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_68415->mIfExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_68415->mIfExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_if_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1459)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_then_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_68415->mThenExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_68415->mThenExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_then_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1462)) ;
      }
    }
    GGS_semanticExpressionForGeneration  var_cas_else_expression ;
    { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_68415->mElseExpression.galgasObjectRunTimeInfo ()) ;
      if (method != NULL) {
        method (inLexique, operand_68415->mElseExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_else_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1465)) ;
      }
    }
    const GGS_bool cond_69531 = (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1467)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1467))).operator_isNotEqual (GGS_string ("bool")) ;
    if (cond_69531.isBuiltAndTrue ()) {
      operand_68415->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((GGS_string ("the test expression type is '@")).operator_concat (var_cas_if_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1469)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1469)))).operator_concat (GGS_string ("', it should be '@bool'")) COMMA_SOURCE_FILE_AT_LINE (1472)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_69531.isBuiltAndFalse ()) {
      const GGS_bool cond_69793 = (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1472))).operator_isNotEqual (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1472))) ;
      if (cond_69793.isBuiltAndTrue ()) {
        operand_68415->mOperatorLocation.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("operand expression types are '@")).operator_concat (var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1474)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1474)))).operator_concat (GGS_string ("' and '@"))).operator_concat (var_cas_else_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1474)).reader_key (inLexique COMMA_SOURCE_FILE_AT_LINE (1474)))).operator_concat (GGS_string ("': they should be the same")) COMMA_SOURCE_FILE_AT_LINE (1477)) ;
        var_cas_outExpression.drop () ;
      }else if (cond_69793.isBuiltAndFalse ()) {
        var_cas_outExpression = GGS_ifExpressionForGeneration ::constructor_new (inLexique, var_cas_then_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1480)), operand_68415->mOperatorLocation, var_cas_if_expression, var_cas_then_expression, var_cas_else_expression COMMA_SOURCE_FILE_AT_LINE (1479)) ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//  Category method '@functionCallExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__functionCallExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_functionCallExpressionAST * operand_70177,
                                const GGS_semanticContext  var_cas_inSemanticContext,
                                const GGS_predefinedTypes  var_cas_inPredefinedTypes,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & var_cas_ioUsesCompilerArgument
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_70177 != NULL) {
    GGS_unifiedTypeMapProxyList  var_cas_functionSignature ;
    GGS_unifiedTypeMapProxy  var_cas_resultType ;
    if (var_cas_inSemanticContext.mFunctionMap.isBuilt ()) {
      var_cas_inSemanticContext.mFunctionMap (HERE)->method_searchKey (inLexique, operand_70177->mFunctionName, var_cas_functionSignature, var_cas_resultType COMMA_SOURCE_FILE_AT_LINE (1501)) ;
    }
    const GGS_bool cond_70960 = (var_cas_functionSignature.reader_length ()).operator_isNotEqual (operand_70177->mExpressions.reader_length ()) ;
    if (cond_70960.isBuiltAndTrue ()) {
      operand_70177->mFunctionName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((((GGS_string ("the '")).operator_concat (operand_70177->mFunctionName)).operator_concat (GGS_string ("' function header declares "))).operator_concat (var_cas_functionSignature.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1505)))).operator_concat (GGS_string (" formal parameter(s), but this function call names "))).operator_concat (operand_70177->mExpressions.reader_length ().reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1506)))).operator_concat (GGS_string (" effective argument(s)")) COMMA_SOURCE_FILE_AT_LINE (1510)) ;
      var_cas_outExpression.drop () ;
    }else if (cond_70960.isBuiltAndFalse ()) {
      GGS_semanticExpressionListForGeneration  var_cas_semanticExpressionListForGeneration = GGS_semanticExpressionListForGeneration ::constructor_emptyList () ;
      {
        GGS_unifiedTypeMapProxyList::cEnumerator enumerator_71081 (var_cas_functionSignature, true) ;
        const GGS_unifiedTypeMapProxyList::cElement * operand_71081 = NULL ;
        GGS_semanticExpressionListAST::cEnumerator enumerator_71095 (operand_70177->mExpressions, true) ;
        const GGS_semanticExpressionListAST::cElement * operand_71095 = NULL ;
        while (((operand_71081 = enumerator_71081.nextObject ()))
            && ((operand_71095 = enumerator_71095.nextObject ()))) {
          macroValidPointer (operand_71081) ;
          macroValidPointer (operand_71095) ;
          GGS_semanticExpressionForGeneration  var_cas_expression ;
          { typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression method = findCategoryMethod__semanticExpressionAST__analyzeSemanticExpression (operand_71095->mExpression.galgasObjectRunTimeInfo ()) ;
            if (method != NULL) {
              method (inLexique, operand_71095->mExpression (HERE), var_cas_inSemanticContext, var_cas_inPredefinedTypes, var_cas_ioVariableMap, var_cas_expression, var_cas_ioUsesCompilerArgument COMMA_SOURCE_FILE_AT_LINE (1514)) ;
            }
          }
          ::routine_checkAssignmentTypes (inLexique,  operand_71081->mType,  var_cas_expression.reader_mType (inLexique COMMA_SOURCE_FILE_AT_LINE (1515)),  operand_71095->mEndOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (1515)) ;
          var_cas_semanticExpressionListForGeneration.addAssign_operation (var_cas_expression) ;
        }
      }
      var_cas_outExpression = GGS_functionCallExpressionForGeneration ::constructor_new (inLexique, var_cas_resultType, operand_70177->mFunctionName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1520)), operand_70177->mFunctionName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (1521)), var_cas_semanticExpressionListForGeneration COMMA_SOURCE_FILE_AT_LINE (1518)) ;
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@varInExpressionAST.analyzeSemanticExpression'       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__varInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_varInExpressionAST * operand_71808,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & var_cas_ioVariableMap,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_71808 != NULL) {
    GGS_unifiedTypeMapProxy  var_cas_type ;
    GGS_string var_cas_sourceVariableCppName ;
    var_cas_ioVariableMap.modifier_searchForReadAccess (inLexique, operand_71808->mVarName, var_cas_type, var_cas_sourceVariableCppName COMMA_SOURCE_FILE_AT_LINE (1538)) ;
    {
      GGS_lstringlist::cEnumerator enumerator_72195 (operand_71808->mStructFieldList, true) ;
      const GGS_lstringlist::cElement * operand_72195 = NULL ;
      while (((operand_72195 = enumerator_72195.nextObject ()))) {
        macroValidPointer (operand_72195) ;
        const GGS_attributeMap  var_cas_attributeMap = var_cas_type.reader_mAttributeMap (inLexique COMMA_SOURCE_FILE_AT_LINE (1540)) ;
        if (var_cas_attributeMap.isBuilt ()) {
          var_cas_attributeMap (HERE)->method_searchKey (inLexique, operand_72195->mValue, var_cas_type COMMA_SOURCE_FILE_AT_LINE (1541)) ;
        }
      }
    }
    var_cas_outExpression = GGS_varInExpressionForGeneration ::constructor_new (inLexique, var_cas_type, operand_71808->mVarName.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (1545)), var_cas_sourceVariableCppName, operand_71808->mStructFieldList COMMA_SOURCE_FILE_AT_LINE (1543)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@literalTypeInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__literalTypeInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_literalTypeInExpressionAST * operand_72629,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_72629 != NULL) {
    operand_72629->mLiteralTypeName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @literalTypeInExpressionAST expression") COMMA_SOURCE_FILE_AT_LINE (1564)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Category method '@castInExpressionAST.analyzeSemanticExpression'      *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__castInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_castInExpressionAST * operand_73109,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_73109 != NULL) {
    operand_73109->mEndOfReceiverExpression.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @castInExpressionAST expression") COMMA_SOURCE_FILE_AT_LINE (1579)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperObjectInstanciationInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperObjectInstanciationInExpressionAST * operand_73616,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_73616 != NULL) {
    operand_73616->mFilewrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @filewrapperObjectInstanciationInExpressionAST expression") COMMA_SOURCE_FILE_AT_LINE (1594)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
// Category method '@filewrapperInExpressionAST.analyzeSemanticExpression'   *
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperInExpressionAST * operand_74123,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_74123 != NULL) {
    operand_74123->mFilewrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @filewrapperInExpressionAST expression") COMMA_SOURCE_FILE_AT_LINE (1609)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@filewrapperTemplateInExpressionAST.analyzeSemanticExpression'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression (C_Compiler & inLexique,
                                const cPtr_filewrapperTemplateInExpressionAST * operand_74618,
                                const GGS_semanticContext  /* var_cas_inSemanticContext */,
                                const GGS_predefinedTypes  /* var_cas_inPredefinedTypes */,
                                GGS_variableMap  & /* var_cas_ioVariableMap */,
                                GGS_semanticExpressionForGeneration  & var_cas_outExpression,
                                GGS_bool & /* var_cas_ioUsesCompilerArgument */
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_74618 != NULL) {
    operand_74618->mFilewrapperName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("unhandled @filewrapperTemplateInExpressionAST expression") COMMA_SOURCE_FILE_AT_LINE (1624)) ;
    var_cas_outExpression.drop () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_semanticExpressionAnalysis (void) {
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__selfInExpressionAST__analyzeSemanticExpression, gClassInfoFor__selfInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__hereExpressionAST__analyzeSemanticExpression, gClassInfoFor__hereExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__trueExpressionAST__analyzeSemanticExpression, gClassInfoFor__trueExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__falseExpressionAST__analyzeSemanticExpression, gClassInfoFor__falseExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalCharExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalCharExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalStringExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalStringExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalDoubleExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalDoubleExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalUInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalUInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSIntExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSIntExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalSInt64ExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalSInt64ExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__constructorExpressionAST__analyzeSemanticExpression, gClassInfoFor__constructorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__readerCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__readerCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__optionExpressionAST__analyzeSemanticExpression, gClassInfoFor__optionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__concatExpressionAST__analyzeSemanticExpression, gClassInfoFor__concatExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__orExpressionAST__analyzeSemanticExpression, gClassInfoFor__orExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__andExpressionAST__analyzeSemanticExpression, gClassInfoFor__andExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__xorExpressionAST__analyzeSemanticExpression, gClassInfoFor__xorExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__equalExpressionAST__analyzeSemanticExpression, gClassInfoFor__equalExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__notEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__lowerOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__lowerOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__greaterOrEqualExpressionAST__analyzeSemanticExpression, gClassInfoFor__greaterOrEqualExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictGreaterExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictGreaterExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__strictLowerExpressionAST__analyzeSemanticExpression, gClassInfoFor__strictLowerExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__rightShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__rightShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__leftShiftExpressionAST__analyzeSemanticExpression, gClassInfoFor__leftShiftExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__addExpressionAST__analyzeSemanticExpression, gClassInfoFor__addExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__subExpressionAST__analyzeSemanticExpression, gClassInfoFor__subExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__multiplicationExpressionAST__analyzeSemanticExpression, gClassInfoFor__multiplicationExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__divisionExpressionAST__analyzeSemanticExpression, gClassInfoFor__divisionExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__moduloExpressionAST__analyzeSemanticExpression, gClassInfoFor__moduloExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__unaryMinusExpressionAST__analyzeSemanticExpression, gClassInfoFor__unaryMinusExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__notExpressionAST__analyzeSemanticExpression, gClassInfoFor__notExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__complementExpressionAST__analyzeSemanticExpression, gClassInfoFor__complementExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__ifExpressionAST__analyzeSemanticExpression, gClassInfoFor__ifExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__functionCallExpressionAST__analyzeSemanticExpression, gClassInfoFor__functionCallExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__varInExpressionAST__analyzeSemanticExpression, gClassInfoFor__varInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__literalTypeInExpressionAST__analyzeSemanticExpression, gClassInfoFor__literalTypeInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__castInExpressionAST__analyzeSemanticExpression, gClassInfoFor__castInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperObjectInstanciationInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperObjectInstanciationInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperInExpressionAST.slotID ()) ;
  enterCategoryMethod__semanticExpressionAST__analyzeSemanticExpression ((typeCategoryMethod__semanticExpressionAST__analyzeSemanticExpression) category_method__filewrapperTemplateInExpressionAST__analyzeSemanticExpression, gClassInfoFor__filewrapperTemplateInExpressionAST.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_semanticExpressionAnalysis (void) {
  gDispatchTableForMethod__semanticExpressionAST__analyzeSemanticExpression.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_semanticExpressionAnalysis (prologueRoutineFor_semanticExpressionAnalysis, epilogueRoutineFor_semanticExpressionAnalysis) ;

//---------------------------------------------------------------------------*

