//-----------------------------------------------------------------------------*
//                                                                             *
//                   File 'semanticExpressionAnalysis.cpp'                     *
//                         Generated by version 2.7.0                          *
//                       july 20th, 2014, at 12h41'49"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_io.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//-----------------------------------------------------------------------------*

#include "optionLL1grammar.h"
#include "semanticExpressionAnalysis.h"


//-----------------------------------------------------------------------------*

cMapElement_variableMap::cMapElement_variableMap (const GALGAS_lstring & inKey,
                                                  const GALGAS_unifiedTypeMapProxy & in_mTypeProxy,
                                                  const GALGAS_string & in_mCppName,
                                                  const GALGAS_string & in_mNameForCheckingFormalParameterUsing
                                                  COMMA_LOCATION_ARGS) :
cMapElement (inKey COMMA_THERE),
mAttribute_mTypeProxy (in_mTypeProxy),
mAttribute_mCppName (in_mCppName),
mAttribute_mNameForCheckingFormalParameterUsing (in_mNameForCheckingFormalParameterUsing) {
}

//-----------------------------------------------------------------------------*

bool cMapElement_variableMap::isValid (void) const {
  return mAttribute_lkey.isValid () && mAttribute_mTypeProxy.isValid () && mAttribute_mCppName.isValid () && mAttribute_mNameForCheckingFormalParameterUsing.isValid () ;
}

//-----------------------------------------------------------------------------*

cMapElement * cMapElement_variableMap::copy (void) {
  cMapElement * result = NULL ;
  macroMyNew (result, cMapElement_variableMap (mAttribute_lkey, mAttribute_mTypeProxy, mAttribute_mCppName, mAttribute_mNameForCheckingFormalParameterUsing COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cMapElement_variableMap::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mTypeProxy" ":" ;
  mAttribute_mTypeProxy.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mCppName" ":" ;
  mAttribute_mCppName.description (ioString, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mNameForCheckingFormalParameterUsing" ":" ;
  mAttribute_mNameForCheckingFormalParameterUsing.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cMapElement_variableMap::compare (const cCollectionElement * inOperand) const {
  cMapElement_variableMap * operand = (cMapElement_variableMap *) inOperand ;
  typeComparisonResult result = mAttribute_lkey.objectCompare (operand->mAttribute_lkey) ;
  if (kOperandEqual == result) {
    result = mAttribute_mTypeProxy.objectCompare (operand->mAttribute_mTypeProxy) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mCppName.objectCompare (operand->mAttribute_mCppName) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mNameForCheckingFormalParameterUsing.objectCompare (operand->mAttribute_mNameForCheckingFormalParameterUsing) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_variableMap::GALGAS_variableMap (void) :
AC_GALGAS_uniqueMap () {
}

//-----------------------------------------------------------------------------*

GALGAS_variableMap::GALGAS_variableMap (const GALGAS_variableMap & inSource) :
AC_GALGAS_uniqueMap (inSource) {
}

//-----------------------------------------------------------------------------*

GALGAS_variableMap & GALGAS_variableMap::operator = (const GALGAS_variableMap & inSource) {
  * ((AC_GALGAS_uniqueMap *) this) = inSource ;
  return * this ;
}

//-----------------------------------------------------------------------------*

GALGAS_variableMap GALGAS_variableMap::constructor_emptyMap (LOCATION_ARGS) {
  GALGAS_variableMap result ;
  result.makeNewEmptyMap (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*
//  Map automaton states                                                       *
//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const uint32_t kMapStateCount_variableMap = 23 ;
#endif
static const uint32_t kMapState_variableMap_constantInputFormalArgument = 13 ;
static const uint32_t kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused = 15 ;
static const uint32_t kMapState_variableMap_currentInstanceAttribute = 20 ;
static const uint32_t kMapState_variableMap_currentInstanceAttributeInModifier = 21 ;
static const uint32_t kMapState_variableMap_currentInstanceDroppedAttributeInModifier = 22 ;
static const uint32_t kMapState_variableMap_definedLocalVariable = 4 ;
static const uint32_t kMapState_variableMap_definedOutputFormalArgument = 8 ;
static const uint32_t kMapState_variableMap_droppedInputFormalArgument = 18 ;
static const uint32_t kMapState_variableMap_droppedInputOutputFormalArgument = 11 ;
static const uint32_t kMapState_variableMap_droppedLocalVariable = 6 ;
static const uint32_t kMapState_variableMap_inputFormalArgumentDeclaredAsUnused = 19 ;
static const uint32_t kMapState_variableMap_inputFormalParameter = 16 ;
static const uint32_t kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused = 12 ;
static const uint32_t kMapState_variableMap_localConstant = 1 ;
static const uint32_t kMapState_variableMap_undefinedLocalConstant = 2 ;
static const uint32_t kMapState_variableMap_undefinedLocalVariable = 3 ;
static const uint32_t kMapState_variableMap_undefinedOutputFormalArgument = 7 ;
static const uint32_t kMapState_variableMap_unusedInputOutputFormalArgument = 9 ;
static const uint32_t kMapState_variableMap_usedConstantInputFormalArgument = 14 ;
static const uint32_t kMapState_variableMap_usedInputFormalArgument = 17 ;
static const uint32_t kMapState_variableMap_usedInputOutputFormalArgument = 10 ;
static const uint32_t kMapState_variableMap_usedLocalConstant = 0 ;
static const uint32_t kMapState_variableMap_usedLocalVariable = 5 ;

//-----------------------------------------------------------------------------*
//  Map automaton state names                                                  *
//-----------------------------------------------------------------------------*

static const char * kMapStateNames_variableMap [23] = {
  "usedLocalConstant",
  "localConstant",
  "undefinedLocalConstant",
  "undefinedLocalVariable",
  "definedLocalVariable",
  "usedLocalVariable",
  "droppedLocalVariable",
  "undefinedOutputFormalArgument",
  "definedOutputFormalArgument",
  "unusedInputOutputFormalArgument",
  "usedInputOutputFormalArgument",
  "droppedInputOutputFormalArgument",
  "inputOutputFormalArgumentDeclaredAsUnused",
  "constantInputFormalArgument",
  "usedConstantInputFormalArgument",
  "constantInputFormalArgumentDeclaredAsUnused",
  "inputFormalParameter",
  "usedInputFormalArgument",
  "droppedInputFormalArgument",
  "inputFormalArgumentDeclaredAsUnused",
  "currentInstanceAttribute",
  "currentInstanceAttributeInModifier",
  "currentInstanceDroppedAttributeInModifier"
} ;

//-----------------------------------------------------------------------------*
//  Map automaton actions                                                    *
//-----------------------------------------------------------------------------*

static const uint32_t kMapActionCount_variableMap = 4 ;
static const uint32_t kMapAction_variableMap_dropAccess = 3 ;
static const uint32_t kMapAction_variableMap_readAccess = 0 ;
static const uint32_t kMapAction_variableMap_readWriteAccess = 2 ;
static const uint32_t kMapAction_variableMap_writeAccess = 1 ;

//-----------------------------------------------------------------------------*
//  Map automaton action names                                                 *
//-----------------------------------------------------------------------------*

static const char * kMapActionNames_variableMap [4] = {
  "dropAccess",
  "readAccess",
  "readWriteAccess",
  "writeAccess"
} ;

//-----------------------------------------------------------------------------*
//  Map automaton transitions                                                  *
//-----------------------------------------------------------------------------*

static const cMapAutomatonTransition kMapTransitions_variableMap [23 * 4] = {
// State 'usedLocalConstant', index 0 
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonIssueError, "a constant cannot be drop"}, // for action 'dropAccess', (index 3)
// State 'localConstant', index 1 
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonIssueError, "a constant cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonIssueError, "a constant cannot be drop"}, // for action 'dropAccess', (index 3)
// State 'undefinedLocalConstant', index 2 
  {kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapAutomatonIssueError, "the constant is undefined"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_localConstant /* 1 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapAutomatonIssueError, "the constant is undefined"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapAutomatonIssueError, "the constant is undefined"}, // for action 'dropAccess', (index 3)
// State 'undefinedLocalVariable', index 3 
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapAutomatonIssueError, "an undefined local variable cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapAutomatonIssueError, "an undefined local variable cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapAutomatonIssueWarning, "the local variable has no value"}, // for action 'dropAccess', (index 3)
// State 'definedLocalVariable', index 4 
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonIssueWarning, "the local variable has been dropped without any read"}, // for action 'dropAccess', (index 3)
// State 'usedLocalVariable', index 5 
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
// State 'droppedLocalVariable', index 6 
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonIssueError, "a dropped local variable cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonIssueError, "a dropped local variable cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonIssueWarning, "the local variable is already dropped"}, // for action 'dropAccess', (index 3)
// State 'undefinedOutputFormalArgument', index 7 
  {kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapAutomatonIssueError, "an undefined output formal parameter cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapAutomatonIssueError, "an undefined output formal parameter cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapAutomatonIssueWarning, "the output formal parameter has no value"}, // for action 'dropAccess', (index 3)
// State 'definedOutputFormalArgument', index 8 
  {kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
// State 'unusedInputOutputFormalArgument', index 9 
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
// State 'usedInputOutputFormalArgument', index 10 
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
// State 'droppedInputOutputFormalArgument', index 11 
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueError, "a dropped input/output formal argument cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueError, "a dropped input/output formal argument cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueWarning, "the input/output formal argument is already dropped"}, // for action 'dropAccess', (index 3)
// State 'inputOutputFormalArgumentDeclaredAsUnused', index 12 
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueWarning, "the input/output formal parameter has been declared as unused"}, // for action 'dropAccess', (index 3)
// State 'constantInputFormalArgument', index 13 
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be dropped"}, // for action 'dropAccess', (index 3)
// State 'usedConstantInputFormalArgument', index 14 
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be dropped"}, // for action 'dropAccess', (index 3)
// State 'constantInputFormalArgumentDeclaredAsUnused', index 15 
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueWarning, "the constant input formal parameter is declared as unused"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be written"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonIssueError, "a constant input formal parameter cannot be dropped"}, // for action 'dropAccess', (index 3)
// State 'inputFormalParameter', index 16 
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
// State 'usedInputFormalArgument', index 17 
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
// State 'droppedInputFormalArgument', index 18 
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonIssueError, "a dropped input formal parameter cannot be read"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonIssueError, "a dropped input formal parameter cannot be read"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonIssueWarning, "the input formal parameter is already dropped"}, // for action 'dropAccess', (index 3)
// State 'inputFormalArgumentDeclaredAsUnused', index 19 
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonIssueWarning, "the input formal parameter is declared as unused"}, // for action 'dropAccess', (index 3)
// State 'currentInstanceAttribute', index 20 
  {kMapState_variableMap_currentInstanceAttribute /* 20 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_currentInstanceAttribute /* 20 */, kMapAutomatonIssueError, "an attribute cannot be written within a method or a reader"}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_currentInstanceAttribute /* 20 */, kMapAutomatonIssueError, "an attribute cannot be modified within a method or a reader"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_currentInstanceAttribute /* 20 */, kMapAutomatonIssueError, "an attribute cannot be dropped within a method or a reader"}, // for action 'dropAccess', (index 3)
// State 'currentInstanceAttributeInModifier', index 21 
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""}, // for action 'dropAccess', (index 3)
// State 'currentInstanceDroppedAttributeInModifier', index 22 
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapAutomatonIssueError, "the attribute cannot be read, it has been dropped"}, // for action 'readAccess', (index 0)
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""}, // for action 'writeAccess', (index 1)
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapAutomatonIssueError, "the attribute cannot be read/written, it has been dropped"}, // for action 'readWriteAccess', (index 2)
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapAutomatonIssueWarning, "the attribute is already dropped"}, // for action 'dropAccess', (index 3)
} ;

//-----------------------------------------------------------------------------*
//  Map automaton final state issues                                           *
//-----------------------------------------------------------------------------*

static const cMapAutomatonFinalIssue kMapAutomatonFinalIssue_variableMap [23] = {
  {kMapAutomatonNoIssue, ""},// state 'usedLocalConstant' (index 0)
  {kMapAutomatonIssueWarning, "the '%K' constant value is unused"},// state 'localConstant' (index 1)
  {kMapAutomatonIssueWarning, "the '%K' constant value is unused"},// state 'undefinedLocalConstant' (index 2)
  {kMapAutomatonIssueWarning, "the '%K' local variable is unused"},// state 'undefinedLocalVariable' (index 3)
  {kMapAutomatonNoIssue, ""},// state 'definedLocalVariable' (index 4)
  {kMapAutomatonNoIssue, ""},// state 'usedLocalVariable' (index 5)
  {kMapAutomatonNoIssue, ""},// state 'droppedLocalVariable' (index 6)
  {kMapAutomatonIssueError, "the '%K' output formal parameter is undefined"},// state 'undefinedOutputFormalArgument' (index 7)
  {kMapAutomatonNoIssue, ""},// state 'definedOutputFormalArgument' (index 8)
  {kMapAutomatonIssueWarning, "the '%K' input/output formal parameter is unused"},// state 'unusedInputOutputFormalArgument' (index 9)
  {kMapAutomatonNoIssue, ""},// state 'usedInputOutputFormalArgument' (index 10)
  {kMapAutomatonIssueError, "the '%K' input/ouput formal argument should be valuated at the end of the routine"},// state 'droppedInputOutputFormalArgument' (index 11)
  {kMapAutomatonNoIssue, ""},// state 'inputOutputFormalArgumentDeclaredAsUnused' (index 12)
  {kMapAutomatonIssueWarning, "the constant '%K' input formal parameter is not used and is not declared as unused"},// state 'constantInputFormalArgument' (index 13)
  {kMapAutomatonNoIssue, ""},// state 'usedConstantInputFormalArgument' (index 14)
  {kMapAutomatonNoIssue, ""},// state 'constantInputFormalArgumentDeclaredAsUnused' (index 15)
  {kMapAutomatonIssueWarning, "the '%K' input formal parameter is not used and is not declared as unused"},// state 'inputFormalParameter' (index 16)
  {kMapAutomatonNoIssue, ""},// state 'usedInputFormalArgument' (index 17)
  {kMapAutomatonNoIssue, ""},// state 'droppedInputFormalArgument' (index 18)
  {kMapAutomatonNoIssue, ""},// state 'inputFormalArgumentDeclaredAsUnused' (index 19)
  {kMapAutomatonNoIssue, ""},// state 'currentInstanceAttribute' (index 20)
  {kMapAutomatonNoIssue, ""},// state 'currentInstanceAttributeInModifier' (index 21)
  {kMapAutomatonIssueWarning, "the '%K' attribute is in the dropped state at the end of the modifier"},// state 'currentInstanceDroppedAttributeInModifier' (index 22)
} ;
//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_closeBranch (GALGAS_location inErrorLocation,
                                               C_Compiler * inCompiler
                                               COMMA_LOCATION_ARGS) {
  closeBranch (inErrorLocation,
               kMapAutomatonFinalIssue_variableMap,
               #ifndef DO_NOT_GENERATE_CHECKINGS
                 kMapStateCount_variableMap,
               #endif
               inCompiler COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::method_checkAutomatonStates (GALGAS_location inErrorLocation,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) const {
  checkAutomatonStates (inErrorLocation, kMapAutomatonFinalIssue_variableMap, inCompiler COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*
//                         map override 'selectBlock'                          *
//-----------------------------------------------------------------------------*

static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_variableMap_selectBlock [30] = {
  {kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgument /* 13 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""},
} ;

//-----------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_variableMap_selectBlock [42] = {
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones let it undefined"},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonIssueError, "this branch lets the '%K' variable undefined, while previous ones define it"},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonIssueError, "this branch drops the '%K' variable, while previous ones let it defined"},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonIssueError, "this branch lets the '%K' variable undefined, while previous defines let it"},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonIssueError, "this branch drops the '%K' variable, while previous ones let it defined"},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones drop it"},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonIssueError, "this branch defines the '%K' variable, while previous ones drop it"},
  {kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonIssueError, "this branch defines the '%K' output formal argument, while previous ones let it undefined"},
  {kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonIssueError, "this branch lets the '%K' variable undefined, while previous ones define it"},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapAutomatonIssueError, "this branch drops the '%K' input/output formal argument, while previous ones let it undefined"},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueError, "this branch drops the '%K' input/output formal argument, while previous ones let it defined"},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapAutomatonIssueError, "this branch lets the '%K' input/output formal argument defined, while previous ones drop it"},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueError, "this branch lets the '%K' input/output formal argument defined, while previous ones drop it"},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapAutomatonIssueError, "this branch lets the '%K' input formal argument defined, while previous ones drop it"},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument defined, while previous ones let it defined"},
  {kMapState_variableMap_constantInputFormalArgument /* 13 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_constantInputFormalArgument /* 13 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalParameter /* 16 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument, while previous let it defined"},
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument, while previous ones let it defined"},
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonIssueError, "this branch drops the '%K' input formal argument, while previous ones let it defined"},
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonIssueError, "this branch defines the '%K' input formal argument, while previous ones let it dropped"},
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonIssueError, "this branch drops the '%K' attribute, while previous ones let it defined"},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonIssueError, "this branch lets the '%K' attribute defined, while previous ones drop it"},
} ;

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_openOverrideForSelectBlock (C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  openOverride (kBranchBehaviourForOverride_variableMap_selectBlock, 30,
                kBranchCombinationForOverride_variableMap_selectBlock, 42,
                "selectBlock",
                inCompiler
                COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*
//                         map override 'repeatBlock'                          *
//-----------------------------------------------------------------------------*

static const cBranchOverrideTransformationDescriptor kBranchBehaviourForOverride_variableMap_repeatBlock [30] = {
  {kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_undefinedLocalConstant /* 2 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' variable"},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' variable"},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' variable"},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' variable"},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonIssueError, "the repeated branch should not define the dropped '%K' variable"},
  {kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapAutomatonIssueError, "the repeated branch should not define the '%K' output formal argument"},
  {kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapState_variableMap_undefinedOutputFormalArgument /* 7 */, kMapState_variableMap_definedOutputFormalArgument /* 8 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' output formal argument"},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input/output formal argument"},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input/output formal argument"},
  {kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapAutomatonIssueError, "the repeated branch should define the '%K' input formal argument"},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_droppedInputOutputFormalArgument /* 11 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input/output formal argument"},
  {kMapState_variableMap_constantInputFormalArgument /* 13 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalParameter /* 16 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_droppedInputFormalArgument /* 18 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' input formal argument"},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonIssueError, "the repeated branch should not drop the '%K' attribute"},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""},
} ;

//-----------------------------------------------------------------------------*

static const cBranchOverrideCompatibilityDescriptor kBranchCombinationForOverride_variableMap_repeatBlock [20] = {
  {kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_localConstant /* 1 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapState_variableMap_usedLocalConstant /* 0 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedLocalVariable /* 5 */, kMapState_variableMap_definedLocalVariable /* 4 */, kMapState_variableMap_usedLocalVariable /* 5 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_droppedLocalVariable /* 6 */, kMapState_variableMap_undefinedLocalVariable /* 3 */, kMapState_variableMap_droppedLocalVariable /* 6 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_unusedInputOutputFormalArgument /* 9 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused /* 12 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapState_variableMap_usedInputOutputFormalArgument /* 10 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgument /* 13 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_constantInputFormalArgument /* 13 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused /* 15 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapState_variableMap_usedConstantInputFormalArgument /* 14 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_inputFormalParameter /* 16 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_inputFormalArgumentDeclaredAsUnused /* 19 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapState_variableMap_usedInputFormalArgument /* 17 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""},
  {kMapState_variableMap_currentInstanceDroppedAttributeInModifier /* 22 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapState_variableMap_currentInstanceAttributeInModifier /* 21 */, kMapAutomatonNoIssue, ""},
} ;

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_openOverrideForRepeatBlock (C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  openOverride (kBranchBehaviourForOverride_variableMap_repeatBlock, 30,
                kBranchCombinationForOverride_variableMap_repeatBlock, 20,
                "repeatBlock",
                inCompiler
                COMMA_THERE) ;
}


//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertMutableAttribute (GALGAS_lstring inKey,
                                                          GALGAS_unifiedTypeMapProxy inArgument0,
                                                          GALGAS_string inArgument1,
                                                          GALGAS_string inArgument2,
                                                          C_Compiler * inCompiler
                                                          COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' attribute (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_currentInstanceAttributeInModifier,
                        kMapStateNames_variableMap [kMapState_variableMap_currentInstanceAttributeInModifier],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertNonMutableAttribute (GALGAS_lstring inKey,
                                                             GALGAS_unifiedTypeMapProxy inArgument0,
                                                             GALGAS_string inArgument1,
                                                             GALGAS_string inArgument2,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' attribute (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_currentInstanceAttribute,
                        kMapStateNames_variableMap [kMapState_variableMap_currentInstanceAttribute],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertUndefinedLocalVariable (GALGAS_lstring inKey,
                                                                GALGAS_unifiedTypeMapProxy inArgument0,
                                                                GALGAS_string inArgument1,
                                                                GALGAS_string inArgument2,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_undefinedLocalVariable,
                        kMapStateNames_variableMap [kMapState_variableMap_undefinedLocalVariable],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertDefinedLocalVariable (GALGAS_lstring inKey,
                                                              GALGAS_unifiedTypeMapProxy inArgument0,
                                                              GALGAS_string inArgument1,
                                                              GALGAS_string inArgument2,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_definedLocalVariable,
                        kMapStateNames_variableMap [kMapState_variableMap_definedLocalVariable],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertUndefinedLocalConstant (GALGAS_lstring inKey,
                                                                GALGAS_unifiedTypeMapProxy inArgument0,
                                                                GALGAS_string inArgument1,
                                                                GALGAS_string inArgument2,
                                                                C_Compiler * inCompiler
                                                                COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_undefinedLocalConstant,
                        kMapStateNames_variableMap [kMapState_variableMap_undefinedLocalConstant],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertLocalConstant (GALGAS_lstring inKey,
                                                       GALGAS_unifiedTypeMapProxy inArgument0,
                                                       GALGAS_string inArgument1,
                                                       GALGAS_string inArgument2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_localConstant,
                        kMapStateNames_variableMap [kMapState_variableMap_localConstant],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertUsedLocalConstant (GALGAS_lstring inKey,
                                                           GALGAS_unifiedTypeMapProxy inArgument0,
                                                           GALGAS_string inArgument1,
                                                           GALGAS_string inArgument2,
                                                           C_Compiler * inCompiler
                                                           COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_usedLocalConstant,
                        kMapStateNames_variableMap [kMapState_variableMap_usedLocalConstant],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputFormalArgument (GALGAS_lstring inKey,
                                                             GALGAS_unifiedTypeMapProxy inArgument0,
                                                             GALGAS_string inArgument1,
                                                             GALGAS_string inArgument2,
                                                             C_Compiler * inCompiler
                                                             COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_inputFormalParameter,
                        kMapStateNames_variableMap [kMapState_variableMap_inputFormalParameter],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputFormalArgumentDeclaredAsUnused (GALGAS_lstring inKey,
                                                                             GALGAS_unifiedTypeMapProxy inArgument0,
                                                                             GALGAS_string inArgument1,
                                                                             GALGAS_string inArgument2,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_inputFormalArgumentDeclaredAsUnused,
                        kMapStateNames_variableMap [kMapState_variableMap_inputFormalArgumentDeclaredAsUnused],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertConstantInputFormalArgument (GALGAS_lstring inKey,
                                                                     GALGAS_unifiedTypeMapProxy inArgument0,
                                                                     GALGAS_string inArgument1,
                                                                     GALGAS_string inArgument2,
                                                                     C_Compiler * inCompiler
                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_constantInputFormalArgument,
                        kMapStateNames_variableMap [kMapState_variableMap_constantInputFormalArgument],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertConstantInputFormalArgumentDeclaredAsUnused (GALGAS_lstring inKey,
                                                                                     GALGAS_unifiedTypeMapProxy inArgument0,
                                                                                     GALGAS_string inArgument1,
                                                                                     GALGAS_string inArgument2,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused,
                        kMapStateNames_variableMap [kMapState_variableMap_constantInputFormalArgumentDeclaredAsUnused],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertOutputFormalArgument (GALGAS_lstring inKey,
                                                              GALGAS_unifiedTypeMapProxy inArgument0,
                                                              GALGAS_string inArgument1,
                                                              GALGAS_string inArgument2,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_undefinedOutputFormalArgument,
                        kMapStateNames_variableMap [kMapState_variableMap_undefinedOutputFormalArgument],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputOutputFormalArgument (GALGAS_lstring inKey,
                                                                   GALGAS_unifiedTypeMapProxy inArgument0,
                                                                   GALGAS_string inArgument1,
                                                                   GALGAS_string inArgument2,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_unusedInputOutputFormalArgument,
                        kMapStateNames_variableMap [kMapState_variableMap_unusedInputOutputFormalArgument],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_insertInputOutputFormalArgumentDeclaredAsUnused (GALGAS_lstring inKey,
                                                                                   GALGAS_unifiedTypeMapProxy inArgument0,
                                                                                   GALGAS_string inArgument1,
                                                                                   GALGAS_string inArgument2,
                                                                                   C_Compiler * inCompiler
                                                                                   COMMA_LOCATION_ARGS) {
  cMapElement_variableMap * p = NULL ;
  macroMyNew (p, cMapElement_variableMap (inKey, inArgument0, inArgument1, inArgument2 COMMA_HERE)) ;
  capCollectionElement attributes ;
  attributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
  const char * kInsertErrorMessage = "redefinition of '%K' variable (previous declaration was in %L)" ;
  const char * kShadowErrorMessage = "" ;
  performInsert (attributes,
                        inCompiler,
                        kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused,
                        kMapStateNames_variableMap [kMapState_variableMap_inputOutputFormalArgumentDeclaredAsUnused],
                        kInsertErrorMessage,
                        kShadowErrorMessage
                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForReadAccess = "the '%K' variable is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForReadAccess (GALGAS_lstring inKey,
                                                       GALGAS_unifiedTypeMapProxy & outArgument0,
                                                       GALGAS_string & outArgument1,
                                                       GALGAS_string & outArgument2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_readAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForReadAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mTypeProxy ;
    outArgument1 = p->mAttribute_mCppName ;
    outArgument2 = p->mAttribute_mNameForCheckingFormalParameterUsing ;
  }
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForWriteAccess = "the '%K' variable is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForWriteAccess (GALGAS_lstring inKey,
                                                        GALGAS_unifiedTypeMapProxy & outArgument0,
                                                        GALGAS_string & outArgument1,
                                                        GALGAS_string & outArgument2,
                                                        C_Compiler * inCompiler
                                                        COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_writeAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForWriteAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mTypeProxy ;
    outArgument1 = p->mAttribute_mCppName ;
    outArgument2 = p->mAttribute_mNameForCheckingFormalParameterUsing ;
  }
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForReadWriteAccess = "the '%K' variable is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForReadWriteAccess (GALGAS_lstring inKey,
                                                            GALGAS_unifiedTypeMapProxy & outArgument0,
                                                            GALGAS_string & outArgument1,
                                                            GALGAS_string & outArgument2,
                                                            C_Compiler * inCompiler
                                                            COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_readWriteAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForReadWriteAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mTypeProxy ;
    outArgument1 = p->mAttribute_mCppName ;
    outArgument2 = p->mAttribute_mNameForCheckingFormalParameterUsing ;
  }
}

//-----------------------------------------------------------------------------*

const char * kSearchErrorMessage_variableMap_searchForDropAccess = "the '%K' variable is not declared" ;

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_searchForDropAccess (GALGAS_lstring inKey,
                                                       GALGAS_unifiedTypeMapProxy & outArgument0,
                                                       GALGAS_string & outArgument1,
                                                       GALGAS_string & outArgument2,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) performSearch (inKey,
                                                                                         inCompiler,
                                                                                         kMapAction_variableMap_dropAccess,
                                                                                         kMapTransitions_variableMap,
                                                                                         kMapActionCount_variableMap,
                                                                                         kMapStateNames_variableMap,
                                                                                         kMapActionNames_variableMap,
                                                                                         #ifndef DO_NOT_GENERATE_CHECKINGS
                                                                                           kMapStateCount_variableMap,
                                                                                         #endif
                                                                                         kSearchErrorMessage_variableMap_searchForDropAccess
                                                                                         COMMA_THERE) ;
  if (NULL == p) {
    outArgument0.drop () ;
    outArgument1.drop () ;
    outArgument2.drop () ;
  }else{
    macroValidSharedObject (p, cMapElement_variableMap) ;
    outArgument0 = p->mAttribute_mTypeProxy ;
    outArgument1 = p->mAttribute_mCppName ;
    outArgument2 = p->mAttribute_mNameForCheckingFormalParameterUsing ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_variableMap::reader_mTypeProxyForKey (const GALGAS_string & inKey,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_unifiedTypeMapProxy result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mTypeProxy ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_variableMap::reader_mCppNameForKey (const GALGAS_string & inKey,
                                                         C_Compiler * inCompiler
                                                         COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mCppName ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_variableMap::reader_mNameForCheckingFormalParameterUsingForKey (const GALGAS_string & inKey,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_LOCATION_ARGS) const {
  const cCollectionElement * attributes = searchForReadingAttribute (inKey, inCompiler COMMA_THERE) ;
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) attributes ;
  GALGAS_string result ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    result = p->mAttribute_mNameForCheckingFormalParameterUsing ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setMTypeProxyForKey (GALGAS_unifiedTypeMapProxy inAttributeValue,
                                                       GALGAS_string inKey,
                                                       C_Compiler * inCompiler
                                                       COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_mTypeProxy = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setMCppNameForKey (GALGAS_string inAttributeValue,
                                                     GALGAS_string inKey,
                                                     C_Compiler * inCompiler
                                                     COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_mCppName = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_variableMap::modifier_setMNameForCheckingFormalParameterUsingForKey (GALGAS_string inAttributeValue,
                                                                                 GALGAS_string inKey,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_LOCATION_ARGS) {
  cCollectionElement * attributes = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * p = (cMapElement_variableMap *) attributes ;
  if (NULL != p) {
    macroValidSharedObject (p, cMapElement_variableMap) ;
    p->mAttribute_mNameForCheckingFormalParameterUsing = inAttributeValue ;
  }
}

//-----------------------------------------------------------------------------*

cMapElement_variableMap * GALGAS_variableMap::readWriteAccessForWithInstruction_hasKey (C_Compiler * inCompiler,
                                                                                        const GALGAS_string & inKey
                                                                                        COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler COMMA_THERE) ;
  cMapElement_variableMap * result = (cMapElement_variableMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_variableMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_variableMap * GALGAS_variableMap::readWriteAccessForWithInstruction_searchForDropAccess (C_Compiler * inCompiler,
                                                                                                     const GALGAS_lstring & inKey
                                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_variableMap_searchForDropAccess COMMA_THERE) ;
  cMapElement_variableMap * result = (cMapElement_variableMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_variableMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_variableMap * GALGAS_variableMap::readWriteAccessForWithInstruction_searchForReadAccess (C_Compiler * inCompiler,
                                                                                                     const GALGAS_lstring & inKey
                                                                                                     COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_variableMap_searchForReadAccess COMMA_THERE) ;
  cMapElement_variableMap * result = (cMapElement_variableMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_variableMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_variableMap * GALGAS_variableMap::readWriteAccessForWithInstruction_searchForReadWriteAccess (C_Compiler * inCompiler,
                                                                                                          const GALGAS_lstring & inKey
                                                                                                          COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_variableMap_searchForReadWriteAccess COMMA_THERE) ;
  cMapElement_variableMap * result = (cMapElement_variableMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_variableMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cMapElement_variableMap * GALGAS_variableMap::readWriteAccessForWithInstruction_searchForWriteAccess (C_Compiler * inCompiler,
                                                                                                      const GALGAS_lstring & inKey
                                                                                                      COMMA_LOCATION_ARGS) {
  cMapElement * p = searchForReadWriteAttribute (inKey, inCompiler, kSearchErrorMessage_variableMap_searchForWriteAccess COMMA_THERE) ;
  cMapElement_variableMap * result = (cMapElement_variableMap *) p ;
  macroNullOrValidSharedObject (result, cMapElement_variableMap) ;
  return result ;
}

//-----------------------------------------------------------------------------*

cEnumerator_variableMap::cEnumerator_variableMap (const GALGAS_variableMap & inEnumeratedObject,
                                                  const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_lstring cEnumerator_variableMap::current_lkey (LOCATION_ARGS) const {
  const cMapElement * p = (const cMapElement *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement) ;
  return p->mAttribute_lkey ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy cEnumerator_variableMap::current_mTypeProxy (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_mTypeProxy ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_variableMap::current_mCppName (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_mCppName ;
}

//-----------------------------------------------------------------------------*

GALGAS_string cEnumerator_variableMap::current_mNameForCheckingFormalParameterUsing (LOCATION_ARGS) const {
  const cMapElement_variableMap * p = (const cMapElement_variableMap *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cMapElement_variableMap) ;
  return p->mAttribute_mNameForCheckingFormalParameterUsing ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                              @variableMap type                              *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_variableMap ("variableMap",
                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_variableMap::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_variableMap ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_variableMap::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_variableMap (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_variableMap GALGAS_variableMap::extractObject (const GALGAS_object & inObject,
                                                      C_Compiler * inCompiler
                                                      COMMA_LOCATION_ARGS) {
  GALGAS_variableMap result ;
  const GALGAS_variableMap * p = (const GALGAS_variableMap *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_variableMap *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("variableMap", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                       Routine 'checkAssignmentTypes'                        *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkAssignmentTypes (const GALGAS_unifiedTypeMapProxy constinArgument_inTargetType,
                                   const GALGAS_unifiedTypeMapProxy constinArgument_inSourceType,
                                   const GALGAS_location constinArgument_inErrorLocation,
                                   C_Compiler * inCompiler
                                   COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_unifiedTypeMapProxy var_sourceType = constinArgument_inSourceType ;
  GALGAS_bool var_ok = GALGAS_bool (kIsEqual, constinArgument_inTargetType.objectCompare (constinArgument_inSourceType)) ;
  if (GALGAS_uint::constructor_max (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).isValid ()) {
    uint32_t variant_26985 = GALGAS_uint::constructor_max (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).uintValue () ;
    bool loop_26985 = true ;
    while (loop_26985) {
      loop_26985 = var_ok.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).operator_and (var_sourceType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).isValid () ;
      if (loop_26985) {
        loop_26985 = var_ok.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).operator_and (var_sourceType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)).boolValue () ;
      }
      if (loop_26985 && (0 == variant_26985)) {
        loop_26985 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 343)) ;
      }
      if (loop_26985) {
        variant_26985 -- ;
        var_sourceType = var_sourceType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 344)) ;
        var_ok = GALGAS_bool (kIsEqual, constinArgument_inTargetType.objectCompare (var_sourceType)) ;
      }
    }
  }
  const enumGalgasBool test_0 = var_ok.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 347)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("target object type is '@").operator_concat (constinArgument_inTargetType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 348))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 348)).operator_concat (GALGAS_string ("' and cannot be assigned from an '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 348)).operator_concat (constinArgument_inSourceType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 348))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 348)).operator_concat (GALGAS_string ("' object")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 348))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 348)) ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//                   Routine 'analyzeConstructorInvocation'                    *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_analyzeConstructorInvocation (const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                           GALGAS_variableMap & ioArgument_ioVariableMap,
                                           const GALGAS_lstring constinArgument_inTypeName,
                                           const GALGAS_lstring constinArgument_inConstructorName,
                                           const GALGAS_semanticExpressionListAST constinArgument_inConstuctorEffectiveParameterExpressions,
                                           GALGAS_unifiedTypeMapProxy & outArgument_outReturnedType,
                                           GALGAS_unifiedTypeMapProxy & outArgument_outConstructorType,
                                           GALGAS_semanticExpressionListForGeneration & outArgument_outConstructorEffectiveParameterList,
                                           GALGAS_bool & outArgument_outHasCompilerArgument,
                                           C_Compiler * inCompiler
                                           COMMA_UNUSED_LOCATION_ARGS) {
  outArgument_outReturnedType.drop () ; // Release 'out' argument
  outArgument_outConstructorType.drop () ; // Release 'out' argument
  outArgument_outConstructorEffectiveParameterList.drop () ; // Release 'out' argument
  outArgument_outHasCompilerArgument.drop () ; // Release 'out' argument
  outArgument_outConstructorType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, constinArgument_inTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 549)) ;
  GALGAS_constructorMap var_constructorMap = outArgument_outConstructorType.reader_mConstructorMap (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 551)) ;
  GALGAS_unifiedTypeMapProxyAndParameterList var_constructorFormalArgumentTypeList ;
  const cMapElement_constructorMap * objectArray_35977 = (const cMapElement_constructorMap *) var_constructorMap.readAccessForWithInstruction_hasKey (constinArgument_inConstructorName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 554))) ;
  if (NULL != objectArray_35977) {
      macroValidSharedObject (objectArray_35977, cMapElement_constructorMap) ;
    var_constructorFormalArgumentTypeList = objectArray_35977->mAttribute_mArgumentTypeList ;
    outArgument_outHasCompilerArgument = objectArray_35977->mAttribute_mHasCompilerArgument ;
    outArgument_outReturnedType = objectArray_35977->mAttribute_mReturnedType ;
  }else{
    const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_constructorMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 559)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_location location_1 (constinArgument_inConstructorName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, GALGAS_string ("the '@").operator_concat (constinArgument_inTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 561))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 561)).operator_concat (GALGAS_string ("' type does not define any constructor")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 561))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 560)) ;
      var_constructorFormalArgumentTypeList.drop () ; // Release error dropped variable
      outArgument_outHasCompilerArgument.drop () ; // Release error dropped variable
      outArgument_outReturnedType.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_0) {
      GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
      cEnumerator_constructorMap enumerator_36485 (var_constructorMap, kEnumeration_up) ;
      while (enumerator_36485.hasCurrentObject ()) {
        var_s.dotAssign_operation (GALGAS_string ("\n"
          "  - ").operator_concat (enumerator_36485.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 567))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 567))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 567)) ;
        cEnumerator_unifiedTypeMapProxyAndParameterList enumerator_36553 (enumerator_36485.current_mArgumentTypeList (HERE), kEnumeration_up) ;
        while (enumerator_36553.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string (" \?@").operator_concat (enumerator_36553.current_mType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 569))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 569))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 569)) ;
          enumerator_36553.gotoNextObject () ;
        }
        var_s.dotAssign_operation (GALGAS_string (" -> @").operator_concat (enumerator_36485.current_mReturnedType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 571))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 571))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 571)) ;
        enumerator_36485.gotoNextObject () ;
      }
      GALGAS_string temp_2 ;
      const enumGalgasBool test_3 = GALGAS_bool (kIsStrictSup, var_constructorMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 575)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
      if (kBoolTrue == test_3) {
        temp_2 = GALGAS_string ("available constructors are") ;
      }else if (kBoolFalse == test_3) {
        temp_2 = GALGAS_string ("available constructor is") ;
      }
      GALGAS_location location_4 (constinArgument_inConstructorName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_4, GALGAS_string ("the '@").operator_concat (constinArgument_inTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 574))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 574)).operator_concat (GALGAS_string ("' type does not define the '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 574)).operator_concat (constinArgument_inConstructorName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 574))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 574)).operator_concat (GALGAS_string ("' constructor; ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 574)).operator_concat (temp_2  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 574)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 575)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 576))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 573)) ;
      var_constructorFormalArgumentTypeList.drop () ; // Release error dropped variable
      outArgument_outHasCompilerArgument.drop () ; // Release error dropped variable
      outArgument_outReturnedType.drop () ; // Release error dropped variable
    }
  }
  const enumGalgasBool test_5 = GALGAS_bool (kIsNotEqual, constinArgument_inConstuctorEffectiveParameterExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 582)).objectCompare (var_constructorFormalArgumentTypeList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 582)))).boolEnum () ;
  if (kBoolTrue == test_5) {
    GALGAS_location location_6 (constinArgument_inConstructorName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_6, GALGAS_string ("calling the '").operator_concat (constinArgument_inConstructorName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 584))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 584)).operator_concat (GALGAS_string ("' constructor of '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 584)).operator_concat (constinArgument_inTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 584))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 584)).operator_concat (GALGAS_string ("' requires ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 584)).operator_concat (var_constructorFormalArgumentTypeList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 585)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 585))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 584)).operator_concat (GALGAS_string (" parameter(s), while this call has ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 585)).operator_concat (constinArgument_inConstuctorEffectiveParameterExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 586)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 586))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 585)).operator_concat (GALGAS_string (" parameter(s)")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 586))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 583)) ;
  }
  outArgument_outConstructorEffectiveParameterList = GALGAS_semanticExpressionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 588)) ;
  cEnumerator_semanticExpressionListAST enumerator_37647 (constinArgument_inConstuctorEffectiveParameterExpressions, kEnumeration_up) ;
  cEnumerator_unifiedTypeMapProxyAndParameterList enumerator_37682 (var_constructorFormalArgumentTypeList, kEnumeration_up) ;
  while (enumerator_37647.hasCurrentObject () && enumerator_37682.hasCurrentObject ()) {
    GALGAS_semanticExpressionForGeneration var_exp ;
    callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) enumerator_37647.current_mExpression (HERE).ptr (), enumerator_37682.current_mType (HERE), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_exp, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 591)) ;
    {
    routine_checkAssignmentTypes (enumerator_37682.current_mType (HERE), var_exp.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 592)), enumerator_37647.current_mEndOfExpressionLocation (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 592)) ;
    }
    outArgument_outConstructorEffectiveParameterList.addAssign_operation (var_exp  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 593)) ;
    enumerator_37647.gotoNextObject () ;
    enumerator_37682.gotoNextObject () ;
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//             Function 'checkReaderImplementationInSuperClasses'              *
//                                                                             *
//-----------------------------------------------------------------------------*

GALGAS_string function_checkReaderImplementationInSuperClasses (const GALGAS_lstring & constinArgument_inReaderName,
                                                                const GALGAS_unifiedTypeMapProxy & constinArgument_inSuperClass,
                                                                C_Compiler * inCompiler
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_string result_outResult ; // Returned variable
  const enumGalgasBool test_0 = constinArgument_inSuperClass.reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 770)).boolEnum () ;
  if (kBoolTrue == test_0) {
    result_outResult = GALGAS_string::makeEmptyString () ;
  }else if (kBoolFalse == test_0) {
    GALGAS_methodQualifier var_qualifier ;
    GALGAS_methodKind joker_45071_5 ; // Joker input parameter
    GALGAS_unifiedTypeMapProxyAndParameterList joker_45071_4 ; // Joker input parameter
    GALGAS_location joker_45071_3 ; // Joker input parameter
    GALGAS_bool joker_45071_2 ; // Joker input parameter
    GALGAS_unifiedTypeMapProxy joker_45071_1 ; // Joker input parameter
    GALGAS_string joker_45086_0 ; // Joker input parameter
    constinArgument_inSuperClass.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 774)).method_searchKey (constinArgument_inReaderName, joker_45071_5, joker_45071_4, joker_45071_3, joker_45071_2, joker_45071_1, var_qualifier, joker_45086_0, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 774)) ;
    if (var_qualifier.isValid ()) {
      switch (var_qualifier.enumValue ()) {
      case GALGAS_methodQualifier::kNotBuilt:
        break ;
      case GALGAS_methodQualifier::kEnum_isAbstract: {
        result_outResult = GALGAS_string::makeEmptyString () ;
        } break ;
      case GALGAS_methodQualifier::kEnum_isBasic: case GALGAS_methodQualifier::kEnum_isBasicFinal: case GALGAS_methodQualifier::kEnum_isOverriding: {
        result_outResult = constinArgument_inSuperClass.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 779)) ;
        } break ;
      case GALGAS_methodQualifier::kEnum_isInherited: case GALGAS_methodQualifier::kEnum_isOverridingAbstract: {
        result_outResult = function_checkReaderImplementationInSuperClasses (constinArgument_inReaderName, constinArgument_inSuperClass.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 781)), inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 781)) ;
        } break ;
      }
    }
  }
//---
  return result_outResult ;
}


//-----------------------------------------------------------------------------*
//  Function introspection                                                     *
//-----------------------------------------------------------------------------*

static const C_galgas_type_descriptor * functionArgs_checkReaderImplementationInSuperClasses [3] = {
  & kTypeDescriptor_GALGAS_lstring,
  & kTypeDescriptor_GALGAS_unifiedTypeMapProxy,
  NULL
} ;

//-----------------------------------------------------------------------------*

static GALGAS_object functionWithGenericHeader_checkReaderImplementationInSuperClasses (C_Compiler * inCompiler,
                                                                                        const cObjectArray & inEffectiveParameterArray,
                                                                                        const GALGAS_location & /* §§ inErrorLocation */
                                                                                        COMMA_LOCATION_ARGS) {
  const GALGAS_lstring operand0 = GALGAS_lstring::extractObject (inEffectiveParameterArray.objectAtIndex (0 COMMA_HERE),
                                                                 inCompiler
                                                                 COMMA_THERE) ;
  const GALGAS_unifiedTypeMapProxy operand1 = GALGAS_unifiedTypeMapProxy::extractObject (inEffectiveParameterArray.objectAtIndex (1 COMMA_HERE),
                                                                                         inCompiler
                                                                                         COMMA_THERE) ;
  return function_checkReaderImplementationInSuperClasses (operand0,
                                                           operand1,
                                                           inCompiler
                                                           COMMA_THERE).reader_object (THERE) ;
}

//-----------------------------------------------------------------------------*

C_galgas_function_descriptor functionDescriptor_checkReaderImplementationInSuperClasses ("checkReaderImplementationInSuperClasses",
                                                                                         functionWithGenericHeader_checkReaderImplementationInSuperClasses,
                                                                                         & kTypeDescriptor_GALGAS_string,
                                                                                         2,
                                                                                         functionArgs_checkReaderImplementationInSuperClasses) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                        Routine 'checkDiadicOperator'                        *
//                                                                             *
//-----------------------------------------------------------------------------*

void routine_checkDiadicOperator (const GALGAS_unifiedTypeMapProxy constinArgument_inLeftType,
                                  const GALGAS_unifiedTypeMapProxy constinArgument_inRightType,
                                  const GALGAS_bool constinArgument_inOperandIsHandled,
                                  const GALGAS_string constinArgument_inOperatorNameForErrorMessage,
                                  const GALGAS_location constinArgument_inErrorLocation,
                                  GALGAS_semanticExpressionForGeneration & ioArgument_ioRightExpression,
                                  C_Compiler * inCompiler
                                  COMMA_UNUSED_LOCATION_ARGS) {
  const enumGalgasBool test_0 = constinArgument_inOperandIsHandled.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 878)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("left operand type is '@").operator_concat (constinArgument_inLeftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880)).operator_concat (GALGAS_string ("' and does not accept '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880)).operator_concat (constinArgument_inOperatorNameForErrorMessage  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880)).operator_concat (GALGAS_string ("' operator (right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880)).operator_concat (constinArgument_inRightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880)).operator_concat (GALGAS_string (")")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 880))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 879)) ;
  }else if (kBoolFalse == test_0) {
    GALGAS_unifiedTypeMapProxy var_rightType = constinArgument_inRightType ;
    GALGAS_bool var_ok = GALGAS_bool (kIsEqual, constinArgument_inLeftType.objectCompare (var_rightType)) ;
    if (GALGAS_uint::constructor_max (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).isValid ()) {
      uint32_t variant_49281 = GALGAS_uint::constructor_max (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).uintValue () ;
      bool loop_49281 = true ;
      while (loop_49281) {
        loop_49281 = var_ok.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).operator_and (var_rightType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).isValid () ;
        if (loop_49281) {
          loop_49281 = var_ok.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).operator_and (var_rightType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)).boolValue () ;
        }
        if (loop_49281 && (0 == variant_49281)) {
          loop_49281 = false ;
          inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 885)) ;
        }
        if (loop_49281) {
          variant_49281 -- ;
          var_rightType = var_rightType.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 886)) ;
          var_ok = GALGAS_bool (kIsEqual, constinArgument_inLeftType.objectCompare (var_rightType)) ;
        }
      }
    }
    const enumGalgasBool test_1 = var_ok.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 890)).boolEnum () ;
    if (kBoolTrue == test_1) {
      const enumGalgasBool test_2 = constinArgument_inRightType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 892)).reader_hasKey (constinArgument_inLeftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 892)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 892)).boolEnum () ;
      if (kBoolTrue == test_2) {
        GALGAS_bool var_hasCompilerArgument ;
        GALGAS_unifiedTypeMapProxy var_returnedType ;
        GALGAS_methodKind var_kind ;
        GALGAS_unifiedTypeMapProxyAndParameterList var_argumentTypeList ;
        GALGAS_location joker_49860_0 ; // Joker input parameter
        GALGAS_methodQualifier joker_49928_2 ; // Joker input parameter
        GALGAS_string joker_49928_1 ; // Joker input parameter
        constinArgument_inRightType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 896)).method_searchKey (constinArgument_inLeftType.reader_lkey (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 897)), var_kind, var_argumentTypeList, joker_49860_0, var_hasCompilerArgument, var_returnedType, joker_49928_2, joker_49928_1, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 896)) ;
        var_ok = GALGAS_bool (kIsEqual, var_argumentTypeList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 905)).objectCompare (GALGAS_uint ((uint32_t) 0U))).operator_and (GALGAS_bool (kIsEqual, var_returnedType.objectCompare (constinArgument_inLeftType)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 905)) ;
        GALGAS_semanticExpressionForGeneration var_conversionExpression = GALGAS_readerCallExpressionForGeneration::constructor_new (constinArgument_inLeftType, constinArgument_inErrorLocation, var_kind, ioArgument_ioRightExpression, GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 912)), constinArgument_inLeftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 913)), GALGAS_semanticExpressionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 914)), var_hasCompilerArgument  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 907)) ;
        ioArgument_ioRightExpression = var_conversionExpression ;
      }
      const enumGalgasBool test_3 = var_ok.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 919)).boolEnum () ;
      if (kBoolTrue == test_3) {
        inCompiler->emitSemanticError (constinArgument_inErrorLocation, GALGAS_string ("left operand type of '").operator_concat (constinArgument_inOperatorNameForErrorMessage  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 921)).operator_concat (GALGAS_string ("' operator is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 921)).operator_concat (constinArgument_inLeftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 921))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 921)).operator_concat (GALGAS_string ("', right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 921)).operator_concat (constinArgument_inRightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 922))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 922)).operator_concat (GALGAS_string ("', it should be either the same, either inherits from left operand type, either have a '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 922)).operator_concat (constinArgument_inLeftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 924))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 923)).operator_concat (GALGAS_string ("' reader without argument that returns a '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 924)).operator_concat (constinArgument_inLeftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 924))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 924)).operator_concat (GALGAS_string ("' object")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 924))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 920)) ;
      }
    }
  }
}


//-----------------------------------------------------------------------------*
//                                                                             *
//    Class for element of '@collectionValueElementListForGeneration' list     *
//                                                                             *
//-----------------------------------------------------------------------------*

class cCollectionElement_collectionValueElementListForGeneration : public cCollectionElement {
  public : GALGAS_collectionValueElementListForGeneration_2E_element mObject ;

//--- Constructor
  public : cCollectionElement_collectionValueElementListForGeneration (const GALGAS_abstractCollectionValueElementForGeneration & in_mElement
                                                                       COMMA_LOCATION_ARGS) ;

//--- Virtual method for comparing elements
  public : virtual typeComparisonResult compare (const cCollectionElement * inOperand) const ;

//--- Virtual method that checks that all attributes are valid
  public : virtual bool isValid (void) const ;

//--- Virtual method that returns a copy of current object
  public : virtual cCollectionElement * copy (void) ;

//--- Description
 public : virtual void description (C_String & ioString, const int32_t inIndentation) const ;
} ;

//-----------------------------------------------------------------------------*

cCollectionElement_collectionValueElementListForGeneration::cCollectionElement_collectionValueElementListForGeneration (const GALGAS_abstractCollectionValueElementForGeneration & in_mElement
                                                                                                                        COMMA_LOCATION_ARGS) :
cCollectionElement (THERE),
mObject (in_mElement) {
}

//-----------------------------------------------------------------------------*

bool cCollectionElement_collectionValueElementListForGeneration::isValid (void) const {
  return mObject.isValid () ;
}

//-----------------------------------------------------------------------------*

cCollectionElement * cCollectionElement_collectionValueElementListForGeneration::copy (void) {
  cCollectionElement * result = NULL ;
  macroMyNew (result, cCollectionElement_collectionValueElementListForGeneration (mObject.mAttribute_mElement COMMA_HERE)) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void cCollectionElement_collectionValueElementListForGeneration::description (C_String & ioString, const int32_t inIndentation) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "mElement" ":" ;
  mObject.mAttribute_mElement.description (ioString, inIndentation) ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult cCollectionElement_collectionValueElementListForGeneration::compare (const cCollectionElement * inOperand) const {
  cCollectionElement_collectionValueElementListForGeneration * operand = (cCollectionElement_collectionValueElementListForGeneration *) inOperand ;
  macroValidSharedObject (operand, cCollectionElement_collectionValueElementListForGeneration) ;
  return mObject.objectCompare (operand->mObject) ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration::GALGAS_collectionValueElementListForGeneration (void) :
AC_GALGAS_list () {
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration::GALGAS_collectionValueElementListForGeneration (cSharedList * inSharedListPtr) :
AC_GALGAS_list (inSharedListPtr) {
  if (NULL == inSharedListPtr) {
    createNewEmptyList (HERE) ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_collectionValueElementListForGeneration::constructor_emptyList (LOCATION_ARGS) {
  GALGAS_collectionValueElementListForGeneration result ;
  result.createNewEmptyList (THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_collectionValueElementListForGeneration::constructor_listWithValue (const GALGAS_abstractCollectionValueElementForGeneration & inOperand0
                                                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_collectionValueElementListForGeneration result ;
  if (inOperand0.isValid ()) {
    result.createNewEmptyList (THERE) ;
    capCollectionElement attributes ;
    GALGAS_collectionValueElementListForGeneration::makeAttributesFromObjects (attributes, inOperand0 COMMA_THERE) ;
    result.addObject (attributes) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::makeAttributesFromObjects (capCollectionElement & outAttributes,
                                                                                const GALGAS_abstractCollectionValueElementForGeneration & in_mElement
                                                                                COMMA_LOCATION_ARGS) {
  cCollectionElement_collectionValueElementListForGeneration * p = NULL ;
  macroMyNew (p, cCollectionElement_collectionValueElementListForGeneration (in_mElement COMMA_THERE)) ;
  outAttributes.setPointer (p) ;
  macroDetachSharedObject (p) ;
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::addAssign_operation (const GALGAS_abstractCollectionValueElementForGeneration & inOperand0
                                                                          COMMA_LOCATION_ARGS) {
  if (isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_collectionValueElementListForGeneration (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObject (attributes) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::modifier_insertAtIndex (const GALGAS_abstractCollectionValueElementForGeneration inOperand0,
                                                                             const GALGAS_uint inInsertionIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inInsertionIndex.isValid () && inOperand0.isValid ()) {
    cCollectionElement * p = NULL ;
    macroMyNew (p, cCollectionElement_collectionValueElementListForGeneration (inOperand0 COMMA_THERE)) ;
    capCollectionElement attributes ;
    attributes.setPointer (p) ;
    macroDetachSharedObject (p) ;
    addObjectAtIndex (attributes, inInsertionIndex.uintValue (), inCompiler COMMA_THERE) ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::modifier_removeAtIndex (GALGAS_abstractCollectionValueElementForGeneration & outOperand0,
                                                                             const GALGAS_uint inRemoveIndex,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_LOCATION_ARGS) {
  if (isValid () && inRemoveIndex.isValid ()) {
    capCollectionElement attributes ;
    removeObjectAtIndex (attributes, inRemoveIndex.uintValue (), inCompiler COMMA_THERE) ;
    cCollectionElement_collectionValueElementListForGeneration * p = (cCollectionElement_collectionValueElementListForGeneration *) attributes.ptr () ;
    if (NULL == p) {
      outOperand0.drop () ;
    }else{
      macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
      outOperand0 = p->mObject.mAttribute_mElement ;
    }
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::modifier_popFirst (GALGAS_abstractCollectionValueElementForGeneration & outOperand0,
                                                                        C_Compiler * inCompiler
                                                                        COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeFirstObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_collectionValueElementListForGeneration * p = (cCollectionElement_collectionValueElementListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mElement ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::modifier_popLast (GALGAS_abstractCollectionValueElementForGeneration & outOperand0,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_LOCATION_ARGS) {
  capCollectionElement attributes ;
  removeLastObject (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_collectionValueElementListForGeneration * p = (cCollectionElement_collectionValueElementListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mElement ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::method_first (GALGAS_abstractCollectionValueElementForGeneration & outOperand0,
                                                                   C_Compiler * inCompiler
                                                                   COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readFirst (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_collectionValueElementListForGeneration * p = (cCollectionElement_collectionValueElementListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mElement ;
  }
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::method_last (GALGAS_abstractCollectionValueElementForGeneration & outOperand0,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes ;
  readLast (attributes, inCompiler COMMA_THERE) ;
  cCollectionElement_collectionValueElementListForGeneration * p = (cCollectionElement_collectionValueElementListForGeneration *) attributes.ptr () ;
  if (NULL == p) {
    outOperand0.drop () ;
  }else{
    macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
    outOperand0 = p->mObject.mAttribute_mElement ;
  }
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_collectionValueElementListForGeneration::operator_concat (const GALGAS_collectionValueElementListForGeneration & inOperand
                                                                                                                COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_collectionValueElementListForGeneration result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_collectionValueElementListForGeneration::add_operation (const GALGAS_collectionValueElementListForGeneration & inOperand,
                                                                                                              C_Compiler * /* inCompiler */
                                                                                                              COMMA_UNUSED_LOCATION_ARGS) const {
  GALGAS_collectionValueElementListForGeneration result ;
  if (isValid () && inOperand.isValid ()) {
    result = *this ;
    result.appendList (inOperand) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_collectionValueElementListForGeneration::reader_subListWithRange (const GALGAS_range & inRange,
                                                                                                                        C_Compiler * inCompiler
                                                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_collectionValueElementListForGeneration result = GALGAS_collectionValueElementListForGeneration::constructor_emptyList (THERE) ;
  subListWithRange (result, inRange, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_collectionValueElementListForGeneration::reader_subListFromIndex (const GALGAS_uint & inIndex,
                                                                                                                        C_Compiler * inCompiler
                                                                                                                        COMMA_LOCATION_ARGS) const {
  GALGAS_collectionValueElementListForGeneration result = GALGAS_collectionValueElementListForGeneration::constructor_emptyList (THERE) ;
  subListFromIndex (result, inIndex, inCompiler COMMA_THERE) ;
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration::dotAssign_operation (const GALGAS_collectionValueElementListForGeneration inOperand
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  appendList (inOperand) ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractCollectionValueElementForGeneration GALGAS_collectionValueElementListForGeneration::reader_mElementAtIndex (const GALGAS_uint & inIndex,
                                                                                                                           C_Compiler * inCompiler
                                                                                                                           COMMA_LOCATION_ARGS) const {
  capCollectionElement attributes = readObjectAtIndex (inIndex, inCompiler COMMA_THERE) ;
  cCollectionElement_collectionValueElementListForGeneration * p = (cCollectionElement_collectionValueElementListForGeneration *) attributes.ptr () ;
  GALGAS_abstractCollectionValueElementForGeneration result ;
  if (NULL != p) {
    macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
    result = p->mObject.mAttribute_mElement ;
  }
  return result ;
}



//-----------------------------------------------------------------------------*

cEnumerator_collectionValueElementListForGeneration::cEnumerator_collectionValueElementListForGeneration (const GALGAS_collectionValueElementListForGeneration & inEnumeratedObject,
                                                                                                          const typeEnumerationOrder inOrder) :
cGenericAbstractEnumerator () {
  inEnumeratedObject.populateEnumerationArray (mEnumerationArray, inOrder) ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration_2E_element cEnumerator_collectionValueElementListForGeneration::current (LOCATION_ARGS) const {
  const cCollectionElement_collectionValueElementListForGeneration * p = (const cCollectionElement_collectionValueElementListForGeneration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
  return p->mObject ;
}


//-----------------------------------------------------------------------------*

GALGAS_abstractCollectionValueElementForGeneration cEnumerator_collectionValueElementListForGeneration::current_mElement (LOCATION_ARGS) const {
  const cCollectionElement_collectionValueElementListForGeneration * p = (const cCollectionElement_collectionValueElementListForGeneration *) currentObjectPtr (THERE) ;
  macroValidSharedObject (p, cCollectionElement_collectionValueElementListForGeneration) ;
  return p->mObject.mAttribute_mElement ;
}




//-----------------------------------------------------------------------------*
//                                                                             *
//                @collectionValueElementListForGeneration type                *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_collectionValueElementListForGeneration ("collectionValueElementListForGeneration",
                                                                NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_collectionValueElementListForGeneration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_collectionValueElementListForGeneration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_collectionValueElementListForGeneration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_collectionValueElementListForGeneration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_collectionValueElementListForGeneration::extractObject (const GALGAS_object & inObject,
                                                                                                              C_Compiler * inCompiler
                                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_collectionValueElementListForGeneration result ;
  const GALGAS_collectionValueElementListForGeneration * p = (const GALGAS_collectionValueElementListForGeneration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_collectionValueElementListForGeneration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("collectionValueElementListForGeneration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*



typeComparisonResult GALGAS_abstractCollectionValueElementForGeneration::objectCompare (const GALGAS_abstractCollectionValueElementForGeneration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractCollectionValueElementForGeneration::GALGAS_abstractCollectionValueElementForGeneration (void) :
AC_GALGAS_class () {
}

//-----------------------------------------------------------------------------*

GALGAS_abstractCollectionValueElementForGeneration::GALGAS_abstractCollectionValueElementForGeneration (const cPtr_abstractCollectionValueElementForGeneration * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_abstractCollectionValueElementForGeneration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_location GALGAS_abstractCollectionValueElementForGeneration::reader_mExpressionLocation (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_abstractCollectionValueElementForGeneration * p = (const cPtr_abstractCollectionValueElementForGeneration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_abstractCollectionValueElementForGeneration) ;
    result = p->mAttribute_mExpressionLocation ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_location cPtr_abstractCollectionValueElementForGeneration::reader_mExpressionLocation (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mExpressionLocation ;
}

//-----------------------------------------------------------------------------*
//    Pointer class for @abstractCollectionValueElementForGeneration class     *
//-----------------------------------------------------------------------------*

cPtr_abstractCollectionValueElementForGeneration::cPtr_abstractCollectionValueElementForGeneration (const GALGAS_location & in_mExpressionLocation
                                                                                                    COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_mExpressionLocation (in_mExpressionLocation) {
}



//-----------------------------------------------------------------------------*
//                                                                             *
//              @abstractCollectionValueElementForGeneration type              *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_abstractCollectionValueElementForGeneration ("abstractCollectionValueElementForGeneration",
                                                                    NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_abstractCollectionValueElementForGeneration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_abstractCollectionValueElementForGeneration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_abstractCollectionValueElementForGeneration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_abstractCollectionValueElementForGeneration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractCollectionValueElementForGeneration GALGAS_abstractCollectionValueElementForGeneration::extractObject (const GALGAS_object & inObject,
                                                                                                                      C_Compiler * inCompiler
                                                                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_abstractCollectionValueElementForGeneration result ;
  const GALGAS_abstractCollectionValueElementForGeneration * p = (const GALGAS_abstractCollectionValueElementForGeneration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_abstractCollectionValueElementForGeneration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("abstractCollectionValueElementForGeneration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_expressionCollectionValueForGeneration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_expressionCollectionValueForGeneration * p = (const cPtr_expressionCollectionValueForGeneration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_expressionCollectionValueForGeneration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mExpressionLocation.objectCompare (p->mAttribute_mExpressionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mExpression.objectCompare (p->mAttribute_mExpression) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_expressionCollectionValueForGeneration::objectCompare (const GALGAS_expressionCollectionValueForGeneration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionValueForGeneration::GALGAS_expressionCollectionValueForGeneration (void) :
GALGAS_abstractCollectionValueElementForGeneration () {
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionValueForGeneration::GALGAS_expressionCollectionValueForGeneration (const cPtr_expressionCollectionValueForGeneration * inSourcePtr) :
GALGAS_abstractCollectionValueElementForGeneration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_expressionCollectionValueForGeneration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionValueForGeneration GALGAS_expressionCollectionValueForGeneration::constructor_new (const GALGAS_location & inAttribute_mExpressionLocation,
                                                                                                              const GALGAS_semanticExpressionForGeneration & inAttribute_mExpression
                                                                                                              COMMA_LOCATION_ARGS) {
  GALGAS_expressionCollectionValueForGeneration result ;
  if (inAttribute_mExpressionLocation.isValid () && inAttribute_mExpression.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_expressionCollectionValueForGeneration (inAttribute_mExpressionLocation, inAttribute_mExpression COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_expressionCollectionValueForGeneration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_expressionCollectionValueForGeneration * p = (cPtr_expressionCollectionValueForGeneration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expressionCollectionValueForGeneration) ;
    cPtr_expressionCollectionValueForGeneration * r = NULL ;
    macroMyNew (r, cPtr_expressionCollectionValueForGeneration (p->mAttribute_mExpressionLocation, p->mAttribute_mExpression COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_semanticExpressionForGeneration GALGAS_expressionCollectionValueForGeneration::reader_mExpression (UNUSED_LOCATION_ARGS) const {
  GALGAS_semanticExpressionForGeneration result ;
  if (NULL != mObjectPtr) {
    const cPtr_expressionCollectionValueForGeneration * p = (const cPtr_expressionCollectionValueForGeneration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expressionCollectionValueForGeneration) ;
    result = p->mAttribute_mExpression ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_semanticExpressionForGeneration cPtr_expressionCollectionValueForGeneration::reader_mExpression (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mExpression ;
}

//-----------------------------------------------------------------------------*
//       Pointer class for @expressionCollectionValueForGeneration class       *
//-----------------------------------------------------------------------------*

cPtr_expressionCollectionValueForGeneration::cPtr_expressionCollectionValueForGeneration (const GALGAS_location & in_mExpressionLocation,
                                                                                          const GALGAS_semanticExpressionForGeneration & in_mExpression
                                                                                          COMMA_LOCATION_ARGS) :
cPtr_abstractCollectionValueElementForGeneration (in_mExpressionLocation COMMA_THERE),
mAttribute_mExpression (in_mExpression) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_expressionCollectionValueForGeneration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expressionCollectionValueForGeneration ;
}

void cPtr_expressionCollectionValueForGeneration::description (C_String & ioString,
                                                               const int32_t inIndentation) const {
  ioString << "[@expressionCollectionValueForGeneration:" ;
  mAttribute_mExpressionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mExpression.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                @expressionCollectionValueForGeneration type                 *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_expressionCollectionValueForGeneration ("expressionCollectionValueForGeneration",
                                                               & kTypeDescriptor_GALGAS_abstractCollectionValueElementForGeneration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_expressionCollectionValueForGeneration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expressionCollectionValueForGeneration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_expressionCollectionValueForGeneration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_expressionCollectionValueForGeneration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionValueForGeneration GALGAS_expressionCollectionValueForGeneration::extractObject (const GALGAS_object & inObject,
                                                                                                            C_Compiler * inCompiler
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_expressionCollectionValueForGeneration result ;
  const GALGAS_expressionCollectionValueForGeneration * p = (const GALGAS_expressionCollectionValueForGeneration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_expressionCollectionValueForGeneration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("expressionCollectionValueForGeneration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_expressionListCollectionForGeneration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_expressionListCollectionForGeneration * p = (const cPtr_expressionListCollectionForGeneration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_expressionListCollectionForGeneration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mExpressionLocation.objectCompare (p->mAttribute_mExpressionLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mExpressionList.objectCompare (p->mAttribute_mExpressionList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_expressionListCollectionForGeneration::objectCompare (const GALGAS_expressionListCollectionForGeneration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionListCollectionForGeneration::GALGAS_expressionListCollectionForGeneration (void) :
GALGAS_abstractCollectionValueElementForGeneration () {
}

//-----------------------------------------------------------------------------*

GALGAS_expressionListCollectionForGeneration GALGAS_expressionListCollectionForGeneration::constructor_default (LOCATION_ARGS) {
  return GALGAS_expressionListCollectionForGeneration::constructor_new (GALGAS_location::constructor_nowhere (HERE),
                                                                        GALGAS_semanticExpressionListForGeneration::constructor_emptyList (HERE)
                                                                        COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionListCollectionForGeneration::GALGAS_expressionListCollectionForGeneration (const cPtr_expressionListCollectionForGeneration * inSourcePtr) :
GALGAS_abstractCollectionValueElementForGeneration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_expressionListCollectionForGeneration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionListCollectionForGeneration GALGAS_expressionListCollectionForGeneration::constructor_new (const GALGAS_location & inAttribute_mExpressionLocation,
                                                                                                            const GALGAS_semanticExpressionListForGeneration & inAttribute_mExpressionList
                                                                                                            COMMA_LOCATION_ARGS) {
  GALGAS_expressionListCollectionForGeneration result ;
  if (inAttribute_mExpressionLocation.isValid () && inAttribute_mExpressionList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_expressionListCollectionForGeneration (inAttribute_mExpressionLocation, inAttribute_mExpressionList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_expressionListCollectionForGeneration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_expressionListCollectionForGeneration * p = (cPtr_expressionListCollectionForGeneration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expressionListCollectionForGeneration) ;
    cPtr_expressionListCollectionForGeneration * r = NULL ;
    macroMyNew (r, cPtr_expressionListCollectionForGeneration (p->mAttribute_mExpressionLocation, p->mAttribute_mExpressionList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_semanticExpressionListForGeneration GALGAS_expressionListCollectionForGeneration::reader_mExpressionList (UNUSED_LOCATION_ARGS) const {
  GALGAS_semanticExpressionListForGeneration result ;
  if (NULL != mObjectPtr) {
    const cPtr_expressionListCollectionForGeneration * p = (const cPtr_expressionListCollectionForGeneration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expressionListCollectionForGeneration) ;
    result = p->mAttribute_mExpressionList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_semanticExpressionListForGeneration cPtr_expressionListCollectionForGeneration::reader_mExpressionList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mExpressionList ;
}

//-----------------------------------------------------------------------------*
//       Pointer class for @expressionListCollectionForGeneration class        *
//-----------------------------------------------------------------------------*

cPtr_expressionListCollectionForGeneration::cPtr_expressionListCollectionForGeneration (const GALGAS_location & in_mExpressionLocation,
                                                                                        const GALGAS_semanticExpressionListForGeneration & in_mExpressionList
                                                                                        COMMA_LOCATION_ARGS) :
cPtr_abstractCollectionValueElementForGeneration (in_mExpressionLocation COMMA_THERE),
mAttribute_mExpressionList (in_mExpressionList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_expressionListCollectionForGeneration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expressionListCollectionForGeneration ;
}

void cPtr_expressionListCollectionForGeneration::description (C_String & ioString,
                                                              const int32_t inIndentation) const {
  ioString << "[@expressionListCollectionForGeneration:" ;
  mAttribute_mExpressionLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mExpressionList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                 @expressionListCollectionForGeneration type                 *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_expressionListCollectionForGeneration ("expressionListCollectionForGeneration",
                                                              & kTypeDescriptor_GALGAS_abstractCollectionValueElementForGeneration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_expressionListCollectionForGeneration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expressionListCollectionForGeneration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_expressionListCollectionForGeneration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_expressionListCollectionForGeneration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionListCollectionForGeneration GALGAS_expressionListCollectionForGeneration::extractObject (const GALGAS_object & inObject,
                                                                                                          C_Compiler * inCompiler
                                                                                                          COMMA_LOCATION_ARGS) {
  GALGAS_expressionListCollectionForGeneration result ;
  const GALGAS_expressionListCollectionForGeneration * p = (const GALGAS_expressionListCollectionForGeneration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_expressionListCollectionForGeneration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("expressionListCollectionForGeneration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//   Object comparison                                                         *
//-----------------------------------------------------------------------------*

typeComparisonResult cPtr_expressionCollectionForGeneration::dynamicObjectCompare (const acPtr_class * inOperandPtr) const {
  typeComparisonResult result = kOperandEqual ;
  const cPtr_expressionCollectionForGeneration * p = (const cPtr_expressionCollectionForGeneration *) inOperandPtr ;
  macroValidSharedObject (p, cPtr_expressionCollectionForGeneration) ;
  if (kOperandEqual == result) {
    result = mAttribute_mType.objectCompare (p->mAttribute_mType) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mLocation.objectCompare (p->mAttribute_mLocation) ;
  }
  if (kOperandEqual == result) {
    result = mAttribute_mElementList.objectCompare (p->mAttribute_mElementList) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*


typeComparisonResult GALGAS_expressionCollectionForGeneration::objectCompare (const GALGAS_expressionCollectionForGeneration & inOperand) const {
  typeComparisonResult result = kOperandNotValid ;
  if (isValid () && inOperand.isValid ()) {
    const int32_t mySlot = mObjectPtr->classDescriptor ()->mSlotID ;
    const int32_t operandSlot = inOperand.mObjectPtr->classDescriptor ()->mSlotID ;
    if (mySlot < operandSlot) {
      result = kFirstOperandLowerThanSecond ;
    }else if (mySlot > operandSlot) {
      result = kFirstOperandGreaterThanSecond ;
    }else{
      result = mObjectPtr->dynamicObjectCompare (inOperand.mObjectPtr) ;
    }
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionForGeneration::GALGAS_expressionCollectionForGeneration (void) :
GALGAS_semanticExpressionForGeneration () {
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionForGeneration GALGAS_expressionCollectionForGeneration::constructor_default (LOCATION_ARGS) {
  return GALGAS_expressionCollectionForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                                                    GALGAS_location::constructor_nowhere (HERE),
                                                                    GALGAS_collectionValueElementListForGeneration::constructor_emptyList (HERE)
                                                                    COMMA_THERE) ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionForGeneration::GALGAS_expressionCollectionForGeneration (const cPtr_expressionCollectionForGeneration * inSourcePtr) :
GALGAS_semanticExpressionForGeneration (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, cPtr_expressionCollectionForGeneration) ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionForGeneration GALGAS_expressionCollectionForGeneration::constructor_new (const GALGAS_unifiedTypeMapProxy & inAttribute_mType,
                                                                                                    const GALGAS_location & inAttribute_mLocation,
                                                                                                    const GALGAS_collectionValueElementListForGeneration & inAttribute_mElementList
                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_expressionCollectionForGeneration result ;
  if (inAttribute_mType.isValid () && inAttribute_mLocation.isValid () && inAttribute_mElementList.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_expressionCollectionForGeneration (inAttribute_mType, inAttribute_mLocation, inAttribute_mElementList COMMA_THERE)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

void GALGAS_expressionCollectionForGeneration::insulate (LOCATION_ARGS) {
  macroMutexLock (gInsulationMutex) ;
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_expressionCollectionForGeneration * p = (cPtr_expressionCollectionForGeneration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expressionCollectionForGeneration) ;
    cPtr_expressionCollectionForGeneration * r = NULL ;
    macroMyNew (r, cPtr_expressionCollectionForGeneration (p->mAttribute_mType, p->mAttribute_mLocation, p->mAttribute_mElementList COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
  macroMutexUnlock (gInsulationMutex) ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration GALGAS_expressionCollectionForGeneration::reader_mElementList (UNUSED_LOCATION_ARGS) const {
  GALGAS_collectionValueElementListForGeneration result ;
  if (NULL != mObjectPtr) {
    const cPtr_expressionCollectionForGeneration * p = (const cPtr_expressionCollectionForGeneration *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_expressionCollectionForGeneration) ;
    result = p->mAttribute_mElementList ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration cPtr_expressionCollectionForGeneration::reader_mElementList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mElementList ;
}

//-----------------------------------------------------------------------------*
//         Pointer class for @expressionCollectionForGeneration class          *
//-----------------------------------------------------------------------------*

cPtr_expressionCollectionForGeneration::cPtr_expressionCollectionForGeneration (const GALGAS_unifiedTypeMapProxy & in_mType,
                                                                                const GALGAS_location & in_mLocation,
                                                                                const GALGAS_collectionValueElementListForGeneration & in_mElementList
                                                                                COMMA_LOCATION_ARGS) :
cPtr_semanticExpressionForGeneration (in_mType, in_mLocation COMMA_THERE),
mAttribute_mElementList (in_mElementList) {
}

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_expressionCollectionForGeneration::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expressionCollectionForGeneration ;
}

void cPtr_expressionCollectionForGeneration::description (C_String & ioString,
                                                          const int32_t inIndentation) const {
  ioString << "[@expressionCollectionForGeneration:" ;
  mAttribute_mType.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mLocation.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mElementList.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                   @expressionCollectionForGeneration type                   *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_expressionCollectionForGeneration ("expressionCollectionForGeneration",
                                                          & kTypeDescriptor_GALGAS_semanticExpressionForGeneration) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_expressionCollectionForGeneration::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_expressionCollectionForGeneration ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_expressionCollectionForGeneration::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_expressionCollectionForGeneration (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_expressionCollectionForGeneration GALGAS_expressionCollectionForGeneration::extractObject (const GALGAS_object & inObject,
                                                                                                  C_Compiler * inCompiler
                                                                                                  COMMA_LOCATION_ARGS) {
  GALGAS_expressionCollectionForGeneration result ;
  const GALGAS_expressionCollectionForGeneration * p = (const GALGAS_expressionCollectionForGeneration *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_expressionCollectionForGeneration *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("expressionCollectionForGeneration", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes::GALGAS_predefinedTypes (void) :
mAttribute_mLocationType (),
mAttribute_mBoolType (),
mAttribute_mCharType (),
mAttribute_mStringType (),
mAttribute_mUIntType (),
mAttribute_mSIntType (),
mAttribute_mUInt_36__34_Type (),
mAttribute_mSInt_36__34_Type (),
mAttribute_mDoubleType (),
mAttribute_mLBoolType (),
mAttribute_mLCharType (),
mAttribute_mLStringType (),
mAttribute_mLUIntType (),
mAttribute_mLSIntType (),
mAttribute_mLUInt_36__34_Type (),
mAttribute_mLSInt_36__34_Type (),
mAttribute_mLDoubleType () {
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes::~ GALGAS_predefinedTypes (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes::GALGAS_predefinedTypes (const GALGAS_unifiedTypeMapProxy & inOperand0,
                                                const GALGAS_unifiedTypeMapProxy & inOperand1,
                                                const GALGAS_unifiedTypeMapProxy & inOperand2,
                                                const GALGAS_unifiedTypeMapProxy & inOperand3,
                                                const GALGAS_unifiedTypeMapProxy & inOperand4,
                                                const GALGAS_unifiedTypeMapProxy & inOperand5,
                                                const GALGAS_unifiedTypeMapProxy & inOperand6,
                                                const GALGAS_unifiedTypeMapProxy & inOperand7,
                                                const GALGAS_unifiedTypeMapProxy & inOperand8,
                                                const GALGAS_unifiedTypeMapProxy & inOperand9,
                                                const GALGAS_unifiedTypeMapProxy & inOperand10,
                                                const GALGAS_unifiedTypeMapProxy & inOperand11,
                                                const GALGAS_unifiedTypeMapProxy & inOperand12,
                                                const GALGAS_unifiedTypeMapProxy & inOperand13,
                                                const GALGAS_unifiedTypeMapProxy & inOperand14,
                                                const GALGAS_unifiedTypeMapProxy & inOperand15,
                                                const GALGAS_unifiedTypeMapProxy & inOperand16) :
mAttribute_mLocationType (inOperand0),
mAttribute_mBoolType (inOperand1),
mAttribute_mCharType (inOperand2),
mAttribute_mStringType (inOperand3),
mAttribute_mUIntType (inOperand4),
mAttribute_mSIntType (inOperand5),
mAttribute_mUInt_36__34_Type (inOperand6),
mAttribute_mSInt_36__34_Type (inOperand7),
mAttribute_mDoubleType (inOperand8),
mAttribute_mLBoolType (inOperand9),
mAttribute_mLCharType (inOperand10),
mAttribute_mLStringType (inOperand11),
mAttribute_mLUIntType (inOperand12),
mAttribute_mLSIntType (inOperand13),
mAttribute_mLUInt_36__34_Type (inOperand14),
mAttribute_mLSInt_36__34_Type (inOperand15),
mAttribute_mLDoubleType (inOperand16) {
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes GALGAS_predefinedTypes::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_predefinedTypes (GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes GALGAS_predefinedTypes::constructor_new (const GALGAS_unifiedTypeMapProxy & inOperand0,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand1,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand2,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand3,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand4,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand5,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand6,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand7,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand8,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand9,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand10,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand11,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand12,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand13,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand14,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand15,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand16 
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_predefinedTypes result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid () && inOperand8.isValid () && inOperand9.isValid () && inOperand10.isValid () && inOperand11.isValid () && inOperand12.isValid () && inOperand13.isValid () && inOperand14.isValid () && inOperand15.isValid () && inOperand16.isValid ()) {
    result = GALGAS_predefinedTypes (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7, inOperand8, inOperand9, inOperand10, inOperand11, inOperand12, inOperand13, inOperand14, inOperand15, inOperand16) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_predefinedTypes::objectCompare (const GALGAS_predefinedTypes & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mLocationType.objectCompare (inOperand.mAttribute_mLocationType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mBoolType.objectCompare (inOperand.mAttribute_mBoolType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mCharType.objectCompare (inOperand.mAttribute_mCharType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mStringType.objectCompare (inOperand.mAttribute_mStringType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mUIntType.objectCompare (inOperand.mAttribute_mUIntType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSIntType.objectCompare (inOperand.mAttribute_mSIntType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mUInt_36__34_Type.objectCompare (inOperand.mAttribute_mUInt_36__34_Type) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSInt_36__34_Type.objectCompare (inOperand.mAttribute_mSInt_36__34_Type) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mDoubleType.objectCompare (inOperand.mAttribute_mDoubleType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLBoolType.objectCompare (inOperand.mAttribute_mLBoolType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLCharType.objectCompare (inOperand.mAttribute_mLCharType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLStringType.objectCompare (inOperand.mAttribute_mLStringType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLUIntType.objectCompare (inOperand.mAttribute_mLUIntType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLSIntType.objectCompare (inOperand.mAttribute_mLSIntType) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLUInt_36__34_Type.objectCompare (inOperand.mAttribute_mLUInt_36__34_Type) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLSInt_36__34_Type.objectCompare (inOperand.mAttribute_mLSInt_36__34_Type) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mLDoubleType.objectCompare (inOperand.mAttribute_mLDoubleType) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_predefinedTypes::isValid (void) const {
  return mAttribute_mLocationType.isValid () && mAttribute_mBoolType.isValid () && mAttribute_mCharType.isValid () && mAttribute_mStringType.isValid () && mAttribute_mUIntType.isValid () && mAttribute_mSIntType.isValid () && mAttribute_mUInt_36__34_Type.isValid () && mAttribute_mSInt_36__34_Type.isValid () && mAttribute_mDoubleType.isValid () && mAttribute_mLBoolType.isValid () && mAttribute_mLCharType.isValid () && mAttribute_mLStringType.isValid () && mAttribute_mLUIntType.isValid () && mAttribute_mLSIntType.isValid () && mAttribute_mLUInt_36__34_Type.isValid () && mAttribute_mLSInt_36__34_Type.isValid () && mAttribute_mLDoubleType.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_predefinedTypes::drop (void) {
  mAttribute_mLocationType.drop () ;
  mAttribute_mBoolType.drop () ;
  mAttribute_mCharType.drop () ;
  mAttribute_mStringType.drop () ;
  mAttribute_mUIntType.drop () ;
  mAttribute_mSIntType.drop () ;
  mAttribute_mUInt_36__34_Type.drop () ;
  mAttribute_mSInt_36__34_Type.drop () ;
  mAttribute_mDoubleType.drop () ;
  mAttribute_mLBoolType.drop () ;
  mAttribute_mLCharType.drop () ;
  mAttribute_mLStringType.drop () ;
  mAttribute_mLUIntType.drop () ;
  mAttribute_mLSIntType.drop () ;
  mAttribute_mLUInt_36__34_Type.drop () ;
  mAttribute_mLSInt_36__34_Type.drop () ;
  mAttribute_mLDoubleType.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_predefinedTypes::description (C_String & ioString,
                                          const int32_t inIndentation) const {
  ioString << "<struct @predefinedTypes:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mLocationType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mBoolType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mCharType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mStringType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mUIntType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSIntType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mUInt_36__34_Type.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSInt_36__34_Type.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mDoubleType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLBoolType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLCharType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLStringType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLUIntType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLSIntType.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLUInt_36__34_Type.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLSInt_36__34_Type.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mLDoubleType.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLocationType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLocationType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mBoolType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mBoolType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mCharType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mCharType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mStringType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStringType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mUIntType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUIntType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mSIntType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSIntType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mUInt_36__34_Type (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUInt_36__34_Type ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mSInt_36__34_Type (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSInt_36__34_Type ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mDoubleType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mDoubleType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLBoolType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLBoolType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLCharType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLCharType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLStringType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLStringType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLUIntType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLUIntType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLSIntType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLSIntType ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLUInt_36__34_Type (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLUInt_36__34_Type ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLSInt_36__34_Type (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLSInt_36__34_Type ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_predefinedTypes::reader_mLDoubleType (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mLDoubleType ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @predefinedTypes type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_predefinedTypes ("predefinedTypes",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_predefinedTypes::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_predefinedTypes ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_predefinedTypes::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_predefinedTypes (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes GALGAS_predefinedTypes::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_predefinedTypes result ;
  const GALGAS_predefinedTypes * p = (const GALGAS_predefinedTypes *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_predefinedTypes *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("predefinedTypes", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_analysisContext::GALGAS_analysisContext (void) :
mAttribute_mSemanticContext (),
mAttribute_mPredefinedTypes (),
mAttribute_mSelfCopyTypeProxy (),
mAttribute_mSelfObjectCppName (),
mAttribute_mSelfTypeProxy () {
}

//-----------------------------------------------------------------------------*

GALGAS_analysisContext::~ GALGAS_analysisContext (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_analysisContext::GALGAS_analysisContext (const GALGAS_semanticContext & inOperand0,
                                                const GALGAS_predefinedTypes & inOperand1,
                                                const GALGAS_unifiedTypeMapProxy & inOperand2,
                                                const GALGAS_string & inOperand3,
                                                const GALGAS_unifiedTypeMapProxy & inOperand4) :
mAttribute_mSemanticContext (inOperand0),
mAttribute_mPredefinedTypes (inOperand1),
mAttribute_mSelfCopyTypeProxy (inOperand2),
mAttribute_mSelfObjectCppName (inOperand3),
mAttribute_mSelfTypeProxy (inOperand4) {
}

//-----------------------------------------------------------------------------*

GALGAS_analysisContext GALGAS_analysisContext::constructor_default (UNUSED_LOCATION_ARGS) {
  return GALGAS_analysisContext (GALGAS_semanticContext::constructor_default (HERE),
                                 GALGAS_predefinedTypes::constructor_default (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE),
                                 GALGAS_string::constructor_default (HERE),
                                 GALGAS_unifiedTypeMapProxy::constructor_null (HERE)) ;
}

//-----------------------------------------------------------------------------*

GALGAS_analysisContext GALGAS_analysisContext::constructor_new (const GALGAS_semanticContext & inOperand0,
                                                                const GALGAS_predefinedTypes & inOperand1,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand2,
                                                                const GALGAS_string & inOperand3,
                                                                const GALGAS_unifiedTypeMapProxy & inOperand4 
                                                                COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_analysisContext result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid ()) {
    result = GALGAS_analysisContext (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_analysisContext::objectCompare (const GALGAS_analysisContext & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mSemanticContext.objectCompare (inOperand.mAttribute_mSemanticContext) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mPredefinedTypes.objectCompare (inOperand.mAttribute_mPredefinedTypes) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSelfCopyTypeProxy.objectCompare (inOperand.mAttribute_mSelfCopyTypeProxy) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSelfObjectCppName.objectCompare (inOperand.mAttribute_mSelfObjectCppName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSelfTypeProxy.objectCompare (inOperand.mAttribute_mSelfTypeProxy) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_analysisContext::isValid (void) const {
  return mAttribute_mSemanticContext.isValid () && mAttribute_mPredefinedTypes.isValid () && mAttribute_mSelfCopyTypeProxy.isValid () && mAttribute_mSelfObjectCppName.isValid () && mAttribute_mSelfTypeProxy.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_analysisContext::drop (void) {
  mAttribute_mSemanticContext.drop () ;
  mAttribute_mPredefinedTypes.drop () ;
  mAttribute_mSelfCopyTypeProxy.drop () ;
  mAttribute_mSelfObjectCppName.drop () ;
  mAttribute_mSelfTypeProxy.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_analysisContext::description (C_String & ioString,
                                          const int32_t inIndentation) const {
  ioString << "<struct @analysisContext:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mSemanticContext.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mPredefinedTypes.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSelfCopyTypeProxy.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSelfObjectCppName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSelfTypeProxy.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_semanticContext GALGAS_analysisContext::reader_mSemanticContext (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSemanticContext ;
}

//-----------------------------------------------------------------------------*

GALGAS_predefinedTypes GALGAS_analysisContext::reader_mPredefinedTypes (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mPredefinedTypes ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_analysisContext::reader_mSelfCopyTypeProxy (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSelfCopyTypeProxy ;
}

//-----------------------------------------------------------------------------*

GALGAS_string GALGAS_analysisContext::reader_mSelfObjectCppName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSelfObjectCppName ;
}

//-----------------------------------------------------------------------------*

GALGAS_unifiedTypeMapProxy GALGAS_analysisContext::reader_mSelfTypeProxy (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSelfTypeProxy ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//                            @analysisContext type                            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_analysisContext ("analysisContext",
                                        NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_analysisContext::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_analysisContext ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_analysisContext::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_analysisContext (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_analysisContext GALGAS_analysisContext::extractObject (const GALGAS_object & inObject,
                                                              C_Compiler * inCompiler
                                                              COMMA_LOCATION_ARGS) {
  GALGAS_analysisContext result ;
  const GALGAS_analysisContext * p = (const GALGAS_analysisContext *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_analysisContext *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("analysisContext", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
// Abstract category method '@semanticExpressionAST analyzeSemanticExpression' *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_semanticExpressionAST_analyzeSemanticExpression> gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_analyzeSemanticExpression (const int32_t inClassIndex,
                                                    categoryMethodSignature_semanticExpressionAST_analyzeSemanticExpression inMethod) {
  gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_semanticExpressionAST_analyzeSemanticExpression (void) {
  gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_semanticExpressionAST_analyzeSemanticExpression (NULL,
                                                                            freeCategoryMethod_semanticExpressionAST_analyzeSemanticExpression) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                   const GALGAS_unifiedTypeMapProxy constin_inType,
                                                   const GALGAS_analysisContext constin_inAnalysisContext,
                                                   GALGAS_variableMap & io_ioVariableMap,
                                                   GALGAS_semanticExpressionForGeneration & out_outExpression,
                                                   C_Compiler * inCompiler
                                                   COMMA_LOCATION_ARGS) {
//--- Drop output arguments
  out_outExpression.drop () ;
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_semanticExpressionAST) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_semanticExpressionAST_analyzeSemanticExpression f = NULL ;
    if (classIndex < gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression.count ()) {
      f = gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression.count ()) {
           f = gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_semanticExpressionAST_analyzeSemanticExpression.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_inType, constin_inAnalysisContext, io_ioVariableMap, out_outExpression, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@selfCopyInExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_selfCopyInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                              const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                              const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                              GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                              GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_selfCopyInExpressionAST * object = (const cPtr_selfCopyInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_selfCopyInExpressionAST) ;
  const enumGalgasBool test_0 = constinArgument_inAnalysisContext.mAttribute_mSelfCopyTypeProxy.reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 414)).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mSelfLocation, GALGAS_string ("'selfcopy' cannot be used in this context")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 415)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    GALGAS_string var_selfCppName = constinArgument_inAnalysisContext.mAttribute_mSelfObjectCppName ;
    outArgument_outExpression = GALGAS_selfCopyInExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mSelfCopyTypeProxy, object->mAttribute_mSelfLocation, var_selfCppName  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 418)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_selfCopyInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_selfCopyInExpressionAST.mSlotID,
                                                 categoryMethod_selfCopyInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_selfCopyInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_selfCopyInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@hereExpressionAST analyzeSemanticExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_hereExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                        const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                        const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                        GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                        GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                        C_Compiler * /* inCompiler */
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_hereExpressionAST * object = (const cPtr_hereExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_hereExpressionAST) ;
  outArgument_outExpression = GALGAS_hereExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mLocationType, object->mAttribute_mLocation  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 430)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_hereExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_hereExpressionAST.mSlotID,
                                                 categoryMethod_hereExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_hereExpressionAST_analyzeSemanticExpression (defineCategoryMethod_hereExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@trueExpressionAST analyzeSemanticExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_trueExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                        const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                        const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                        GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                        GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                        C_Compiler * /* inCompiler */
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_trueExpressionAST * object = (const cPtr_trueExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_trueExpressionAST) ;
  outArgument_outExpression = GALGAS_trueExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mLocation  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 441)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_trueExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_trueExpressionAST.mSlotID,
                                                 categoryMethod_trueExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_trueExpressionAST_analyzeSemanticExpression (defineCategoryMethod_trueExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@falseExpressionAST analyzeSemanticExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_falseExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                         const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                         const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                         GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                         GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                         C_Compiler * /* inCompiler */
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_falseExpressionAST * object = (const cPtr_falseExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_falseExpressionAST) ;
  outArgument_outExpression = GALGAS_falseExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mLocation  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 452)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_falseExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_falseExpressionAST.mSlotID,
                                                 categoryMethod_falseExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_falseExpressionAST_analyzeSemanticExpression (defineCategoryMethod_falseExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalCharExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalCharExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                               const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                               const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                               GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                               GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                               C_Compiler * /* inCompiler */
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalCharExpressionAST * object = (const cPtr_literalCharExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalCharExpressionAST) ;
  outArgument_outExpression = GALGAS_literalCharExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mCharType, object->mAttribute_mCharacter.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 463)), object->mAttribute_mCharacter.reader_char (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 463))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 463)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalCharExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalCharExpressionAST.mSlotID,
                                                 categoryMethod_literalCharExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalCharExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalCharExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalStringExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalStringExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                 const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                 const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                 GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                 GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                 C_Compiler * /* inCompiler */
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalStringExpressionAST * object = (const cPtr_literalStringExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalStringExpressionAST) ;
  GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
  cEnumerator_stringlist enumerator_32552 (object->mAttribute_mStringSequence, kEnumeration_up) ;
  while (enumerator_32552.hasCurrentObject ()) {
    var_s.dotAssign_operation (enumerator_32552.current_mValue (HERE)  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 476)) ;
    enumerator_32552.gotoNextObject () ;
  }
  outArgument_outExpression = GALGAS_literalStringExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mStringType, object->mAttribute_mLocation, var_s  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 478)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalStringExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalStringExpressionAST.mSlotID,
                                                 categoryMethod_literalStringExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalStringExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalStringExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalDoubleExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalDoubleExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                 const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                 const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                 GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                 GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                 C_Compiler * /* inCompiler */
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalDoubleExpressionAST * object = (const cPtr_literalDoubleExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalDoubleExpressionAST) ;
  outArgument_outExpression = GALGAS_literalDoubleExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mDoubleType, object->mAttribute_mValue.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 489)), object->mAttribute_mValue.reader_double (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 489))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 489)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalDoubleExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalDoubleExpressionAST.mSlotID,
                                                 categoryMethod_literalDoubleExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalDoubleExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalDoubleExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalUIntExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalUIntExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                               const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                               const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                               GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                               GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                               C_Compiler * /* inCompiler */
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalUIntExpressionAST * object = (const cPtr_literalUIntExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalUIntExpressionAST) ;
  outArgument_outExpression = GALGAS_literalUIntExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mUIntType, object->mAttribute_mValue.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 500)), object->mAttribute_mValue.reader_uint (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 500))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 500)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalUIntExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalUIntExpressionAST.mSlotID,
                                                 categoryMethod_literalUIntExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalUIntExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalUIntExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalUInt64ExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalUInt_36__34_ExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                       const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                       const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                       GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                       GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                       C_Compiler * /* inCompiler */
                                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalUInt_36__34_ExpressionAST * object = (const cPtr_literalUInt_36__34_ExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalUInt_36__34_ExpressionAST) ;
  outArgument_outExpression = GALGAS_literalUInt_36__34_ExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mUInt_36__34_Type, object->mAttribute_mValue.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 511)), object->mAttribute_mValue.reader_uint_36__34_ (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 511))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 511)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalUInt_36__34_ExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalUInt_36__34_ExpressionAST.mSlotID,
                                                 categoryMethod_literalUInt_36__34_ExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalUInt_36__34_ExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalUInt_36__34_ExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalSIntExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalSIntExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                               const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                               const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                               GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                               GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                               C_Compiler * /* inCompiler */
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalSIntExpressionAST * object = (const cPtr_literalSIntExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalSIntExpressionAST) ;
  outArgument_outExpression = GALGAS_literalSIntExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mSIntType, object->mAttribute_mValue.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 522)), object->mAttribute_mValue.reader_sint (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 522))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 522)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalSIntExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalSIntExpressionAST.mSlotID,
                                                 categoryMethod_literalSIntExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalSIntExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalSIntExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalSInt64ExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalSInt_36__34_ExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                       const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                       const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                       GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                       GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                       C_Compiler * /* inCompiler */
                                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalSInt_36__34_ExpressionAST * object = (const cPtr_literalSInt_36__34_ExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalSInt_36__34_ExpressionAST) ;
  outArgument_outExpression = GALGAS_literalSInt_36__34_ExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mSInt_36__34_Type, object->mAttribute_mValue.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 533)), object->mAttribute_mValue.reader_sint_36__34_ (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 533))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 533)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalSInt_36__34_ExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalSInt_36__34_ExpressionAST.mSlotID,
                                                 categoryMethod_literalSInt_36__34_ExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalSInt_36__34_ExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalSInt_36__34_ExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@defaultConstructorExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_defaultConstructorExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                      const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                      const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                      GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                      GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_defaultConstructorExpressionAST * object = (const cPtr_defaultConstructorExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_defaultConstructorExpressionAST) ;
  GALGAS_unifiedTypeMapProxy var_type = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 605)) ;
  const enumGalgasBool test_0 = var_type.reader_mIsConcrete (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 607)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 607)).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("an abstract class does not support the default constructor")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 608)) ;
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_type.reader_mDefaultConstructorName (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 609)).objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("this class does not support the default constructor")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 610)) ;
    }
  }
  outArgument_outExpression = GALGAS_defaultConstructorExpressionForGeneration::constructor_new (var_type, object->mAttribute_mTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 613)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_defaultConstructorExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_defaultConstructorExpressionAST.mSlotID,
                                                 categoryMethod_defaultConstructorExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_defaultConstructorExpressionAST_analyzeSemanticExpression (defineCategoryMethod_defaultConstructorExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@constructorExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_constructorExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                               const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                               const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                               GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                               GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_constructorExpressionAST * object = (const cPtr_constructorExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_constructorExpressionAST) ;
  GALGAS_unifiedTypeMapProxy var_returnedType ;
  GALGAS_unifiedTypeMapProxy var_constructorType ;
  GALGAS_semanticExpressionListForGeneration var_constructorEffectiveParameterList ;
  GALGAS_bool var_hasCompilerArgument ;
  {
  routine_analyzeConstructorInvocation (constinArgument_inAnalysisContext, ioArgument_ioVariableMap, object->mAttribute_mTypeName, object->mAttribute_mConstructorName, object->mAttribute_mExpressions, var_returnedType, var_constructorType, var_constructorEffectiveParameterList, var_hasCompilerArgument, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 627)) ;
  }
  outArgument_outExpression = GALGAS_constructorExpressionForGeneration::constructor_new (var_returnedType, object->mAttribute_mConstructorName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 641)), var_constructorType, object->mAttribute_mConstructorName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 643)), var_constructorEffectiveParameterList, var_hasCompilerArgument  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 639)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_constructorExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_constructorExpressionAST.mSlotID,
                                                 categoryMethod_constructorExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_constructorExpressionAST_analyzeSemanticExpression (defineCategoryMethod_constructorExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@readerCallExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_readerCallExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                              const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                              const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                              GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                              GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_readerCallExpressionAST * object = (const cPtr_readerCallExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_readerCallExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_receiverExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mReceiver.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 659)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_receiverExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 659)) ;
  GALGAS_unifiedTypeMapProxy var_receiverType = var_receiverExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 660)) ;
  GALGAS_readerMap var_readerMap = var_receiverType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 662)) ;
  GALGAS_unifiedTypeMapProxyAndParameterList var_readerFormalArgumentTypeList ;
  GALGAS_methodKind var_kind ;
  GALGAS_bool var_hasCompilerArgument ;
  GALGAS_unifiedTypeMapProxy var_returnedType ;
  GALGAS_stringlist var_fieldList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 668)) ;
  const cMapElement_readerMap * objectArray_40609 = (const cMapElement_readerMap *) var_readerMap.readAccessForWithInstruction_hasKey (object->mAttribute_mReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 669))) ;
  if (NULL != objectArray_40609) {
      macroValidSharedObject (objectArray_40609, cMapElement_readerMap) ;
    var_readerFormalArgumentTypeList = objectArray_40609->mAttribute_mArgumentTypeList ;
    var_hasCompilerArgument = objectArray_40609->mAttribute_mHasCompilerArgument ;
    var_returnedType = objectArray_40609->mAttribute_mReturnedType ;
    var_kind = objectArray_40609->mAttribute_mKind ;
    const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, objectArray_40609->mAttribute_mErrorMessage.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
    if (kBoolTrue == test_0) {
      GALGAS_location location_1 (object->mAttribute_mReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_1, objectArray_40609->mAttribute_mErrorMessage  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 675)) ;
    }
  }else{
    GALGAS_uint var_matchingReaderCount = GALGAS_uint ((uint32_t) 0U) ;
    const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, var_receiverType.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 679)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 679)))).boolEnum () ;
    if (kBoolTrue == test_2) {
      var_readerFormalArgumentTypeList = GALGAS_unifiedTypeMapProxyAndParameterList::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 680)) ;
      var_hasCompilerArgument = GALGAS_bool (true) ;
      var_returnedType = GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 682)) ;
      var_kind = GALGAS_methodKind::constructor_definedAsCategory (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 683)) ;
      cEnumerator_typedAttributeList enumerator_41296 (var_receiverType.reader_mCurrentTypedAttributeList (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 684)), kEnumeration_up) ;
      while (enumerator_41296.hasCurrentObject ()) {
        GALGAS_unifiedTypeMapProxy var_attributeType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (enumerator_41296.current_mAttributeTypeProxy (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 685)), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 685)), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 685)) ;
        GALGAS_readerMap var_aMap = var_attributeType.reader_mReaderMap (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 686)) ;
        const cMapElement_readerMap * objectArray_41525 = (const cMapElement_readerMap *) var_aMap.readAccessForWithInstruction_hasKey (object->mAttribute_mReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 687))) ;
        if (NULL != objectArray_41525) {
            macroValidSharedObject (objectArray_41525, cMapElement_readerMap) ;
          var_matchingReaderCount.increment_operation (inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 688)) ;
          var_readerFormalArgumentTypeList = objectArray_41525->mAttribute_mArgumentTypeList ;
          var_hasCompilerArgument = objectArray_41525->mAttribute_mHasCompilerArgument ;
          var_returnedType = objectArray_41525->mAttribute_mReturnedType ;
          var_kind = objectArray_41525->mAttribute_mKind ;
          var_fieldList.addAssign_operation (enumerator_41296.current_mAttributeName (HERE).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 693))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 693)) ;
          const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, objectArray_41525->mAttribute_mErrorMessage.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
          if (kBoolTrue == test_3) {
            GALGAS_location location_4 (object->mAttribute_mReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_4, objectArray_41525->mAttribute_mErrorMessage  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 695)) ;
          }
        }
        enumerator_41296.gotoNextObject () ;
      }
      const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, var_matchingReaderCount.objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_5) {
        GALGAS_location location_6 (object->mAttribute_mReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_6, GALGAS_string ("the '@").operator_concat (var_receiverType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 701))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 701)).operator_concat (GALGAS_string ("' struct type does not define the '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 701)).operator_concat (object->mAttribute_mReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 701))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 701)).operator_concat (GALGAS_string ("' reader, and none of its fields defines it")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 701))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 700)) ;
        var_readerFormalArgumentTypeList.drop () ; // Release error dropped variable
        var_hasCompilerArgument.drop () ; // Release error dropped variable
        var_returnedType.drop () ; // Release error dropped variable
        var_kind.drop () ; // Release error dropped variable
      }else if (kBoolFalse == test_5) {
        const enumGalgasBool test_7 = GALGAS_bool (kIsStrictSup, var_matchingReaderCount.objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
        if (kBoolTrue == test_7) {
          GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
          cEnumerator_stringlist enumerator_42383 (var_fieldList, kEnumeration_up) ;
          while (enumerator_42383.hasCurrentObject ()) {
            var_s.dotAssign_operation (enumerator_42383.current_mValue (HERE)  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 708)) ;
            if (enumerator_42383.hasNextObject ()) {
              var_s.dotAssign_operation (GALGAS_string (", ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 709)) ;
            }
            enumerator_42383.gotoNextObject () ;
          }
          GALGAS_location location_8 (object->mAttribute_mReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_8, GALGAS_string ("the '@").operator_concat (var_receiverType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 712))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 712)).operator_concat (GALGAS_string ("' struct type does not define the '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 712)).operator_concat (object->mAttribute_mReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 712))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 712)).operator_concat (GALGAS_string ("' reader, and several of its fields defines it:")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 712)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 713)).operator_concat (GALGAS_string (" (exactly one field should define it)")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 713))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 711)) ;
          var_readerFormalArgumentTypeList.drop () ; // Release error dropped variable
          var_hasCompilerArgument.drop () ; // Release error dropped variable
          var_returnedType.drop () ; // Release error dropped variable
          var_kind.drop () ; // Release error dropped variable
        }
      }
    }else if (kBoolFalse == test_2) {
      const enumGalgasBool test_9 = GALGAS_bool (kIsEqual, var_readerMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 717)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_9) {
        GALGAS_location location_10 (object->mAttribute_mReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_10, GALGAS_string ("the '@").operator_concat (var_receiverType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 719))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 719)).operator_concat (GALGAS_string ("' type does not define any reader")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 719))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 718)) ;
        var_readerFormalArgumentTypeList.drop () ; // Release error dropped variable
        var_hasCompilerArgument.drop () ; // Release error dropped variable
        var_returnedType.drop () ; // Release error dropped variable
        var_kind.drop () ; // Release error dropped variable
      }else if (kBoolFalse == test_9) {
        GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
        cEnumerator_readerMap enumerator_43081 (var_readerMap, kEnumeration_up) ;
        while (enumerator_43081.hasCurrentObject ()) {
          var_s.dotAssign_operation (GALGAS_string ("\n"
            "  - ").operator_concat (enumerator_43081.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 725))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 725))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 725)) ;
          cEnumerator_unifiedTypeMapProxyAndParameterList enumerator_43149 (enumerator_43081.current_mArgumentTypeList (HERE), kEnumeration_up) ;
          while (enumerator_43149.hasCurrentObject ()) {
            var_s.dotAssign_operation (GALGAS_string (" \?@").operator_concat (enumerator_43149.current_mType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 727))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 727))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 727)) ;
            enumerator_43149.gotoNextObject () ;
          }
          var_s.dotAssign_operation (GALGAS_string (" -> @").operator_concat (enumerator_43081.current_mReturnedType (HERE).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 729))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 729))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 729)) ;
          enumerator_43081.gotoNextObject () ;
        }
        GALGAS_string temp_11 ;
        const enumGalgasBool test_12 = GALGAS_bool (kIsStrictSup, var_readerMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 733)).objectCompare (GALGAS_uint ((uint32_t) 1U))).boolEnum () ;
        if (kBoolTrue == test_12) {
          temp_11 = GALGAS_string ("readers are") ;
        }else if (kBoolFalse == test_12) {
          temp_11 = GALGAS_string ("reader is") ;
        }
        GALGAS_location location_13 (object->mAttribute_mReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
        inCompiler->emitSemanticError (location_13, GALGAS_string ("the '@").operator_concat (var_receiverType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 732))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 732)).operator_concat (GALGAS_string ("' type does not define the '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 732)).operator_concat (object->mAttribute_mReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 732))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 732)).operator_concat (GALGAS_string ("' reader; available ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 732)).operator_concat (temp_11  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 732)).operator_concat (GALGAS_string (":")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 733)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 734))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 731)) ;
        var_readerFormalArgumentTypeList.drop () ; // Release error dropped variable
        var_hasCompilerArgument.drop () ; // Release error dropped variable
        var_returnedType.drop () ; // Release error dropped variable
        var_kind.drop () ; // Release error dropped variable
      }
    }
  }
  const enumGalgasBool test_14 = GALGAS_bool (kIsNotEqual, object->mAttribute_mExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 740)).objectCompare (var_readerFormalArgumentTypeList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 740)))).boolEnum () ;
  if (kBoolTrue == test_14) {
    GALGAS_location location_15 (object->mAttribute_mReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_15, GALGAS_string ("calling the '").operator_concat (object->mAttribute_mReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741)).operator_concat (GALGAS_string ("' reader of '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741)).operator_concat (var_receiverType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741)).operator_concat (GALGAS_string ("' requires ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741)).operator_concat (var_readerFormalArgumentTypeList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 742)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 742))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741)).operator_concat (GALGAS_string (" parameter(s), while this call has ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 742)).operator_concat (object->mAttribute_mExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 743)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 743))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 742)).operator_concat (GALGAS_string (" parameter(s)")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 743))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 741)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_14) {
    GALGAS_semanticExpressionListForGeneration var_constructorEffectiveParameterList = GALGAS_semanticExpressionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 745)) ;
    cEnumerator_semanticExpressionListAST enumerator_44103 (object->mAttribute_mExpressions, kEnumeration_up) ;
    cEnumerator_unifiedTypeMapProxyAndParameterList enumerator_44133 (var_readerFormalArgumentTypeList, kEnumeration_up) ;
    while (enumerator_44103.hasCurrentObject () && enumerator_44133.hasCurrentObject ()) {
      GALGAS_semanticExpressionForGeneration var_exp ;
      callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) enumerator_44103.current_mExpression (HERE).ptr (), enumerator_44133.current_mType (HERE), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_exp, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 747)) ;
      {
      routine_checkAssignmentTypes (enumerator_44133.current_mType (HERE), var_exp.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 748)), enumerator_44103.current_mEndOfExpressionLocation (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 748)) ;
      }
      var_constructorEffectiveParameterList.addAssign_operation (var_exp  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 749)) ;
      enumerator_44103.gotoNextObject () ;
      enumerator_44133.gotoNextObject () ;
    }
    outArgument_outExpression = GALGAS_readerCallExpressionForGeneration::constructor_new (var_returnedType, object->mAttribute_mReaderName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 753)), var_kind, var_receiverExpression, var_fieldList, object->mAttribute_mReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 757)), var_constructorEffectiveParameterList, var_hasCompilerArgument  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 751)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_readerCallExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_readerCallExpressionAST.mSlotID,
                                                 categoryMethod_readerCallExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_readerCallExpressionAST_analyzeSemanticExpression (defineCategoryMethod_readerCallExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@optionExpressionAST analyzeSemanticExpression' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_optionExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                          const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                          const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                          GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                          GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_optionExpressionAST * object = (const cPtr_optionExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_optionExpressionAST) ;
  GALGAS_commandLineOptionMap var_boolOptionMap ;
  GALGAS_commandLineOptionMap var_uintOptionMap ;
  GALGAS_commandLineOptionMap var_stringOptionMap ;
  GALGAS_bool var_optionComponentIsPredefined ;
  constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mOptionComponentMapForSemanticAnalysis.method_searchKey (object->mAttribute_mOptionComponentName, var_optionComponentIsPredefined, var_boolOptionMap, var_uintOptionMap, var_stringOptionMap, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 797)) ;
  GALGAS_bool var_found = var_boolOptionMap.reader_hasKey (object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 804)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 804)) ;
  GALGAS_unifiedTypeMapProxy var_returnedType = constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType ;
  const enumGalgasBool test_0 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 806)).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_found = var_uintOptionMap.reader_hasKey (object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 807)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 807)) ;
    var_returnedType = constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mUIntType ;
  }
  const enumGalgasBool test_1 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 810)).boolEnum () ;
  if (kBoolTrue == test_1) {
    var_found = var_stringOptionMap.reader_hasKey (object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 811)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 811)) ;
    var_returnedType = constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mStringType ;
  }
  const enumGalgasBool test_2 = var_found.boolEnum () ;
  if (kBoolTrue == test_2) {
    const enumGalgasBool test_3 = GALGAS_bool (kIsEqual, object->mAttribute_mOptionReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 815)).objectCompare (GALGAS_string ("value"))).boolEnum () ;
    if (kBoolTrue == test_3) {
      outArgument_outExpression = GALGAS_optionValueExpressionForGeneration::constructor_new (var_returnedType, object->mAttribute_mOptionComponentName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 818)), var_optionComponentIsPredefined, object->mAttribute_mOptionComponentName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 820)), object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 821))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 816)) ;
    }else if (kBoolFalse == test_3) {
      const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, object->mAttribute_mOptionReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 823)).objectCompare (GALGAS_string ("char"))).boolEnum () ;
      if (kBoolTrue == test_4) {
        outArgument_outExpression = GALGAS_optionCharExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mCharType, object->mAttribute_mOptionComponentName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 826)), var_optionComponentIsPredefined, object->mAttribute_mOptionComponentName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 828)), object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 829))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 824)) ;
      }else if (kBoolFalse == test_4) {
        const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, object->mAttribute_mOptionReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 831)).objectCompare (GALGAS_string ("string"))).boolEnum () ;
        if (kBoolTrue == test_5) {
          outArgument_outExpression = GALGAS_optionStringExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mStringType, object->mAttribute_mOptionComponentName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 834)), var_optionComponentIsPredefined, object->mAttribute_mOptionComponentName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 836)), object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 837))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 832)) ;
        }else if (kBoolFalse == test_5) {
          const enumGalgasBool test_6 = GALGAS_bool (kIsEqual, object->mAttribute_mOptionReaderName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 839)).objectCompare (GALGAS_string ("comment"))).boolEnum () ;
          if (kBoolTrue == test_6) {
            outArgument_outExpression = GALGAS_optionCommentExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mStringType, object->mAttribute_mOptionComponentName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 842)), var_optionComponentIsPredefined, object->mAttribute_mOptionComponentName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 844)), object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 845))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 840)) ;
          }else if (kBoolFalse == test_6) {
            GALGAS_location location_7 (object->mAttribute_mOptionReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
            inCompiler->emitSemanticError (location_7, GALGAS_string ("only the 'value', 'char', 'string' and 'comment' readers are defined for an option")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 848)) ;
            outArgument_outExpression.drop () ; // Release error dropped variable
          }
        }
      }
    }
  }else if (kBoolFalse == test_2) {
    GALGAS_string var_s = GALGAS_string::makeEmptyString () ;
    cEnumerator_commandLineOptionMap enumerator_48108 (var_boolOptionMap, kEnumeration_up) ;
    while (enumerator_48108.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("\n"
        "-  '").operator_concat (enumerator_48108.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 853))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 853)).operator_concat (GALGAS_string ("' @bool option;")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 853))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 853)) ;
      enumerator_48108.gotoNextObject () ;
    }
    cEnumerator_commandLineOptionMap enumerator_48204 (var_uintOptionMap, kEnumeration_up) ;
    while (enumerator_48204.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("\n"
        "-  '").operator_concat (enumerator_48204.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 856))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 856)).operator_concat (GALGAS_string ("' @uint option;")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 856))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 856)) ;
      enumerator_48204.gotoNextObject () ;
    }
    cEnumerator_commandLineOptionMap enumerator_48302 (var_stringOptionMap, kEnumeration_up) ;
    while (enumerator_48302.hasCurrentObject ()) {
      var_s.dotAssign_operation (GALGAS_string ("\n"
        "-  '").operator_concat (enumerator_48302.current_lkey (HERE).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 859))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 859)).operator_concat (GALGAS_string ("' @string option;")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 859))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 859)) ;
      enumerator_48302.gotoNextObject () ;
    }
    GALGAS_location location_8 (object->mAttribute_mOptionEntryName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_8, GALGAS_string ("the '").operator_concat (object->mAttribute_mOptionComponentName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 862))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 862)).operator_concat (GALGAS_string ("' option component does not define the '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 862)).operator_concat (object->mAttribute_mOptionEntryName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 862))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 862)).operator_concat (GALGAS_string ("' option; available options:")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 862)).operator_concat (var_s  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 862))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 861)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_optionExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_optionExpressionAST.mSlotID,
                                                 categoryMethod_optionExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_optionExpressionAST_analyzeSemanticExpression (defineCategoryMethod_optionExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@concatExpressionAST analyzeSemanticExpression' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_concatExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                          const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                          const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                          GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                          GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_concatExpressionAST * object = (const cPtr_concatExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_concatExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 941)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 941)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 944)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 944)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 946)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 949)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 950)).operator_and (function_binaryConcatOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 950)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 950)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("."), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 947)) ;
  }
  outArgument_outExpression = GALGAS_concatExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 956)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_concatExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_concatExpressionAST.mSlotID,
                                                 categoryMethod_concatExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_concatExpressionAST_analyzeSemanticExpression (defineCategoryMethod_concatExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@orExpressionAST analyzeSemanticExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_orExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                      const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                      const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                      GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                      GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_orExpressionAST * object = (const cPtr_orExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_orExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 974)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 974)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 977)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 977)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 979)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 982)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 983)).operator_and (function_binaryOrOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 983)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 983)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("|"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 980)) ;
  }
  outArgument_outExpression = GALGAS_orExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 989)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_orExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_orExpressionAST.mSlotID,
                                                 categoryMethod_orExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_orExpressionAST_analyzeSemanticExpression (defineCategoryMethod_orExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@andExpressionAST analyzeSemanticExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_andExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                       const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                       const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                       GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                       GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_andExpressionAST * object = (const cPtr_andExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_andExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1007)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1007)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1010)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1010)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1012)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1015)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1016)).operator_and (function_binaryAndOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1016)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1016)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("&"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1013)) ;
  }
  outArgument_outExpression = GALGAS_andExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1022)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_andExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_andExpressionAST.mSlotID,
                                                 categoryMethod_andExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_andExpressionAST_analyzeSemanticExpression (defineCategoryMethod_andExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@xorExpressionAST analyzeSemanticExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_xorExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                       const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                       const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                       GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                       GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_xorExpressionAST * object = (const cPtr_xorExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_xorExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1040)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1040)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1043)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1043)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1045)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1048)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1049)).operator_and (function_binaryXorOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1049)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1049)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("^"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1046)) ;
  }
  outArgument_outExpression = GALGAS_xorExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1055)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_xorExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_xorExpressionAST.mSlotID,
                                                 categoryMethod_xorExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_xorExpressionAST_analyzeSemanticExpression (defineCategoryMethod_xorExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@equalExpressionAST analyzeSemanticExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_equalExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                         const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                         const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                         GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                         GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_equalExpressionAST * object = (const cPtr_equalExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_equalExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1073)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1073)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1076)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1076)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1078)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1079)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_leftType.reader_lkey (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1080)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1080)).objectCompare (var_rightType.reader_lkey (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1080)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1080)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_lkey (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082)).operator_concat (GALGAS_string ("', right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082)).operator_concat (var_rightType.reader_lkey (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082)).operator_concat (GALGAS_string ("': '==' operator requires the types are the same")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1082))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1081)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    outArgument_outExpression = GALGAS_equalExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1087)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_equalExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_equalExpressionAST.mSlotID,
                                                 categoryMethod_equalExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_equalExpressionAST_analyzeSemanticExpression (defineCategoryMethod_equalExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@notEqualExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_notEqualExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                            const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                            const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                            GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                            GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_notEqualExpressionAST * object = (const cPtr_notEqualExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_notEqualExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1106)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1106)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1109)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1109)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1111)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1112)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_leftType.reader_lkey (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1113)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1113)).objectCompare (var_rightType.reader_lkey (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1113)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1113)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1115))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1115)).operator_concat (GALGAS_string ("', right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1115)).operator_concat (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1115))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1115)).operator_concat (GALGAS_string ("': '!=' operator requires the types are the same")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1115))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1114)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    outArgument_outExpression = GALGAS_notEqualExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1120)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_notEqualExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_notEqualExpressionAST.mSlotID,
                                                 categoryMethod_notEqualExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_notEqualExpressionAST_analyzeSemanticExpression (defineCategoryMethod_notEqualExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lowerOrEqualExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lowerOrEqualExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lowerOrEqualExpressionAST * object = (const cPtr_lowerOrEqualExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lowerOrEqualExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1139)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1139)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1142)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1142)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1144)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1145)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1146)).operator_and (function_isComparable (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1146)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1146)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1148))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1148)).operator_concat (GALGAS_string ("' and does not support the '<=' operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1148))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1147)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1151)).objectCompare (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1151)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1153))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1153)).operator_concat (GALGAS_string ("', right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1153)).operator_concat (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1153))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1153)).operator_concat (GALGAS_string ("': '<=' operator requires the types are the same")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1153))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1152)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      outArgument_outExpression = GALGAS_lowerOrEqualExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1158)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lowerOrEqualExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_lowerOrEqualExpressionAST.mSlotID,
                                                 categoryMethod_lowerOrEqualExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lowerOrEqualExpressionAST_analyzeSemanticExpression (defineCategoryMethod_lowerOrEqualExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@greaterOrEqualExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_greaterOrEqualExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                  const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                  const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                  GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                  GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_greaterOrEqualExpressionAST * object = (const cPtr_greaterOrEqualExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_greaterOrEqualExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1177)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1177)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1180)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1180)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1182)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1183)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1184)).operator_and (function_isComparable (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1184)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1184)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1186))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1186)).operator_concat (GALGAS_string ("' and does not support the '>=' operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1186))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1185)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1189)).objectCompare (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1189)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1191))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1191)).operator_concat (GALGAS_string ("', right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1191)).operator_concat (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1191))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1191)).operator_concat (GALGAS_string ("': '>=' operator requires the types are the same")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1191))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1190)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      outArgument_outExpression = GALGAS_greaterOrEqualExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1196)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_greaterOrEqualExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_greaterOrEqualExpressionAST.mSlotID,
                                                 categoryMethod_greaterOrEqualExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_greaterOrEqualExpressionAST_analyzeSemanticExpression (defineCategoryMethod_greaterOrEqualExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@strictGreaterExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_strictGreaterExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                 const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                 const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                 GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                 GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_strictGreaterExpressionAST * object = (const cPtr_strictGreaterExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_strictGreaterExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1215)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1215)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1218)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1218)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1220)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1221)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1222)).operator_and (function_isComparable (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1222)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1222)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1224))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1224)).operator_concat (GALGAS_string ("' and does not support the '>' operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1224))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1223)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1227)).objectCompare (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1227)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1229))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1229)).operator_concat (GALGAS_string ("', right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1229)).operator_concat (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1229))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1229)).operator_concat (GALGAS_string ("': '>' operator requires the types are the same")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1229))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1228)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      outArgument_outExpression = GALGAS_strictGreaterExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1234)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_strictGreaterExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_strictGreaterExpressionAST.mSlotID,
                                                 categoryMethod_strictGreaterExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_strictGreaterExpressionAST_analyzeSemanticExpression (defineCategoryMethod_strictGreaterExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@strictLowerExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_strictLowerExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                               const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                               const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                               GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                               GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                               C_Compiler * inCompiler
                                                                               COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_strictLowerExpressionAST * object = (const cPtr_strictLowerExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_strictLowerExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1253)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1253)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1256)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1256)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1258)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1259)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1260)).operator_and (function_isComparable (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1260)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1260)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1262))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1262)).operator_concat (GALGAS_string ("' and does not support the '<' operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1262))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1261)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1265)).objectCompare (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1265)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1267))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1267)).operator_concat (GALGAS_string ("', right operand type is '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1267)).operator_concat (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1267))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1267)).operator_concat (GALGAS_string ("': '<' operator requires the types are the same")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1267))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1266)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      outArgument_outExpression = GALGAS_strictLowerExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1272)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_strictLowerExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_strictLowerExpressionAST.mSlotID,
                                                 categoryMethod_strictLowerExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_strictLowerExpressionAST_analyzeSemanticExpression (defineCategoryMethod_strictLowerExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@rightShiftExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_rightShiftExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                              const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                              const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                              GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                              GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_rightShiftExpressionAST * object = (const cPtr_rightShiftExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_rightShiftExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1291)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1291)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1294)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1294)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1296)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1297)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1298)).operator_and (function_binaryShiftOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1298)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1298)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1300))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1300)).operator_concat (GALGAS_string ("' and does not support a shift operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1300))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1299)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1303)).objectCompare (GALGAS_string ("uint"))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("for a shift operator, right operand type should be '@uint': it is '@").operator_concat (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1305))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1305)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1305))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1304)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      outArgument_outExpression = GALGAS_rightShiftExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1310)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_rightShiftExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_rightShiftExpressionAST.mSlotID,
                                                 categoryMethod_rightShiftExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_rightShiftExpressionAST_analyzeSemanticExpression (defineCategoryMethod_rightShiftExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@leftShiftExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_leftShiftExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                             const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                             const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                             GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                             GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                             C_Compiler * inCompiler
                                                                             COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_leftShiftExpressionAST * object = (const cPtr_leftShiftExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_leftShiftExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1329)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1329)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1332)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1332)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1334)) ;
  GALGAS_unifiedTypeMapProxy var_rightType = var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1335)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1336)).operator_and (function_binaryShiftOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1336)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1336)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("left operand type is '@").operator_concat (var_leftType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1338))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1338)).operator_concat (GALGAS_string ("' and does not support a shift operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1338))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1337)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1341)).objectCompare (GALGAS_string ("uint"))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("for a shift operator, right operand type should be '@uint': it is '@").operator_concat (var_rightType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1343))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1343)).operator_concat (GALGAS_string ("'")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1343))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1342)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      outArgument_outExpression = GALGAS_leftShiftExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1348)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_leftShiftExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_leftShiftExpressionAST.mSlotID,
                                                 categoryMethod_leftShiftExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_leftShiftExpressionAST_analyzeSemanticExpression (defineCategoryMethod_leftShiftExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@addExpressionAST analyzeSemanticExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_addExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                       const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                       const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                       GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                       GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_addExpressionAST * object = (const cPtr_addExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_addExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1367)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1367)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1370)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1370)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1372)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1375)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1376)).operator_and (function_binaryAddOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1376)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1376)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("+"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1373)) ;
  }
  outArgument_outExpression = GALGAS_addExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1382)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_addExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_addExpressionAST.mSlotID,
                                                 categoryMethod_addExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_addExpressionAST_analyzeSemanticExpression (defineCategoryMethod_addExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@subExpressionAST analyzeSemanticExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_subExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                       const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                       const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                       GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                       GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_subExpressionAST * object = (const cPtr_subExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_subExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1400)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1400)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1403)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1403)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1405)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1408)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1409)).operator_and (function_binarySubOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1409)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1409)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("-"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1406)) ;
  }
  outArgument_outExpression = GALGAS_subExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1415)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_subExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_subExpressionAST.mSlotID,
                                                 categoryMethod_subExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_subExpressionAST_analyzeSemanticExpression (defineCategoryMethod_subExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@multiplicationExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_multiplicationExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                  const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                  const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                  GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                  GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                  C_Compiler * inCompiler
                                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_multiplicationExpressionAST * object = (const cPtr_multiplicationExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_multiplicationExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1433)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1433)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1436)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1436)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1438)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1441)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1442)).operator_and (function_binaryMulOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1442)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1442)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("*"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1439)) ;
  }
  outArgument_outExpression = GALGAS_multiplicationExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1448)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_multiplicationExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_multiplicationExpressionAST.mSlotID,
                                                 categoryMethod_multiplicationExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_multiplicationExpressionAST_analyzeSemanticExpression (defineCategoryMethod_multiplicationExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@divisionExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_divisionExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                            const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                            const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                            GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                            GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                            C_Compiler * inCompiler
                                                                            COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_divisionExpressionAST * object = (const cPtr_divisionExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_divisionExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1466)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1466)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1469)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1469)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1471)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1474)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1475)).operator_and (function_binaryDivOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1475)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1475)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("/"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1472)) ;
  }
  outArgument_outExpression = GALGAS_divisionExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1481)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_divisionExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_divisionExpressionAST.mSlotID,
                                                 categoryMethod_divisionExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_divisionExpressionAST_analyzeSemanticExpression (defineCategoryMethod_divisionExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@moduloExpressionAST analyzeSemanticExpression' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_moduloExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                          const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                          const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                          GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                          GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_moduloExpressionAST * object = (const cPtr_moduloExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_moduloExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_leftExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mLeftExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1499)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_leftExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1499)) ;
  GALGAS_semanticExpressionForGeneration var_rightExpression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mRightExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1502)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_rightExpression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1502)) ;
  GALGAS_unifiedTypeMapProxy var_leftType = var_leftExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1504)) ;
  {
  routine_checkDiadicOperator (var_leftType, var_rightExpression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1507)), GALGAS_bool (kIsNotEqual, var_leftType.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1508)).operator_and (function_binaryModOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1508)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1508)).objectCompare (GALGAS_uint ((uint32_t) 0U))), GALGAS_string ("mod"), object->mAttribute_mOperatorLocation, var_rightExpression, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1505)) ;
  }
  outArgument_outExpression = GALGAS_moduloExpressionForGeneration::constructor_new (var_leftType, object->mAttribute_mOperatorLocation, var_leftExpression, var_rightExpression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1514)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_moduloExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_moduloExpressionAST.mSlotID,
                                                 categoryMethod_moduloExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_moduloExpressionAST_analyzeSemanticExpression (defineCategoryMethod_moduloExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@unaryMinusExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_unaryMinusExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                              const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                              const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                              GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                              GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_unaryMinusExpressionAST * object = (const cPtr_unaryMinusExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_unaryMinusExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1532)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1532)) ;
  GALGAS_unifiedTypeMapProxy var_type = var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1534)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_type.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1535)).operator_and (function_unaryMinusOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1535)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1535)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("operand type is '@").operator_concat (var_type.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1537))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1537)).operator_concat (GALGAS_string ("' and does not support the unary minus operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1537))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1536)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    outArgument_outExpression = GALGAS_unaryMinusExpressionForGeneration::constructor_new (var_type, object->mAttribute_mOperatorLocation, var_expression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1542)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_unaryMinusExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_unaryMinusExpressionAST.mSlotID,
                                                 categoryMethod_unaryMinusExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_unaryMinusExpressionAST_analyzeSemanticExpression (defineCategoryMethod_unaryMinusExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//  Overriding category method '@notExpressionAST analyzeSemanticExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_notExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                       const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                       const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                       GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                       GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                       C_Compiler * inCompiler
                                                                       COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_notExpressionAST * object = (const cPtr_notExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_notExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1560)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1560)) ;
  GALGAS_unifiedTypeMapProxy var_type = var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1562)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_type.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1563)).operator_and (function_unaryNotOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1563)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1563)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("operand type is '@").operator_concat (var_type.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1565))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1565)).operator_concat (GALGAS_string ("' and does not support the 'not' operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1565))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1564)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    outArgument_outExpression = GALGAS_notExpressionForGeneration::constructor_new (var_type, object->mAttribute_mOperatorLocation, var_expression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1570)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_notExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_notExpressionAST.mSlotID,
                                                 categoryMethod_notExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_notExpressionAST_analyzeSemanticExpression (defineCategoryMethod_notExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@structFieldAccessExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_structFieldAccessExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                     const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                     const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                     GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                     GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                     C_Compiler * inCompiler
                                                                                     COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_structFieldAccessExpressionAST * object = (const cPtr_structFieldAccessExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_structFieldAccessExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1588)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1588)) ;
  GALGAS_unifiedTypeMapProxy var_type = var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1590)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_type.reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1591)).objectCompare (GALGAS_typeKindEnum::constructor_structType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1591)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mStructFieldName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the '->' operator requires the receiver to be a struct")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1592)) ;
  }
  GALGAS_attributeMap var_attributeMap = var_type.reader_mAttributeMap (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1594)) ;
  var_attributeMap.method_searchKey (object->mAttribute_mStructFieldName, var_type, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1595)) ;
  outArgument_outExpression = GALGAS_structFieldAccessExpressionForGeneration::constructor_new (var_type, object->mAttribute_mOperatorLocation, var_expression, object->mAttribute_mStructFieldName.mAttribute_string  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1597)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_structFieldAccessExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_structFieldAccessExpressionAST.mSlotID,
                                                 categoryMethod_structFieldAccessExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_structFieldAccessExpressionAST_analyzeSemanticExpression (defineCategoryMethod_structFieldAccessExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@complementExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_complementExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                              const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                              const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                              GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                              GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                              C_Compiler * inCompiler
                                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_complementExpressionAST * object = (const cPtr_complementExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_complementExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1615)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1615)) ;
  GALGAS_unifiedTypeMapProxy var_type = var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1617)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_type.reader_mHandledOperatorFlags (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1618)).operator_and (function_unaryTildeOperator (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1618)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1618)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("operand type is '@").operator_concat (var_type.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1620))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1620)).operator_concat (GALGAS_string ("' and does not support the '~' operator")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1620))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1619)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    outArgument_outExpression = GALGAS_tildeExpressionForGeneration::constructor_new (var_type, object->mAttribute_mOperatorLocation, var_expression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1625)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_complementExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_complementExpressionAST.mSlotID,
                                                 categoryMethod_complementExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_complementExpressionAST_analyzeSemanticExpression (defineCategoryMethod_complementExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//   Overriding category method '@ifExpressionAST analyzeSemanticExpression'   *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_ifExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                      const GALGAS_unifiedTypeMapProxy constinArgument_inType,
                                                                      const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                      GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                      GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                      C_Compiler * inCompiler
                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_ifExpressionAST * object = (const cPtr_ifExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_ifExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_if_5F_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mIfExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1643)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_if_5F_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1643)) ;
  GALGAS_semanticExpressionForGeneration var_then_5F_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mThenExpression.ptr (), constinArgument_inType, constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_then_5F_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1646)) ;
  GALGAS_semanticExpressionForGeneration var_else_5F_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mElseExpression.ptr (), constinArgument_inType, constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_else_5F_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1649)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_if_5F_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1651)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1651)).objectCompare (GALGAS_string ("bool"))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("the test expression type is '@").operator_concat (var_if_5F_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1653)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1653))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1653)).operator_concat (GALGAS_string ("', it should be '@bool'")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1653))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1652)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_1 = GALGAS_bool (kIsNotEqual, var_then_5F_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1656)).objectCompare (var_else_5F_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1656)))).boolEnum () ;
    if (kBoolTrue == test_1) {
      inCompiler->emitSemanticError (object->mAttribute_mOperatorLocation, GALGAS_string ("operand expression types are '@").operator_concat (var_then_5F_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658)).operator_concat (GALGAS_string ("' and '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658)).operator_concat (var_else_5F_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658)).operator_concat (GALGAS_string ("': they should be the same")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1658))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1657)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_1) {
      outArgument_outExpression = GALGAS_ifExpressionForGeneration::constructor_new (var_then_5F_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1664)), object->mAttribute_mOperatorLocation, var_if_5F_expression, var_then_5F_expression, var_else_5F_expression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1663)) ;
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_ifExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_ifExpressionAST.mSlotID,
                                                 categoryMethod_ifExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_ifExpressionAST_analyzeSemanticExpression (defineCategoryMethod_ifExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@functionCallExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_functionCallExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                C_Compiler * inCompiler
                                                                                COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_functionCallExpressionAST * object = (const cPtr_functionCallExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_functionCallExpressionAST) ;
  GALGAS_unifiedTypeMapProxyList var_functionSignature ;
  GALGAS_unifiedTypeMapProxy var_resultType ;
  constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mFunctionMap.method_searchKey (object->mAttribute_mFunctionName, var_functionSignature, var_resultType, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1684)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_functionSignature.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1686)).objectCompare (object->mAttribute_mExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1686)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mFunctionName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("the '").operator_concat (object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1688))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1688)).operator_concat (GALGAS_string ("' function header declares ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1688)).operator_concat (var_functionSignature.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1688)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1688))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1688)).operator_concat (GALGAS_string (" formal parameter(s), but this function call names ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1688)).operator_concat (object->mAttribute_mExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1689)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1689))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1689)).operator_concat (GALGAS_string (" effective argument(s)")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1689))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1687)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    GALGAS_semanticExpressionListForGeneration var_semanticExpressionListForGeneration = GALGAS_semanticExpressionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1694)) ;
    cEnumerator_unifiedTypeMapProxyList enumerator_80757 (var_functionSignature, kEnumeration_up) ;
    cEnumerator_semanticExpressionListAST enumerator_80771 (object->mAttribute_mExpressions, kEnumeration_up) ;
    while (enumerator_80757.hasCurrentObject () && enumerator_80771.hasCurrentObject ()) {
      GALGAS_semanticExpressionForGeneration var_expression ;
      callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) enumerator_80771.current_mExpression (HERE).ptr (), enumerator_80757.current_mType (HERE), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1697)) ;
      {
      routine_checkAssignmentTypes (enumerator_80757.current_mType (HERE), var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1698)), enumerator_80771.current_mEndOfExpressionLocation (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1698)) ;
      }
      var_semanticExpressionListForGeneration.addAssign_operation (var_expression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1699)) ;
      enumerator_80757.gotoNextObject () ;
      enumerator_80771.gotoNextObject () ;
    }
    outArgument_outExpression = GALGAS_functionCallExpressionForGeneration::constructor_new (var_resultType, object->mAttribute_mFunctionName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1703)), object->mAttribute_mFunctionName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1704)), var_semanticExpressionListForGeneration  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1701)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_functionCallExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_functionCallExpressionAST.mSlotID,
                                                 categoryMethod_functionCallExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_functionCallExpressionAST_analyzeSemanticExpression (defineCategoryMethod_functionCallExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@varInExpressionAST analyzeSemanticExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_varInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                         const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                         const GALGAS_analysisContext /* constinArgument_inAnalysisContext */,
                                                                         GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                         GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_varInExpressionAST * object = (const cPtr_varInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_varInExpressionAST) ;
  GALGAS_unifiedTypeMapProxy var_type ;
  GALGAS_string var_sourceVariableCppName ;
  GALGAS_string var_nameForCheckingFormalParameterUsing ;
  {
  ioArgument_ioVariableMap.modifier_searchForReadAccess (object->mAttribute_mVarName, var_type, var_sourceVariableCppName, var_nameForCheckingFormalParameterUsing, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1718)) ;
  }
  outArgument_outExpression = GALGAS_varInExpressionForGeneration::constructor_new (var_type, object->mAttribute_mVarName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1726)), var_sourceVariableCppName, var_nameForCheckingFormalParameterUsing  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1724)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_varInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_varInExpressionAST.mSlotID,
                                                 categoryMethod_varInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_varInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_varInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@literalTypeInExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_literalTypeInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                 const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                 const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                 GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                 GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_literalTypeInExpressionAST * object = (const cPtr_literalTypeInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_literalTypeInExpressionAST) ;
  GALGAS_bool joker_82404_27 ; // Joker input parameter
  GALGAS_bool joker_82404_26 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_82404_25 ; // Joker input parameter
  GALGAS_typeKindEnum joker_82404_24 ; // Joker input parameter
  GALGAS_bool joker_82404_23 ; // Joker input parameter
  GALGAS_typedAttributeList joker_82404_22 ; // Joker input parameter
  GALGAS_attributeMap joker_82404_21 ; // Joker input parameter
  GALGAS_typedAttributeList joker_82404_20 ; // Joker input parameter
  GALGAS_constructorMap joker_82404_19 ; // Joker input parameter
  GALGAS_readerMap joker_82404_18 ; // Joker input parameter
  GALGAS_modifierMap joker_82404_17 ; // Joker input parameter
  GALGAS_instanceMethodMap joker_82404_16 ; // Joker input parameter
  GALGAS_classMethodMap joker_82404_15 ; // Joker input parameter
  GALGAS_enumerationDescriptorList joker_82404_14 ; // Joker input parameter
  GALGAS_stringlist joker_82404_13 ; // Joker input parameter
  GALGAS_uint joker_82404_12 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxyAndParameterList joker_82404_11 ; // Joker input parameter
  GALGAS_stringset joker_82404_10 ; // Joker input parameter
  GALGAS_lstringlist joker_82404_9 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_82404_8 ; // Joker input parameter
  GALGAS_mapSearchMethodListAST joker_82404_7 ; // Joker input parameter
  GALGAS_withAccessorMap joker_82404_6 ; // Joker input parameter
  GALGAS_bool joker_82404_5 ; // Joker input parameter
  GALGAS_unifiedTypeMapProxy joker_82404_4 ; // Joker input parameter
  GALGAS_string joker_82404_3 ; // Joker input parameter
  GALGAS_string joker_82404_2 ; // Joker input parameter
  GALGAS_headerKind joker_82404_1 ; // Joker input parameter
  constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap.method_searchKey (object->mAttribute_mLiteralTypeName, joker_82404_27, joker_82404_26, joker_82404_25, joker_82404_24, joker_82404_23, joker_82404_22, joker_82404_21, joker_82404_20, joker_82404_19, joker_82404_18, joker_82404_17, joker_82404_16, joker_82404_15, joker_82404_14, joker_82404_13, joker_82404_12, joker_82404_11, joker_82404_10, joker_82404_9, joker_82404_8, joker_82404_7, joker_82404_6, joker_82404_5, joker_82404_4, joker_82404_3, joker_82404_2, joker_82404_1, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1741)) ;
  outArgument_outExpression = GALGAS_literalTypeInExpressionForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("type"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1744)), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1744)), object->mAttribute_mLiteralTypeName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1745)), object->mAttribute_mLiteralTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1746))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1743)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_literalTypeInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_literalTypeInExpressionAST.mSlotID,
                                                 categoryMethod_literalTypeInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_literalTypeInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_literalTypeInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@testDynamicClassInExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_testDynamicClassInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                      const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                      const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                      GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                      GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                      C_Compiler * inCompiler
                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_testDynamicClassInExpressionAST * object = (const cPtr_testDynamicClassInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_testDynamicClassInExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mReceiverExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1760)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1760)) ;
  GALGAS_unifiedTypeMapProxy var_castType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1762)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1764)).reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1764)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1764)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_unifiedTypeMapProxy var_t = var_castType ;
    GALGAS_bool var_found = GALGAS_bool (kIsEqual, var_t.objectCompare (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1767)))) ;
    if (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1768)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1768)).isValid ()) {
      uint32_t variant_83602 = constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1768)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1768)).uintValue () ;
      bool loop_83602 = true ;
      while (loop_83602) {
        loop_83602 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).operator_and (var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).isValid () ;
        if (loop_83602) {
          loop_83602 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).operator_and (var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1769)).boolValue () ;
        }
        if (loop_83602 && (0 == variant_83602)) {
          loop_83602 = false ;
          inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1768)) ;
        }
        if (loop_83602) {
          variant_83602 -- ;
          var_t = var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1770)) ;
          var_found = GALGAS_bool (kIsEqual, var_t.objectCompare (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1771)))) ;
        }
      }
    }
    const enumGalgasBool test_1 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1773)).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_location location_2 (object->mAttribute_mTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("the '@").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1775))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1775)).operator_concat (GALGAS_string ("' is not a descendant of the '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1775)).operator_concat (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1775)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1775))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1775)).operator_concat (GALGAS_string ("' type of the cast expression")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1775))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1774)) ;
    }
  }else if (kBoolFalse == test_0) {
    inCompiler->emitSemanticError (var_expression.reader_mLocation (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1779)), GALGAS_string ("expression should be a class instance: it is an @").operator_concat (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1780)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1780))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1779)).operator_concat (GALGAS_string (" instance")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1780))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1779)) ;
  }
  outArgument_outExpression = GALGAS_testDynamicClassInExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mBoolType, object->mAttribute_mTypeName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1785)), var_expression, object->mAttribute_mTypeComparisonKind, var_castType  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1783)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_testDynamicClassInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_testDynamicClassInExpressionAST.mSlotID,
                                                 categoryMethod_testDynamicClassInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_testDynamicClassInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_testDynamicClassInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@castInExpressionAST analyzeSemanticExpression' *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_castInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                          const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                          const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                          GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                          GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                          C_Compiler * inCompiler
                                                                          COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_castInExpressionAST * object = (const cPtr_castInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_castInExpressionAST) ;
  GALGAS_semanticExpressionForGeneration var_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mReceiverExpression.ptr (), GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1802)), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1801)) ;
  GALGAS_unifiedTypeMapProxy var_type = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1808)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1813)).reader_mTypeKindEnum (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1813)).objectCompare (GALGAS_typeKindEnum::constructor_classType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1813)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_unifiedTypeMapProxy var_t = var_type ;
    GALGAS_bool var_found = GALGAS_bool (kIsEqual, var_t.objectCompare (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1816)))) ;
    if (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1817)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1817)).isValid ()) {
      uint32_t variant_85316 = constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1817)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1817)).uintValue () ;
      bool loop_85316 = true ;
      while (loop_85316) {
        loop_85316 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).operator_and (var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).isValid () ;
        if (loop_85316) {
          loop_85316 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).operator_and (var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).reader_isNull (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)) COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1818)).boolValue () ;
        }
        if (loop_85316 && (0 == variant_85316)) {
          loop_85316 = false ;
          inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1817)) ;
        }
        if (loop_85316) {
          variant_85316 -- ;
          var_t = var_t.reader_mSuperType (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1819)) ;
          var_found = GALGAS_bool (kIsEqual, var_t.objectCompare (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1820)))) ;
        }
      }
    }
    const enumGalgasBool test_1 = var_found.operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1822)).boolEnum () ;
    if (kBoolTrue == test_1) {
      GALGAS_location location_2 (object->mAttribute_mTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_2, GALGAS_string ("the '@").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1824))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1824)).operator_concat (GALGAS_string ("' is not a descendant of the '@")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1824)).operator_concat (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1825)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1825))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1824)).operator_concat (GALGAS_string ("' type of the cast expression")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1825))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1823)) ;
    }
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_3 = GALGAS_bool (kIsNotEqual, var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1828)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1828)).objectCompare (GALGAS_string ("object"))).boolEnum () ;
    if (kBoolTrue == test_3) {
      inCompiler->emitSemanticError (var_expression.reader_mLocation (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1833)), GALGAS_string ("cast expression should be a class instance or an @object instance: it is an @").operator_concat (var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1835)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1835))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1834)).operator_concat (GALGAS_string (" instance")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1835))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1833)) ;
    }
  }
  const enumGalgasBool test_4 = GALGAS_bool (kIsEqual, var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1838)).reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1838)).objectCompare (GALGAS_string ("object"))).boolEnum () ;
  if (kBoolTrue == test_4) {
    outArgument_outExpression = GALGAS_extractObjectInExpressionForGeneration::constructor_new (var_type, object->mAttribute_mEndOfReceiverExpression, var_expression, object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1843))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1839)) ;
  }else if (kBoolFalse == test_4) {
    outArgument_outExpression = GALGAS_castInExpressionForGeneration::constructor_new (var_type, object->mAttribute_mTypeName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1848)), var_expression, object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1850))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1846)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_castInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_castInExpressionAST.mSlotID,
                                                 categoryMethod_castInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_castInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_castInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@filewrapperObjectInstanciationInExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_filewrapperObjectInstanciationInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                                    const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                                    const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                                    GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                                    GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                                    C_Compiler * inCompiler
                                                                                                    COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_filewrapperObjectInstanciationInExpressionAST * object = (const cPtr_filewrapperObjectInstanciationInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_filewrapperObjectInstanciationInExpressionAST) ;
  GALGAS_lstring var_filewrapperPath ;
  GALGAS_lstringlist joker_87036_0 ; // Joker input parameter
  GALGAS_wrapperFileMap joker_87039_0 ; // Joker input parameter
  GALGAS_wrapperDirectoryMap joker_87042_0 ; // Joker input parameter
  GALGAS_filewrapperTemplateMap joker_87045_0 ; // Joker input parameter
  constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mFilewrapperMap.method_searchKey (object->mAttribute_mFilewrapperName, var_filewrapperPath, joker_87036_0, joker_87039_0, joker_87042_0, joker_87045_0, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1865)) ;
  outArgument_outExpression = GALGAS_filewrapperInExpressionForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("filewrapper"), object->mAttribute_mFilewrapperName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1868))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1868)), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1868)), object->mAttribute_mFilewrapperName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1869)), object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1870)), var_filewrapperPath.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1871))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1867)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_filewrapperObjectInstanciationInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_filewrapperObjectInstanciationInExpressionAST.mSlotID,
                                                 categoryMethod_filewrapperObjectInstanciationInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_filewrapperObjectInstanciationInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_filewrapperObjectInstanciationInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@filewrapperTemplateInExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_filewrapperTemplateInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                         const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                         const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                         GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                                         GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                         C_Compiler * inCompiler
                                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_filewrapperTemplateInExpressionAST * object = (const cPtr_filewrapperTemplateInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_filewrapperTemplateInExpressionAST) ;
  GALGAS_filewrapperTemplateMap var_filewrapperTemplateMap ;
  GALGAS_lstring joker_87835_0 ; // Joker input parameter
  GALGAS_lstringlist joker_87838_0 ; // Joker input parameter
  GALGAS_wrapperFileMap joker_87841_0 ; // Joker input parameter
  GALGAS_wrapperDirectoryMap joker_87844_0 ; // Joker input parameter
  constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mFilewrapperMap.method_searchKey (object->mAttribute_mFilewrapperName, joker_87835_0, joker_87838_0, joker_87841_0, joker_87844_0, var_filewrapperTemplateMap, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1885)) ;
  GALGAS_unifiedTypeMapProxyList var_templateSignature ;
  GALGAS_lstring joker_88007_0 ; // Joker input parameter
  var_filewrapperTemplateMap.method_searchKey (object->mAttribute_mFilewrapperTemplateName, var_templateSignature, joker_88007_0, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1888)) ;
  GALGAS_semanticExpressionListForGeneration var_effectiveParameterList ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, object->mAttribute_mExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1891)).objectCompare (var_templateSignature.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1891)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mFilewrapperTemplateName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("calling the '").operator_concat (object->mAttribute_mFilewrapperTemplateName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1893))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1893)).operator_concat (GALGAS_string ("' template of '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1893)).operator_concat (object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1893))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1893)).operator_concat (GALGAS_string ("' filewrapper requires ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1893)).operator_concat (var_templateSignature.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1894)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1894))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1893)).operator_concat (GALGAS_string (" parameter(s), while this call has ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1894)).operator_concat (object->mAttribute_mExpressions.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1895)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1895))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1894)).operator_concat (GALGAS_string (" parameter(s)")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1895))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1892)) ;
    var_effectiveParameterList.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    var_effectiveParameterList = GALGAS_semanticExpressionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1898)) ;
    cEnumerator_semanticExpressionListAST enumerator_88594 (object->mAttribute_mExpressions, kEnumeration_up) ;
    cEnumerator_unifiedTypeMapProxyList enumerator_88613 (var_templateSignature, kEnumeration_up) ;
    while (enumerator_88594.hasCurrentObject () && enumerator_88613.hasCurrentObject ()) {
      GALGAS_semanticExpressionForGeneration var_exp ;
      callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) enumerator_88594.current_mExpression (HERE).ptr (), enumerator_88613.current_mType (HERE), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_exp, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1901)) ;
      {
      routine_checkAssignmentTypes (enumerator_88613.current_mType (HERE), var_exp.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1902)), enumerator_88594.current_mEndOfExpressionLocation (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1902)) ;
      }
      var_effectiveParameterList.addAssign_operation (var_exp  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1903)) ;
      enumerator_88594.gotoNextObject () ;
      enumerator_88613.gotoNextObject () ;
    }
  }
  outArgument_outExpression = GALGAS_filewrapperTemplateInExpressionForGeneration::constructor_new (constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mStringType, object->mAttribute_mFilewrapperName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1909)), object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1910)), object->mAttribute_mFilewrapperTemplateName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1911)), var_effectiveParameterList  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1907)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_filewrapperTemplateInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_filewrapperTemplateInExpressionAST.mSlotID,
                                                 categoryMethod_filewrapperTemplateInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_filewrapperTemplateInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_filewrapperTemplateInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@filewrapperInExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_filewrapperInExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                 const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                 const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                 GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                 GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                 C_Compiler * inCompiler
                                                                                 COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_filewrapperInExpressionAST * object = (const cPtr_filewrapperInExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_filewrapperInExpressionAST) ;
  GALGAS_stringlist var_directoryList ;
  GALGAS_string var_fileName ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mFilewrapperPath.mAttribute_string.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1927)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mFilewrapperPath.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("path is empty")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1928)) ;
    var_directoryList.drop () ; // Release error dropped variable
    var_fileName.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    const enumGalgasBool test_2 = GALGAS_bool (kIsEqual, object->mAttribute_mFilewrapperPath.mAttribute_string.reader_firstCharacterOrNul (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1929)).objectCompare (GALGAS_char (TO_UNICODE (47)))).boolEnum () ;
    if (kBoolTrue == test_2) {
      GALGAS_location location_3 (object->mAttribute_mFilewrapperPath.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_3, GALGAS_string ("the path should not begin with '/'")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1930)) ;
      var_directoryList.drop () ; // Release error dropped variable
      var_fileName.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_2) {
      var_directoryList = object->mAttribute_mFilewrapperPath.mAttribute_string.reader_componentsSeparatedByString (GALGAS_string ("/") COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1932)) ;
      {
      var_directoryList.modifier_popLast (var_fileName, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1933)) ;
      }
    }
  }
  GALGAS_wrapperFileMap var_filewrapperFileMap ;
  GALGAS_wrapperDirectoryMap var_filewrapperDirectoryMap ;
  GALGAS_lstring joker_90189_0 ; // Joker input parameter
  GALGAS_lstringlist joker_90196_0 ; // Joker input parameter
  GALGAS_filewrapperTemplateMap joker_90256_0 ; // Joker input parameter
  constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mFilewrapperMap.method_searchKey (object->mAttribute_mFilewrapperName, joker_90189_0, joker_90196_0, var_filewrapperFileMap, var_filewrapperDirectoryMap, joker_90256_0, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1938)) ;
  GALGAS_string var_builtPath = GALGAS_string::makeEmptyString () ;
  if (var_filewrapperDirectoryMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1948)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1948)).isValid ()) {
    uint32_t variant_90319 = var_filewrapperDirectoryMap.reader_count (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1948)).add_operation (GALGAS_uint ((uint32_t) 1U), inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1948)).uintValue () ;
    bool loop_90319 = true ;
    while (loop_90319) {
      loop_90319 = GALGAS_bool (kIsStrictSup, var_directoryList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1949)).objectCompare (GALGAS_uint ((uint32_t) 0U))).isValid () ;
      if (loop_90319) {
        loop_90319 = GALGAS_bool (kIsStrictSup, var_directoryList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1949)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolValue () ;
      }
      if (loop_90319 && (0 == variant_90319)) {
        loop_90319 = false ;
        inCompiler->loopRunTimeVariantError (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1948)) ;
      }
      if (loop_90319) {
        variant_90319 -- ;
        GALGAS_string var_directoryName ;
        {
        var_directoryList.modifier_popFirst (var_directoryName, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1951)) ;
        }
        var_builtPath.dotAssign_operation (var_directoryName.operator_concat (GALGAS_string ("/")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1952))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1952)) ;
        const enumGalgasBool test_4 = var_filewrapperDirectoryMap.reader_hasKey (var_directoryName COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1953)).boolEnum () ;
        if (kBoolTrue == test_4) {
          GALGAS_uint joker_90727_0 ; // Joker input parameter
          var_filewrapperDirectoryMap.method_searchKey (GALGAS_lstring::constructor_new (var_directoryName, inCompiler->here ()  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1955)), var_filewrapperFileMap, var_filewrapperDirectoryMap, joker_90727_0, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1954)) ;
        }else if (kBoolFalse == test_4) {
          GALGAS_location location_5 (object->mAttribute_mFilewrapperPath.reader_location (HERE)) ; // Implicit use of 'location' reader
          inCompiler->emitSemanticError (location_5, GALGAS_string ("the '").operator_concat (var_builtPath  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1961)).operator_concat (GALGAS_string ("' path does not exists for the '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1961)).operator_concat (object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1961))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1961)).operator_concat (GALGAS_string ("' filewrapper")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1961))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1961)) ;
          var_filewrapperFileMap.drop () ; // Release error dropped variable
          var_directoryList = GALGAS_stringlist::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1962)) ;
        }
      }
    }
  }
  GALGAS_uint var_fileIndex ;
  GALGAS_bool var_isTextFile ;
  const enumGalgasBool test_6 = var_filewrapperFileMap.reader_hasKey (var_fileName COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1967)).boolEnum () ;
  if (kBoolTrue == test_6) {
    GALGAS_string joker_91147_0 ; // Joker input parameter
    GALGAS_uint joker_91162_0 ; // Joker input parameter
    var_filewrapperFileMap.method_searchKey (GALGAS_lstring::constructor_new (var_fileName, inCompiler->here ()  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1968)), joker_91147_0, var_isTextFile, joker_91162_0, var_fileIndex, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1968)) ;
  }else if (kBoolFalse == test_6) {
    GALGAS_location location_7 (object->mAttribute_mFilewrapperPath.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_7, GALGAS_string ("the '").operator_concat (var_fileName  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1971)).operator_concat (GALGAS_string ("' file does not exist in the '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1971)).operator_concat (var_builtPath  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1971)).operator_concat (GALGAS_string ("' directory of '")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1971)).operator_concat (object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1971))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1971)).operator_concat (GALGAS_string ("' filewrapper")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1971))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1970)) ;
    var_fileIndex.drop () ; // Release error dropped variable
    var_isTextFile.drop () ; // Release error dropped variable
  }
  GALGAS_unifiedTypeMapProxy temp_8 ;
  const enumGalgasBool test_9 = var_isTextFile.boolEnum () ;
  if (kBoolTrue == test_9) {
    temp_8 = constinArgument_inAnalysisContext.mAttribute_mPredefinedTypes.mAttribute_mStringType ;
  }else if (kBoolFalse == test_9) {
    temp_8 = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, GALGAS_lstring::constructor_new (GALGAS_string ("data"), inCompiler->here ()  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1979)), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1979)) ;
  }
  outArgument_outExpression = GALGAS_filewrapperStaticPathInExpressionForGeneration::constructor_new (temp_8, object->mAttribute_mFilewrapperName.reader_location (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1981)), object->mAttribute_mFilewrapperName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1982)), var_fileIndex, var_isTextFile  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1976)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_filewrapperInExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_filewrapperInExpressionAST.mSlotID,
                                                 categoryMethod_filewrapperInExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_filewrapperInExpressionAST_analyzeSemanticExpression (defineCategoryMethod_filewrapperInExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//Overriding category method '@lexiqueIntrospectionExpressionAST analyzeSemanticExpression'*
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_lexiqueIntrospectionExpressionAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                                        const GALGAS_unifiedTypeMapProxy /* constinArgument_inType */,
                                                                                        const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                                        GALGAS_variableMap & /* ioArgument_ioVariableMap */,
                                                                                        GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                                        C_Compiler * inCompiler
                                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_lexiqueIntrospectionExpressionAST * object = (const cPtr_lexiqueIntrospectionExpressionAST *) inObject ;
  macroValidSharedObject (object, cPtr_lexiqueIntrospectionExpressionAST) ;
  GALGAS_terminalMap joker_92266_3 ; // Joker input parameter
  GALGAS_indexingListAST joker_92266_2 ; // Joker input parameter
  GALGAS_lstring joker_92266_1 ; // Joker input parameter
  constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mLexiqueComponentMapForSemanticAnalysis.method_searchKey (object->mAttribute_mLexiqueComponentName, joker_92266_3, joker_92266_2, joker_92266_1, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 1997)) ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, object->mAttribute_mLexiqueReaderName.mAttribute_string.objectCompare (GALGAS_string ("symbols"))).boolEnum () ;
  if (kBoolTrue == test_0) {
    GALGAS_location location_1 (object->mAttribute_mLexiqueReaderName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_1, GALGAS_string ("unknown reader")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2003)) ;
  }
  outArgument_outExpression = GALGAS_lexiqueIntrospectionForGeneration::constructor_new (GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, GALGAS_string ("stringlist").reader_nowhere (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2007)), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2007)), object->mAttribute_mLexiqueComponentName.mAttribute_location, object->mAttribute_mLexiqueComponentName.mAttribute_string, object->mAttribute_mLexiqueReaderName.mAttribute_string  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2006)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_lexiqueIntrospectionExpressionAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_lexiqueIntrospectionExpressionAST.mSlotID,
                                                 categoryMethod_lexiqueIntrospectionExpressionAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_lexiqueIntrospectionExpressionAST_analyzeSemanticExpression (defineCategoryMethod_lexiqueIntrospectionExpressionAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Abstract category method '@abstractCollectionValueElement analyze'      *
//                                                                             *
//-----------------------------------------------------------------------------*

static TC_UniqueArray <categoryMethodSignature_abstractCollectionValueElement_analyze> gCategoryMethodTable_abstractCollectionValueElement_analyze ;

//-----------------------------------------------------------------------------*

void enterCategoryMethod_analyze (const int32_t inClassIndex,
                                  categoryMethodSignature_abstractCollectionValueElement_analyze inMethod) {
  gCategoryMethodTable_abstractCollectionValueElement_analyze.forceObjectAtIndex (inClassIndex, inMethod, NULL COMMA_HERE) ;
}

//-----------------------------------------------------------------------------*

static void freeCategoryMethod_abstractCollectionValueElement_analyze (void) {
  gCategoryMethodTable_abstractCollectionValueElement_analyze.free () ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_abstractCollectionValueElement_analyze (NULL,
                                                                   freeCategoryMethod_abstractCollectionValueElement_analyze) ;

//-----------------------------------------------------------------------------*

void callCategoryMethod_analyze (const cPtr_abstractCollectionValueElement * inObject,
                                 const GALGAS_analysisContext constin_inAnalysisContext,
                                 const GALGAS_unifiedTypeMapProxy constin_inElementType,
                                 GALGAS_variableMap & io_ioVariableMap,
                                 GALGAS_collectionValueElementListForGeneration & io_ioCollectionValueElementListForGeneration,
                                 C_Compiler * inCompiler
                                 COMMA_LOCATION_ARGS) {
//--- Drop output arguments
//--- Find method
  if (NULL != inObject) {
    macroValidSharedObject (inObject, cPtr_abstractCollectionValueElement) ;
    const C_galgas_type_descriptor * info = inObject->classDescriptor () ;
    const int32_t classIndex = info->mSlotID ;
    categoryMethodSignature_abstractCollectionValueElement_analyze f = NULL ;
    if (classIndex < gCategoryMethodTable_abstractCollectionValueElement_analyze.count ()) {
      f = gCategoryMethodTable_abstractCollectionValueElement_analyze (classIndex COMMA_HERE) ;
    }
    if (NULL == f) {
       const C_galgas_type_descriptor * p = info->mSuperclassDescriptor ;
       while ((NULL == f) && (NULL != p)) {
         if (p->mSlotID < gCategoryMethodTable_abstractCollectionValueElement_analyze.count ()) {
           f = gCategoryMethodTable_abstractCollectionValueElement_analyze (p->mSlotID COMMA_HERE) ;
         }
         p = p->mSuperclassDescriptor ;
       }
       gCategoryMethodTable_abstractCollectionValueElement_analyze.forceObjectAtIndex (classIndex, f, NULL COMMA_HERE) ;
    }
    if (NULL == f) {
      fatalError ("FATAL CATEGORY METHOD CALL ERROR", __FILE__, __LINE__) ;
    }else{
      f (inObject, constin_inAnalysisContext, constin_inElementType, io_ioVariableMap, io_ioCollectionValueElementListForGeneration, inCompiler COMMA_THERE) ;
    }
  }
}

//-----------------------------------------------------------------------------*
//                                                                             *
//       Overriding category method '@expressionCollectionValue analyze'       *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_expressionCollectionValue_analyze (const cPtr_abstractCollectionValueElement * inObject,
                                                              const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                              const GALGAS_unifiedTypeMapProxy constinArgument_inElementType,
                                                              GALGAS_variableMap & ioArgument_ioVariableMap,
                                                              GALGAS_collectionValueElementListForGeneration & ioArgument_ioCollectionValueElementListForGeneration,
                                                              C_Compiler * inCompiler
                                                              COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_expressionCollectionValue * object = (const cPtr_expressionCollectionValue *) inObject ;
  macroValidSharedObject (object, cPtr_expressionCollectionValue) ;
  GALGAS_semanticExpressionForGeneration var_expression ;
  callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) object->mAttribute_mExpression.ptr (), constinArgument_inElementType, constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_expression, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2033)) ;
  {
  routine_checkAssignmentTypes (constinArgument_inElementType, var_expression.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2040)), object->mAttribute_mExpressionLocation, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2040)) ;
  }
  ioArgument_ioCollectionValueElementListForGeneration.addAssign_operation (GALGAS_expressionCollectionValueForGeneration::constructor_new (object->mAttribute_mExpressionLocation, var_expression  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2042))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2042)) ;
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_expressionCollectionValue_analyze (void) {
  enterCategoryMethod_analyze (kTypeDescriptor_GALGAS_expressionCollectionValue.mSlotID,
                               categoryMethod_expressionCollectionValue_analyze) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_expressionCollectionValue_analyze (defineCategoryMethod_expressionCollectionValue_analyze, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
//     Overriding category method '@expressionListCollectionValue analyze'     *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_expressionListCollectionValue_analyze (const cPtr_abstractCollectionValueElement * inObject,
                                                                  const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                  const GALGAS_unifiedTypeMapProxy constinArgument_inElementType,
                                                                  GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                  GALGAS_collectionValueElementListForGeneration & ioArgument_ioCollectionValueElementListForGeneration,
                                                                  C_Compiler * inCompiler
                                                                  COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_expressionListCollectionValue * object = (const cPtr_expressionListCollectionValue *) inObject ;
  macroValidSharedObject (object, cPtr_expressionListCollectionValue) ;
  GALGAS_unifiedTypeMapProxyAndParameterList var_formalParameterTypeList = constinArgument_inElementType.reader_mAddAssignOperatorArguments (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2053)) ;
  GALGAS_semanticExpressionListForGeneration var_semanticExpressionListForGeneration ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsNotEqual, var_formalParameterTypeList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2055)).objectCompare (object->mAttribute_mExpressionList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2055)))).boolEnum () ;
  if (kBoolTrue == test_0) {
    inCompiler->emitSemanticError (object->mAttribute_mEndOfExpressionLocation, GALGAS_string ("element of of '@").operator_concat (constinArgument_inElementType.reader_key (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2056))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2056)).operator_concat (GALGAS_string ("' requires ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2056)).operator_concat (var_formalParameterTypeList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2057)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2056))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2056)).operator_concat (GALGAS_string (" parameter(s), while this list has ")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2057)).operator_concat (object->mAttribute_mExpressionList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2058)).reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2057))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2057)).operator_concat (GALGAS_string (" element(s)")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2058))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2056)) ;
    var_semanticExpressionListForGeneration.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_0) {
    var_semanticExpressionListForGeneration = GALGAS_semanticExpressionListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2060)) ;
    cEnumerator_semanticExpressionListAST enumerator_94869 (object->mAttribute_mExpressionList, kEnumeration_up) ;
    cEnumerator_unifiedTypeMapProxyAndParameterList enumerator_94894 (var_formalParameterTypeList, kEnumeration_up) ;
    while (enumerator_94869.hasCurrentObject () && enumerator_94894.hasCurrentObject ()) {
      GALGAS_semanticExpressionForGeneration var_exp ;
      callCategoryMethod_analyzeSemanticExpression ((const cPtr_semanticExpressionAST *) enumerator_94869.current_mExpression (HERE).ptr (), enumerator_94894.current_mType (HERE), constinArgument_inAnalysisContext, ioArgument_ioVariableMap, var_exp, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2062)) ;
      {
      routine_checkAssignmentTypes (enumerator_94894.current_mType (HERE), var_exp.reader_mType (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2063)), enumerator_94869.current_mEndOfExpressionLocation (HERE), inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2063)) ;
      }
      var_semanticExpressionListForGeneration.addAssign_operation (var_exp  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2064)) ;
      enumerator_94869.gotoNextObject () ;
      enumerator_94894.gotoNextObject () ;
    }
    ioArgument_ioCollectionValueElementListForGeneration.addAssign_operation (GALGAS_expressionListCollectionForGeneration::constructor_new (object->mAttribute_mEndOfExpressionLocation, var_semanticExpressionListForGeneration  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2066))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2066)) ;
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_expressionListCollectionValue_analyze (void) {
  enterCategoryMethod_analyze (kTypeDescriptor_GALGAS_expressionListCollectionValue.mSlotID,
                               categoryMethod_expressionListCollectionValue_analyze) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_expressionListCollectionValue_analyze (defineCategoryMethod_expressionListCollectionValue_analyze, NULL) ;

//-----------------------------------------------------------------------------*
//                                                                             *
// Overriding category method '@collectionValueAST analyzeSemanticExpression'  *
//                                                                             *
//-----------------------------------------------------------------------------*

static void categoryMethod_collectionValueAST_analyzeSemanticExpression (const cPtr_semanticExpressionAST * inObject,
                                                                         const GALGAS_unifiedTypeMapProxy constinArgument_inType,
                                                                         const GALGAS_analysisContext constinArgument_inAnalysisContext,
                                                                         GALGAS_variableMap & ioArgument_ioVariableMap,
                                                                         GALGAS_semanticExpressionForGeneration & outArgument_outExpression,
                                                                         C_Compiler * inCompiler
                                                                         COMMA_UNUSED_LOCATION_ARGS) {
  const cPtr_collectionValueAST * object = (const cPtr_collectionValueAST *) inObject ;
  macroValidSharedObject (object, cPtr_collectionValueAST) ;
  GALGAS_unifiedTypeMapProxy var_targetType ;
  const enumGalgasBool test_0 = GALGAS_bool (kIsEqual, object->mAttribute_mTypeName.mAttribute_string.objectCompare (GALGAS_string::makeEmptyString ())).boolEnum () ;
  if (kBoolTrue == test_0) {
    var_targetType = constinArgument_inType ;
  }else if (kBoolFalse == test_0) {
    var_targetType = GALGAS_unifiedTypeMapProxy::constructor_searchKey (constinArgument_inAnalysisContext.mAttribute_mSemanticContext.mAttribute_mTypeMap, object->mAttribute_mTypeName, inCompiler  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2116)) ;
  }
  const enumGalgasBool test_1 = GALGAS_bool (kIsEqual, var_targetType.objectCompare (GALGAS_unifiedTypeMapProxy::constructor_null (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2119)))).boolEnum () ;
  if (kBoolTrue == test_1) {
    GALGAS_location location_2 (object->mAttribute_mTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
    inCompiler->emitSemanticError (location_2, GALGAS_string ("Cannot infer type")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2120)) ;
    outArgument_outExpression.drop () ; // Release error dropped variable
  }else if (kBoolFalse == test_1) {
    const enumGalgasBool test_3 = var_targetType.reader_mSupportCollectionValue (inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2121)).operator_not (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2121)).boolEnum () ;
    if (kBoolTrue == test_3) {
      GALGAS_location location_4 (object->mAttribute_mTypeName.reader_location (HERE)) ; // Implicit use of 'location' reader
      inCompiler->emitSemanticError (location_4, GALGAS_string ("the @").operator_concat (object->mAttribute_mTypeName.reader_string (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2122))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2122)).operator_concat (GALGAS_string (" type does not support collection value")  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2122))  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2122)) ;
      outArgument_outExpression.drop () ; // Release error dropped variable
    }else if (kBoolFalse == test_3) {
      const enumGalgasBool test_5 = GALGAS_bool (kIsEqual, object->mAttribute_mElementList.reader_length (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2124)).objectCompare (GALGAS_uint ((uint32_t) 0U))).boolEnum () ;
      if (kBoolTrue == test_5) {
        outArgument_outExpression = GALGAS_defaultConstructorExpressionForGeneration::constructor_new (var_targetType, object->mAttribute_mTypeName.mAttribute_location  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2125)) ;
      }else if (kBoolFalse == test_5) {
        GALGAS_collectionValueElementListForGeneration var_collectionValueElementListForGeneration = GALGAS_collectionValueElementListForGeneration::constructor_emptyList (SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2130)) ;
        cEnumerator_collectionValueElementList enumerator_97553 (object->mAttribute_mElementList, kEnumeration_up) ;
        while (enumerator_97553.hasCurrentObject ()) {
          callCategoryMethod_analyze ((const cPtr_abstractCollectionValueElement *) enumerator_97553.current_mElement (HERE).ptr (), constinArgument_inAnalysisContext, var_targetType, ioArgument_ioVariableMap, var_collectionValueElementListForGeneration, inCompiler COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2132)) ;
          enumerator_97553.gotoNextObject () ;
        }
        outArgument_outExpression = GALGAS_expressionCollectionForGeneration::constructor_new (var_targetType, object->mAttribute_mEndOfCollectionValue, var_collectionValueElementListForGeneration  COMMA_SOURCE_FILE ("semanticExpressionAnalysis.gSemantics", 2139)) ;
      }
    }
  }
}
//-----------------------------------------------------------------------------*

static void defineCategoryMethod_collectionValueAST_analyzeSemanticExpression (void) {
  enterCategoryMethod_analyzeSemanticExpression (kTypeDescriptor_GALGAS_collectionValueAST.mSlotID,
                                                 categoryMethod_collectionValueAST_analyzeSemanticExpression) ;
}

//-----------------------------------------------------------------------------*

C_PrologueEpilogue gMethod_collectionValueAST_analyzeSemanticExpression (defineCategoryMethod_collectionValueAST_analyzeSemanticExpression, NULL) ;

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration_2E_element::GALGAS_collectionValueElementListForGeneration_2E_element (void) :
mAttribute_mElement () {
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration_2E_element::~ GALGAS_collectionValueElementListForGeneration_2E_element (void) {
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration_2E_element::GALGAS_collectionValueElementListForGeneration_2E_element (const GALGAS_abstractCollectionValueElementForGeneration & inOperand0) :
mAttribute_mElement (inOperand0) {
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration_2E_element GALGAS_collectionValueElementListForGeneration_2E_element::constructor_new (const GALGAS_abstractCollectionValueElementForGeneration & inOperand0 
                                                                                                                                      COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_collectionValueElementListForGeneration_2E_element result ;
  if (inOperand0.isValid ()) {
    result = GALGAS_collectionValueElementListForGeneration_2E_element (inOperand0) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

typeComparisonResult GALGAS_collectionValueElementListForGeneration_2E_element::objectCompare (const GALGAS_collectionValueElementListForGeneration_2E_element & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mElement.objectCompare (inOperand.mAttribute_mElement) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

bool GALGAS_collectionValueElementListForGeneration_2E_element::isValid (void) const {
  return mAttribute_mElement.isValid () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration_2E_element::drop (void) {
  mAttribute_mElement.drop () ;
}

//-----------------------------------------------------------------------------*

void GALGAS_collectionValueElementListForGeneration_2E_element::description (C_String & ioString,
                                                                             const int32_t inIndentation) const {
  ioString << "<struct @collectionValueElementListForGeneration.element:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mElement.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//-----------------------------------------------------------------------------*

GALGAS_abstractCollectionValueElementForGeneration GALGAS_collectionValueElementListForGeneration_2E_element::reader_mElement (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mElement ;
}



//-----------------------------------------------------------------------------*
//                                                                             *
//            @collectionValueElementListForGeneration.element type            *
//                                                                             *
//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_collectionValueElementListForGeneration_2E_element ("collectionValueElementListForGeneration.element",
                                                                           NULL) ;

//-----------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_collectionValueElementListForGeneration_2E_element::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_collectionValueElementListForGeneration_2E_element ;
}

//-----------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_collectionValueElementListForGeneration_2E_element::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_collectionValueElementListForGeneration_2E_element (*this)) ;
  }
  return result ;
}

//-----------------------------------------------------------------------------*

GALGAS_collectionValueElementListForGeneration_2E_element GALGAS_collectionValueElementListForGeneration_2E_element::extractObject (const GALGAS_object & inObject,
                                                                                                                                    C_Compiler * inCompiler
                                                                                                                                    COMMA_LOCATION_ARGS) {
  GALGAS_collectionValueElementListForGeneration_2E_element result ;
  const GALGAS_collectionValueElementListForGeneration_2E_element * p = (const GALGAS_collectionValueElementListForGeneration_2E_element *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_collectionValueElementListForGeneration_2E_element *> (p)) {
      result = *p ;
    }else{
      inCompiler->castError ("collectionValueElementListForGeneration.element", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


