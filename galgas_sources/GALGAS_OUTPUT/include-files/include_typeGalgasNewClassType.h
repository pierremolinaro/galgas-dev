//---------------------------------------------------------------------------*
//                                                                           *
//                 File 'include_typeGalgasNewClassType.h'                   *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      april 1st, 2007, at 14h44'42"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*
//                                                                           *
//               abstract class 'cPtr_typeGalgasNewClassType'                *
//                                                                           *
//---------------------------------------------------------------------------*

class cPtr_typeGalgasNewClassType : public cPtr_typeGalgasUndefinedClassType {
  private : typedef cPtr_typeGalgasUndefinedClassType inherited ;
//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//--- Constructor
  public : cPtr_typeGalgasNewClassType (const GGS_lstring & ,
                                const GGS_typeSuperClassesMap & 
                                COMMA_LOCATION_ARGS) ;

//--- Declaring a protected virtual destructor enables the compiler to raise
//    an error if a direct delete is performed; only the static method
//    C_GGS_Object::detachPointer may invoke delete.
  #ifndef DO_NOT_GENERATE_CHECKINGS
    protected : virtual ~cPtr_typeGalgasNewClassType (void) {}
  #endif

//--- Attributes
  public : GGS_typeSuperClassesMap  mSuperClassMap ;
//--- Method for 'description' reader
  public : virtual void
  appendForDescription (C_String & ioString,
                        const PMSInt32 inIndentation) const ;

//--- Comparison
  public : virtual bool
  isEqualToObject (const cPtr__AC_galgas_class * inOperand) const ;
} ;

//---------------------------------------------------------------------------*

