//---------------------------------------------------------------------------*
//                                                                           *
//                   File 'parameterArgumentBuilder.cpp'                     *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 1st, 2008, at 19h12'27"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "parameterArgumentBuilder.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parameterArgumentBuilder.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'formal_parameter_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_formalParameters parameterArgumentBuilder::
parameterArgumentBuilder::
pr_formal_parameter_list_parameterArgumentBuilder_42_4_ (galgas_scanner & _inLexique) {
  GGS__list_formalParameter  var_cas_mFormalParameterList ;
  var_cas_mFormalParameterList = GGS__list_formalParameter::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_parameterArgumentBuilder_0 (_inLexique)) {
        case 2 : {
          var_cas_mFormalParameterList._addAssign_operation (nt_formal_parameter_ (_inLexique)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_formalParameters _entityInstance = GGS_formalParameters::constructor_new (_inLexique, var_cas_mFormalParameterList COMMA_HERE) ;
  return _entityInstance ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'formal_parameter'            *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_formalParameter parameterArgumentBuilder::
parameterArgumentBuilder::
pr_formal_parameter_parameterArgumentBuilder_51_4_ (galgas_scanner & _inLexique) {
  GGS_lstring  var_cas_mFormalParameterName ;
  GGS_formalArgumentPassingMode var_cas_mFormalParameterPassingMode ;
  GGS_lstring  var_cas_mFormalParameterTypeName ;
  GGS_bool var_cas_mIsUnused ;
  switch (select_parameterArgumentBuilder_1 (_inLexique)) {
    case 1 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F) COMMA_HERE) ;
      var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingMode::constructor_argumentIn (_inLexique COMMA_HERE) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_3F) COMMA_HERE) ;
      var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingMode::constructor_argumentConstantIn (_inLexique COMMA_HERE) ;
      } break ;
    case 3 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F_21) COMMA_HERE) ;
      var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingMode::constructor_argumentInOut (_inLexique COMMA_HERE) ;
      } break ;
    case 4 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
      var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingMode::constructor_argumentOut (_inLexique COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  _inLexique._assignFromAttribute_tokenString (var_cas_mFormalParameterTypeName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_type_5Fname) COMMA_HERE) ;
  switch (select_parameterArgumentBuilder_2 (_inLexique)) {
    case 1 : {
      var_cas_mIsUnused = GGS_bool (true, false) ;
      } break ;
    case 2 : {
      _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
      var_cas_mIsUnused = GGS_bool (true, true) ;
      } break ;
    default :
      break ;
  }
  _inLexique._assignFromAttribute_tokenString (var_cas_mFormalParameterName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_formalParameter _entityInstance = GGS_formalParameter::constructor_new (_inLexique, var_cas_mFormalParameterPassingMode, var_cas_mFormalParameterTypeName, var_cas_mFormalParameterName, var_cas_mIsUnused COMMA_HERE) ;
  return _entityInstance ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'actual_parameter_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_actualParameters parameterArgumentBuilder::
parameterArgumentBuilder::
pr_actual_parameter_list_parameterArgumentBuilder_81_4_ (galgas_scanner & _inLexique) {
  GGS__list_actualParameter  var_cas_mActualParameter ;
  var_cas_mActualParameter = GGS__list_actualParameter::constructor_emptyList (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_repeat_parameterArgumentBuilder_3 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F) COMMA_HERE) ;
          switch (select_parameterArgumentBuilder_4 (_inLexique)) {
            case 1 : {
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              var_cas_mActualParameter._addAssign_operation (GGS_inputJokerActualParameter::constructor_new (_inLexique COMMA_HERE)) ;
              } break ;
            case 2 : {
              GGS_luint  var_cas_count ;
              _inLexique._assignFromAttribute_uint32value (var_cas_count) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unsigned_5Fliteral_5Finteger) COMMA_HERE) ;
              _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2A) COMMA_HERE) ;
              GGS_uint  var_cas_n ;
              var_cas_n = var_cas_count.reader_uint (_inLexique COMMA_SOURCE_FILE_AT_LINE (92)) ;
              if (((var_cas_n)._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
                var_cas_count.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "the count value should be > 0") COMMA_SOURCE_FILE_AT_LINE (94)) ;
              }else{
                GGS_uint _variant_4179 = var_cas_n ;
                GGS_bool _condition_4179 (_variant_4179._isBuilt (), true) ;
                while (_condition_4179.isBuiltAndTrue ()) {
                  _condition_4179 = (var_cas_n)._operator_strictSup (GGS_uint (true, 0U)) ;
                  if (_condition_4179.isBuiltAndTrue ()) {
                    if (_variant_4179.uintValue () == 0) {
                      _inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (99)) ;
                      _condition_4179 = GGS_bool (true, false) ;
                    }else{
                      _variant_4179._decrement_operation (_inLexique COMMA_HERE) ;
                      var_cas_mActualParameter._addAssign_operation (GGS_inputJokerActualParameter::constructor_new (_inLexique COMMA_HERE)) ;
                      var_cas_n._decrement_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (99)) ;
                    }
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21) COMMA_HERE) ;
          GGS_semanticExpression  var_cas_e ;
          var_cas_e = nt_expression_ (_inLexique) ;
          var_cas_mActualParameter._addAssign_operation (GGS_outputActualParameter::constructor_new (_inLexique, var_cas_e COMMA_HERE)) ;
          } break ;
        case 4 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__21_3F) COMMA_HERE) ;
          GGS_lstring  var_cas_outputInputActualParameterName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_outputInputActualParameterName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_mActualParameter._addAssign_operation (GGS_outputInputActualParameter::constructor_new (_inLexique, var_cas_outputInputActualParameterName COMMA_HERE)) ;
          } break ;
        case 5 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3F) COMMA_HERE) ;
          GGS_lstring  var_cas_inputActualParameterName ;
          _inLexique._assignFromAttribute_tokenString (var_cas_inputActualParameterName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          var_cas_mActualParameter._addAssign_operation (GGS_inputActualParameter::constructor_new (_inLexique, var_cas_inputActualParameterName COMMA_HERE)) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
  GGS_actualParameters _entityInstance = GGS_actualParameters::constructor_new (_inLexique, var_cas_mActualParameter COMMA_HERE) ;
  return _entityInstance ;
}

//---------------------------------------------------------------------------*

