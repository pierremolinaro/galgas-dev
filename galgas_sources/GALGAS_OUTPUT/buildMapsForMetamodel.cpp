//---------------------------------------------------------------------------*
//                                                                           *
//                     File 'buildMapsForMetamodel.cpp'                      *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     august 30th, 2007, at 14h41'32"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//#define TRACE_TREE_WALKING

//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "buildMapsForMetamodel.h"
#include "buildMapsForSemantics.h"
#include "commonSemantics.h"
#include "mda_galgas_LL1_routines.h"
#include "metamodelLL1grammar.h"
#include "semanticsSLRgrammar.h"
#include "semanticsSemantics.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "buildMapsForMetamodel.gTreewalking", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Treewalking routine prototype declaration                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_metamodelComponentRoot (C_Compiler & _inLexique,
                                const cPtr_metamodelComponentRoot * _currentObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) ;

static void
_treewalking_routine_metamodelEntity (C_Compiler & _inLexique,
                                const cPtr_metamodelEntity * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_typeList  & var_cas_ioTypeList,
                                GGS_uint  & var_cas_ioEntityIndex) ;

static void
_treewalking_routine_metamodelProperty (C_Compiler & _inLexique,
                                const cPtr_metamodelProperty * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_attributeList  & var_cas_ioPropertyList) ;

static void
_treewalking_routine_metamodelMultipleReference (C_Compiler & _inLexique,
                                const cPtr_metamodelMultipleReference * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_attributeList  & var_cas_ioPropertyList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Treewalking routine type declaration                    *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void
_treewalking_routine_metamodelComponentRoot_type (C_Compiler & _inLexique,
                                const cPtr_metamodelComponentRoot * _currentObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) ;

typedef void
_treewalking_routine_metamodelEntity_type (C_Compiler & _inLexique,
                                const cPtr_metamodelEntity * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_typeList  & var_cas_ioTypeList,
                                GGS_uint  & var_cas_ioEntityIndex) ;

typedef void
_treewalking_routine_metamodelProperty_type (C_Compiler & _inLexique,
                                const cPtr_metamodelProperty * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_attributeList  & var_cas_ioPropertyList) ;

typedef void
_treewalking_routine_metamodelMultipleReference_type (C_Compiler & _inLexique,
                                const cPtr_metamodelMultipleReference * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_attributeList  & var_cas_ioPropertyList) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Dispatcher tables                              *
//                                                                           *
//---------------------------------------------------------------------------*


static const uint32 _kSize_metamodelMetamodel = 4 ;

static const CTreewalkingVirtualMethod _kDispatcherFor_metamodelMetamodel [_kSize_metamodelMetamodel] = {
  {0, (void *) _treewalking_routine_metamodelComponentRoot}, // @metamodelComponentRoot, defined in 'metamodelMetamodel' metamodel
  {1, (void *) _treewalking_routine_metamodelEntity}, // @metamodelEntity, defined in 'metamodelMetamodel' metamodel
  {2, (void *) _treewalking_routine_metamodelProperty}, // @metamodelProperty, defined in 'metamodelMetamodel' metamodel
  {3, (void *) _treewalking_routine_metamodelMultipleReference}, // @metamodelMultipleReference, defined in 'metamodelMetamodel' metamodel
} ;

//---------------------------------------------------------------------------*

static C_TreewalkingDispacher _gDispatcherTree ;

//---------------------------------------------------------------------------*
//                                                                           *
//       'metamodelComponentRoot' treewalking routine implementation         *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_metamodelComponentRoot (C_Compiler & _inLexique,
                                const cPtr_metamodelComponentRoot * _currentObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @metamodelComponentRoot\n") ; fflush (stdout) ;
  #endif
  const GGS_lstringlist _var_2358 = _currentObject->mSuperMetamodels ;
  const GGS_lstringlist::element_type * operand_2358 = _var_2358.firstObject () ;
  while ((operand_2358 != NULL)) {
    macroValidPointer (operand_2358) ;
    if (((var_cas_ioImportedComponentSet.reader_hasKey (_inLexique, operand_2358->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (42)) COMMA_SOURCE_FILE_AT_LINE (42)))._operator_not ()).isBuiltAndTrue ()) {
      if (((operand_2358->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)))._operator_isNotEqual (_currentObject->mMetamodelComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (43)))).isBuiltAndTrue ()) {
        GGS_lstring  var_cas_sourceFilePath ;
        var_cas_sourceFilePath = GGS_lstring::constructor_new (_inLexique, (((var_cas_inSourceFileDirectory)._operator_concat (GGS_string (true, "/")))._operator_concat (operand_2358->mValue))._operator_concat (GGS_string (true, ".gMetamodel")), var_cas_inErrorLocation COMMA_HERE) ;
        GGS_metamodelComponentRoot  var_cas_metamodemComponentRoot ;
        GGS_location  var_cas_endOfSourceFile ;
          var_cas_metamodemComponentRoot = metamodelLL1grammar::_performParsing (_inLexique,
                                        var_cas_sourceFilePath,
                                        var_cas_endOfSourceFile
                                        COMMA_SOURCE_FILE_AT_LINE (50)) ;
        GGS_typeList  var_cas_unusedTypeList ;
        _walk_throught_buildMapsForMetamodel (_inLexique, var_cas_metamodemComponentRoot, var_cas_inSourceFileDirectory, var_cas_inErrorLocation, var_cas_ioImportedComponentSet, var_cas_ioTypeMap, var_cas_ioRoutineMap, var_cas_unusedTypeList) ;
      }
      var_cas_ioImportedComponentSet._addAssign_operation (operand_2358->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (61))) ;
    }
    operand_2358 = operand_2358->nextObject () ;
  }
  const GGS_lstringlist _var_3347 = _currentObject->mMetamodelImportedComponents ;
  const GGS_lstringlist::element_type * operand_3347 = _var_3347.firstObject () ;
  while ((operand_3347 != NULL)) {
    macroValidPointer (operand_3347) ;
    if (((var_cas_ioImportedComponentSet.reader_hasKey (_inLexique, operand_3347->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (66)) COMMA_SOURCE_FILE_AT_LINE (66)))._operator_not ()).isBuiltAndTrue ()) {
      if (((operand_3347->mValue.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)))._operator_isNotEqual (_currentObject->mMetamodelComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (67)))).isBuiltAndTrue ()) {
        GGS_lstring  var_cas_sourceFilePath ;
        var_cas_sourceFilePath = GGS_lstring::constructor_new (_inLexique, ((var_cas_inSourceFileDirectory)._operator_concat (GGS_string (true, "/")))._operator_concat (operand_3347->mValue), var_cas_inErrorLocation COMMA_HERE) ;
        GGS_string var_cas_extension ;
        var_cas_extension = operand_3347->mValue.ggs_string ().reader_pathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (72)) ;
        if (((var_cas_extension)._operator_isEqual (GGS_string (true, "gSemantics"))).isBuiltAndTrue ()) {
          GGS_semanticsComponentRoot  var_cas_semanticsComponentRoot ;
          GGS_location  var_cas_endOfSourceFile ;
            var_cas_semanticsComponentRoot = semanticsSLRgrammar::_performParsing (_inLexique,
                                          var_cas_sourceFilePath,
                                          var_cas_endOfSourceFile
                                          COMMA_SOURCE_FILE_AT_LINE (76)) ;
          GGS_typeList  var_cas_unusedTypeList ;
          _walk_throught_buildMapsForSemantics (_inLexique, var_cas_semanticsComponentRoot, var_cas_inSourceFileDirectory, var_cas_inErrorLocation, var_cas_ioImportedComponentSet, var_cas_ioTypeMap, var_cas_ioRoutineMap, var_cas_unusedTypeList) ;
        }else{
          operand_3347->mValue.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "only a semantics component can be imported in a metamodel") COMMA_SOURCE_FILE_AT_LINE (87)) ;
        }
      }
      var_cas_ioImportedComponentSet._addAssign_operation (operand_3347->mValue.ggs_string ().reader_stringByDeletingPathExtension (_inLexique COMMA_SOURCE_FILE_AT_LINE (90))) ;
    }
    operand_3347 = operand_3347->nextObject () ;
  }
  if ((var_cas_ioImportedComponentSet.reader_hasKey (_inLexique, _currentObject->mMetamodelComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (94)) COMMA_SOURCE_FILE_AT_LINE (94))).isBuiltAndTrue ()) {
    _currentObject->mMetamodelComponentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this component is involved in a circularity in 'extends' definitions") COMMA_SOURCE_FILE_AT_LINE (95)) ;
    var_cas_outTypeList._drop_operation () ;
  }else{
    var_cas_outTypeList = GGS_typeList::constructor_emptyList (_inLexique COMMA_HERE) ;
    GGS_uint  var_cas_entityIndex ;
    var_cas_entityIndex = GGS_uint (true, 0U) ;
    macroValidPointer (_currentObject) ;
    { AC_galgas_entity_list::cEntityListElement * _ptr = _currentObject->mMetamodelEntities.firstObject () ;
      while (_ptr != NULL) {
        _treewalking_routine_metamodelEntity_type * _f = (_treewalking_routine_metamodelEntity_type *) _gDispatcherTree.entry (_ptr->ptr () COMMA_HERE) ;
        MF_Assert (dynamic_cast <cPtr_metamodelEntity *> (_ptr->ptr ()) != NULL, "Treewalking dispatch error", 0, 0) ;
        (* _f) (_inLexique, (cPtr_metamodelEntity *) _ptr->ptr (), var_cas_ioTypeMap, var_cas_outTypeList, var_cas_entityIndex) ;
        _ptr = _ptr->internalNextItem () ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           'metamodelEntity' treewalking routine implementation            *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_metamodelEntity (C_Compiler & _inLexique,
                                const cPtr_metamodelEntity * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_typeList  & var_cas_ioTypeList,
                                GGS_uint  & var_cas_ioEntityIndex) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @metamodelEntity\n") ; fflush (stdout) ;
  #endif
  GGS_typeMapIndex  var_cas_superEntityIndex ;
  if (((_currentObject->mSuperEntityName.ggs_string ().reader_length (_inLexique COMMA_SOURCE_FILE_AT_LINE (112)))._operator_isEqual (GGS_uint (true, 0U))).isBuiltAndTrue ()) {
    var_cas_superEntityIndex = GGS_typeMapIndex::constructor_null (_inLexique COMMA_HERE) ;
  }else{
    GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, _currentObject->mSuperEntityName, var_cas_ioTypeMap, var_cas_superEntityIndex COMMA_SOURCE_FILE_AT_LINE (115)) ;
  }
  GGS_attributeList  var_cas_propertyList ;
  var_cas_propertyList = GGS_attributeList::constructor_emptyList (_inLexique COMMA_HERE) ;
  macroValidPointer (_currentObject) ;
  { AC_galgas_entity_list::cEntityListElement * _ptr = _currentObject->mProperties.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_metamodelProperty_type * _f = (_treewalking_routine_metamodelProperty_type *) _gDispatcherTree.entry (_ptr->ptr () COMMA_HERE) ;
      MF_Assert (dynamic_cast <cPtr_metamodelProperty *> (_ptr->ptr ()) != NULL, "Treewalking dispatch error", 0, 0) ;
      (* _f) (_inLexique, (cPtr_metamodelProperty *) _ptr->ptr (), var_cas_ioTypeMap, var_cas_propertyList) ;
      _ptr = _ptr->internalNextItem () ;
    }
  }
  const GGS_lstringlist _var_5621 = _currentObject->mEntityNameList ;
  const GGS_lstringlist::element_type * operand_5621 = _var_5621.firstObject () ;
  while ((operand_5621 != NULL)) {
    macroValidPointer (operand_5621) ;
    GGS_ACGalgasType  var_cas_t ;
    var_cas_t = GGS_entityGalgasType::constructor_new (_inLexique, _currentObject->mIsAbstract, operand_5621->mValue, var_cas_superEntityIndex, var_cas_propertyList, var_cas_ioEntityIndex COMMA_HERE) ;
    var_cas_ioEntityIndex._increment_operation (_inLexique COMMA_SOURCE_FILE_AT_LINE (129)) ;
    var_cas_ioTypeMap.modifier_insertKey (_inLexique, operand_5621->mValue, var_cas_t COMMA_SOURCE_FILE_AT_LINE (130)) ;
    var_cas_ioTypeList._addAssign_operation (var_cas_t) ;
    var_cas_t = GGS_multipleReferenceGalgasType::constructor_new (_inLexique, operand_5621->mValue COMMA_HERE) ;
    var_cas_ioTypeMap.modifier_insertKey (_inLexique, GGS_lstring::constructor_new (_inLexique, (GGS_string (true, "_list_"))._operator_concat (operand_5621->mValue), operand_5621->mValue.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (136)) COMMA_HERE), var_cas_t COMMA_SOURCE_FILE_AT_LINE (135)) ;
    operand_5621 = operand_5621->nextObject () ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          'metamodelProperty' treewalking routine implementation           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_metamodelProperty (C_Compiler & _inLexique,
                                const cPtr_metamodelProperty * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_attributeList  & var_cas_ioPropertyList) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @metamodelProperty\n") ; fflush (stdout) ;
  #endif
  GGS_typeMapIndex  var_cas_typeIndex ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, _currentObject->mAttributeTypeName, var_cas_ioTypeMap, var_cas_typeIndex COMMA_SOURCE_FILE_AT_LINE (149)) ;
  var_cas_ioPropertyList._addAssign_operation (var_cas_typeIndex, _currentObject->mAttributeName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     'metamodelMultipleReference' treewalking routine implementation       *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_metamodelMultipleReference (C_Compiler & _inLexique,
                                const cPtr_metamodelMultipleReference * _currentObject,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_attributeList  & var_cas_ioPropertyList) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @metamodelMultipleReference\n") ; fflush (stdout) ;
  #endif
  GGS_typeMapIndex  var_cas_typeIndex ;
  GGS_typeMapIndex::class_method_makeRegularIndex (_inLexique, GGS_lstring::constructor_new (_inLexique, (GGS_string (true, "_list_"))._operator_concat (_currentObject->mAttributeTypeName), _currentObject->mAttributeTypeName.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (161)) COMMA_HERE), var_cas_ioTypeMap, var_cas_typeIndex COMMA_SOURCE_FILE_AT_LINE (160)) ;
  var_cas_ioPropertyList._addAssign_operation (var_cas_typeIndex, _currentObject->mAttributeName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Build Dispatcher Tree                            *
//                                                                           *
//---------------------------------------------------------------------------*

static void _build_dispacher_tree (void) {
  _gDispatcherTree.enterTable (_metamodel_index_for_metamodelMetamodel (),
                                _kSize_metamodelMetamodel,
                                _kDispatcherFor_metamodelMetamodel
                                COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                               Root routine                                *
//                                                                           *
//---------------------------------------------------------------------------*

void
_walk_throught_buildMapsForMetamodel (C_Compiler & _inLexique,
                                const GGS_metamodelComponentRoot & _rootObject,
                                const GGS_string  var_cas_inSourceFileDirectory,
                                const GGS_location   var_cas_inErrorLocation,
                                GGS_stringset  & var_cas_ioImportedComponentSet,
                                GGS_typeMap  & var_cas_ioTypeMap,
                                GGS_routineMap  & var_cas_ioRoutineMap,
                                GGS_typeList  & var_cas_outTypeList) {
  if (_rootObject._isBuilt ()) {
    if (! _gDispatcherTree.isInited ()) {
      _build_dispacher_tree () ;
    }
    _treewalking_routine_metamodelComponentRoot_type * _f = (_treewalking_routine_metamodelComponentRoot_type *) _gDispatcherTree.entry (_rootObject.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _rootObject.getPtr (), var_cas_inSourceFileDirectory, var_cas_inErrorLocation, var_cas_ioImportedComponentSet, var_cas_ioTypeMap, var_cas_ioRoutineMap, var_cas_outTypeList) ;
  }else{
    var_cas_outTypeList._drop_operation () ;
  }
}

//---------------------------------------------------------------------------*

