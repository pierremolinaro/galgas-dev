//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      march 25th, 2010, at 18h10'41"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammar_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammar_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractSyntaxInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1> gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1.forceObjectAtIndex (inClassID, inRoutine, NULL COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1
findCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (AC_galgasClassRunTimeInformationEX * inClassPtr) {
  typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1.count ()) {
    result = gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (NULL == result) {
    AC_galgasClassRunTimeInformationEX * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (superClassPtr) ;
      gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1.forceObjectAtIndex (inClassPtr->slotID (), result, NULL COMMA_HERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "fixSyntaxInstructionList_V1"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const GGS_syntaxInstructionListForGrammarAnalysis   var_cas_inInstructionList,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_outSyntaxInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_fixSyntaxInstructionList_V1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outSyntaxInstructionList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  {
    GGS_syntaxInstructionListForGrammarAnalysis::cEnumerator enumerator_2776 (var_cas_inInstructionList, true) ;
    const GGS_syntaxInstructionListForGrammarAnalysis::cElement * operand_2776 = NULL ;
    while (((operand_2776 = enumerator_2776.nextObject ()))) {
      macroValidPointer (operand_2776) ;
      const GGS_abstractSyntaxInstructionForGrammarAnalysis  temp_2825 = operand_2776->mInstruction ;
      if (temp_2825.isBuilt ()) {
        typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 method = findCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (temp_2825.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_2825 (HERE), var_cas_ioActuallyUsedTerminalSymbolMap, var_cas_inNonTerminalSymbolMap, var_cas_ioAddedNonTerminalIndex, var_cas_outSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (50)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_fixSyntaxInstructionList_V1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_terminalInstructionForGrammarAnalysis * operand_3160,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   /* var_cas_inNonTerminalSymbolMap */,
                                GGS_uint  & /* var_cas_ioAddedNonTerminalIndex */,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3160 != NULL) {
    GGS_uint  var_cas_terminalSymbolIndex ;
    elementOf_GGS_terminalSymbolsMapForGrammarAnalysis * operand_3491 = (elementOf_GGS_terminalSymbolsMapForGrammarAnalysis *) var_cas_ioActuallyUsedTerminalSymbolMap.searchForTolerantWithInstruction (operand_3160->mTerminalSymbolName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
    if (NULL != operand_3491) {
      var_cas_terminalSymbolIndex = operand_3491->mInfo.mTerminalIndex ;
    }else{
      var_cas_terminalSymbolIndex = var_cas_ioActuallyUsedTerminalSymbolMap.reader_count () ;
      var_cas_ioActuallyUsedTerminalSymbolMap.modifier_insertKey (inLexique, operand_3160->mTerminalSymbolName, var_cas_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (72)) ;
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_terminalInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_3160->mStartLocation, operand_3160->mTerminalSymbolName, var_cas_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (74))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonTerminalInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonTerminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_nonTerminalInstructionForGrammarAnalysis * operand_4087,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & /* var_cas_ioActuallyUsedTerminalSymbolMap */,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & /* var_cas_ioAddedNonTerminalIndex */,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4087 != NULL) {
    GGS_uint  var_cas_nonTerminalSymbolIndex ;
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_4468_0 ;
    const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_4416 = var_cas_inNonTerminalSymbolMap ;
    if (temp_4416.isBuilt ()) {
      temp_4416 (HERE)->method_searchKey (inLexique, operand_4087->mNonterminalSymbolName, var_cas_nonTerminalSymbolIndex, automatic_var_4468_0 COMMA_SOURCE_FILE_AT_LINE (90)) ;
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_nonTerminalInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_4087->mStartLocation, operand_4087->mNonterminalSymbolName, var_cas_nonTerminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (91))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@repeatInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_repeatInstructionForGrammarAnalysis * operand_4803,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4803 != NULL) {
    const GGS_uint  var_cas_addedNonTerminalIndex = var_cas_ioAddedNonTerminalIndex ;
    var_cas_ioAddedNonTerminalIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
    GGS_branchListForGrammarAnalysis  var_cas_repeatBranchList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
    {
      GGS_branchListForGrammarAnalysis::cEnumerator enumerator_5236 (operand_4803->mRepeatBranchList, true) ;
      const GGS_branchListForGrammarAnalysis::cElement * operand_5236 = NULL ;
      while (((operand_5236 = enumerator_5236.nextObject ()))) {
        macroValidPointer (operand_5236) ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxInstructionList ;
        ::routine_fixSyntaxInstructionList_V1 (inLexique,  operand_5236->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (111)) ;
        var_cas_repeatBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_repeatInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_4803->mStartLocation, var_cas_repeatBranchList, var_cas_addedNonTerminalIndex COMMA_SOURCE_FILE_AT_LINE (120))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@selectInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_selectInstructionForGrammarAnalysis * operand_5893,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5893 != NULL) {
    const GGS_uint  var_cas_addedNonTerminalIndex = var_cas_ioAddedNonTerminalIndex ;
    var_cas_ioAddedNonTerminalIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
    GGS_branchListForGrammarAnalysis  var_cas_selectBranchList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
    {
      GGS_branchListForGrammarAnalysis::cEnumerator enumerator_6326 (operand_5893->mSelectBranchList, true) ;
      const GGS_branchListForGrammarAnalysis::cElement * operand_6326 = NULL ;
      while (((operand_6326 = enumerator_6326.nextObject ()))) {
        macroValidPointer (operand_6326) ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxInstructionList ;
        ::routine_fixSyntaxInstructionList_V1 (inLexique,  operand_6326->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (140)) ;
        var_cas_selectBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_selectInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_5893->mStartLocation, var_cas_selectBranchList, var_cas_addedNonTerminalIndex COMMA_SOURCE_FILE_AT_LINE (149))) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void grammar_parser::rule_grammar_5F_parser_galgas_5F_component_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("in GALGAS 1.9.3 and later, uses '.gGrammar' extension instead of '.ggs'") COMMA_SOURCE_FILE_AT_LINE (230)) ;
  GGS_string var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (230)).reader_lastPathComponent ().reader_stringByDeletingPathExtension () ;
  const GGS_bool cond_9626 = (var_cas_grammarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (231))).operator_isNotEqual (var_cas_basename) ;
  if (cond_9626.isBuiltAndTrue ()) {
    var_cas_grammarName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_grammarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (233)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (236)) ;
  }
  GGS_lstring  var_cas_grammarClass ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarClass) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_grammar_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_5F_lexique_5F_infos_ (inLexique, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_stringset  var_cas_classesNamesSet = GGS_stringset ::constructor_emptySet () ;
  GGS_syntaxComponentListForGrammarAnalysis  var_cas_syntaxComponentsList = GGS_syntaxComponentListForGrammarAnalysis ::constructor_emptyList () ;
  GGS_nonTerminalSymbolMapForGrammarAnalysis  var_cas_nonterminalSymbolsMapForGrammar = GGS_nonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (258)) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
        switch (select_grammar_5F_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_5F_parser_3 (inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  temp_10562 = var_cas_ioOptionsComponentsMap ;
                if (temp_10562.isBuilt ()) {
                  temp_10562 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (269)) ;
                }
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (274)) ;
                nt_parse_5F_option_5F_component_5F_for_5F_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  temp_10959 = var_cas_importedOptionComponentsMap ;
                if (temp_10959.isBuilt ()) {
                  temp_10959 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (279)) ;
                }
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            const GGS_bool cond_11272 = (var_cas_ioOptionsComponentsMap.reader_hasKey (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (282)))).operator_not () ;
            if (cond_11272.isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (283)) ;
            }
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
            GGS_lstring  var_cas_syntaxComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            switch (select_grammar_5F_parser_4 (inLexique)) {
              case 1 : {
                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (296)) ;
                nt_parse_5F_syntax_5F_for_5F_importing_ (inLexique, var_cas_fileName, var_cas_syntaxComponentsMap, var_cas_ioSemanticContext) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            GGS_nonTerminalSymbolMapForGrammarAnalysis  var_cas_importedNonterminalSymbolsMap ;
            GGS_productionRuleListForGrammarAnalysis  var_cas_importedProductionRulesList ;
            GGS_lstring  var_cas_importedLexiqueComponentName ;
            const GGS_M_syntaxComponents  temp_12083 = var_cas_syntaxComponentsMap ;
            if (temp_12083.isBuilt ()) {
              temp_12083 (HERE)->method_searchKey (inLexique, var_cas_syntaxComponentName, var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedLexiqueComponentName COMMA_SOURCE_FILE_AT_LINE (308)) ;
            }
            const GGS_bool cond_12453 = (var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (314))).operator_isNotEqual (var_cas_importedLexiqueComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (314))) ;
            if (cond_12453.isBuiltAndTrue ()) {
              var_cas_syntaxComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this component does not use the previously declared lexique") COMMA_SOURCE_FILE_AT_LINE (316)) ;
            }
            var_cas_syntaxComponentsList.addAssign_operation (var_cas_importedProductionRulesList, var_cas_syntaxComponentName) ;
            {
              GGS_nonTerminalSymbolMapForGrammarAnalysis::cEnumerator enumerator_12712 (var_cas_importedNonterminalSymbolsMap, true) ;
              const GGS_nonTerminalSymbolMapForGrammarAnalysis::cElement * operand_12712 = NULL ;
              while (((operand_12712 = enumerator_12712.nextObject ()))) {
                macroValidPointer (operand_12712) ;
                const GGS_bool cond_13630 = var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (operand_12712->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (324))) ;
                if (cond_13630.isBuiltAndTrue ()) {
                  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_altSignatureMap ;
                  GGS_uint  automatic_var_12968_0 ;
                  const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_12936 = var_cas_nonterminalSymbolsMapForGrammar ;
                  if (temp_12936.isBuilt ()) {
                    temp_12936 (HERE)->method_searchKey (inLexique, operand_12712->mKey, automatic_var_12968_0, var_cas_altSignatureMap COMMA_SOURCE_FILE_AT_LINE (326)) ;
                  }
                  {
                    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_13004 (var_cas_altSignatureMap, true) ;
                    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_13004 = NULL ;
                    while (((operand_13004 = enumerator_13004.nextObject ()))) {
                      macroValidPointer (operand_13004) ;
                      GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_temp = operand_12712->mInfo.mNonterminalSymbolParametersMap ;
                      GGS_signatureForGrammarAnalysis  var_cas_importedAltSignature ;
                      const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_13204 = var_cas_temp ;
                      if (temp_13204.isBuilt ()) {
                        temp_13204 (HERE)->method_searchKey (inLexique, operand_13004->mKey, var_cas_importedAltSignature COMMA_SOURCE_FILE_AT_LINE (330)) ;
                      }
                      ::routine_checkSignature_ForGrammarComponent (inLexique,  var_cas_importedAltSignature,  operand_13004->mInfo.mFormalParametersList,  operand_13004->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (331)),  operand_13004->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (331)) COMMA_SOURCE_FILE_AT_LINE (331)) ;
                    }
                  }
                  {
                    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_13440 (operand_12712->mInfo.mNonterminalSymbolParametersMap, true) ;
                    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_13440 = NULL ;
                    while (((operand_13440 = enumerator_13440.nextObject ()))) {
                      macroValidPointer (operand_13440) ;
                      const GGS_bool cond_13588 = (operand_13440->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (334))).operator_isNotEqual (GGS_string ("parse")) ;
                      if (cond_13588.isBuiltAndTrue ()) {
                        GGS_signatureForGrammarAnalysis  automatic_var_13570_0 ;
                        const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_13554 = var_cas_altSignatureMap ;
                        if (temp_13554.isBuilt ()) {
                          temp_13554 (HERE)->method_searchKey (inLexique, operand_13440->mKey, automatic_var_13570_0 COMMA_SOURCE_FILE_AT_LINE (335)) ;
                        }
                      }
                    }
                  }
                }else if (cond_13630.isBuiltAndFalse ()) {
                  var_cas_nonterminalSymbolsMapForGrammar.modifier_insertKey (inLexique, operand_12712->mKey, var_cas_nonterminalSymbolsMapForGrammar.reader_count (), operand_12712->mInfo.mNonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (339)) ;
                }
              }
            }
            } break ;
          default :
            break ;
        }
      switch (select_grammar_5F_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_root) COMMA_HERE) ;
  GGS_lstring  var_cas_startSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_startSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_bool var_cas_startSymbolHasParseLabel = GGS_bool (false) ;
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_grammarAltMap = GGS_nonterminalSymbolLabelMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (351)) ;
  GGS_signatureForGrammarAnalysis  var_cas_signature ;
  nt_formal_5F_arguments_5F_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
  var_cas_grammarAltMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (354)), var_cas_signature COMMA_SOURCE_FILE_AT_LINE (354)) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_grammar_5F_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_grammar_5F_parser_6 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_altName ;
              inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_labelSignature ;
              nt_formal_5F_arguments_5F_list_importGrammarForSemantics (inLexique, var_cas_labelSignature) ;
              var_cas_grammarAltMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_labelSignature COMMA_SOURCE_FILE_AT_LINE (362)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              const GGS_bool cond_14671 = var_cas_startSymbolHasParseLabel ;
              if (cond_14671.isBuiltAndTrue ()) {
                GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("'parse' label has been already declared") COMMA_SOURCE_FILE_AT_LINE (367)) ;
              }
              var_cas_startSymbolHasParseLabel = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  GGS_terminalSymbolsMapForGrammarAnalysis  var_cas_actuallyUsedTerminalSymbolMap = GGS_terminalSymbolsMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (373)) ;
  GGS_uint  var_cas_addedNonTerminalCount = GGS_uint (0U) ;
  GGS_syntaxComponentListForGrammarAnalysis  var_cas_syntaxComponentsListWithFixedInfos = GGS_syntaxComponentListForGrammarAnalysis ::constructor_emptyList () ;
  {
    GGS_syntaxComponentListForGrammarAnalysis::cEnumerator enumerator_15059 (var_cas_syntaxComponentsList, true) ;
    const GGS_syntaxComponentListForGrammarAnalysis::cElement * operand_15059 = NULL ;
    while (((operand_15059 = enumerator_15059.nextObject ()))) {
      macroValidPointer (operand_15059) ;
      GGS_productionRuleListForGrammarAnalysis  var_cas_fixedProductionRuleList = GGS_productionRuleListForGrammarAnalysis ::constructor_emptyList () ;
      {
        GGS_productionRuleListForGrammarAnalysis::cEnumerator enumerator_15175 (operand_15059->mProductionRulesList, true) ;
        const GGS_productionRuleListForGrammarAnalysis::cElement * operand_15175 = NULL ;
        while (((operand_15175 = enumerator_15175.nextObject ()))) {
          macroValidPointer (operand_15175) ;
          GGS_syntaxInstructionListForGrammarAnalysis  var_cas_fixedInstructionList ;
          ::routine_fixSyntaxInstructionList_V1 (inLexique,  operand_15175->mInstructionList,  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_addedNonTerminalCount,  var_cas_fixedInstructionList COMMA_SOURCE_FILE_AT_LINE (380)) ;
          GGS_uint  var_cas_nonTerminalIndex ;
          GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_15585_0 ;
          const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_15539 = var_cas_nonterminalSymbolsMapForGrammar ;
          if (temp_15539.isBuilt ()) {
            temp_15539 (HERE)->method_searchKey (inLexique, operand_15175->mLeftNonterminalSymbol, var_cas_nonTerminalIndex, automatic_var_15585_0 COMMA_SOURCE_FILE_AT_LINE (388)) ;
          }
          var_cas_fixedProductionRuleList.addAssign_operation (operand_15175->mLeftNonterminalSymbol, var_cas_nonTerminalIndex, var_cas_fixedInstructionList, operand_15175->mProductionIndex) ;
        }
      }
      var_cas_syntaxComponentsListWithFixedInfos.addAssign_operation (var_cas_fixedProductionRuleList, operand_15059->mSyntaxComponentName) ;
    }
  }
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_startSymbolAltMap ;
  GGS_uint  var_cas_startSymbolIndex ;
  const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_16067 = var_cas_nonterminalSymbolsMapForGrammar ;
  if (temp_16067.isBuilt ()) {
    temp_16067 (HERE)->method_searchKey (inLexique, var_cas_startSymbolName, var_cas_startSymbolIndex, var_cas_startSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (404)) ;
  }
  {
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_16192 (var_cas_startSymbolAltMap, true) ;
    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_16192 = NULL ;
    while (((operand_16192 = enumerator_16192.nextObject ()))) {
      macroValidPointer (operand_16192) ;
      GGS_signatureForGrammarAnalysis  var_cas_altMap ;
      const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_16266 = var_cas_grammarAltMap ;
      if (temp_16266.isBuilt ()) {
        temp_16266 (HERE)->method_searchKey (inLexique, operand_16192->mKey, var_cas_altMap COMMA_SOURCE_FILE_AT_LINE (408)) ;
      }
      ::routine_checkSignature_ForGrammarComponent (inLexique,  operand_16192->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (inLexique),  operand_16192->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (409)) COMMA_SOURCE_FILE_AT_LINE (409)) ;
    }
  }
  {
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_16416 (var_cas_grammarAltMap, true) ;
    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_16416 = NULL ;
    while (((operand_16416 = enumerator_16416.nextObject ()))) {
      macroValidPointer (operand_16416) ;
      GGS_signatureForGrammarAnalysis  automatic_var_16461_0 ;
      const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_16452 = var_cas_startSymbolAltMap ;
      if (temp_16452.isBuilt ()) {
        temp_16452 (HERE)->method_searchKey (inLexique, operand_16416->mKey, automatic_var_16461_0 COMMA_SOURCE_FILE_AT_LINE (412)) ;
      }
    }
  }
  GGS_unusedNonTerminalSymbolMapForGrammarAnalysis  var_cas_unusedNonTerminalSymbolsForGrammar = GGS_unusedNonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (415)) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_grammar_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
          { bool syntaxRepeat_8 = true ;
            while (syntaxRepeat_8) {
                GGS_lstring  var_cas_nonterminalSymbolName ;
                inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
                GGS_uint  var_cas_nonterminalIndex ;
                GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_16833_0 ;
                const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_16788 = var_cas_nonterminalSymbolsMapForGrammar ;
                if (temp_16788.isBuilt ()) {
                  temp_16788 (HERE)->method_searchKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalIndex, automatic_var_16833_0 COMMA_SOURCE_FILE_AT_LINE (422)) ;
                }
                var_cas_unusedNonTerminalSymbolsForGrammar.modifier_insertKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalIndex COMMA_SOURCE_FILE_AT_LINE (423)) ;
              switch (select_grammar_5F_parser_8 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_8 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  if (var_cas_grammarName.isBuilt () &&
      var_cas_grammarClass.isBuilt () &&
      var_cas_startSymbolIndex.isBuilt () &&
      var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (434)).isBuilt () &&
      GGS_location (inLexique).isBuilt () &&
      var_cas_actuallyUsedTerminalSymbolMap.isBuilt () &&
      var_cas_syntaxComponentsListWithFixedInfos.isBuilt () &&
      var_cas_nonterminalSymbolsMapForGrammar.isBuilt () &&
      var_cas_unusedNonTerminalSymbolsForGrammar.isBuilt () &&
      (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (440)).reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/GALGAS_OUTPUT")).isBuilt () &&
      GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (441)).reader_stringByDeletingLastPathComponent ().isBuilt ()) {
    ::routine_analyzeGrammar (inLexique,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (434)),  GGS_location (inLexique),  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_syntaxComponentsListWithFixedInfos,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_unusedNonTerminalSymbolsForGrammar,  (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (440)).reader_stringByDeletingLastPathComponent ()).operator_concat (GGS_string ("/GALGAS_OUTPUT")),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_SOURCE_FILE_AT_LINE (441)).reader_stringByDeletingLastPathComponent () COMMA_SOURCE_FILE_AT_LINE (430)) ;
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, var_cas_grammarName, var_cas_startSymbolAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (444)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::rule_grammar_5F_parser_galgas_5F_component_i0_importGrammarForSemantics (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_grammar_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_5F_lexique_5F_infos_getLexiqueName (inLexique, var_cas_lexiqueName) ;
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_grammarAltMap = GGS_nonterminalSymbolLabelMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (676)) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
        switch (select_grammar_5F_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_5F_parser_3 (inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  temp_22170 = var_cas_ioOptionsComponentsMap ;
                if (temp_22170.isBuilt ()) {
                  temp_22170 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (687)) ;
                }
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_SOURCE_FILE_AT_LINE (692)) ;
                nt_parse_5F_option_5F_component_5F_for_5F_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  temp_22567 = var_cas_importedOptionComponentsMap ;
                if (temp_22567.isBuilt ()) {
                  temp_22567 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (697)) ;
                }
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            const GGS_bool cond_22880 = (var_cas_ioOptionsComponentsMap.reader_hasKey (var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (700)))).operator_not () ;
            if (cond_22880.isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (701)) ;
            }
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_syntax_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_grammar_5F_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_bool var_cas_startSymbolHasParseLabel = GGS_bool (false) ;
  GGS_signatureForGrammarAnalysis  var_cas_signature ;
  nt_formal_5F_arguments_5F_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
  var_cas_grammarAltMap.modifier_insertKey (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (722)), var_cas_signature COMMA_SOURCE_FILE_AT_LINE (721)) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_grammar_5F_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_grammar_5F_parser_6 (inLexique)) {
            case 1 : {
              GGS_lstring  var_cas_altName ;
              inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              GGS_signatureForGrammarAnalysis  var_cas_signature ;
              nt_formal_5F_arguments_5F_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
              var_cas_grammarAltMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (732)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              var_cas_startSymbolHasParseLabel = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, var_cas_grammarName, var_cas_grammarAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (741)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_grammar_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
          { bool syntaxRepeat_8 = true ;
            while (syntaxRepeat_8) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_grammar_5F_parser_8 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_8 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::rule_grammar_5F_parser_galgas_5F_component_i0_importLexique (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_grammar_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
        switch (select_grammar_5F_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_option_5F_component_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_syntax_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_grammar_5F_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  nt_formal_5F_arguments_5F_list_parse (inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_grammar_5F_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_grammar_5F_parser_6 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              nt_formal_5F_arguments_5F_list_parse (inLexique) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_grammar_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
          { bool syntaxRepeat_8 = true ;
            while (syntaxRepeat_8) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_grammar_5F_parser_8 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_8 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::rule_grammar_5F_parser_galgas_5F_component_i0_importOptions (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_grammar_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
        switch (select_grammar_5F_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_option_5F_component_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_syntax_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_grammar_5F_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  nt_formal_5F_arguments_5F_list_parse (inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_grammar_5F_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_grammar_5F_parser_6 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              nt_formal_5F_arguments_5F_list_parse (inLexique) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_grammar_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
          { bool syntaxRepeat_8 = true ;
            while (syntaxRepeat_8) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_grammar_5F_parser_8 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_8 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::rule_grammar_5F_parser_galgas_5F_component_i0_importSemantics (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_grammar_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
        switch (select_grammar_5F_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_option_5F_component_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_syntax_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_grammar_5F_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  nt_formal_5F_arguments_5F_list_parse (inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_grammar_5F_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_grammar_5F_parser_6 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              nt_formal_5F_arguments_5F_list_parse (inLexique) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_grammar_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
          { bool syntaxRepeat_8 = true ;
            while (syntaxRepeat_8) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_grammar_5F_parser_8 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_8 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::rule_grammar_5F_parser_galgas_5F_component_i0_importSyntax (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_grammar_5F_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_5F_lexique_5F_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_import) COMMA_HERE) ;
        switch (select_grammar_5F_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_option_5F_component_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
            switch (select_grammar_5F_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_literal_5F_string) COMMA_HERE) ;
                nt_parse_5F_syntax_5F_for_5F_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_grammar_5F_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  nt_formal_5F_arguments_5F_list_parse (inLexique) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_grammar_5F_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_label) COMMA_HERE) ;
          switch (select_grammar_5F_parser_6 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              nt_formal_5F_arguments_5F_list_parse (inLexique) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_parse) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_7 = true ;
    while (syntaxRepeat_7) {
      switch (select_grammar_5F_parser_7 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
          { bool syntaxRepeat_8 = true ;
            while (syntaxRepeat_8) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_grammar_5F_parser_8 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_8 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_7 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_grammar_parser (void) {
  enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__terminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__terminalInstructionForGrammarAnalysis.slotID ()) ;
  enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__nonTerminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__nonTerminalInstructionForGrammarAnalysis.slotID ()) ;
  enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__repeatInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__repeatInstructionForGrammarAnalysis.slotID ()) ;
  enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__selectInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__selectInstructionForGrammarAnalysis.slotID ()) ;
}

//---------------------------------------------------------------------------*

static void epilogueRoutineFor_grammar_parser (void) {
  gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1.free () ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogue prologueEpilogueObjectFor_grammar_parser (prologueRoutineFor_grammar_parser, epilogueRoutineFor_grammar_parser) ;

//---------------------------------------------------------------------------*

