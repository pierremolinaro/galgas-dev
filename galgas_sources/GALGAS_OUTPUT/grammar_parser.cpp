//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_parser.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       april 25th, 2006, at 18h4'8"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "grammar_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "grammar_parser.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_100_24_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_constraintComponents  &/* var_cas_ioConstraintComponentMap */) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  GGS_lstring  var_cas_grammarName ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_grammarName.defineAttribute (_inLexique.tokenString, _inLexique) ;
  GGS_lstring  var_cas_grammarClass ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  var_cas_grammarClass.defineAttribute (_inLexique.tokenString, _inLexique) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (_inLexique, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_stringset  var_cas_classesNamesSet ;
  var_cas_classesNamesSet = GGS_stringset::constructor_empty (HERE) ;
  GGS_L_syntaxComponents_ForGrammar  var_cas_syntaxComponentsList ;
  var_cas_syntaxComponentsList = GGS_L_syntaxComponents_ForGrammar::constructor_empty (HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonterminalSymbolsMapForGrammar ;
  var_cas_nonterminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_empty (HERE) ;
  GGS_M_optionComponents  var_cas_optionComponentsMap ;
  var_cas_optionComponentsMap = GGS_M_optionComponents::constructor_empty (HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            GGS_lstring  var_cas_optionComponentName ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_optionComponentName.defineAttribute (_inLexique.tokenString, _inLexique) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                var_cas_ioOptionsComponentsMap.methode_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (139)) ;
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                var_cas_fileName.defineAttribute (_inLexique.tokenString, _inLexique) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_empty (HERE) ;
                nt_parse_option_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                var_cas_importedOptionComponentsMap.methode_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (149)) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            var_cas_optionComponentsMap.methode_insertKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (152)) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            GGS_lstring  var_cas_syntaxComponentName ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_syntaxComponentName.defineAttribute (_inLexique.tokenString, _inLexique) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                var_cas_fileName.defineAttribute (_inLexique.tokenString, _inLexique) ;
                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents::constructor_empty (HERE) ;
                nt_parse_syntax_for_importing_ (_inLexique, var_cas_fileName, var_cas_syntaxComponentsMap, var_cas_ioMetamodelComponentMap) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            GGS_M_nonTerminalSymbolsForGrammar  var_cas_importedNonterminalSymbolsMap ;
            GGS_L_productionRules_ForGrammarComponent  var_cas_importedProductionRulesList ;
            GGS_lstring  var_cas_importedLexiqueComponentName ;
            var_cas_syntaxComponentsMap.methode_searchKey (_inLexique, var_cas_syntaxComponentName, var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedLexiqueComponentName SOURCE_FILE_AT_LINE (176)) ;
            if (((var_cas_lexiqueName.reader_value (_inLexique SOURCE_FILE_AT_LINE (182))) != (var_cas_importedLexiqueComponentName.reader_value (_inLexique SOURCE_FILE_AT_LINE (182)))).isBuiltAndTrue ()) {
                var_cas_syntaxComponentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this component does not use the previously declared lexique") SOURCE_FILE_AT_LINE (183)) ;
            }
            var_cas_syntaxComponentsList.addAssign_operation (var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_syntaxComponentName) ;
            GGS_M_nonTerminalSymbolsForGrammar::element_type * operand_7331 = var_cas_importedNonterminalSymbolsMap.firstObject () ;
            while ((operand_7331 != NULL)) {
              macroValidPointer (operand_7331) ;
              if ((var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (_inLexique, operand_7331->mKey.reader_value (_inLexique SOURCE_FILE_AT_LINE (191)) SOURCE_FILE_AT_LINE (191))).isBuiltAndTrue ()) {
                GGS_M_nonterminalSymbolAltsForGrammar  var_cas_altSignatureMap ;
                var_cas_nonterminalSymbolsMapForGrammar.methode_searchKey (_inLexique, operand_7331->mKey, var_cas_altSignatureMap SOURCE_FILE_AT_LINE (193)) ;
                GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_7674 = var_cas_altSignatureMap.firstObject () ;
                while ((operand_7674 != NULL)) {
                  macroValidPointer (operand_7674) ;
                  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_temp ;
                  var_cas_temp = operand_7331->mInfo.mNonterminalSymbolParametersMap ;
                  GGS_L_signature  var_cas_importedAltSignature ;
                  GGS_lstring  var_cas_importedReturnedType ;
                  var_cas_temp.methode_searchKey (_inLexique, operand_7674->mKey, var_cas_importedAltSignature, var_cas_importedReturnedType SOURCE_FILE_AT_LINE (198)) ;
                  ::routine_checkSignature_ForGrammarComponent (_inLexique,  var_cas_importedAltSignature,  operand_7674->mInfo.mFormalParametersList,  operand_7331->mKey.reader_location (_inLexique SOURCE_FILE_AT_LINE (199)),  operand_7674->mKey.reader_location (_inLexique SOURCE_FILE_AT_LINE (199)) SOURCE_FILE_AT_LINE (199)) ;
                  operand_7674 = operand_7674->nextObject () ;
                }
                GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_8205 = operand_7331->mInfo.mNonterminalSymbolParametersMap.firstObject () ;
                while ((operand_8205 != NULL)) {
                  macroValidPointer (operand_8205) ;
                  if (((operand_8205->mKey.reader_value (_inLexique SOURCE_FILE_AT_LINE (202))) != (GGS_string (true, "parse"))).isBuiltAndTrue ()) {
                    GGS_L_signature  var_cas_8394 ;
                    GGS_lstring  var_cas_8397 ;
                    var_cas_altSignatureMap.methode_searchKey (_inLexique, operand_8205->mKey, var_cas_8394, var_cas_8397 SOURCE_FILE_AT_LINE (203)) ;
                  }
                  operand_8205 = operand_8205->nextObject () ;
                }
              }else{
                var_cas_nonterminalSymbolsMapForGrammar.methode_insertKey (_inLexique, operand_7331->mKey, operand_7331->mInfo.mNonterminalSymbolParametersMap SOURCE_FILE_AT_LINE (207)) ;
              }
              operand_7331 = operand_7331->nextObject () ;
            }
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_root) ;
  GGS_lstring  var_cas_startSymbolName ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_startSymbolName.defineAttribute (_inLexique.tokenString, _inLexique) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty (HERE) ;
  GGS_M_startSymbolEntityAndMetamodel  var_cas_startSymbolEntityAndMetamodelMap ;
  var_cas_startSymbolEntityAndMetamodelMap = GGS_M_startSymbolEntityAndMetamodel::constructor_empty (HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
        GGS_lstring  var_cas_returnedEntityName ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            var_cas_returnedEntityName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
            GGS_lstring  var_cas_returnedMetamodelName ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_returnedMetamodelName.defineAttribute (_inLexique.tokenString, _inLexique) ;
            GGS_M_semanticsEntitiesForUse  var_cas_9405 ;
            GGS_entityToImplementMap  var_cas_9408 ;
            GGS_stringset  var_cas_9411 ;
            var_cas_ioMetamodelComponentMap.methode_searchKey (_inLexique, var_cas_returnedMetamodelName, var_cas_returnedEntityName, var_cas_9405, var_cas_9408, var_cas_9411 SOURCE_FILE_AT_LINE (234)) ;
            var_cas_startSymbolEntityAndMetamodelMap.methode_insertKey (_inLexique, var_cas_altName, var_cas_returnedEntityName, var_cas_returnedMetamodelName SOURCE_FILE_AT_LINE (235)) ;
            } break ;
          default :
            break ;
        }
        var_cas_grammarAltMap.methode_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntityName SOURCE_FILE_AT_LINE (237)) ;
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          var_cas_altName.defineAttribute (_inLexique.tokenString, _inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_startSymbolAltMap ;
  GGS_luint  var_cas_startSymbolIndex ;
  var_cas_nonterminalSymbolsMapForGrammar.methode_searchKeyGetIndex (_inLexique, var_cas_startSymbolName, var_cas_startSymbolIndex, var_cas_startSymbolAltMap SOURCE_FILE_AT_LINE (246)) ;
  GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_9996 = var_cas_startSymbolAltMap.firstObject () ;
  while ((operand_9996 != NULL)) {
    macroValidPointer (operand_9996) ;
    GGS_L_signature  var_cas_altMap ;
    GGS_lstring  var_cas_returnedEntity ;
    var_cas_grammarAltMap.methode_searchKey (_inLexique, operand_9996->mKey, var_cas_altMap, var_cas_returnedEntity SOURCE_FILE_AT_LINE (251)) ;
    ::routine_checkSignature_ForGrammarComponent (_inLexique,  operand_9996->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (_inLexique),  operand_9996->mKey.reader_location (_inLexique SOURCE_FILE_AT_LINE (252)) SOURCE_FILE_AT_LINE (252)) ;
    if (((var_cas_returnedEntity.reader_value (_inLexique SOURCE_FILE_AT_LINE (253))) != (operand_9996->mInfo.mReturnedEntityTypeName.reader_value (_inLexique SOURCE_FILE_AT_LINE (253)))).isBuiltAndTrue ()) {
    }
    operand_9996 = operand_9996->nextObject () ;
  }
  GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_10405 = var_cas_grammarAltMap.firstObject () ;
  while ((operand_10405 != NULL)) {
    macroValidPointer (operand_10405) ;
    GGS_L_signature  var_cas_10489 ;
    GGS_lstring  var_cas_10492 ;
    var_cas_startSymbolAltMap.methode_searchKey (_inLexique, operand_10405->mKey, var_cas_10489, var_cas_10492 SOURCE_FILE_AT_LINE (258)) ;
    operand_10405 = operand_10405->nextObject () ;
  }
  if (var_cas_grammarName.isBuilt () &&
      var_cas_grammarClass.isBuilt () &&
      var_cas_startSymbolIndex.isBuilt () &&
      var_cas_lexiqueName.isBuilt () &&
      GGS_location (_inLexique).isBuilt () &&
      var_cas_terminalSymbolMap.isBuilt () &&
      var_cas_syntaxComponentsList.isBuilt () &&
      var_cas_nonterminalSymbolsMapForGrammar.isBuilt () &&
      var_cas_startSymbolEntityAndMetamodelMap.isBuilt ()) {
    ::routine_analyzeGrammar (_inLexique,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName,  GGS_location (_inLexique),  var_cas_terminalSymbolMap,  var_cas_syntaxComponentsList,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_startSymbolEntityAndMetamodelMap SOURCE_FILE_AT_LINE (262)) ;
  }
  var_cas_ioGrammarComponentsMap.methode_insertKey (_inLexique, var_cas_grammarName, var_cas_startSymbolAltMap, var_cas_lexiqueName, var_cas_optionComponentsMap SOURCE_FILE_AT_LINE (274)) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_100_24_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_root) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_100_24_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_root) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_100_24_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_constraintComponents  &/* var_cas_ioConstraintComponentMap */) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_root) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_100_24_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_constraintComponents  &/* var_cas_ioConstraintComponentMap */) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  GGS_lstring  var_cas_grammarName ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_grammarName.defineAttribute (_inLexique.tokenString, _inLexique) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_getLexiqueName (_inLexique, var_cas_lexiqueName) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty (HERE) ;
  GGS_M_optionComponents  var_cas_optionComponentsMap ;
  var_cas_optionComponentsMap = GGS_M_optionComponents::constructor_empty (HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            GGS_lstring  var_cas_optionComponentName ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_optionComponentName.defineAttribute (_inLexique.tokenString, _inLexique) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                var_cas_optionComponentsMap.methode_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (465)) ;
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                var_cas_fileName.defineAttribute (_inLexique.tokenString, _inLexique) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_empty (HERE) ;
                nt_parse_option_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                var_cas_importedOptionComponentsMap.methode_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (475)) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            var_cas_optionComponentsMap.methode_insertKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap SOURCE_FILE_AT_LINE (478)) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_root) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
        GGS_lstring  var_cas_returnedMetamodelName ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            var_cas_returnedMetamodelName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_returnedMetamodelName.defineAttribute (_inLexique.tokenString, _inLexique) ;
            } break ;
          default :
            break ;
        }
        var_cas_grammarAltMap.methode_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedMetamodelName SOURCE_FILE_AT_LINE (508)) ;
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          var_cas_altName.defineAttribute (_inLexique.tokenString, _inLexique) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  var_cas_ioGrammarComponentsMap.methode_insertKey (_inLexique, var_cas_grammarName, var_cas_grammarAltMap, var_cas_lexiqueName, var_cas_optionComponentsMap SOURCE_FILE_AT_LINE (516)) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_100_24_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_root) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__2D_3E) ;
            _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  _inLexique.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

