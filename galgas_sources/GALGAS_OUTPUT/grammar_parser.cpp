//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     november 9th, 2009, at 17h35'3"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammar_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammar_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@abstractSyntaxInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1> gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1
findCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1.count ()) {
    result = gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (superClassPtr) ;
      gDispatchTableForMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of routine "fixSyntaxInstructionList_V1"           *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const GGS_syntaxInstructionListForGrammarAnalysis   var_cas_inInstructionList,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_outSyntaxInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_fixSyntaxInstructionList_V1 at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outSyntaxInstructionList = GGS_syntaxInstructionListForGrammarAnalysis ::constructor_emptyList () ;
  {
    GGS_syntaxInstructionListForGrammarAnalysis::cEnumerator enumerator_2776 (var_cas_inInstructionList, true) ;
    const GGS_syntaxInstructionListForGrammarAnalysis::cElement * operand_2776 = NULL ;
    while (((operand_2776 = enumerator_2776.nextObject ()))) {
      macroValidPointer (operand_2776) ;
      const GGS_abstractSyntaxInstructionForGrammarAnalysis  temp_2825 = operand_2776->mInstruction ;
      if (temp_2825.isBuilt ()) {
        typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 method = findCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (temp_2825.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_2825 (HERE), var_cas_ioActuallyUsedTerminalSymbolMap, var_cas_inNonTerminalSymbolMap, var_cas_ioAddedNonTerminalIndex, var_cas_outSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (50)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_fixSyntaxInstructionList_V1\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@terminalInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__terminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_terminalInstructionForGrammarAnalysis * operand_3160,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   /* var_cas_inNonTerminalSymbolMap */,
                                GGS_uint  & /* var_cas_ioAddedNonTerminalIndex */,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3160 != NULL) {
    GGS_uint  var_cas_terminalSymbolIndex ;
    elementOf_GGS_terminalSymbolsMapForGrammarAnalysis * operand_3491 = (elementOf_GGS_terminalSymbolsMapForGrammarAnalysis *) var_cas_ioActuallyUsedTerminalSymbolMap.searchForTolerantWithInstruction (operand_3160->mTerminalSymbolName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (68))) ;
    if (NULL != operand_3491) {
      var_cas_terminalSymbolIndex = operand_3491->mInfo.mTerminalIndex ;
    }else{
      var_cas_terminalSymbolIndex = var_cas_ioActuallyUsedTerminalSymbolMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (71)) ;
      var_cas_ioActuallyUsedTerminalSymbolMap.modifier_insertKey (inLexique, operand_3160->mTerminalSymbolName, var_cas_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (72)) ;
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_terminalInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_3160->mStartLocation, operand_3160->mTerminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@nonTerminalInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__nonTerminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_nonTerminalInstructionForGrammarAnalysis * operand_4087,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & /* var_cas_ioActuallyUsedTerminalSymbolMap */,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & /* var_cas_ioAddedNonTerminalIndex */,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4087 != NULL) {
    GGS_uint  var_cas_nonTerminalSymbolIndex ;
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_0 ;
    const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_4416 = var_cas_inNonTerminalSymbolMap ;
    if (temp_4416.isBuilt ()) {
      temp_4416 (HERE)->method_searchKey (inLexique, operand_4087->mNonterminalSymbolName, var_cas_nonTerminalSymbolIndex, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (90)) ;
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_nonTerminalInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_4087->mStartLocation, operand_4087->mNonterminalSymbolName, var_cas_nonTerminalSymbolIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@repeatInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__repeatInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_repeatInstructionForGrammarAnalysis * operand_4803,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4803 != NULL) {
    const GGS_uint  var_cas_addedNonTerminalIndex = var_cas_ioAddedNonTerminalIndex ;
    var_cas_ioAddedNonTerminalIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (107)) ;
    GGS_branchListForGrammarAnalysis  var_cas_repeatBranchList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
    {
      GGS_branchListForGrammarAnalysis::cEnumerator enumerator_5236 (operand_4803->mRepeatBranchList, true) ;
      const GGS_branchListForGrammarAnalysis::cElement * operand_5236 = NULL ;
      while (((operand_5236 = enumerator_5236.nextObject ()))) {
        macroValidPointer (operand_5236) ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxInstructionList ;
        ::routine_fixSyntaxInstructionList_V1 (inLexique,  operand_5236->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (111)) ;
        var_cas_repeatBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_repeatInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_4803->mStartLocation, var_cas_repeatBranchList, var_cas_addedNonTerminalIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@selectInstructionForGrammarAnalysis.fixSyntaxInstructionList_V1'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__selectInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 (C_Compiler & inLexique,
                                const cPtr_selectInstructionForGrammarAnalysis * operand_5893,
                                GGS_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                const GGS_nonTerminalSymbolMapForGrammarAnalysis   var_cas_inNonTerminalSymbolMap,
                                GGS_uint  & var_cas_ioAddedNonTerminalIndex,
                                GGS_syntaxInstructionListForGrammarAnalysis  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_5893 != NULL) {
    const GGS_uint  var_cas_addedNonTerminalIndex = var_cas_ioAddedNonTerminalIndex ;
    var_cas_ioAddedNonTerminalIndex.increment_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (136)) ;
    GGS_branchListForGrammarAnalysis  var_cas_selectBranchList = GGS_branchListForGrammarAnalysis ::constructor_emptyList () ;
    {
      GGS_branchListForGrammarAnalysis::cEnumerator enumerator_6326 (operand_5893->mSelectBranchList, true) ;
      const GGS_branchListForGrammarAnalysis::cElement * operand_6326 = NULL ;
      while (((operand_6326 = enumerator_6326.nextObject ()))) {
        macroValidPointer (operand_6326) ;
        GGS_syntaxInstructionListForGrammarAnalysis  var_cas_syntaxInstructionList ;
        ::routine_fixSyntaxInstructionList_V1 (inLexique,  operand_6326->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_inNonTerminalSymbolMap,  var_cas_ioAddedNonTerminalIndex,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (140)) ;
        var_cas_selectBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_selectInstructionForGrammarAnalysis ::constructor_new (inLexique, operand_5893->mStartLocation, var_cas_selectBranchList, var_cas_addedNonTerminalIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_218_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_location (inLexique).reader_location (inLexique COMMA_HERE).signalGGSSemanticWarning (inLexique, GGS_string ("in GALGAS 1.9.3 and later, uses '.gGrammar' extension instead of '.ggs'") COMMA_SOURCE_FILE_AT_LINE (230)) ;
  GGS_string var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (231)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (231)) ;
  const GGS_bool cond_9644 = (var_cas_grammarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (232))).operator_isNotEqual (var_cas_basename) ;
  if (cond_9644.isBuiltAndTrue ()) {
    var_cas_grammarName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_grammarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (234)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (237)) ;
  }
  GGS_lstring  var_cas_grammarClass ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarClass) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (inLexique, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_stringset  var_cas_classesNamesSet = GGS_stringset ::constructor_emptySet () ;
  GGS_syntaxComponentListForGrammarAnalysis  var_cas_syntaxComponentsList = GGS_syntaxComponentListForGrammarAnalysis ::constructor_emptyList () ;
  GGS_nonTerminalSymbolMapForGrammarAnalysis  var_cas_nonterminalSymbolsMapForGrammar = GGS_nonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  temp_10580 = var_cas_ioOptionsComponentsMap ;
                if (temp_10580.isBuilt ()) {
                  temp_10580 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (270)) ;
                }
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  temp_10977 = var_cas_importedOptionComponentsMap ;
                if (temp_10977.isBuilt ()) {
                  temp_10977 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (280)) ;
                }
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            const GGS_bool cond_11290 = (var_cas_ioOptionsComponentsMap.reader_hasKey (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (283)) COMMA_SOURCE_FILE_AT_LINE (283))).operator_not () ;
            if (cond_11290.isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (284)) ;
            }
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            GGS_lstring  var_cas_syntaxComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
                nt_parse_syntax_for_importing_ (inLexique, var_cas_fileName, var_cas_syntaxComponentsMap, var_cas_ioSemanticContext) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            GGS_nonTerminalSymbolMapForGrammarAnalysis  var_cas_importedNonterminalSymbolsMap ;
            GGS_productionRuleListForGrammarAnalysis  var_cas_importedProductionRulesList ;
            GGS_lstring  var_cas_importedLexiqueComponentName ;
            const GGS_M_syntaxComponents  temp_12101 = var_cas_syntaxComponentsMap ;
            if (temp_12101.isBuilt ()) {
              temp_12101 (HERE)->method_searchKey (inLexique, var_cas_syntaxComponentName, var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedLexiqueComponentName COMMA_SOURCE_FILE_AT_LINE (309)) ;
            }
            const GGS_bool cond_12471 = (var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (315))).operator_isNotEqual (var_cas_importedLexiqueComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (315))) ;
            if (cond_12471.isBuiltAndTrue ()) {
              var_cas_syntaxComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this component does not use the previously declared lexique") COMMA_SOURCE_FILE_AT_LINE (317)) ;
            }
            var_cas_syntaxComponentsList.addAssign_operation (var_cas_importedProductionRulesList, var_cas_syntaxComponentName) ;
            {
              GGS_nonTerminalSymbolMapForGrammarAnalysis::cEnumerator enumerator_12730 (var_cas_importedNonterminalSymbolsMap, true) ;
              const GGS_nonTerminalSymbolMapForGrammarAnalysis::cElement * operand_12730 = NULL ;
              while (((operand_12730 = enumerator_12730.nextObject ()))) {
                macroValidPointer (operand_12730) ;
                const GGS_bool cond_13648 = var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (inLexique, operand_12730->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (325)) COMMA_SOURCE_FILE_AT_LINE (325)) ;
                if (cond_13648.isBuiltAndTrue ()) {
                  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_altSignatureMap ;
                  GGS_uint  automatic_var_1 ;
                  const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_12954 = var_cas_nonterminalSymbolsMapForGrammar ;
                  if (temp_12954.isBuilt ()) {
                    temp_12954 (HERE)->method_searchKey (inLexique, operand_12730->mKey, automatic_var_1, var_cas_altSignatureMap COMMA_SOURCE_FILE_AT_LINE (327)) ;
                  }
                  {
                    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_13022 (var_cas_altSignatureMap, true) ;
                    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_13022 = NULL ;
                    while (((operand_13022 = enumerator_13022.nextObject ()))) {
                      macroValidPointer (operand_13022) ;
                      GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_temp = operand_12730->mInfo.mNonterminalSymbolParametersMap ;
                      GGS_signatureForGrammarAnalysis  var_cas_importedAltSignature ;
                      const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_13222 = var_cas_temp ;
                      if (temp_13222.isBuilt ()) {
                        temp_13222 (HERE)->method_searchKey (inLexique, operand_13022->mKey, var_cas_importedAltSignature COMMA_SOURCE_FILE_AT_LINE (331)) ;
                      }
                      ::routine_checkSignature_ForGrammarComponent (inLexique,  var_cas_importedAltSignature,  operand_13022->mInfo.mFormalParametersList,  operand_13022->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (332)),  operand_13022->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (332)) COMMA_SOURCE_FILE_AT_LINE (332)) ;
                    }
                  }
                  {
                    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_13458 (operand_12730->mInfo.mNonterminalSymbolParametersMap, true) ;
                    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_13458 = NULL ;
                    while (((operand_13458 = enumerator_13458.nextObject ()))) {
                      macroValidPointer (operand_13458) ;
                      const GGS_bool cond_13606 = (operand_13458->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (335))).operator_isNotEqual (GGS_string ("parse")) ;
                      if (cond_13606.isBuiltAndTrue ()) {
                        GGS_signatureForGrammarAnalysis  automatic_var_2 ;
                        const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_13572 = var_cas_altSignatureMap ;
                        if (temp_13572.isBuilt ()) {
                          temp_13572 (HERE)->method_searchKey (inLexique, operand_13458->mKey, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (336)) ;
                        }
                      }
                    }
                  }
                }else if (cond_13648.isBuiltAndFalse ()) {
                  var_cas_nonterminalSymbolsMapForGrammar.modifier_insertKey (inLexique, operand_12730->mKey, var_cas_nonterminalSymbolsMapForGrammar.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (340)), operand_12730->mInfo.mNonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (340)) ;
                }
              }
            }
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  GGS_lstring  var_cas_startSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_startSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_grammarAltMap = GGS_nonterminalSymbolLabelMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_signatureForGrammarAnalysis  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
        var_cas_grammarAltMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (356)) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_terminalSymbolsMapForGrammarAnalysis  var_cas_actuallyUsedTerminalSymbolMap = GGS_terminalSymbolsMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_uint  var_cas_addedNonTerminalCount = GGS_uint (0U) ;
  GGS_syntaxComponentListForGrammarAnalysis  var_cas_syntaxComponentsListWithFixedInfos = GGS_syntaxComponentListForGrammarAnalysis ::constructor_emptyList () ;
  {
    GGS_syntaxComponentListForGrammarAnalysis::cEnumerator enumerator_14689 (var_cas_syntaxComponentsList, true) ;
    const GGS_syntaxComponentListForGrammarAnalysis::cElement * operand_14689 = NULL ;
    while (((operand_14689 = enumerator_14689.nextObject ()))) {
      macroValidPointer (operand_14689) ;
      GGS_productionRuleListForGrammarAnalysis  var_cas_fixedProductionRuleList = GGS_productionRuleListForGrammarAnalysis ::constructor_emptyList () ;
      {
        GGS_productionRuleListForGrammarAnalysis::cEnumerator enumerator_14805 (operand_14689->mProductionRulesList, true) ;
        const GGS_productionRuleListForGrammarAnalysis::cElement * operand_14805 = NULL ;
        while (((operand_14805 = enumerator_14805.nextObject ()))) {
          macroValidPointer (operand_14805) ;
          GGS_syntaxInstructionListForGrammarAnalysis  var_cas_fixedInstructionList ;
          ::routine_fixSyntaxInstructionList_V1 (inLexique,  operand_14805->mInstructionList,  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_addedNonTerminalCount,  var_cas_fixedInstructionList COMMA_SOURCE_FILE_AT_LINE (370)) ;
          GGS_uint  var_cas_nonTerminalIndex ;
          GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_3 ;
          const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_15169 = var_cas_nonterminalSymbolsMapForGrammar ;
          if (temp_15169.isBuilt ()) {
            temp_15169 (HERE)->method_searchKey (inLexique, operand_14805->mLeftNonterminalSymbol, var_cas_nonTerminalIndex, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (378)) ;
          }
          var_cas_fixedProductionRuleList.addAssign_operation (operand_14805->mLeftNonterminalSymbol, var_cas_nonTerminalIndex, var_cas_fixedInstructionList) ;
        }
      }
      var_cas_syntaxComponentsListWithFixedInfos.addAssign_operation (var_cas_fixedProductionRuleList, operand_14689->mSyntaxComponentName) ;
    }
  }
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_startSymbolAltMap ;
  GGS_uint  var_cas_startSymbolIndex ;
  const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_15671 = var_cas_nonterminalSymbolsMapForGrammar ;
  if (temp_15671.isBuilt ()) {
    temp_15671 (HERE)->method_searchKey (inLexique, var_cas_startSymbolName, var_cas_startSymbolIndex, var_cas_startSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (393)) ;
  }
  {
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_15796 (var_cas_startSymbolAltMap, true) ;
    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_15796 = NULL ;
    while (((operand_15796 = enumerator_15796.nextObject ()))) {
      macroValidPointer (operand_15796) ;
      GGS_signatureForGrammarAnalysis  var_cas_altMap ;
      const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_15870 = var_cas_grammarAltMap ;
      if (temp_15870.isBuilt ()) {
        temp_15870 (HERE)->method_searchKey (inLexique, operand_15796->mKey, var_cas_altMap COMMA_SOURCE_FILE_AT_LINE (397)) ;
      }
      ::routine_checkSignature_ForGrammarComponent (inLexique,  operand_15796->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (inLexique),  operand_15796->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (398)) COMMA_SOURCE_FILE_AT_LINE (398)) ;
    }
  }
  {
    GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cEnumerator enumerator_16020 (var_cas_grammarAltMap, true) ;
    const GGS_nonterminalSymbolLabelMapForGrammarAnalysis::cElement * operand_16020 = NULL ;
    while (((operand_16020 = enumerator_16020.nextObject ()))) {
      macroValidPointer (operand_16020) ;
      GGS_signatureForGrammarAnalysis  automatic_var_4 ;
      const GGS_nonterminalSymbolLabelMapForGrammarAnalysis  temp_16056 = var_cas_startSymbolAltMap ;
      if (temp_16056.isBuilt ()) {
        temp_16056 (HERE)->method_searchKey (inLexique, operand_16020->mKey, automatic_var_4 COMMA_SOURCE_FILE_AT_LINE (401)) ;
      }
    }
  }
  GGS_unusedNonTerminalSymbolMapForGrammarAnalysis  var_cas_unusedNonTerminalSymbolsForGrammar = GGS_unusedNonTerminalSymbolMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                GGS_lstring  var_cas_nonterminalSymbolName ;
                inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
                GGS_uint  var_cas_nonterminalIndex ;
                GGS_nonterminalSymbolLabelMapForGrammarAnalysis  automatic_var_5 ;
                const GGS_nonTerminalSymbolMapForGrammarAnalysis  temp_16392 = var_cas_nonterminalSymbolsMapForGrammar ;
                if (temp_16392.isBuilt ()) {
                  temp_16392 (HERE)->method_searchKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalIndex, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (411)) ;
                }
                var_cas_unusedNonTerminalSymbolsForGrammar.modifier_insertKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalIndex COMMA_SOURCE_FILE_AT_LINE (412)) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  if (var_cas_grammarName.isBuilt () &&
      var_cas_grammarClass.isBuilt () &&
      var_cas_startSymbolIndex.isBuilt () &&
      var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (423)).isBuilt () &&
      GGS_location (inLexique).isBuilt () &&
      var_cas_actuallyUsedTerminalSymbolMap.isBuilt () &&
      var_cas_syntaxComponentsListWithFixedInfos.isBuilt () &&
      var_cas_nonterminalSymbolsMapForGrammar.isBuilt () &&
      var_cas_unusedNonTerminalSymbolsForGrammar.isBuilt () &&
      (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (429))).operator_concat (GGS_string ("/GALGAS_OUTPUT")).isBuilt () &&
      GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (430)).isBuilt ()) {
    ::routine_analyzeGrammar (inLexique,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (423)),  GGS_location (inLexique),  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_syntaxComponentsListWithFixedInfos,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_unusedNonTerminalSymbolsForGrammar,  (GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (429))).operator_concat (GGS_string ("/GALGAS_OUTPUT")),  GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_stringByDeletingLastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (430)) COMMA_SOURCE_FILE_AT_LINE (419)) ;
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, var_cas_grammarName, var_cas_startSymbolAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (433)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_218_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_getLexiqueName (inLexique, var_cas_lexiqueName) ;
  GGS_nonterminalSymbolLabelMapForGrammarAnalysis  var_cas_grammarAltMap = GGS_nonterminalSymbolLabelMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  temp_21507 = var_cas_ioOptionsComponentsMap ;
                if (temp_21507.isBuilt ()) {
                  temp_21507 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (661)) ;
                }
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  temp_21904 = var_cas_importedOptionComponentsMap ;
                if (temp_21904.isBuilt ()) {
                  temp_21904 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (671)) ;
                }
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            const GGS_bool cond_22217 = (var_cas_ioOptionsComponentsMap.reader_hasKey (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (674)) COMMA_SOURCE_FILE_AT_LINE (674))).operator_not () ;
            if (cond_22217.isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (675)) ;
            }
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_signatureForGrammarAnalysis  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
        var_cas_grammarAltMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (696)) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, var_cas_grammarName, var_cas_grammarAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (704)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_218_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_218_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_218_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_218_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_grammar_parser (void) {
 enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__terminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__terminalInstructionForGrammarAnalysis.slotID ()) ;
 enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__nonTerminalInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__nonTerminalInstructionForGrammarAnalysis.slotID ()) ;
 enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__repeatInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__repeatInstructionForGrammarAnalysis.slotID ()) ;
 enterCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1 ((typeCategoryMethod__abstractSyntaxInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1) category_method__selectInstructionForGrammarAnalysis__fixSyntaxInstructionList_V1, gClassInfoFor__selectInstructionForGrammarAnalysis.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_grammar_parser (prologueRoutineFor_grammar_parser,
                                   NULL) ;

//---------------------------------------------------------------------------*

