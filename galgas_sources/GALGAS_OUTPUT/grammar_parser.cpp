//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_parser.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      january 9th, 2006, at 20h3'53"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "grammar_parser.h"


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_91_24_ (galgas_scanner & lexique_var_,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  GGS_lstring  var_cas_grammarName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_grammarName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  GGS_lstring  var_cas_grammarClass ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  var_cas_grammarClass.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (lexique_var_, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_stringset  var_cas_classesNamesSet ;
  var_cas_classesNamesSet = GGS_stringset::constructor_empty () ;
  GGS_L_syntaxComponents_ForGrammar  var_cas_syntaxComponentsList ;
  var_cas_syntaxComponentsList = GGS_L_syntaxComponents_ForGrammar::constructor_empty () ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonterminalSymbolsMapForGrammar ;
  var_cas_nonterminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_empty () ;
  GGS_M_optionComponents  var_cas_optionComponentsMap ;
  var_cas_optionComponentsMap = GGS_M_optionComponents::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (lexique_var_)) {
          case 1 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            GGS_lstring  var_cas_optionComponentName ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_optionComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (lexique_var_)) {
              case 1 : {
                var_cas_ioOptionsComponentsMap.methode_searchKey (lexique_var_, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap) ;
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                GGS_lstring  var_cas_fileName ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_empty () ;
                nt_parse_option_component_for_importing_ (lexique_var_, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                var_cas_importedOptionComponentsMap.methode_searchKey (lexique_var_, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            var_cas_optionComponentsMap.methode_insertKey (lexique_var_, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap) ;
            } break ;
          case 2 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            GGS_lstring  var_cas_syntaxComponentName ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_syntaxComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            switch (select_grammar_parser_3 (lexique_var_)) {
              case 1 : {
                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                GGS_lstring  var_cas_fileName ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents::constructor_empty () ;
                nt_parse_syntax_for_importing_ (lexique_var_, var_cas_fileName, var_cas_syntaxComponentsMap) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            GGS_M_nonTerminalSymbolsForGrammar  var_cas_importedNonterminalSymbolsMap ;
            GGS_L_productionRules_ForGrammarComponent  var_cas_importedProductionRulesList ;
            GGS_lstring  var_cas_importedLexiqueComponentName ;
            var_cas_syntaxComponentsMap.methode_searchKey (lexique_var_, var_cas_syntaxComponentName, var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedLexiqueComponentName) ;
            if (((var_cas_lexiqueName.reader_value ()) != (var_cas_importedLexiqueComponentName.reader_value ())).isBuiltAndTrue ()) {
                var_cas_syntaxComponentName.reader_location ().signalGGSSemanticError (lexique_var_, GGS_string (true, "this component does not use the previously declared lexique")) ;
            }
            var_cas_syntaxComponentsList.addAssign_operation (var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_syntaxComponentName) ;
            GGS_M_nonTerminalSymbolsForGrammar::element_type * operand_6737 = var_cas_importedNonterminalSymbolsMap.firstObject () ;
            while ((operand_6737 != NULL)) {
              macroValidPointer (operand_6737) ;
              if ((var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (operand_6737->mKey.reader_value ())).isBuiltAndTrue ()) {
                GGS_M_nonterminalSymbolAltsForGrammar  var_cas_altSignatureMap ;
                var_cas_nonterminalSymbolsMapForGrammar.methode_searchKey (lexique_var_, operand_6737->mKey, var_cas_altSignatureMap) ;
                GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_7080 = var_cas_altSignatureMap.firstObject () ;
                while ((operand_7080 != NULL)) {
                  macroValidPointer (operand_7080) ;
                  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_temp ;
                  var_cas_temp = operand_6737->mInfo.mNonterminalSymbolParametersMap ;
                  GGS_L_signature_ForGrammarComponent  var_cas_importedAltSignature ;
                  var_cas_temp.methode_searchKey (lexique_var_, operand_7080->mKey, var_cas_importedAltSignature) ;
                  ::routine_checkSignature_ForGrammarComponent (lexique_var_,  var_cas_importedAltSignature,  operand_7080->mInfo.mFormalParametersList,  operand_7080->mKey.reader_location ()) ;
                  operand_7080 = operand_7080->nextObject () ;
                }
                GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_7537 = operand_6737->mInfo.mNonterminalSymbolParametersMap.firstObject () ;
                while ((operand_7537 != NULL)) {
                  macroValidPointer (operand_7537) ;
                  if (((operand_7537->mKey.reader_value ()) != (GGS_string (true, "parse"))).isBuiltAndTrue ()) {
                    GGS_L_signature_ForGrammarComponent  var_cas_7742 ;
                    var_cas_altSignatureMap.methode_searchKey (lexique_var_, operand_7537->mKey, var_cas_7742) ;
                  }
                  operand_7537 = operand_7537->nextObject () ;
                }
              }else{
                var_cas_nonterminalSymbolsMapForGrammar.methode_insertKey (lexique_var_, operand_6737->mKey, operand_6737->mInfo.mNonterminalSymbolParametersMap) ;
              }
              operand_6737 = operand_6737->nextObject () ;
            }
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;
  GGS_lstring  var_cas_startSymbolName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_startSymbolName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty () ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_)) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_L_signature_ForGrammarComponent  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (lexique_var_, var_cas_signature) ;
        var_cas_grammarAltMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_signature) ;
      switch (select_repeat_grammar_parser_4 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_startSymbolAltMap ;
  GGS_luint  var_cas_startSymbolIndex ;
  var_cas_nonterminalSymbolsMapForGrammar.methode_searchKeyGetIndex (lexique_var_, var_cas_startSymbolName, var_cas_startSymbolIndex, var_cas_startSymbolAltMap) ;
  GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_8777 = var_cas_startSymbolAltMap.firstObject () ;
  while ((operand_8777 != NULL)) {
    macroValidPointer (operand_8777) ;
    GGS_L_signature_ForGrammarComponent  var_cas_altMap ;
    var_cas_grammarAltMap.methode_searchKey (lexique_var_, operand_8777->mKey, var_cas_altMap) ;
    ::routine_checkSignature_ForGrammarComponent (lexique_var_,  operand_8777->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (lexique_var_)) ;
    operand_8777 = operand_8777->nextObject () ;
  }
  GGS_M_nonterminalSymbolAltsForGrammar::element_type * operand_9054 = var_cas_grammarAltMap.firstObject () ;
  while ((operand_9054 != NULL)) {
    macroValidPointer (operand_9054) ;
    GGS_L_signature_ForGrammarComponent  var_cas_9134 ;
    var_cas_startSymbolAltMap.methode_searchKey (lexique_var_, operand_9054->mKey, var_cas_9134) ;
    operand_9054 = operand_9054->nextObject () ;
  }
  GGS_location  var_cas_endOfSourceFile ;
  var_cas_endOfSourceFile = GGS_location (lexique_var_) ;
  if (var_cas_grammarName.isBuilt () &&
      var_cas_grammarClass.isBuilt () &&
      var_cas_startSymbolIndex.isBuilt () &&
      var_cas_lexiqueName.isBuilt () &&
      var_cas_endOfSourceFile.isBuilt () &&
      var_cas_terminalSymbolMap.isBuilt () &&
      var_cas_syntaxComponentsList.isBuilt () &&
      var_cas_nonterminalSymbolsMapForGrammar.isBuilt ()) {
    ::analyzeGrammar (lexique_var_,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName,  var_cas_endOfSourceFile,  var_cas_terminalSymbolMap,  var_cas_syntaxComponentsList,  var_cas_nonterminalSymbolsMapForGrammar) ;
  }
  var_cas_ioGrammarComponentsMap.methode_insertKey (lexique_var_, var_cas_grammarName, var_cas_startSymbolAltMap, var_cas_lexiqueName, var_cas_optionComponentsMap) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_91_24_importLexique (galgas_scanner & lexique_var_,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (lexique_var_)) {
          case 1 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (lexique_var_) ;
      switch (select_repeat_grammar_parser_4 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_91_24_importSyntax (galgas_scanner & lexique_var_,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (lexique_var_)) {
          case 1 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (lexique_var_) ;
      switch (select_repeat_grammar_parser_4 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_91_24_importSemantics (galgas_scanner & lexique_var_,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (lexique_var_)) {
          case 1 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (lexique_var_) ;
      switch (select_repeat_grammar_parser_4 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_91_24_importGrammarForSemantics (galgas_scanner & lexique_var_,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  GGS_lstring  var_cas_grammarName ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  var_cas_grammarName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_getLexiqueName (lexique_var_, var_cas_lexiqueName) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_empty () ;
  GGS_M_optionComponents  var_cas_optionComponentsMap ;
  var_cas_optionComponentsMap = GGS_M_optionComponents::constructor_empty () ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (lexique_var_)) {
          case 1 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            GGS_lstring  var_cas_optionComponentName ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            var_cas_optionComponentName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (lexique_var_)) {
              case 1 : {
                var_cas_optionComponentsMap.methode_searchKey (lexique_var_, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap) ;
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                GGS_lstring  var_cas_fileName ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                var_cas_fileName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_empty () ;
                nt_parse_option_component_for_importing_ (lexique_var_, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                var_cas_importedOptionComponentsMap.methode_searchKey (lexique_var_, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            var_cas_optionComponentsMap.methode_insertKey (lexique_var_, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap) ;
            } break ;
          case 2 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (GGS_string (true, ""), GGS_location (lexique_var_)) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        GGS_L_signature_ForGrammarComponent  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (lexique_var_, var_cas_signature) ;
        var_cas_grammarAltMap.methode_insertKey (lexique_var_, var_cas_altName, var_cas_signature) ;
      switch (select_repeat_grammar_parser_4 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          var_cas_altName.defineAttribute (lexique_var_.tokenString, lexique_var_) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  var_cas_ioGrammarComponentsMap.methode_insertKey (lexique_var_, var_cas_grammarName, var_cas_grammarAltMap, var_cas_lexiqueName, var_cas_optionComponentsMap) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_91_24_importOptions (galgas_scanner & lexique_var_,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3A) ;
  nt_get_lexique_infos_parse (lexique_var_) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_import) ;
        switch (select_grammar_parser_1 (lexique_var_)) {
          case 1 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_option) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_2 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_option_component_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          case 2 : {
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_syntax) ;
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
            switch (select_grammar_parser_3 (lexique_var_)) {
              case 1 : {
                } break ;
              case 2 : {
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_in) ;
                lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_literal_5Fstring) ;
                nt_parse_syntax_for_importing_parse (lexique_var_) ;
                } break ;
              default :
                break ;
            }
            lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (lexique_var_)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_start) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3C) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3E) ;
  { bool syntaxRepeat = true ;
    while (syntaxRepeat) {
        nt_formal_arguments_list_parse (lexique_var_) ;
      switch (select_repeat_grammar_parser_4 (lexique_var_)) {
        case 2 : {
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_label) ;
          lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_identifier) ;
          } break ;
        default :
          syntaxRepeat = false ;
          break ;
      }
    }
  }
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_end) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1_grammar) ;
  lexique_var_.acceptTerminal (galgas_scanner::galgas_scanner_1__3B) ;
}

//---------------------------------------------------------------------------*

