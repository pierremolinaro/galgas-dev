//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                       june 10th, 2008, at 19h3'32"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "grammar_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammar_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_110_4_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_grammarName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarClass ;
  _inLexique._assignFromAttribute_tokenString (var_cas_grammarClass) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (_inLexique, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_stringset  var_cas_classesNamesSet ;
  var_cas_classesNamesSet = GGS_stringset ::constructor_emptySet (_inLexique COMMA_HERE) ;
  GGS_L_syntaxComponents_ForGrammar  var_cas_syntaxComponentsList ;
  var_cas_syntaxComponentsList = GGS_L_syntaxComponents_ForGrammar ::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonterminalSymbolsMapForGrammar ;
  var_cas_nonterminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  _temp_5750 = var_cas_ioOptionsComponentsMap ;
                if (_temp_5750._isBuilt ()) {
                  _temp_5750 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (149)) ;
                }
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  _temp_6147 = var_cas_importedOptionComponentsMap ;
                if (_temp_6147._isBuilt ()) {
                  _temp_6147 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (159)) ;
                }
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            if (((var_cas_ioOptionsComponentsMap.reader_hasKey (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (162)) COMMA_SOURCE_FILE_AT_LINE (162)))._operator_not ()).isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (163)) ;
            }
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            GGS_lstring  var_cas_syntaxComponentName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
                nt_parse_syntax_for_importing_ (_inLexique, var_cas_fileName, var_cas_syntaxComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, var_cas_ioSemanticContext) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            GGS_M_nonTerminalSymbolsForGrammar  var_cas_importedNonterminalSymbolsMap ;
            GGS_L_productionRules_ForGrammarComponent  var_cas_importedProductionRulesList ;
            GGS_lstring  var_cas_importedLexiqueComponentName ;
            const GGS_M_syntaxComponents  _temp_7338 = var_cas_syntaxComponentsMap ;
            if (_temp_7338._isBuilt ()) {
              _temp_7338 (HERE)->method_searchKey (_inLexique, var_cas_syntaxComponentName, var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedLexiqueComponentName COMMA_SOURCE_FILE_AT_LINE (190)) ;
            }
            if (((var_cas_lexiqueName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)))._operator_isNotEqual (var_cas_importedLexiqueComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (196)))).isBuiltAndTrue ()) {
              var_cas_syntaxComponentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this component does not use the previously declared lexique") COMMA_SOURCE_FILE_AT_LINE (197)) ;
            }
            var_cas_syntaxComponentsList._addAssign_operation (var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_syntaxComponentName) ;
            {
              GGS_M_nonTerminalSymbolsForGrammar::cEnumerator enumerator_8016 (var_cas_importedNonterminalSymbolsMap, true) ;
              const GGS_M_nonTerminalSymbolsForGrammar::cElement * operand_8016 = NULL ;
              while (((operand_8016 = (GGS_M_nonTerminalSymbolsForGrammar::cElement *) enumerator_8016.nextObject ()))) {
                macroValidPointer (operand_8016) ;
                if ((var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (_inLexique, operand_8016->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (205)) COMMA_SOURCE_FILE_AT_LINE (205))).isBuiltAndTrue ()) {
                  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_altSignatureMap ;
                  const GGS_M_nonTerminalSymbolsForGrammar  _temp_8311 = var_cas_nonterminalSymbolsMapForGrammar ;
                  if (_temp_8311._isBuilt ()) {
                    _temp_8311 (HERE)->method_searchKey (_inLexique, operand_8016->mKey, var_cas_altSignatureMap COMMA_SOURCE_FILE_AT_LINE (207)) ;
                  }
                  {
                    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_8369 (var_cas_altSignatureMap, true) ;
                    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_8369 = NULL ;
                    while (((operand_8369 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_8369.nextObject ()))) {
                      macroValidPointer (operand_8369) ;
                      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_temp ;
                      var_cas_temp = operand_8016->mInfo.mNonterminalSymbolParametersMap ;
                      GGS_L_signature  var_cas_importedAltSignature ;
                      GGS_lstring  var_cas_importedReturnedType ;
                      const GGS_M_nonterminalSymbolAltsForGrammar  _temp_8650 = var_cas_temp ;
                      if (_temp_8650._isBuilt ()) {
                        _temp_8650 (HERE)->method_searchKey (_inLexique, operand_8369->mKey, var_cas_importedAltSignature, var_cas_importedReturnedType COMMA_SOURCE_FILE_AT_LINE (212)) ;
                      }
                      ::routine_checkSignature_ForGrammarComponent (_inLexique,  var_cas_importedAltSignature,  operand_8369->mInfo.mFormalParametersList,  operand_8016->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)),  operand_8369->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (213)) COMMA_SOURCE_FILE_AT_LINE (212)) ;
                    }
                  }
                  {
                    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_8884 (operand_8016->mInfo.mNonterminalSymbolParametersMap, true) ;
                    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_8884 = NULL ;
                    while (((operand_8884 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_8884.nextObject ()))) {
                      macroValidPointer (operand_8884) ;
                      if (((operand_8884->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (216)))._operator_isNotEqual (GGS_string (true, "parse"))).isBuiltAndTrue ()) {
                        GGS_L_signature  automatic_var_0 ;
                        GGS_lstring  automatic_var_1 ;
                        const GGS_M_nonterminalSymbolAltsForGrammar  _temp_9062 = var_cas_altSignatureMap ;
                        if (_temp_9062._isBuilt ()) {
                          _temp_9062 (HERE)->method_searchKey (_inLexique, operand_8884->mKey, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (217)) ;
                        }
                      }
                    }
                  }
                }else{
                  var_cas_nonterminalSymbolsMapForGrammar.modifier_insertKey (_inLexique, operand_8016->mKey, operand_8016->mInfo.mNonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (221)) ;
                }
              }
            }
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  GGS_lstring  var_cas_startSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_startSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_startSymbolEntityAndMetamodel  var_cas_startSymbolEntityAndMetamodelMap ;
  var_cas_startSymbolEntityAndMetamodelMap = GGS_M_startSymbolEntityAndMetamodel ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
        GGS_lstring  var_cas_returnedEntityName ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            var_cas_returnedEntityName = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            GGS_lstring  var_cas_returnedMetamodelName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_returnedMetamodelName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_entityToImplementMap  automatic_var_2 ;
            GGS_stringset  automatic_var_3 ;
            const GGS_M_metamodelsComponents  _temp_10044 = var_cas_ioMetamodelComponentMap ;
            if (_temp_10044._isBuilt ()) {
              _temp_10044 (HERE)->method_searchKey (_inLexique, var_cas_returnedMetamodelName, var_cas_returnedEntityName, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (246)) ;
            }
            var_cas_startSymbolEntityAndMetamodelMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_returnedEntityName, var_cas_returnedMetamodelName COMMA_SOURCE_FILE_AT_LINE (247)) ;
            } break ;
          default :
            break ;
        }
        var_cas_grammarAltMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntityName COMMA_SOURCE_FILE_AT_LINE (249)) ;
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_startSymbolAltMap ;
  GGS_luint  var_cas_startSymbolIndex ;
  const GGS_M_nonTerminalSymbolsForGrammar  _temp_10541 = var_cas_nonterminalSymbolsMapForGrammar ;
  if (_temp_10541._isBuilt ()) {
    _temp_10541 (HERE)->method_searchKeyGetID (_inLexique, var_cas_startSymbolName, var_cas_startSymbolIndex, var_cas_startSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (258)) ;
  }
  {
    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_10663 (var_cas_startSymbolAltMap, true) ;
    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_10663 = NULL ;
    while (((operand_10663 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_10663.nextObject ()))) {
      macroValidPointer (operand_10663) ;
      GGS_L_signature  var_cas_altMap ;
      GGS_lstring  var_cas_returnedEntity ;
      const GGS_M_nonterminalSymbolAltsForGrammar  _temp_10829 = var_cas_grammarAltMap ;
      if (_temp_10829._isBuilt ()) {
        _temp_10829 (HERE)->method_searchKey (_inLexique, operand_10663->mKey, var_cas_altMap, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (263)) ;
      }
      ::routine_checkSignature_ForGrammarComponent (_inLexique,  operand_10663->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (_inLexique),  operand_10663->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (264)) COMMA_SOURCE_FILE_AT_LINE (263)) ;
      if (((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (265)))._operator_isNotEqual (operand_10663->mInfo.mReturnedEntityTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (265)))).isBuiltAndTrue ()) {
      }
    }
  }
  {
    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_11071 (var_cas_grammarAltMap, true) ;
    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_11071 = NULL ;
    while (((operand_11071 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_11071.nextObject ()))) {
      macroValidPointer (operand_11071) ;
      GGS_L_signature  automatic_var_4 ;
      GGS_lstring  automatic_var_5 ;
      const GGS_M_nonterminalSymbolAltsForGrammar  _temp_11137 = var_cas_startSymbolAltMap ;
      if (_temp_11137._isBuilt ()) {
        _temp_11137 (HERE)->method_searchKey (_inLexique, operand_11071->mKey, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (270)) ;
      }
    }
  }
  if (var_cas_grammarName._isBuilt () &&
      var_cas_grammarClass._isBuilt () &&
      var_cas_startSymbolIndex._isBuilt () &&
      var_cas_lexiqueName._isBuilt () &&
      GGS_location (_inLexique)._isBuilt () &&
      var_cas_terminalSymbolMap._isBuilt () &&
      var_cas_syntaxComponentsList._isBuilt () &&
      var_cas_nonterminalSymbolsMapForGrammar._isBuilt () &&
      var_cas_startSymbolEntityAndMetamodelMap._isBuilt ()) {
    ::routine_analyzeGrammar (_inLexique,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName,  GGS_location (_inLexique),  var_cas_terminalSymbolMap,  var_cas_syntaxComponentsList,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_startSymbolEntityAndMetamodelMap COMMA_SOURCE_FILE_AT_LINE (271)) ;
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (_inLexique, var_cas_grammarName, var_cas_startSymbolAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (285)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_110_4_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_110_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_110_4_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_110_4_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_grammarName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_getLexiqueName (_inLexique, var_cas_lexiqueName) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  _temp_15579 = var_cas_ioOptionsComponentsMap ;
                if (_temp_15579._isBuilt ()) {
                  _temp_15579 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (476)) ;
                }
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (_inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  _temp_15976 = var_cas_importedOptionComponentsMap ;
                if (_temp_15976._isBuilt ()) {
                  _temp_15976 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (486)) ;
                }
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            if (((var_cas_ioOptionsComponentsMap.reader_hasKey (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (489)) COMMA_SOURCE_FILE_AT_LINE (489)))._operator_not ()).isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (490)) ;
            }
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
        GGS_lstring  var_cas_returnedEntityName ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            var_cas_returnedEntityName = GGS_lstring ::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            GGS_lstring  var_cas_returnedMetamodelName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_returnedMetamodelName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_entityToImplementMap  automatic_var_6 ;
            GGS_stringset  automatic_var_7 ;
            const GGS_M_metamodelsComponents  _temp_16966 = var_cas_ioMetamodelComponentMap ;
            if (_temp_16966._isBuilt ()) {
              _temp_16966 (HERE)->method_searchKey (_inLexique, var_cas_returnedMetamodelName, var_cas_returnedEntityName, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (518)) ;
            }
            } break ;
          default :
            break ;
        }
        var_cas_grammarAltMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntityName COMMA_SOURCE_FILE_AT_LINE (520)) ;
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (_inLexique, var_cas_grammarName, var_cas_grammarAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (529)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_110_4_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

