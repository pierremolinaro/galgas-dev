//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_parser.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      november 7th, 2009, at 20h2'1"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammar_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammar_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//Virtual Table for category method '@AC_instruction_ForGrammar.fixSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static TC_UniqueArray <typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList> gDispatchTableForMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList ;

//---------------------------------------------------------------------------*

void
enterCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList (typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList inRoutine,
                     const PMSInt32 inClassID) {
  gDispatchTableForMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList.forceObjectAtIndex (inClassID, inRoutine, NULL) ;
}

//---------------------------------------------------------------------------*

typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList
findCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList (AC_galgasClassRunTimeInformation * inClassPtr) {
  typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList result = NULL ;
  if (inClassPtr->slotID () < gDispatchTableForMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList.count ()) {
    result = gDispatchTableForMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList (inClassPtr->slotID () COMMA_HERE) ;
  }
  if (result == NULL) {
    AC_galgasClassRunTimeInformation * superClassPtr = inClassPtr->superClassPtr () ;
    if (superClassPtr != NULL) {
      result = findCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList (superClassPtr) ;
      gDispatchTableForMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList.forceObjectAtIndex (inClassPtr->slotID (), result, NULL) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of routine "fixSyntaxInstructionList"            *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_fixSyntaxInstructionList (C_Compiler & inLexique,
                                const GGS_L_ruleSyntaxSignature   var_cas_inInstructionList,
                                GGS_M_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                GGS_L_ruleSyntaxSignature  & var_cas_outSyntaxInstructionList COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_fixSyntaxInstructionList at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  var_cas_outSyntaxInstructionList = GGS_L_ruleSyntaxSignature ::constructor_emptyList () ;
  {
    GGS_L_ruleSyntaxSignature::cEnumerator enumerator_2549 (var_cas_inInstructionList, true) ;
    const GGS_L_ruleSyntaxSignature::cElement * operand_2549 = NULL ;
    while (((operand_2549 = enumerator_2549.nextObject ()))) {
      macroValidPointer (operand_2549) ;
      const GGS_AC_instruction_ForGrammar  temp_2595 = operand_2549->mInstruction ;
      if (temp_2595.isBuilt ()) {
        typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList method = findCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList (temp_2595.galgasObjectRunTimeInfo ()) ;
        if (method != NULL) {
          method (inLexique, temp_2595 (HERE), var_cas_ioActuallyUsedTerminalSymbolMap, var_cas_outSyntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (47)) ;
        }
      }
    }
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_fixSyntaxInstructionList\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@T_terminalInstruction_forGrammarComponent.fixSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__T_terminalInstruction_forGrammarComponent__fixSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_T_terminalInstruction_forGrammarComponent * operand_2853,
                                GGS_M_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                GGS_L_ruleSyntaxSignature  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_2853 != NULL) {
    GGS_uint  var_cas_terminalSymbolIndex ;
    elementOf_GGS_M_terminalSymbolsMapForGrammarAnalysis * operand_3053 = (elementOf_GGS_M_terminalSymbolsMapForGrammarAnalysis *) var_cas_ioActuallyUsedTerminalSymbolMap.searchForWithInstruction (inLexique, operand_2853->mTerminalSymbolName, GGS_M_terminalSymbolsMapForGrammarAnalysis::kSearchMessage_searchKey COMMA_SOURCE_FILE_AT_LINE (58)) ;
    if (NULL != operand_3053) {
      var_cas_terminalSymbolIndex = operand_3053->mInfo.mTerminalIndex ;
    }else{
      var_cas_terminalSymbolIndex = var_cas_ioActuallyUsedTerminalSymbolMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (61)) ;
      var_cas_ioActuallyUsedTerminalSymbolMap.modifier_insertKey (inLexique, operand_2853->mTerminalSymbolName, var_cas_terminalSymbolIndex COMMA_SOURCE_FILE_AT_LINE (62)) ;
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_T_terminalInstruction_forGrammarComponent ::constructor_new (inLexique, operand_2853->mStartLocation, operand_2853->mTerminalSymbolName, var_cas_terminalSymbolIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@T_nonterminalInstruction_forGrammarComponent.fixSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__T_nonterminalInstruction_forGrammarComponent__fixSyntaxInstructionList (C_Compiler &,
                                const cPtr_T_nonterminalInstruction_forGrammarComponent * operand_3648,
                                GGS_M_terminalSymbolsMapForGrammarAnalysis  & /* var_cas_ioActuallyUsedTerminalSymbolMap */,
                                GGS_L_ruleSyntaxSignature  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3648 != NULL) {
    var_cas_ioSyntaxInstructionList.addAssign_operation (operand_3648) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@T_repeatInstruction_forGrammarComponent.fixSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__T_repeatInstruction_forGrammarComponent__fixSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_T_repeatInstruction_forGrammarComponent * operand_3996,
                                GGS_M_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                GGS_L_ruleSyntaxSignature  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_3996 != NULL) {
    GGS_L_branchList_ForGrammarComponent  var_cas_repeatBranchList = GGS_L_branchList_ForGrammarComponent ::constructor_emptyList () ;
    {
      GGS_L_branchList_ForGrammarComponent::cEnumerator enumerator_4220 (operand_3996->mRepeatBranchList, true) ;
      const GGS_L_branchList_ForGrammarComponent::cElement * operand_4220 = NULL ;
      while (((operand_4220 = enumerator_4220.nextObject ()))) {
        macroValidPointer (operand_4220) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxInstructionList ;
        ::routine_fixSyntaxInstructionList (inLexique,  operand_4220->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (89)) ;
        var_cas_repeatBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_T_repeatInstruction_forGrammarComponent ::constructor_new (inLexique, operand_3996->mStartLocation, var_cas_repeatBranchList, operand_3996->mAddedNonterminalmSymbolIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//Category method '@T_selectInstruction_forGrammarComponent.fixSyntaxInstructionList'*
//                                                                           *
//---------------------------------------------------------------------------*

static void
category_method__T_selectInstruction_forGrammarComponent__fixSyntaxInstructionList (C_Compiler & inLexique,
                                const cPtr_T_selectInstruction_forGrammarComponent * operand_4807,
                                GGS_M_terminalSymbolsMapForGrammarAnalysis  & var_cas_ioActuallyUsedTerminalSymbolMap,
                                GGS_L_ruleSyntaxSignature  & var_cas_ioSyntaxInstructionList
                                COMMA_UNUSED_LOCATION_ARGS) {
  if (operand_4807 != NULL) {
    GGS_L_branchList_ForGrammarComponent  var_cas_selectBranchList = GGS_L_branchList_ForGrammarComponent ::constructor_emptyList () ;
    {
      GGS_L_branchList_ForGrammarComponent::cEnumerator enumerator_5031 (operand_4807->mSelectBranchList, true) ;
      const GGS_L_branchList_ForGrammarComponent::cElement * operand_5031 = NULL ;
      while (((operand_5031 = enumerator_5031.nextObject ()))) {
        macroValidPointer (operand_5031) ;
        GGS_L_ruleSyntaxSignature  var_cas_syntaxInstructionList ;
        ::routine_fixSyntaxInstructionList (inLexique,  operand_5031->mSyntaxInstructionList,  var_cas_ioActuallyUsedTerminalSymbolMap,  var_cas_syntaxInstructionList COMMA_SOURCE_FILE_AT_LINE (112)) ;
        var_cas_selectBranchList.addAssign_operation (var_cas_syntaxInstructionList) ;
      }
    }
    var_cas_ioSyntaxInstructionList.addAssign_operation (GGS_T_selectInstruction_forGrammarComponent ::constructor_new (inLexique, operand_4807->mStartLocation, var_cas_selectBranchList, operand_4807->mAddedNonterminalmSymbolIndex COMMA_HERE)) ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_202_23_ (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &var_cas_ioSemanticContext) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_string var_cas_basename = GGS_string::constructor_stringWithSourceFilePath (inLexique COMMA_HERE).reader_lastPathComponent (inLexique COMMA_SOURCE_FILE_AT_LINE (214)).reader_stringByDeletingPathExtension (inLexique COMMA_SOURCE_FILE_AT_LINE (214)) ;
  const GGS_bool cond_8673 = (var_cas_grammarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (215))).operator_isNotEqual (var_cas_basename) ;
  if (cond_8673.isBuiltAndTrue ()) {
    var_cas_grammarName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, ((((GGS_string ("GALGAS 1.7.5 and later checks "
      "the component name ('")).operator_concat (var_cas_grammarName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (217)))).operator_concat (GGS_string ("') against the source file base name ('"))).operator_concat (var_cas_basename)).operator_concat (GGS_string ("'): they should be identical")) COMMA_SOURCE_FILE_AT_LINE (220)) ;
  }
  GGS_lstring  var_cas_grammarClass ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarClass) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (inLexique, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_stringset  var_cas_classesNamesSet = GGS_stringset ::constructor_emptySet () ;
  GGS_L_syntaxComponents_ForGrammar  var_cas_syntaxComponentsList = GGS_L_syntaxComponents_ForGrammar ::constructor_emptyList () ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonterminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  temp_9593 = var_cas_ioOptionsComponentsMap ;
                if (temp_9593.isBuilt ()) {
                  temp_9593 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (253)) ;
                }
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  temp_9990 = var_cas_importedOptionComponentsMap ;
                if (temp_9990.isBuilt ()) {
                  temp_9990 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (263)) ;
                }
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            const GGS_bool cond_10303 = (var_cas_ioOptionsComponentsMap.reader_hasKey (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (266)) COMMA_SOURCE_FILE_AT_LINE (266))).operator_not () ;
            if (cond_10303.isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (267)) ;
            }
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            GGS_lstring  var_cas_syntaxComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
                nt_parse_syntax_for_importing_ (inLexique, var_cas_fileName, var_cas_syntaxComponentsMap, var_cas_ioSemanticContext) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            GGS_M_nonTerminalSymbolsForGrammar  var_cas_importedNonterminalSymbolsMap ;
            GGS_L_productionRules_ForGrammarComponent  var_cas_importedProductionRulesList ;
            GGS_lstring  var_cas_importedLexiqueComponentName ;
            const GGS_M_syntaxComponents  temp_11107 = var_cas_syntaxComponentsMap ;
            if (temp_11107.isBuilt ()) {
              temp_11107 (HERE)->method_searchKey (inLexique, var_cas_syntaxComponentName, var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedLexiqueComponentName COMMA_SOURCE_FILE_AT_LINE (292)) ;
            }
            const GGS_bool cond_11477 = (var_cas_lexiqueName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))).operator_isNotEqual (var_cas_importedLexiqueComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (298))) ;
            if (cond_11477.isBuiltAndTrue ()) {
              var_cas_syntaxComponentName.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("this component does not use the previously declared lexique") COMMA_SOURCE_FILE_AT_LINE (300)) ;
            }
            var_cas_syntaxComponentsList.addAssign_operation (var_cas_importedProductionRulesList, var_cas_syntaxComponentName) ;
            {
              GGS_M_nonTerminalSymbolsForGrammar::cEnumerator enumerator_11736 (var_cas_importedNonterminalSymbolsMap, true) ;
              const GGS_M_nonTerminalSymbolsForGrammar::cElement * operand_11736 = NULL ;
              while (((operand_11736 = enumerator_11736.nextObject ()))) {
                macroValidPointer (operand_11736) ;
                const GGS_bool cond_12615 = var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (inLexique, operand_11736->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (308)) COMMA_SOURCE_FILE_AT_LINE (308)) ;
                if (cond_12615.isBuiltAndTrue ()) {
                  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_altSignatureMap ;
                  const GGS_M_nonTerminalSymbolsForGrammar  temp_11950 = var_cas_nonterminalSymbolsMapForGrammar ;
                  if (temp_11950.isBuilt ()) {
                    temp_11950 (HERE)->method_searchKey (inLexique, operand_11736->mKey, var_cas_altSignatureMap COMMA_SOURCE_FILE_AT_LINE (310)) ;
                  }
                  {
                    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_12015 (var_cas_altSignatureMap, true) ;
                    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_12015 = NULL ;
                    while (((operand_12015 = enumerator_12015.nextObject ()))) {
                      macroValidPointer (operand_12015) ;
                      GGS_M_nonterminalSymbolAltsForGrammar  var_cas_temp = operand_11736->mInfo.mNonterminalSymbolParametersMap ;
                      GGS_L_signature  var_cas_importedAltSignature ;
                      const GGS_M_nonterminalSymbolAltsForGrammar  temp_12189 = var_cas_temp ;
                      if (temp_12189.isBuilt ()) {
                        temp_12189 (HERE)->method_searchKey (inLexique, operand_12015->mKey, var_cas_importedAltSignature COMMA_SOURCE_FILE_AT_LINE (314)) ;
                      }
                      ::routine_checkSignature_ForGrammarComponent (inLexique,  var_cas_importedAltSignature,  operand_12015->mInfo.mFormalParametersList,  operand_12015->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (315)),  operand_12015->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (315)) COMMA_SOURCE_FILE_AT_LINE (315)) ;
                    }
                  }
                  {
                    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_12425 (operand_11736->mInfo.mNonterminalSymbolParametersMap, true) ;
                    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_12425 = NULL ;
                    while (((operand_12425 = enumerator_12425.nextObject ()))) {
                      macroValidPointer (operand_12425) ;
                      const GGS_bool cond_12573 = (operand_12425->mKey.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (318))).operator_isNotEqual (GGS_string ("parse")) ;
                      if (cond_12573.isBuiltAndTrue ()) {
                        GGS_L_signature  automatic_var_0 ;
                        const GGS_M_nonterminalSymbolAltsForGrammar  temp_12539 = var_cas_altSignatureMap ;
                        if (temp_12539.isBuilt ()) {
                          temp_12539 (HERE)->method_searchKey (inLexique, operand_12425->mKey, automatic_var_0 COMMA_SOURCE_FILE_AT_LINE (319)) ;
                        }
                      }
                    }
                  }
                }else if (cond_12615.isBuiltAndFalse ()) {
                  var_cas_nonterminalSymbolsMapForGrammar.modifier_insertKey (inLexique, operand_11736->mKey, operand_11736->mInfo.mNonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (323)) ;
                }
              }
            }
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  GGS_lstring  var_cas_startSymbolName ;
  inLexique.assignFromAttribute_tokenString (var_cas_startSymbolName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
        var_cas_grammarAltMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (339)) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_startSymbolAltMap ;
  GGS_luint  var_cas_startSymbolIndex ;
  const GGS_M_nonTerminalSymbolsForGrammar  temp_13467 = var_cas_nonterminalSymbolsMapForGrammar ;
  if (temp_13467.isBuilt ()) {
    temp_13467 (HERE)->method_searchKeyGetID (inLexique, var_cas_startSymbolName, var_cas_startSymbolIndex, var_cas_startSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (348)) ;
  }
  {
    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_13592 (var_cas_startSymbolAltMap, true) ;
    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_13592 = NULL ;
    while (((operand_13592 = enumerator_13592.nextObject ()))) {
      macroValidPointer (operand_13592) ;
      GGS_L_signature  var_cas_altMap ;
      const GGS_M_nonterminalSymbolAltsForGrammar  temp_13650 = var_cas_grammarAltMap ;
      if (temp_13650.isBuilt ()) {
        temp_13650 (HERE)->method_searchKey (inLexique, operand_13592->mKey, var_cas_altMap COMMA_SOURCE_FILE_AT_LINE (352)) ;
      }
      ::routine_checkSignature_ForGrammarComponent (inLexique,  operand_13592->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (inLexique),  operand_13592->mKey.reader_location (inLexique COMMA_SOURCE_FILE_AT_LINE (353)) COMMA_SOURCE_FILE_AT_LINE (353)) ;
    }
  }
  {
    GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_13800 (var_cas_grammarAltMap, true) ;
    const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_13800 = NULL ;
    while (((operand_13800 = enumerator_13800.nextObject ()))) {
      macroValidPointer (operand_13800) ;
      GGS_L_signature  automatic_var_1 ;
      const GGS_M_nonterminalSymbolAltsForGrammar  temp_13836 = var_cas_startSymbolAltMap ;
      if (temp_13836.isBuilt ()) {
        temp_13836 (HERE)->method_searchKey (inLexique, operand_13800->mKey, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (356)) ;
      }
    }
  }
  GGS_M_unusedNonTerminalSymbolsForGrammar  var_cas_unusedNonTerminalSymbolsForGrammar = GGS_M_unusedNonTerminalSymbolsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                GGS_lstring  var_cas_nonterminalSymbolName ;
                inLexique.assignFromAttribute_tokenString (var_cas_nonterminalSymbolName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
                GGS_luint  var_cas_nonterminalIndex ;
                GGS_M_nonterminalSymbolAltsForGrammar  automatic_var_2 ;
                const GGS_M_nonTerminalSymbolsForGrammar  temp_14170 = var_cas_nonterminalSymbolsMapForGrammar ;
                if (temp_14170.isBuilt ()) {
                  temp_14170 (HERE)->method_searchKeyGetID (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalIndex, automatic_var_2 COMMA_SOURCE_FILE_AT_LINE (366)) ;
                }
                var_cas_unusedNonTerminalSymbolsForGrammar.modifier_insertKey (inLexique, var_cas_nonterminalSymbolName, var_cas_nonterminalIndex COMMA_SOURCE_FILE_AT_LINE (367)) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  GGS_M_terminalSymbolsMapForGrammarAnalysis  var_cas_actuallyUsedTerminalSymbolMap = GGS_M_terminalSymbolsMapForGrammarAnalysis ::constructor_emptyMap (inLexique COMMA_HERE) ;
  {
    GGS_M_terminalSymbolsMapForUse::cEnumerator enumerator_14561 (var_cas_terminalSymbolMap, true) ;
    const GGS_M_terminalSymbolsMapForUse::cElement * operand_14561 = NULL ;
    while (((operand_14561 = enumerator_14561.nextObject ()))) {
      macroValidPointer (operand_14561) ;
      var_cas_actuallyUsedTerminalSymbolMap.modifier_insertKey (inLexique, operand_14561->mKey, var_cas_actuallyUsedTerminalSymbolMap.reader_count (inLexique COMMA_SOURCE_FILE_AT_LINE (376)) COMMA_SOURCE_FILE_AT_LINE (376)) ;
    }
  }
  GGS_L_syntaxComponents_ForGrammar  var_cas_syntaxComponentsListWithFixedInfos = GGS_L_syntaxComponents_ForGrammar ::constructor_emptyList () ;
  {
    GGS_L_syntaxComponents_ForGrammar::cEnumerator enumerator_14848 (var_cas_syntaxComponentsList, true) ;
    const GGS_L_syntaxComponents_ForGrammar::cElement * operand_14848 = NULL ;
    while (((operand_14848 = enumerator_14848.nextObject ()))) {
      macroValidPointer (operand_14848) ;
      GGS_L_productionRules_ForGrammarComponent  var_cas_fixedProductionRuleList = GGS_L_productionRules_ForGrammarComponent ::constructor_emptyList () ;
      {
        GGS_L_productionRules_ForGrammarComponent::cEnumerator enumerator_14965 (operand_14848->mProductionRulesList, true) ;
        const GGS_L_productionRules_ForGrammarComponent::cElement * operand_14965 = NULL ;
        while (((operand_14965 = enumerator_14965.nextObject ()))) {
          macroValidPointer (operand_14965) ;
          GGS_L_ruleSyntaxSignature  var_cas_fixedInstructionList ;
          ::routine_fixSyntaxInstructionList (inLexique,  operand_14965->mInstructionList,  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_fixedInstructionList COMMA_SOURCE_FILE_AT_LINE (384)) ;
          var_cas_fixedProductionRuleList.addAssign_operation (operand_14965->mLeftNonterminalSymbol, operand_14965->mLeftNonterminalSymbolIndex, var_cas_fixedInstructionList) ;
        }
      }
      var_cas_syntaxComponentsListWithFixedInfos.addAssign_operation (var_cas_fixedProductionRuleList, operand_14848->mSyntaxComponentName) ;
    }
  }
  if (var_cas_grammarName.isBuilt () &&
      var_cas_grammarClass.isBuilt () &&
      var_cas_startSymbolIndex.isBuilt () &&
      var_cas_lexiqueName.isBuilt () &&
      GGS_location (inLexique).isBuilt () &&
      var_cas_actuallyUsedTerminalSymbolMap.isBuilt () &&
      var_cas_syntaxComponentsListWithFixedInfos.isBuilt () &&
      var_cas_nonterminalSymbolsMapForGrammar.isBuilt () &&
      var_cas_unusedNonTerminalSymbolsForGrammar.isBuilt ()) {
    ::routine_analyzeGrammar (inLexique,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName,  GGS_location (inLexique),  var_cas_actuallyUsedTerminalSymbolMap,  var_cas_syntaxComponentsListWithFixedInfos,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_unusedNonTerminalSymbolsForGrammar COMMA_SOURCE_FILE_AT_LINE (401)) ;
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, var_cas_grammarName, var_cas_startSymbolAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (413)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_202_23_importForGrammarAnalysis (galgas_scanner & inLexique,
                                GGS_syntaxRuleList  &/* var_cas_ioSyntaxRuleList */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_202_23_importGrammarForSemantics (galgas_scanner & inLexique,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  inLexique.assignFromAttribute_tokenString (var_cas_grammarName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_getLexiqueName (inLexique, var_cas_lexiqueName) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar ::constructor_emptyMap (inLexique COMMA_HERE) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  temp_20157 = var_cas_ioOptionsComponentsMap ;
                if (temp_20157.isBuilt ()) {
                  temp_20157 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (641)) ;
                }
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                inLexique.assignFromAttribute_tokenString (var_cas_fileName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap = GGS_M_optionComponents ::constructor_emptyMap (inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  temp_20554 = var_cas_importedOptionComponentsMap ;
                if (temp_20554.isBuilt ()) {
                  temp_20554 (HERE)->method_searchKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (651)) ;
                }
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            const GGS_bool cond_20867 = (var_cas_ioOptionsComponentsMap.reader_hasKey (inLexique, var_cas_optionComponentName.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (654)) COMMA_SOURCE_FILE_AT_LINE (654))).operator_not () ;
            if (cond_20867.isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (655)) ;
            }
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (inLexique, var_cas_signature) ;
        var_cas_grammarAltMap.modifier_insertKey (inLexique, var_cas_altName, var_cas_signature COMMA_SOURCE_FILE_AT_LINE (676)) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.assignFromAttribute_tokenString (var_cas_altName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (inLexique, var_cas_grammarName, var_cas_grammarAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (684)) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_202_23_importLexique (galgas_scanner & inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_202_23_importOptions (galgas_scanner & inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_202_23_importSemantics (galgas_scanner & inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */,
                                GGS_stringset  &/* var_cas_ioImportedSemanticsComponentNameSet */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
pr_galgas_component_grammar_parser_202_23_importSyntax (galgas_scanner & inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_EXsemanticContext &/* var_cas_ioSemanticContext */) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A_) COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_repeat_grammar_parser_0 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_with) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  nt_get_lexique_infos_parse (inLexique) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
        inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_2 (inLexique)) {
          case 1 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          case 2 : {
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_4 (inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5F_string) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (inLexique) ;
                } break ;
              default :
                break ;
            }
            inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_1 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
        nt_formal_arguments_list_parse (inLexique) ;
      switch (select_repeat_grammar_parser_5 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_repeat_grammar_parser_6 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_unused) COMMA_HERE) ;
          { bool syntaxRepeat_7 = true ;
            while (syntaxRepeat_7) {
                inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5F_terminal_5F_symbol) COMMA_HERE) ;
              switch (select_repeat_grammar_parser_7 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_7 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                      Prologue and epilogue actions                        *
//                                                                           *
//---------------------------------------------------------------------------*

static void prologueRoutineFor_grammar_parser (void) {
 enterCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList ((typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList) category_method__T_terminalInstruction_forGrammarComponent__fixSyntaxInstructionList, gClassInfoFor__T_terminalInstruction_forGrammarComponent.slotID ()) ;
 enterCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList ((typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList) category_method__T_nonterminalInstruction_forGrammarComponent__fixSyntaxInstructionList, gClassInfoFor__T_nonterminalInstruction_forGrammarComponent.slotID ()) ;
 enterCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList ((typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList) category_method__T_repeatInstruction_forGrammarComponent__fixSyntaxInstructionList, gClassInfoFor__T_repeatInstruction_forGrammarComponent.slotID ()) ;
 enterCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList ((typeCategoryMethod__AC_instruction_ForGrammar__fixSyntaxInstructionList) category_method__T_selectInstruction_forGrammarComponent__fixSyntaxInstructionList, gClassInfoFor__T_selectInstruction_forGrammarComponent.slotID ()) ;
}

//---------------------------------------------------------------------------*

C_PrologueEpilogueAction prologueEpilogueObjectFor_grammar_parser (prologueRoutineFor_grammar_parser,
                                   NULL) ;

//---------------------------------------------------------------------------*

