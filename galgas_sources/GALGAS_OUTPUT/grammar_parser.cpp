//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'grammar_parser.cpp'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      april 4th, 2008, at 21h37'25"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "grammar_parser.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammar_parser.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'galgas_component'            *
//                                                                           *
//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_109_4_ (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &var_cas_ioLexiqueMapForUse,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_syntaxComponents  &var_cas_ioSyntaxComponentsMap,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_treewalkingComponents  &var_cas_ioTreewalkingComponentMap,
                                GGS_semanticContext &var_cas_ioSemanticContext) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_grammarName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarClass ;
  _inLexique._assignFromAttribute_tokenString (var_cas_grammarClass) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_M_terminalSymbolsMapForUse  var_cas_terminalSymbolMap ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_ (_inLexique, var_cas_terminalSymbolMap, var_cas_ioLexiqueMapForUse, var_cas_lexiqueName) ;
  GGS_stringset  var_cas_classesNamesSet ;
  var_cas_classesNamesSet = GGS_stringset::constructor_emptySet (_inLexique COMMA_HERE) ;
  GGS_L_syntaxComponents_ForGrammar  var_cas_syntaxComponentsList ;
  var_cas_syntaxComponentsList = GGS_L_syntaxComponents_ForGrammar::constructor_emptyList (_inLexique COMMA_HERE) ;
  GGS_M_nonTerminalSymbolsForGrammar  var_cas_nonterminalSymbolsMapForGrammar ;
  var_cas_nonterminalSymbolsMapForGrammar = GGS_M_nonTerminalSymbolsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  _temp_5687 = var_cas_ioOptionsComponentsMap ;
                if (_temp_5687._isBuilt ()) {
                  _temp_5687 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (148)) ;
                }
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  _temp_6084 = var_cas_importedOptionComponentsMap ;
                if (_temp_6084._isBuilt ()) {
                  _temp_6084 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (158)) ;
                }
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            if (((var_cas_ioOptionsComponentsMap.reader_hasKey (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (161)) COMMA_SOURCE_FILE_AT_LINE (161)))._operator_not ()).isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (162)) ;
            }
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            GGS_lstring  var_cas_syntaxComponentName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_syntaxComponentName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_syntaxComponents  var_cas_syntaxComponentsMap ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                var_cas_syntaxComponentsMap = var_cas_ioSyntaxComponentsMap ;
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                var_cas_syntaxComponentsMap = GGS_M_syntaxComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
                nt_parse_syntax_for_importing_ (_inLexique, var_cas_fileName, var_cas_syntaxComponentsMap, var_cas_ioMetamodelComponentMap, var_cas_ioTreewalkingComponentMap, var_cas_ioSemanticContext) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            GGS_M_nonTerminalSymbolsForGrammar  var_cas_importedNonterminalSymbolsMap ;
            GGS_L_productionRules_ForGrammarComponent  var_cas_importedProductionRulesList ;
            GGS_lstring  var_cas_importedLexiqueComponentName ;
            const GGS_M_syntaxComponents  _temp_7275 = var_cas_syntaxComponentsMap ;
            if (_temp_7275._isBuilt ()) {
              _temp_7275 (HERE)->method_searchKey (_inLexique, var_cas_syntaxComponentName, var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_importedLexiqueComponentName COMMA_SOURCE_FILE_AT_LINE (189)) ;
            }
            if (((var_cas_lexiqueName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (195)))._operator_isNotEqual (var_cas_importedLexiqueComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (195)))).isBuiltAndTrue ()) {
              var_cas_syntaxComponentName.reader_location (_inLexique COMMA_HERE).signalGGSSemanticError (_inLexique, GGS_string (true, "this component does not use the previously declared lexique") COMMA_SOURCE_FILE_AT_LINE (196)) ;
            }
            var_cas_syntaxComponentsList._addAssign_operation (var_cas_importedNonterminalSymbolsMap, var_cas_importedProductionRulesList, var_cas_syntaxComponentName) ;
            GGS_M_nonTerminalSymbolsForGrammar::cEnumerator enumerator_7953 (var_cas_importedNonterminalSymbolsMap, true) ;
            const GGS_M_nonTerminalSymbolsForGrammar::cElement * operand_7953 = NULL ;
            while (((operand_7953 = (GGS_M_nonTerminalSymbolsForGrammar::cElement *) enumerator_7953.nextObject ()))) {
              macroValidPointer (operand_7953) ;
              if ((var_cas_nonterminalSymbolsMapForGrammar.reader_hasKey (_inLexique, operand_7953->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (204)) COMMA_SOURCE_FILE_AT_LINE (204))).isBuiltAndTrue ()) {
                GGS_M_nonterminalSymbolAltsForGrammar  var_cas_altSignatureMap ;
                const GGS_M_nonTerminalSymbolsForGrammar  _temp_8248 = var_cas_nonterminalSymbolsMapForGrammar ;
                if (_temp_8248._isBuilt ()) {
                  _temp_8248 (HERE)->method_searchKey (_inLexique, operand_7953->mKey, var_cas_altSignatureMap COMMA_SOURCE_FILE_AT_LINE (206)) ;
                }
                GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_8306 (var_cas_altSignatureMap, true) ;
                const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_8306 = NULL ;
                while (((operand_8306 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_8306.nextObject ()))) {
                  macroValidPointer (operand_8306) ;
                  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_temp ;
                  var_cas_temp = operand_7953->mInfo.mNonterminalSymbolParametersMap ;
                  GGS_L_signature  var_cas_importedAltSignature ;
                  GGS_lstring  var_cas_importedReturnedType ;
                  const GGS_M_nonterminalSymbolAltsForGrammar  _temp_8587 = var_cas_temp ;
                  if (_temp_8587._isBuilt ()) {
                    _temp_8587 (HERE)->method_searchKey (_inLexique, operand_8306->mKey, var_cas_importedAltSignature, var_cas_importedReturnedType COMMA_SOURCE_FILE_AT_LINE (211)) ;
                  }
                  ::routine_checkSignature_ForGrammarComponent (_inLexique,  var_cas_importedAltSignature,  operand_8306->mInfo.mFormalParametersList,  operand_7953->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (212)),  operand_8306->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (212)) COMMA_SOURCE_FILE_AT_LINE (211)) ;
                }
                enumerator_8306.reset () ;
                GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_8821 (operand_7953->mInfo.mNonterminalSymbolParametersMap, true) ;
                const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_8821 = NULL ;
                while (((operand_8821 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_8821.nextObject ()))) {
                  macroValidPointer (operand_8821) ;
                  if (((operand_8821->mKey.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (215)))._operator_isNotEqual (GGS_string (true, "parse"))).isBuiltAndTrue ()) {
                    GGS_L_signature  automatic_var_0 ;
                    GGS_lstring  automatic_var_1 ;
                    const GGS_M_nonterminalSymbolAltsForGrammar  _temp_8999 = var_cas_altSignatureMap ;
                    if (_temp_8999._isBuilt ()) {
                      _temp_8999 (HERE)->method_searchKey (_inLexique, operand_8821->mKey, automatic_var_0, automatic_var_1 COMMA_SOURCE_FILE_AT_LINE (216)) ;
                    }
                  }
                }
                enumerator_8821.reset () ;
              }else{
                var_cas_nonterminalSymbolsMapForGrammar.modifier_insertKey (_inLexique, operand_7953->mKey, operand_7953->mInfo.mNonterminalSymbolParametersMap COMMA_SOURCE_FILE_AT_LINE (220)) ;
              }
            }
            enumerator_7953.reset () ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  GGS_lstring  var_cas_startSymbolName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_startSymbolName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_M_startSymbolEntityAndMetamodel  var_cas_startSymbolEntityAndMetamodelMap ;
  var_cas_startSymbolEntityAndMetamodelMap = GGS_M_startSymbolEntityAndMetamodel::constructor_emptyMap (_inLexique COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
        GGS_lstring  var_cas_returnedEntityName ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            var_cas_returnedEntityName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            GGS_lstring  var_cas_returnedMetamodelName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_returnedMetamodelName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_entityToImplementMap  automatic_var_2 ;
            GGS_stringset  automatic_var_3 ;
            const GGS_M_metamodelsComponents  _temp_9981 = var_cas_ioMetamodelComponentMap ;
            if (_temp_9981._isBuilt ()) {
              _temp_9981 (HERE)->method_searchKey (_inLexique, var_cas_returnedMetamodelName, var_cas_returnedEntityName, automatic_var_2, automatic_var_3 COMMA_SOURCE_FILE_AT_LINE (245)) ;
            }
            var_cas_startSymbolEntityAndMetamodelMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_returnedEntityName, var_cas_returnedMetamodelName COMMA_SOURCE_FILE_AT_LINE (246)) ;
            } break ;
          default :
            break ;
        }
        var_cas_grammarAltMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntityName COMMA_SOURCE_FILE_AT_LINE (248)) ;
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_startSymbolAltMap ;
  GGS_luint  var_cas_startSymbolIndex ;
  const GGS_M_nonTerminalSymbolsForGrammar  _temp_10478 = var_cas_nonterminalSymbolsMapForGrammar ;
  if (_temp_10478._isBuilt ()) {
    _temp_10478 (HERE)->method_searchKeyGetID (_inLexique, var_cas_startSymbolName, var_cas_startSymbolIndex, var_cas_startSymbolAltMap COMMA_SOURCE_FILE_AT_LINE (257)) ;
  }
  GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_10600 (var_cas_startSymbolAltMap, true) ;
  const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_10600 = NULL ;
  while (((operand_10600 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_10600.nextObject ()))) {
    macroValidPointer (operand_10600) ;
    GGS_L_signature  var_cas_altMap ;
    GGS_lstring  var_cas_returnedEntity ;
    const GGS_M_nonterminalSymbolAltsForGrammar  _temp_10766 = var_cas_grammarAltMap ;
    if (_temp_10766._isBuilt ()) {
      _temp_10766 (HERE)->method_searchKey (_inLexique, operand_10600->mKey, var_cas_altMap, var_cas_returnedEntity COMMA_SOURCE_FILE_AT_LINE (262)) ;
    }
    ::routine_checkSignature_ForGrammarComponent (_inLexique,  operand_10600->mInfo.mFormalParametersList,  var_cas_altMap,  GGS_location (_inLexique),  operand_10600->mKey.reader_location (_inLexique COMMA_SOURCE_FILE_AT_LINE (263)) COMMA_SOURCE_FILE_AT_LINE (262)) ;
    if (((var_cas_returnedEntity.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (264)))._operator_isNotEqual (operand_10600->mInfo.mReturnedEntityTypeName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (264)))).isBuiltAndTrue ()) {
    }
  }
  enumerator_10600.reset () ;
  GGS_M_nonterminalSymbolAltsForGrammar::cEnumerator enumerator_11008 (var_cas_grammarAltMap, true) ;
  const GGS_M_nonterminalSymbolAltsForGrammar::cElement * operand_11008 = NULL ;
  while (((operand_11008 = (GGS_M_nonterminalSymbolAltsForGrammar::cElement *) enumerator_11008.nextObject ()))) {
    macroValidPointer (operand_11008) ;
    GGS_L_signature  automatic_var_4 ;
    GGS_lstring  automatic_var_5 ;
    const GGS_M_nonterminalSymbolAltsForGrammar  _temp_11074 = var_cas_startSymbolAltMap ;
    if (_temp_11074._isBuilt ()) {
      _temp_11074 (HERE)->method_searchKey (_inLexique, operand_11008->mKey, automatic_var_4, automatic_var_5 COMMA_SOURCE_FILE_AT_LINE (269)) ;
    }
  }
  enumerator_11008.reset () ;
  if (var_cas_grammarName._isBuilt () &&
      var_cas_grammarClass._isBuilt () &&
      var_cas_startSymbolIndex._isBuilt () &&
      var_cas_lexiqueName._isBuilt () &&
      GGS_location (_inLexique)._isBuilt () &&
      var_cas_terminalSymbolMap._isBuilt () &&
      var_cas_syntaxComponentsList._isBuilt () &&
      var_cas_nonterminalSymbolsMapForGrammar._isBuilt () &&
      var_cas_startSymbolEntityAndMetamodelMap._isBuilt ()) {
    ::routine_analyzeGrammar (_inLexique,  var_cas_grammarName,  var_cas_grammarClass,  var_cas_startSymbolIndex,  var_cas_lexiqueName,  GGS_location (_inLexique),  var_cas_terminalSymbolMap,  var_cas_syntaxComponentsList,  var_cas_nonterminalSymbolsMapForGrammar,  var_cas_startSymbolEntityAndMetamodelMap COMMA_SOURCE_FILE_AT_LINE (270)) ;
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (_inLexique, var_cas_grammarName, var_cas_startSymbolAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (284)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_109_4_importLexique (galgas_scanner & _inLexique,
                                GGS_M_lexiqueComponents  &/* var_cas_ioLexiqueMapForUse */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_109_4_importSyntax (galgas_scanner & _inLexique,
                                GGS_M_syntaxComponents  &/* var_cas_ioSyntaxComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_109_4_importSemantics (galgas_scanner & _inLexique,
                                GGS_M_semanticsComponents  &/* var_cas_ioSemanticsComponentsMap */,
                                GGS_M_metamodelsComponents  &/* var_cas_ioMetamodelComponentMap */,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_109_4_importGrammarForSemantics (galgas_scanner & _inLexique,
                                GGS_M_grammarComponents  &var_cas_ioGrammarComponentsMap,
                                GGS_M_metamodelsComponents  &var_cas_ioMetamodelComponentMap,
                                GGS_M_optionComponents  &var_cas_ioOptionsComponentsMap,
                                GGS_M_treewalkingComponents  &/* var_cas_ioTreewalkingComponentMap */,
                                GGS_semanticContext &/* var_cas_ioSemanticContext */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  GGS_lstring  var_cas_grammarName ;
  _inLexique._assignFromAttribute_tokenString (var_cas_grammarName) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  GGS_lstring  var_cas_lexiqueName ;
  nt_get_lexique_infos_getLexiqueName (_inLexique, var_cas_lexiqueName) ;
  GGS_M_nonterminalSymbolAltsForGrammar  var_cas_grammarAltMap ;
  var_cas_grammarAltMap = GGS_M_nonterminalSymbolAltsForGrammar::constructor_emptyMap (_inLexique COMMA_HERE) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            GGS_lstring  var_cas_optionComponentName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_optionComponentName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_M_cli_options  var_cas_boolOptionsMap ;
            GGS_M_cli_options  var_cas_uintOptionsMap ;
            GGS_M_cli_options  var_cas_stringOptionsMap ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                const GGS_M_optionComponents  _temp_15452 = var_cas_ioOptionsComponentsMap ;
                if (_temp_15452._isBuilt ()) {
                  _temp_15452 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (474)) ;
                }
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                GGS_lstring  var_cas_fileName ;
                _inLexique._assignFromAttribute_tokenString (var_cas_fileName) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                GGS_M_optionComponents  var_cas_importedOptionComponentsMap ;
                var_cas_importedOptionComponentsMap = GGS_M_optionComponents::constructor_emptyMap (_inLexique COMMA_HERE) ;
                nt_parse_option_component_for_importing_ (_inLexique, var_cas_fileName, var_cas_importedOptionComponentsMap) ;
                const GGS_M_optionComponents  _temp_15849 = var_cas_importedOptionComponentsMap ;
                if (_temp_15849._isBuilt ()) {
                  _temp_15849 (HERE)->method_searchKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (484)) ;
                }
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            if (((var_cas_ioOptionsComponentsMap.reader_hasKey (_inLexique, var_cas_optionComponentName.reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (487)) COMMA_SOURCE_FILE_AT_LINE (487)))._operator_not ()).isBuiltAndTrue ()) {
              var_cas_ioOptionsComponentsMap.modifier_insertKey (_inLexique, var_cas_optionComponentName, var_cas_boolOptionsMap, var_cas_uintOptionsMap, var_cas_stringOptionsMap COMMA_SOURCE_FILE_AT_LINE (488)) ;
            }
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  GGS_lstring  var_cas_altName ;
  var_cas_altName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        GGS_L_signature  var_cas_signature ;
        nt_formal_arguments_list_importGrammarForSemantics (_inLexique, var_cas_signature) ;
        GGS_lstring  var_cas_returnedEntityName ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            var_cas_returnedEntityName = GGS_lstring::constructor_new (_inLexique, GGS_string (true, ""), GGS_location (_inLexique) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            GGS_lstring  var_cas_returnedMetamodelName ;
            _inLexique._assignFromAttribute_tokenString (var_cas_returnedMetamodelName) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            GGS_entityToImplementMap  automatic_var_6 ;
            GGS_stringset  automatic_var_7 ;
            const GGS_M_metamodelsComponents  _temp_16839 = var_cas_ioMetamodelComponentMap ;
            if (_temp_16839._isBuilt ()) {
              _temp_16839 (HERE)->method_searchKey (_inLexique, var_cas_returnedMetamodelName, var_cas_returnedEntityName, automatic_var_6, automatic_var_7 COMMA_SOURCE_FILE_AT_LINE (516)) ;
            }
            } break ;
          default :
            break ;
        }
        var_cas_grammarAltMap.modifier_insertKey (_inLexique, var_cas_altName, var_cas_signature, var_cas_returnedEntityName COMMA_SOURCE_FILE_AT_LINE (518)) ;
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique._assignFromAttribute_tokenString (var_cas_altName) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  var_cas_ioGrammarComponentsMap.modifier_insertKey (_inLexique, var_cas_grammarName, var_cas_grammarAltMap, var_cas_lexiqueName, var_cas_ioOptionsComponentsMap COMMA_SOURCE_FILE_AT_LINE (527)) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

void grammar_parser::
grammar_parser::
pr_galgas_component_grammar_parser_109_4_importOptions (galgas_scanner & _inLexique,
                                GGS_M_optionComponents  &/* var_cas_ioOptionsComponentsMap */) {
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3A) COMMA_HERE) ;
  nt_get_lexique_infos_parse (_inLexique) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
        _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_import) COMMA_HERE) ;
        switch (select_grammar_parser_1 (_inLexique)) {
          case 1 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_option) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_2 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_option_component_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_syntax) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            switch (select_grammar_parser_3 (_inLexique)) {
              case 1 : {
                } break ;
              case 2 : {
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_in) COMMA_HERE) ;
                _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_literal_5Fstring) COMMA_HERE) ;
                nt_parse_syntax_for_importing_parse (_inLexique) ;
                } break ;
              default :
                break ;
            }
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_0 (_inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_root) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_non_5Fterminal_5Fsymbol) COMMA_HERE) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
        nt_formal_arguments_list_parse (_inLexique) ;
        switch (select_grammar_parser_5 (_inLexique)) {
          case 1 : {
            } break ;
          case 2 : {
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__2D_3E) COMMA_HERE) ;
            _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
            } break ;
          default :
            break ;
        }
      switch (select_repeat_grammar_parser_4 (_inLexique)) {
        case 2 : {
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_label) COMMA_HERE) ;
          _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_identifier) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_end) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1_grammar) COMMA_HERE) ;
  _inLexique.acceptTerminal (ACCEPT_TERMINAL (galgas_scanner::galgas_scanner_1__3B) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*

