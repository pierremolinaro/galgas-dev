//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'templateSyntax.cpp'                          *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 26th, 2010, at 21h24'58"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "templateSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "templateSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//              Implementation of production rule 'expression'               *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_expression_i0_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  nt_concatenation_5F_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_templateSyntax_0 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_rightOperand ;
          nt_concatenation_5F_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_templateConcatOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_outExpression, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (83)) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'concatenation_term'           *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_concatenation_5F_term_i1_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  nt_relation_5F_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_1 = true ;
    while (syntaxRepeat_1) {
      switch (select_templateSyntax_1 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__7C_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightOperand ;
          nt_relation_5F_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_templateOrOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (104)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5E_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightOperand ;
          nt_relation_5F_term_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_templateXorOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (111)) ;
          } break ;
        default :
          syntaxRepeat_1 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Implementation of production rule 'relation_term'              *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_relation_5F_term_i2_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  nt_relation_5F_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_2 = true ;
    while (syntaxRepeat_2) {
      switch (select_templateSyntax_2 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__26_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftOperand = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightOperand ;
          nt_relation_5F_factor_ (inLexique, var_cas_rightOperand) ;
          var_cas_outExpression = GGS_templateAndOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftOperand, var_cas_rightOperand COMMA_SOURCE_FILE_AT_LINE (132)) ;
          } break ;
        default :
          syntaxRepeat_2 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//           Implementation of production rule 'relation_factor'             *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_relation_5F_factor_i3_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  nt_simple_5F_expression_ (inLexique, var_cas_outExpression) ;
  switch (select_templateSyntax_3 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3D__3D_) COMMA_HERE) ;
      GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
      GGS_templateExpressionAST  var_cas_rightExpression ;
      nt_simple_5F_expression_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_templateEqualTestAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (153)) ;
      } break ;
    case 3 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__21__3D_) COMMA_HERE) ;
      GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
      GGS_templateExpressionAST  var_cas_rightExpression ;
      nt_simple_5F_expression_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_templateNonEqualTestAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (160)) ;
      } break ;
    case 4 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3C__3D_) COMMA_HERE) ;
      GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
      GGS_templateExpressionAST  var_cas_rightExpression ;
      nt_simple_5F_expression_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_templateInfOrEqualTestAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (167)) ;
      } break ;
    case 5 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3E__3D_) COMMA_HERE) ;
      GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
      GGS_templateExpressionAST  var_cas_rightExpression ;
      nt_simple_5F_expression_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_templateSupOrEqualTestAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (174)) ;
      } break ;
    case 6 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3E_) COMMA_HERE) ;
      GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
      GGS_templateExpressionAST  var_cas_rightExpression ;
      nt_simple_5F_expression_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_templateStrictSupTestAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (181)) ;
      } break ;
    case 7 : {
      GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3C_) COMMA_HERE) ;
      GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
      GGS_templateExpressionAST  var_cas_rightExpression ;
      nt_simple_5F_expression_ (inLexique, var_cas_rightExpression) ;
      var_cas_outExpression = GGS_templateStrictInfTestAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (188)) ;
      } break ;
    default :
      break ;
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//          Implementation of production rule 'simple_expression'            *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_simple_5F_expression_i4_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  nt_term_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_4 = true ;
    while (syntaxRepeat_4) {
      switch (select_templateSyntax_4 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3C__3C_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightExpression ;
          nt_term_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_templateLeftShiftOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (209)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3E__3E_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightExpression ;
          nt_term_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_templateRightShiftOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (216)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2B_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightExpression ;
          nt_term_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_templateAddOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (223)) ;
          } break ;
        case 5 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2D_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightExpression ;
          nt_term_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_templateSubOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (230)) ;
          } break ;
        default :
          syntaxRepeat_4 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 Implementation of production rule 'term'                  *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_term_i5_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  nt_factor_ (inLexique, var_cas_outExpression) ;
  { bool syntaxRepeat_5 = true ;
    while (syntaxRepeat_5) {
      switch (select_templateSyntax_5 (inLexique)) {
        case 2 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2A_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightExpression ;
          nt_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_templateMultiplyOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (251)) ;
          } break ;
        case 3 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2F_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightExpression ;
          nt_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_templateDivideOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (258)) ;
          } break ;
        case 4 : {
          GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_mod) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_leftExpression = var_cas_outExpression ;
          GGS_templateExpressionAST  var_cas_rightExpression ;
          nt_factor_ (inLexique, var_cas_rightExpression) ;
          var_cas_outExpression = GGS_templateModuloOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_leftExpression, var_cas_rightExpression COMMA_SOURCE_FILE_AT_LINE (265)) ;
          } break ;
        default :
          syntaxRepeat_5 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i6_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2D_) COMMA_HERE) ;
  GGS_templateExpressionAST  var_cas_expression ;
  nt_factor_ (inLexique, var_cas_expression) ;
  var_cas_outExpression = GGS_templateUnaryMinusOperationAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_expression COMMA_SOURCE_FILE_AT_LINE (282)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i7_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_lstring  var_cas_identifier ;
  inLexique.assignFromAttribute_tokenString (var_cas_identifier) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateVarInExpressionAST ::constructor_new (inLexique, var_cas_identifier, GGS_lstringlist ::constructor_emptyList () COMMA_SOURCE_FILE_AT_LINE (295)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i8_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__28_) COMMA_HERE) ;
  nt_expression_ (inLexique, var_cas_outExpression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__29_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i9_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_not) COMMA_HERE) ;
  GGS_templateExpressionAST  var_cas_ifCondition ;
  nt_factor_ (inLexique, var_cas_ifCondition) ;
  var_cas_outExpression = GGS_templateNotOperatorAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_SOURCE_FILE_AT_LINE (325)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i10_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_location  var_cas_operatorLocation = GGS_location (inLexique) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__7E_) COMMA_HERE) ;
  GGS_templateExpressionAST  var_cas_ifCondition ;
  nt_factor_ (inLexique, var_cas_ifCondition) ;
  var_cas_outExpression = GGS_templateLogicalNegateAST ::constructor_new (inLexique, var_cas_operatorLocation, var_cas_ifCondition COMMA_SOURCE_FILE_AT_LINE (341)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i11_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_true) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateTrueBoolAST ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (354)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i12_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_false) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateFalseBoolAST ::constructor_new (inLexique, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (367)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i13_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_luint  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateLiteralUIntExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (381)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i14_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_lsint  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_33__32_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_signed_5F_literal_5F_integer) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateLiteralSIntExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (395)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i15_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_luint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_uint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_unsigned_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateLiteralUInt64ExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (409)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i16_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_lsint64  var_cas_literalInt ;
  inLexique.assignFromAttribute_sint_36__34_value (var_cas_literalInt) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_signed_5F_literal_5F_integer_36__34_) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateLiteralSInt64ExpressionAST ::constructor_new (inLexique, var_cas_literalInt COMMA_SOURCE_FILE_AT_LINE (423)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i17_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_ldouble  var_cas_literalDouble ;
  inLexique.assignFromAttribute_floatValue (var_cas_literalDouble) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_literal_5F_double) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateLiteralDoubleExpressionAST ::constructor_new (inLexique, var_cas_literalDouble COMMA_SOURCE_FILE_AT_LINE (437)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i18_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_lchar  var_cas_literalChar ;
  inLexique.assignFromAttribute_charValue (var_cas_literalChar) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_literal_5F_char) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateLiteralCharExpressionAST ::constructor_new (inLexique, var_cas_literalChar COMMA_SOURCE_FILE_AT_LINE (450)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i19_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_stringlist  var_cas_literalStringList = GGS_stringlist ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
        GGS_lstring  var_cas_literalString ;
        inLexique.assignFromAttribute_tokenString (var_cas_literalString) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_literal_5F_string) COMMA_HERE) ;
        var_cas_literalStringList.addAssign_operation (var_cas_literalString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (466))) ;
      switch (select_templateSyntax_6 (inLexique)) {
        case 2 : {
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
  var_cas_outExpression = GGS_templateLiteralStringExpressionAST ::constructor_new (inLexique, var_cas_literalStringList, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (469)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i20_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5B_) COMMA_HERE) ;
  switch (select_templateSyntax_7 (inLexique)) {
    case 1 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_template) COMMA_HERE) ;
      GGS_templateExpressionAST  var_cas_receiverExpression ;
      nt_expression_ (inLexique, var_cas_receiverExpression) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_templateExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_templateCategoryTemplateCallAST ::constructor_new (inLexique, var_cas_receiverExpression, var_cas_templateName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (496)) ;
      } break ;
    case 2 : {
      GGS_lstring  var_cas_typeName ;
      inLexique.assignFromAttribute_tokenString (var_cas_typeName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_type_5F_name) COMMA_HERE) ;
      GGS_lstring  var_cas_constructorName ;
      inLexique.assignFromAttribute_tokenString (var_cas_constructorName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_templateExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_templateConstructorAST ::constructor_new (inLexique, var_cas_typeName, var_cas_constructorName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (506)) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_filewrapper) COMMA_HERE) ;
      GGS_lstring  var_cas_filewrapperName ;
      inLexique.assignFromAttribute_tokenString (var_cas_filewrapperName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
      GGS_lstring  var_cas_templateName ;
      inLexique.assignFromAttribute_tokenString (var_cas_templateName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_templateExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_templateFileWrapperTemplateCallAST ::constructor_new (inLexique, var_cas_filewrapperName, var_cas_templateName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (518)) ;
      } break ;
    case 4 : {
      GGS_templateExpressionAST  var_cas_receiverExpression ;
      nt_expression_ (inLexique, var_cas_receiverExpression) ;
      GGS_lstring  var_cas_readerName ;
      inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      GGS_templateExpressionListAST  var_cas_expressionList ;
      nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
      var_cas_outExpression = GGS_templateReaderCallInExpressionAST ::constructor_new (inLexique, var_cas_receiverExpression, var_cas_readerName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (525)) ;
      } break ;
    case 5 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_option) COMMA_HERE) ;
      switch (select_templateSyntax_8 (inLexique)) {
        case 1 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          var_cas_outExpression = GGS_templateOptionAccessAST ::constructor_new (inLexique, GGS_lstring ::constructor_new (inLexique, GGS_string ("galgas_cli_options"), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (536)), var_cas_optionName, var_cas_readerName COMMA_SOURCE_FILE_AT_LINE (536)) ;
          } break ;
        case 2 : {
          GGS_lstring  var_cas_optionComponentName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionComponentName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2E_) COMMA_HERE) ;
          GGS_lstring  var_cas_optionName ;
          inLexique.assignFromAttribute_tokenString (var_cas_optionName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstring  var_cas_readerName ;
          inLexique.assignFromAttribute_tokenString (var_cas_readerName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
          var_cas_outExpression = GGS_templateOptionAccessAST ::constructor_new (inLexique, var_cas_optionComponentName, var_cas_optionName, var_cas_readerName COMMA_SOURCE_FILE_AT_LINE (542)) ;
          } break ;
        default :
          break ;
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5D_) COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                Implementation of production rule 'factor'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_factor_i21_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionAST  &var_cas_outExpression) {
  GGS_lstring  var_cas_functionName ;
  inLexique.assignFromAttribute_tokenString (var_cas_functionName) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
  GGS_templateExpressionListAST  var_cas_expressionList ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5B_) COMMA_HERE) ;
  nt_output_5F_expression_5F_list_ (inLexique, var_cas_expressionList) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__5D_) COMMA_HERE) ;
  var_cas_outExpression = GGS_templateFunctionCallAST ::constructor_new (inLexique, var_cas_functionName, var_cas_expressionList COMMA_SOURCE_FILE_AT_LINE (563)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'output_expression_list'         *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_output_5F_expression_5F_list_i22_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateExpressionListAST  &var_cas_outExpressionList) {
  var_cas_outExpressionList = GGS_templateExpressionListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_templateSyntax_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__21_) COMMA_HERE) ;
          GGS_templateExpressionAST  var_cas_expression ;
          nt_expression_ (inLexique, var_cas_expression) ;
          var_cas_outExpressionList.addAssign_operation (var_cas_expression, GGS_location (inLexique)) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//             Implementation of routine "enterTemplateString"               *
//                                                                           *
//---------------------------------------------------------------------------*

void routine_enterTemplateString (C_CompilerEx & inLexique,
                                GGS_templateInstructionListAST  & var_cas_outResultingInstructionList
                        COMMA_UNUSED_LOCATION_ARGS) {
  #ifdef DEBUG_TRACE_ENABLED
    printf ("ENTER routine_enterTemplateString at %s:%d\n", __FILE__, __LINE__) ;
  #endif
  const GGS_string var_cas_s = GGS_string::constructor_retrieveAndResetTemplateString (inLexique COMMA_SOURCE_FILE_AT_LINE (594)) ;
  const GGS_bool cond_24677 = (var_cas_s.reader_length ()).operator_strictSup (GGS_uint (0U)) ;
  if (cond_24677.isBuiltAndTrue ()) {
    var_cas_outResultingInstructionList.addAssign_operation (GGS_templateInstructionStringAST ::constructor_new (inLexique, var_cas_s COMMA_SOURCE_FILE_AT_LINE (596))) ;
  }
  #ifdef DEBUG_TRACE_ENABLED
    printf ("LEAVE routine_enterTemplateString\n") ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_instruction_i23_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_ioResultingInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__21_) COMMA_HERE) ;
  GGS_templateExpressionAST  var_cas_expression ;
  nt_expression_ (inLexique, var_cas_expression) ;
  var_cas_ioResultingInstructionList.addAssign_operation (GGS_templateInstructionExpressionAST ::constructor_new (inLexique, var_cas_expression, GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (608))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_instruction_i24_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_ioResultingInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3F__5E_) COMMA_HERE) ;
  var_cas_ioResultingInstructionList.addAssign_operation (GGS_templateInstructionGetColumnLocationAST ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (617))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_instruction_i25_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_ioResultingInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__21__5E_) COMMA_HERE) ;
  var_cas_ioResultingInstructionList.addAssign_operation (GGS_templateInstructionGotoColumnLocationAST ::constructor_new (inLexique COMMA_SOURCE_FILE_AT_LINE (626))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_instruction_i26_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_ioResultingInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_block) COMMA_HERE) ;
  GGS_templateExpressionAST  var_cas_expression ;
  nt_expression_ (inLexique, var_cas_expression) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3A_) COMMA_HERE) ;
  GGS_templateInstructionListAST  var_cas_blockInstructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
  ::routine_enterTemplateString (inLexique,  var_cas_blockInstructionList COMMA_SOURCE_FILE_AT_LINE (640)) ;
  { bool syntaxRepeat_10 = true ;
    while (syntaxRepeat_10) {
      switch (select_templateSyntax_10 (inLexique)) {
        case 2 : {
          nt_template_5F_instruction_ (inLexique, var_cas_blockInstructionList) ;
          ::routine_enterTemplateString (inLexique,  var_cas_blockInstructionList COMMA_SOURCE_FILE_AT_LINE (644)) ;
          } break ;
        default :
          syntaxRepeat_10 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_block) COMMA_HERE) ;
  var_cas_ioResultingInstructionList.addAssign_operation (GGS_templateBlockInstructionAST ::constructor_new (inLexique, var_cas_expression, GGS_location (inLexique), var_cas_blockInstructionList COMMA_SOURCE_FILE_AT_LINE (649))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_instruction_i27_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_ioResultingInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_foreach) COMMA_HERE) ;
  GGS_bool var_cas_ascending ;
  switch (select_templateSyntax_11 (inLexique)) {
    case 1 : {
      var_cas_ascending = GGS_bool (true) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3C_) COMMA_HERE) ;
      var_cas_ascending = GGS_bool (true) ;
      } break ;
    case 3 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3E_) COMMA_HERE) ;
      var_cas_ascending = GGS_bool (false) ;
      } break ;
    default :
      break ;
  }
  GGS_templateExpressionAST  var_cas_expression ;
  nt_expression_ (inLexique, var_cas_expression) ;
  GGS_string var_cas_foreachPrefix ;
  switch (select_templateSyntax_12 (inLexique)) {
    case 1 : {
      var_cas_foreachPrefix = GGS_string ("") ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_prefixedby) COMMA_HERE) ;
      GGS_lstring  var_cas_prefixString ;
      inLexique.assignFromAttribute_tokenString (var_cas_prefixString) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      var_cas_foreachPrefix = var_cas_prefixString.reader_string (inLexique COMMA_SOURCE_FILE_AT_LINE (680)) ;
      } break ;
    default :
      break ;
  }
  GGS_templateInstructionListAST  var_cas_beforeInstructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
  switch (select_templateSyntax_13 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_before) COMMA_HERE) ;
      ::routine_enterTemplateString (inLexique,  var_cas_beforeInstructionList COMMA_SOURCE_FILE_AT_LINE (687)) ;
      { bool syntaxRepeat_14 = true ;
        while (syntaxRepeat_14) {
          switch (select_templateSyntax_14 (inLexique)) {
            case 2 : {
              nt_template_5F_instruction_ (inLexique, var_cas_beforeInstructionList) ;
              ::routine_enterTemplateString (inLexique,  var_cas_beforeInstructionList COMMA_SOURCE_FILE_AT_LINE (691)) ;
              } break ;
            default :
              syntaxRepeat_14 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_do) COMMA_HERE) ;
  GGS_lstring  var_cas_indexIdentifier ;
  switch (select_templateSyntax_15 (inLexique)) {
    case 1 : {
      var_cas_indexIdentifier = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (698)) ;
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_index) COMMA_HERE) ;
      inLexique.assignFromAttribute_tokenString (var_cas_indexIdentifier) ;
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
      } break ;
    default :
      break ;
  }
  GGS_templateInstructionListAST  var_cas_doInstructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
  ::routine_enterTemplateString (inLexique,  var_cas_doInstructionList COMMA_SOURCE_FILE_AT_LINE (704)) ;
  { bool syntaxRepeat_16 = true ;
    while (syntaxRepeat_16) {
      switch (select_templateSyntax_16 (inLexique)) {
        case 2 : {
          nt_template_5F_instruction_ (inLexique, var_cas_doInstructionList) ;
          ::routine_enterTemplateString (inLexique,  var_cas_doInstructionList COMMA_SOURCE_FILE_AT_LINE (708)) ;
          } break ;
        default :
          syntaxRepeat_16 = false ;
          break ;
      }
    }
  }
  GGS_templateInstructionListAST  var_cas_betweenInstructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
  switch (select_templateSyntax_17 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_between) COMMA_HERE) ;
      ::routine_enterTemplateString (inLexique,  var_cas_betweenInstructionList COMMA_SOURCE_FILE_AT_LINE (715)) ;
      { bool syntaxRepeat_18 = true ;
        while (syntaxRepeat_18) {
          switch (select_templateSyntax_18 (inLexique)) {
            case 2 : {
              nt_template_5F_instruction_ (inLexique, var_cas_betweenInstructionList) ;
              ::routine_enterTemplateString (inLexique,  var_cas_betweenInstructionList COMMA_SOURCE_FILE_AT_LINE (719)) ;
              } break ;
            default :
              syntaxRepeat_18 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  GGS_templateInstructionListAST  var_cas_afterInstructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
  switch (select_templateSyntax_19 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_after) COMMA_HERE) ;
      ::routine_enterTemplateString (inLexique,  var_cas_afterInstructionList COMMA_SOURCE_FILE_AT_LINE (727)) ;
      { bool syntaxRepeat_20 = true ;
        while (syntaxRepeat_20) {
          switch (select_templateSyntax_20 (inLexique)) {
            case 2 : {
              nt_template_5F_instruction_ (inLexique, var_cas_beforeInstructionList) ;
              ::routine_enterTemplateString (inLexique,  var_cas_afterInstructionList COMMA_SOURCE_FILE_AT_LINE (731)) ;
              } break ;
            default :
              syntaxRepeat_20 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_foreach) COMMA_HERE) ;
  var_cas_ioResultingInstructionList.addAssign_operation (GGS_templateInstructionForeachAST ::constructor_new (inLexique, var_cas_ascending, var_cas_expression, var_cas_foreachPrefix, var_cas_beforeInstructionList, var_cas_doInstructionList, var_cas_indexIdentifier, var_cas_betweenInstructionList, var_cas_afterInstructionList COMMA_SOURCE_FILE_AT_LINE (737))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_instruction_i28_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_ioResultingInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_if) COMMA_HERE) ;
  GGS_templateInstructionIfBranchListAST  var_cas_templateInstructionIfBranchList = GGS_templateInstructionIfBranchListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_21 = true ;
    while (syntaxRepeat_21) {
        GGS_templateExpressionAST  var_cas_expression ;
        nt_expression_ (inLexique, var_cas_expression) ;
        inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_then) COMMA_HERE) ;
        GGS_templateInstructionListAST  var_cas_instructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
        ::routine_enterTemplateString (inLexique,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (761)) ;
        { bool syntaxRepeat_22 = true ;
          while (syntaxRepeat_22) {
            switch (select_templateSyntax_22 (inLexique)) {
              case 2 : {
                nt_template_5F_instruction_ (inLexique, var_cas_instructionList) ;
                ::routine_enterTemplateString (inLexique,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (765)) ;
                } break ;
              default :
                syntaxRepeat_22 = false ;
                break ;
            }
          }
        }
        var_cas_templateInstructionIfBranchList.addAssign_operation (var_cas_expression, var_cas_instructionList) ;
      switch (select_templateSyntax_21 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_elsif) COMMA_HERE) ;
          } break ;
        default :
          syntaxRepeat_21 = false ;
          break ;
      }
    }
  }
  GGS_templateInstructionListAST  var_cas_elseInstructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
  switch (select_templateSyntax_23 (inLexique)) {
    case 1 : {
      } break ;
    case 2 : {
      inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_else) COMMA_HERE) ;
      ::routine_enterTemplateString (inLexique,  var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (776)) ;
      { bool syntaxRepeat_24 = true ;
        while (syntaxRepeat_24) {
          switch (select_templateSyntax_24 (inLexique)) {
            case 2 : {
              nt_template_5F_instruction_ (inLexique, var_cas_elseInstructionList) ;
              ::routine_enterTemplateString (inLexique,  var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (780)) ;
              } break ;
            default :
              syntaxRepeat_24 = false ;
              break ;
          }
        }
      }
      } break ;
    default :
      break ;
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_if) COMMA_HERE) ;
  var_cas_ioResultingInstructionList.addAssign_operation (GGS_templateInstructionIfAST ::constructor_new (inLexique, var_cas_templateInstructionIfBranchList, var_cas_elseInstructionList COMMA_SOURCE_FILE_AT_LINE (786))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//         Implementation of production rule 'template_instruction'          *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_instruction_i29_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_ioResultingInstructionList) {
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_switch) COMMA_HERE) ;
  GGS_templateExpressionAST  var_cas_switchExpression ;
  nt_expression_ (inLexique, var_cas_switchExpression) ;
  GGS_templateInstructionSwitchBranchListAST  var_cas_templateInstructionSwitchBranchList = GGS_templateInstructionSwitchBranchListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_25 = true ;
    while (syntaxRepeat_25) {
      switch (select_templateSyntax_25 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_when) COMMA_HERE) ;
          GGS_lstringlist  var_cas_constantList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_26 = true ;
            while (syntaxRepeat_26) {
                GGS_lstring  var_cas_constantName ;
                inLexique.assignFromAttribute_tokenString (var_cas_constantName) ;
                inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_identifier) COMMA_HERE) ;
                var_cas_constantList.addAssign_operation (var_cas_constantName) ;
              switch (select_templateSyntax_26 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__2C_) COMMA_HERE) ;
                  } break ;
                default :
                  syntaxRepeat_26 = false ;
                  break ;
              }
            }
          }
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken__3A_) COMMA_HERE) ;
          GGS_templateInstructionListAST  var_cas_instructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
          ::routine_enterTemplateString (inLexique,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (815)) ;
          { bool syntaxRepeat_27 = true ;
            while (syntaxRepeat_27) {
              switch (select_templateSyntax_27 (inLexique)) {
                case 2 : {
                  nt_template_5F_instruction_ (inLexique, var_cas_instructionList) ;
                  ::routine_enterTemplateString (inLexique,  var_cas_instructionList COMMA_SOURCE_FILE_AT_LINE (819)) ;
                  } break ;
                default :
                  syntaxRepeat_27 = false ;
                  break ;
              }
            }
          }
          var_cas_templateInstructionSwitchBranchList.addAssign_operation (var_cas_constantList, var_cas_instructionList) ;
          } break ;
        default :
          syntaxRepeat_25 = false ;
          break ;
      }
    }
  }
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_end) COMMA_HERE) ;
  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgasTemplateScanner::kToken_switch) COMMA_HERE) ;
  var_cas_ioResultingInstructionList.addAssign_operation (GGS_templateInstructionSwitchAST ::constructor_new (inLexique, var_cas_switchExpression, var_cas_templateInstructionSwitchBranchList COMMA_SOURCE_FILE_AT_LINE (826))) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'template_parser_start_symbol'      *
//                                                                           *
//---------------------------------------------------------------------------*

void templateSyntax::rule_templateSyntax_template_5F_parser_5F_start_5F_symbol_i30_ (C_Lexique_galgasTemplateScanner & inLexique,
                                GGS_templateInstructionListAST  &var_cas_outResultingInstructionList) {
  var_cas_outResultingInstructionList = GGS_templateInstructionListAST ::constructor_emptyList () ;
  ::routine_enterTemplateString (inLexique,  var_cas_outResultingInstructionList COMMA_SOURCE_FILE_AT_LINE (838)) ;
  { bool syntaxRepeat_28 = true ;
    while (syntaxRepeat_28) {
      switch (select_templateSyntax_28 (inLexique)) {
        case 2 : {
          nt_template_5F_instruction_ (inLexique, var_cas_outResultingInstructionList) ;
          ::routine_enterTemplateString (inLexique,  var_cas_outResultingInstructionList COMMA_SOURCE_FILE_AT_LINE (844)) ;
          } break ;
        default :
          syntaxRepeat_28 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

