//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'grammarMetamodel.cpp'                         *
//             Generated by version version GALGAS_BETA_VERSION              *
//                    november 14th, 2010, at 20h20'28"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include "grammarMetamodel.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_CLI_Options.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*

enumComparisonResult GALGAS_grammarComponentAST::objectCompare (const GALGAS_grammarComponentAST & inOperand) const {
  enumComparisonResult result = kOperandEqual ;
  const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
  macroNullOrValidSharedObject (p, const cPtr_grammarComponentAST) ;
  const cPtr_grammarComponentAST * q = (const cPtr_grammarComponentAST *) inOperand.mObjectPtr ;
  macroNullOrValidSharedObject (q, const cPtr_grammarComponentAST) ;
  if (kOperandEqual == result) {
    result = p->mAttribute_mGrammarName.objectCompare (q->mAttribute_mGrammarName) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mGrammarClass.objectCompare (q->mAttribute_mGrammarClass) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mSyntaxComponents.objectCompare (q->mAttribute_mSyntaxComponents) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mStartSymbolName.objectCompare (q->mAttribute_mStartSymbolName) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mStartSymbolLabelList.objectCompare (q->mAttribute_mStartSymbolLabelList) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mStartSymbolHasParseLabel.objectCompare (q->mAttribute_mStartSymbolHasParseLabel) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mUnusedNonterminalList.objectCompare (q->mAttribute_mUnusedNonterminalList) ;
  }
  if (kOperandEqual == result) {
    result = p->mAttribute_mEndOfSourceText.objectCompare (q->mAttribute_mEndOfSourceText) ;
  }
  return result ;
}


//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST::GALGAS_grammarComponentAST (void) :
AC_GALGAS_class () {
}

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST::GALGAS_grammarComponentAST (const cPtr_grammarComponentAST * inSourcePtr) :
AC_GALGAS_class (inSourcePtr) {
  macroNullOrValidSharedObject (inSourcePtr, const cPtr_grammarComponentAST) ;
}

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST GALGAS_grammarComponentAST::constructor_new (const GALGAS_lstring & inAttribute_mGrammarName,
                                                                        const GALGAS_lstring & inAttribute_mGrammarClass,
                                                                        const GALGAS_lstringlist & inAttribute_mSyntaxComponents,
                                                                        const GALGAS_lstring & inAttribute_mStartSymbolName,
                                                                        const GALGAS_nonTerminalLabelListAST & inAttribute_mStartSymbolLabelList,
                                                                        const GALGAS_bool & inAttribute_mStartSymbolHasParseLabel,
                                                                        const GALGAS_lstringlist & inAttribute_mUnusedNonterminalList,
                                                                        const GALGAS_location & inAttribute_mEndOfSourceText
                                                                        COMMA_LOCATION_ARGS) {
  GALGAS_grammarComponentAST result ;
  if (inAttribute_mGrammarName.isValid () && inAttribute_mGrammarClass.isValid () && inAttribute_mSyntaxComponents.isValid () && inAttribute_mStartSymbolName.isValid () && inAttribute_mStartSymbolLabelList.isValid () && inAttribute_mStartSymbolHasParseLabel.isValid () && inAttribute_mUnusedNonterminalList.isValid () && inAttribute_mEndOfSourceText.isValid ()) {
    macroMyNew (result.mObjectPtr, cPtr_grammarComponentAST (inAttribute_mGrammarName, inAttribute_mGrammarClass, inAttribute_mSyntaxComponents, inAttribute_mStartSymbolName, inAttribute_mStartSymbolLabelList, inAttribute_mStartSymbolHasParseLabel, inAttribute_mUnusedNonterminalList, inAttribute_mEndOfSourceText COMMA_THERE)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GALGAS_grammarComponentAST::insulate (LOCATION_ARGS) {
  if (isValid () && (mObjectPtr->retainCount () > 1)) {
    cPtr_grammarComponentAST * p = (cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, cPtr_grammarComponentAST) ;
    cPtr_grammarComponentAST * r = NULL ;
    macroMyNew (r, cPtr_grammarComponentAST (p->mAttribute_mGrammarName, p->mAttribute_mGrammarClass, p->mAttribute_mSyntaxComponents, p->mAttribute_mStartSymbolName, p->mAttribute_mStartSymbolLabelList, p->mAttribute_mStartSymbolHasParseLabel, p->mAttribute_mUnusedNonterminalList, p->mAttribute_mEndOfSourceText COMMA_THERE)) ;
    macroAssignSharedObject (mObjectPtr, r) ;
    macroDetachSharedObject (r) ;
  }
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_grammarComponentAST::reader_mGrammarName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mGrammarName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_grammarComponentAST::reader_mGrammarClass (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mGrammarClass ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_grammarComponentAST::reader_mSyntaxComponents (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mSyntaxComponents ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_grammarComponentAST::reader_mStartSymbolName (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstring result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mStartSymbolName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalLabelListAST GALGAS_grammarComponentAST::reader_mStartSymbolLabelList (UNUSED_LOCATION_ARGS) const {
  GALGAS_nonTerminalLabelListAST result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mStartSymbolLabelList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_bool GALGAS_grammarComponentAST::reader_mStartSymbolHasParseLabel (UNUSED_LOCATION_ARGS) const {
  GALGAS_bool result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mStartSymbolHasParseLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_grammarComponentAST::reader_mUnusedNonterminalList (UNUSED_LOCATION_ARGS) const {
  GALGAS_lstringlist result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mUnusedNonterminalList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_grammarComponentAST::reader_mEndOfSourceText (UNUSED_LOCATION_ARGS) const {
  GALGAS_location result ;
  if (NULL != mObjectPtr) {
    const cPtr_grammarComponentAST * p = (const cPtr_grammarComponentAST *) mObjectPtr ;
    macroValidSharedObject (p, const cPtr_grammarComponentAST) ;
    result = p->mAttribute_mEndOfSourceText ;
  }
  return result ;
}

//---------------------------------------------------------------------------*
//               Pointer class for @grammarComponentAST class                *
//---------------------------------------------------------------------------*

cPtr_grammarComponentAST::cPtr_grammarComponentAST (const GALGAS_lstring & in_mGrammarName,
                                                    const GALGAS_lstring & in_mGrammarClass,
                                                    const GALGAS_lstringlist & in_mSyntaxComponents,
                                                    const GALGAS_lstring & in_mStartSymbolName,
                                                    const GALGAS_nonTerminalLabelListAST & in_mStartSymbolLabelList,
                                                    const GALGAS_bool & in_mStartSymbolHasParseLabel,
                                                    const GALGAS_lstringlist & in_mUnusedNonterminalList,
                                                    const GALGAS_location & in_mEndOfSourceText
                                                    COMMA_LOCATION_ARGS) :
acPtr_class (THERE),
mAttribute_mGrammarName (in_mGrammarName),
mAttribute_mGrammarClass (in_mGrammarClass),
mAttribute_mSyntaxComponents (in_mSyntaxComponents),
mAttribute_mStartSymbolName (in_mStartSymbolName),
mAttribute_mStartSymbolLabelList (in_mStartSymbolLabelList),
mAttribute_mStartSymbolHasParseLabel (in_mStartSymbolHasParseLabel),
mAttribute_mUnusedNonterminalList (in_mUnusedNonterminalList),
mAttribute_mEndOfSourceText (in_mEndOfSourceText) {
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * cPtr_grammarComponentAST::classDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_grammarComponentAST ;
}

void cPtr_grammarComponentAST::description (C_String & ioString,
                                            const PMSInt32 inIndentation) const {
  ioString << "[@grammarComponentAST:" ;
  mAttribute_mGrammarName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mGrammarClass.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mSyntaxComponents.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mStartSymbolName.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mStartSymbolLabelList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mStartSymbolHasParseLabel.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mUnusedNonterminalList.description (ioString, inIndentation+1) ;
  ioString << ", " ;
  mAttribute_mEndOfSourceText.description (ioString, inIndentation+1) ;
  ioString << "]" ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @grammarComponentAST type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_grammarComponentAST ("grammarComponentAST",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_grammarComponentAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_grammarComponentAST ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_grammarComponentAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_grammarComponentAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST GALGAS_grammarComponentAST::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_grammarComponentAST result ;
  const GALGAS_grammarComponentAST * p = (const GALGAS_grammarComponentAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_grammarComponentAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "grammarComponentAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


