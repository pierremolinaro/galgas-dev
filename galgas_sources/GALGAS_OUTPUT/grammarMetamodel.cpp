//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'grammarMetamodel.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                      june 28th, 2008, at 13h16'43"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "grammarMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Element of list '@startSymbolLabelFormalParameterList'           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_startSymbolLabelFormalParameterList::
elementOf_GGS_startSymbolLabelFormalParameterList (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mFormalAgumentPassingMode (argument_0),
mTypeName (argument_1),
mArgumentName (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_startSymbolLabelFormalParameterList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_startSymbolLabelFormalParameterList * _p = dynamic_cast <const elementOf_GGS_startSymbolLabelFormalParameterList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mFormalAgumentPassingMode._operator_isEqual (_p->mFormalAgumentPassingMode).boolValue ()
         && mTypeName._operator_isEqual (_p->mTypeName).boolValue ()
         && mArgumentName._operator_isEqual (_p->mArgumentName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_startSymbolLabelFormalParameterList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalAgumentPassingMode.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTypeName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mArgumentName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               List '@startSymbolLabelFormalParameterList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_internalAppendValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_internalPrependValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_addAssign_operation (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()&& argument_2._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList::cElement * GGS_startSymbolLabelFormalParameterList::
operator () (const sint32 inIndex COMMA_LOCATION_ARGS) const {
  MF_AssertThere (inIndex >= 0, "inIndex (%ld) < 0", inIndex, 0) ;
  MF_AssertThere (inIndex < count (), "inIndex (%ld) >= mCount (%ld)", inIndex, count ()) ;
  return (cElement *) objectAtIndexOrNULL (inIndex) ;
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList GGS_startSymbolLabelFormalParameterList::
_operator_concat (const GGS_startSymbolLabelFormalParameterList & inOperand) const {
  GGS_startSymbolLabelFormalParameterList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_dotAssign_operation (const GGS_startSymbolLabelFormalParameterList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_startSymbolLabelFormalParameterList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_formalArgumentPassingMode p_0 = p->mFormalAgumentPassingMode ;
          GGS_lstring  p_1 = p->mTypeName ;
          GGS_lstring  p_2 = p->mArgumentName ;
          _internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_formalArgumentPassingMode& argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lstring & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mFormalAgumentPassingMode,
                                _p->mTypeName,
                                _p->mArgumentName
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList  GGS_startSymbolLabelFormalParameterList::
constructor_emptyList (void) {
  GGS_startSymbolLabelFormalParameterList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList  GGS_startSymbolLabelFormalParameterList::
constructor_listWithValue (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) {
  GGS_startSymbolLabelFormalParameterList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
internalSubListWithRange (GGS_startSymbolLabelFormalParameterList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mFormalAgumentPassingMode, _p->mTypeName, _p->mArgumentName) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList GGS_startSymbolLabelFormalParameterList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_startSymbolLabelFormalParameterList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList GGS_startSymbolLabelFormalParameterList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_startSymbolLabelFormalParameterList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_startSymbolLabelFormalParameterList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@startSymbolLabelFormalParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
method_first (C_Compiler & _inLexique,
              GGS_formalArgumentPassingMode& _out_0,
              GGS_lstring & _out_1,
              GGS_lstring & _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mFormalAgumentPassingMode ;
    _out_1 = _p->mTypeName ;
    _out_2 = _p->mArgumentName ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
method_last (C_Compiler & _inLexique,
             GGS_formalArgumentPassingMode& _out_0,
             GGS_lstring & _out_1,
             GGS_lstring & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mFormalAgumentPassingMode ;
    _out_1 = _p->mTypeName ;
    _out_2 = _p->mArgumentName ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_formalArgumentPassingMode& _out_0,
                 GGS_lstring & _out_1,
                 GGS_lstring & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mFormalAgumentPassingMode ;
    _out_1 = _p->mTypeName ;
    _out_2 = _p->mArgumentName ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_formalArgumentPassingMode& _out_0,
                GGS_lstring & _out_1,
                GGS_lstring & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mFormalAgumentPassingMode ;
    _out_1 = _p->mTypeName ;
    _out_2 = _p->mArgumentName ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
    _out_2._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_formalArgumentPassingMode GGS_startSymbolLabelFormalParameterList::
reader_mFormalAgumentPassingModeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalArgumentPassingMode result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFormalAgumentPassingMode ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_startSymbolLabelFormalParameterList::
reader_mTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mTypeName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_startSymbolLabelFormalParameterList::
reader_mArgumentNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mArgumentName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_setMFormalAgumentPassingModeAtIndex (C_Compiler & inLexique,
                              const GGS_formalArgumentPassingMode & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFormalAgumentPassingMode = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_setMTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mTypeName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_setMArgumentNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mArgumentName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

const GGS_formalArgumentPassingMode * GGS_startSymbolLabelFormalParameterList::cEnumerator::_mFormalAgumentPassingMode (LOCATION_ARGS) const {
  macroValidPointerThere (mNextEnumeratedObject) ;
  return & (((cElement *) mNextEnumeratedObject)->mFormalAgumentPassingMode) ;
}

//---------------------------------------------------------------------------*

const GGS_lstring  * GGS_startSymbolLabelFormalParameterList::cEnumerator::_mTypeName (LOCATION_ARGS) const {
  macroValidPointerThere (mNextEnumeratedObject) ;
  return & (((cElement *) mNextEnumeratedObject)->mTypeName) ;
}

//---------------------------------------------------------------------------*

const GGS_lstring  * GGS_startSymbolLabelFormalParameterList::cEnumerator::_mArgumentName (LOCATION_ARGS) const {
  macroValidPointerThere (mNextEnumeratedObject) ;
  return & (((cElement *) mNextEnumeratedObject)->mArgumentName) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                   Element of list '@grammarLabelList'                     *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_grammarLabelList::
elementOf_GGS_grammarLabelList (const GGS_lstring & argument_0,
                                const GGS_startSymbolLabelFormalParameterList & argument_1
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mLabelName (argument_0),
mFormalParameterList (argument_1) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_grammarLabelList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_grammarLabelList * _p = dynamic_cast <const elementOf_GGS_grammarLabelList *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mLabelName._operator_isEqual (_p->mLabelName).boolValue ()
         && mFormalParameterList._operator_isEqual (_p->mFormalParameterList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_grammarLabelList::
appendForDescription (C_Compiler & _inLexique,
                          C_String & ioString,
                          const sint32 inIndentation
                          COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameterList.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                         List '@grammarLabelList'                          *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_startSymbolLabelFormalParameterList & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_startSymbolLabelFormalParameterList & argument_1
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
_addAssign_operation (const GGS_lstring & argument_0,
                                const GGS_startSymbolLabelFormalParameterList & argument_1) {
  if (_isBuilt ()&& argument_0._isBuilt ()&& argument_1._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_grammarLabelList::cElement * GGS_grammarLabelList::
operator () (const sint32 inIndex COMMA_LOCATION_ARGS) const {
  MF_AssertThere (inIndex >= 0, "inIndex (%ld) < 0", inIndex, 0) ;
  MF_AssertThere (inIndex < count (), "inIndex (%ld) >= mCount (%ld)", inIndex, count ()) ;
  return (cElement *) objectAtIndexOrNULL (inIndex) ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelList GGS_grammarLabelList::
_operator_concat (const GGS_grammarLabelList & inOperand) const {
  GGS_grammarLabelList result = * this ;
  result._dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
_dotAssign_operation (const GGS_grammarLabelList inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_grammarLabelList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mLabelName ;
          GGS_startSymbolLabelFormalParameterList  p_1 = p->mFormalParameterList ;
          _internalAppendValues (p_0, p_1 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_startSymbolLabelFormalParameterList & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
_insulateList (void) {
  if (_shared ()) {
    cElement * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mLabelName,
                                _p->mFormalParameterList
                                COMMA_HERE) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_grammarLabelList  GGS_grammarLabelList::
constructor_emptyList (void) {
  GGS_grammarLabelList result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelList  GGS_grammarLabelList::
constructor_listWithValue (const GGS_lstring & argument_0,
                                const GGS_startSymbolLabelFormalParameterList & argument_1) {
  GGS_grammarLabelList result ;
  result._alloc () ;
  result._addAssign_operation (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
internalSubListWithRange (GGS_grammarLabelList & ioList,
                          const sint32 inFirstIndex,
                          const sint32 inCount) const {
  ioList._alloc () ;
  if (inCount > 0) {
    cElement * _p = firstObject () ;
    for (sint32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (_p) ;
      _p = _p->nextObject () ;
    }
    for (sint32 i=0 ; i<inCount ; i++) {
      macroValidPointer (_p) ;
      ioList._addAssign_operation (_p->mLabelName, _p->mFormalParameterList) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_grammarLabelList GGS_grammarLabelList::
reader_subListWithRange (C_Compiler & _inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_grammarLabelList result ;
  if (_isBuilt () && inFirstIndex._isBuilt () && inCount._isBuilt ()) {
    const sint32 firstIndex = (sint32) inFirstIndex.uintValue () ;
    const sint32 rangeCount = (sint32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelList GGS_grammarLabelList::
reader_subListFromIndex (C_Compiler & _inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_grammarLabelList result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    const sint32 startIndex = (sint32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      _inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_grammarLabelList::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@grammarLabelList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
method_first (C_Compiler & _inLexique,
              GGS_lstring & _out_0,
              GGS_startSymbolLabelFormalParameterList & _out_1
              COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mLabelName ;
    _out_1 = _p->mFormalParameterList ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
method_last (C_Compiler & _inLexique,
             GGS_lstring & _out_0,
             GGS_startSymbolLabelFormalParameterList & _out_1
             COMMA_LOCATION_ARGS) const {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mLabelName ;
    _out_1 = _p->mFormalParameterList ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
modifier_popFirst (C_Compiler & _inLexique,
                 GGS_lstring & _out_0,
                 GGS_startSymbolLabelFormalParameterList & _out_1
                 COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mLabelName ;
    _out_1 = _p->mFormalParameterList ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
modifier_popLast (C_Compiler & _inLexique,
                GGS_lstring & _out_0,
                GGS_startSymbolLabelFormalParameterList & _out_1
                COMMA_LOCATION_ARGS) {
  cElement * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    _out_0 = _p->mLabelName ;
    _out_1 = _p->mFormalParameterList ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0._drop () ;
    _out_1._drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarLabelList::
reader_mLabelNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mLabelName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList  GGS_grammarLabelList::
reader_mFormalParameterListAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_startSymbolLabelFormalParameterList  result ;
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFormalParameterList ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
modifier_setMLabelNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mLabelName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_grammarLabelList::
modifier_setMFormalParameterListAtIndex (C_Compiler & inLexique,
                              const GGS_startSymbolLabelFormalParameterList  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (_isBuilt () && inIndex._isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFormalParameterList = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

const GGS_lstring  * GGS_grammarLabelList::cEnumerator::_mLabelName (LOCATION_ARGS) const {
  macroValidPointerThere (mNextEnumeratedObject) ;
  return & (((cElement *) mNextEnumeratedObject)->mLabelName) ;
}

//---------------------------------------------------------------------------*

const GGS_startSymbolLabelFormalParameterList  * GGS_grammarLabelList::cEnumerator::_mFormalParameterList (LOCATION_ARGS) const {
  macroValidPointerThere (mNextEnumeratedObject) ;
  return & (((cElement *) mNextEnumeratedObject)->mFormalParameterList) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_grammarComponentRoot'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_grammarComponentRoot::
cPtr_grammarComponentRoot (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_grammarLabelList & argument_3,
                                const GGS_lstringlist & argument_4
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
mGrammarName (argument_0),
mGrammarClass (argument_1),
mStartSymbol (argument_2),
mLabelList (argument_3),
mUnusedNonterminalList (argument_4) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_grammarComponentRoot * GGS_grammarComponentRoot::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_grammarComponentRoot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_grammarComponentRoot::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_grammarComponentRoot * _p = dynamic_cast <const cPtr_grammarComponentRoot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mGrammarName._operator_isEqual (_p->mGrammarName).boolValue ()
         && mGrammarClass._operator_isEqual (_p->mGrammarClass).boolValue ()
         && mStartSymbol._operator_isEqual (_p->mStartSymbol).boolValue ()
         && mLabelList._operator_isEqual (_p->mLabelList).boolValue ()
         && mUnusedNonterminalList._operator_isEqual (_p->mUnusedNonterminalList).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_grammarComponentRoot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@grammarComponentRoot:"
           << mGrammarName.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mGrammarClass.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mStartSymbol.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mLabelList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1)
           << mUnusedNonterminalList.reader_description  (_inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentRoot::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentRoot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_grammarComponentRoot (& typeid (cPtr_grammarComponentRoot), NULL
, "") ;
//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_grammarComponentRoot::galgasRTTI (void) const {
  return & gClassInfoFor__grammarComponentRoot ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_grammarComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_grammarComponentRoot::
GGS_grammarComponentRoot (cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_grammarComponentRoot::
GGS_grammarComponentRoot (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- _castFrom class method (implements cast expression)
GGS_grammarComponentRoot GGS_grammarComponentRoot::
_castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_grammarComponentRoot _result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_grammarComponentRoot *> (inPointer) != NULL)
      : (typeid (cPtr_grammarComponentRoot) == typeid (*inPointer)) ;
    if (ok) {
      _result = GGS_grammarComponentRoot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_grammarComponentRoot),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return _result ;
}

//---------------------------------------------------------------------------*

GGS_grammarComponentRoot GGS_grammarComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS_grammarLabelList & argument_3,
                 const GGS_lstringlist & argument_4
                                COMMA_LOCATION_ARGS) {
  GGS_grammarComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_grammarComponentRoot (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mGrammarName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mGrammarName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mGrammarClass (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mGrammarClass ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mStartSymbol (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mStartSymbol ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarLabelList  GGS_grammarComponentRoot::
reader_mLabelList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_grammarLabelList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mLabelList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_grammarComponentRoot::
reader_mUnusedNonterminalList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mUnusedNonterminalList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_grammarComponentRoot::actualTypeName (void) const {
  return "grammarComponentRoot" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_grammarComponentRoot::_galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__grammarComponentRoot ("grammarComponentRoot") ;

//---------------------------------------------------------------------------*

