//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'grammarMetamodel.cpp'                         *
//             Generated by version version GALGAS_BETA_VERSION              *
//                       june 21th, 2011, at 20h23'3"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#include "grammarMetamodel.h"
#include "galgas2/C_Compiler.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "utilities/C_PrologueEpilogue.h"

//---------------------------------------------------------------------------*


//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST::GALGAS_grammarComponentAST (void) :
mAttribute_mHasIndexing (),
mAttribute_mGrammarName (),
mAttribute_mGrammarClass (),
mAttribute_mSyntaxComponents (),
mAttribute_mStartSymbolName (),
mAttribute_mStartSymbolLabelList (),
mAttribute_mUnusedNonterminalList (),
mAttribute_mEndOfSourceText () {
}

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST::~ GALGAS_grammarComponentAST (void) {
}

//---------------------------------------------------------------------------*

/* GALGAS_grammarComponentAST::GALGAS_grammarComponentAST (const GALGAS_grammarComponentAST & inSource) :
//mAttribute_mHasIndexing (inSource.mAttribute_mHasIndexing),
//mAttribute_mGrammarName (inSource.mAttribute_mGrammarName),
//mAttribute_mGrammarClass (inSource.mAttribute_mGrammarClass),
//mAttribute_mSyntaxComponents (inSource.mAttribute_mSyntaxComponents),
//mAttribute_mStartSymbolName (inSource.mAttribute_mStartSymbolName),
//mAttribute_mStartSymbolLabelList (inSource.mAttribute_mStartSymbolLabelList),
//mAttribute_mUnusedNonterminalList (inSource.mAttribute_mUnusedNonterminalList),
//mAttribute_mEndOfSourceText (inSource.mAttribute_mEndOfSourceText) {
} */

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST::GALGAS_grammarComponentAST (const GALGAS_lbool & inOperand0,
                                                        const GALGAS_lstring & inOperand1,
                                                        const GALGAS_lstring & inOperand2,
                                                        const GALGAS_lstringlist & inOperand3,
                                                        const GALGAS_lstring & inOperand4,
                                                        const GALGAS_nonTerminalLabelListAST & inOperand5,
                                                        const GALGAS_lstringlist & inOperand6,
                                                        const GALGAS_location & inOperand7) :
mAttribute_mHasIndexing (inOperand0),
mAttribute_mGrammarName (inOperand1),
mAttribute_mGrammarClass (inOperand2),
mAttribute_mSyntaxComponents (inOperand3),
mAttribute_mStartSymbolName (inOperand4),
mAttribute_mStartSymbolLabelList (inOperand5),
mAttribute_mUnusedNonterminalList (inOperand6),
mAttribute_mEndOfSourceText (inOperand7) {
}

//---------------------------------------------------------------------------*

/* GALGAS_grammarComponentAST & GALGAS_grammarComponentAST::operator = (const GALGAS_grammarComponentAST & inOperand) {
  mAttribute_mHasIndexing = inOperand.mAttribute_mHasIndexing ;
  mAttribute_mGrammarName = inOperand.mAttribute_mGrammarName ;
  mAttribute_mGrammarClass = inOperand.mAttribute_mGrammarClass ;
  mAttribute_mSyntaxComponents = inOperand.mAttribute_mSyntaxComponents ;
  mAttribute_mStartSymbolName = inOperand.mAttribute_mStartSymbolName ;
  mAttribute_mStartSymbolLabelList = inOperand.mAttribute_mStartSymbolLabelList ;
  mAttribute_mUnusedNonterminalList = inOperand.mAttribute_mUnusedNonterminalList ;
  mAttribute_mEndOfSourceText = inOperand.mAttribute_mEndOfSourceText ;
  return *this ;
} */

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST GALGAS_grammarComponentAST::constructor_new (const GALGAS_lbool & inOperand0,
                                                                        const GALGAS_lstring & inOperand1,
                                                                        const GALGAS_lstring & inOperand2,
                                                                        const GALGAS_lstringlist & inOperand3,
                                                                        const GALGAS_lstring & inOperand4,
                                                                        const GALGAS_nonTerminalLabelListAST & inOperand5,
                                                                        const GALGAS_lstringlist & inOperand6,
                                                                        const GALGAS_location & inOperand7 
                                                                        COMMA_UNUSED_LOCATION_ARGS) {
  GALGAS_grammarComponentAST result ;
  if (inOperand0.isValid () && inOperand1.isValid () && inOperand2.isValid () && inOperand3.isValid () && inOperand4.isValid () && inOperand5.isValid () && inOperand6.isValid () && inOperand7.isValid ()) {
    result = GALGAS_grammarComponentAST (inOperand0, inOperand1, inOperand2, inOperand3, inOperand4, inOperand5, inOperand6, inOperand7) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

typeComparisonResult GALGAS_grammarComponentAST::objectCompare (const GALGAS_grammarComponentAST & inOperand) const {
   typeComparisonResult result = kOperandEqual ;
  if (result == kOperandEqual) {
    result = mAttribute_mHasIndexing.objectCompare (inOperand.mAttribute_mHasIndexing) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mGrammarName.objectCompare (inOperand.mAttribute_mGrammarName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mGrammarClass.objectCompare (inOperand.mAttribute_mGrammarClass) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mSyntaxComponents.objectCompare (inOperand.mAttribute_mSyntaxComponents) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mStartSymbolName.objectCompare (inOperand.mAttribute_mStartSymbolName) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mStartSymbolLabelList.objectCompare (inOperand.mAttribute_mStartSymbolLabelList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mUnusedNonterminalList.objectCompare (inOperand.mAttribute_mUnusedNonterminalList) ;
  }
  if (result == kOperandEqual) {
    result = mAttribute_mEndOfSourceText.objectCompare (inOperand.mAttribute_mEndOfSourceText) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

bool GALGAS_grammarComponentAST::isValid (void) const {
  return mAttribute_mHasIndexing.isValid () && mAttribute_mGrammarName.isValid () && mAttribute_mGrammarClass.isValid () && mAttribute_mSyntaxComponents.isValid () && mAttribute_mStartSymbolName.isValid () && mAttribute_mStartSymbolLabelList.isValid () && mAttribute_mUnusedNonterminalList.isValid () && mAttribute_mEndOfSourceText.isValid () ;
}

//---------------------------------------------------------------------------*

void GALGAS_grammarComponentAST::drop (void) {
  mAttribute_mHasIndexing.drop () ;
  mAttribute_mGrammarName.drop () ;
  mAttribute_mGrammarClass.drop () ;
  mAttribute_mSyntaxComponents.drop () ;
  mAttribute_mStartSymbolName.drop () ;
  mAttribute_mStartSymbolLabelList.drop () ;
  mAttribute_mUnusedNonterminalList.drop () ;
  mAttribute_mEndOfSourceText.drop () ;
}

//---------------------------------------------------------------------------*

void GALGAS_grammarComponentAST::description (C_String & ioString,
                                              const PMSInt32 inIndentation) const {
  ioString << "<struct @grammarComponentAST:" ;
  if (! isValid ()) {
    ioString << " not built" ;
  }else{
    mAttribute_mHasIndexing.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mGrammarName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mGrammarClass.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mSyntaxComponents.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mStartSymbolName.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mStartSymbolLabelList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mUnusedNonterminalList.description (ioString, inIndentation+1) ;
    ioString << ", " ;
    mAttribute_mEndOfSourceText.description (ioString, inIndentation+1) ;
  }
  ioString << ">" ;
}

//---------------------------------------------------------------------------*

GALGAS_lbool GALGAS_grammarComponentAST::reader_mHasIndexing (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mHasIndexing ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_grammarComponentAST::reader_mGrammarName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mGrammarName ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_grammarComponentAST::reader_mGrammarClass (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mGrammarClass ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_grammarComponentAST::reader_mSyntaxComponents (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mSyntaxComponents ;
}

//---------------------------------------------------------------------------*

GALGAS_lstring GALGAS_grammarComponentAST::reader_mStartSymbolName (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStartSymbolName ;
}

//---------------------------------------------------------------------------*

GALGAS_nonTerminalLabelListAST GALGAS_grammarComponentAST::reader_mStartSymbolLabelList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mStartSymbolLabelList ;
}

//---------------------------------------------------------------------------*

GALGAS_lstringlist GALGAS_grammarComponentAST::reader_mUnusedNonterminalList (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mUnusedNonterminalList ;
}

//---------------------------------------------------------------------------*

GALGAS_location GALGAS_grammarComponentAST::reader_mEndOfSourceText (UNUSED_LOCATION_ARGS) const {
  return mAttribute_mEndOfSourceText ;
}



//---------------------------------------------------------------------------*
//                                                                           *
//                         @grammarComponentAST type                         *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptor
kTypeDescriptor_GALGAS_grammarComponentAST ("grammarComponentAST",
                                            NULL) ;

//---------------------------------------------------------------------------*

const C_galgas_type_descriptor * GALGAS_grammarComponentAST::staticTypeDescriptor (void) const {
  return & kTypeDescriptor_GALGAS_grammarComponentAST ;
}

//---------------------------------------------------------------------------*

AC_GALGAS_root * GALGAS_grammarComponentAST::clonedObject (void) const {
  AC_GALGAS_root * result = NULL ;
  if (isValid ()) {
    macroMyNew (result, GALGAS_grammarComponentAST (*this)) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GALGAS_grammarComponentAST GALGAS_grammarComponentAST::extractObject (const GALGAS_object & inObject,
                                                                      C_Compiler * inCompiler,
                                                                      const GALGAS_location & inErrorLocation
                                                                      COMMA_LOCATION_ARGS) {
  GALGAS_grammarComponentAST result ;
  const GALGAS_grammarComponentAST * p = (const GALGAS_grammarComponentAST *) inObject.embeddedObject () ;
  if (NULL != p) {
    if (NULL != dynamic_cast <const GALGAS_grammarComponentAST *> (p)) {
      result = *p ;
    }else{
      inCompiler->extractObjectError (inErrorLocation, "grammarComponentAST", p->dynamicTypeDescriptor () COMMA_THERE) ;
    }  
  }
  return result ;
}

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2


