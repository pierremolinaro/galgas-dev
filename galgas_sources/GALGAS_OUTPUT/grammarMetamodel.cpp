//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'grammarMetamodel.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    november 12th, 2009, at 16h25'31"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas/C_galgas_CLI_Options.h"
#include "grammarMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//          Element of list '@startSymbolLabelFormalParameterList'           *
//                                                                           *
//---------------------------------------------------------------------------*

elementOf_GGS_startSymbolLabelFormalParameterList::
elementOf_GGS_startSymbolLabelFormalParameterList (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) :
AC_galgas_list::cListElement (THERE),
mFormalAgumentPassingMode (argument_0),
mTypeName (argument_1),
mArgumentName (argument_2) {
}

//---------------------------------------------------------------------------*

bool elementOf_GGS_startSymbolLabelFormalParameterList::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const elementOf_GGS_startSymbolLabelFormalParameterList * ptr = dynamic_cast <const elementOf_GGS_startSymbolLabelFormalParameterList *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mFormalAgumentPassingMode.operator_isEqual (ptr->mFormalAgumentPassingMode).boolValue ()
         && mTypeName.operator_isEqual (ptr->mTypeName).boolValue ()
         && mArgumentName.operator_isEqual (ptr->mArgumentName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void elementOf_GGS_startSymbolLabelFormalParameterList::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const PMSInt32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalAgumentPassingMode.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTypeName.reader_description  (inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mArgumentName.reader_description  (inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//               List '@startSymbolLabelFormalParameterList'                 *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_reference kTypeReference_startSymbolLabelFormalParameterList ("startSymbolLabelFormalParameterList") ;

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_internalAppendValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_internalPrependValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2
                    COMMA_LOCATION_ARGS) {
  cElement * nouvelElement = (cElement *) NULL ;
  macroMyNew (nouvelElement, cElement (argument_0,
                                argument_1,
                                argument_2
                                COMMA_THERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
addAssign_operation (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) {
  if (isBuilt ()&& argument_0.isBuilt ()&& argument_1.isBuilt ()&& argument_2.isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList GGS_startSymbolLabelFormalParameterList::
operator_concat (const GGS_startSymbolLabelFormalParameterList & inOperand) const {
  GGS_startSymbolLabelFormalParameterList result = * this ;
  result.dotAssign_operation (inOperand) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
dotAssign_operation (const GGS_startSymbolLabelFormalParameterList inOperand) {
  if (isBuilt () && inOperand.isBuilt ()) {
    if (count () == 0) {
      * this = inOperand ;
    }else{
      if (inOperand.count () > 0) {
        _insulateList () ;
        elementOf_GGS_startSymbolLabelFormalParameterList * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_formalArgumentPassingMode p_0 = p->mFormalAgumentPassingMode ;
          GGS_lstring  p_1 = p->mTypeName ;
          GGS_lstring  p_2 = p->mArgumentName ;
          _internalAppendValues (p_0, p_1, p_2 COMMA_HERE) ;
          p = p->nextObject () ;
        }
      }
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_formalArgumentPassingMode& argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lstring & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE) ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
_insulateList (void) {
  if (_shared ()) {
    cElement * ptr = firstObject () ;
    alloc () ;
    while (ptr != NULL) {
      macroValidPointer (ptr) ;
      _internalAppendValues (ptr->mFormalAgumentPassingMode,
                                ptr->mTypeName,
                                ptr->mArgumentName
                                COMMA_HERE) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList  GGS_startSymbolLabelFormalParameterList::
constructor_emptyList (void) {
  GGS_startSymbolLabelFormalParameterList result ;
  result.alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList  GGS_startSymbolLabelFormalParameterList::
constructor_listWithValue (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2) {
  GGS_startSymbolLabelFormalParameterList result ;
  result.alloc () ;
  result.addAssign_operation (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
internalSubListWithRange (GGS_startSymbolLabelFormalParameterList & ioList,
                          const PMSInt32 inFirstIndex,
                          const PMSInt32 inCount) const {
  ioList.alloc () ;
  if (inCount > 0) {
    cElement * ptr = firstObject () ;
    for (PMSInt32 i=0 ; i<inFirstIndex ; i++) {
      macroValidPointer (ptr) ;
      ptr = ptr->nextObject () ;
    }
    for (PMSInt32 i=0 ; i<inCount ; i++) {
      macroValidPointer (ptr) ;
      ioList.addAssign_operation (ptr->mFormalAgumentPassingMode, ptr->mTypeName, ptr->mArgumentName) ;
      ptr = ptr->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList GGS_startSymbolLabelFormalParameterList::
reader_subListWithRange (C_Compiler & inLexique,
                         const GGS_uint & inFirstIndex,
                         const GGS_uint & inCount
                         COMMA_LOCATION_ARGS) const {
  GGS_startSymbolLabelFormalParameterList result ;
  if (isBuilt () && inFirstIndex.isBuilt () && inCount.isBuilt ()) {
    const PMSInt32 firstIndex = (PMSInt32) inFirstIndex.uintValue () ;
    const PMSInt32 rangeCount = (PMSInt32) inCount.uintValue () ;
    if ((firstIndex + rangeCount) > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListWithRange' method invoked with upper bound greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, firstIndex, rangeCount) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameterList GGS_startSymbolLabelFormalParameterList::
reader_subListFromIndex (C_Compiler & inLexique,
                         const GGS_uint & inIndex
                         COMMA_LOCATION_ARGS) const {
  GGS_startSymbolLabelFormalParameterList result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    const PMSInt32 startIndex = (PMSInt32) inIndex.uintValue () ;
    if (startIndex > count ()) {
      inLexique.onTheFlyRunTimeError ("'subListFromIndex' method invoked with start index greater than list object count" COMMA_THERE) ;
    }else{
      internalSubListWithRange (result, startIndex, count () - startIndex) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS_startSymbolLabelFormalParameterList::
reader_description (C_Compiler & inLexique
                    COMMA_LOCATION_ARGS,
                    const PMSInt32 inIndentation) const {
  return _description (inLexique, "@startSymbolLabelFormalParameterList", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
method_first (C_Compiler & inLexique,
              GGS_formalArgumentPassingMode& _out_0,
              GGS_lstring & _out_1,
              GGS_lstring & _out_2
              COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mFormalAgumentPassingMode ;
    _out_1 = ptr->mTypeName ;
    _out_2 = ptr->mArgumentName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
method_last (C_Compiler & inLexique,
             GGS_formalArgumentPassingMode& _out_0,
             GGS_lstring & _out_1,
             GGS_lstring & _out_2
             COMMA_LOCATION_ARGS) const {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mFormalAgumentPassingMode ;
    _out_1 = ptr->mTypeName ;
    _out_2 = ptr->mArgumentName ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_popFirst (C_Compiler & inLexique,
                 GGS_formalArgumentPassingMode& _out_0,
                 GGS_lstring & _out_1,
                 GGS_lstring & _out_2
                 COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = firstObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mFormalAgumentPassingMode ;
    _out_1 = ptr->mTypeName ;
    _out_2 = ptr->mArgumentName ;
    _insulateList () ;
    _internalRemoveFirst () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_popLast (C_Compiler & inLexique,
                GGS_formalArgumentPassingMode& _out_0,
                GGS_lstring & _out_1,
                GGS_lstring & _out_2
                COMMA_LOCATION_ARGS) {
  cElement * ptr = NULL ;
  if (isBuilt ()) {
    ptr = lastObject () ;
    if (ptr == NULL) {
      inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (ptr != NULL) {
    _out_0 = ptr->mFormalAgumentPassingMode ;
    _out_1 = ptr->mTypeName ;
    _out_2 = ptr->mArgumentName ;
    _insulateList () ;
    _internalRemoveLast () ;
  }else{
    _out_0.drop () ;
    _out_1.drop () ;
    _out_2.drop () ;
  }
}

//---------------------------------------------------------------------------*

GGS_formalArgumentPassingMode GGS_startSymbolLabelFormalParameterList::
reader_mFormalAgumentPassingModeAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_formalArgumentPassingMode result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mFormalAgumentPassingMode ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_startSymbolLabelFormalParameterList::
reader_mTypeNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mTypeName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_startSymbolLabelFormalParameterList::
reader_mArgumentNameAtIndex (C_Compiler & inLexique, const GGS_uint & inIndex COMMA_LOCATION_ARGS) const {
  GGS_lstring  result ;
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      result = object->mArgumentName ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_setMFormalAgumentPassingModeAtIndex (C_Compiler & inLexique,
                              const GGS_formalArgumentPassingMode & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mFormalAgumentPassingMode = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_setMTypeNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mTypeName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

void GGS_startSymbolLabelFormalParameterList::
modifier_setMArgumentNameAtIndex (C_Compiler & inLexique,
                              const GGS_lstring  & inObject,
                              const GGS_uint & inIndex
                              COMMA_LOCATION_ARGS) const {
  if (isBuilt () && inIndex.isBuilt ()) {
    cElement * object = (cElement *) objectAtIndex (inLexique, inIndex.uintValue () COMMA_THERE) ;
    if (object != NULL) {
      object->mArgumentName = inObject ;
    }
  }
}

//---------------------------------------------------------------------------*

/* const */ GGS_formalArgumentPassingMode & GGS_startSymbolLabelFormalParameterList::cEnumerator::_mFormalAgumentPassingMode (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mFormalAgumentPassingMode ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_startSymbolLabelFormalParameterList::cEnumerator::_mTypeName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mTypeName ;
}

//---------------------------------------------------------------------------*

/* const */ GGS_lstring  & GGS_startSymbolLabelFormalParameterList::cEnumerator::_mArgumentName (LOCATION_ARGS) const {
  macroValidPointerThere (mCurrentEnumeratedObject) ;
  return ((/* const */ cElement *) mCurrentEnumeratedObject)->mArgumentName ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'cPtr_grammarComponentRoot'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_grammarComponentRoot::
cPtr_grammarComponentRoot (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_nonTerminalLabelList & argument_4,
                                const GGS_bool& argument_5,
                                const GGS_lstringlist & argument_6,
                                const GGS_location & argument_7
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
mGrammarName (argument_0),
mGrammarClass (argument_1),
mSyntaxComponents (argument_2),
mStartSymbolName (argument_3),
mStartSymbolLabelList (argument_4),
mStartSymbolHasParseLabel (argument_5),
mUnusedNonterminalList (argument_6),
mEndOfSourceText (argument_7) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_grammarComponentRoot * GGS_grammarComponentRoot::
  operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    return (cPtr_grammarComponentRoot *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_grammarComponentRoot::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_grammarComponentRoot * ptr = dynamic_cast <const cPtr_grammarComponentRoot *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mGrammarName.operator_isEqual (ptr->mGrammarName).boolValue ()
         && mGrammarClass.operator_isEqual (ptr->mGrammarClass).boolValue ()
         && mSyntaxComponents.operator_isEqual (ptr->mSyntaxComponents).boolValue ()
         && mStartSymbolName.operator_isEqual (ptr->mStartSymbolName).boolValue ()
         && mStartSymbolLabelList.operator_isEqual (ptr->mStartSymbolLabelList).boolValue ()
         && mStartSymbolHasParseLabel.operator_isEqual (ptr->mStartSymbolHasParseLabel).boolValue ()
         && mUnusedNonterminalList.operator_isEqual (ptr->mUnusedNonterminalList).boolValue ()
         && mEndOfSourceText.operator_isEqual (ptr->mEndOfSourceText).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_grammarComponentRoot::
appendForDescription (C_Compiler & inLexique,
                      C_String & ioString,
                      const PMSInt32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "->@grammarComponentRoot:"
           << mGrammarName.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mGrammarClass.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mSyntaxComponents.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mStartSymbolName.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mStartSymbolLabelList.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mStartSymbolHasParseLabel.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mUnusedNonterminalList.reader_description  (inLexique COMMA_THERE, inIndentation + 1)
           << mEndOfSourceText.reader_description  (inLexique COMMA_THERE, inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentRoot::
_message (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentRoot::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_grammarComponentRoot (& typeid (cPtr_grammarComponentRoot), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * cPtr_grammarComponentRoot::galgasRTTI (void) const {
  return & gClassInfoFor__grammarComponentRoot ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_grammarComponentRoot::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_grammarComponentRoot (mGrammarName, mGrammarClass, mSyntaxComponents, mStartSymbolName, mStartSymbolLabelList, mStartSymbolHasParseLabel, mUnusedNonterminalList, mEndOfSourceText COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_grammarComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_grammarComponentRoot::
GGS_grammarComponentRoot (const cPtr__AC_galgas_class * inPointer) {
  macroAssignPointer (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_grammarComponentRoot::
GGS_grammarComponentRoot (cPtr__AC_galgas_class & inObject) {
  macroAssignPointer (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_grammarComponentRoot GGS_grammarComponentRoot::
castFrom (C_Compiler & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_grammarComponentRoot result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_grammarComponentRoot *> (inPointer) != NULL)
      : (typeid (cPtr_grammarComponentRoot) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_grammarComponentRoot (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_grammarComponentRoot),
                                       inUseKindOfClass,
                                       inPointer->_message ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarComponentRoot GGS_grammarComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstringlist & argument_2,
                 const GGS_lstring & argument_3,
                 const GGS_nonTerminalLabelList & argument_4,
                 const GGS_bool& argument_5,
                 const GGS_lstringlist & argument_6,
                 const GGS_location & argument_7
                                COMMA_LOCATION_ARGS) {
  GGS_grammarComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_grammarComponentRoot (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mGrammarName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mGrammarName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mGrammarClass (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mGrammarClass ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_grammarComponentRoot::
reader_mSyntaxComponents (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mSyntaxComponents ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mStartSymbolName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mStartSymbolName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelList  GGS_grammarComponentRoot::
reader_mStartSymbolLabelList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonTerminalLabelList   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mStartSymbolLabelList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarComponentRoot::
reader_mStartSymbolHasParseLabel (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mStartSymbolHasParseLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_grammarComponentRoot::
reader_mUnusedNonterminalList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mUnusedNonterminalList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_grammarComponentRoot::
reader_mEndOfSourceText (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mEndOfSourceText ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_grammarComponentRoot::actualTypeName (void) const {
  return "grammarComponentRoot" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformation * GGS_grammarComponentRoot::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformation * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformation gClassInfoFor__grammarComponentRoot ("grammarComponentRoot") ;

//---------------------------------------------------------------------------*

