//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'grammarMetamodel.cpp'                         *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                    september 27th, 2010, at 13h53'56"                     *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "grammarMetamodel.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarMetamodel.gSemantics", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'cPtr_grammarComponentAST'                      *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_grammarComponentAST::
cPtr_grammarComponentAST (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstringlist & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_nonTerminalLabelListAST & argument_4,
                                const GGS_bool& argument_5,
                                const GGS_lstringlist & argument_6,
                                const GGS_location & argument_7
                                COMMA_LOCATION_ARGS)
:cPtr__AC_galgas_class (THERE),
mGrammarName (argument_0),
mGrammarClass (argument_1),
mSyntaxComponents (argument_2),
mStartSymbolName (argument_3),
mStartSymbolLabelList (argument_4),
mStartSymbolHasParseLabel (argument_5),
mUnusedNonterminalList (argument_6),
mEndOfSourceText (argument_7) {
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_grammarComponentAST * GGS_grammarComponentAST::
  operator () (LOCATION_ARGS) const {
    macroValidObjectThere (mPointer, cPtr_grammarComponentAST) ;
    return (cPtr_grammarComponentAST *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*

bool cPtr_grammarComponentAST::
isEqualToObject (const cPtr__AC_galgas_class * inOperand) const {
  bool equal = typeid (this) == typeid (inOperand) ;
  if (equal) {
    const cPtr_grammarComponentAST * ptr = dynamic_cast <const cPtr_grammarComponentAST *> (inOperand) ;
    macroValidPointer (ptr) ;
    equal = mGrammarName.operator_isEqual (ptr->mGrammarName).boolValue ()
         && mGrammarClass.operator_isEqual (ptr->mGrammarClass).boolValue ()
         && mSyntaxComponents.operator_isEqual (ptr->mSyntaxComponents).boolValue ()
         && mStartSymbolName.operator_isEqual (ptr->mStartSymbolName).boolValue ()
         && mStartSymbolLabelList.operator_isEqual (ptr->mStartSymbolLabelList).boolValue ()
         && mStartSymbolHasParseLabel.operator_isEqual (ptr->mStartSymbolHasParseLabel).boolValue ()
         && mUnusedNonterminalList.operator_isEqual (ptr->mUnusedNonterminalList).boolValue ()
         && mEndOfSourceText.operator_isEqual (ptr->mEndOfSourceText).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_grammarComponentAST::
appendForDescription (C_String & ioString,
                      const PMSInt32 inIndentation) const {
  ioString << "->@grammarComponentAST:"
           << mGrammarName.reader_description (inIndentation + 1)
           << mGrammarClass.reader_description (inIndentation + 1)
           << mSyntaxComponents.reader_description (inIndentation + 1)
           << mStartSymbolName.reader_description (inIndentation + 1)
           << mStartSymbolLabelList.reader_description (inIndentation + 1)
           << mStartSymbolHasParseLabel.reader_description (inIndentation + 1)
           << mUnusedNonterminalList.reader_description (inIndentation + 1)
           << mEndOfSourceText.reader_description (inIndentation + 1) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                              Class message                                *
//                                                                           *
//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentAST::
instanceMessage (void) const {
  return "" ;
}

//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentAST::
_static_message (void) {
  return "" ;
}

//---------------------------------------------------------------------------*

C_galgas_class_inspector _gInspectorFor_grammarComponentAST (& typeid (cPtr_grammarComponentAST), NULL, "") ;

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * cPtr_grammarComponentAST::galgasRTTI (void) const {
  return & gClassInfoFor__grammarComponentAST ;
}

//---------------------------------------------------------------------------*

cPtr__AC_galgas_class * cPtr_grammarComponentAST::makeClone (void) const {
  cPtr__AC_galgas_class * result = NULL ;
  macroMyNew (result, cPtr_grammarComponentAST (mGrammarName, mGrammarClass, mSyntaxComponents, mStartSymbolName, mStartSymbolLabelList, mStartSymbolHasParseLabel, mUnusedNonterminalList, mEndOfSourceText COMMA_HERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS class 'GGS_grammarComponentAST'                   *
//                                                                           *
//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX kTypeDescriptor_GGS_grammarComponentAST ("grammarComponentAST", true, NULL) ;

//---------------------------------------------------------------------------*

GGS_grammarComponentAST::
GGS_grammarComponentAST (const cPtr__AC_galgas_class * inPointer) {
  macroAssignObject (mPointer, (cPtr__AC_galgas_class *) inPointer) ;
}

//---------------------------------------------------------------------------*

GGS_grammarComponentAST::
GGS_grammarComponentAST (cPtr__AC_galgas_class & inObject) {
  macroAssignObject (mPointer, & inObject) ;
}

//---------------------------------------------------------------------------*

//--- castFrom class method (implements cast expression)
GGS_grammarComponentAST GGS_grammarComponentAST::
castFrom (C_CompilerEx & inLexique,
           cPtr__AC_galgas_class * inPointer,
           const bool inUseKindOfClass,
           const GGS_location & inErrorLocation
           COMMA_LOCATION_ARGS) {
  GGS_grammarComponentAST result ;
  if (inPointer != NULL) {
    macroValidPointer (inPointer) ;
    const bool ok = inUseKindOfClass
      ? (dynamic_cast <cPtr_grammarComponentAST *> (inPointer) != NULL)
      : (typeid (cPtr_grammarComponentAST) == typeid (*inPointer)) ;
    if (ok) {
      result = GGS_grammarComponentAST (inPointer) ;
    }else{
      inErrorLocation.signalCastError (inLexique,
                                       & typeid (cPtr_grammarComponentAST),
                                       inUseKindOfClass,
                                       inPointer->instanceMessage ()
                                       COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarComponentAST GGS_grammarComponentAST::
constructor_new (C_CompilerEx & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstringlist & argument_2,
                 const GGS_lstring & argument_3,
                 const GGS_nonTerminalLabelListAST & argument_4,
                 const GGS_bool& argument_5,
                 const GGS_lstringlist & argument_6,
                 const GGS_location & argument_7
                                COMMA_LOCATION_ARGS) {
  GGS_grammarComponentAST result ;
  macroMyNew (result.mPointer, cPtr_grammarComponentAST (argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4,
                                argument_5,
                                argument_6,
                                argument_7 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentAST::
reader_mGrammarName (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mGrammarName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentAST::
reader_mGrammarClass (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mGrammarClass ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_grammarComponentAST::
reader_mSyntaxComponents (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mSyntaxComponents ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentAST::
reader_mStartSymbolName (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mStartSymbolName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_nonTerminalLabelListAST  GGS_grammarComponentAST::
reader_mStartSymbolLabelList (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_nonTerminalLabelListAST   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mStartSymbolLabelList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_bool GGS_grammarComponentAST::
reader_mStartSymbolHasParseLabel (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_bool  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mStartSymbolHasParseLabel ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstringlist  GGS_grammarComponentAST::
reader_mUnusedNonterminalList (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstringlist   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mUnusedNonterminalList ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_location  GGS_grammarComponentAST::
reader_mEndOfSourceText (C_CompilerEx & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_location   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentAST *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentAST *) mPointer)->mEndOfSourceText ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_grammarComponentAST::actualTypeName (void) const {
  return "grammarComponentAST" ;
}

//---------------------------------------------------------------------------*

AC_galgasClassRunTimeInformationEX * GGS_grammarComponentAST::galgasObjectRunTimeInfo (void) const {
  AC_galgasClassRunTimeInformationEX * result = NULL ;
  if (mPointer != NULL) {
    result = mPointer->galgasRTTI () ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

C_galgasRootClassRunTimeInformationEX gClassInfoFor__grammarComponentAST ("grammarComponentAST", & kTypeDescriptor_GGS_grammarComponentAST) ;

//---------------------------------------------------------------------------*

GGS_object GGS_grammarComponentAST::reader_object (void) const {
  GGS_object result ;
  if (isBuilt ()) {
    GGS_grammarComponentAST * p = NULL ;
    macroMyNew (p, GGS_grammarComponentAST (*this)) ;
    result = GGS_object (p) ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_grammarComponentAST GGS_grammarComponentAST::castFromObject (C_CompilerEx & inLexique,
                                   const GGS_object & inObject,
                                   const GGS_location & inErrorLocation
                                   COMMA_LOCATION_ARGS) {
  GGS_grammarComponentAST result ;
  const GGS__root * embeddedObject = inObject.embeddedObject () ;
  if (NULL != embeddedObject) {
    const GGS_grammarComponentAST * p = dynamic_cast <const GGS_grammarComponentAST *> (embeddedObject) ;
    if (NULL != p) {
      result = * p ;
    }else{
      castFromObjectErrorSignaling (inLexique, inErrorLocation, & kTypeDescriptor_GGS_grammarComponentAST, embeddedObject COMMA_THERE) ;
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

const C_galgas_type_descriptorEX * GGS_grammarComponentAST::typeDescriptor (void) const {
  return & kTypeDescriptor_GGS_grammarComponentAST ;
}

//---------------------------------------------------------------------------*

