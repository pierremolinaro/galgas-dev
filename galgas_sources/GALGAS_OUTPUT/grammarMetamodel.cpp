//---------------------------------------------------------------------------*
//                                                                           *
//                       File 'grammarMetamodel.cpp'                         *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      june 24th, 2007, at 15h56'12"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "grammarMetamodel.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#include <typeinfo>

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "grammarMetamodel.gMetamodel", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                           Metamodel Management                            *
//                                                                           *
//---------------------------------------------------------------------------*

static C_MetamodelManager gMetamodelManager ("grammarMetamodel", 3) ;

//---------------------------------------------------------------------------*

sint32 _metamodel_index_for_grammarMetamodel (void) {
  return gMetamodelManager.mMetamodelComponentIndex ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//            Element of list '@startSymbolLabelFormalParameter'             *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_startSymbolLabelFormalParameter::
cPtr_startSymbolLabelFormalParameter (const GGS_formalArgumentPassingMode& argument_0,
                                const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) :
EX_C_GGS_MetamodelEntity (THERE),
mFormalAgumentPassingMode (argument_0),
mTypeName (argument_1) {
}

//---------------------------------------------------------------------------*

bool cPtr_startSymbolLabelFormalParameter::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_startSymbolLabelFormalParameter * _p = dynamic_cast <const cPtr_startSymbolLabelFormalParameter *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mFormalAgumentPassingMode._operator_isEqual (_p->mFormalAgumentPassingMode).boolValue ()
         && mTypeName._operator_isEqual (_p->mTypeName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_startSymbolLabelFormalParameter::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @startSymbolLabelFormalParameter" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalAgumentPassingMode.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mTypeName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_startSymbolLabelFormalParameter::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_startSymbolLabelFormalParameter::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_startSymbolLabelFormalParameter::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 0 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_startSymbolLabelFormalParameter::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "startSymbolLabelFormalParameter" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_startSymbolLabelFormalParameter * cPtr_startSymbolLabelFormalParameter::
_cloneObject (void) const {
  cPtr_startSymbolLabelFormalParameter * _p = NULL ;
  macroMyNew (_p, cPtr_startSymbolLabelFormalParameter (mFormalAgumentPassingMode, mTypeName COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//              List '@_list_startSymbolLabelFormalParameter'                *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS__list_startSymbolLabelFormalParameter::
_internalAppendValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_startSymbolLabelFormalParameter::
_internalPrependValues (const GGS_formalArgumentPassingMode& argument_0,
                    const GGS_lstring & argument_1) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_startSymbolLabelFormalParameter::
_addAssign_operation (const GGS_startSymbolLabelFormalParameter & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_startSymbolLabelFormalParameter *) inElement.getPtr ())->mFormalAgumentPassingMode,
                                ((cPtr_startSymbolLabelFormalParameter *) inElement.getPtr ())->mTypeName) ;
  }
}

//---------------------------------------------------------------------------*

GGS__list_startSymbolLabelFormalParameter GGS__list_startSymbolLabelFormalParameter::
_operator_concat (const GGS__list_startSymbolLabelFormalParameter & inOperand) const {
  GGS__list_startSymbolLabelFormalParameter result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_startSymbolLabelFormalParameter * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_formalArgumentPassingMode p_0 = p->mFormalAgumentPassingMode ;
          GGS_lstring  p_1 = p->mTypeName ;
          result._internalAppendValues (p_0, p_1) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_startSymbolLabelFormalParameter::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_formalArgumentPassingMode& argument_0,
                     const GGS_lstring & argument_1
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1) ;
  }
}

//---------------------------------------------------------------------------*

void GGS__list_startSymbolLabelFormalParameter::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mFormalAgumentPassingMode,
                                _p->mTypeName) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS__list_startSymbolLabelFormalParameter  GGS__list_startSymbolLabelFormalParameter::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_startSymbolLabelFormalParameter result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_startSymbolLabelFormalParameter  GGS__list_startSymbolLabelFormalParameter::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_formalArgumentPassingMode& argument_0,
                           const GGS_lstring & argument_1
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_startSymbolLabelFormalParameter result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_startSymbolLabelFormalParameter::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_startSymbolLabelFormalParameter", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS__list_startSymbolLabelFormalParameter::
_addModel (const GGS_startSymbolLabelFormalParameter & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_startSymbolLabelFormalParameter::
method_first (C_Compiler & _inLexique,
              GGS_startSymbolLabelFormalParameter & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_startSymbolLabelFormalParameter::constructor_new (_inLexique,
       _p->mFormalAgumentPassingMode,
       _p->mTypeName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_startSymbolLabelFormalParameter::
method_last (C_Compiler & _inLexique,
             GGS_startSymbolLabelFormalParameter & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_startSymbolLabelFormalParameter::constructor_new (_inLexique,
       _p->mFormalAgumentPassingMode,
       _p->mTypeName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_startSymbolLabelFormalParameter::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_startSymbolLabelFormalParameter & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_startSymbolLabelFormalParameter::constructor_new (_inLexique,
       _p->mFormalAgumentPassingMode,
       _p->mTypeName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_startSymbolLabelFormalParameter::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_startSymbolLabelFormalParameter & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_startSymbolLabelFormalParameter::constructor_new (_inLexique,
       _p->mFormalAgumentPassingMode,
       _p->mTypeName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS entity '@startSymbolLabelFormalParameter'              *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_startSymbolLabelFormalParameter GGS_startSymbolLabelFormalParameter::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_formalArgumentPassingMode& argument_0,
                 const GGS_lstring & argument_1
                                COMMA_LOCATION_ARGS) {
  GGS_startSymbolLabelFormalParameter result ;
  macroMyNew (result.mPointer, cPtr_startSymbolLabelFormalParameter (argument_0,
                                argument_1 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_formalArgumentPassingMode GGS_startSymbolLabelFormalParameter::
reader_mFormalAgumentPassingMode (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_formalArgumentPassingMode  result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_startSymbolLabelFormalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_startSymbolLabelFormalParameter *) mPointer)->mFormalAgumentPassingMode ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_startSymbolLabelFormalParameter::
reader_mTypeName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_startSymbolLabelFormalParameter *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_startSymbolLabelFormalParameter *) mPointer)->mTypeName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_startSymbolLabelFormalParameter::actualTypeName (void) const {
 return "startSymbolLabelFormalParameter" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_startSymbolLabelFormalParameter * GGS_startSymbolLabelFormalParameter::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_startSymbolLabelFormalParameter *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                     Element of list '@grammarLabel'                       *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_grammarLabel::
cPtr_grammarLabel (const GGS_lstring & argument_0,
                                const GGS__list_startSymbolLabelFormalParameter & argument_1,
                                const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) :
EX_C_GGS_MetamodelEntity (THERE),
mLabelName (argument_0),
mFormalParameters (argument_1),
mMetamodelName (argument_2) {
}

//---------------------------------------------------------------------------*

bool cPtr_grammarLabel::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_grammarLabel * _p = dynamic_cast <const cPtr_grammarLabel *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mLabelName._operator_isEqual (_p->mLabelName).boolValue ()
         && mFormalParameters._operator_isEqual (_p->mFormalParameters).boolValue ()
         && mMetamodelName._operator_isEqual (_p->mMetamodelName).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_grammarLabel::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @grammarLabel" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabelName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mFormalParameters.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mMetamodelName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_grammarLabel::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_grammarLabel::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_grammarLabel::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 1 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_grammarLabel::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "grammarLabel" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_grammarLabel * cPtr_grammarLabel::
_cloneObject (void) const {
  cPtr_grammarLabel * _p = NULL ;
  macroMyNew (_p, cPtr_grammarLabel (mLabelName, mFormalParameters, mMetamodelName COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                        List '@_list_grammarLabel'                         *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS__list_grammarLabel::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS__list_startSymbolLabelFormalParameter & argument_1,
                    const GGS_lstring & argument_2) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarLabel::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS__list_startSymbolLabelFormalParameter & argument_1,
                    const GGS_lstring & argument_2) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarLabel::
_addAssign_operation (const GGS_grammarLabel & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_grammarLabel *) inElement.getPtr ())->mLabelName,
                                ((cPtr_grammarLabel *) inElement.getPtr ())->mFormalParameters,
                                ((cPtr_grammarLabel *) inElement.getPtr ())->mMetamodelName) ;
  }
}

//---------------------------------------------------------------------------*

GGS__list_grammarLabel GGS__list_grammarLabel::
_operator_concat (const GGS__list_grammarLabel & inOperand) const {
  GGS__list_grammarLabel result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_grammarLabel * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mLabelName ;
          GGS__list_startSymbolLabelFormalParameter  p_1 = p->mFormalParameters ;
          GGS_lstring  p_2 = p->mMetamodelName ;
          result._internalAppendValues (p_0, p_1, p_2) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarLabel::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS__list_startSymbolLabelFormalParameter & argument_1,
                     const GGS_lstring & argument_2
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2) ;
  }
}

//---------------------------------------------------------------------------*

void GGS__list_grammarLabel::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mLabelName,
                                _p->mFormalParameters,
                                _p->mMetamodelName) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS__list_grammarLabel  GGS__list_grammarLabel::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_grammarLabel result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_grammarLabel  GGS__list_grammarLabel::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS__list_startSymbolLabelFormalParameter & argument_1,
                           const GGS_lstring & argument_2
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_grammarLabel result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1, argument_2) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_grammarLabel::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_grammarLabel", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarLabel::
_addModel (const GGS_grammarLabel & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_grammarLabel::
method_first (C_Compiler & _inLexique,
              GGS_grammarLabel & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarLabel::constructor_new (_inLexique,
       _p->mLabelName,
       _p->mFormalParameters,
       _p->mMetamodelName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_grammarLabel::
method_last (C_Compiler & _inLexique,
             GGS_grammarLabel & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarLabel::constructor_new (_inLexique,
       _p->mLabelName,
       _p->mFormalParameters,
       _p->mMetamodelName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_grammarLabel::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_grammarLabel & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarLabel::constructor_new (_inLexique,
       _p->mLabelName,
       _p->mFormalParameters,
       _p->mMetamodelName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_grammarLabel::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_grammarLabel & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarLabel::constructor_new (_inLexique,
       _p->mLabelName,
       _p->mFormalParameters,
       _p->mMetamodelName) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                      GALGAS entity '@grammarLabel'                        *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_grammarLabel GGS_grammarLabel::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS__list_startSymbolLabelFormalParameter & argument_1,
                 const GGS_lstring & argument_2
                                COMMA_LOCATION_ARGS) {
  GGS_grammarLabel result ;
  macroMyNew (result.mPointer, cPtr_grammarLabel (argument_0,
                                argument_1,
                                argument_2 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarLabel::
reader_mLabelName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarLabel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarLabel *) mPointer)->mLabelName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_startSymbolLabelFormalParameter  GGS_grammarLabel::
reader_mFormalParameters (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_startSymbolLabelFormalParameter   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarLabel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarLabel *) mPointer)->mFormalParameters ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarLabel::
reader_mMetamodelName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarLabel *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarLabel *) mPointer)->mMetamodelName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_grammarLabel::actualTypeName (void) const {
 return "grammarLabel" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_grammarLabel * GGS_grammarLabel::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_grammarLabel *) mPointer ;
  }
#endif

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of list '@grammarComponentRoot'                   *
//                                                                           *
//---------------------------------------------------------------------------*

cPtr_grammarComponentRoot::
cPtr_grammarComponentRoot (const GGS_lstring & argument_0,
                                const GGS_lstring & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS__list_grammarLabel & argument_3
                                COMMA_LOCATION_ARGS) :
EX_C_GGS_MetamodelEntity (THERE),
mGrammarName (argument_0),
mGrammarClass (argument_1),
mStartSymbol (argument_2),
mLabels (argument_3) {
}

//---------------------------------------------------------------------------*

bool cPtr_grammarComponentRoot::
isEqualToObject (const cListElement * inOperand) const {
  bool equal = inOperand == this ;
  if (! equal) {
    const cPtr_grammarComponentRoot * _p = dynamic_cast <const cPtr_grammarComponentRoot *> (inOperand) ;
    macroValidPointer (_p) ;
    equal = mGrammarName._operator_isEqual (_p->mGrammarName).boolValue ()
         && mGrammarClass._operator_isEqual (_p->mGrammarClass).boolValue ()
         && mStartSymbol._operator_isEqual (_p->mStartSymbol).boolValue ()
         && mLabels._operator_isEqual (_p->mLabels).boolValue () ;
  }
  return equal ;
}

//---------------------------------------------------------------------------*

void cPtr_grammarComponentRoot::
appendForDescription (C_Compiler & _inLexique,
                      C_String & ioString,
                      const sint32 inIndentation
                      COMMA_LOCATION_ARGS) const {
  ioString << "-> instance of @grammarComponentRoot" ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mGrammarName.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mGrammarClass.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mStartSymbol.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
  ioString << "\n" ;
  ioString.writeStringMultiple ("| ", inIndentation) ;
  ioString << "|-" ;
  ioString << mLabels.reader_description  (_inLexique COMMA_THERE, inIndentation) ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_grammarComponentRoot::_metamodelComponentIndex (const sint32 inLevel) const {
  sint32 result = gMetamodelManager.mMetamodelComponentIndex ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentRoot::_metamodelComponentName (const sint32 inLevel) const {
  const char * result = gMetamodelManager.mMetamodelComponentName ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

sint32 cPtr_grammarComponentRoot::_metamodelClassID (const sint32 inLevel) const {
  sint32 result = 2 ;
  if (inLevel > 0) {
    result = -1 ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * cPtr_grammarComponentRoot::_metamodelClassName (const sint32 inLevel) const {
  const char * result = "grammarComponentRoot" ;
  if (inLevel > 0) {
    result = NULL ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

cPtr_grammarComponentRoot * cPtr_grammarComponentRoot::
_cloneObject (void) const {
  cPtr_grammarComponentRoot * _p = NULL ;
  macroMyNew (_p, cPtr_grammarComponentRoot (mGrammarName, mGrammarClass, mStartSymbol, mLabels COMMA_HERE)) ;
  return _p ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                    List '@_list_grammarComponentRoot'                     *
//                                                                           *
//---------------------------------------------------------------------------*

void GGS__list_grammarComponentRoot::
_internalAppendValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS__list_grammarLabel & argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalAppendItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarComponentRoot::
_internalPrependValues (const GGS_lstring & argument_0,
                    const GGS_lstring & argument_1,
                    const GGS_lstring & argument_2,
                    const GGS__list_grammarLabel & argument_3) {
  element_type * nouvelElement = (element_type *) NULL ;
  macroMyNew (nouvelElement, element_type (argument_0,
                                argument_1,
                                argument_2,
                                argument_3
                                COMMA_HERE)) ;
  _internalPrependItem (nouvelElement) ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarComponentRoot::
_addAssign_operation (const GGS_grammarComponentRoot & inElement) {
  if (_isBuilt () && inElement._isBuilt ()) {
    _insulateList () ;
    _internalAppendValues (((cPtr_grammarComponentRoot *) inElement.getPtr ())->mGrammarName,
                                ((cPtr_grammarComponentRoot *) inElement.getPtr ())->mGrammarClass,
                                ((cPtr_grammarComponentRoot *) inElement.getPtr ())->mStartSymbol,
                                ((cPtr_grammarComponentRoot *) inElement.getPtr ())->mLabels) ;
  }
}

//---------------------------------------------------------------------------*

GGS__list_grammarComponentRoot GGS__list_grammarComponentRoot::
_operator_concat (const GGS__list_grammarComponentRoot & inOperand) const {
  GGS__list_grammarComponentRoot result ;
  if (_isBuilt () && inOperand._isBuilt ()) {
    if (count () == 0) {
      result = inOperand ;
    }else{
      result = * this ;
      if (inOperand.count () > 0) {
        result._insulateList () ;
        cPtr_grammarComponentRoot * p = inOperand.firstObject () ;
        while (p != NULL) {
          macroValidPointer (p) ;
          GGS_lstring  p_0 = p->mGrammarName ;
          GGS_lstring  p_1 = p->mGrammarClass ;
          GGS_lstring  p_2 = p->mStartSymbol ;
          GGS__list_grammarLabel  p_3 = p->mLabels ;
          result._internalAppendValues (p_0, p_1, p_2, p_3) ;
          p = p->nextObject () ;
        }
      }
    }
  }
  return result ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarComponentRoot::
modifier_prependValue (C_Compiler & /* inLexique */,
                     const GGS_lstring & argument_0,
                     const GGS_lstring & argument_1,
                     const GGS_lstring & argument_2,
                     const GGS__list_grammarLabel & argument_3
                     COMMA_UNUSED_LOCATION_ARGS) {
  if (_isBuilt ()) {
    _insulateList () ;
    _internalPrependValues (argument_0,
                                argument_1,
                                argument_2,
                                argument_3) ;
  }
}

//---------------------------------------------------------------------------*

void GGS__list_grammarComponentRoot::
_insulateList (void) {
  if (_shared ()) {
    element_type * _p = firstObject () ;
    _alloc () ;
    while (_p != NULL) {
      macroValidPointer (_p) ;
      _internalAppendValues (_p->mGrammarName,
                                _p->mGrammarClass,
                                _p->mStartSymbol,
                                _p->mLabels) ;
      _p = _p->nextObject () ;
    }
  }
}

//---------------------------------------------------------------------------*

GGS__list_grammarComponentRoot  GGS__list_grammarComponentRoot::
constructor_emptyList (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_grammarComponentRoot result ;
  result._alloc () ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_grammarComponentRoot  GGS__list_grammarComponentRoot::
constructor_listWithValue (C_Compiler & /* _inLexique */,
                           const GGS_lstring & argument_0,
                           const GGS_lstring & argument_1,
                           const GGS_lstring & argument_2,
                           const GGS__list_grammarLabel & argument_3
                           COMMA_UNUSED_LOCATION_ARGS) {
  GGS__list_grammarComponentRoot result ;
  result._alloc () ;
  result._internalAppendValues (argument_0, argument_1, argument_2, argument_3) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_string GGS__list_grammarComponentRoot::
reader_description (C_Compiler & _inLexique
                    COMMA_LOCATION_ARGS,
                    const sint32 inIndentation) const {
  return _description (_inLexique, "@_list_grammarComponentRoot", inIndentation COMMA_THERE) ;
}

//---------------------------------------------------------------------------*

void GGS__list_grammarComponentRoot::
_addModel (const GGS_grammarComponentRoot & inOperand) {
  if (_isBuilt () && inOperand._isBuilt ()) {
    _insulateList () ;
    _internalAppendItem (inOperand (HERE)->_cloneObject ()) ;
  }
}

//---------------------------------------------------------------------------*

/* void GGS__list_grammarComponentRoot::
method_first (C_Compiler & _inLexique,
              GGS_grammarComponentRoot & outElement
              COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'first' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarComponentRoot::constructor_new (_inLexique,
       _p->mGrammarName,
       _p->mGrammarClass,
       _p->mStartSymbol,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_grammarComponentRoot::
method_last (C_Compiler & _inLexique,
             GGS_grammarComponentRoot & outElement
             COMMA_LOCATION_ARGS) const {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'last' method invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarComponentRoot::constructor_new (_inLexique,
       _p->mGrammarName,
       _p->mGrammarClass,
       _p->mStartSymbol,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_grammarComponentRoot::
modifier_popFirst (C_Compiler & _inLexique,
                   GGS_grammarComponentRoot & outElement
                   COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = firstObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popFirst' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarComponentRoot::constructor_new (_inLexique,
       _p->mGrammarName,
       _p->mGrammarClass,
       _p->mStartSymbol,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*

/* void GGS__list_grammarComponentRoot::
modifier_popLast (C_Compiler & _inLexique,
                  GGS_grammarComponentRoot & outElement
                  COMMA_LOCATION_ARGS) {
  element_type * _p = NULL ;
  if (_isBuilt ()) {
    _p = lastObject () ;
    if (_p == NULL) {
      _inLexique.onTheFlyRunTimeError ("'popLast' modifier invoked on an empty list" COMMA_THERE) ;
    }
  }
  if (_p != NULL) {
    outElement = GGS_grammarComponentRoot::constructor_new (_inLexique,
       _p->mGrammarName,
       _p->mGrammarClass,
       _p->mStartSymbol,
       _p->mLabels) ;
  }else{
    outElement._drop_operation () ;
  }
} */

//---------------------------------------------------------------------------*
//                                                                           *
//                  GALGAS entity '@grammarComponentRoot'                    *
//                                                                           *
//---------------------------------------------------------------------------*

GGS_grammarComponentRoot GGS_grammarComponentRoot::
constructor_new (C_Compiler & /* inLexique */,
                 const GGS_lstring & argument_0,
                 const GGS_lstring & argument_1,
                 const GGS_lstring & argument_2,
                 const GGS__list_grammarLabel & argument_3
                                COMMA_LOCATION_ARGS) {
  GGS_grammarComponentRoot result ;
  macroMyNew (result.mPointer, cPtr_grammarComponentRoot (argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE)) ;
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mGrammarName (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mGrammarName ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mGrammarClass (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mGrammarClass ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS_lstring  GGS_grammarComponentRoot::
reader_mStartSymbol (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS_lstring   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mStartSymbol ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

GGS__list_grammarLabel  GGS_grammarComponentRoot::
reader_mLabels (C_Compiler & /* inLexique */ COMMA_UNUSED_LOCATION_ARGS) const {
  GGS__list_grammarLabel   result ;
  if (mPointer != NULL) {
    macroValidPointer (mPointer) ;
    MF_Assert (dynamic_cast <cPtr_grammarComponentRoot *> (mPointer) != NULL,
               "dynamic cast error", 0, 0) ;
    result = ((cPtr_grammarComponentRoot *) mPointer)->mLabels ;
  }
  return result ;
}

//---------------------------------------------------------------------------*

const char * GGS_grammarComponentRoot::actualTypeName (void) const {
 return "grammarComponentRoot" ;
}

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  cPtr_grammarComponentRoot * GGS_grammarComponentRoot::operator () (LOCATION_ARGS) const {
    macroValidPointerThere (mPointer) ;
    return (cPtr_grammarComponentRoot *) mPointer ;
  }
#endif

