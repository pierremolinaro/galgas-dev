//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'parser_semantics.h'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                     october 19th, 2006, at 19h25'35"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef parser_semantics_DEFINED
#define parser_semantics_DEFINED

#include <string.h>

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_luint64.h"
#include "galgas/GGS_lsint64.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/C_Lexique.h"

// Include imported semantics
#include "semantics_semantics.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeParserInstruction ;
class cPtr_typeParserInstruction ;
class GGS_typeInstructionAppelNonTerminal ;
class cPtr_typeInstructionAppelNonTerminal ;
class GGS_typeInstructionVerifSyntaxique ;
class cPtr_typeInstructionVerifSyntaxique ;
class GGS_typeListeBranchesInstructions ;
class GGS_C_select_instruction ;
class cPtr_C_select_instruction ;
class GGS_C_repeat_instruction ;
class cPtr_C_repeat_instruction ;
class GGS_L_parse_rewind_signature_list ;
class GGS_C_parse_rewind_instruction ;
class cPtr_C_parse_rewind_instruction ;
class GGS_C_parse_when_else_instruction ;
class cPtr_C_parse_when_else_instruction ;
class GGS_typeNonterminalToGenerate ;
class cPtr_typeNonterminalToGenerate ;
class GGS_typeAltProductionsMap ;
class GGS_typeProductionAengendrer ;
class cPtr_typeProductionAengendrer ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeParserInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeParserInstruction : public GGS_typeInstruction {
//--- Default constructor
  public : GGS_typeParserInstruction (void) ;
//--- Copy constructor
  public : GGS_typeParserInstruction (const GGS_typeParserInstruction &) ;
//--- Virtual destructor
  public : virtual ~GGS_typeParserInstruction (void) ;
//--- Assignment operator
  public : void operator = (const GGS_typeParserInstruction &) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeParserInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeParserInstruction * operator () (LOCATION_ARGS) const {
      return (cPtr_typeParserInstruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeInstructionAppelNonTerminal'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionAppelNonTerminal : public GGS_typeParserInstruction {
//--- Default Constructor
  public : GGS_typeInstructionAppelNonTerminal (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeInstructionAppelNonTerminal constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeExpressionList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstructionAppelNonTerminal * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstructionAppelNonTerminal * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInstructionAppelNonTerminal *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeInstructionVerifSyntaxique'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionVerifSyntaxique : public GGS_typeParserInstruction {
//--- Default Constructor
  public : GGS_typeInstructionVerifSyntaxique (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeInstructionVerifSyntaxique constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_L_assignedVariables & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeInstructionVerifSyntaxique * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeInstructionVerifSyntaxique * operator () (LOCATION_ARGS) const {
      return (cPtr_typeInstructionVerifSyntaxique *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@typeListeBranchesInstructions'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeBranchesInstructions ;

class GGS_typeListeBranchesInstructions {
  public : typedef elementOf_GGS_typeListeBranchesInstructions element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_typeListeBranchesInstructions (void) ;
//--- Copy Constructor
  public : GGS_typeListeBranchesInstructions (const GGS_typeListeBranchesInstructions & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_typeListeBranchesInstructions & inSource) ;
//--- Destructor
  public : ~GGS_typeListeBranchesInstructions (void) ;

//--- Constructor 'emptyList'
  public : static GGS_typeListeBranchesInstructions constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_typeInstructionList & _out_0
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_typeInstructionList & _out_0
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popLast'
  public : void method_popLast (C_Lexique & _inLexique,
                                GGS_typeInstructionList & _out_0
                                COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_typeInstructionList & argument_0) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_typeInstructionList & argument_0) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_select_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_select_instruction : public GGS_typeParserInstruction {
//--- Default Constructor
  public : GGS_C_select_instruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_C_select_instruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeListeBranchesInstructions & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_select_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_select_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_select_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_repeat_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_repeat_instruction : public GGS_typeParserInstruction {
//--- Default Constructor
  public : GGS_C_repeat_instruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_C_repeat_instruction constructor_new (C_Lexique & inLexique,
                                const GGS_typeListeBranchesInstructions & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_repeat_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_repeat_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_repeat_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@L_parse_rewind_signature_list'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_parse_rewind_signature_list ;

class GGS_L_parse_rewind_signature_list {
  public : typedef elementOf_GGS_L_parse_rewind_signature_list element_type ;
//--- Embedded class for list root
  protected : class cRootList {
    public : element_type * mFirstItem ;
    public : element_type * mLastItem ;
    public : sint32 mListLength ;
    public : sint32 mCountReference ;
  //--- Default constructor
    public : cRootList (void) ;
  //--- Destructor
    public : ~cRootList (void) ;
  //--- No Copy
    private : cRootList (const cRootList &) ;
    private : void operator = (const cRootList &) ;
  } ;
//--- Private attribute
  private : cRootList * _mRoot ;
//--- Default Constructor
  public : GGS_L_parse_rewind_signature_list (void) ;
//--- Copy Constructor
  public : GGS_L_parse_rewind_signature_list (const GGS_L_parse_rewind_signature_list & inSource) ;
//--- Assignment Operator
  public : void operator = (const GGS_L_parse_rewind_signature_list & inSource) ;
//--- Destructor
  public : ~GGS_L_parse_rewind_signature_list (void) ;

//--- Constructor 'emptyList'
  public : static GGS_L_parse_rewind_signature_list constructor_emptyList (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Function 'count'
  public : sint32 count (void) const ;
//--- Reader 'description'
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- Get first object
  public : element_type * firstObject (void) const ;
//--- Method 'first'
  public : void method_first (C_Lexique & _inLexique,
                              GGS_L_ruleSyntaxSignature & _out_0,
                              GGS_location & _out_1
                              COMMA_LOCATION_ARGS) const ;
//--- Method 'last'
  public : void method_last (C_Lexique & _inLexique,
                             GGS_L_ruleSyntaxSignature & _out_0,
                             GGS_location & _out_1
                             COMMA_LOCATION_ARGS) const ;
//--- Method 'popLast'
  public : void method_popLast (C_Lexique & _inLexique,
                                GGS_L_ruleSyntaxSignature & _out_0,
                                GGS_location & _out_1
                                COMMA_LOCATION_ARGS) ;
//--- Handling '+=' GALGAS operator
  public : void _addAssign_operation (const GGS_L_ruleSyntaxSignature & argument_0,
                                const GGS_location & argument_1) ;
//--- Internal Methods
  protected : void _internalAppendItem (const GGS_L_ruleSyntaxSignature & argument_0,
                                const GGS_location & argument_1) ;
  protected : void _insulateList (void) ;
//--- '_isBuilt' method
  public : inline bool _isBuilt (void) const {
    return _mRoot != NULL ;
  }
//--- Handling GALGAS 'drop' instruction
  public : void _drop_operation (void) ;
//--- Handling GALGAS 'length' reader
  public : GGS_uint reader_length (C_Lexique & /* inLexique */
                                   COMMA_UNUSED_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_C_parse_rewind_instruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_parse_rewind_instruction : public GGS_typeParserInstruction {
//--- Default Constructor
  public : GGS_C_parse_rewind_instruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_C_parse_rewind_instruction constructor_new (C_Lexique & inLexique,
                                const GGS_location & argument_0,
                                const GGS_typeListeBranchesInstructions & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_parse_rewind_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_parse_rewind_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_parse_rewind_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_C_parse_when_else_instruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_parse_when_else_instruction : public GGS_typeParserInstruction {
//--- Default Constructor
  public : GGS_C_parse_when_else_instruction (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_C_parse_when_else_instruction constructor_new (C_Lexique & inLexique,
                                const GGS_L_expression_instructionsList_list & argument_0,
                                const GGS_typeInstructionList & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_C_parse_when_else_instruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_C_parse_when_else_instruction * operator () (LOCATION_ARGS) const {
      return (cPtr_C_parse_when_else_instruction *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeNonterminalToGenerate'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeNonterminalToGenerate : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeNonterminalToGenerate (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeNonterminalToGenerate constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_M_nonterminalSymbolAlts & argument_1 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeNonterminalToGenerate * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeNonterminalToGenerate * operator () (LOCATION_ARGS) const {
      return (cPtr_typeNonterminalToGenerate *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Map '@typeAltProductionsMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeAltProductionsMap ;

class GGS_typeAltProductionsMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeAltProductionsMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) internalRootObject () ; }
  public : inline element_type * firstObject (void) const { return (element_type *) internalFirstObject () ; }
  public : inline element_type * lastObject (void) const { return (element_type *) internalLastObject () ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeAltProductionsMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
  public : inline const GGS_typeAltProductionsMap * operator () (UNUSED_LOCATION_ARGS) const { return this ; }
//--- 'emptyMap' constructor
  public : static GGS_typeAltProductionsMap constructor_emptyMap (C_Lexique & inLexique COMMA_LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void method_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter0,
                                const GGS_typeInstructionList &  inParameter1,
                                const GGS_L_ruleSyntaxSignature &  inParameter2,
                                const GGS_location &  inParameter3,
                                const GGS_string&  inParameter4,
                                const GGS_entityPropertyMap &  inParameter5 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void method_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeListeTypesEtNomsArgMethode   & outParameter0,
                                GGS_typeInstructionList   & outParameter1,
                                GGS_L_ruleSyntaxSignature   & outParameter2,
                                GGS_location   & outParameter3,
                                GGS_string  & outParameter4,
                                GGS_entityPropertyMap   & outParameter5 COMMA_LOCATION_ARGS) const ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeListeTypesEtNomsArgMethode & inParameter0,
                                  const GGS_typeInstructionList & inParameter1,
                                  const GGS_L_ruleSyntaxSignature & inParameter2,
                                  const GGS_location & inParameter3,
                                  const GGS_string& inParameter4,
                                  const GGS_entityPropertyMap & inParameter5,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeListeTypesEtNomsArgMethode & outParameter0,
                                  GGS_typeInstructionList & outParameter1,
                                  GGS_L_ruleSyntaxSignature & outParameter2,
                                  GGS_location & outParameter3,
                                  GGS_string& outParameter4,
                                  GGS_entityPropertyMap & outParameter5,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) const ;
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
  public : static GGS_typeAltProductionsMap constructor_mapWithMapToOverride (C_Lexique & inLexique,
                                            const GGS_typeAltProductionsMap & inMapToOverride
                                            COMMA_LOCATION_ARGS) ;
  public : GGS_typeAltProductionsMap reader_overriddenMap (C_Lexique & inLexique
                                            COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeProductionAengendrer'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeProductionAengendrer : public GGS_typeEntityToGenerate {
//--- Default Constructor
  public : GGS_typeProductionAengendrer (void) ;
//--- 'description' reader
  public : GGS_string reader_description (C_Lexique & _inLexique
                                          COMMA_LOCATION_ARGS,
                                          const sint32 inIndentation = 0) const ;
//--- 'new' constructor
  public : static GGS_typeProductionAengendrer constructor_new (C_Lexique & inLexique,
                                const GGS_lstring & argument_0,
                                const GGS_typeAltProductionsMap & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3 COMMA_LOCATION_ARGS) ;
//--- operator ()
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeProductionAengendrer * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeProductionAengendrer * operator () (LOCATION_ARGS) const {
      return (cPtr_typeProductionAengendrer *) mPointer ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*

#include "include_typeParserInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'typeInstructionAppelNonTerminal'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeInstructionAppelNonTerminal.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeInstructionVerifSyntaxique'                   *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeInstructionVerifSyntaxique.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@typeListeBranchesInstructions'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeBranchesInstructions {
  private : elementOf_GGS_typeListeBranchesInstructions * mNextItem ;
    public : GGS_typeInstructionList  mInstructionList ;
  public : elementOf_GGS_typeListeBranchesInstructions (const GGS_typeInstructionList & ) ;

  public : inline elementOf_GGS_typeListeBranchesInstructions * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeListeBranchesInstructions (const elementOf_GGS_typeListeBranchesInstructions &) ;
  private : void operator = (const elementOf_GGS_typeListeBranchesInstructions &) ;
  public : inline ~elementOf_GGS_typeListeBranchesInstructions (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique,
                                          C_String & ioString,
                                          const sint32 inIndentation
                                          COMMA_LOCATION_ARGS) const ;
  friend class GGS_typeListeBranchesInstructions ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_select_instruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_select_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_repeat_instruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_repeat_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@L_parse_rewind_signature_list'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_parse_rewind_signature_list {
  private : elementOf_GGS_L_parse_rewind_signature_list * mNextItem ;
    public : GGS_L_ruleSyntaxSignature  mSignature ;
    public : GGS_location  mErrorLocation ;
  public : elementOf_GGS_L_parse_rewind_signature_list (const GGS_L_ruleSyntaxSignature & ,
                                const GGS_location & ) ;

  public : inline elementOf_GGS_L_parse_rewind_signature_list * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_parse_rewind_signature_list (const elementOf_GGS_L_parse_rewind_signature_list &) ;
  private : void operator = (const elementOf_GGS_L_parse_rewind_signature_list &) ;
  public : inline ~elementOf_GGS_L_parse_rewind_signature_list (void) {}
  public : void appendForListDescription (C_Lexique & _inLexique,
                                          C_String & ioString,
                                          const sint32 inIndentation
                                          COMMA_LOCATION_ARGS) const ;
  friend class GGS_L_parse_rewind_signature_list ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'C_parse_rewind_instruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_parse_rewind_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'C_parse_when_else_instruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_C_parse_when_else_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeNonterminalToGenerate'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeNonterminalToGenerate.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@typeAltProductionsMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeAltProductionsMap {
  public : GGS_typeListeTypesEtNomsArgMethode  aListeDeTypesEffectifs ;
  public : GGS_typeInstructionList  mAllInstructionsList ;
  public : GGS_L_ruleSyntaxSignature  mSyntaxSignature ;
  public : GGS_location  mEndOfInstructionListLocation ;
  public : GGS_string mReturnedEntityTypeName ;
  public : GGS_entityPropertyMap  mAllPropertiesMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeAltProductionsMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeAltProductionsMap (const GGS_lstring & inKey,
                                     const sint32 inIndex,
                                     const e_typeAltProductionsMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeAltProductionsMap * nextObject (void) const { return (elementOf_GGS_typeAltProductionsMap *) mNextItem ; }
  public : inline elementOf_GGS_typeAltProductionsMap * infObject (void) const { return (elementOf_GGS_typeAltProductionsMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeAltProductionsMap * supObject (void) const { return (elementOf_GGS_typeAltProductionsMap *) mSupPtr ; }
//--- Data member
  public : e_typeAltProductionsMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_Lexique & _inLexique,
                                         const sint32 inElementIndex,
                                         C_String & ioString,
                                         const sint32 inIndentation
                                         COMMA_LOCATION_ARGS) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeProductionAengendrer'                      *
//                                                                           *
//---------------------------------------------------------------------------*

#include "include_typeProductionAengendrer.h"

//---------------------------------------------------------------------------*

#endif
