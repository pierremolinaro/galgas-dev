//---------------------------------------------------------------------------*
//                                                                           *
//                        File 'parser_semantics.h'                          *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 25th, 2006, at 13h51'47"                       *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

#ifndef parser_semantics_DEFINED
#define parser_semantics_DEFINED

#include <string.h>

#include "galgas/C_GGS_Object.h"
#include "galgas/AC_galgas_io.h"
#include "galgas/GGS_location.h"
#include "galgas/GGS_lbool.h"
#include "galgas/GGS_lchar.h"
#include "galgas/GGS_lstring.h"
#include "galgas/GGS_ldouble.h"
#include "galgas/GGS_luint.h"
#include "galgas/GGS_lsint.h"
#include "galgas/GGS_stringset.h"
#include "galgas/AC_galgas_map.h"
#include "galgas/C_Lexique.h"

// Include imported semantics
#include "semantics_semantics.h"

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                          Class Predeclarations                            *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeParserInstruction ;
class GGS_typeInstructionAppelNonTerminal ;
class GGS_typeInstructionVerifSyntaxique ;
class GGS_typeListeBranchesInstructions ;
class GGS_C_select_instruction ;
class GGS_C_repeat_instruction ;
class GGS_L_parse_rewind_signature_list ;
class GGS_C_parse_rewind_instruction ;
class GGS_C_parse_when_else_instruction ;
class GGS_typeNonterminalToGenerate ;
class GGS_typeAltProductionsMap ;
class GGS_typeProductionAengendrer ;

class cPtr_typeParserInstruction ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_typeParserInstruction'                  *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeParserInstruction {
  protected : cPtr_typeParserInstruction * mPointer ;
  public : GGS_typeParserInstruction (void) ;
  public : GGS_typeParserInstruction (const GGS_typeParserInstruction &) ;
  public : virtual ~GGS_typeParserInstruction (void) ;
  public : void operator = (const GGS_typeParserInstruction &) ;
  public : inline bool isBuilt (void) const { return mPointer != NULL ; }
  public : inline bool isEqualTo (const GGS_typeParserInstruction & operand_) const {
    return mPointer == operand_.mPointer ;
  }
  public : void operator = (cPtr_typeParserInstruction * inSource) ;
  public : GGS_typeParserInstruction (cPtr_typeParserInstruction * inSource) ;
  public : inline cPtr_typeParserInstruction * getPtr (void) const {
    return mPointer ;
  }
  public : void drop_operation (void) ;
  public : GGS_string reader_description (void) const ;
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : cPtr_typeParserInstruction * operator () (LOCATION_ARGS) const ;
  #else
    public : inline cPtr_typeParserInstruction * operator () (LOCATION_ARGS) const { return mPointer ; }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@typeListeBranchesInstructions'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeBranchesInstructions ;

class GGS_typeListeBranchesInstructions {
  public : typedef elementOf_GGS_typeListeBranchesInstructions element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_typeListeBranchesInstructions (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_typeListeBranchesInstructions (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_typeListeBranchesInstructions (const GGS_typeListeBranchesInstructions &) ; // Copy constructor
  public : void operator = (const GGS_typeListeBranchesInstructions &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_typeListeBranchesInstructions (void) ;

//--- Constructor 'empty'
  public : static GGS_typeListeBranchesInstructions constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_typeInstructionsList & argument_0) ;
  protected : void internalAppendItem (const GGS_typeInstructionsList & argument_0) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  list '@L_parse_rewind_signature_list'                    *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_parse_rewind_signature_list ;

class GGS_L_parse_rewind_signature_list {
  public : typedef elementOf_GGS_L_parse_rewind_signature_list element_type ;
  private : element_type * mFirstItem ;
  private : element_type * mLastItem ;
  private : sint32 mListLength ;
  public : inline sint32 count (void) const {
    return mListLength ;
  }
  private : sint32 * mCountReference ;
  public : GGS_L_parse_rewind_signature_list (void) ; // Default Constructor
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : GGS_L_parse_rewind_signature_list (LOCATION_ARGS) ; // Constructor for debug mode
  #endif
  public : GGS_L_parse_rewind_signature_list (const GGS_L_parse_rewind_signature_list &) ; // Copy constructor
  public : void operator = (const GGS_L_parse_rewind_signature_list &) ; // Assignment operator
//--- Virtual destructor
  public : virtual ~GGS_L_parse_rewind_signature_list (void) ;

//--- Constructor 'empty'
  public : static GGS_L_parse_rewind_signature_list constructor_empty (LOCATION_ARGS) ;
//--- Reader 'description'
  public : GGS_string reader_description (void) const ;
//--- Get first item
  public : inline element_type * firstObject (void) const { return mFirstItem ; }
  public : void addAssign_operation (const GGS_L_ruleSyntaxSignature & argument_0,
                                const GGS_location & argument_1) ;
  protected : void internalAppendItem (const GGS_L_ruleSyntaxSignature & argument_0,
                                const GGS_location & argument_1) ;
  public : void insulateList (void) ;
  public : void emptyList (void) ;
  public : inline bool isBuilt (void) const {
    return mCountReference != NULL ;
  }
  public : void drop_operation (void) ;
  public : inline GGS_uint reader_length (void)  const {
    return GGS_uint (mCountReference != NULL, (uint32) mListLength) ;
  }
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       Map '@typeAltProductionsMap'                        *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeAltProductionsMap ;

class GGS_typeAltProductionsMap : public AC_galgas_map {
//--- Element Class
  public : typedef elementOf_GGS_typeAltProductionsMap element_type ;
//--- Get pointers
  public : inline element_type * rootObject (void) const { return (element_type *) mRoot ; }
  public : inline element_type * firstObject (void) const { return (element_type *) mFirstItem ; }
  public : inline element_type * lastObject (void) const { return (element_type *) mLastItem ; }
//--- Create a new element
  protected : virtual AC_galgas_map_element * new_element (const GGS_lstring & inKey, void * inInfo) ;
//--- Get object pointer (for method call)
  public : inline GGS_typeAltProductionsMap * operator () (UNUSED_LOCATION_ARGS) { return this ; }
//--- 'empty' constructor
  public : static GGS_typeAltProductionsMap constructor_empty (LOCATION_ARGS) ;
//--- Method used for duplicate a map
  protected : virtual void internalInsertForDuplication (AC_galgas_map_element * inPtr) ;
//--- 'insertKey' Insert Method
  public : void methode_insertKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                const GGS_typeListeTypesEtNomsArgMethode &  inParameter0,
                                const GGS_typeInstructionsList &  inParameter1,
                                const GGS_L_ruleSyntaxSignature &  inParameter2,
                                const GGS_location &  inParameter3,
                                const GGS_string&  inParameter4,
                                const GGS_entityPropertyMap &  inParameter5 COMMA_LOCATION_ARGS) ;
//--- 'searchKey' Search Method
  public : void methode_searchKey (C_Lexique & inLexique,
                                const GGS_lstring & inKey,
                                GGS_typeListeTypesEtNomsArgMethode   & outParameter0,
                                GGS_typeInstructionsList   & outParameter1,
                                GGS_L_ruleSyntaxSignature   & outParameter2,
                                GGS_location   & outParameter3,
                                GGS_string  & outParameter4,
                                GGS_entityPropertyMap   & outParameter5 COMMA_LOCATION_ARGS) ;
//--- Internal method for inserting an element
  protected : void insertElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  const GGS_typeListeTypesEtNomsArgMethode & inParameter0,
                                  const GGS_typeInstructionsList & inParameter1,
                                  const GGS_L_ruleSyntaxSignature & inParameter2,
                                  const GGS_location & inParameter3,
                                  const GGS_string& inParameter4,
                                  const GGS_entityPropertyMap & inParameter5,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
//--- Internal method for searching for an element
  protected : void searchElement (C_Lexique & inLexique,
                                  const char * inErrorMessage,
                                  const GGS_lstring & inKey,
                                  GGS_typeListeTypesEtNomsArgMethode & outParameter0,
                                  GGS_typeInstructionsList & outParameter1,
                                  GGS_L_ruleSyntaxSignature & outParameter2,
                                  GGS_location & outParameter3,
                                  GGS_string& outParameter4,
                                  GGS_entityPropertyMap & outParameter5,
                                  GGS_luint * outIndex
                                  COMMA_LOCATION_ARGS) ;
  public : GGS_string reader_description (void) const ;
} ;

//---------------------------------------------------------------------------*


#include "include_typeParserInstruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 class 'typeInstructionAppelNonTerminal'                   *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeInstructionAppelNonTerminal.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeInstructionAppelNonTerminal'             *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionAppelNonTerminal {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeInstructionAppelNonTerminal * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeExpressionList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeInstructionAppelNonTerminal * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeExpressionList & argument_1,
                                const GGS_lstring & argument_2,
                                const GGS_lstring & argument_3,
                                const GGS_bool& argument_4 COMMA_LOCATION_ARGS) {
      return new cPtr_typeInstructionAppelNonTerminal(argument_0,
                                argument_1,
                                argument_2,
                                argument_3,
                                argument_4 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'typeInstructionVerifSyntaxique'                   *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeInstructionVerifSyntaxique.h"

//---------------------------------------------------------------------------*
//                                                                           *
//            GALGAS class 'GGS_typeInstructionVerifSyntaxique'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeInstructionVerifSyntaxique {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeInstructionVerifSyntaxique * constructor_new (const GGS_lstring & argument_0,
                                const GGS_L_assignedVariables & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeInstructionVerifSyntaxique * constructor_new (const GGS_lstring & argument_0,
                                const GGS_L_assignedVariables & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_typeInstructionVerifSyntaxique(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@typeListeBranchesInstructions'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_typeListeBranchesInstructions {
  private : elementOf_GGS_typeListeBranchesInstructions * mNextItem ;
    public : GGS_typeInstructionsList  mInstructionsList ;
  public : elementOf_GGS_typeListeBranchesInstructions (const GGS_typeInstructionsList & ) ;

  public : inline elementOf_GGS_typeListeBranchesInstructions * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_typeListeBranchesInstructions (const elementOf_GGS_typeListeBranchesInstructions &) ;
  private : void operator = (const elementOf_GGS_typeListeBranchesInstructions &) ;
  public : inline ~elementOf_GGS_typeListeBranchesInstructions (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_typeListeBranchesInstructions ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_select_instruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_select_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_select_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_select_instruction {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_select_instruction * constructor_new (const GGS_typeListeBranchesInstructions & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_select_instruction * constructor_new (const GGS_typeListeBranchesInstructions & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_select_instruction(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                       class 'C_repeat_instruction'                        *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_repeat_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//                 GALGAS class 'GGS_C_repeat_instruction'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_repeat_instruction {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_repeat_instruction * constructor_new (const GGS_typeListeBranchesInstructions & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_repeat_instruction * constructor_new (const GGS_typeListeBranchesInstructions & argument_0,
                                const GGS_location & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_repeat_instruction(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//             Element of list '@L_parse_rewind_signature_list'              *
//                                                                           *
//---------------------------------------------------------------------------*

class elementOf_GGS_L_parse_rewind_signature_list {
  private : elementOf_GGS_L_parse_rewind_signature_list * mNextItem ;
    public : GGS_L_ruleSyntaxSignature  mSignature ;
    public : GGS_location  mErrorLocation ;
  public : elementOf_GGS_L_parse_rewind_signature_list (const GGS_L_ruleSyntaxSignature & ,
                                const GGS_location & ) ;

  public : inline elementOf_GGS_L_parse_rewind_signature_list * nextObject (void) const { return mNextItem ; }
  private : elementOf_GGS_L_parse_rewind_signature_list (const elementOf_GGS_L_parse_rewind_signature_list &) ;
  private : void operator = (const elementOf_GGS_L_parse_rewind_signature_list &) ;
  public : inline ~elementOf_GGS_L_parse_rewind_signature_list (void) {}
  public : void appendForListDescription (C_String & ioString) const ;
  friend class GGS_L_parse_rewind_signature_list ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'C_parse_rewind_instruction'                     *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_parse_rewind_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//              GALGAS class 'GGS_C_parse_rewind_instruction'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_parse_rewind_instruction {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_parse_rewind_instruction * constructor_new (const GGS_location & argument_0,
                                const GGS_typeListeBranchesInstructions & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_parse_rewind_instruction * constructor_new (const GGS_location & argument_0,
                                const GGS_typeListeBranchesInstructions & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_parse_rewind_instruction(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                  class 'C_parse_when_else_instruction'                    *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_C_parse_when_else_instruction.h"

//---------------------------------------------------------------------------*
//                                                                           *
//             GALGAS class 'GGS_C_parse_when_else_instruction'              *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_C_parse_when_else_instruction {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_C_parse_when_else_instruction * constructor_new (const GGS_L_expression_instructionsList_list & argument_0,
                                const GGS_typeInstructionsList & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_C_parse_when_else_instruction * constructor_new (const GGS_L_expression_instructionsList_list & argument_0,
                                const GGS_typeInstructionsList & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_C_parse_when_else_instruction(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                    class 'typeNonterminalToGenerate'                      *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeNonterminalToGenerate.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeNonterminalToGenerate'                *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeNonterminalToGenerate {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeNonterminalToGenerate * constructor_new (const GGS_lstring & argument_0,
                                const GGS_M_nonterminalSymbolAlts & argument_1 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeNonterminalToGenerate * constructor_new (const GGS_lstring & argument_0,
                                const GGS_M_nonterminalSymbolAlts & argument_1 COMMA_LOCATION_ARGS) {
      return new cPtr_typeNonterminalToGenerate(argument_0,
                                argument_1 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                 Element of map '@typeAltProductionsMap'                   *
//                                                                           *
//---------------------------------------------------------------------------*

class e_typeAltProductionsMap {
  public : GGS_typeListeTypesEtNomsArgMethode  aListeDeTypesEffectifs ;
  public : GGS_typeInstructionsList  mAllInstructionsList ;
  public : GGS_L_ruleSyntaxSignature  mSyntaxSignature ;
  public : GGS_location  mEndOfInstructionListLocation ;
  public : GGS_string mReturnedEntityTypeName ;
  public : GGS_entityPropertyMap  mAllPropertiesMap ;
} ;

//---------------------------------------------------------------------------*

class elementOf_GGS_typeAltProductionsMap : public AC_galgas_map_element {
//--- Constructor
  public : elementOf_GGS_typeAltProductionsMap (const GGS_lstring & inKey,
                                    const sint32 inIndex,
                                     const e_typeAltProductionsMap & inInfo) ;
//--- Get pointers
  public : inline elementOf_GGS_typeAltProductionsMap * nextObject (void) const { return (elementOf_GGS_typeAltProductionsMap *) mNextItem ; }
  public : inline elementOf_GGS_typeAltProductionsMap * infObject (void) const { return (elementOf_GGS_typeAltProductionsMap *) mInfPtr ; }
  public : inline elementOf_GGS_typeAltProductionsMap * supObject (void) const { return (elementOf_GGS_typeAltProductionsMap *) mSupPtr ; }
//--- Data member
  public : e_typeAltProductionsMap mInfo ;
//--- Method for 'description' reader
  public : void appendForMapDescription (C_String & ioString) const ;
} ;

//---------------------------------------------------------------------------*
//                                                                           *
//                     class 'typeProductionAengendrer'                      *
//                                                                           *
//---------------------------------------------------------------------------*


#include "include_typeProductionAengendrer.h"

//---------------------------------------------------------------------------*
//                                                                           *
//               GALGAS class 'GGS_typeProductionAengendrer'                 *
//                                                                           *
//---------------------------------------------------------------------------*

class GGS_typeProductionAengendrer {
  #ifndef DO_NOT_GENERATE_CHECKINGS
    public : static cPtr_typeProductionAengendrer * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeAltProductionsMap & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3 COMMA_LOCATION_ARGS) ;
  #else
    public : inline static cPtr_typeProductionAengendrer * constructor_new (const GGS_lstring & argument_0,
                                const GGS_typeAltProductionsMap & argument_1,
                                const GGS_string& argument_2,
                                const GGS_bool& argument_3 COMMA_LOCATION_ARGS) {
      return new cPtr_typeProductionAengendrer(argument_0,
                                argument_1,
                                argument_2,
                                argument_3 COMMA_THERE) ;
    }
  #endif
} ;

//---------------------------------------------------------------------------*

#endif
