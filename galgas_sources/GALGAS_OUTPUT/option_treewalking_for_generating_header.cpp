//---------------------------------------------------------------------------*
//                                                                           *
//           File 'option_treewalking_for_generating_header.cpp'             *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                      march 19th, 2007, at 21h2'21"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//#define TRACE_TREE_WALKING

//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "option_treewalking_for_generating_header.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "option_treewalking_for_generating_header.ggs", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Treewalking routine prototype declaration                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_optionComponentRoot (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName,
                                const GGS_commandLineOptionMap  & var_cas_inBoolOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inUIntOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inStringOptionMap) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Treewalking routine type declaration                    *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void
_treewalking_routine_optionComponentRoot_type (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName,
                                const GGS_commandLineOptionMap  & var_cas_inBoolOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inUIntOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inStringOptionMap) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Dispatcher tables                              *
//                                                                           *
//---------------------------------------------------------------------------*

static const uint32 _kSize_option_metamodel = 1 ;

static void * _kDispatcherFor_option_metamodel [_kSize_option_metamodel] = {
  (void *) _treewalking_routine_optionComponentRoot, // #0 @optionComponentRoot, defined in 'option_metamodel' metamodel
} ;

//---------------------------------------------------------------------------*

static C_TreewalkingDispacher _gDispatcherTable ;

//---------------------------------------------------------------------------*
//                                                                           *
//         'optionComponentRoot' treewalking routine implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_optionComponentRoot (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * /* _currentObject */,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName,
                                const GGS_commandLineOptionMap  & var_cas_inBoolOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inUIntOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inStringOptionMap) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @optionComponentRoot\n") ; fflush (stdout) ;
  #endif
  GGS_string var_cas_generatedUserZone2 ;
  var_cas_generatedUserZone2 = GGS_string (true, "") ;
  var_cas_generatedUserZone2.writeCstringConstant ("#ifndef ") ;
  var_cas_generatedUserZone2._dotAssign_operation (var_cas_inOptionComponentName) ;
  var_cas_generatedUserZone2.writeCstringConstant ("_0_DEFINED\n"
    "#define ") ;
  var_cas_generatedUserZone2._dotAssign_operation (var_cas_inOptionComponentName) ;
  var_cas_generatedUserZone2.writeCstringConstant ("_0_DEFINED\n"
    "#include \"command_line_interface/AC_CLI_Options.h\"\n\n") ;
  var_cas_generatedUserZone2._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
  GGS_string var_cas_generatedUserZone3 ;
  var_cas_generatedUserZone3 = GGS_string (true, "") ;
  var_cas_generatedUserZone3.modifier_setCapacity (_inLexique, GGS_uint (true, 5000U) COMMA_SOURCE_FILE_AT_LINE (42)) ;
  var_cas_generatedUserZone3._dotAssign_operation (GGS_string::constructor_CppTitleComment (_inLexique, GGS_string (true, "Command Line Options definitions class") COMMA_HERE)) ;
  var_cas_generatedUserZone3.writeCstringConstant ("class ") ;
  var_cas_generatedUserZone3._dotAssign_operation (var_cas_inOptionComponentName) ;
  var_cas_generatedUserZone3.writeCstringConstant (" : public AC_CLI_Options {\n"
    "//--- Constructor\n"
    "  public : galgas_cli_options (void) ;\n"
    "\n"
    "//--- Boolean Command Line Interface Options\n"
    "  public : virtual sint32 getBoolOptionsCount (void) const ;\n\n"
    "  public : virtual bool\n"
    "  getBoolOptionValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual void\n"
    "  setBoolOptionValue (const sint32 inIndex, const bool inValue) ;\n\n"
    "  public : virtual char\n"
    "  getBoolOptionChar (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getBoolOptionString (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getBoolOptionDescription (const sint32 inIndex) const ;\n\n"
    "  public : virtual bool\n"
    "  boolOptionValueFromKeys (const char * inModuleName,\n"
    "                           const char * inOptionName,\n"
    "                           bool * outFound) const ;\n\n"
    "\n"
    "//--- Unsigned integer Command Line Interface Options\n"
    "  public : virtual sint32 getUintOptionsCount (void) const ;\n\n"
    "  public : virtual uint32\n"
    "  getUintOptionValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual uint32\n"
    "  getUintOptionDefaultValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual void\n"
    "  setUintOptionValue (const sint32 inIndex, const uint32 inValue) ;\n\n"
    "  public : virtual char\n"
    "  getUintOptionChar (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getUintOptionString (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getUintOptionDescription (const sint32 inIndex) const ;\n\n"
    "  public : virtual uint32\n"
    "  uintOptionValueFromKeys (const char * inModuleName,\n"
    "                           const char * inOptionName,\n"
    "                           bool * outFound) const ;\n"
    "\n"
    "//--- String Command Line Interface Options\n"
    "  public : virtual sint32 getStringOptionsCount (void) const ;\n\n"
    "  public : virtual C_String\n"
    "  getStringOptionValue (const sint32 inIndex) const ;\n\n"
    "  public : virtual void\n"
    "  setStringOptionValue (const sint32 inIndex, const C_String & inValue) ;\n\n"
    "  public : virtual char\n"
    "  getStringOptionChar (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getStringOptionString (const sint32 inIndex) const ;\n\n"
    "  public : virtual const char *\n"
    "  getStringOptionDescription (const sint32 inIndex) const ;\n\n"
    "  public : virtual C_String\n"
    "  stringOptionValueFromKeys (const char * inModuleName,\n"
    "                             const char * inOptionName,\n"
    "                             bool * outFound) const ;\n"
    "\n"
    "//--- Private arraies : current options values\n"
    "  private : bool mBoolOptionValues [") ;
  var_cas_generatedUserZone3._dotAssign_operation (var_cas_inBoolOptionMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (103))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (103)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (103))) ;
  var_cas_generatedUserZone3.writeCstringConstant ("] ;\n"
    "  private : uint32 mUintOptionValues [") ;
  var_cas_generatedUserZone3._dotAssign_operation (var_cas_inUIntOptionMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (104))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (104)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (104))) ;
  var_cas_generatedUserZone3.writeCstringConstant ("] ;\n"
    "  private : C_String mStringOptionValues [") ;
  var_cas_generatedUserZone3._dotAssign_operation (var_cas_inStringOptionMap.reader_count (_inLexique COMMA_SOURCE_FILE_AT_LINE (105))._add_operation (_inLexique, GGS_uint (true, 1U) COMMA_SOURCE_FILE_AT_LINE (105)).reader_string (_inLexique COMMA_SOURCE_FILE_AT_LINE (105))) ;
  var_cas_generatedUserZone3.writeCstringConstant ("] ;\n"
    "  private : TC_UniqueArray <C_String> mStringValue ;\n"
    "} ;\n\n") ;
  var_cas_generatedUserZone3._dotAssign_operation (GGS_string::constructor_CppLineComment (_inLexique COMMA_HERE)) ;
  var_cas_generatedUserZone3.writeCstringConstant ("#endif\n") ;
  GGS_string::class_method_generateFile (_inLexique, var_cas_inStartDirectory, ((var_cas_inOptionComponentName) + (GGS_string (true, ".h"))), GGS_string (true, "//"), GGS_string (true, "\n\n"), var_cas_generatedUserZone2, GGS_string (true, "\n\n"), var_cas_generatedUserZone3 COMMA_SOURCE_FILE_AT_LINE (114)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Build Dispatcher Tree                            *
//                                                                           *
//---------------------------------------------------------------------------*

static void _build_dispacher_tree (void) {
  _gDispatcherTable.enterTable (_metamodel_index_for_option_metamodel (),
                                _kSize_option_metamodel,
                                _kDispatcherFor_option_metamodel
                                COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                               Root routine                                *
//                                                                           *
//---------------------------------------------------------------------------*

void
_walk_throught_option_treewalking_for_generating_header (C_Compiler & _inLexique,
                                const GGS_optionComponentRoot & _rootObject,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName,
                                const GGS_commandLineOptionMap  & var_cas_inBoolOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inUIntOptionMap,
                                const GGS_commandLineOptionMap  & var_cas_inStringOptionMap) {
  if (_rootObject._isBuilt (HERE)) {
    if (! _gDispatcherTable.isInited ()) {
      _build_dispacher_tree () ;
    }
    _treewalking_routine_optionComponentRoot_type * _f = (_treewalking_routine_optionComponentRoot_type *) _gDispatcherTable.entry (_rootObject.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _rootObject.getPtr (), var_cas_inStartDirectory, var_cas_inOptionComponentName, var_cas_inBoolOptionMap, var_cas_inUIntOptionMap, var_cas_inStringOptionMap) ;
  }else{
  }
}

//---------------------------------------------------------------------------*

