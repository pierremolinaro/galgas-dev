//---------------------------------------------------------------------------*
//                                                                           *
//           File 'option_treewalking_for_generating_header.cpp'             *
//         Generated by version GALGAS_BETA_VERSION (LL(1) grammar)          *
//                       march 18th, 2007, at 20h0'1"                        *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//#define TRACE_TREE_WALKING

//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if LIBPM_VERSION != THE_LIBPM_VERSION
  #error "This file has been compiled with a version of GALGAS different than the version of libpm"
#endif

#include "option_treewalking_for_generating_header.h"
#include "utilities/MF_MemoryControl.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  static const char gGGSsourceFile [] = "option_treewalking_for_generating_header.ggs" ;
  #define SOURCE_FILE_AT_LINE(line) , gGGSsourceFile, line
#else
  #define SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//                Treewalking routine prototype declaration                  *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_optionComponentRoot (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName) ;

static void
_treewalking_routine_commandLineOption (C_Compiler & _inLexique,
                                const cPtr_commandLineOption * _currentObject) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                   Treewalking routine type declaration                    *
//                                                                           *
//---------------------------------------------------------------------------*

typedef void
_treewalking_routine_optionComponentRoot_type (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName) ;

typedef void
_treewalking_routine_commandLineOption_type (C_Compiler & _inLexique,
                                const cPtr_commandLineOption * _currentObject) ;

//---------------------------------------------------------------------------*
//                                                                           *
//                            Dispatcher tables                              *
//                                                                           *
//---------------------------------------------------------------------------*

static const uint32 _kSize_option_metamodel = 2 ;

static void * _kDispatcherFor_option_metamodel [_kSize_option_metamodel] = {
  (void *) _treewalking_routine_optionComponentRoot, // #0 @optionComponentRoot, defined in 'option_metamodel' metamodel
  (void *) _treewalking_routine_commandLineOption, // #1 @commandLineOption, defined in 'option_metamodel' metamodel
} ;

//---------------------------------------------------------------------------*

static C_TreewalkingDispacher _gDispatcherTable ;

//---------------------------------------------------------------------------*
//                                                                           *
//         'optionComponentRoot' treewalking routine implementation          *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_optionComponentRoot (C_Compiler & _inLexique,
                                const cPtr_optionComponentRoot * _currentObject,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @optionComponentRoot\n") ; fflush (stdout) ;
  #endif
  GGS_string var_cas_generatedUserZone2 ;
  var_cas_generatedUserZone2 = GGS_string (true, "a\n") ;
  GGS_string var_cas_generatedUserZone3 ;
  var_cas_generatedUserZone3 = GGS_string (true, "b\n") ;
  macroValidPointer (_currentObject) ;
  { GGS_commandLineOptionList::element_type * _ptr = _currentObject->mOptions.firstObject () ;
    while (_ptr != NULL) {
      _treewalking_routine_commandLineOption_type * _f = (_treewalking_routine_commandLineOption_type *) _gDispatcherTable.entry (_ptr COMMA_HERE) ;
      (* _f) (_inLexique, _ptr) ;
      _ptr = _ptr->nextObject () ;
    }
  }
  GGS_string::class_method_generateFile (_inLexique, var_cas_inStartDirectory, ((var_cas_inOptionComponentName) + (GGS_string (true, ".h"))), GGS_string (true, "//"), GGS_string (true, "\n\n"), var_cas_generatedUserZone2, GGS_string (true, "\n\n"), var_cas_generatedUserZone3 SOURCE_FILE_AT_LINE (11)) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//          'commandLineOption' treewalking routine implementation           *
//                                                                           *
//---------------------------------------------------------------------------*

static void
_treewalking_routine_commandLineOption (C_Compiler &,
                                const cPtr_commandLineOption * /* _currentObject */) {
  #ifdef TRACE_TREE_WALKING
    printf ("TREE WALKING @commandLineOption\n") ; fflush (stdout) ;
  #endif
}

//---------------------------------------------------------------------------*
//                                                                           *
//                          Build Dispatcher Tree                            *
//                                                                           *
//---------------------------------------------------------------------------*

static void _build_dispacher_tree (void) {
  _gDispatcherTable.enterTable (_metamodel_index_for_option_metamodel (),
                                _kSize_option_metamodel,
                                _kDispatcherFor_option_metamodel
                                COMMA_HERE) ;
}

//---------------------------------------------------------------------------*
//                                                                           *
//                               Root routine                                *
//                                                                           *
//---------------------------------------------------------------------------*

void
_walk_throught_option_treewalking_for_generating_header (C_Compiler & _inLexique,
                                const GGS_optionComponentRoot & _rootObject,
                                const GGS_string & var_cas_inStartDirectory,
                                const GGS_string & var_cas_inOptionComponentName) {
  if (_rootObject._isBuilt ()) {
    if (! _gDispatcherTable.isInited ()) {
      _build_dispacher_tree () ;
    }
    _treewalking_routine_optionComponentRoot_type * _f = (_treewalking_routine_optionComponentRoot_type *) _gDispatcherTable.entry (_rootObject.getPtr () COMMA_HERE) ;
    (* _f) (_inLexique, _rootObject.getPtr (), var_cas_inStartDirectory, var_cas_inOptionComponentName) ;
  }else{
  }
}

//---------------------------------------------------------------------------*

