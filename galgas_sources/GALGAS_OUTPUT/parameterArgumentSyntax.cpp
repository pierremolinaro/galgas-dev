//---------------------------------------------------------------------------*
//                                                                           *
//                    File 'parameterArgumentSyntax.cpp'                     *
//                 Generated by version GALGAS_BETA_VERSION                  *
//                     october 28th, 2010, at 23h18'58"                      *
//                                                                           *
//---------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//---------------------------------------------------------------------------*

#include "version_libpm.h"
#if CURRENT_LIBPM_VERSION != VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER
  #error "This file has been compiled with a version of GALGAS that uses libpm version VERSION_OF_LIBPM_USED_BY_GALGAS_COMPILER, different than the current version (CURRENT_LIBPM_VERSION) of libpm"
#endif

//---------------------------------------------------------------------------*

#include <typeinfo>
#include "utilities/MF_MemoryControl.h"
#include "files/C_TextFileWrite.h"
#include "galgas2/C_galgas_CLI_Options.h"
#include "parameterArgumentSyntax.h"

//---------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "parameterArgumentSyntax.gSyntax", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif


//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'formal_parameter_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void parameterArgumentSyntax::rule_parameterArgumentSyntax_formal_5F_parameter_5F_list_i0_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_formalParameterListAST  &var_cas_outFormalParameterList) {
  var_cas_outFormalParameterList = GGS_formalParameterListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_0 = true ;
    while (syntaxRepeat_0) {
      switch (select_parameterArgumentSyntax_0 (inLexique)) {
        case 2 : {
          GGS_formalArgumentPassingModeAST var_cas_mFormalParameterPassingMode ;
          switch (select_parameterArgumentSyntax_1 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
              var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingModeAST::constructor_argumentIn (inLexique COMMA_SOURCE_FILE_AT_LINE (56)) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F__3F_) COMMA_HERE) ;
              var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingModeAST::constructor_argumentConstantIn (inLexique COMMA_SOURCE_FILE_AT_LINE (59)) ;
              } break ;
            case 3 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F__21_) COMMA_HERE) ;
              var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingModeAST::constructor_argumentInOut (inLexique COMMA_SOURCE_FILE_AT_LINE (62)) ;
              } break ;
            case 4 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
              var_cas_mFormalParameterPassingMode = GGS_formalArgumentPassingModeAST::constructor_argumentOut (inLexique COMMA_SOURCE_FILE_AT_LINE (65)) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_mFormalParameterTypeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mFormalParameterTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
          GGS_bool var_cas_mIsUnused ;
          switch (select_parameterArgumentSyntax_2 (inLexique)) {
            case 1 : {
              var_cas_mIsUnused = GGS_bool (false) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
              var_cas_mIsUnused = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_mFormalParameterName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mFormalParameterName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_outFormalParameterList.addAssign_operation (var_cas_mFormalParameterPassingMode, var_cas_mFormalParameterTypeName, var_cas_mFormalParameterName, var_cas_mIsUnused) ;
          } break ;
        default :
          syntaxRepeat_0 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//        Implementation of production rule 'actual_parameter_list'          *
//                                                                           *
//---------------------------------------------------------------------------*

void parameterArgumentSyntax::rule_parameterArgumentSyntax_actual_5F_parameter_5F_list_i1_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_actualParameterListAST  &var_cas_outActualParameterList) {
  var_cas_outActualParameterList = GGS_actualParameterListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_3 = true ;
    while (syntaxRepeat_3) {
      switch (select_parameterArgumentSyntax_3 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
          const GGS_location  var_cas_qualifierLocation = GGS_location (inLexique) ;
          switch (select_parameterArgumentSyntax_4 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              var_cas_outActualParameterList.addAssign_operation (GGS_inputJokerActualParameterAST ::constructor_new (inLexique, var_cas_qualifierLocation, GGS_uint (0U) COMMA_SOURCE_FILE_AT_LINE (99))) ;
              } break ;
            case 2 : {
              GGS_luint  var_cas_count ;
              inLexique.assignFromAttribute_uint_33__32_value (var_cas_count) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer) COMMA_HERE) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              GGS_uint  var_cas_n = var_cas_count.reader_uint (inLexique COMMA_SOURCE_FILE_AT_LINE (104)) ;
              const GGS_bool cond_4909 = (var_cas_n).operator_isEqual (GGS_uint (0U)) ;
              if (cond_4909.isBuiltAndTrue ()) {
                var_cas_count.reader_location (inLexique COMMA_HERE).signalGGSSemanticError (inLexique, GGS_string ("the count value should be > 0") COMMA_SOURCE_FILE_AT_LINE (107)) ;
              }else if (cond_4909.isBuiltAndFalse ()) {
                GGS_uint _variant_5075 = var_cas_n ;
                GGS_bool _condition_5075 (_variant_5075.isBuilt (), true) ;
                while (_condition_5075.isBuiltAndTrue ()) {
                  _condition_5075 = (var_cas_n).operator_strictSup (GGS_uint (0U)) ;
                  if (_condition_5075.isBuiltAndTrue ()) {
                    if (_variant_5075.uintValue () == 0) {
                      inLexique.onTheFlyRunTimeError ("loop variant error" COMMA_SOURCE_FILE_AT_LINE (112)) ;
                      _condition_5075 = GGS_bool (false) ;
                    }else{
                      _variant_5075.decrement_operation (inLexique COMMA_HERE) ;
                      var_cas_outActualParameterList.addAssign_operation (GGS_inputJokerActualParameterAST ::constructor_new (inLexique, var_cas_qualifierLocation, var_cas_n COMMA_SOURCE_FILE_AT_LINE (110))) ;
                      var_cas_n.decrement_operation (inLexique COMMA_SOURCE_FILE_AT_LINE (111)) ;
                    }
                  }
                }
              }
              } break ;
            default :
              break ;
          }
          } break ;
        case 3 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21_) COMMA_HERE) ;
          const GGS_location  var_cas_qualifierLocation = GGS_location (inLexique) ;
          GGS_semanticExpressionAST  var_cas_e ;
          nt_expression_ (inLexique, var_cas_e) ;
          const GGS_location  var_cas_endOfExpressionLocation = GGS_location (inLexique) ;
          var_cas_outActualParameterList.addAssign_operation (GGS_outputActualParameterAST ::constructor_new (inLexique, var_cas_qualifierLocation, var_cas_e, var_cas_endOfExpressionLocation COMMA_SOURCE_FILE_AT_LINE (121))) ;
          } break ;
        case 4 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__21__3F_) COMMA_HERE) ;
          const GGS_location  var_cas_qualifierLocation = GGS_location (inLexique) ;
          GGS_lstring  var_cas_outputInputActualParameterName ;
          inLexique.assignFromAttribute_tokenString (var_cas_outputInputActualParameterName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          GGS_lstringlist  var_cas_structAttributeList = GGS_lstringlist ::constructor_emptyList () ;
          { bool syntaxRepeat_5 = true ;
            while (syntaxRepeat_5) {
              switch (select_parameterArgumentSyntax_5 (inLexique)) {
                case 2 : {
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2D__3E_) COMMA_HERE) ;
                  GGS_lstring  var_cas_structAttributeName ;
                  inLexique.assignFromAttribute_tokenString (var_cas_structAttributeName) ;
                  inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
                  var_cas_structAttributeList.addAssign_operation (var_cas_structAttributeName) ;
                  } break ;
                default :
                  syntaxRepeat_5 = false ;
                  break ;
              }
            }
          }
          var_cas_outActualParameterList.addAssign_operation (GGS_outputInputActualParameterAST ::constructor_new (inLexique, var_cas_qualifierLocation, var_cas_outputInputActualParameterName, var_cas_structAttributeList COMMA_SOURCE_FILE_AT_LINE (138))) ;
          } break ;
        case 5 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
          const GGS_location  var_cas_qualifierLocation = GGS_location (inLexique) ;
          GGS_lstring  var_cas_inputActualParameterName ;
          inLexique.assignFromAttribute_tokenString (var_cas_inputActualParameterName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_outActualParameterList.addAssign_operation (GGS_inputActualParameterAST ::constructor_new (inLexique, var_cas_qualifierLocation, var_cas_inputActualParameterName COMMA_SOURCE_FILE_AT_LINE (154))) ;
          } break ;
        default :
          syntaxRepeat_3 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'formal_input_parameter_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void parameterArgumentSyntax::rule_parameterArgumentSyntax_formal_5F_input_5F_parameter_5F_list_i2_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_formalInputParameterListAST  &var_cas_outFormalInputParameterList) {
  var_cas_outFormalInputParameterList = GGS_formalInputParameterListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_6 = true ;
    while (syntaxRepeat_6) {
      switch (select_parameterArgumentSyntax_6 (inLexique)) {
        case 2 : {
          GGS_bool var_cas_isConstant ;
          switch (select_parameterArgumentSyntax_7 (inLexique)) {
            case 1 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
              var_cas_isConstant = GGS_bool (false) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F__3F_) COMMA_HERE) ;
              var_cas_isConstant = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_mFormalParameterTypeName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mFormalParameterTypeName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
          GGS_bool var_cas_mIsUnused ;
          switch (select_parameterArgumentSyntax_8 (inLexique)) {
            case 1 : {
              var_cas_mIsUnused = GGS_bool (false) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_unused) COMMA_HERE) ;
              var_cas_mIsUnused = GGS_bool (true) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_mFormalParameterName ;
          inLexique.assignFromAttribute_tokenString (var_cas_mFormalParameterName) ;
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
          var_cas_outFormalInputParameterList.addAssign_operation (var_cas_mFormalParameterTypeName, var_cas_mFormalParameterName, var_cas_mIsUnused, var_cas_isConstant) ;
          } break ;
        default :
          syntaxRepeat_6 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*
//                                                                           *
//     Implementation of production rule 'actual_input_parameter_list'       *
//                                                                           *
//---------------------------------------------------------------------------*

void parameterArgumentSyntax::rule_parameterArgumentSyntax_actual_5F_input_5F_parameter_5F_list_i3_ (C_Lexique_galgas_5F_scanner & inLexique,
                                GGS_actualInputParameterListAST  &var_cas_outActualInputParameterList) {
  var_cas_outActualInputParameterList = GGS_actualInputParameterListAST ::constructor_emptyList () ;
  { bool syntaxRepeat_9 = true ;
    while (syntaxRepeat_9) {
      switch (select_parameterArgumentSyntax_9 (inLexique)) {
        case 2 : {
          inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__3F_) COMMA_HERE) ;
          GGS_lstring  var_cas_mActualParameterTypeName ;
          switch (select_parameterArgumentSyntax_10 (inLexique)) {
            case 1 : {
              var_cas_mActualParameterTypeName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (213)) ;
              } break ;
            case 2 : {
              inLexique.assignFromAttribute_tokenString (var_cas_mActualParameterTypeName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_type_5F_name) COMMA_HERE) ;
              } break ;
            default :
              break ;
          }
          GGS_lstring  var_cas_mActualParameterName ;
          switch (select_parameterArgumentSyntax_11 (inLexique)) {
            case 1 : {
              inLexique.assignFromAttribute_tokenString (var_cas_mActualParameterName) ;
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken_identifier) COMMA_HERE) ;
              } break ;
            case 2 : {
              inLexique.acceptTerminal (ACCEPT_TERMINAL (C_Lexique_galgas_5F_scanner::kToken__2A_) COMMA_HERE) ;
              var_cas_mActualParameterName = GGS_lstring ::constructor_new (inLexique, GGS_string (""), GGS_location (inLexique) COMMA_SOURCE_FILE_AT_LINE (222)) ;
              } break ;
            default :
              break ;
          }
          var_cas_outActualInputParameterList.addAssign_operation (var_cas_mActualParameterTypeName, var_cas_mActualParameterName) ;
          } break ;
        default :
          syntaxRepeat_9 = false ;
          break ;
      }
    }
  }
}

//---------------------------------------------------------------------------*

