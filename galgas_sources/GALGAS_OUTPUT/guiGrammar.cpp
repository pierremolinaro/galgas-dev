//-----------------------------------------------------------------------------*
//                                                                             *
//                           File 'guiGrammar.cpp'                             *
//                         Generated by version 2.6.0                          *
//                       june 27th, 2014, at 19h23'14"                         *
//                                                                             *
//-----------------------------------------------------------------------------*

//--- START OF USER ZONE 1


//--- END OF USER ZONE 1

//-----------------------------------------------------------------------------*

#include "utilities/MF_MemoryControl.h"
#include "galgas2/C_galgas_CLI_Options.h"

#include "files/C_FileManager.h"

//-----------------------------------------------------------------------------*

#include "guiGrammar.h"

//-----------------------------------------------------------------------------*

#ifndef DO_NOT_GENERATE_CHECKINGS
  #define SOURCE_FILE_AT_LINE(line) "", line
  #define COMMA_SOURCE_FILE_AT_LINE(line) , SOURCE_FILE_AT_LINE(line)
#else
  #define SOURCE_FILE_AT_LINE(line) 
  #define COMMA_SOURCE_FILE_AT_LINE(line) 
#endif

//--- START OF USER ZONE 2


//--- END OF USER ZONE 2

//-----------------------------------------------------------------------------*
//                                                                             *
//                   N O N    T E R M I N A L    N A M E S                     *
//                                                                             *
//-----------------------------------------------------------------------------*

static const char * gNonTerminalNames [10] = {
  "<gui_component_start_symbol>",// Index 0
  "<select_guiSyntax_0>",// Index 1
  "<select_guiSyntax_1>",// Index 2
  "<select_guiSyntax_2>",// Index 3
  "<select_guiSyntax_3>",// Index 4
  "<select_guiSyntax_4>",// Index 5
  "<select_guiSyntax_5>",// Index 6
  "<select_guiSyntax_6>",// Index 7
  "<select_guiSyntax_7>",// Index 8
  "<>"// Index 9
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//            S L R    A N A L Y Z E R    A C T I O N    T A B L E             *
//                                                                             *
//-----------------------------------------------------------------------------*

// Action tables handle shift and reduce actions ;
//  - a shift action is (terminal_symbol, SHIFT (n)) : if shifts to state n ;
//  - the accept action is (terminal_symbol, ACCEPT) ;
//  - a reduce action is (terminal_symbol, REDUCE (n)) ; if reduces to state n.

#define SHIFT(a) ((a) + 2)
#define REDUCE(a) (-(a) - 1)
#define ACCEPT (1)
#define END (-1)

static const int16_t gActionTable [] = {
// State S0 (index = 0)
  C_Lexique_galgas_5F_scanner::kToken_gui, SHIFT (1)
, END
// State S1 (index = 3)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (3)
, END
// State S2 (index = 6)
, C_Lexique_galgas_5F_scanner::kToken_, ACCEPT
, END
// State S3 (index = 9)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (4)
, END
// State S4 (index = 12)
, C_Lexique_galgas_5F_scanner::kToken__3A_, SHIFT (5)
, END
// State S5 (index = 15)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (6)
, C_Lexique_galgas_5F_scanner::kToken_with, SHIFT (7)
, C_Lexique_galgas_5F_scanner::kToken_end, REDUCE (1)
, END
// State S6 (index = 22)
, C_Lexique_galgas_5F_scanner::kToken__3A_, SHIFT (9)
, END
// State S7 (index = 25)
, C_Lexique_galgas_5F_scanner::kToken_option, SHIFT (10)
, C_Lexique_galgas_5F_scanner::kToken_lexique, SHIFT (11)
, END
// State S8 (index = 30)
, C_Lexique_galgas_5F_scanner::kToken_end, SHIFT (13)
, END
// State S9 (index = 33)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (14)
, END
// State S10 (index = 36)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (15)
, END
// State S11 (index = 39)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (16)
, END
// State S12 (index = 42)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (6)
, C_Lexique_galgas_5F_scanner::kToken_with, SHIFT (7)
, C_Lexique_galgas_5F_scanner::kToken_end, REDUCE (1)
, END
// State S13 (index = 49)
, C_Lexique_galgas_5F_scanner::kToken_gui, SHIFT (18)
, END
// State S14 (index = 52)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (19)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (4)
, END
// State S15 (index = 57)
, C_Lexique_galgas_5F_scanner::kToken__3B_, SHIFT (21)
, END
// State S16 (index = 60)
, C_Lexique_galgas_5F_scanner::kToken__7B_, SHIFT (22)
, END
// State S17 (index = 63)
, C_Lexique_galgas_5F_scanner::kToken_end, REDUCE (3)
, END
// State S18 (index = 66)
, C_Lexique_galgas_5F_scanner::kToken__3B_, SHIFT (23)
, END
// State S19 (index = 69)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (19)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (4)
, END
// State S20 (index = 74)
, C_Lexique_galgas_5F_scanner::kToken__3B_, SHIFT (25)
, END
// State S21 (index = 77)
, C_Lexique_galgas_5F_scanner::kToken_identifier, REDUCE (6)
, C_Lexique_galgas_5F_scanner::kToken_with, REDUCE (6)
, C_Lexique_galgas_5F_scanner::kToken_end, REDUCE (6)
, END
// State S22 (index = 84)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (26)
, C_Lexique_galgas_5F_scanner::kToken_label, SHIFT (27)
, C_Lexique_galgas_5F_scanner::kToken__7D_, REDUCE (8)
, END
// State S23 (index = 91)
, C_Lexique_galgas_5F_scanner::kToken_, REDUCE (0)
, END
// State S24 (index = 94)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (5)
, END
// State S25 (index = 97)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (6)
, C_Lexique_galgas_5F_scanner::kToken_with, SHIFT (7)
, C_Lexique_galgas_5F_scanner::kToken_end, REDUCE (1)
, END
// State S26 (index = 104)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (30)
, C_Lexique_galgas_5F_scanner::kToken__3A_, SHIFT (31)
, END
// State S27 (index = 109)
, C_Lexique_galgas_5F_scanner::kToken__2A_, SHIFT (32)
, C_Lexique_galgas_5F_scanner::kToken_terminal, REDUCE (12)
, END
// State S28 (index = 114)
, C_Lexique_galgas_5F_scanner::kToken__7D_, SHIFT (34)
, END
// State S29 (index = 117)
, C_Lexique_galgas_5F_scanner::kToken_end, REDUCE (2)
, END
// State S30 (index = 120)
, C_Lexique_galgas_5F_scanner::kToken__3A_, SHIFT (35)
, END
// State S31 (index = 123)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (36)
, END
// State S32 (index = 126)
, C_Lexique_galgas_5F_scanner::kToken_terminal, REDUCE (13)
, END
// State S33 (index = 129)
, C_Lexique_galgas_5F_scanner::kToken_terminal, SHIFT (37)
, END
// State S34 (index = 132)
, C_Lexique_galgas_5F_scanner::kToken_identifier, REDUCE (7)
, C_Lexique_galgas_5F_scanner::kToken_with, REDUCE (7)
, C_Lexique_galgas_5F_scanner::kToken_end, REDUCE (7)
, END
// State S35 (index = 139)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (38)
, END
// State S36 (index = 142)
, C_Lexique_galgas_5F_scanner::kToken__3B_, SHIFT (39)
, END
// State S37 (index = 145)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (16)
, C_Lexique_galgas_5F_scanner::kToken__2D_, SHIFT (40)
, C_Lexique_galgas_5F_scanner::kToken__28_, SHIFT (41)
, C_Lexique_galgas_5F_scanner::kToken__2C_, REDUCE (16)
, END
// State S38 (index = 154)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (43)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (19)
, END
// State S39 (index = 159)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (26)
, C_Lexique_galgas_5F_scanner::kToken_label, SHIFT (27)
, C_Lexique_galgas_5F_scanner::kToken__7D_, REDUCE (8)
, END
// State S40 (index = 166)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (17)
, C_Lexique_galgas_5F_scanner::kToken__2C_, REDUCE (17)
, END
// State S41 (index = 171)
, C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer, SHIFT (46)
, END
// State S42 (index = 174)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (14)
, C_Lexique_galgas_5F_scanner::kToken__2C_, SHIFT (47)
, END
// State S43 (index = 179)
, C_Lexique_galgas_5F_scanner::kToken_literal_5F_string, SHIFT (43)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (19)
, END
// State S44 (index = 184)
, C_Lexique_galgas_5F_scanner::kToken__3B_, SHIFT (50)
, END
// State S45 (index = 187)
, C_Lexique_galgas_5F_scanner::kToken__7D_, REDUCE (11)
, END
// State S46 (index = 190)
, C_Lexique_galgas_5F_scanner::kToken__2C_, SHIFT (51)
, END
// State S47 (index = 193)
, C_Lexique_galgas_5F_scanner::kToken_terminal, SHIFT (52)
, END
// State S48 (index = 196)
, C_Lexique_galgas_5F_scanner::kToken__3B_, SHIFT (53)
, END
// State S49 (index = 199)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (20)
, END
// State S50 (index = 202)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (26)
, C_Lexique_galgas_5F_scanner::kToken_label, SHIFT (27)
, C_Lexique_galgas_5F_scanner::kToken__7D_, REDUCE (8)
, END
// State S51 (index = 209)
, C_Lexique_galgas_5F_scanner::kToken_unsigned_5F_literal_5F_integer, SHIFT (55)
, END
// State S52 (index = 212)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (16)
, C_Lexique_galgas_5F_scanner::kToken__2D_, SHIFT (40)
, C_Lexique_galgas_5F_scanner::kToken__28_, SHIFT (41)
, C_Lexique_galgas_5F_scanner::kToken__2C_, REDUCE (16)
, END
// State S53 (index = 221)
, C_Lexique_galgas_5F_scanner::kToken_identifier, SHIFT (26)
, C_Lexique_galgas_5F_scanner::kToken_label, SHIFT (27)
, C_Lexique_galgas_5F_scanner::kToken__7D_, REDUCE (8)
, END
// State S54 (index = 228)
, C_Lexique_galgas_5F_scanner::kToken__7D_, REDUCE (10)
, END
// State S55 (index = 231)
, C_Lexique_galgas_5F_scanner::kToken__29_, SHIFT (58)
, END
// State S56 (index = 234)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (14)
, C_Lexique_galgas_5F_scanner::kToken__2C_, SHIFT (47)
, END
// State S57 (index = 239)
, C_Lexique_galgas_5F_scanner::kToken__7D_, REDUCE (9)
, END
// State S58 (index = 242)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (18)
, C_Lexique_galgas_5F_scanner::kToken__2C_, REDUCE (18)
, END
// State S59 (index = 247)
, C_Lexique_galgas_5F_scanner::kToken__3B_, REDUCE (15)
, END} ;

static const uint32_t gActionTableIndex [60] = {
  0  // S0
, 3  // S1
, 6  // S2
, 9  // S3
, 12  // S4
, 15  // S5
, 22  // S6
, 25  // S7
, 30  // S8
, 33  // S9
, 36  // S10
, 39  // S11
, 42  // S12
, 49  // S13
, 52  // S14
, 57  // S15
, 60  // S16
, 63  // S17
, 66  // S18
, 69  // S19
, 74  // S20
, 77  // S21
, 84  // S22
, 91  // S23
, 94  // S24
, 97  // S25
, 104  // S26
, 109  // S27
, 114  // S28
, 117  // S29
, 120  // S30
, 123  // S31
, 126  // S32
, 129  // S33
, 132  // S34
, 139  // S35
, 142  // S36
, 145  // S37
, 154  // S38
, 159  // S39
, 166  // S40
, 171  // S41
, 174  // S42
, 179  // S43
, 184  // S44
, 187  // S45
, 190  // S46
, 193  // S47
, 196  // S48
, 199  // S49
, 202  // S50
, 209  // S51
, 212  // S52
, 221  // S53
, 228  // S54
, 231  // S55
, 234  // S56
, 239  // S57
, 242  // S58
, 247  // S59
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//                        SLR states successors table                          *
//                                                                             *
//-----------------------------------------------------------------------------*

// Successor tables handle non terminal successors ;
// an entry is (non_terminal_symbol, n) ; successor is state n.

static const int16_t gSuccessorTable0 [3] = {0, 2, -1} ;

static const int16_t gSuccessorTable5 [3] = {1, 8, -1} ;

static const int16_t gSuccessorTable7 [3] = {3, 12, -1} ;

static const int16_t gSuccessorTable12 [3] = {1, 17, -1} ;

static const int16_t gSuccessorTable14 [3] = {2, 20, -1} ;

static const int16_t gSuccessorTable19 [3] = {2, 24, -1} ;

static const int16_t gSuccessorTable22 [3] = {4, 28, -1} ;

static const int16_t gSuccessorTable25 [3] = {1, 29, -1} ;

static const int16_t gSuccessorTable27 [3] = {5, 33, -1} ;

static const int16_t gSuccessorTable37 [3] = {7, 42, -1} ;

static const int16_t gSuccessorTable38 [3] = {8, 44, -1} ;

static const int16_t gSuccessorTable39 [3] = {4, 45, -1} ;

static const int16_t gSuccessorTable42 [3] = {6, 48, -1} ;

static const int16_t gSuccessorTable43 [3] = {8, 49, -1} ;

static const int16_t gSuccessorTable50 [3] = {4, 54, -1} ;

static const int16_t gSuccessorTable52 [3] = {7, 56, -1} ;

static const int16_t gSuccessorTable53 [3] = {4, 57, -1} ;

static const int16_t gSuccessorTable56 [3] = {6, 59, -1} ;

static const int16_t * gSuccessorTable [60] = {
gSuccessorTable0, NULL, NULL, NULL, 
  NULL, gSuccessorTable5, NULL, gSuccessorTable7, 
  NULL, NULL, NULL, NULL, 
  gSuccessorTable12, NULL, gSuccessorTable14, NULL, 
  NULL, NULL, NULL, gSuccessorTable19, 
  NULL, NULL, gSuccessorTable22, NULL, 
  NULL, gSuccessorTable25, NULL, gSuccessorTable27, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, NULL, NULL, 
  NULL, gSuccessorTable37, gSuccessorTable38, gSuccessorTable39, 
  NULL, NULL, gSuccessorTable42, gSuccessorTable43, 
  NULL, NULL, NULL, NULL, 
  NULL, NULL, gSuccessorTable50, NULL, 
  gSuccessorTable52, gSuccessorTable53, NULL, NULL, 
  gSuccessorTable56, NULL, NULL, NULL} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//      Production rules infos (left non terminal, size of right string)       *
//                                                                             *
//-----------------------------------------------------------------------------*

static const int16_t gProductionsTable [22 * 2] = {
  0, 8,
  1, 0,
  1, 6,
  1, 3,
  2, 0,
  2, 2,
  3, 3,
  3, 5,
  4, 0,
  4, 7,
  4, 7,
  4, 5,
  5, 0,
  5, 1,
  6, 0,
  6, 4,
  7, 0,
  7, 1,
  7, 5,
  8, 0,
  8, 2,
  9, 1
} ;

//-----------------------------------------------------------------------------*
//                                                                             *
//          'gui_component_start_symbol' non terminal implementation           *
//                                                                             *
//-----------------------------------------------------------------------------*

void cGrammar_guiGrammar::nt_gui_5F_component_5F_start_5F_symbol_parse (C_String & ioSyntaxDirectedTranslationResult,
                                C_Lexique_galgas_5F_scanner * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_guiSyntax_gui_5F_component_5F_start_5F_symbol_i0_parse(ioSyntaxDirectedTranslationResult, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_guiGrammar::nt_gui_5F_component_5F_start_5F_symbol_indexing (C_Lexique_galgas_5F_scanner * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_guiSyntax_gui_5F_component_5F_start_5F_symbol_i0_indexing(inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
    break ;
  }
}

void cGrammar_guiGrammar::nt_gui_5F_component_5F_start_5F_symbol_ (GALGAS_guiComponentAST &  parameter_1,
                                C_String & ioSyntaxDirectedTranslationResult,
                                C_Lexique_galgas_5F_scanner * inLexique) {
  switch (inLexique->nextProductionIndex ()) {
  case 0 :
      rule_guiSyntax_gui_5F_component_5F_start_5F_symbol_i0_(parameter_1, ioSyntaxDirectedTranslationResult, inLexique) ;
    break ;
  default :
    inLexique->internalBottomUpParserError (HERE) ;
  }
}

void cGrammar_guiGrammar::performIndexing (C_Compiler * inCompiler,
             const C_String & inSourceFilePath) {
  C_Lexique_galgas_5F_scanner * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_galgas_5F_scanner (inCompiler, "", "", inSourceFilePath COMMA_HERE)) ;
  scanner->enableIndexing () ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable, gNonTerminalNames,
                                                     gActionTableIndex, gSuccessorTable,
                                                     gProductionsTable) ;
    if (ok) {
      cGrammar_guiGrammar grammar ;
      grammar.nt_gui_5F_component_5F_start_5F_symbol_indexing (scanner) ;
    }
    scanner->generateIndexFile () ;
  }
  macroDetachSharedObject (scanner) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//                    Grammar start symbol implementation                      *
//                                                                             *
//-----------------------------------------------------------------------------*

void cGrammar_guiGrammar::_performSourceFileParsing_ (C_Compiler * inCompiler,
                                C_String & ioSyntaxDirectedTranslationResult,
                                GALGAS_lstring inFilePath,
                                GALGAS_guiComponentAST &  parameter_1
                                COMMA_LOCATION_ARGS) {
  if (inFilePath.isValid ()) {
    const GALGAS_string filePathAsString = inFilePath.reader_string (HERE) ;
    C_String filePath = filePathAsString.stringValue () ;
    if (! C_FileManager::isAbsolutePath (filePath)) {
      filePath = inCompiler->sourceFilePath ().stringByDeletingLastPathComponent ().stringByAppendingPathComponent (filePath) ;
    }
    if (C_FileManager::fileExistsAtPath (filePath)) {
      C_Lexique_galgas_5F_scanner * scanner = NULL ;
      macroMyNew (scanner, C_Lexique_galgas_5F_scanner (inCompiler, "", "", filePath COMMA_HERE)) ;
      if (scanner->sourceText () != NULL) {
        const bool ok = scanner->performBottomUpParsing (gActionTable, gNonTerminalNames,
                                                         gActionTableIndex, gSuccessorTable,
                                                         gProductionsTable) ;
        if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
          cGrammar_guiGrammar grammar ;
          grammar.nt_gui_5F_component_5F_start_5F_symbol_ (parameter_1, ioSyntaxDirectedTranslationResult, scanner) ;
        }
      }else{
        C_String message ;
        message << "the '" << filePath << "' file exists, but cannot be read" ;
        const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
        inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
        parameter_1.drop () ;
    }
    macroDetachSharedObject (scanner) ;
  }else{
    C_String message ;
    message << "the '" << filePath << "' file does not exist" ;
    const GALGAS_location errorLocation (inFilePath.reader_location (THERE)) ;
    inCompiler->semanticErrorAtLocation (errorLocation, message COMMA_THERE) ;
    parameter_1.drop () ;
    }
  }
}

//-----------------------------------------------------------------------------*

void cGrammar_guiGrammar::_performSourceStringParsing_ (C_Compiler * inCompiler,
                                C_String & ioSyntaxDirectedTranslationResult,
                                GALGAS_string inSourceString,
                                GALGAS_guiComponentAST &  parameter_1
                                COMMA_UNUSED_LOCATION_ARGS) {
  C_Lexique_galgas_5F_scanner * scanner = NULL ;
  macroMyNew (scanner, C_Lexique_galgas_5F_scanner (inCompiler, inSourceString.stringValue (), "" COMMA_HERE)) ;
  if (scanner->sourceText () != NULL) {
    const bool ok = scanner->performBottomUpParsing (gActionTable, gNonTerminalNames,
                                                     gActionTableIndex, gSuccessorTable,
                                                     gProductionsTable) ;
    if (ok && ! executionModeIsSyntaxAnalysisOnly ()) {
      cGrammar_guiGrammar grammar ;
      grammar.nt_gui_5F_component_5F_start_5F_symbol_ (parameter_1, ioSyntaxDirectedTranslationResult, scanner) ;
        scanner->appendLastSeparatorTo (ioSyntaxDirectedTranslationResult) ;
      }
  }
  macroDetachSharedObject (scanner) ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_0' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_0 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 1 2 3
  return inLexique->nextProductionIndex () - 0 ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_1' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_1 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 4 5
  return inLexique->nextProductionIndex () - 3 ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_2' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_2 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 6 7
  return inLexique->nextProductionIndex () - 5 ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_3' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_3 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 8 9 10 11
  return inLexique->nextProductionIndex () - 7 ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_4' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_4 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 12 13
  return inLexique->nextProductionIndex () - 11 ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_5' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_5 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 14 15
  return inLexique->nextProductionIndex () - 13 ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_6' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_6 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 16 17 18
  return inLexique->nextProductionIndex () - 15 ;
}

//-----------------------------------------------------------------------------*
//                                                                             *
//              'select_guiSyntax_7' non terminal implementation               *
//                                                                             *
//-----------------------------------------------------------------------------*

int32_t cGrammar_guiGrammar::select_guiSyntax_7 (C_Lexique_galgas_5F_scanner * inLexique) {
// Productions numbers : 19 20
  return inLexique->nextProductionIndex () - 18 ;
}

//-----------------------------------------------------------------------------*

